
Stepper_Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005872  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00005872  00005906  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080016a  0080016a  00005a10  2**0
                  ALLOC
  3 .stab         00004a64  00000000  00000000  00005a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001102  00000000  00000000  0000a474  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000b576  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000b6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000b865  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000d8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000e9ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000f930  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000fab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000fd72  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e7       	ldi	r30, 0x72	; 114
      68:	f8 e5       	ldi	r31, 0x58	; 88
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4d 28 	call	0x509a	; 0x509a <main>
      8a:	0c 94 37 2c 	jmp	0x586e	; 0x586e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 00 2c 	jmp	0x5800	; 0x5800 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e4       	ldi	r26, 0x4A	; 74
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 28 2c 	jmp	0x5850	; 0x5850 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 28 2c 	jmp	0x5850	; 0x5850 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 00 2c 	jmp	0x5800	; 0x5800 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e4       	ldi	r24, 0x4A	; 74
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1c 2c 	jmp	0x5838	; 0x5838 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 08 2c 	jmp	0x5810	; 0x5810 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e4       	ldi	r22, 0x4A	; 74
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 24 2c 	jmp	0x5848	; 0x5848 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 28 2c 	jmp	0x5850	; 0x5850 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 28 2c 	jmp	0x5850	; 0x5850 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0c 2c 	jmp	0x5818	; 0x5818 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 28 2c 	jmp	0x5850	; 0x5850 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 10 2c 	jmp	0x5820	; 0x5820 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2c 2c 	jmp	0x5858	; 0x5858 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f e3       	ldi	r24, 0x3F	; 63
     cb4:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	80 83       	st	Z, r24

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1

}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2e 97       	sbiw	r28, 0x0e	; 14
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	8a 83       	std	Y+2, r24	; 0x02
     cfc:	6b 83       	std	Y+3, r22	; 0x03
     cfe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x26>
     d0a:	0d c1       	rjmp	.+538    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x2e>
     d12:	09 c1       	rjmp	.+530    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d20:	02 c1       	rjmp	.+516    	; 0xf26 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3e 87       	std	Y+14, r19	; 0x0e
     d2a:	2d 87       	std	Y+13, r18	; 0x0d
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_u8SetPinDirection+0x52>
     d36:	4f c0       	rjmp	.+158    	; 0xdd6 <DIO_u8SetPinDirection+0xf0>
     d38:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_u8SetPinDirection+0x66>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <DIO_u8SetPinDirection+0x80>
     d4a:	ee c0       	rjmp	.+476    	; 0xf28 <DIO_u8SetPinDirection+0x242>
     d4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_u8SetPinDirection+0x72>
     d56:	77 c0       	rjmp	.+238    	; 0xe46 <DIO_u8SetPinDirection+0x160>
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_u8SetPinDirection+0x7e>
     d62:	a9 c0       	rjmp	.+338    	; 0xeb6 <DIO_u8SetPinDirection+0x1d0>
     d64:	e1 c0       	rjmp	.+450    	; 0xf28 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3c 87       	std	Y+12, r19	; 0x0c
     d6e:	2b 87       	std	Y+11, r18	; 0x0b
     d70:	8b 85       	ldd	r24, Y+11	; 0x0b
     d72:	9c 85       	ldd	r25, Y+12	; 0x0c
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	31 f0       	breq	.+12     	; 0xd84 <DIO_u8SetPinDirection+0x9e>
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	21 30       	cpi	r18, 0x01	; 1
     d7e:	31 05       	cpc	r19, r1
     d80:	b1 f0       	breq	.+44     	; 0xdae <DIO_u8SetPinDirection+0xc8>
     d82:	d2 c0       	rjmp	.+420    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d84:	aa e3       	ldi	r26, 0x3A	; 58
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ea e3       	ldi	r30, 0x3A	; 58
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_u8SetPinDirection+0xbc>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_u8SetPinDirection+0xb8>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	bd c0       	rjmp	.+378    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     dae:	aa e3       	ldi	r26, 0x3A	; 58
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_u8SetPinDirection+0xe6>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_u8SetPinDirection+0xe2>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	a9 c0       	rjmp	.+338    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	3a 87       	std	Y+10, r19	; 0x0a
     dde:	29 87       	std	Y+9, r18	; 0x09
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	31 f0       	breq	.+12     	; 0xdf4 <DIO_u8SetPinDirection+0x10e>
     de8:	29 85       	ldd	r18, Y+9	; 0x09
     dea:	3a 85       	ldd	r19, Y+10	; 0x0a
     dec:	21 30       	cpi	r18, 0x01	; 1
     dee:	31 05       	cpc	r19, r1
     df0:	b1 f0       	breq	.+44     	; 0xe1e <DIO_u8SetPinDirection+0x138>
     df2:	9a c0       	rjmp	.+308    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     df4:	a7 e3       	ldi	r26, 0x37	; 55
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_u8SetPinDirection+0x12c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_u8SetPinDirection+0x128>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	85 c0       	rjmp	.+266    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e1e:	a7 e3       	ldi	r26, 0x37	; 55
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e3       	ldi	r30, 0x37	; 55
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_u8SetPinDirection+0x156>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_u8SetPinDirection+0x152>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	71 c0       	rjmp	.+226    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	38 87       	std	Y+8, r19	; 0x08
     e4e:	2f 83       	std	Y+7, r18	; 0x07
     e50:	8f 81       	ldd	r24, Y+7	; 0x07
     e52:	98 85       	ldd	r25, Y+8	; 0x08
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	31 f0       	breq	.+12     	; 0xe64 <DIO_u8SetPinDirection+0x17e>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	21 30       	cpi	r18, 0x01	; 1
     e5e:	31 05       	cpc	r19, r1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <DIO_u8SetPinDirection+0x1a8>
     e62:	62 c0       	rjmp	.+196    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x19c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0x198>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	4d c0       	rjmp	.+154    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinDirection+0x1c6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinDirection+0x1c2>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	39 c0       	rjmp	.+114    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3e 83       	std	Y+6, r19	; 0x06
     ebe:	2d 83       	std	Y+5, r18	; 0x05
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	31 f0       	breq	.+12     	; 0xed4 <DIO_u8SetPinDirection+0x1ee>
     ec8:	2d 81       	ldd	r18, Y+5	; 0x05
     eca:	3e 81       	ldd	r19, Y+6	; 0x06
     ecc:	21 30       	cpi	r18, 0x01	; 1
     ece:	31 05       	cpc	r19, r1
     ed0:	b1 f0       	breq	.+44     	; 0xefe <DIO_u8SetPinDirection+0x218>
     ed2:	2a c0       	rjmp	.+84     	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_u8SetPinDirection+0x20c>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_u8SetPinDirection+0x208>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     efe:	a1 e3       	ldi	r26, 0x31	; 49
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e1 e3       	ldi	r30, 0x31	; 49
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_u8SetPinDirection+0x236>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_u8SetPinDirection+0x232>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f26:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	2e 96       	adiw	r28, 0x0e	; 14
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2e 97       	sbiw	r28, 0x0e	; 14
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	6b 83       	std	Y+3, r22	; 0x03
     f54:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <DIO_u8SetPinValue+0x26>
     f60:	0c c1       	rjmp	.+536    	; 0x117a <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3e 87       	std	Y+14, r19	; 0x0e
     f6a:	2d 87       	std	Y+13, r18	; 0x0d
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <DIO_u8SetPinValue+0x3c>
     f76:	51 c0       	rjmp	.+162    	; 0x101a <DIO_u8SetPinValue+0xde>
     f78:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	2c f4       	brge	.+10     	; 0xf8c <DIO_u8SetPinValue+0x50>
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	71 f0       	breq	.+28     	; 0xfa6 <DIO_u8SetPinValue+0x6a>
     f8a:	f5 c0       	rjmp	.+490    	; 0x1176 <DIO_u8SetPinValue+0x23a>
     f8c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f8e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_u8SetPinValue+0x5c>
     f96:	7b c0       	rjmp	.+246    	; 0x108e <DIO_u8SetPinValue+0x152>
     f98:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_u8SetPinValue+0x68>
     fa2:	af c0       	rjmp	.+350    	; 0x1102 <DIO_u8SetPinValue+0x1c6>
     fa4:	e8 c0       	rjmp	.+464    	; 0x1176 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3c 87       	std	Y+12, r19	; 0x0c
     fae:	2b 87       	std	Y+11, r18	; 0x0b
     fb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <DIO_u8SetPinValue+0x88>
     fb8:	2b 85       	ldd	r18, Y+11	; 0x0b
     fba:	3c 85       	ldd	r19, Y+12	; 0x0c
     fbc:	21 30       	cpi	r18, 0x01	; 1
     fbe:	31 05       	cpc	r19, r1
     fc0:	b1 f0       	breq	.+44     	; 0xfee <DIO_u8SetPinValue+0xb2>
     fc2:	29 c0       	rjmp	.+82     	; 0x1016 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fc4:	ab e3       	ldi	r26, 0x3B	; 59
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e3       	ldi	r30, 0x3B	; 59
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_u8SetPinValue+0xa6>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_u8SetPinValue+0xa2>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	c7 c0       	rjmp	.+398    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fee:	ab e3       	ldi	r26, 0x3B	; 59
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	eb e3       	ldi	r30, 0x3B	; 59
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_u8SetPinValue+0xd0>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_u8SetPinValue+0xcc>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	b3 c0       	rjmp	.+358    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	b1 c0       	rjmp	.+354    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3a 87       	std	Y+10, r19	; 0x0a
    1022:	29 87       	std	Y+9, r18	; 0x09
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	31 f0       	breq	.+12     	; 0x1038 <DIO_u8SetPinValue+0xfc>
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	21 30       	cpi	r18, 0x01	; 1
    1032:	31 05       	cpc	r19, r1
    1034:	b1 f0       	breq	.+44     	; 0x1062 <DIO_u8SetPinValue+0x126>
    1036:	29 c0       	rjmp	.+82     	; 0x108a <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_u8SetPinValue+0x11a>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_u8SetPinValue+0x116>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	8d c0       	rjmp	.+282    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1062:	a8 e3       	ldi	r26, 0x38	; 56
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e8 e3       	ldi	r30, 0x38	; 56
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinValue+0x144>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinValue+0x140>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	79 c0       	rjmp	.+242    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	77 c0       	rjmp	.+238    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	38 87       	std	Y+8, r19	; 0x08
    1096:	2f 83       	std	Y+7, r18	; 0x07
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	31 f0       	breq	.+12     	; 0x10ac <DIO_u8SetPinValue+0x170>
    10a0:	2f 81       	ldd	r18, Y+7	; 0x07
    10a2:	38 85       	ldd	r19, Y+8	; 0x08
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	b1 f0       	breq	.+44     	; 0x10d6 <DIO_u8SetPinValue+0x19a>
    10aa:	29 c0       	rjmp	.+82     	; 0x10fe <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8SetPinValue+0x18e>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_u8SetPinValue+0x18a>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	53 c0       	rjmp	.+166    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8SetPinValue+0x1b8>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8SetPinValue+0x1b4>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	3f c0       	rjmp	.+126    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	3d c0       	rjmp	.+122    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3e 83       	std	Y+6, r19	; 0x06
    110a:	2d 83       	std	Y+5, r18	; 0x05
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	31 f0       	breq	.+12     	; 0x1120 <DIO_u8SetPinValue+0x1e4>
    1114:	2d 81       	ldd	r18, Y+5	; 0x05
    1116:	3e 81       	ldd	r19, Y+6	; 0x06
    1118:	21 30       	cpi	r18, 0x01	; 1
    111a:	31 05       	cpc	r19, r1
    111c:	b1 f0       	breq	.+44     	; 0x114a <DIO_u8SetPinValue+0x20e>
    111e:	29 c0       	rjmp	.+82     	; 0x1172 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1120:	a2 e3       	ldi	r26, 0x32	; 50
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e2 e3       	ldi	r30, 0x32	; 50
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8SetPinValue+0x202>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8SetPinValue+0x1fe>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	19 c0       	rjmp	.+50     	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    114a:	a2 e3       	ldi	r26, 0x32	; 50
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e2 e3       	ldi	r30, 0x32	; 50
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_u8SetPinValue+0x22c>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_u8SetPinValue+0x228>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	05 c0       	rjmp	.+10     	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	03 c0       	rjmp	.+6      	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	01 c0       	rjmp	.+2      	; 0x117c <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    117a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	2e 96       	adiw	r28, 0x0e	; 14
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	28 97       	sbiw	r28, 0x08	; 8
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	6c 83       	std	Y+4, r22	; 0x04
    11a8:	5e 83       	std	Y+6, r21	; 0x06
    11aa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <DIO_u8GetPinValue+0x28>
    11b6:	a1 c0       	rjmp	.+322    	; 0x12fa <DIO_u8GetPinValue+0x16a>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <DIO_u8GetPinValue+0x30>
    11be:	9d c0       	rjmp	.+314    	; 0x12fa <DIO_u8GetPinValue+0x16a>
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	09 f4       	brne	.+2      	; 0x11ca <DIO_u8GetPinValue+0x3a>
    11c8:	98 c0       	rjmp	.+304    	; 0x12fa <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	38 87       	std	Y+8, r19	; 0x08
    11d2:	2f 83       	std	Y+7, r18	; 0x07
    11d4:	4f 81       	ldd	r20, Y+7	; 0x07
    11d6:	58 85       	ldd	r21, Y+8	; 0x08
    11d8:	41 30       	cpi	r20, 0x01	; 1
    11da:	51 05       	cpc	r21, r1
    11dc:	a9 f1       	breq	.+106    	; 0x1248 <DIO_u8GetPinValue+0xb8>
    11de:	8f 81       	ldd	r24, Y+7	; 0x07
    11e0:	98 85       	ldd	r25, Y+8	; 0x08
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	34 f4       	brge	.+12     	; 0x11f4 <DIO_u8GetPinValue+0x64>
    11e8:	2f 81       	ldd	r18, Y+7	; 0x07
    11ea:	38 85       	ldd	r19, Y+8	; 0x08
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	71 f0       	breq	.+28     	; 0x120e <DIO_u8GetPinValue+0x7e>
    11f2:	81 c0       	rjmp	.+258    	; 0x12f6 <DIO_u8GetPinValue+0x166>
    11f4:	4f 81       	ldd	r20, Y+7	; 0x07
    11f6:	58 85       	ldd	r21, Y+8	; 0x08
    11f8:	42 30       	cpi	r20, 0x02	; 2
    11fa:	51 05       	cpc	r21, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_u8GetPinValue+0x70>
    11fe:	41 c0       	rjmp	.+130    	; 0x1282 <DIO_u8GetPinValue+0xf2>
    1200:	8f 81       	ldd	r24, Y+7	; 0x07
    1202:	98 85       	ldd	r25, Y+8	; 0x08
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <DIO_u8GetPinValue+0x7c>
    120a:	58 c0       	rjmp	.+176    	; 0x12bc <DIO_u8GetPinValue+0x12c>
    120c:	74 c0       	rjmp	.+232    	; 0x12f6 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    120e:	e9 e3       	ldi	r30, 0x39	; 57
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_u8GetPinValue+0x96>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_u8GetPinValue+0x92>
    122a:	ca 01       	movw	r24, r20
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 23       	and	r24, r24
    1234:	21 f4       	brne	.+8      	; 0x123e <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1236:	ed 81       	ldd	r30, Y+5	; 0x05
    1238:	fe 81       	ldd	r31, Y+6	; 0x06
    123a:	10 82       	st	Z, r1
    123c:	5f c0       	rjmp	.+190    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    123e:	ed 81       	ldd	r30, Y+5	; 0x05
    1240:	fe 81       	ldd	r31, Y+6	; 0x06
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 83       	st	Z, r24
    1246:	5a c0       	rjmp	.+180    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1248:	e6 e3       	ldi	r30, 0x36	; 54
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8GetPinValue+0xd0>
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8GetPinValue+0xcc>
    1264:	ca 01       	movw	r24, r20
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	88 23       	and	r24, r24
    126e:	21 f4       	brne	.+8      	; 0x1278 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1270:	ed 81       	ldd	r30, Y+5	; 0x05
    1272:	fe 81       	ldd	r31, Y+6	; 0x06
    1274:	10 82       	st	Z, r1
    1276:	42 c0       	rjmp	.+132    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1278:	ed 81       	ldd	r30, Y+5	; 0x05
    127a:	fe 81       	ldd	r31, Y+6	; 0x06
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 83       	st	Z, r24
    1280:	3d c0       	rjmp	.+122    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1282:	e3 e3       	ldi	r30, 0x33	; 51
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8GetPinValue+0x10a>
    1296:	55 95       	asr	r21
    1298:	47 95       	ror	r20
    129a:	8a 95       	dec	r24
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8GetPinValue+0x106>
    129e:	ca 01       	movw	r24, r20
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	88 23       	and	r24, r24
    12a8:	21 f4       	brne	.+8      	; 0x12b2 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12aa:	ed 81       	ldd	r30, Y+5	; 0x05
    12ac:	fe 81       	ldd	r31, Y+6	; 0x06
    12ae:	10 82       	st	Z, r1
    12b0:	25 c0       	rjmp	.+74     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12b2:	ed 81       	ldd	r30, Y+5	; 0x05
    12b4:	fe 81       	ldd	r31, Y+6	; 0x06
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 83       	st	Z, r24
    12ba:	20 c0       	rjmp	.+64     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12bc:	e0 e3       	ldi	r30, 0x30	; 48
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_u8GetPinValue+0x144>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_u8GetPinValue+0x140>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	88 23       	and	r24, r24
    12e2:	21 f4       	brne	.+8      	; 0x12ec <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12e4:	ed 81       	ldd	r30, Y+5	; 0x05
    12e6:	fe 81       	ldd	r31, Y+6	; 0x06
    12e8:	10 82       	st	Z, r1
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12ec:	ed 81       	ldd	r30, Y+5	; 0x05
    12ee:	fe 81       	ldd	r31, Y+6	; 0x06
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 83       	st	Z, r24
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    12f6:	1a 82       	std	Y+2, r1	; 0x02
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12fa:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12fe:	28 96       	adiw	r28, 0x08	; 8
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	2d 97       	sbiw	r28, 0x0d	; 13
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 23       	and	r24, r24
    1330:	21 f0       	breq	.+8      	; 0x133a <DIO_u8SetPortDirection+0x2a>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	09 f0       	breq	.+2      	; 0x133a <DIO_u8SetPortDirection+0x2a>
    1338:	82 c0       	rjmp	.+260    	; 0x143e <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3d 87       	std	Y+13, r19	; 0x0d
    1342:	2c 87       	std	Y+12, r18	; 0x0c
    1344:	8c 85       	ldd	r24, Y+12	; 0x0c
    1346:	9d 85       	ldd	r25, Y+13	; 0x0d
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	71 f1       	breq	.+92     	; 0x13aa <DIO_u8SetPortDirection+0x9a>
    134e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1350:	3d 85       	ldd	r19, Y+13	; 0x0d
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <DIO_u8SetPortDirection+0x52>
    1358:	8c 85       	ldd	r24, Y+12	; 0x0c
    135a:	9d 85       	ldd	r25, Y+13	; 0x0d
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	69 f0       	breq	.+26     	; 0x137a <DIO_u8SetPortDirection+0x6a>
    1360:	6c c0       	rjmp	.+216    	; 0x143a <DIO_u8SetPortDirection+0x12a>
    1362:	2c 85       	ldd	r18, Y+12	; 0x0c
    1364:	3d 85       	ldd	r19, Y+13	; 0x0d
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	b9 f1       	breq	.+110    	; 0x13da <DIO_u8SetPortDirection+0xca>
    136c:	8c 85       	ldd	r24, Y+12	; 0x0c
    136e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <DIO_u8SetPortDirection+0x68>
    1376:	49 c0       	rjmp	.+146    	; 0x140a <DIO_u8SetPortDirection+0xfa>
    1378:	60 c0       	rjmp	.+192    	; 0x143a <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3b 87       	std	Y+11, r19	; 0x0b
    1382:	2a 87       	std	Y+10, r18	; 0x0a
    1384:	8a 85       	ldd	r24, Y+10	; 0x0a
    1386:	9b 85       	ldd	r25, Y+11	; 0x0b
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	31 f0       	breq	.+12     	; 0x1398 <DIO_u8SetPortDirection+0x88>
    138c:	2a 85       	ldd	r18, Y+10	; 0x0a
    138e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1390:	21 30       	cpi	r18, 0x01	; 1
    1392:	31 05       	cpc	r19, r1
    1394:	29 f0       	breq	.+10     	; 0x13a0 <DIO_u8SetPortDirection+0x90>
    1396:	54 c0       	rjmp	.+168    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	10 82       	st	Z, r1
    139e:	50 c0       	rjmp	.+160    	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    13a0:	ea e3       	ldi	r30, 0x3A	; 58
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	80 83       	st	Z, r24
    13a8:	4b c0       	rjmp	.+150    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	39 87       	std	Y+9, r19	; 0x09
    13b2:	28 87       	std	Y+8, r18	; 0x08
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	99 85       	ldd	r25, Y+9	; 0x09
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <DIO_u8SetPortDirection+0xb8>
    13bc:	28 85       	ldd	r18, Y+8	; 0x08
    13be:	39 85       	ldd	r19, Y+9	; 0x09
    13c0:	21 30       	cpi	r18, 0x01	; 1
    13c2:	31 05       	cpc	r19, r1
    13c4:	29 f0       	breq	.+10     	; 0x13d0 <DIO_u8SetPortDirection+0xc0>
    13c6:	3c c0       	rjmp	.+120    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    13c8:	e7 e3       	ldi	r30, 0x37	; 55
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	10 82       	st	Z, r1
    13ce:	38 c0       	rjmp	.+112    	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    13d0:	e7 e3       	ldi	r30, 0x37	; 55
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	80 83       	st	Z, r24
    13d8:	33 c0       	rjmp	.+102    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3f 83       	std	Y+7, r19	; 0x07
    13e2:	2e 83       	std	Y+6, r18	; 0x06
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <DIO_u8SetPortDirection+0xe8>
    13ec:	2e 81       	ldd	r18, Y+6	; 0x06
    13ee:	3f 81       	ldd	r19, Y+7	; 0x07
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	29 f0       	breq	.+10     	; 0x1400 <DIO_u8SetPortDirection+0xf0>
    13f6:	24 c0       	rjmp	.+72     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    13f8:	e4 e3       	ldi	r30, 0x34	; 52
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	10 82       	st	Z, r1
    13fe:	20 c0       	rjmp	.+64     	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    1400:	e4 e3       	ldi	r30, 0x34	; 52
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	80 83       	st	Z, r24
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3d 83       	std	Y+5, r19	; 0x05
    1412:	2c 83       	std	Y+4, r18	; 0x04
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	31 f0       	breq	.+12     	; 0x1428 <DIO_u8SetPortDirection+0x118>
    141c:	2c 81       	ldd	r18, Y+4	; 0x04
    141e:	3d 81       	ldd	r19, Y+5	; 0x05
    1420:	21 30       	cpi	r18, 0x01	; 1
    1422:	31 05       	cpc	r19, r1
    1424:	29 f0       	breq	.+10     	; 0x1430 <DIO_u8SetPortDirection+0x120>
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    1428:	e1 e3       	ldi	r30, 0x31	; 49
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	10 82       	st	Z, r1
    142e:	08 c0       	rjmp	.+16     	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	80 83       	st	Z, r24
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    143e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	2d 96       	adiw	r28, 0x0d	; 13
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_u8SetPortValue+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_u8SetPortValue+0x8>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3d 83       	std	Y+5, r19	; 0x05
    1472:	2c 83       	std	Y+4, r18	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	d1 f0       	breq	.+52     	; 0x14b2 <DIO_u8SetPortValue+0x5e>
    147e:	2c 81       	ldd	r18, Y+4	; 0x04
    1480:	3d 81       	ldd	r19, Y+5	; 0x05
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	2c f4       	brge	.+10     	; 0x1492 <DIO_u8SetPortValue+0x3e>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	61 f0       	breq	.+24     	; 0x14a8 <DIO_u8SetPortValue+0x54>
    1490:	1f c0       	rjmp	.+62     	; 0x14d0 <DIO_u8SetPortValue+0x7c>
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	81 f0       	breq	.+32     	; 0x14bc <DIO_u8SetPortValue+0x68>
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	81 f0       	breq	.+32     	; 0x14c6 <DIO_u8SetPortValue+0x72>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    14a8:	eb e3       	ldi	r30, 0x3B	; 59
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	80 83       	st	Z, r24
    14b0:	10 c0       	rjmp	.+32     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    14b2:	e8 e3       	ldi	r30, 0x38	; 56
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	80 83       	st	Z, r24
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	80 83       	st	Z, r24
    14c4:	06 c0       	rjmp	.+12     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    14c6:	e2 e3       	ldi	r30, 0x32	; 50
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	80 83       	st	Z, r24
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    14d0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_u8GetPortValue+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_u8GetPortValue+0x8>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <DIO_u8GetPortValue+0xa>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	8a 83       	std	Y+2, r24	; 0x02
    14f4:	7c 83       	std	Y+4, r23	; 0x04
    14f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	e9 f1       	breq	.+122    	; 0x157e <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3e 83       	std	Y+6, r19	; 0x06
    150c:	2d 83       	std	Y+5, r18	; 0x05
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	e1 f0       	breq	.+56     	; 0x1550 <DIO_u8GetPortValue+0x6c>
    1518:	2d 81       	ldd	r18, Y+5	; 0x05
    151a:	3e 81       	ldd	r19, Y+6	; 0x06
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <DIO_u8GetPortValue+0x48>
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	61 f0       	breq	.+24     	; 0x1542 <DIO_u8GetPortValue+0x5e>
    152a:	27 c0       	rjmp	.+78     	; 0x157a <DIO_u8GetPortValue+0x96>
    152c:	2d 81       	ldd	r18, Y+5	; 0x05
    152e:	3e 81       	ldd	r19, Y+6	; 0x06
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	a1 f0       	breq	.+40     	; 0x155e <DIO_u8GetPortValue+0x7a>
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	b1 f0       	breq	.+44     	; 0x156c <DIO_u8GetPortValue+0x88>
    1540:	1c c0       	rjmp	.+56     	; 0x157a <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1542:	e9 e3       	ldi	r30, 0x39	; 57
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	eb 81       	ldd	r30, Y+3	; 0x03
    154a:	fc 81       	ldd	r31, Y+4	; 0x04
    154c:	80 83       	st	Z, r24
    154e:	18 c0       	rjmp	.+48     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1550:	e6 e3       	ldi	r30, 0x36	; 54
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 83       	st	Z, r24
    155c:	11 c0       	rjmp	.+34     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    155e:	e3 e3       	ldi	r30, 0x33	; 51
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	eb 81       	ldd	r30, Y+3	; 0x03
    1566:	fc 81       	ldd	r31, Y+4	; 0x04
    1568:	80 83       	st	Z, r24
    156a:	0a c0       	rjmp	.+20     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    156c:	e0 e3       	ldi	r30, 0x30	; 48
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	eb 81       	ldd	r30, Y+3	; 0x03
    1574:	fc 81       	ldd	r31, Y+4	; 0x04
    1576:	80 83       	st	Z, r24
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    157a:	19 82       	std	Y+1, r1	; 0x01
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    157e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	26 96       	adiw	r28, 0x06	; 6
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <Dashboard_FrameOne>:

u8 Local_u8Ind = 0;
u8 Local_Au8digits[6] = {0};

void Dashboard_FrameOne(void)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	ab 97       	sbiw	r28, 0x2b	; 43
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;

	LCD_voidClearScreen();
    15a8:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 ea       	ldi	r26, 0xA0	; 160
    15b2:	b1 e4       	ldi	r27, 0x41	; 65
    15b4:	8f a3       	std	Y+39, r24	; 0x27
    15b6:	98 a7       	std	Y+40, r25	; 0x28
    15b8:	a9 a7       	std	Y+41, r26	; 0x29
    15ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15bc:	6f a1       	ldd	r22, Y+39	; 0x27
    15be:	78 a5       	ldd	r23, Y+40	; 0x28
    15c0:	89 a5       	ldd	r24, Y+41	; 0x29
    15c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a ef       	ldi	r20, 0xFA	; 250
    15ca:	54 e4       	ldi	r21, 0x44	; 68
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8b a3       	std	Y+35, r24	; 0x23
    15d6:	9c a3       	std	Y+36, r25	; 0x24
    15d8:	ad a3       	std	Y+37, r26	; 0x25
    15da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15dc:	6b a1       	ldd	r22, Y+35	; 0x23
    15de:	7c a1       	ldd	r23, Y+36	; 0x24
    15e0:	8d a1       	ldd	r24, Y+37	; 0x25
    15e2:	9e a1       	ldd	r25, Y+38	; 0x26
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	2c f4       	brge	.+10     	; 0x15fe <Dashboard_FrameOne+0x6a>
		__ticks = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9a a3       	std	Y+34, r25	; 0x22
    15fa:	89 a3       	std	Y+33, r24	; 0x21
    15fc:	3f c0       	rjmp	.+126    	; 0x167c <Dashboard_FrameOne+0xe8>
	else if (__tmp > 65535)
    15fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1600:	7c a1       	ldd	r23, Y+36	; 0x24
    1602:	8d a1       	ldd	r24, Y+37	; 0x25
    1604:	9e a1       	ldd	r25, Y+38	; 0x26
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	4c f5       	brge	.+82     	; 0x1668 <Dashboard_FrameOne+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1616:	6f a1       	ldd	r22, Y+39	; 0x27
    1618:	78 a5       	ldd	r23, Y+40	; 0x28
    161a:	89 a5       	ldd	r24, Y+41	; 0x29
    161c:	9a a5       	ldd	r25, Y+42	; 0x2a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	51 e4       	ldi	r21, 0x41	; 65
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9a a3       	std	Y+34, r25	; 0x22
    163c:	89 a3       	std	Y+33, r24	; 0x21
    163e:	0f c0       	rjmp	.+30     	; 0x165e <Dashboard_FrameOne+0xca>
    1640:	88 ec       	ldi	r24, 0xC8	; 200
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	98 a3       	std	Y+32, r25	; 0x20
    1646:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164a:	98 a1       	ldd	r25, Y+32	; 0x20
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <Dashboard_FrameOne+0xb8>
    1650:	98 a3       	std	Y+32, r25	; 0x20
    1652:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	89 a1       	ldd	r24, Y+33	; 0x21
    1656:	9a a1       	ldd	r25, Y+34	; 0x22
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9a a3       	std	Y+34, r25	; 0x22
    165c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165e:	89 a1       	ldd	r24, Y+33	; 0x21
    1660:	9a a1       	ldd	r25, Y+34	; 0x22
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f7       	brne	.-38     	; 0x1640 <Dashboard_FrameOne+0xac>
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <Dashboard_FrameOne+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1668:	6b a1       	ldd	r22, Y+35	; 0x23
    166a:	7c a1       	ldd	r23, Y+36	; 0x24
    166c:	8d a1       	ldd	r24, Y+37	; 0x25
    166e:	9e a1       	ldd	r25, Y+38	; 0x26
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9a a3       	std	Y+34, r25	; 0x22
    167a:	89 a3       	std	Y+33, r24	; 0x21
    167c:	89 a1       	ldd	r24, Y+33	; 0x21
    167e:	9a a1       	ldd	r25, Y+34	; 0x22
    1680:	9e 8f       	std	Y+30, r25	; 0x1e
    1682:	8d 8f       	std	Y+29, r24	; 0x1d
    1684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <Dashboard_FrameOne+0xf4>
    168c:	9e 8f       	std	Y+30, r25	; 0x1e
    168e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-DC Motor");
    1690:	80 e6       	ldi	r24, 0x60	; 96
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-Stepper Motor");
    16a0:	8b e6       	ldi	r24, 0x6B	; 107
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE1,10);
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	6a e0       	ldi	r22, 0x0A	; 10
    16ac:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"3-Exit");
    16b0:	8b e7       	ldi	r24, 0x7B	; 123
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>

	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    16b8:	ce 01       	movw	r24, r28
    16ba:	8b 96       	adiw	r24, 0x2b	; 43
    16bc:	0e 94 ab 12 	call	0x2556	; 0x2556 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    16c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c2:	8f 3f       	cpi	r24, 0xFF	; 255
    16c4:	c9 f3       	breq	.-14     	; 0x16b8 <Dashboard_FrameOne+0x124>
		{
			if(Local_u8Key == '1') // If pressed key is '1'
    16c6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c8:	81 33       	cpi	r24, 0x31	; 49
    16ca:	19 f4       	brne	.+6      	; 0x16d2 <Dashboard_FrameOne+0x13e>
			{
				Dashboard_FrameTwo();
    16cc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <Dashboard_FrameTwo>
    16d0:	f3 cf       	rjmp	.-26     	; 0x16b8 <Dashboard_FrameOne+0x124>
			}
			else if(Local_u8Key == '2') // If pressed key is '2'
    16d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16d4:	82 33       	cpi	r24, 0x32	; 50
    16d6:	19 f4       	brne	.+6      	; 0x16de <Dashboard_FrameOne+0x14a>
			{
				Dashboard_FrameThree();
    16d8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <Dashboard_FrameThree>
    16dc:	ed cf       	rjmp	.-38     	; 0x16b8 <Dashboard_FrameOne+0x124>
			}
			else if (Local_u8Key == '3') // If pressed key is '2'
    16de:	8b a5       	ldd	r24, Y+43	; 0x2b
    16e0:	83 33       	cpi	r24, 0x33	; 51
    16e2:	51 f7       	brne	.-44     	; 0x16b8 <Dashboard_FrameOne+0x124>
			{
				LCD_voidClearScreen();
    16e4:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a0 ea       	ldi	r26, 0xA0	; 160
    16ee:	b1 e4       	ldi	r27, 0x41	; 65
    16f0:	89 8f       	std	Y+25, r24	; 0x19
    16f2:	9a 8f       	std	Y+26, r25	; 0x1a
    16f4:	ab 8f       	std	Y+27, r26	; 0x1b
    16f6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f8:	69 8d       	ldd	r22, Y+25	; 0x19
    16fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	4a ef       	ldi	r20, 0xFA	; 250
    1706:	54 e4       	ldi	r21, 0x44	; 68
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	8d 8b       	std	Y+21, r24	; 0x15
    1712:	9e 8b       	std	Y+22, r25	; 0x16
    1714:	af 8b       	std	Y+23, r26	; 0x17
    1716:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1718:	6d 89       	ldd	r22, Y+21	; 0x15
    171a:	7e 89       	ldd	r23, Y+22	; 0x16
    171c:	8f 89       	ldd	r24, Y+23	; 0x17
    171e:	98 8d       	ldd	r25, Y+24	; 0x18
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e8       	ldi	r20, 0x80	; 128
    1726:	5f e3       	ldi	r21, 0x3F	; 63
    1728:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    172c:	88 23       	and	r24, r24
    172e:	2c f4       	brge	.+10     	; 0x173a <Dashboard_FrameOne+0x1a6>
		__ticks = 1;
    1730:	81 e0       	ldi	r24, 0x01	; 1
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9c 8b       	std	Y+20, r25	; 0x14
    1736:	8b 8b       	std	Y+19, r24	; 0x13
    1738:	3f c0       	rjmp	.+126    	; 0x17b8 <Dashboard_FrameOne+0x224>
	else if (__tmp > 65535)
    173a:	6d 89       	ldd	r22, Y+21	; 0x15
    173c:	7e 89       	ldd	r23, Y+22	; 0x16
    173e:	8f 89       	ldd	r24, Y+23	; 0x17
    1740:	98 8d       	ldd	r25, Y+24	; 0x18
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	3f ef       	ldi	r19, 0xFF	; 255
    1746:	4f e7       	ldi	r20, 0x7F	; 127
    1748:	57 e4       	ldi	r21, 0x47	; 71
    174a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    174e:	18 16       	cp	r1, r24
    1750:	4c f5       	brge	.+82     	; 0x17a4 <Dashboard_FrameOne+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1752:	69 8d       	ldd	r22, Y+25	; 0x19
    1754:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1756:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1758:	9c 8d       	ldd	r25, Y+28	; 0x1c
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e2       	ldi	r20, 0x20	; 32
    1760:	51 e4       	ldi	r21, 0x41	; 65
    1762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	bc 01       	movw	r22, r24
    176c:	cd 01       	movw	r24, r26
    176e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	9c 8b       	std	Y+20, r25	; 0x14
    1778:	8b 8b       	std	Y+19, r24	; 0x13
    177a:	0f c0       	rjmp	.+30     	; 0x179a <Dashboard_FrameOne+0x206>
    177c:	88 ec       	ldi	r24, 0xC8	; 200
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	9a 8b       	std	Y+18, r25	; 0x12
    1782:	89 8b       	std	Y+17, r24	; 0x11
    1784:	89 89       	ldd	r24, Y+17	; 0x11
    1786:	9a 89       	ldd	r25, Y+18	; 0x12
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <Dashboard_FrameOne+0x1f4>
    178c:	9a 8b       	std	Y+18, r25	; 0x12
    178e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1790:	8b 89       	ldd	r24, Y+19	; 0x13
    1792:	9c 89       	ldd	r25, Y+20	; 0x14
    1794:	01 97       	sbiw	r24, 0x01	; 1
    1796:	9c 8b       	std	Y+20, r25	; 0x14
    1798:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    179a:	8b 89       	ldd	r24, Y+19	; 0x13
    179c:	9c 89       	ldd	r25, Y+20	; 0x14
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	69 f7       	brne	.-38     	; 0x177c <Dashboard_FrameOne+0x1e8>
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <Dashboard_FrameOne+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a4:	6d 89       	ldd	r22, Y+21	; 0x15
    17a6:	7e 89       	ldd	r23, Y+22	; 0x16
    17a8:	8f 89       	ldd	r24, Y+23	; 0x17
    17aa:	98 8d       	ldd	r25, Y+24	; 0x18
    17ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	9c 8b       	std	Y+20, r25	; 0x14
    17b6:	8b 8b       	std	Y+19, r24	; 0x13
    17b8:	8b 89       	ldd	r24, Y+19	; 0x13
    17ba:	9c 89       	ldd	r25, Y+20	; 0x14
    17bc:	98 8b       	std	Y+16, r25	; 0x10
    17be:	8f 87       	std	Y+15, r24	; 0x0f
    17c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c2:	98 89       	ldd	r25, Y+16	; 0x10
    17c4:	01 97       	sbiw	r24, 0x01	; 1
    17c6:	f1 f7       	brne	.-4      	; 0x17c4 <Dashboard_FrameOne+0x230>
    17c8:	98 8b       	std	Y+16, r25	; 0x10
    17ca:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidWriteString((u8*)"GoodLuck!");
    17cc:	82 e8       	ldi	r24, 0x82	; 130
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	90 e8       	ldi	r25, 0x80	; 128
    17d8:	ab e3       	ldi	r26, 0x3B	; 59
    17da:	b5 e4       	ldi	r27, 0x45	; 69
    17dc:	8b 87       	std	Y+11, r24	; 0x0b
    17de:	9c 87       	std	Y+12, r25	; 0x0c
    17e0:	ad 87       	std	Y+13, r26	; 0x0d
    17e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	4a ef       	ldi	r20, 0xFA	; 250
    17f2:	54 e4       	ldi	r21, 0x44	; 68
    17f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f8:	dc 01       	movw	r26, r24
    17fa:	cb 01       	movw	r24, r22
    17fc:	8f 83       	std	Y+7, r24	; 0x07
    17fe:	98 87       	std	Y+8, r25	; 0x08
    1800:	a9 87       	std	Y+9, r26	; 0x09
    1802:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1804:	6f 81       	ldd	r22, Y+7	; 0x07
    1806:	78 85       	ldd	r23, Y+8	; 0x08
    1808:	89 85       	ldd	r24, Y+9	; 0x09
    180a:	9a 85       	ldd	r25, Y+10	; 0x0a
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	2c f4       	brge	.+10     	; 0x1826 <Dashboard_FrameOne+0x292>
		__ticks = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
    1824:	3f c0       	rjmp	.+126    	; 0x18a4 <Dashboard_FrameOne+0x310>
	else if (__tmp > 65535)
    1826:	6f 81       	ldd	r22, Y+7	; 0x07
    1828:	78 85       	ldd	r23, Y+8	; 0x08
    182a:	89 85       	ldd	r24, Y+9	; 0x09
    182c:	9a 85       	ldd	r25, Y+10	; 0x0a
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	3f ef       	ldi	r19, 0xFF	; 255
    1832:	4f e7       	ldi	r20, 0x7F	; 127
    1834:	57 e4       	ldi	r21, 0x47	; 71
    1836:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    183a:	18 16       	cp	r1, r24
    183c:	4c f5       	brge	.+82     	; 0x1890 <Dashboard_FrameOne+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    183e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1840:	7c 85       	ldd	r23, Y+12	; 0x0c
    1842:	8d 85       	ldd	r24, Y+13	; 0x0d
    1844:	9e 85       	ldd	r25, Y+14	; 0x0e
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	40 e2       	ldi	r20, 0x20	; 32
    184c:	51 e4       	ldi	r21, 0x41	; 65
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	bc 01       	movw	r22, r24
    1858:	cd 01       	movw	r24, r26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	0f c0       	rjmp	.+30     	; 0x1886 <Dashboard_FrameOne+0x2f2>
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	9c 81       	ldd	r25, Y+4	; 0x04
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <Dashboard_FrameOne+0x2e0>
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    187c:	8d 81       	ldd	r24, Y+5	; 0x05
    187e:	9e 81       	ldd	r25, Y+6	; 0x06
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	9e 83       	std	Y+6, r25	; 0x06
    1884:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1886:	8d 81       	ldd	r24, Y+5	; 0x05
    1888:	9e 81       	ldd	r25, Y+6	; 0x06
    188a:	00 97       	sbiw	r24, 0x00	; 0
    188c:	69 f7       	brne	.-38     	; 0x1868 <Dashboard_FrameOne+0x2d4>
    188e:	14 c0       	rjmp	.+40     	; 0x18b8 <Dashboard_FrameOne+0x324>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1890:	6f 81       	ldd	r22, Y+7	; 0x07
    1892:	78 85       	ldd	r23, Y+8	; 0x08
    1894:	89 85       	ldd	r24, Y+9	; 0x09
    1896:	9a 85       	ldd	r25, Y+10	; 0x0a
    1898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    189c:	dc 01       	movw	r26, r24
    189e:	cb 01       	movw	r24, r22
    18a0:	9e 83       	std	Y+6, r25	; 0x06
    18a2:	8d 83       	std	Y+5, r24	; 0x05
    18a4:	8d 81       	ldd	r24, Y+5	; 0x05
    18a6:	9e 81       	ldd	r25, Y+6	; 0x06
    18a8:	9a 83       	std	Y+2, r25	; 0x02
    18aa:	89 83       	std	Y+1, r24	; 0x01
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	9a 81       	ldd	r25, Y+2	; 0x02
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	f1 f7       	brne	.-4      	; 0x18b0 <Dashboard_FrameOne+0x31c>
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	ff cf       	rjmp	.-2      	; 0x18b8 <Dashboard_FrameOne+0x324>

000018ba <Dashboard_FrameTwo>:
			}
		}
	}
}
void Dashboard_FrameTwo(void)
{
    18ba:	0f 93       	push	r16
    18bc:	1f 93       	push	r17
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	cd b7       	in	r28, 0x3d	; 61
    18c4:	de b7       	in	r29, 0x3e	; 62
    18c6:	c8 54       	subi	r28, 0x48	; 72
    18c8:	d0 40       	sbci	r29, 0x00	; 0
    18ca:	0f b6       	in	r0, 0x3f	; 63
    18cc:	f8 94       	cli
    18ce:	de bf       	out	0x3e, r29	; 62
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u8 Local_Angle;
	LCD_voidClearScreen();
    18d4:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    18d8:	fe 01       	movw	r30, r28
    18da:	ed 5b       	subi	r30, 0xBD	; 189
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a0 ea       	ldi	r26, 0xA0	; 160
    18e4:	b1 e4       	ldi	r27, 0x41	; 65
    18e6:	80 83       	st	Z, r24
    18e8:	91 83       	std	Z+1, r25	; 0x01
    18ea:	a2 83       	std	Z+2, r26	; 0x02
    18ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ee:	8e 01       	movw	r16, r28
    18f0:	01 5c       	subi	r16, 0xC1	; 193
    18f2:	1f 4f       	sbci	r17, 0xFF	; 255
    18f4:	fe 01       	movw	r30, r28
    18f6:	ed 5b       	subi	r30, 0xBD	; 189
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	60 81       	ld	r22, Z
    18fc:	71 81       	ldd	r23, Z+1	; 0x01
    18fe:	82 81       	ldd	r24, Z+2	; 0x02
    1900:	93 81       	ldd	r25, Z+3	; 0x03
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	4a ef       	ldi	r20, 0xFA	; 250
    1908:	54 e4       	ldi	r21, 0x44	; 68
    190a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190e:	dc 01       	movw	r26, r24
    1910:	cb 01       	movw	r24, r22
    1912:	f8 01       	movw	r30, r16
    1914:	80 83       	st	Z, r24
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	a2 83       	std	Z+2, r26	; 0x02
    191a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191c:	fe 01       	movw	r30, r28
    191e:	ff 96       	adiw	r30, 0x3f	; 63
    1920:	60 81       	ld	r22, Z
    1922:	71 81       	ldd	r23, Z+1	; 0x01
    1924:	82 81       	ldd	r24, Z+2	; 0x02
    1926:	93 81       	ldd	r25, Z+3	; 0x03
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e8       	ldi	r20, 0x80	; 128
    192e:	5f e3       	ldi	r21, 0x3F	; 63
    1930:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1934:	88 23       	and	r24, r24
    1936:	2c f4       	brge	.+10     	; 0x1942 <Dashboard_FrameTwo+0x88>
		__ticks = 1;
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9e af       	std	Y+62, r25	; 0x3e
    193e:	8d af       	std	Y+61, r24	; 0x3d
    1940:	46 c0       	rjmp	.+140    	; 0x19ce <Dashboard_FrameTwo+0x114>
	else if (__tmp > 65535)
    1942:	fe 01       	movw	r30, r28
    1944:	ff 96       	adiw	r30, 0x3f	; 63
    1946:	60 81       	ld	r22, Z
    1948:	71 81       	ldd	r23, Z+1	; 0x01
    194a:	82 81       	ldd	r24, Z+2	; 0x02
    194c:	93 81       	ldd	r25, Z+3	; 0x03
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	3f ef       	ldi	r19, 0xFF	; 255
    1952:	4f e7       	ldi	r20, 0x7F	; 127
    1954:	57 e4       	ldi	r21, 0x47	; 71
    1956:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    195a:	18 16       	cp	r1, r24
    195c:	64 f5       	brge	.+88     	; 0x19b6 <Dashboard_FrameTwo+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195e:	fe 01       	movw	r30, r28
    1960:	ed 5b       	subi	r30, 0xBD	; 189
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	60 81       	ld	r22, Z
    1966:	71 81       	ldd	r23, Z+1	; 0x01
    1968:	82 81       	ldd	r24, Z+2	; 0x02
    196a:	93 81       	ldd	r25, Z+3	; 0x03
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	40 e2       	ldi	r20, 0x20	; 32
    1972:	51 e4       	ldi	r21, 0x41	; 65
    1974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1978:	dc 01       	movw	r26, r24
    197a:	cb 01       	movw	r24, r22
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	9e af       	std	Y+62, r25	; 0x3e
    198a:	8d af       	std	Y+61, r24	; 0x3d
    198c:	0f c0       	rjmp	.+30     	; 0x19ac <Dashboard_FrameTwo+0xf2>
    198e:	88 ec       	ldi	r24, 0xC8	; 200
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9c af       	std	Y+60, r25	; 0x3c
    1994:	8b af       	std	Y+59, r24	; 0x3b
    1996:	8b ad       	ldd	r24, Y+59	; 0x3b
    1998:	9c ad       	ldd	r25, Y+60	; 0x3c
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <Dashboard_FrameTwo+0xe0>
    199e:	9c af       	std	Y+60, r25	; 0x3c
    19a0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    19a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    19a6:	01 97       	sbiw	r24, 0x01	; 1
    19a8:	9e af       	std	Y+62, r25	; 0x3e
    19aa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    19ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    19b0:	00 97       	sbiw	r24, 0x00	; 0
    19b2:	69 f7       	brne	.-38     	; 0x198e <Dashboard_FrameTwo+0xd4>
    19b4:	16 c0       	rjmp	.+44     	; 0x19e2 <Dashboard_FrameTwo+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b6:	fe 01       	movw	r30, r28
    19b8:	ff 96       	adiw	r30, 0x3f	; 63
    19ba:	60 81       	ld	r22, Z
    19bc:	71 81       	ldd	r23, Z+1	; 0x01
    19be:	82 81       	ldd	r24, Z+2	; 0x02
    19c0:	93 81       	ldd	r25, Z+3	; 0x03
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9e af       	std	Y+62, r25	; 0x3e
    19cc:	8d af       	std	Y+61, r24	; 0x3d
    19ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    19d2:	9a af       	std	Y+58, r25	; 0x3a
    19d4:	89 af       	std	Y+57, r24	; 0x39
    19d6:	89 ad       	ldd	r24, Y+57	; 0x39
    19d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <Dashboard_FrameTwo+0x120>
    19de:	9a af       	std	Y+58, r25	; 0x3a
    19e0:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-RotateCW");
    19e2:	8c e8       	ldi	r24, 0x8C	; 140
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    19ea:	82 e0       	ldi	r24, 0x02	; 2
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-RotateCCW");
    19f2:	87 e9       	ldi	r24, 0x97	; 151
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE1,10);
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	6a e0       	ldi	r22, 0x0A	; 10
    19fe:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"3-Back");
    1a02:	83 ea       	ldi	r24, 0xA3	; 163
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    1a0a:	ce 01       	movw	r24, r28
    1a0c:	88 5b       	subi	r24, 0xB8	; 184
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	0e 94 ab 12 	call	0x2556	; 0x2556 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    1a14:	fe 01       	movw	r30, r28
    1a16:	e8 5b       	subi	r30, 0xB8	; 184
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    1a1e:	a9 f3       	breq	.-22     	; 0x1a0a <Dashboard_FrameTwo+0x150>
		{
			if(Local_u8Key == '1') // If pressed key is '1'
    1a20:	fe 01       	movw	r30, r28
    1a22:	e8 5b       	subi	r30, 0xB8	; 184
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 81       	ld	r24, Z
    1a28:	81 33       	cpi	r24, 0x31	; 49
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <Dashboard_FrameTwo+0x174>
    1a2c:	ed c0       	rjmp	.+474    	; 0x1c08 <Dashboard_FrameTwo+0x34e>
			{
				LCD_voidClearScreen();
    1a2e:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    1a32:	80 e0       	ldi	r24, 0x00	; 0
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	a0 ea       	ldi	r26, 0xA0	; 160
    1a38:	b1 e4       	ldi	r27, 0x41	; 65
    1a3a:	8d ab       	std	Y+53, r24	; 0x35
    1a3c:	9e ab       	std	Y+54, r25	; 0x36
    1a3e:	af ab       	std	Y+55, r26	; 0x37
    1a40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a42:	6d a9       	ldd	r22, Y+53	; 0x35
    1a44:	7e a9       	ldd	r23, Y+54	; 0x36
    1a46:	8f a9       	ldd	r24, Y+55	; 0x37
    1a48:	98 ad       	ldd	r25, Y+56	; 0x38
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	4a ef       	ldi	r20, 0xFA	; 250
    1a50:	54 e4       	ldi	r21, 0x44	; 68
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	89 ab       	std	Y+49, r24	; 0x31
    1a5c:	9a ab       	std	Y+50, r25	; 0x32
    1a5e:	ab ab       	std	Y+51, r26	; 0x33
    1a60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a62:	69 a9       	ldd	r22, Y+49	; 0x31
    1a64:	7a a9       	ldd	r23, Y+50	; 0x32
    1a66:	8b a9       	ldd	r24, Y+51	; 0x33
    1a68:	9c a9       	ldd	r25, Y+52	; 0x34
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	40 e8       	ldi	r20, 0x80	; 128
    1a70:	5f e3       	ldi	r21, 0x3F	; 63
    1a72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a76:	88 23       	and	r24, r24
    1a78:	2c f4       	brge	.+10     	; 0x1a84 <Dashboard_FrameTwo+0x1ca>
		__ticks = 1;
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	98 ab       	std	Y+48, r25	; 0x30
    1a80:	8f a7       	std	Y+47, r24	; 0x2f
    1a82:	3f c0       	rjmp	.+126    	; 0x1b02 <Dashboard_FrameTwo+0x248>
	else if (__tmp > 65535)
    1a84:	69 a9       	ldd	r22, Y+49	; 0x31
    1a86:	7a a9       	ldd	r23, Y+50	; 0x32
    1a88:	8b a9       	ldd	r24, Y+51	; 0x33
    1a8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	3f ef       	ldi	r19, 0xFF	; 255
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	57 e4       	ldi	r21, 0x47	; 71
    1a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	4c f5       	brge	.+82     	; 0x1aee <Dashboard_FrameTwo+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1aa0:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa2:	98 ad       	ldd	r25, Y+56	; 0x38
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	40 e2       	ldi	r20, 0x20	; 32
    1aaa:	51 e4       	ldi	r21, 0x41	; 65
    1aac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	bc 01       	movw	r22, r24
    1ab6:	cd 01       	movw	r24, r26
    1ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abc:	dc 01       	movw	r26, r24
    1abe:	cb 01       	movw	r24, r22
    1ac0:	98 ab       	std	Y+48, r25	; 0x30
    1ac2:	8f a7       	std	Y+47, r24	; 0x2f
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <Dashboard_FrameTwo+0x22a>
    1ac6:	88 ec       	ldi	r24, 0xC8	; 200
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9e a7       	std	Y+46, r25	; 0x2e
    1acc:	8d a7       	std	Y+45, r24	; 0x2d
    1ace:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ad0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ad2:	01 97       	sbiw	r24, 0x01	; 1
    1ad4:	f1 f7       	brne	.-4      	; 0x1ad2 <Dashboard_FrameTwo+0x218>
    1ad6:	9e a7       	std	Y+46, r25	; 0x2e
    1ad8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ada:	8f a5       	ldd	r24, Y+47	; 0x2f
    1adc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	98 ab       	std	Y+48, r25	; 0x30
    1ae2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ae8:	00 97       	sbiw	r24, 0x00	; 0
    1aea:	69 f7       	brne	.-38     	; 0x1ac6 <Dashboard_FrameTwo+0x20c>
    1aec:	14 c0       	rjmp	.+40     	; 0x1b16 <Dashboard_FrameTwo+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aee:	69 a9       	ldd	r22, Y+49	; 0x31
    1af0:	7a a9       	ldd	r23, Y+50	; 0x32
    1af2:	8b a9       	ldd	r24, Y+51	; 0x33
    1af4:	9c a9       	ldd	r25, Y+52	; 0x34
    1af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	98 ab       	std	Y+48, r25	; 0x30
    1b00:	8f a7       	std	Y+47, r24	; 0x2f
    1b02:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b04:	98 a9       	ldd	r25, Y+48	; 0x30
    1b06:	9c a7       	std	Y+44, r25	; 0x2c
    1b08:	8b a7       	std	Y+43, r24	; 0x2b
    1b0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <Dashboard_FrameTwo+0x254>
    1b12:	9c a7       	std	Y+44, r25	; 0x2c
    1b14:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CW ....");
    1b16:	8a ea       	ldi	r24, 0xAA	; 170
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
				H_BRIDGE_voidRotateCW();
    1b1e:	0e 94 8d 12 	call	0x251a	; 0x251a <H_BRIDGE_voidRotateCW>
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	90 e4       	ldi	r25, 0x40	; 64
    1b26:	ac e9       	ldi	r26, 0x9C	; 156
    1b28:	b5 e4       	ldi	r27, 0x45	; 69
    1b2a:	8f a3       	std	Y+39, r24	; 0x27
    1b2c:	98 a7       	std	Y+40, r25	; 0x28
    1b2e:	a9 a7       	std	Y+41, r26	; 0x29
    1b30:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b32:	6f a1       	ldd	r22, Y+39	; 0x27
    1b34:	78 a5       	ldd	r23, Y+40	; 0x28
    1b36:	89 a5       	ldd	r24, Y+41	; 0x29
    1b38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	4a ef       	ldi	r20, 0xFA	; 250
    1b40:	54 e4       	ldi	r21, 0x44	; 68
    1b42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	8b a3       	std	Y+35, r24	; 0x23
    1b4c:	9c a3       	std	Y+36, r25	; 0x24
    1b4e:	ad a3       	std	Y+37, r26	; 0x25
    1b50:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b52:	6b a1       	ldd	r22, Y+35	; 0x23
    1b54:	7c a1       	ldd	r23, Y+36	; 0x24
    1b56:	8d a1       	ldd	r24, Y+37	; 0x25
    1b58:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5a:	20 e0       	ldi	r18, 0x00	; 0
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	40 e8       	ldi	r20, 0x80	; 128
    1b60:	5f e3       	ldi	r21, 0x3F	; 63
    1b62:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b66:	88 23       	and	r24, r24
    1b68:	2c f4       	brge	.+10     	; 0x1b74 <Dashboard_FrameTwo+0x2ba>
		__ticks = 1;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	9a a3       	std	Y+34, r25	; 0x22
    1b70:	89 a3       	std	Y+33, r24	; 0x21
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <Dashboard_FrameTwo+0x338>
	else if (__tmp > 65535)
    1b74:	6b a1       	ldd	r22, Y+35	; 0x23
    1b76:	7c a1       	ldd	r23, Y+36	; 0x24
    1b78:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	4c f5       	brge	.+82     	; 0x1bde <Dashboard_FrameTwo+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    1b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    1b90:	89 a5       	ldd	r24, Y+41	; 0x29
    1b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e2       	ldi	r20, 0x20	; 32
    1b9a:	51 e4       	ldi	r21, 0x41	; 65
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	bc 01       	movw	r22, r24
    1ba6:	cd 01       	movw	r24, r26
    1ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	9a a3       	std	Y+34, r25	; 0x22
    1bb2:	89 a3       	std	Y+33, r24	; 0x21
    1bb4:	0f c0       	rjmp	.+30     	; 0x1bd4 <Dashboard_FrameTwo+0x31a>
    1bb6:	88 ec       	ldi	r24, 0xC8	; 200
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	98 a3       	std	Y+32, r25	; 0x20
    1bbc:	8f 8f       	std	Y+31, r24	; 0x1f
    1bbe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1bc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	f1 f7       	brne	.-4      	; 0x1bc2 <Dashboard_FrameTwo+0x308>
    1bc6:	98 a3       	std	Y+32, r25	; 0x20
    1bc8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bca:	89 a1       	ldd	r24, Y+33	; 0x21
    1bcc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	9a a3       	std	Y+34, r25	; 0x22
    1bd2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f7       	brne	.-38     	; 0x1bb6 <Dashboard_FrameTwo+0x2fc>
    1bdc:	14 c0       	rjmp	.+40     	; 0x1c06 <Dashboard_FrameTwo+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bde:	6b a1       	ldd	r22, Y+35	; 0x23
    1be0:	7c a1       	ldd	r23, Y+36	; 0x24
    1be2:	8d a1       	ldd	r24, Y+37	; 0x25
    1be4:	9e a1       	ldd	r25, Y+38	; 0x26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9a a3       	std	Y+34, r25	; 0x22
    1bf0:	89 a3       	std	Y+33, r24	; 0x21
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	9e 8f       	std	Y+30, r25	; 0x1e
    1bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    1bfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1bfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <Dashboard_FrameTwo+0x344>
    1c02:	9e 8f       	std	Y+30, r25	; 0x1e
    1c04:	8d 8f       	std	Y+29, r24	; 0x1d
    1c06:	ff cf       	rjmp	.-2      	; 0x1c06 <Dashboard_FrameTwo+0x34c>
				_delay_ms(5000);
				while(1);
			}
			else if (Local_u8Key == '2') // If pressed key is '2'
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e8 5b       	subi	r30, 0xB8	; 184
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	82 33       	cpi	r24, 0x32	; 50
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <Dashboard_FrameTwo+0x35c>
    1c14:	ed c0       	rjmp	.+474    	; 0x1df0 <Dashboard_FrameTwo+0x536>
			{
				LCD_voidClearScreen();
    1c16:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 ea       	ldi	r26, 0xA0	; 160
    1c20:	b1 e4       	ldi	r27, 0x41	; 65
    1c22:	89 8f       	std	Y+25, r24	; 0x19
    1c24:	9a 8f       	std	Y+26, r25	; 0x1a
    1c26:	ab 8f       	std	Y+27, r26	; 0x1b
    1c28:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a ef       	ldi	r20, 0xFA	; 250
    1c38:	54 e4       	ldi	r21, 0x44	; 68
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8d 8b       	std	Y+21, r24	; 0x15
    1c44:	9e 8b       	std	Y+22, r25	; 0x16
    1c46:	af 8b       	std	Y+23, r26	; 0x17
    1c48:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c50:	98 8d       	ldd	r25, Y+24	; 0x18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <Dashboard_FrameTwo+0x3b2>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9c 8b       	std	Y+20, r25	; 0x14
    1c68:	8b 8b       	std	Y+19, r24	; 0x13
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <Dashboard_FrameTwo+0x430>
	else if (__tmp > 65535)
    1c6c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c70:	8f 89       	ldd	r24, Y+23	; 0x17
    1c72:	98 8d       	ldd	r25, Y+24	; 0x18
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	4c f5       	brge	.+82     	; 0x1cd6 <Dashboard_FrameTwo+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	69 8d       	ldd	r22, Y+25	; 0x19
    1c86:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c88:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c8a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9c 8b       	std	Y+20, r25	; 0x14
    1caa:	8b 8b       	std	Y+19, r24	; 0x13
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <Dashboard_FrameTwo+0x412>
    1cae:	88 ec       	ldi	r24, 0xC8	; 200
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	9a 8b       	std	Y+18, r25	; 0x12
    1cb4:	89 8b       	std	Y+17, r24	; 0x11
    1cb6:	89 89       	ldd	r24, Y+17	; 0x11
    1cb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <Dashboard_FrameTwo+0x400>
    1cbe:	9a 8b       	std	Y+18, r25	; 0x12
    1cc0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	8b 89       	ldd	r24, Y+19	; 0x13
    1cce:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <Dashboard_FrameTwo+0x3f4>
    1cd4:	14 c0       	rjmp	.+40     	; 0x1cfe <Dashboard_FrameTwo+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9c 8b       	std	Y+20, r25	; 0x14
    1ce8:	8b 8b       	std	Y+19, r24	; 0x13
    1cea:	8b 89       	ldd	r24, Y+19	; 0x13
    1cec:	9c 89       	ldd	r25, Y+20	; 0x14
    1cee:	98 8b       	std	Y+16, r25	; 0x10
    1cf0:	8f 87       	std	Y+15, r24	; 0x0f
    1cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf4:	98 89       	ldd	r25, Y+16	; 0x10
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <Dashboard_FrameTwo+0x43c>
    1cfa:	98 8b       	std	Y+16, r25	; 0x10
    1cfc:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CCW ....");
    1cfe:	8a eb       	ldi	r24, 0xBA	; 186
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
				H_BRIDGE_voidRotateCCW();
    1d06:	0e 94 9c 12 	call	0x2538	; 0x2538 <H_BRIDGE_voidRotateCCW>
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	90 e4       	ldi	r25, 0x40	; 64
    1d0e:	ac e9       	ldi	r26, 0x9C	; 156
    1d10:	b5 e4       	ldi	r27, 0x45	; 69
    1d12:	8b 87       	std	Y+11, r24	; 0x0b
    1d14:	9c 87       	std	Y+12, r25	; 0x0c
    1d16:	ad 87       	std	Y+13, r26	; 0x0d
    1d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	4a ef       	ldi	r20, 0xFA	; 250
    1d28:	54 e4       	ldi	r21, 0x44	; 68
    1d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2e:	dc 01       	movw	r26, r24
    1d30:	cb 01       	movw	r24, r22
    1d32:	8f 83       	std	Y+7, r24	; 0x07
    1d34:	98 87       	std	Y+8, r25	; 0x08
    1d36:	a9 87       	std	Y+9, r26	; 0x09
    1d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3c:	78 85       	ldd	r23, Y+8	; 0x08
    1d3e:	89 85       	ldd	r24, Y+9	; 0x09
    1d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e8       	ldi	r20, 0x80	; 128
    1d48:	5f e3       	ldi	r21, 0x3F	; 63
    1d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d4e:	88 23       	and	r24, r24
    1d50:	2c f4       	brge	.+10     	; 0x1d5c <Dashboard_FrameTwo+0x4a2>
		__ticks = 1;
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	9e 83       	std	Y+6, r25	; 0x06
    1d58:	8d 83       	std	Y+5, r24	; 0x05
    1d5a:	3f c0       	rjmp	.+126    	; 0x1dda <Dashboard_FrameTwo+0x520>
	else if (__tmp > 65535)
    1d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5e:	78 85       	ldd	r23, Y+8	; 0x08
    1d60:	89 85       	ldd	r24, Y+9	; 0x09
    1d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	3f ef       	ldi	r19, 0xFF	; 255
    1d68:	4f e7       	ldi	r20, 0x7F	; 127
    1d6a:	57 e4       	ldi	r21, 0x47	; 71
    1d6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d70:	18 16       	cp	r1, r24
    1d72:	4c f5       	brge	.+82     	; 0x1dc6 <Dashboard_FrameTwo+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	40 e2       	ldi	r20, 0x20	; 32
    1d82:	51 e4       	ldi	r21, 0x41	; 65
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	cd 01       	movw	r24, r26
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9e 83       	std	Y+6, r25	; 0x06
    1d9a:	8d 83       	std	Y+5, r24	; 0x05
    1d9c:	0f c0       	rjmp	.+30     	; 0x1dbc <Dashboard_FrameTwo+0x502>
    1d9e:	88 ec       	ldi	r24, 0xC8	; 200
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	9c 83       	std	Y+4, r25	; 0x04
    1da4:	8b 83       	std	Y+3, r24	; 0x03
    1da6:	8b 81       	ldd	r24, Y+3	; 0x03
    1da8:	9c 81       	ldd	r25, Y+4	; 0x04
    1daa:	01 97       	sbiw	r24, 0x01	; 1
    1dac:	f1 f7       	brne	.-4      	; 0x1daa <Dashboard_FrameTwo+0x4f0>
    1dae:	9c 83       	std	Y+4, r25	; 0x04
    1db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1db2:	8d 81       	ldd	r24, Y+5	; 0x05
    1db4:	9e 81       	ldd	r25, Y+6	; 0x06
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	9e 83       	std	Y+6, r25	; 0x06
    1dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	69 f7       	brne	.-38     	; 0x1d9e <Dashboard_FrameTwo+0x4e4>
    1dc4:	14 c0       	rjmp	.+40     	; 0x1dee <Dashboard_FrameTwo+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc8:	78 85       	ldd	r23, Y+8	; 0x08
    1dca:	89 85       	ldd	r24, Y+9	; 0x09
    1dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	9e 83       	std	Y+6, r25	; 0x06
    1dd8:	8d 83       	std	Y+5, r24	; 0x05
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	9a 83       	std	Y+2, r25	; 0x02
    1de0:	89 83       	std	Y+1, r24	; 0x01
    1de2:	89 81       	ldd	r24, Y+1	; 0x01
    1de4:	9a 81       	ldd	r25, Y+2	; 0x02
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <Dashboard_FrameTwo+0x52c>
    1dea:	9a 83       	std	Y+2, r25	; 0x02
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	ff cf       	rjmp	.-2      	; 0x1dee <Dashboard_FrameTwo+0x534>
				_delay_ms(5000);
				while(1);
			}
			else if(Local_u8Key == '3' ) // If pressed key is '3'
    1df0:	fe 01       	movw	r30, r28
    1df2:	e8 5b       	subi	r30, 0xB8	; 184
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	83 33       	cpi	r24, 0x33	; 51
    1dfa:	09 f0       	breq	.+2      	; 0x1dfe <Dashboard_FrameTwo+0x544>
    1dfc:	06 ce       	rjmp	.-1012   	; 0x1a0a <Dashboard_FrameTwo+0x150>
			{
				Dashboard_FrameOne();
    1dfe:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Dashboard_FrameOne>
    1e02:	03 ce       	rjmp	.-1018   	; 0x1a0a <Dashboard_FrameTwo+0x150>

00001e04 <Dashboard_FrameThree>:
	}

}

void Dashboard_FrameThree()
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	2f 97       	sbiw	r28, 0x0f	; 15
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	LCD_voidClearScreen();
    1e18:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a0 ea       	ldi	r26, 0xA0	; 160
    1e22:	b1 e4       	ldi	r27, 0x41	; 65
    1e24:	8b 87       	std	Y+11, r24	; 0x0b
    1e26:	9c 87       	std	Y+12, r25	; 0x0c
    1e28:	ad 87       	std	Y+13, r26	; 0x0d
    1e2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	4a ef       	ldi	r20, 0xFA	; 250
    1e3a:	54 e4       	ldi	r21, 0x44	; 68
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	8f 83       	std	Y+7, r24	; 0x07
    1e46:	98 87       	std	Y+8, r25	; 0x08
    1e48:	a9 87       	std	Y+9, r26	; 0x09
    1e4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4e:	78 85       	ldd	r23, Y+8	; 0x08
    1e50:	89 85       	ldd	r24, Y+9	; 0x09
    1e52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	2c f4       	brge	.+10     	; 0x1e6e <Dashboard_FrameThree+0x6a>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	9e 83       	std	Y+6, r25	; 0x06
    1e6a:	8d 83       	std	Y+5, r24	; 0x05
    1e6c:	3f c0       	rjmp	.+126    	; 0x1eec <Dashboard_FrameThree+0xe8>
	else if (__tmp > 65535)
    1e6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e70:	78 85       	ldd	r23, Y+8	; 0x08
    1e72:	89 85       	ldd	r24, Y+9	; 0x09
    1e74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	3f ef       	ldi	r19, 0xFF	; 255
    1e7a:	4f e7       	ldi	r20, 0x7F	; 127
    1e7c:	57 e4       	ldi	r21, 0x47	; 71
    1e7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	4c f5       	brge	.+82     	; 0x1ed8 <Dashboard_FrameThree+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e2       	ldi	r20, 0x20	; 32
    1e94:	51 e4       	ldi	r21, 0x41	; 65
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	bc 01       	movw	r22, r24
    1ea0:	cd 01       	movw	r24, r26
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	0f c0       	rjmp	.+30     	; 0x1ece <Dashboard_FrameThree+0xca>
    1eb0:	88 ec       	ldi	r24, 0xC8	; 200
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	9c 83       	std	Y+4, r25	; 0x04
    1eb6:	8b 83       	std	Y+3, r24	; 0x03
    1eb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eba:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebc:	01 97       	sbiw	r24, 0x01	; 1
    1ebe:	f1 f7       	brne	.-4      	; 0x1ebc <Dashboard_FrameThree+0xb8>
    1ec0:	9c 83       	std	Y+4, r25	; 0x04
    1ec2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec8:	01 97       	sbiw	r24, 0x01	; 1
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ece:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed2:	00 97       	sbiw	r24, 0x00	; 0
    1ed4:	69 f7       	brne	.-38     	; 0x1eb0 <Dashboard_FrameThree+0xac>
    1ed6:	14 c0       	rjmp	.+40     	; 0x1f00 <Dashboard_FrameThree+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eda:	78 85       	ldd	r23, Y+8	; 0x08
    1edc:	89 85       	ldd	r24, Y+9	; 0x09
    1ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	9e 83       	std	Y+6, r25	; 0x06
    1eea:	8d 83       	std	Y+5, r24	; 0x05
    1eec:	8d 81       	ldd	r24, Y+5	; 0x05
    1eee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef0:	9a 83       	std	Y+2, r25	; 0x02
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <Dashboard_FrameThree+0xf4>
    1efc:	9a 83       	std	Y+2, r25	; 0x02
    1efe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-RotateCW");
    1f00:	8c e8       	ldi	r24, 0x8C	; 140
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-RotateCCW");
    1f10:	87 e9       	ldi	r24, 0x97	; 151
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE1,10);
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	6a e0       	ldi	r22, 0x0A	; 10
    1f1c:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"3-Back");
    1f20:	83 ea       	ldi	r24, 0xA3	; 163
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    1f28:	ce 01       	movw	r24, r28
    1f2a:	0f 96       	adiw	r24, 0x0f	; 15
    1f2c:	0e 94 ab 12 	call	0x2556	; 0x2556 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)// If a key is pressed
    1f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f32:	8f 3f       	cpi	r24, 0xFF	; 255
    1f34:	c9 f3       	breq	.-14     	; 0x1f28 <Dashboard_FrameThree+0x124>
		{
			if(Local_u8Key == '1') // If pressed key is '1' CW
    1f36:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f38:	81 33       	cpi	r24, 0x31	; 49
    1f3a:	19 f4       	brne	.+6      	; 0x1f42 <Dashboard_FrameThree+0x13e>
			{
				Dashboard_FrameFour();
    1f3c:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <Dashboard_FrameFour>
    1f40:	f3 cf       	rjmp	.-26     	; 0x1f28 <Dashboard_FrameThree+0x124>
			}
			else if(Local_u8Key == '2') // If pressed key is '2' CCW
    1f42:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f44:	82 33       	cpi	r24, 0x32	; 50
    1f46:	19 f4       	brne	.+6      	; 0x1f4e <Dashboard_FrameThree+0x14a>
			{
				Dashboard_FrameFive();
    1f48:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Dashboard_FrameFive>
    1f4c:	ed cf       	rjmp	.-38     	; 0x1f28 <Dashboard_FrameThree+0x124>
			}
			else if (Local_u8Key == '3')
    1f4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f50:	83 33       	cpi	r24, 0x33	; 51
    1f52:	51 f7       	brne	.-44     	; 0x1f28 <Dashboard_FrameThree+0x124>
			{
				Dashboard_FrameOne();
    1f54:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Dashboard_FrameOne>
    1f58:	e7 cf       	rjmp	.-50     	; 0x1f28 <Dashboard_FrameThree+0x124>

00001f5a <Dashboard_FrameFour>:
			}
		}
	}
}
void Dashboard_FrameFour(void)
{
    1f5a:	df 93       	push	r29
    1f5c:	cf 93       	push	r28
    1f5e:	cd b7       	in	r28, 0x3d	; 61
    1f60:	de b7       	in	r29, 0x3e	; 62
    1f62:	6f 97       	sbiw	r28, 0x1f	; 31
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u16 Local_u16Angle;
	LCD_voidClearScreen();
    1f6e:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	a0 ea       	ldi	r26, 0xA0	; 160
    1f78:	b1 e4       	ldi	r27, 0x41	; 65
    1f7a:	89 8f       	std	Y+25, r24	; 0x19
    1f7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1f7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1f80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f82:	69 8d       	ldd	r22, Y+25	; 0x19
    1f84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	4a ef       	ldi	r20, 0xFA	; 250
    1f90:	54 e4       	ldi	r21, 0x44	; 68
    1f92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	8d 8b       	std	Y+21, r24	; 0x15
    1f9c:	9e 8b       	std	Y+22, r25	; 0x16
    1f9e:	af 8b       	std	Y+23, r26	; 0x17
    1fa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e8       	ldi	r20, 0x80	; 128
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fb6:	88 23       	and	r24, r24
    1fb8:	2c f4       	brge	.+10     	; 0x1fc4 <Dashboard_FrameFour+0x6a>
		__ticks = 1;
    1fba:	81 e0       	ldi	r24, 0x01	; 1
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9c 8b       	std	Y+20, r25	; 0x14
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13
    1fc2:	3f c0       	rjmp	.+126    	; 0x2042 <Dashboard_FrameFour+0xe8>
	else if (__tmp > 65535)
    1fc4:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc6:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc8:	8f 89       	ldd	r24, Y+23	; 0x17
    1fca:	98 8d       	ldd	r25, Y+24	; 0x18
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	3f ef       	ldi	r19, 0xFF	; 255
    1fd0:	4f e7       	ldi	r20, 0x7F	; 127
    1fd2:	57 e4       	ldi	r21, 0x47	; 71
    1fd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd8:	18 16       	cp	r1, r24
    1fda:	4c f5       	brge	.+82     	; 0x202e <Dashboard_FrameFour+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e2       	ldi	r20, 0x20	; 32
    1fea:	51 e4       	ldi	r21, 0x41	; 65
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	bc 01       	movw	r22, r24
    1ff6:	cd 01       	movw	r24, r26
    1ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	9c 8b       	std	Y+20, r25	; 0x14
    2002:	8b 8b       	std	Y+19, r24	; 0x13
    2004:	0f c0       	rjmp	.+30     	; 0x2024 <Dashboard_FrameFour+0xca>
    2006:	88 ec       	ldi	r24, 0xC8	; 200
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	9a 8b       	std	Y+18, r25	; 0x12
    200c:	89 8b       	std	Y+17, r24	; 0x11
    200e:	89 89       	ldd	r24, Y+17	; 0x11
    2010:	9a 89       	ldd	r25, Y+18	; 0x12
    2012:	01 97       	sbiw	r24, 0x01	; 1
    2014:	f1 f7       	brne	.-4      	; 0x2012 <Dashboard_FrameFour+0xb8>
    2016:	9a 8b       	std	Y+18, r25	; 0x12
    2018:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201a:	8b 89       	ldd	r24, Y+19	; 0x13
    201c:	9c 89       	ldd	r25, Y+20	; 0x14
    201e:	01 97       	sbiw	r24, 0x01	; 1
    2020:	9c 8b       	std	Y+20, r25	; 0x14
    2022:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2024:	8b 89       	ldd	r24, Y+19	; 0x13
    2026:	9c 89       	ldd	r25, Y+20	; 0x14
    2028:	00 97       	sbiw	r24, 0x00	; 0
    202a:	69 f7       	brne	.-38     	; 0x2006 <Dashboard_FrameFour+0xac>
    202c:	14 c0       	rjmp	.+40     	; 0x2056 <Dashboard_FrameFour+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    202e:	6d 89       	ldd	r22, Y+21	; 0x15
    2030:	7e 89       	ldd	r23, Y+22	; 0x16
    2032:	8f 89       	ldd	r24, Y+23	; 0x17
    2034:	98 8d       	ldd	r25, Y+24	; 0x18
    2036:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	9c 8b       	std	Y+20, r25	; 0x14
    2040:	8b 8b       	std	Y+19, r24	; 0x13
    2042:	8b 89       	ldd	r24, Y+19	; 0x13
    2044:	9c 89       	ldd	r25, Y+20	; 0x14
    2046:	98 8b       	std	Y+16, r25	; 0x10
    2048:	8f 87       	std	Y+15, r24	; 0x0f
    204a:	8f 85       	ldd	r24, Y+15	; 0x0f
    204c:	98 89       	ldd	r25, Y+16	; 0x10
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <Dashboard_FrameFour+0xf4>
    2052:	98 8b       	std	Y+16, r25	; 0x10
    2054:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_voidWriteString((u8*)"Angle = ");
    2056:	8b ec       	ldi	r24, 0xCB	; 203
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key);
    205e:	ce 01       	movw	r24, r28
    2060:	4d 96       	adiw	r24, 0x1d	; 29
    2062:	0e 94 ab 12 	call	0x2556	; 0x2556 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)// If a key is pressed
    2066:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2068:	8f 3f       	cpi	r24, 0xFF	; 255
    206a:	c9 f3       	breq	.-14     	; 0x205e <Dashboard_FrameFour+0x104>
		{
			if(Local_u8Key == '=') // If pressed key is '='
    206c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    206e:	8d 33       	cpi	r24, 0x3D	; 61
    2070:	09 f0       	breq	.+2      	; 0x2074 <Dashboard_FrameFour+0x11a>
    2072:	8f c0       	rjmp	.+286    	; 0x2192 <Dashboard_FrameFour+0x238>
			{
				GetNumber((u8*)Local_Au8digits,&Local_u16Angle);
    2074:	8b e6       	ldi	r24, 0x6B	; 107
    2076:	91 e0       	ldi	r25, 0x01	; 1
    2078:	9e 01       	movw	r18, r28
    207a:	22 5e       	subi	r18, 0xE2	; 226
    207c:	3f 4f       	sbci	r19, 0xFF	; 255
    207e:	b9 01       	movw	r22, r18
    2080:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GetNumber>
				LCD_voidClearScreen();
    2084:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	a0 ea       	ldi	r26, 0xA0	; 160
    208e:	b1 e4       	ldi	r27, 0x41	; 65
    2090:	8b 87       	std	Y+11, r24	; 0x0b
    2092:	9c 87       	std	Y+12, r25	; 0x0c
    2094:	ad 87       	std	Y+13, r26	; 0x0d
    2096:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2098:	6b 85       	ldd	r22, Y+11	; 0x0b
    209a:	7c 85       	ldd	r23, Y+12	; 0x0c
    209c:	8d 85       	ldd	r24, Y+13	; 0x0d
    209e:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a ef       	ldi	r20, 0xFA	; 250
    20a6:	54 e4       	ldi	r21, 0x44	; 68
    20a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	8f 83       	std	Y+7, r24	; 0x07
    20b2:	98 87       	std	Y+8, r25	; 0x08
    20b4:	a9 87       	std	Y+9, r26	; 0x09
    20b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ba:	78 85       	ldd	r23, Y+8	; 0x08
    20bc:	89 85       	ldd	r24, Y+9	; 0x09
    20be:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	40 e8       	ldi	r20, 0x80	; 128
    20c6:	5f e3       	ldi	r21, 0x3F	; 63
    20c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20cc:	88 23       	and	r24, r24
    20ce:	2c f4       	brge	.+10     	; 0x20da <Dashboard_FrameFour+0x180>
		__ticks = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9e 83       	std	Y+6, r25	; 0x06
    20d6:	8d 83       	std	Y+5, r24	; 0x05
    20d8:	3f c0       	rjmp	.+126    	; 0x2158 <Dashboard_FrameFour+0x1fe>
	else if (__tmp > 65535)
    20da:	6f 81       	ldd	r22, Y+7	; 0x07
    20dc:	78 85       	ldd	r23, Y+8	; 0x08
    20de:	89 85       	ldd	r24, Y+9	; 0x09
    20e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	3f ef       	ldi	r19, 0xFF	; 255
    20e6:	4f e7       	ldi	r20, 0x7F	; 127
    20e8:	57 e4       	ldi	r21, 0x47	; 71
    20ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ee:	18 16       	cp	r1, r24
    20f0:	4c f5       	brge	.+82     	; 0x2144 <Dashboard_FrameFour+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e2       	ldi	r20, 0x20	; 32
    2100:	51 e4       	ldi	r21, 0x41	; 65
    2102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	bc 01       	movw	r22, r24
    210c:	cd 01       	movw	r24, r26
    210e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9e 83       	std	Y+6, r25	; 0x06
    2118:	8d 83       	std	Y+5, r24	; 0x05
    211a:	0f c0       	rjmp	.+30     	; 0x213a <Dashboard_FrameFour+0x1e0>
    211c:	88 ec       	ldi	r24, 0xC8	; 200
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c 83       	std	Y+4, r25	; 0x04
    2122:	8b 83       	std	Y+3, r24	; 0x03
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	9c 81       	ldd	r25, Y+4	; 0x04
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <Dashboard_FrameFour+0x1ce>
    212c:	9c 83       	std	Y+4, r25	; 0x04
    212e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2130:	8d 81       	ldd	r24, Y+5	; 0x05
    2132:	9e 81       	ldd	r25, Y+6	; 0x06
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    213a:	8d 81       	ldd	r24, Y+5	; 0x05
    213c:	9e 81       	ldd	r25, Y+6	; 0x06
    213e:	00 97       	sbiw	r24, 0x00	; 0
    2140:	69 f7       	brne	.-38     	; 0x211c <Dashboard_FrameFour+0x1c2>
    2142:	14 c0       	rjmp	.+40     	; 0x216c <Dashboard_FrameFour+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2144:	6f 81       	ldd	r22, Y+7	; 0x07
    2146:	78 85       	ldd	r23, Y+8	; 0x08
    2148:	89 85       	ldd	r24, Y+9	; 0x09
    214a:	9a 85       	ldd	r25, Y+10	; 0x0a
    214c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	9e 83       	std	Y+6, r25	; 0x06
    2156:	8d 83       	std	Y+5, r24	; 0x05
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	9a 83       	std	Y+2, r25	; 0x02
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	9a 81       	ldd	r25, Y+2	; 0x02
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <Dashboard_FrameFour+0x20a>
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CW ....");
    216c:	8a ea       	ldi	r24, 0xAA	; 170
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
				STEPPER_u8Move(STEPPER_u8_CW,Local_u16Angle);
    2174:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2176:	3f 8d       	ldd	r19, Y+31	; 0x1f
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	b9 01       	movw	r22, r18
    217c:	0e 94 9e 22 	call	0x453c	; 0x453c <STEPPER_u8Move>
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
			}
		}
	}

}
    2180:	6f 96       	adiw	r28, 0x1f	; 31
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret
				STEPPER_u8Move(STEPPER_u8_CW,Local_u16Angle);
				break;
			}
			else
			{
				addToBuffer((u8*)Local_Au8digits,Local_u8Key); // Append pressed key to buffer
    2192:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2194:	28 2f       	mov	r18, r24
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	8b e6       	ldi	r24, 0x6B	; 107
    219a:	91 e0       	ldi	r25, 0x01	; 1
    219c:	b9 01       	movw	r22, r18
    219e:	0e 94 60 12 	call	0x24c0	; 0x24c0 <addToBuffer>
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
    21a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a4:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    21a8:	5a cf       	rjmp	.-332    	; 0x205e <Dashboard_FrameFour+0x104>

000021aa <Dashboard_FrameFive>:
		}
	}

}
void Dashboard_FrameFive(void)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	6f 97       	sbiw	r28, 0x1f	; 31
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u16 Local_u16Angle;
	LCD_voidClearScreen();
    21be:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a0 ea       	ldi	r26, 0xA0	; 160
    21c8:	b1 e4       	ldi	r27, 0x41	; 65
    21ca:	89 8f       	std	Y+25, r24	; 0x19
    21cc:	9a 8f       	std	Y+26, r25	; 0x1a
    21ce:	ab 8f       	std	Y+27, r26	; 0x1b
    21d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	69 8d       	ldd	r22, Y+25	; 0x19
    21d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a ef       	ldi	r20, 0xFA	; 250
    21e0:	54 e4       	ldi	r21, 0x44	; 68
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8d 8b       	std	Y+21, r24	; 0x15
    21ec:	9e 8b       	std	Y+22, r25	; 0x16
    21ee:	af 8b       	std	Y+23, r26	; 0x17
    21f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21f2:	6d 89       	ldd	r22, Y+21	; 0x15
    21f4:	7e 89       	ldd	r23, Y+22	; 0x16
    21f6:	8f 89       	ldd	r24, Y+23	; 0x17
    21f8:	98 8d       	ldd	r25, Y+24	; 0x18
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	2c f4       	brge	.+10     	; 0x2214 <Dashboard_FrameFive+0x6a>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9c 8b       	std	Y+20, r25	; 0x14
    2210:	8b 8b       	std	Y+19, r24	; 0x13
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <Dashboard_FrameFive+0xe8>
	else if (__tmp > 65535)
    2214:	6d 89       	ldd	r22, Y+21	; 0x15
    2216:	7e 89       	ldd	r23, Y+22	; 0x16
    2218:	8f 89       	ldd	r24, Y+23	; 0x17
    221a:	98 8d       	ldd	r25, Y+24	; 0x18
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	4c f5       	brge	.+82     	; 0x227e <Dashboard_FrameFive+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	69 8d       	ldd	r22, Y+25	; 0x19
    222e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2230:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2232:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e2       	ldi	r20, 0x20	; 32
    223a:	51 e4       	ldi	r21, 0x41	; 65
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <Dashboard_FrameFive+0xca>
    2256:	88 ec       	ldi	r24, 0xC8	; 200
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a 8b       	std	Y+18, r25	; 0x12
    225c:	89 8b       	std	Y+17, r24	; 0x11
    225e:	89 89       	ldd	r24, Y+17	; 0x11
    2260:	9a 89       	ldd	r25, Y+18	; 0x12
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <Dashboard_FrameFive+0xb8>
    2266:	9a 8b       	std	Y+18, r25	; 0x12
    2268:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	9c 8b       	std	Y+20, r25	; 0x14
    2272:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2274:	8b 89       	ldd	r24, Y+19	; 0x13
    2276:	9c 89       	ldd	r25, Y+20	; 0x14
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	69 f7       	brne	.-38     	; 0x2256 <Dashboard_FrameFive+0xac>
    227c:	14 c0       	rjmp	.+40     	; 0x22a6 <Dashboard_FrameFive+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227e:	6d 89       	ldd	r22, Y+21	; 0x15
    2280:	7e 89       	ldd	r23, Y+22	; 0x16
    2282:	8f 89       	ldd	r24, Y+23	; 0x17
    2284:	98 8d       	ldd	r25, Y+24	; 0x18
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9c 8b       	std	Y+20, r25	; 0x14
    2290:	8b 8b       	std	Y+19, r24	; 0x13
    2292:	8b 89       	ldd	r24, Y+19	; 0x13
    2294:	9c 89       	ldd	r25, Y+20	; 0x14
    2296:	98 8b       	std	Y+16, r25	; 0x10
    2298:	8f 87       	std	Y+15, r24	; 0x0f
    229a:	8f 85       	ldd	r24, Y+15	; 0x0f
    229c:	98 89       	ldd	r25, Y+16	; 0x10
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <Dashboard_FrameFive+0xf4>
    22a2:	98 8b       	std	Y+16, r25	; 0x10
    22a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_voidWriteString((u8*)"Angle = ");
    22a6:	8b ec       	ldi	r24, 0xCB	; 203
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key);
    22ae:	ce 01       	movw	r24, r28
    22b0:	4d 96       	adiw	r24, 0x1d	; 29
    22b2:	0e 94 ab 12 	call	0x2556	; 0x2556 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)// If a key is pressed
    22b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22b8:	8f 3f       	cpi	r24, 0xFF	; 255
    22ba:	c9 f3       	breq	.-14     	; 0x22ae <Dashboard_FrameFive+0x104>
		{
			if(Local_u8Key == '=') // If pressed key is '='
    22bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22be:	8d 33       	cpi	r24, 0x3D	; 61
    22c0:	09 f0       	breq	.+2      	; 0x22c4 <Dashboard_FrameFive+0x11a>
    22c2:	8f c0       	rjmp	.+286    	; 0x23e2 <Dashboard_FrameFive+0x238>
			{
				GetNumber(Local_Au8digits,&Local_u16Angle);
    22c4:	8b e6       	ldi	r24, 0x6B	; 107
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	9e 01       	movw	r18, r28
    22ca:	22 5e       	subi	r18, 0xE2	; 226
    22cc:	3f 4f       	sbci	r19, 0xFF	; 255
    22ce:	b9 01       	movw	r22, r18
    22d0:	0e 94 fd 11 	call	0x23fa	; 0x23fa <GetNumber>
				LCD_voidClearScreen();
    22d4:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 ea       	ldi	r26, 0xA0	; 160
    22de:	b1 e4       	ldi	r27, 0x41	; 65
    22e0:	8b 87       	std	Y+11, r24	; 0x0b
    22e2:	9c 87       	std	Y+12, r25	; 0x0c
    22e4:	ad 87       	std	Y+13, r26	; 0x0d
    22e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a ef       	ldi	r20, 0xFA	; 250
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8f 83       	std	Y+7, r24	; 0x07
    2302:	98 87       	std	Y+8, r25	; 0x08
    2304:	a9 87       	std	Y+9, r26	; 0x09
    2306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <Dashboard_FrameFive+0x180>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	3f c0       	rjmp	.+126    	; 0x23a8 <Dashboard_FrameFive+0x1fe>
	else if (__tmp > 65535)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	4c f5       	brge	.+82     	; 0x2394 <Dashboard_FrameFive+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	6b 85       	ldd	r22, Y+11	; 0x0b
    2344:	7c 85       	ldd	r23, Y+12	; 0x0c
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
    236a:	0f c0       	rjmp	.+30     	; 0x238a <Dashboard_FrameFive+0x1e0>
    236c:	88 ec       	ldi	r24, 0xC8	; 200
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <Dashboard_FrameFive+0x1ce>
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	69 f7       	brne	.-38     	; 0x236c <Dashboard_FrameFive+0x1c2>
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <Dashboard_FrameFive+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <Dashboard_FrameFive+0x20a>
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CCW ....");
    23bc:	8a eb       	ldi	r24, 0xBA	; 186
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
				STEPPER_u8Move(STEPPER_u8_CCW,Local_u16Angle);
    23c4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    23c6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    23c8:	82 e0       	ldi	r24, 0x02	; 2
    23ca:	b9 01       	movw	r22, r18
    23cc:	0e 94 9e 22 	call	0x453c	; 0x453c <STEPPER_u8Move>
				addToBuffer((u8*)Local_Au8digits,Local_u8Key); // Append pressed key to buffer
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
			}
		}
	}
}
    23d0:	6f 96       	adiw	r28, 0x1f	; 31
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

				break;
			}
			else
			{
				addToBuffer((u8*)Local_Au8digits,Local_u8Key); // Append pressed key to buffer
    23e2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23e4:	28 2f       	mov	r18, r24
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	8b e6       	ldi	r24, 0x6B	; 107
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	b9 01       	movw	r22, r18
    23ee:	0e 94 60 12 	call	0x24c0	; 0x24c0 <addToBuffer>
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
    23f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23f4:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    23f8:	5a cf       	rjmp	.-332    	; 0x22ae <Dashboard_FrameFive+0x104>

000023fa <GetNumber>:
			}
		}
	}
}
void GetNumber(u8 *buffer,u16 *result)
{
    23fa:	df 93       	push	r29
    23fc:	cf 93       	push	r28
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	27 97       	sbiw	r28, 0x07	; 7
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	de bf       	out	0x3e, r29	; 62
    240a:	0f be       	out	0x3f, r0	; 63
    240c:	cd bf       	out	0x3d, r28	; 61
    240e:	9d 83       	std	Y+5, r25	; 0x05
    2410:	8c 83       	std	Y+4, r24	; 0x04
    2412:	7f 83       	std	Y+7, r23	; 0x07
    2414:	6e 83       	std	Y+6, r22	; 0x06
	u16 num = 0;// Variable to store current number
    2416:	1b 82       	std	Y+3, r1	; 0x03
    2418:	1a 82       	std	Y+2, r1	; 0x02
	u8 i = 0;
    241a:	19 82       	std	Y+1, r1	; 0x01
    241c:	36 c0       	rjmp	.+108    	; 0x248a <GetNumber+0x90>
	while(*(buffer+i) != '\0') // Loop until end of buffer is reached
	{
		if (buffer[i] >= '0' && buffer[i] <= '9')
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	fc 01       	movw	r30, r24
    242a:	e2 0f       	add	r30, r18
    242c:	f3 1f       	adc	r31, r19
    242e:	80 81       	ld	r24, Z
    2430:	80 33       	cpi	r24, 0x30	; 48
    2432:	40 f1       	brcs	.+80     	; 0x2484 <GetNumber+0x8a>
    2434:	89 81       	ldd	r24, Y+1	; 0x01
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	9d 81       	ldd	r25, Y+5	; 0x05
    243e:	fc 01       	movw	r30, r24
    2440:	e2 0f       	add	r30, r18
    2442:	f3 1f       	adc	r31, r19
    2444:	80 81       	ld	r24, Z
    2446:	8a 33       	cpi	r24, 0x3A	; 58
    2448:	e8 f4       	brcc	.+58     	; 0x2484 <GetNumber+0x8a>
		{
			// Build the number digit by digit
			num = num * 10 + (buffer[i] - '0');
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	9c 01       	movw	r18, r24
    2450:	22 0f       	add	r18, r18
    2452:	33 1f       	adc	r19, r19
    2454:	c9 01       	movw	r24, r18
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	a9 01       	movw	r20, r18
    2460:	48 0f       	add	r20, r24
    2462:	59 1f       	adc	r21, r25
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	9d 81       	ldd	r25, Y+5	; 0x05
    246e:	fc 01       	movw	r30, r24
    2470:	e2 0f       	add	r30, r18
    2472:	f3 1f       	adc	r31, r19
    2474:	80 81       	ld	r24, Z
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	84 0f       	add	r24, r20
    247c:	95 1f       	adc	r25, r21
    247e:	c0 97       	sbiw	r24, 0x30	; 48
    2480:	9b 83       	std	Y+3, r25	; 0x03
    2482:	8a 83       	std	Y+2, r24	; 0x02
		}
		i++;
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	89 83       	std	Y+1, r24	; 0x01
}
void GetNumber(u8 *buffer,u16 *result)
{
	u16 num = 0;// Variable to store current number
	u8 i = 0;
	while(*(buffer+i) != '\0') // Loop until end of buffer is reached
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	28 2f       	mov	r18, r24
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	8c 81       	ldd	r24, Y+4	; 0x04
    2492:	9d 81       	ldd	r25, Y+5	; 0x05
    2494:	fc 01       	movw	r30, r24
    2496:	e2 0f       	add	r30, r18
    2498:	f3 1f       	adc	r31, r19
    249a:	80 81       	ld	r24, Z
    249c:	88 23       	and	r24, r24
    249e:	09 f0       	breq	.+2      	; 0x24a2 <GetNumber+0xa8>
    24a0:	be cf       	rjmp	.-132    	; 0x241e <GetNumber+0x24>
			// Build the number digit by digit
			num = num * 10 + (buffer[i] - '0');
		}
		i++;
	}
	*result = num;
    24a2:	ee 81       	ldd	r30, Y+6	; 0x06
    24a4:	ff 81       	ldd	r31, Y+7	; 0x07
    24a6:	8a 81       	ldd	r24, Y+2	; 0x02
    24a8:	9b 81       	ldd	r25, Y+3	; 0x03
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	80 83       	st	Z, r24
}
    24ae:	27 96       	adiw	r28, 0x07	; 7
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <addToBuffer>:
void addToBuffer(u8 *buffer,u8 key)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <addToBuffer+0x6>
    24c6:	0f 92       	push	r0
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01
    24d0:	6b 83       	std	Y+3, r22	; 0x03
	if(Local_u8Ind < 5) // Make sure buffer index is within range
    24d2:	80 91 6a 01 	lds	r24, 0x016A
    24d6:	85 30       	cpi	r24, 0x05	; 5
    24d8:	d0 f4       	brcc	.+52     	; 0x250e <addToBuffer+0x4e>
	{
		*(buffer+Local_u8Ind) = key; // Store the character in buffer
    24da:	80 91 6a 01 	lds	r24, 0x016A
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	89 81       	ldd	r24, Y+1	; 0x01
    24e4:	9a 81       	ldd	r25, Y+2	; 0x02
    24e6:	fc 01       	movw	r30, r24
    24e8:	e2 0f       	add	r30, r18
    24ea:	f3 1f       	adc	r31, r19
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	80 83       	st	Z, r24
		Local_u8Ind++; // Increment buffer index
    24f0:	80 91 6a 01 	lds	r24, 0x016A
    24f4:	8f 5f       	subi	r24, 0xFF	; 255
    24f6:	80 93 6a 01 	sts	0x016A, r24
		*(buffer+Local_u8Ind) = '\0';// Null-terminate buffer
    24fa:	80 91 6a 01 	lds	r24, 0x016A
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	fc 01       	movw	r30, r24
    2508:	e2 0f       	add	r30, r18
    250a:	f3 1f       	adc	r31, r19
    250c:	10 82       	st	Z, r1
	}
}
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <H_BRIDGE_voidRotateCW>:

#include "H_Bridge.h"


void H_BRIDGE_voidRotateCW(void)
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	cd b7       	in	r28, 0x3d	; 61
    2520:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_LOW);
    2522:	81 e0       	ldi	r24, 0x01	; 1
    2524:	64 e0       	ldi	r22, 0x04	; 4
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_HIGH);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	65 e0       	ldi	r22, 0x05	; 5
    2530:	41 e0       	ldi	r20, 0x01	; 1
    2532:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2536:	f5 cf       	rjmp	.-22     	; 0x2522 <H_BRIDGE_voidRotateCW+0x8>

00002538 <H_BRIDGE_voidRotateCCW>:
	}
}
void H_BRIDGE_voidRotateCCW(void)
{
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_LOW);
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	65 e0       	ldi	r22, 0x05	; 5
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_HIGH);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	64 e0       	ldi	r22, 0x04	; 4
    254e:	41 e0       	ldi	r20, 0x01	; 1
    2550:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2554:	f5 cf       	rjmp	.-22     	; 0x2540 <H_BRIDGE_voidRotateCCW+0x8>

00002556 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    2556:	df 93       	push	r29
    2558:	cf 93       	push	r28
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	66 97       	sbiw	r28, 0x16	; 22
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	9e 8b       	std	Y+22, r25	; 0x16
    256c:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_u8ErrorState = STD_TYPES_OK;
    256e:	81 e0       	ldi	r24, 0x01	; 1
    2570:	8b 8b       	std	Y+19, r24	; 0x13
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    2572:	18 8a       	std	Y+16, r1	; 0x10
	if(Copy_pu8ReturnedKey != NULL)
    2574:	8d 89       	ldd	r24, Y+21	; 0x15
    2576:	9e 89       	ldd	r25, Y+22	; 0x16
    2578:	00 97       	sbiw	r24, 0x00	; 0
    257a:	09 f4       	brne	.+2      	; 0x257e <KPD_u8GetKeyState+0x28>
    257c:	f0 c0       	rjmp	.+480    	; 0x275e <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    257e:	ed 89       	ldd	r30, Y+21	; 0x15
    2580:	fe 89       	ldd	r31, Y+22	; 0x16
    2582:	8f ef       	ldi	r24, 0xFF	; 255
    2584:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    2586:	1a 8a       	std	Y+18, r1	; 0x12
    2588:	e5 c0       	rjmp	.+458    	; 0x2754 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    258a:	8a 89       	ldd	r24, Y+18	; 0x12
    258c:	88 2f       	mov	r24, r24
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	fc 01       	movw	r30, r24
    2592:	ee 59       	subi	r30, 0x9E	; 158
    2594:	fe 4f       	sbci	r31, 0xFE	; 254
    2596:	90 81       	ld	r25, Z
    2598:	82 e0       	ldi	r24, 0x02	; 2
    259a:	69 2f       	mov	r22, r25
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    25a2:	19 8a       	std	Y+17, r1	; 0x11
    25a4:	c1 c0       	rjmp	.+386    	; 0x2728 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    25a6:	89 89       	ldd	r24, Y+17	; 0x11
    25a8:	88 2f       	mov	r24, r24
    25aa:	90 e0       	ldi	r25, 0x00	; 0
    25ac:	fc 01       	movw	r30, r24
    25ae:	ea 59       	subi	r30, 0x9A	; 154
    25b0:	fe 4f       	sbci	r31, 0xFE	; 254
    25b2:	90 81       	ld	r25, Z
    25b4:	9e 01       	movw	r18, r28
    25b6:	2c 5e       	subi	r18, 0xEC	; 236
    25b8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	69 2f       	mov	r22, r25
    25be:	a9 01       	movw	r20, r18
    25c0:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    25c4:	8c 89       	ldd	r24, Y+20	; 0x14
    25c6:	88 23       	and	r24, r24
    25c8:	09 f0       	breq	.+2      	; 0x25cc <KPD_u8GetKeyState+0x76>
    25ca:	ab c0       	rjmp	.+342    	; 0x2722 <KPD_u8GetKeyState+0x1cc>
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	a0 ea       	ldi	r26, 0xA0	; 160
    25d2:	b1 e4       	ldi	r27, 0x41	; 65
    25d4:	8b 87       	std	Y+11, r24	; 0x0b
    25d6:	9c 87       	std	Y+12, r25	; 0x0c
    25d8:	ad 87       	std	Y+13, r26	; 0x0d
    25da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25de:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	4a ef       	ldi	r20, 0xFA	; 250
    25ea:	54 e4       	ldi	r21, 0x44	; 68
    25ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	8f 83       	std	Y+7, r24	; 0x07
    25f6:	98 87       	std	Y+8, r25	; 0x08
    25f8:	a9 87       	std	Y+9, r26	; 0x09
    25fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25fc:	6f 81       	ldd	r22, Y+7	; 0x07
    25fe:	78 85       	ldd	r23, Y+8	; 0x08
    2600:	89 85       	ldd	r24, Y+9	; 0x09
    2602:	9a 85       	ldd	r25, Y+10	; 0x0a
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e8       	ldi	r20, 0x80	; 128
    260a:	5f e3       	ldi	r21, 0x3F	; 63
    260c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2610:	88 23       	and	r24, r24
    2612:	2c f4       	brge	.+10     	; 0x261e <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9e 83       	std	Y+6, r25	; 0x06
    261a:	8d 83       	std	Y+5, r24	; 0x05
    261c:	3f c0       	rjmp	.+126    	; 0x269c <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    261e:	6f 81       	ldd	r22, Y+7	; 0x07
    2620:	78 85       	ldd	r23, Y+8	; 0x08
    2622:	89 85       	ldd	r24, Y+9	; 0x09
    2624:	9a 85       	ldd	r25, Y+10	; 0x0a
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	3f ef       	ldi	r19, 0xFF	; 255
    262a:	4f e7       	ldi	r20, 0x7F	; 127
    262c:	57 e4       	ldi	r21, 0x47	; 71
    262e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2632:	18 16       	cp	r1, r24
    2634:	4c f5       	brge	.+82     	; 0x2688 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2636:	6b 85       	ldd	r22, Y+11	; 0x0b
    2638:	7c 85       	ldd	r23, Y+12	; 0x0c
    263a:	8d 85       	ldd	r24, Y+13	; 0x0d
    263c:	9e 85       	ldd	r25, Y+14	; 0x0e
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e2       	ldi	r20, 0x20	; 32
    2644:	51 e4       	ldi	r21, 0x41	; 65
    2646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9e 83       	std	Y+6, r25	; 0x06
    265c:	8d 83       	std	Y+5, r24	; 0x05
    265e:	0f c0       	rjmp	.+30     	; 0x267e <KPD_u8GetKeyState+0x128>
    2660:	88 ec       	ldi	r24, 0xC8	; 200
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9c 83       	std	Y+4, r25	; 0x04
    2666:	8b 83       	std	Y+3, r24	; 0x03
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <KPD_u8GetKeyState+0x116>
    2670:	9c 83       	std	Y+4, r25	; 0x04
    2672:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2674:	8d 81       	ldd	r24, Y+5	; 0x05
    2676:	9e 81       	ldd	r25, Y+6	; 0x06
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	9e 83       	std	Y+6, r25	; 0x06
    267c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267e:	8d 81       	ldd	r24, Y+5	; 0x05
    2680:	9e 81       	ldd	r25, Y+6	; 0x06
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	69 f7       	brne	.-38     	; 0x2660 <KPD_u8GetKeyState+0x10a>
    2686:	14 c0       	rjmp	.+40     	; 0x26b0 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2688:	6f 81       	ldd	r22, Y+7	; 0x07
    268a:	78 85       	ldd	r23, Y+8	; 0x08
    268c:	89 85       	ldd	r24, Y+9	; 0x09
    268e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	9a 83       	std	Y+2, r25	; 0x02
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	9a 81       	ldd	r25, Y+2	; 0x02
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <KPD_u8GetKeyState+0x152>
    26ac:	9a 83       	std	Y+2, r25	; 0x02
    26ae:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    26b0:	89 89       	ldd	r24, Y+17	; 0x11
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	fc 01       	movw	r30, r24
    26b8:	ea 59       	subi	r30, 0x9A	; 154
    26ba:	fe 4f       	sbci	r31, 0xFE	; 254
    26bc:	90 81       	ld	r25, Z
    26be:	9e 01       	movw	r18, r28
    26c0:	2c 5e       	subi	r18, 0xEC	; 236
    26c2:	3f 4f       	sbci	r19, 0xFF	; 255
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	69 2f       	mov	r22, r25
    26c8:	a9 01       	movw	r20, r18
    26ca:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
    26ce:	0f c0       	rjmp	.+30     	; 0x26ee <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    26d0:	89 89       	ldd	r24, Y+17	; 0x11
    26d2:	88 2f       	mov	r24, r24
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	fc 01       	movw	r30, r24
    26d8:	ea 59       	subi	r30, 0x9A	; 154
    26da:	fe 4f       	sbci	r31, 0xFE	; 254
    26dc:	90 81       	ld	r25, Z
    26de:	9e 01       	movw	r18, r28
    26e0:	2c 5e       	subi	r18, 0xEC	; 236
    26e2:	3f 4f       	sbci	r19, 0xFF	; 255
    26e4:	82 e0       	ldi	r24, 0x02	; 2
    26e6:	69 2f       	mov	r22, r25
    26e8:	a9 01       	movw	r20, r18
    26ea:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    26ee:	8c 89       	ldd	r24, Y+20	; 0x14
    26f0:	88 23       	and	r24, r24
    26f2:	71 f3       	breq	.-36     	; 0x26d0 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    26f4:	8a 89       	ldd	r24, Y+18	; 0x12
    26f6:	48 2f       	mov	r20, r24
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	89 89       	ldd	r24, Y+17	; 0x11
    26fc:	28 2f       	mov	r18, r24
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	ca 01       	movw	r24, r20
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	88 0f       	add	r24, r24
    2708:	99 1f       	adc	r25, r25
    270a:	82 0f       	add	r24, r18
    270c:	93 1f       	adc	r25, r19
    270e:	fc 01       	movw	r30, r24
    2710:	ee 5a       	subi	r30, 0xAE	; 174
    2712:	fe 4f       	sbci	r31, 0xFE	; 254
    2714:	80 81       	ld	r24, Z
    2716:	ed 89       	ldd	r30, Y+21	; 0x15
    2718:	fe 89       	ldd	r31, Y+22	; 0x16
    271a:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	88 8b       	std	Y+16, r24	; 0x10
    2720:	07 c0       	rjmp	.+14     	; 0x2730 <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    2722:	89 89       	ldd	r24, Y+17	; 0x11
    2724:	8f 5f       	subi	r24, 0xFF	; 255
    2726:	89 8b       	std	Y+17, r24	; 0x11
    2728:	89 89       	ldd	r24, Y+17	; 0x11
    272a:	84 30       	cpi	r24, 0x04	; 4
    272c:	08 f4       	brcc	.+2      	; 0x2730 <KPD_u8GetKeyState+0x1da>
    272e:	3b cf       	rjmp	.-394    	; 0x25a6 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row*/
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    2730:	8a 89       	ldd	r24, Y+18	; 0x12
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	fc 01       	movw	r30, r24
    2738:	ee 59       	subi	r30, 0x9E	; 158
    273a:	fe 4f       	sbci	r31, 0xFE	; 254
    273c:	90 81       	ld	r25, Z
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	69 2f       	mov	r22, r25
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    2748:	88 89       	ldd	r24, Y+16	; 0x10
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	49 f0       	breq	.+18     	; 0x2760 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    274e:	8a 89       	ldd	r24, Y+18	; 0x12
    2750:	8f 5f       	subi	r24, 0xFF	; 255
    2752:	8a 8b       	std	Y+18, r24	; 0x12
    2754:	8a 89       	ldd	r24, Y+18	; 0x12
    2756:	84 30       	cpi	r24, 0x04	; 4
    2758:	08 f4       	brcc	.+2      	; 0x275c <KPD_u8GetKeyState+0x206>
    275a:	17 cf       	rjmp	.-466    	; 0x258a <KPD_u8GetKeyState+0x34>
    275c:	01 c0       	rjmp	.+2      	; 0x2760 <KPD_u8GetKeyState+0x20a>


	}
	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    275e:	1f 86       	std	Y+15, r1	; 0x0f
	}
	return Local_u8ErrorState;
    2760:	8b 89       	ldd	r24, Y+19	; 0x13
    2762:	66 96       	adiw	r28, 0x16	; 22
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	df 93       	push	r29
    277a:	cf 93       	push	r28
    277c:	cd b7       	in	r28, 0x3d	; 61
    277e:	de b7       	in	r29, 0x3e	; 62
    2780:	cc 54       	subi	r28, 0x4C	; 76
    2782:	d0 40       	sbci	r29, 0x00	; 0
    2784:	0f b6       	in	r0, 0x3f	; 63
    2786:	f8 94       	cli
    2788:	de bf       	out	0x3e, r29	; 62
    278a:	0f be       	out	0x3f, r0	; 63
    278c:	cd bf       	out	0x3d, r28	; 61
    278e:	fe 01       	movw	r30, r28
    2790:	e7 5b       	subi	r30, 0xB7	; 183
    2792:	ff 4f       	sbci	r31, 0xFF	; 255
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	90 e0       	ldi	r25, 0x00	; 0
    2798:	ac e0       	ldi	r26, 0x0C	; 12
    279a:	b2 e4       	ldi	r27, 0x42	; 66
    279c:	80 83       	st	Z, r24
    279e:	91 83       	std	Z+1, r25	; 0x01
    27a0:	a2 83       	std	Z+2, r26	; 0x02
    27a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a4:	8e 01       	movw	r16, r28
    27a6:	0b 5b       	subi	r16, 0xBB	; 187
    27a8:	1f 4f       	sbci	r17, 0xFF	; 255
    27aa:	fe 01       	movw	r30, r28
    27ac:	e7 5b       	subi	r30, 0xB7	; 183
    27ae:	ff 4f       	sbci	r31, 0xFF	; 255
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	4a ef       	ldi	r20, 0xFA	; 250
    27be:	54 e4       	ldi	r21, 0x44	; 68
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	f8 01       	movw	r30, r16
    27ca:	80 83       	st	Z, r24
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	a2 83       	std	Z+2, r26	; 0x02
    27d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27d2:	fe 01       	movw	r30, r28
    27d4:	eb 5b       	subi	r30, 0xBB	; 187
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	60 81       	ld	r22, Z
    27da:	71 81       	ldd	r23, Z+1	; 0x01
    27dc:	82 81       	ldd	r24, Z+2	; 0x02
    27de:	93 81       	ldd	r25, Z+3	; 0x03
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e8       	ldi	r20, 0x80	; 128
    27e6:	5f e3       	ldi	r21, 0x3F	; 63
    27e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ec:	88 23       	and	r24, r24
    27ee:	44 f4       	brge	.+16     	; 0x2800 <LCD_voidInit+0x8c>
		__ticks = 1;
    27f0:	fe 01       	movw	r30, r28
    27f2:	ed 5b       	subi	r30, 0xBD	; 189
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
    27fe:	64 c0       	rjmp	.+200    	; 0x28c8 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2800:	fe 01       	movw	r30, r28
    2802:	eb 5b       	subi	r30, 0xBB	; 187
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	3f ef       	ldi	r19, 0xFF	; 255
    2812:	4f e7       	ldi	r20, 0x7F	; 127
    2814:	57 e4       	ldi	r21, 0x47	; 71
    2816:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    281a:	18 16       	cp	r1, r24
    281c:	0c f0       	brlt	.+2      	; 0x2820 <LCD_voidInit+0xac>
    281e:	43 c0       	rjmp	.+134    	; 0x28a6 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2820:	fe 01       	movw	r30, r28
    2822:	e7 5b       	subi	r30, 0xB7	; 183
    2824:	ff 4f       	sbci	r31, 0xFF	; 255
    2826:	60 81       	ld	r22, Z
    2828:	71 81       	ldd	r23, Z+1	; 0x01
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	8e 01       	movw	r16, r28
    2840:	0d 5b       	subi	r16, 0xBD	; 189
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	f8 01       	movw	r30, r16
    2852:	91 83       	std	Z+1, r25	; 0x01
    2854:	80 83       	st	Z, r24
    2856:	1f c0       	rjmp	.+62     	; 0x2896 <LCD_voidInit+0x122>
    2858:	fe 01       	movw	r30, r28
    285a:	ef 5b       	subi	r30, 0xBF	; 191
    285c:	ff 4f       	sbci	r31, 0xFF	; 255
    285e:	88 ec       	ldi	r24, 0xC8	; 200
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	91 83       	std	Z+1, r25	; 0x01
    2864:	80 83       	st	Z, r24
    2866:	fe 01       	movw	r30, r28
    2868:	ef 5b       	subi	r30, 0xBF	; 191
    286a:	ff 4f       	sbci	r31, 0xFF	; 255
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <LCD_voidInit+0xfc>
    2874:	fe 01       	movw	r30, r28
    2876:	ef 5b       	subi	r30, 0xBF	; 191
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287e:	de 01       	movw	r26, r28
    2880:	ad 5b       	subi	r26, 0xBD	; 189
    2882:	bf 4f       	sbci	r27, 0xFF	; 255
    2884:	fe 01       	movw	r30, r28
    2886:	ed 5b       	subi	r30, 0xBD	; 189
    2888:	ff 4f       	sbci	r31, 0xFF	; 255
    288a:	80 81       	ld	r24, Z
    288c:	91 81       	ldd	r25, Z+1	; 0x01
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	11 96       	adiw	r26, 0x01	; 1
    2892:	9c 93       	st	X, r25
    2894:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2896:	fe 01       	movw	r30, r28
    2898:	ed 5b       	subi	r30, 0xBD	; 189
    289a:	ff 4f       	sbci	r31, 0xFF	; 255
    289c:	80 81       	ld	r24, Z
    289e:	91 81       	ldd	r25, Z+1	; 0x01
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	d1 f6       	brne	.-76     	; 0x2858 <LCD_voidInit+0xe4>
    28a4:	24 c0       	rjmp	.+72     	; 0x28ee <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a6:	8e 01       	movw	r16, r28
    28a8:	0d 5b       	subi	r16, 0xBD	; 189
    28aa:	1f 4f       	sbci	r17, 0xFF	; 255
    28ac:	fe 01       	movw	r30, r28
    28ae:	eb 5b       	subi	r30, 0xBB	; 187
    28b0:	ff 4f       	sbci	r31, 0xFF	; 255
    28b2:	60 81       	ld	r22, Z
    28b4:	71 81       	ldd	r23, Z+1	; 0x01
    28b6:	82 81       	ldd	r24, Z+2	; 0x02
    28b8:	93 81       	ldd	r25, Z+3	; 0x03
    28ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	f8 01       	movw	r30, r16
    28c4:	91 83       	std	Z+1, r25	; 0x01
    28c6:	80 83       	st	Z, r24
    28c8:	fe 01       	movw	r30, r28
    28ca:	ed 5b       	subi	r30, 0xBD	; 189
    28cc:	ff 4f       	sbci	r31, 0xFF	; 255
    28ce:	80 81       	ld	r24, Z
    28d0:	91 81       	ldd	r25, Z+1	; 0x01
    28d2:	fe 01       	movw	r30, r28
    28d4:	ff 96       	adiw	r30, 0x3f	; 63
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	80 83       	st	Z, r24
    28da:	fe 01       	movw	r30, r28
    28dc:	ff 96       	adiw	r30, 0x3f	; 63
    28de:	80 81       	ld	r24, Z
    28e0:	91 81       	ldd	r25, Z+1	; 0x01
    28e2:	01 97       	sbiw	r24, 0x01	; 1
    28e4:	f1 f7       	brne	.-4      	; 0x28e2 <LCD_voidInit+0x16e>
    28e6:	fe 01       	movw	r30, r28
    28e8:	ff 96       	adiw	r30, 0x3f	; 63
    28ea:	91 83       	std	Z+1, r25	; 0x01
    28ec:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    28ee:	88 e3       	ldi	r24, 0x38	; 56
    28f0:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 e2       	ldi	r26, 0x20	; 32
    28fa:	b2 e4       	ldi	r27, 0x42	; 66
    28fc:	8b af       	std	Y+59, r24	; 0x3b
    28fe:	9c af       	std	Y+60, r25	; 0x3c
    2900:	ad af       	std	Y+61, r26	; 0x3d
    2902:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2904:	6b ad       	ldd	r22, Y+59	; 0x3b
    2906:	7c ad       	ldd	r23, Y+60	; 0x3c
    2908:	8d ad       	ldd	r24, Y+61	; 0x3d
    290a:	9e ad       	ldd	r25, Y+62	; 0x3e
    290c:	2b ea       	ldi	r18, 0xAB	; 171
    290e:	3a ea       	ldi	r19, 0xAA	; 170
    2910:	4a e2       	ldi	r20, 0x2A	; 42
    2912:	50 e4       	ldi	r21, 0x40	; 64
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	8f ab       	std	Y+55, r24	; 0x37
    291e:	98 af       	std	Y+56, r25	; 0x38
    2920:	a9 af       	std	Y+57, r26	; 0x39
    2922:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2924:	6f a9       	ldd	r22, Y+55	; 0x37
    2926:	78 ad       	ldd	r23, Y+56	; 0x38
    2928:	89 ad       	ldd	r24, Y+57	; 0x39
    292a:	9a ad       	ldd	r25, Y+58	; 0x3a
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	1c f4       	brge	.+6      	; 0x2942 <LCD_voidInit+0x1ce>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	8e ab       	std	Y+54, r24	; 0x36
    2940:	91 c0       	rjmp	.+290    	; 0x2a64 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2942:	6f a9       	ldd	r22, Y+55	; 0x37
    2944:	78 ad       	ldd	r23, Y+56	; 0x38
    2946:	89 ad       	ldd	r24, Y+57	; 0x39
    2948:	9a ad       	ldd	r25, Y+58	; 0x3a
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	53 e4       	ldi	r21, 0x43	; 67
    2952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	0c f0       	brlt	.+2      	; 0x295c <LCD_voidInit+0x1e8>
    295a:	7b c0       	rjmp	.+246    	; 0x2a52 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    295c:	6b ad       	ldd	r22, Y+59	; 0x3b
    295e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2960:	8d ad       	ldd	r24, Y+61	; 0x3d
    2962:	9e ad       	ldd	r25, Y+62	; 0x3e
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4a e7       	ldi	r20, 0x7A	; 122
    296a:	54 e4       	ldi	r21, 0x44	; 68
    296c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	8a ab       	std	Y+50, r24	; 0x32
    2976:	9b ab       	std	Y+51, r25	; 0x33
    2978:	ac ab       	std	Y+52, r26	; 0x34
    297a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6a a9       	ldd	r22, Y+50	; 0x32
    297e:	7b a9       	ldd	r23, Y+51	; 0x33
    2980:	8c a9       	ldd	r24, Y+52	; 0x34
    2982:	9d a9       	ldd	r25, Y+53	; 0x35
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a ef       	ldi	r20, 0xFA	; 250
    298a:	54 e4       	ldi	r21, 0x44	; 68
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	8e a7       	std	Y+46, r24	; 0x2e
    2996:	9f a7       	std	Y+47, r25	; 0x2f
    2998:	a8 ab       	std	Y+48, r26	; 0x30
    299a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    299c:	6e a5       	ldd	r22, Y+46	; 0x2e
    299e:	7f a5       	ldd	r23, Y+47	; 0x2f
    29a0:	88 a9       	ldd	r24, Y+48	; 0x30
    29a2:	99 a9       	ldd	r25, Y+49	; 0x31
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <LCD_voidInit+0x24a>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9d a7       	std	Y+45, r25	; 0x2d
    29ba:	8c a7       	std	Y+44, r24	; 0x2c
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    29be:	6e a5       	ldd	r22, Y+46	; 0x2e
    29c0:	7f a5       	ldd	r23, Y+47	; 0x2f
    29c2:	88 a9       	ldd	r24, Y+48	; 0x30
    29c4:	99 a9       	ldd	r25, Y+49	; 0x31
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6a a9       	ldd	r22, Y+50	; 0x32
    29d8:	7b a9       	ldd	r23, Y+51	; 0x33
    29da:	8c a9       	ldd	r24, Y+52	; 0x34
    29dc:	9d a9       	ldd	r25, Y+53	; 0x35
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9d a7       	std	Y+45, r25	; 0x2d
    29fc:	8c a7       	std	Y+44, r24	; 0x2c
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <LCD_voidInit+0x2aa>
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9b a7       	std	Y+43, r25	; 0x2b
    2a06:	8a a7       	std	Y+42, r24	; 0x2a
    2a08:	8a a5       	ldd	r24, Y+42	; 0x2a
    2a0a:	9b a5       	ldd	r25, Y+43	; 0x2b
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_voidInit+0x298>
    2a10:	9b a7       	std	Y+43, r25	; 0x2b
    2a12:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a16:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9d a7       	std	Y+45, r25	; 0x2d
    2a1c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a20:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <LCD_voidInit+0x28c>
    2a26:	24 c0       	rjmp	.+72     	; 0x2a70 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	6e a5       	ldd	r22, Y+46	; 0x2e
    2a2a:	7f a5       	ldd	r23, Y+47	; 0x2f
    2a2c:	88 a9       	ldd	r24, Y+48	; 0x30
    2a2e:	99 a9       	ldd	r25, Y+49	; 0x31
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9d a7       	std	Y+45, r25	; 0x2d
    2a3a:	8c a7       	std	Y+44, r24	; 0x2c
    2a3c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a3e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a40:	99 a7       	std	Y+41, r25	; 0x29
    2a42:	88 a7       	std	Y+40, r24	; 0x28
    2a44:	88 a5       	ldd	r24, Y+40	; 0x28
    2a46:	99 a5       	ldd	r25, Y+41	; 0x29
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <LCD_voidInit+0x2d4>
    2a4c:	99 a7       	std	Y+41, r25	; 0x29
    2a4e:	88 a7       	std	Y+40, r24	; 0x28
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a52:	6f a9       	ldd	r22, Y+55	; 0x37
    2a54:	78 ad       	ldd	r23, Y+56	; 0x38
    2a56:	89 ad       	ldd	r24, Y+57	; 0x39
    2a58:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8e ab       	std	Y+54, r24	; 0x36
    2a64:	8e a9       	ldd	r24, Y+54	; 0x36
    2a66:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a68:	8f a1       	ldd	r24, Y+39	; 0x27
    2a6a:	8a 95       	dec	r24
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <LCD_voidInit+0x2f6>
    2a6e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    2a70:	8e e0       	ldi	r24, 0x0E	; 14
    2a72:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	a0 e2       	ldi	r26, 0x20	; 32
    2a7c:	b2 e4       	ldi	r27, 0x42	; 66
    2a7e:	8b a3       	std	Y+35, r24	; 0x23
    2a80:	9c a3       	std	Y+36, r25	; 0x24
    2a82:	ad a3       	std	Y+37, r26	; 0x25
    2a84:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a86:	6b a1       	ldd	r22, Y+35	; 0x23
    2a88:	7c a1       	ldd	r23, Y+36	; 0x24
    2a8a:	8d a1       	ldd	r24, Y+37	; 0x25
    2a8c:	9e a1       	ldd	r25, Y+38	; 0x26
    2a8e:	2b ea       	ldi	r18, 0xAB	; 171
    2a90:	3a ea       	ldi	r19, 0xAA	; 170
    2a92:	4a e2       	ldi	r20, 0x2A	; 42
    2a94:	50 e4       	ldi	r21, 0x40	; 64
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	8f 8f       	std	Y+31, r24	; 0x1f
    2aa0:	98 a3       	std	Y+32, r25	; 0x20
    2aa2:	a9 a3       	std	Y+33, r26	; 0x21
    2aa4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2aa6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2aa8:	78 a1       	ldd	r23, Y+32	; 0x20
    2aaa:	89 a1       	ldd	r24, Y+33	; 0x21
    2aac:	9a a1       	ldd	r25, Y+34	; 0x22
    2aae:	20 e0       	ldi	r18, 0x00	; 0
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e8       	ldi	r20, 0x80	; 128
    2ab4:	5f e3       	ldi	r21, 0x3F	; 63
    2ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aba:	88 23       	and	r24, r24
    2abc:	1c f4       	brge	.+6      	; 0x2ac4 <LCD_voidInit+0x350>
		__ticks = 1;
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	8e 8f       	std	Y+30, r24	; 0x1e
    2ac2:	91 c0       	rjmp	.+290    	; 0x2be6 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2ac4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2ac6:	78 a1       	ldd	r23, Y+32	; 0x20
    2ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aca:	9a a1       	ldd	r25, Y+34	; 0x22
    2acc:	20 e0       	ldi	r18, 0x00	; 0
    2ace:	30 e0       	ldi	r19, 0x00	; 0
    2ad0:	4f e7       	ldi	r20, 0x7F	; 127
    2ad2:	53 e4       	ldi	r21, 0x43	; 67
    2ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ad8:	18 16       	cp	r1, r24
    2ada:	0c f0       	brlt	.+2      	; 0x2ade <LCD_voidInit+0x36a>
    2adc:	7b c0       	rjmp	.+246    	; 0x2bd4 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2ade:	6b a1       	ldd	r22, Y+35	; 0x23
    2ae0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ae2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ae4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a e7       	ldi	r20, 0x7A	; 122
    2aec:	54 e4       	ldi	r21, 0x44	; 68
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8a 8f       	std	Y+26, r24	; 0x1a
    2af8:	9b 8f       	std	Y+27, r25	; 0x1b
    2afa:	ac 8f       	std	Y+28, r26	; 0x1c
    2afc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b00:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b02:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b04:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	4a ef       	ldi	r20, 0xFA	; 250
    2b0c:	54 e4       	ldi	r21, 0x44	; 68
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	8e 8b       	std	Y+22, r24	; 0x16
    2b18:	9f 8b       	std	Y+23, r25	; 0x17
    2b1a:	a8 8f       	std	Y+24, r26	; 0x18
    2b1c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2b1e:	6e 89       	ldd	r22, Y+22	; 0x16
    2b20:	7f 89       	ldd	r23, Y+23	; 0x17
    2b22:	88 8d       	ldd	r24, Y+24	; 0x18
    2b24:	99 8d       	ldd	r25, Y+25	; 0x19
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	40 e8       	ldi	r20, 0x80	; 128
    2b2c:	5f e3       	ldi	r21, 0x3F	; 63
    2b2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b32:	88 23       	and	r24, r24
    2b34:	2c f4       	brge	.+10     	; 0x2b40 <LCD_voidInit+0x3cc>
		__ticks = 1;
    2b36:	81 e0       	ldi	r24, 0x01	; 1
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9d 8b       	std	Y+21, r25	; 0x15
    2b3c:	8c 8b       	std	Y+20, r24	; 0x14
    2b3e:	3f c0       	rjmp	.+126    	; 0x2bbe <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2b40:	6e 89       	ldd	r22, Y+22	; 0x16
    2b42:	7f 89       	ldd	r23, Y+23	; 0x17
    2b44:	88 8d       	ldd	r24, Y+24	; 0x18
    2b46:	99 8d       	ldd	r25, Y+25	; 0x19
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	3f ef       	ldi	r19, 0xFF	; 255
    2b4c:	4f e7       	ldi	r20, 0x7F	; 127
    2b4e:	57 e4       	ldi	r21, 0x47	; 71
    2b50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b54:	18 16       	cp	r1, r24
    2b56:	4c f5       	brge	.+82     	; 0x2baa <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2b5a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2b5c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b5e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	bc 01       	movw	r22, r24
    2b72:	cd 01       	movw	r24, r26
    2b74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	9d 8b       	std	Y+21, r25	; 0x15
    2b7e:	8c 8b       	std	Y+20, r24	; 0x14
    2b80:	0f c0       	rjmp	.+30     	; 0x2ba0 <LCD_voidInit+0x42c>
    2b82:	88 ec       	ldi	r24, 0xC8	; 200
    2b84:	90 e0       	ldi	r25, 0x00	; 0
    2b86:	9b 8b       	std	Y+19, r25	; 0x13
    2b88:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b8a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b8c:	9b 89       	ldd	r25, Y+19	; 0x13
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	f1 f7       	brne	.-4      	; 0x2b8e <LCD_voidInit+0x41a>
    2b92:	9b 8b       	std	Y+19, r25	; 0x13
    2b94:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b96:	8c 89       	ldd	r24, Y+20	; 0x14
    2b98:	9d 89       	ldd	r25, Y+21	; 0x15
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	9d 8b       	std	Y+21, r25	; 0x15
    2b9e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba0:	8c 89       	ldd	r24, Y+20	; 0x14
    2ba2:	9d 89       	ldd	r25, Y+21	; 0x15
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	69 f7       	brne	.-38     	; 0x2b82 <LCD_voidInit+0x40e>
    2ba8:	24 c0       	rjmp	.+72     	; 0x2bf2 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2baa:	6e 89       	ldd	r22, Y+22	; 0x16
    2bac:	7f 89       	ldd	r23, Y+23	; 0x17
    2bae:	88 8d       	ldd	r24, Y+24	; 0x18
    2bb0:	99 8d       	ldd	r25, Y+25	; 0x19
    2bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	9d 8b       	std	Y+21, r25	; 0x15
    2bbc:	8c 8b       	std	Y+20, r24	; 0x14
    2bbe:	8c 89       	ldd	r24, Y+20	; 0x14
    2bc0:	9d 89       	ldd	r25, Y+21	; 0x15
    2bc2:	99 8b       	std	Y+17, r25	; 0x11
    2bc4:	88 8b       	std	Y+16, r24	; 0x10
    2bc6:	88 89       	ldd	r24, Y+16	; 0x10
    2bc8:	99 89       	ldd	r25, Y+17	; 0x11
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <LCD_voidInit+0x456>
    2bce:	99 8b       	std	Y+17, r25	; 0x11
    2bd0:	88 8b       	std	Y+16, r24	; 0x10
    2bd2:	0f c0       	rjmp	.+30     	; 0x2bf2 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bd4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2bd6:	78 a1       	ldd	r23, Y+32	; 0x20
    2bd8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bda:	9a a1       	ldd	r25, Y+34	; 0x22
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8e 8f       	std	Y+30, r24	; 0x1e
    2be6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2be8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bec:	8a 95       	dec	r24
    2bee:	f1 f7       	brne	.-4      	; 0x2bec <LCD_voidInit+0x478>
    2bf0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	a0 e0       	ldi	r26, 0x00	; 0
    2bfe:	b0 e4       	ldi	r27, 0x40	; 64
    2c00:	8b 87       	std	Y+11, r24	; 0x0b
    2c02:	9c 87       	std	Y+12, r25	; 0x0c
    2c04:	ad 87       	std	Y+13, r26	; 0x0d
    2c06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	30 e0       	ldi	r19, 0x00	; 0
    2c14:	4a ef       	ldi	r20, 0xFA	; 250
    2c16:	54 e4       	ldi	r21, 0x44	; 68
    2c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1c:	dc 01       	movw	r26, r24
    2c1e:	cb 01       	movw	r24, r22
    2c20:	8f 83       	std	Y+7, r24	; 0x07
    2c22:	98 87       	std	Y+8, r25	; 0x08
    2c24:	a9 87       	std	Y+9, r26	; 0x09
    2c26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c28:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2a:	78 85       	ldd	r23, Y+8	; 0x08
    2c2c:	89 85       	ldd	r24, Y+9	; 0x09
    2c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	40 e8       	ldi	r20, 0x80	; 128
    2c36:	5f e3       	ldi	r21, 0x3F	; 63
    2c38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c3c:	88 23       	and	r24, r24
    2c3e:	2c f4       	brge	.+10     	; 0x2c4a <LCD_voidInit+0x4d6>
		__ticks = 1;
    2c40:	81 e0       	ldi	r24, 0x01	; 1
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	9e 83       	std	Y+6, r25	; 0x06
    2c46:	8d 83       	std	Y+5, r24	; 0x05
    2c48:	3f c0       	rjmp	.+126    	; 0x2cc8 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    2c4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c4c:	78 85       	ldd	r23, Y+8	; 0x08
    2c4e:	89 85       	ldd	r24, Y+9	; 0x09
    2c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c52:	20 e0       	ldi	r18, 0x00	; 0
    2c54:	3f ef       	ldi	r19, 0xFF	; 255
    2c56:	4f e7       	ldi	r20, 0x7F	; 127
    2c58:	57 e4       	ldi	r21, 0x47	; 71
    2c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c5e:	18 16       	cp	r1, r24
    2c60:	4c f5       	brge	.+82     	; 0x2cb4 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6a:	20 e0       	ldi	r18, 0x00	; 0
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e2       	ldi	r20, 0x20	; 32
    2c70:	51 e4       	ldi	r21, 0x41	; 65
    2c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	bc 01       	movw	r22, r24
    2c7c:	cd 01       	movw	r24, r26
    2c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c82:	dc 01       	movw	r26, r24
    2c84:	cb 01       	movw	r24, r22
    2c86:	9e 83       	std	Y+6, r25	; 0x06
    2c88:	8d 83       	std	Y+5, r24	; 0x05
    2c8a:	0f c0       	rjmp	.+30     	; 0x2caa <LCD_voidInit+0x536>
    2c8c:	88 ec       	ldi	r24, 0xC8	; 200
    2c8e:	90 e0       	ldi	r25, 0x00	; 0
    2c90:	9c 83       	std	Y+4, r25	; 0x04
    2c92:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c94:	8b 81       	ldd	r24, Y+3	; 0x03
    2c96:	9c 81       	ldd	r25, Y+4	; 0x04
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	f1 f7       	brne	.-4      	; 0x2c98 <LCD_voidInit+0x524>
    2c9c:	9c 83       	std	Y+4, r25	; 0x04
    2c9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	9e 83       	std	Y+6, r25	; 0x06
    2ca8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2caa:	8d 81       	ldd	r24, Y+5	; 0x05
    2cac:	9e 81       	ldd	r25, Y+6	; 0x06
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	69 f7       	brne	.-38     	; 0x2c8c <LCD_voidInit+0x518>
    2cb2:	14 c0       	rjmp	.+40     	; 0x2cdc <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb6:	78 85       	ldd	r23, Y+8	; 0x08
    2cb8:	89 85       	ldd	r24, Y+9	; 0x09
    2cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <LCD_voidInit+0x560>
    2cd8:	9a 83       	std	Y+2, r25	; 0x02
    2cda:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    2cdc:	86 e0       	ldi	r24, 0x06	; 6
    2cde:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>


}
    2ce2:	c4 5b       	subi	r28, 0xB4	; 180
    2ce4:	df 4f       	sbci	r29, 0xFF	; 255
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	1f 91       	pop	r17
    2cf6:	0f 91       	pop	r16
    2cf8:	08 95       	ret

00002cfa <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
    2d02:	e1 97       	sbiw	r28, 0x31	; 49
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	f8 94       	cli
    2d08:	de bf       	out	0x3e, r29	; 62
    2d0a:	0f be       	out	0x3f, r0	; 63
    2d0c:	cd bf       	out	0x3d, r28	; 61
    2d0e:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	60 e0       	ldi	r22, 0x00	; 0
    2d14:	40 e0       	ldi	r20, 0x00	; 0
    2d16:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2d1a:	80 e0       	ldi	r24, 0x00	; 0
    2d1c:	61 e0       	ldi	r22, 0x01	; 1
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    2d24:	83 e0       	ldi	r24, 0x03	; 3
    2d26:	69 a9       	ldd	r22, Y+49	; 0x31
    2d28:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	62 e0       	ldi	r22, 0x02	; 2
    2d30:	41 e0       	ldi	r20, 0x01	; 1
    2d32:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	a0 e8       	ldi	r26, 0x80	; 128
    2d3c:	bf e3       	ldi	r27, 0x3F	; 63
    2d3e:	8d a7       	std	Y+45, r24	; 0x2d
    2d40:	9e a7       	std	Y+46, r25	; 0x2e
    2d42:	af a7       	std	Y+47, r26	; 0x2f
    2d44:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d46:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d48:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d4c:	98 a9       	ldd	r25, Y+48	; 0x30
    2d4e:	2b ea       	ldi	r18, 0xAB	; 171
    2d50:	3a ea       	ldi	r19, 0xAA	; 170
    2d52:	4a e2       	ldi	r20, 0x2A	; 42
    2d54:	50 e4       	ldi	r21, 0x40	; 64
    2d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	89 a7       	std	Y+41, r24	; 0x29
    2d60:	9a a7       	std	Y+42, r25	; 0x2a
    2d62:	ab a7       	std	Y+43, r26	; 0x2b
    2d64:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2d66:	69 a5       	ldd	r22, Y+41	; 0x29
    2d68:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d6e:	20 e0       	ldi	r18, 0x00	; 0
    2d70:	30 e0       	ldi	r19, 0x00	; 0
    2d72:	40 e8       	ldi	r20, 0x80	; 128
    2d74:	5f e3       	ldi	r21, 0x3F	; 63
    2d76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d7a:	88 23       	and	r24, r24
    2d7c:	1c f4       	brge	.+6      	; 0x2d84 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2d7e:	81 e0       	ldi	r24, 0x01	; 1
    2d80:	88 a7       	std	Y+40, r24	; 0x28
    2d82:	91 c0       	rjmp	.+290    	; 0x2ea6 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2d84:	69 a5       	ldd	r22, Y+41	; 0x29
    2d86:	7a a5       	ldd	r23, Y+42	; 0x2a
    2d88:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d8a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	30 e0       	ldi	r19, 0x00	; 0
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	53 e4       	ldi	r21, 0x43	; 67
    2d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	0c f0       	brlt	.+2      	; 0x2d9e <LCD_voidSendCmnd+0xa4>
    2d9c:	7b c0       	rjmp	.+246    	; 0x2e94 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2d9e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2da0:	7e a5       	ldd	r23, Y+46	; 0x2e
    2da2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2da4:	98 a9       	ldd	r25, Y+48	; 0x30
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a e7       	ldi	r20, 0x7A	; 122
    2dac:	54 e4       	ldi	r21, 0x44	; 68
    2dae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	8c a3       	std	Y+36, r24	; 0x24
    2db8:	9d a3       	std	Y+37, r25	; 0x25
    2dba:	ae a3       	std	Y+38, r26	; 0x26
    2dbc:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dbe:	6c a1       	ldd	r22, Y+36	; 0x24
    2dc0:	7d a1       	ldd	r23, Y+37	; 0x25
    2dc2:	8e a1       	ldd	r24, Y+38	; 0x26
    2dc4:	9f a1       	ldd	r25, Y+39	; 0x27
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	4a ef       	ldi	r20, 0xFA	; 250
    2dcc:	54 e4       	ldi	r21, 0x44	; 68
    2dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	88 a3       	std	Y+32, r24	; 0x20
    2dd8:	99 a3       	std	Y+33, r25	; 0x21
    2dda:	aa a3       	std	Y+34, r26	; 0x22
    2ddc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2dde:	68 a1       	ldd	r22, Y+32	; 0x20
    2de0:	79 a1       	ldd	r23, Y+33	; 0x21
    2de2:	8a a1       	ldd	r24, Y+34	; 0x22
    2de4:	9b a1       	ldd	r25, Y+35	; 0x23
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e8       	ldi	r20, 0x80	; 128
    2dec:	5f e3       	ldi	r21, 0x3F	; 63
    2dee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df2:	88 23       	and	r24, r24
    2df4:	2c f4       	brge	.+10     	; 0x2e00 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2df6:	81 e0       	ldi	r24, 0x01	; 1
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	9f 8f       	std	Y+31, r25	; 0x1f
    2dfc:	8e 8f       	std	Y+30, r24	; 0x1e
    2dfe:	3f c0       	rjmp	.+126    	; 0x2e7e <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2e00:	68 a1       	ldd	r22, Y+32	; 0x20
    2e02:	79 a1       	ldd	r23, Y+33	; 0x21
    2e04:	8a a1       	ldd	r24, Y+34	; 0x22
    2e06:	9b a1       	ldd	r25, Y+35	; 0x23
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	3f ef       	ldi	r19, 0xFF	; 255
    2e0c:	4f e7       	ldi	r20, 0x7F	; 127
    2e0e:	57 e4       	ldi	r21, 0x47	; 71
    2e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e14:	18 16       	cp	r1, r24
    2e16:	4c f5       	brge	.+82     	; 0x2e6a <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e18:	6c a1       	ldd	r22, Y+36	; 0x24
    2e1a:	7d a1       	ldd	r23, Y+37	; 0x25
    2e1c:	8e a1       	ldd	r24, Y+38	; 0x26
    2e1e:	9f a1       	ldd	r25, Y+39	; 0x27
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	40 e2       	ldi	r20, 0x20	; 32
    2e26:	51 e4       	ldi	r21, 0x41	; 65
    2e28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	bc 01       	movw	r22, r24
    2e32:	cd 01       	movw	r24, r26
    2e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	9f 8f       	std	Y+31, r25	; 0x1f
    2e3e:	8e 8f       	std	Y+30, r24	; 0x1e
    2e40:	0f c0       	rjmp	.+30     	; 0x2e60 <LCD_voidSendCmnd+0x166>
    2e42:	88 ec       	ldi	r24, 0xC8	; 200
    2e44:	90 e0       	ldi	r25, 0x00	; 0
    2e46:	9d 8f       	std	Y+29, r25	; 0x1d
    2e48:	8c 8f       	std	Y+28, r24	; 0x1c
    2e4a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2e4c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	f1 f7       	brne	.-4      	; 0x2e4e <LCD_voidSendCmnd+0x154>
    2e52:	9d 8f       	std	Y+29, r25	; 0x1d
    2e54:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e58:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	9f 8f       	std	Y+31, r25	; 0x1f
    2e5e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e64:	00 97       	sbiw	r24, 0x00	; 0
    2e66:	69 f7       	brne	.-38     	; 0x2e42 <LCD_voidSendCmnd+0x148>
    2e68:	24 c0       	rjmp	.+72     	; 0x2eb2 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e6a:	68 a1       	ldd	r22, Y+32	; 0x20
    2e6c:	79 a1       	ldd	r23, Y+33	; 0x21
    2e6e:	8a a1       	ldd	r24, Y+34	; 0x22
    2e70:	9b a1       	ldd	r25, Y+35	; 0x23
    2e72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	9f 8f       	std	Y+31, r25	; 0x1f
    2e7c:	8e 8f       	std	Y+30, r24	; 0x1e
    2e7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2e80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2e82:	9b 8f       	std	Y+27, r25	; 0x1b
    2e84:	8a 8f       	std	Y+26, r24	; 0x1a
    2e86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2e88:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2e8a:	01 97       	sbiw	r24, 0x01	; 1
    2e8c:	f1 f7       	brne	.-4      	; 0x2e8a <LCD_voidSendCmnd+0x190>
    2e8e:	9b 8f       	std	Y+27, r25	; 0x1b
    2e90:	8a 8f       	std	Y+26, r24	; 0x1a
    2e92:	0f c0       	rjmp	.+30     	; 0x2eb2 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e94:	69 a5       	ldd	r22, Y+41	; 0x29
    2e96:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e98:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e9a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	88 a7       	std	Y+40, r24	; 0x28
    2ea6:	88 a5       	ldd	r24, Y+40	; 0x28
    2ea8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2eaa:	89 8d       	ldd	r24, Y+25	; 0x19
    2eac:	8a 95       	dec	r24
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <LCD_voidSendCmnd+0x1b2>
    2eb0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2eb2:	80 e0       	ldi	r24, 0x00	; 0
    2eb4:	62 e0       	ldi	r22, 0x02	; 2
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2ebc:	80 e0       	ldi	r24, 0x00	; 0
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	a0 e8       	ldi	r26, 0x80	; 128
    2ec2:	bf e3       	ldi	r27, 0x3F	; 63
    2ec4:	8d 8b       	std	Y+21, r24	; 0x15
    2ec6:	9e 8b       	std	Y+22, r25	; 0x16
    2ec8:	af 8b       	std	Y+23, r26	; 0x17
    2eca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ecc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ece:	7e 89       	ldd	r23, Y+22	; 0x16
    2ed0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ed2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ed4:	2b ea       	ldi	r18, 0xAB	; 171
    2ed6:	3a ea       	ldi	r19, 0xAA	; 170
    2ed8:	4a e2       	ldi	r20, 0x2A	; 42
    2eda:	50 e4       	ldi	r21, 0x40	; 64
    2edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee0:	dc 01       	movw	r26, r24
    2ee2:	cb 01       	movw	r24, r22
    2ee4:	89 8b       	std	Y+17, r24	; 0x11
    2ee6:	9a 8b       	std	Y+18, r25	; 0x12
    2ee8:	ab 8b       	std	Y+19, r26	; 0x13
    2eea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2eec:	69 89       	ldd	r22, Y+17	; 0x11
    2eee:	7a 89       	ldd	r23, Y+18	; 0x12
    2ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	30 e0       	ldi	r19, 0x00	; 0
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	5f e3       	ldi	r21, 0x3F	; 63
    2efc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f00:	88 23       	and	r24, r24
    2f02:	1c f4       	brge	.+6      	; 0x2f0a <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    2f04:	81 e0       	ldi	r24, 0x01	; 1
    2f06:	88 8b       	std	Y+16, r24	; 0x10
    2f08:	91 c0       	rjmp	.+290    	; 0x302c <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    2f0a:	69 89       	ldd	r22, Y+17	; 0x11
    2f0c:	7a 89       	ldd	r23, Y+18	; 0x12
    2f0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f10:	9c 89       	ldd	r25, Y+20	; 0x14
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	4f e7       	ldi	r20, 0x7F	; 127
    2f18:	53 e4       	ldi	r21, 0x43	; 67
    2f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f1e:	18 16       	cp	r1, r24
    2f20:	0c f0       	brlt	.+2      	; 0x2f24 <LCD_voidSendCmnd+0x22a>
    2f22:	7b c0       	rjmp	.+246    	; 0x301a <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    2f24:	6d 89       	ldd	r22, Y+21	; 0x15
    2f26:	7e 89       	ldd	r23, Y+22	; 0x16
    2f28:	8f 89       	ldd	r24, Y+23	; 0x17
    2f2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	4a e7       	ldi	r20, 0x7A	; 122
    2f32:	54 e4       	ldi	r21, 0x44	; 68
    2f34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	8c 87       	std	Y+12, r24	; 0x0c
    2f3e:	9d 87       	std	Y+13, r25	; 0x0d
    2f40:	ae 87       	std	Y+14, r26	; 0x0e
    2f42:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f44:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f46:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f48:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	4a ef       	ldi	r20, 0xFA	; 250
    2f52:	54 e4       	ldi	r21, 0x44	; 68
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	88 87       	std	Y+8, r24	; 0x08
    2f5e:	99 87       	std	Y+9, r25	; 0x09
    2f60:	aa 87       	std	Y+10, r26	; 0x0a
    2f62:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2f64:	68 85       	ldd	r22, Y+8	; 0x08
    2f66:	79 85       	ldd	r23, Y+9	; 0x09
    2f68:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f6c:	20 e0       	ldi	r18, 0x00	; 0
    2f6e:	30 e0       	ldi	r19, 0x00	; 0
    2f70:	40 e8       	ldi	r20, 0x80	; 128
    2f72:	5f e3       	ldi	r21, 0x3F	; 63
    2f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f78:	88 23       	and	r24, r24
    2f7a:	2c f4       	brge	.+10     	; 0x2f86 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	9f 83       	std	Y+7, r25	; 0x07
    2f82:	8e 83       	std	Y+6, r24	; 0x06
    2f84:	3f c0       	rjmp	.+126    	; 0x3004 <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2f86:	68 85       	ldd	r22, Y+8	; 0x08
    2f88:	79 85       	ldd	r23, Y+9	; 0x09
    2f8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	3f ef       	ldi	r19, 0xFF	; 255
    2f92:	4f e7       	ldi	r20, 0x7F	; 127
    2f94:	57 e4       	ldi	r21, 0x47	; 71
    2f96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f9a:	18 16       	cp	r1, r24
    2f9c:	4c f5       	brge	.+82     	; 0x2ff0 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fa0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	40 e2       	ldi	r20, 0x20	; 32
    2fac:	51 e4       	ldi	r21, 0x41	; 65
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	bc 01       	movw	r22, r24
    2fb8:	cd 01       	movw	r24, r26
    2fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	9f 83       	std	Y+7, r25	; 0x07
    2fc4:	8e 83       	std	Y+6, r24	; 0x06
    2fc6:	0f c0       	rjmp	.+30     	; 0x2fe6 <LCD_voidSendCmnd+0x2ec>
    2fc8:	88 ec       	ldi	r24, 0xC8	; 200
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	9d 83       	std	Y+5, r25	; 0x05
    2fce:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd4:	01 97       	sbiw	r24, 0x01	; 1
    2fd6:	f1 f7       	brne	.-4      	; 0x2fd4 <LCD_voidSendCmnd+0x2da>
    2fd8:	9d 83       	std	Y+5, r25	; 0x05
    2fda:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    2fde:	9f 81       	ldd	r25, Y+7	; 0x07
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	9f 83       	std	Y+7, r25	; 0x07
    2fe4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fe6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fe8:	9f 81       	ldd	r25, Y+7	; 0x07
    2fea:	00 97       	sbiw	r24, 0x00	; 0
    2fec:	69 f7       	brne	.-38     	; 0x2fc8 <LCD_voidSendCmnd+0x2ce>
    2fee:	24 c0       	rjmp	.+72     	; 0x3038 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ff0:	68 85       	ldd	r22, Y+8	; 0x08
    2ff2:	79 85       	ldd	r23, Y+9	; 0x09
    2ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ffc:	dc 01       	movw	r26, r24
    2ffe:	cb 01       	movw	r24, r22
    3000:	9f 83       	std	Y+7, r25	; 0x07
    3002:	8e 83       	std	Y+6, r24	; 0x06
    3004:	8e 81       	ldd	r24, Y+6	; 0x06
    3006:	9f 81       	ldd	r25, Y+7	; 0x07
    3008:	9b 83       	std	Y+3, r25	; 0x03
    300a:	8a 83       	std	Y+2, r24	; 0x02
    300c:	8a 81       	ldd	r24, Y+2	; 0x02
    300e:	9b 81       	ldd	r25, Y+3	; 0x03
    3010:	01 97       	sbiw	r24, 0x01	; 1
    3012:	f1 f7       	brne	.-4      	; 0x3010 <LCD_voidSendCmnd+0x316>
    3014:	9b 83       	std	Y+3, r25	; 0x03
    3016:	8a 83       	std	Y+2, r24	; 0x02
    3018:	0f c0       	rjmp	.+30     	; 0x3038 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    301a:	69 89       	ldd	r22, Y+17	; 0x11
    301c:	7a 89       	ldd	r23, Y+18	; 0x12
    301e:	8b 89       	ldd	r24, Y+19	; 0x13
    3020:	9c 89       	ldd	r25, Y+20	; 0x14
    3022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3026:	dc 01       	movw	r26, r24
    3028:	cb 01       	movw	r24, r22
    302a:	88 8b       	std	Y+16, r24	; 0x10
    302c:	88 89       	ldd	r24, Y+16	; 0x10
    302e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	8a 95       	dec	r24
    3034:	f1 f7       	brne	.-4      	; 0x3032 <LCD_voidSendCmnd+0x338>
    3036:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    3038:	e1 96       	adiw	r28, 0x31	; 49
    303a:	0f b6       	in	r0, 0x3f	; 63
    303c:	f8 94       	cli
    303e:	de bf       	out	0x3e, r29	; 62
    3040:	0f be       	out	0x3f, r0	; 63
    3042:	cd bf       	out	0x3d, r28	; 61
    3044:	cf 91       	pop	r28
    3046:	df 91       	pop	r29
    3048:	08 95       	ret

0000304a <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    304a:	df 93       	push	r29
    304c:	cf 93       	push	r28
    304e:	cd b7       	in	r28, 0x3d	; 61
    3050:	de b7       	in	r29, 0x3e	; 62
    3052:	e1 97       	sbiw	r28, 0x31	; 49
    3054:	0f b6       	in	r0, 0x3f	; 63
    3056:	f8 94       	cli
    3058:	de bf       	out	0x3e, r29	; 62
    305a:	0f be       	out	0x3f, r0	; 63
    305c:	cd bf       	out	0x3d, r28	; 61
    305e:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    306a:	80 e0       	ldi	r24, 0x00	; 0
    306c:	61 e0       	ldi	r22, 0x01	; 1
    306e:	40 e0       	ldi	r20, 0x00	; 0
    3070:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	69 a9       	ldd	r22, Y+49	; 0x31
    3078:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    307c:	80 e0       	ldi	r24, 0x00	; 0
    307e:	62 e0       	ldi	r22, 0x02	; 2
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    3086:	80 e0       	ldi	r24, 0x00	; 0
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	a0 e8       	ldi	r26, 0x80	; 128
    308c:	bf e3       	ldi	r27, 0x3F	; 63
    308e:	8d a7       	std	Y+45, r24	; 0x2d
    3090:	9e a7       	std	Y+46, r25	; 0x2e
    3092:	af a7       	std	Y+47, r26	; 0x2f
    3094:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3096:	6d a5       	ldd	r22, Y+45	; 0x2d
    3098:	7e a5       	ldd	r23, Y+46	; 0x2e
    309a:	8f a5       	ldd	r24, Y+47	; 0x2f
    309c:	98 a9       	ldd	r25, Y+48	; 0x30
    309e:	2b ea       	ldi	r18, 0xAB	; 171
    30a0:	3a ea       	ldi	r19, 0xAA	; 170
    30a2:	4a e2       	ldi	r20, 0x2A	; 42
    30a4:	50 e4       	ldi	r21, 0x40	; 64
    30a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	89 a7       	std	Y+41, r24	; 0x29
    30b0:	9a a7       	std	Y+42, r25	; 0x2a
    30b2:	ab a7       	std	Y+43, r26	; 0x2b
    30b4:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    30b6:	69 a5       	ldd	r22, Y+41	; 0x29
    30b8:	7a a5       	ldd	r23, Y+42	; 0x2a
    30ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    30bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	40 e8       	ldi	r20, 0x80	; 128
    30c4:	5f e3       	ldi	r21, 0x3F	; 63
    30c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ca:	88 23       	and	r24, r24
    30cc:	1c f4       	brge	.+6      	; 0x30d4 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	88 a7       	std	Y+40, r24	; 0x28
    30d2:	91 c0       	rjmp	.+290    	; 0x31f6 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    30d4:	69 a5       	ldd	r22, Y+41	; 0x29
    30d6:	7a a5       	ldd	r23, Y+42	; 0x2a
    30d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    30da:	9c a5       	ldd	r25, Y+44	; 0x2c
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4f e7       	ldi	r20, 0x7F	; 127
    30e2:	53 e4       	ldi	r21, 0x43	; 67
    30e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30e8:	18 16       	cp	r1, r24
    30ea:	0c f0       	brlt	.+2      	; 0x30ee <LCD_voidSendChar+0xa4>
    30ec:	7b c0       	rjmp	.+246    	; 0x31e4 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    30ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    30f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    30f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f4:	98 a9       	ldd	r25, Y+48	; 0x30
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	4a e7       	ldi	r20, 0x7A	; 122
    30fc:	54 e4       	ldi	r21, 0x44	; 68
    30fe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	8c a3       	std	Y+36, r24	; 0x24
    3108:	9d a3       	std	Y+37, r25	; 0x25
    310a:	ae a3       	std	Y+38, r26	; 0x26
    310c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    310e:	6c a1       	ldd	r22, Y+36	; 0x24
    3110:	7d a1       	ldd	r23, Y+37	; 0x25
    3112:	8e a1       	ldd	r24, Y+38	; 0x26
    3114:	9f a1       	ldd	r25, Y+39	; 0x27
    3116:	20 e0       	ldi	r18, 0x00	; 0
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	4a ef       	ldi	r20, 0xFA	; 250
    311c:	54 e4       	ldi	r21, 0x44	; 68
    311e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	88 a3       	std	Y+32, r24	; 0x20
    3128:	99 a3       	std	Y+33, r25	; 0x21
    312a:	aa a3       	std	Y+34, r26	; 0x22
    312c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    312e:	68 a1       	ldd	r22, Y+32	; 0x20
    3130:	79 a1       	ldd	r23, Y+33	; 0x21
    3132:	8a a1       	ldd	r24, Y+34	; 0x22
    3134:	9b a1       	ldd	r25, Y+35	; 0x23
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e8       	ldi	r20, 0x80	; 128
    313c:	5f e3       	ldi	r21, 0x3F	; 63
    313e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3142:	88 23       	and	r24, r24
    3144:	2c f4       	brge	.+10     	; 0x3150 <LCD_voidSendChar+0x106>
		__ticks = 1;
    3146:	81 e0       	ldi	r24, 0x01	; 1
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	9f 8f       	std	Y+31, r25	; 0x1f
    314c:	8e 8f       	std	Y+30, r24	; 0x1e
    314e:	3f c0       	rjmp	.+126    	; 0x31ce <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    3150:	68 a1       	ldd	r22, Y+32	; 0x20
    3152:	79 a1       	ldd	r23, Y+33	; 0x21
    3154:	8a a1       	ldd	r24, Y+34	; 0x22
    3156:	9b a1       	ldd	r25, Y+35	; 0x23
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	3f ef       	ldi	r19, 0xFF	; 255
    315c:	4f e7       	ldi	r20, 0x7F	; 127
    315e:	57 e4       	ldi	r21, 0x47	; 71
    3160:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3164:	18 16       	cp	r1, r24
    3166:	4c f5       	brge	.+82     	; 0x31ba <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3168:	6c a1       	ldd	r22, Y+36	; 0x24
    316a:	7d a1       	ldd	r23, Y+37	; 0x25
    316c:	8e a1       	ldd	r24, Y+38	; 0x26
    316e:	9f a1       	ldd	r25, Y+39	; 0x27
    3170:	20 e0       	ldi	r18, 0x00	; 0
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	40 e2       	ldi	r20, 0x20	; 32
    3176:	51 e4       	ldi	r21, 0x41	; 65
    3178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	bc 01       	movw	r22, r24
    3182:	cd 01       	movw	r24, r26
    3184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3188:	dc 01       	movw	r26, r24
    318a:	cb 01       	movw	r24, r22
    318c:	9f 8f       	std	Y+31, r25	; 0x1f
    318e:	8e 8f       	std	Y+30, r24	; 0x1e
    3190:	0f c0       	rjmp	.+30     	; 0x31b0 <LCD_voidSendChar+0x166>
    3192:	88 ec       	ldi	r24, 0xC8	; 200
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	9d 8f       	std	Y+29, r25	; 0x1d
    3198:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    319a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    319c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    319e:	01 97       	sbiw	r24, 0x01	; 1
    31a0:	f1 f7       	brne	.-4      	; 0x319e <LCD_voidSendChar+0x154>
    31a2:	9d 8f       	std	Y+29, r25	; 0x1d
    31a4:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31a8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	9f 8f       	std	Y+31, r25	; 0x1f
    31ae:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	69 f7       	brne	.-38     	; 0x3192 <LCD_voidSendChar+0x148>
    31b8:	24 c0       	rjmp	.+72     	; 0x3202 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31ba:	68 a1       	ldd	r22, Y+32	; 0x20
    31bc:	79 a1       	ldd	r23, Y+33	; 0x21
    31be:	8a a1       	ldd	r24, Y+34	; 0x22
    31c0:	9b a1       	ldd	r25, Y+35	; 0x23
    31c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c6:	dc 01       	movw	r26, r24
    31c8:	cb 01       	movw	r24, r22
    31ca:	9f 8f       	std	Y+31, r25	; 0x1f
    31cc:	8e 8f       	std	Y+30, r24	; 0x1e
    31ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31d2:	9b 8f       	std	Y+27, r25	; 0x1b
    31d4:	8a 8f       	std	Y+26, r24	; 0x1a
    31d6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31d8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    31da:	01 97       	sbiw	r24, 0x01	; 1
    31dc:	f1 f7       	brne	.-4      	; 0x31da <LCD_voidSendChar+0x190>
    31de:	9b 8f       	std	Y+27, r25	; 0x1b
    31e0:	8a 8f       	std	Y+26, r24	; 0x1a
    31e2:	0f c0       	rjmp	.+30     	; 0x3202 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31e4:	69 a5       	ldd	r22, Y+41	; 0x29
    31e6:	7a a5       	ldd	r23, Y+42	; 0x2a
    31e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    31ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	88 a7       	std	Y+40, r24	; 0x28
    31f6:	88 a5       	ldd	r24, Y+40	; 0x28
    31f8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31fa:	89 8d       	ldd	r24, Y+25	; 0x19
    31fc:	8a 95       	dec	r24
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <LCD_voidSendChar+0x1b2>
    3200:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    3202:	80 e0       	ldi	r24, 0x00	; 0
    3204:	62 e0       	ldi	r22, 0x02	; 2
    3206:	40 e0       	ldi	r20, 0x00	; 0
    3208:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    320c:	80 e0       	ldi	r24, 0x00	; 0
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	a0 e8       	ldi	r26, 0x80	; 128
    3212:	bf e3       	ldi	r27, 0x3F	; 63
    3214:	8d 8b       	std	Y+21, r24	; 0x15
    3216:	9e 8b       	std	Y+22, r25	; 0x16
    3218:	af 8b       	std	Y+23, r26	; 0x17
    321a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    321c:	6d 89       	ldd	r22, Y+21	; 0x15
    321e:	7e 89       	ldd	r23, Y+22	; 0x16
    3220:	8f 89       	ldd	r24, Y+23	; 0x17
    3222:	98 8d       	ldd	r25, Y+24	; 0x18
    3224:	2b ea       	ldi	r18, 0xAB	; 171
    3226:	3a ea       	ldi	r19, 0xAA	; 170
    3228:	4a e2       	ldi	r20, 0x2A	; 42
    322a:	50 e4       	ldi	r21, 0x40	; 64
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	89 8b       	std	Y+17, r24	; 0x11
    3236:	9a 8b       	std	Y+18, r25	; 0x12
    3238:	ab 8b       	std	Y+19, r26	; 0x13
    323a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    323c:	69 89       	ldd	r22, Y+17	; 0x11
    323e:	7a 89       	ldd	r23, Y+18	; 0x12
    3240:	8b 89       	ldd	r24, Y+19	; 0x13
    3242:	9c 89       	ldd	r25, Y+20	; 0x14
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e8       	ldi	r20, 0x80	; 128
    324a:	5f e3       	ldi	r21, 0x3F	; 63
    324c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3250:	88 23       	and	r24, r24
    3252:	1c f4       	brge	.+6      	; 0x325a <LCD_voidSendChar+0x210>
		__ticks = 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	88 8b       	std	Y+16, r24	; 0x10
    3258:	91 c0       	rjmp	.+290    	; 0x337c <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    325a:	69 89       	ldd	r22, Y+17	; 0x11
    325c:	7a 89       	ldd	r23, Y+18	; 0x12
    325e:	8b 89       	ldd	r24, Y+19	; 0x13
    3260:	9c 89       	ldd	r25, Y+20	; 0x14
    3262:	20 e0       	ldi	r18, 0x00	; 0
    3264:	30 e0       	ldi	r19, 0x00	; 0
    3266:	4f e7       	ldi	r20, 0x7F	; 127
    3268:	53 e4       	ldi	r21, 0x43	; 67
    326a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    326e:	18 16       	cp	r1, r24
    3270:	0c f0       	brlt	.+2      	; 0x3274 <LCD_voidSendChar+0x22a>
    3272:	7b c0       	rjmp	.+246    	; 0x336a <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    3274:	6d 89       	ldd	r22, Y+21	; 0x15
    3276:	7e 89       	ldd	r23, Y+22	; 0x16
    3278:	8f 89       	ldd	r24, Y+23	; 0x17
    327a:	98 8d       	ldd	r25, Y+24	; 0x18
    327c:	20 e0       	ldi	r18, 0x00	; 0
    327e:	30 e0       	ldi	r19, 0x00	; 0
    3280:	4a e7       	ldi	r20, 0x7A	; 122
    3282:	54 e4       	ldi	r21, 0x44	; 68
    3284:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	8c 87       	std	Y+12, r24	; 0x0c
    328e:	9d 87       	std	Y+13, r25	; 0x0d
    3290:	ae 87       	std	Y+14, r26	; 0x0e
    3292:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3294:	6c 85       	ldd	r22, Y+12	; 0x0c
    3296:	7d 85       	ldd	r23, Y+13	; 0x0d
    3298:	8e 85       	ldd	r24, Y+14	; 0x0e
    329a:	9f 85       	ldd	r25, Y+15	; 0x0f
    329c:	20 e0       	ldi	r18, 0x00	; 0
    329e:	30 e0       	ldi	r19, 0x00	; 0
    32a0:	4a ef       	ldi	r20, 0xFA	; 250
    32a2:	54 e4       	ldi	r21, 0x44	; 68
    32a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32a8:	dc 01       	movw	r26, r24
    32aa:	cb 01       	movw	r24, r22
    32ac:	88 87       	std	Y+8, r24	; 0x08
    32ae:	99 87       	std	Y+9, r25	; 0x09
    32b0:	aa 87       	std	Y+10, r26	; 0x0a
    32b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32b4:	68 85       	ldd	r22, Y+8	; 0x08
    32b6:	79 85       	ldd	r23, Y+9	; 0x09
    32b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    32ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    32bc:	20 e0       	ldi	r18, 0x00	; 0
    32be:	30 e0       	ldi	r19, 0x00	; 0
    32c0:	40 e8       	ldi	r20, 0x80	; 128
    32c2:	5f e3       	ldi	r21, 0x3F	; 63
    32c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32c8:	88 23       	and	r24, r24
    32ca:	2c f4       	brge	.+10     	; 0x32d6 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	9f 83       	std	Y+7, r25	; 0x07
    32d2:	8e 83       	std	Y+6, r24	; 0x06
    32d4:	3f c0       	rjmp	.+126    	; 0x3354 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    32d6:	68 85       	ldd	r22, Y+8	; 0x08
    32d8:	79 85       	ldd	r23, Y+9	; 0x09
    32da:	8a 85       	ldd	r24, Y+10	; 0x0a
    32dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	3f ef       	ldi	r19, 0xFF	; 255
    32e2:	4f e7       	ldi	r20, 0x7F	; 127
    32e4:	57 e4       	ldi	r21, 0x47	; 71
    32e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32ea:	18 16       	cp	r1, r24
    32ec:	4c f5       	brge	.+82     	; 0x3340 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ee:	6c 85       	ldd	r22, Y+12	; 0x0c
    32f0:	7d 85       	ldd	r23, Y+13	; 0x0d
    32f2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 e2       	ldi	r20, 0x20	; 32
    32fc:	51 e4       	ldi	r21, 0x41	; 65
    32fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3302:	dc 01       	movw	r26, r24
    3304:	cb 01       	movw	r24, r22
    3306:	bc 01       	movw	r22, r24
    3308:	cd 01       	movw	r24, r26
    330a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	9f 83       	std	Y+7, r25	; 0x07
    3314:	8e 83       	std	Y+6, r24	; 0x06
    3316:	0f c0       	rjmp	.+30     	; 0x3336 <LCD_voidSendChar+0x2ec>
    3318:	88 ec       	ldi	r24, 0xC8	; 200
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	9d 83       	std	Y+5, r25	; 0x05
    331e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3320:	8c 81       	ldd	r24, Y+4	; 0x04
    3322:	9d 81       	ldd	r25, Y+5	; 0x05
    3324:	01 97       	sbiw	r24, 0x01	; 1
    3326:	f1 f7       	brne	.-4      	; 0x3324 <LCD_voidSendChar+0x2da>
    3328:	9d 83       	std	Y+5, r25	; 0x05
    332a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    332c:	8e 81       	ldd	r24, Y+6	; 0x06
    332e:	9f 81       	ldd	r25, Y+7	; 0x07
    3330:	01 97       	sbiw	r24, 0x01	; 1
    3332:	9f 83       	std	Y+7, r25	; 0x07
    3334:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3336:	8e 81       	ldd	r24, Y+6	; 0x06
    3338:	9f 81       	ldd	r25, Y+7	; 0x07
    333a:	00 97       	sbiw	r24, 0x00	; 0
    333c:	69 f7       	brne	.-38     	; 0x3318 <LCD_voidSendChar+0x2ce>
    333e:	24 c0       	rjmp	.+72     	; 0x3388 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3340:	68 85       	ldd	r22, Y+8	; 0x08
    3342:	79 85       	ldd	r23, Y+9	; 0x09
    3344:	8a 85       	ldd	r24, Y+10	; 0x0a
    3346:	9b 85       	ldd	r25, Y+11	; 0x0b
    3348:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	9f 83       	std	Y+7, r25	; 0x07
    3352:	8e 83       	std	Y+6, r24	; 0x06
    3354:	8e 81       	ldd	r24, Y+6	; 0x06
    3356:	9f 81       	ldd	r25, Y+7	; 0x07
    3358:	9b 83       	std	Y+3, r25	; 0x03
    335a:	8a 83       	std	Y+2, r24	; 0x02
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <LCD_voidSendChar+0x316>
    3364:	9b 83       	std	Y+3, r25	; 0x03
    3366:	8a 83       	std	Y+2, r24	; 0x02
    3368:	0f c0       	rjmp	.+30     	; 0x3388 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    336a:	69 89       	ldd	r22, Y+17	; 0x11
    336c:	7a 89       	ldd	r23, Y+18	; 0x12
    336e:	8b 89       	ldd	r24, Y+19	; 0x13
    3370:	9c 89       	ldd	r25, Y+20	; 0x14
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	88 8b       	std	Y+16, r24	; 0x10
    337c:	88 89       	ldd	r24, Y+16	; 0x10
    337e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3380:	89 81       	ldd	r24, Y+1	; 0x01
    3382:	8a 95       	dec	r24
    3384:	f1 f7       	brne	.-4      	; 0x3382 <LCD_voidSendChar+0x338>
    3386:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    3388:	e1 96       	adiw	r28, 0x31	; 49
    338a:	0f b6       	in	r0, 0x3f	; 63
    338c:	f8 94       	cli
    338e:	de bf       	out	0x3e, r29	; 62
    3390:	0f be       	out	0x3f, r0	; 63
    3392:	cd bf       	out	0x3d, r28	; 61
    3394:	cf 91       	pop	r28
    3396:	df 91       	pop	r29
    3398:	08 95       	ret

0000339a <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    339a:	df 93       	push	r29
    339c:	cf 93       	push	r28
    339e:	00 d0       	rcall	.+0      	; 0x33a0 <LCD_voidWriteString+0x6>
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	9a 83       	std	Y+2, r25	; 0x02
    33a6:	89 83       	std	Y+1, r24	; 0x01
    33a8:	0a c0       	rjmp	.+20     	; 0x33be <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    33aa:	e9 81       	ldd	r30, Y+1	; 0x01
    33ac:	fa 81       	ldd	r31, Y+2	; 0x02
    33ae:	80 81       	ld	r24, Z
    33b0:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    33b4:	89 81       	ldd	r24, Y+1	; 0x01
    33b6:	9a 81       	ldd	r25, Y+2	; 0x02
    33b8:	01 96       	adiw	r24, 0x01	; 1
    33ba:	9a 83       	std	Y+2, r25	; 0x02
    33bc:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    33be:	e9 81       	ldd	r30, Y+1	; 0x01
    33c0:	fa 81       	ldd	r31, Y+2	; 0x02
    33c2:	80 81       	ld	r24, Z
    33c4:	88 23       	and	r24, r24
    33c6:	89 f7       	brne	.-30     	; 0x33aa <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	cf 91       	pop	r28
    33ce:	df 91       	pop	r29
    33d0:	08 95       	ret

000033d2 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    33d2:	0f 93       	push	r16
    33d4:	1f 93       	push	r17
    33d6:	df 93       	push	r29
    33d8:	cf 93       	push	r28
    33da:	cd b7       	in	r28, 0x3d	; 61
    33dc:	de b7       	in	r29, 0x3e	; 62
    33de:	65 97       	sbiw	r28, 0x15	; 21
    33e0:	0f b6       	in	r0, 0x3f	; 63
    33e2:	f8 94       	cli
    33e4:	de bf       	out	0x3e, r29	; 62
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	cd bf       	out	0x3d, r28	; 61
    33ea:	6a 8b       	std	Y+18, r22	; 0x12
    33ec:	7b 8b       	std	Y+19, r23	; 0x13
    33ee:	8c 8b       	std	Y+20, r24	; 0x14
    33f0:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    33f2:	8f ef       	ldi	r24, 0xFF	; 255
    33f4:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    33f6:	8a 89       	ldd	r24, Y+18	; 0x12
    33f8:	9b 89       	ldd	r25, Y+19	; 0x13
    33fa:	ac 89       	ldd	r26, Y+20	; 0x14
    33fc:	bd 89       	ldd	r27, Y+21	; 0x15
    33fe:	00 97       	sbiw	r24, 0x00	; 0
    3400:	a1 05       	cpc	r26, r1
    3402:	b1 05       	cpc	r27, r1
    3404:	99 f5       	brne	.+102    	; 0x346c <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    3406:	80 e3       	ldi	r24, 0x30	; 48
    3408:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    340c:	4e c0       	rjmp	.+156    	; 0x34aa <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    340e:	8a 81       	ldd	r24, Y+2	; 0x02
    3410:	8f 5f       	subi	r24, 0xFF	; 255
    3412:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	08 2f       	mov	r16, r24
    3418:	11 27       	eor	r17, r17
    341a:	07 fd       	sbrc	r16, 7
    341c:	10 95       	com	r17
    341e:	8a 89       	ldd	r24, Y+18	; 0x12
    3420:	9b 89       	ldd	r25, Y+19	; 0x13
    3422:	ac 89       	ldd	r26, Y+20	; 0x14
    3424:	bd 89       	ldd	r27, Y+21	; 0x15
    3426:	2a e0       	ldi	r18, 0x0A	; 10
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	28 2f       	mov	r18, r24
    343c:	ce 01       	movw	r24, r28
    343e:	03 96       	adiw	r24, 0x03	; 3
    3440:	fc 01       	movw	r30, r24
    3442:	e0 0f       	add	r30, r16
    3444:	f1 1f       	adc	r31, r17
    3446:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    3448:	8a 89       	ldd	r24, Y+18	; 0x12
    344a:	9b 89       	ldd	r25, Y+19	; 0x13
    344c:	ac 89       	ldd	r26, Y+20	; 0x14
    344e:	bd 89       	ldd	r27, Y+21	; 0x15
    3450:	2a e0       	ldi	r18, 0x0A	; 10
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e0       	ldi	r20, 0x00	; 0
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	bc 01       	movw	r22, r24
    345a:	cd 01       	movw	r24, r26
    345c:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    3460:	da 01       	movw	r26, r20
    3462:	c9 01       	movw	r24, r18
    3464:	8a 8b       	std	Y+18, r24	; 0x12
    3466:	9b 8b       	std	Y+19, r25	; 0x13
    3468:	ac 8b       	std	Y+20, r26	; 0x14
    346a:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    346c:	8a 89       	ldd	r24, Y+18	; 0x12
    346e:	9b 89       	ldd	r25, Y+19	; 0x13
    3470:	ac 89       	ldd	r26, Y+20	; 0x14
    3472:	bd 89       	ldd	r27, Y+21	; 0x15
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	a1 05       	cpc	r26, r1
    3478:	b1 05       	cpc	r27, r1
    347a:	49 f6       	brne	.-110    	; 0x340e <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    347c:	8a 81       	ldd	r24, Y+2	; 0x02
    347e:	89 83       	std	Y+1, r24	; 0x01
    3480:	11 c0       	rjmp	.+34     	; 0x34a4 <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    3482:	89 81       	ldd	r24, Y+1	; 0x01
    3484:	28 2f       	mov	r18, r24
    3486:	33 27       	eor	r19, r19
    3488:	27 fd       	sbrc	r18, 7
    348a:	30 95       	com	r19
    348c:	ce 01       	movw	r24, r28
    348e:	03 96       	adiw	r24, 0x03	; 3
    3490:	fc 01       	movw	r30, r24
    3492:	e2 0f       	add	r30, r18
    3494:	f3 1f       	adc	r31, r19
    3496:	80 81       	ld	r24, Z
    3498:	80 5d       	subi	r24, 0xD0	; 208
    349a:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	81 50       	subi	r24, 0x01	; 1
    34a2:	89 83       	std	Y+1, r24	; 0x01
    34a4:	89 81       	ldd	r24, Y+1	; 0x01
    34a6:	88 23       	and	r24, r24
    34a8:	64 f7       	brge	.-40     	; 0x3482 <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    34aa:	65 96       	adiw	r28, 0x15	; 21
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	de bf       	out	0x3e, r29	; 62
    34b2:	0f be       	out	0x3f, r0	; 63
    34b4:	cd bf       	out	0x3d, r28	; 61
    34b6:	cf 91       	pop	r28
    34b8:	df 91       	pop	r29
    34ba:	1f 91       	pop	r17
    34bc:	0f 91       	pop	r16
    34be:	08 95       	ret

000034c0 <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    34c0:	df 93       	push	r29
    34c2:	cf 93       	push	r28
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <LCD_u8GoToXY+0x6>
    34c6:	00 d0       	rcall	.+0      	; 0x34c8 <LCD_u8GoToXY+0x8>
    34c8:	0f 92       	push	r0
    34ca:	cd b7       	in	r28, 0x3d	; 61
    34cc:	de b7       	in	r29, 0x3e	; 62
    34ce:	8a 83       	std	Y+2, r24	; 0x02
    34d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    34d2:	81 e0       	ldi	r24, 0x01	; 1
    34d4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    34d6:	8b 81       	ldd	r24, Y+3	; 0x03
    34d8:	88 32       	cpi	r24, 0x28	; 40
    34da:	d8 f4       	brcc	.+54     	; 0x3512 <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    34dc:	8a 81       	ldd	r24, Y+2	; 0x02
    34de:	28 2f       	mov	r18, r24
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	3d 83       	std	Y+5, r19	; 0x05
    34e4:	2c 83       	std	Y+4, r18	; 0x04
    34e6:	8c 81       	ldd	r24, Y+4	; 0x04
    34e8:	9d 81       	ldd	r25, Y+5	; 0x05
    34ea:	81 30       	cpi	r24, 0x01	; 1
    34ec:	91 05       	cpc	r25, r1
    34ee:	31 f0       	breq	.+12     	; 0x34fc <LCD_u8GoToXY+0x3c>
    34f0:	2c 81       	ldd	r18, Y+4	; 0x04
    34f2:	3d 81       	ldd	r19, Y+5	; 0x05
    34f4:	22 30       	cpi	r18, 0x02	; 2
    34f6:	31 05       	cpc	r19, r1
    34f8:	31 f0       	breq	.+12     	; 0x3506 <LCD_u8GoToXY+0x46>
    34fa:	0a c0       	rjmp	.+20     	; 0x3510 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	80 58       	subi	r24, 0x80	; 128
    3500:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
    3504:	06 c0       	rjmp	.+12     	; 0x3512 <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	80 54       	subi	r24, 0x40	; 64
    350a:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
    350e:	01 c0       	rjmp	.+2      	; 0x3512 <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    3510:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    3512:	89 81       	ldd	r24, Y+1	; 0x01
}
    3514:	0f 90       	pop	r0
    3516:	0f 90       	pop	r0
    3518:	0f 90       	pop	r0
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	cf 91       	pop	r28
    3520:	df 91       	pop	r29
    3522:	08 95       	ret

00003524 <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    3524:	df 93       	push	r29
    3526:	cf 93       	push	r28
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    352c:	81 e0       	ldi	r24, 0x01	; 1
    352e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
}
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	cd b7       	in	r28, 0x3d	; 61
    353e:	de b7       	in	r29, 0x3e	; 62
    3540:	2a 97       	sbiw	r28, 0x0a	; 10
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	8c 83       	std	Y+4, r24	; 0x04
    354e:	7e 83       	std	Y+6, r23	; 0x06
    3550:	6d 83       	std	Y+5, r22	; 0x05
    3552:	4f 83       	std	Y+7, r20	; 0x07
    3554:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3556:	81 e0       	ldi	r24, 0x01	; 1
    3558:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    355a:	88 e0       	ldi	r24, 0x08	; 8
    355c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    355e:	8c 81       	ldd	r24, Y+4	; 0x04
    3560:	28 2f       	mov	r18, r24
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	3a 87       	std	Y+10, r19	; 0x0a
    3566:	29 87       	std	Y+9, r18	; 0x09
    3568:	89 85       	ldd	r24, Y+9	; 0x09
    356a:	9a 85       	ldd	r25, Y+10	; 0x0a
    356c:	83 30       	cpi	r24, 0x03	; 3
    356e:	91 05       	cpc	r25, r1
    3570:	09 f4       	brne	.+2      	; 0x3574 <LCD_voidWriteSpecialChar+0x3c>
    3572:	8c c0       	rjmp	.+280    	; 0x368c <LCD_voidWriteSpecialChar+0x154>
    3574:	29 85       	ldd	r18, Y+9	; 0x09
    3576:	3a 85       	ldd	r19, Y+10	; 0x0a
    3578:	24 30       	cpi	r18, 0x04	; 4
    357a:	31 05       	cpc	r19, r1
    357c:	8c f4       	brge	.+34     	; 0x35a0 <LCD_voidWriteSpecialChar+0x68>
    357e:	89 85       	ldd	r24, Y+9	; 0x09
    3580:	9a 85       	ldd	r25, Y+10	; 0x0a
    3582:	81 30       	cpi	r24, 0x01	; 1
    3584:	91 05       	cpc	r25, r1
    3586:	09 f4       	brne	.+2      	; 0x358a <LCD_voidWriteSpecialChar+0x52>
    3588:	43 c0       	rjmp	.+134    	; 0x3610 <LCD_voidWriteSpecialChar+0xd8>
    358a:	29 85       	ldd	r18, Y+9	; 0x09
    358c:	3a 85       	ldd	r19, Y+10	; 0x0a
    358e:	22 30       	cpi	r18, 0x02	; 2
    3590:	31 05       	cpc	r19, r1
    3592:	0c f0       	brlt	.+2      	; 0x3596 <LCD_voidWriteSpecialChar+0x5e>
    3594:	5c c0       	rjmp	.+184    	; 0x364e <LCD_voidWriteSpecialChar+0x116>
    3596:	89 85       	ldd	r24, Y+9	; 0x09
    3598:	9a 85       	ldd	r25, Y+10	; 0x0a
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	d1 f0       	breq	.+52     	; 0x35d2 <LCD_voidWriteSpecialChar+0x9a>
    359e:	11 c1       	rjmp	.+546    	; 0x37c2 <LCD_voidWriteSpecialChar+0x28a>
    35a0:	29 85       	ldd	r18, Y+9	; 0x09
    35a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    35a4:	25 30       	cpi	r18, 0x05	; 5
    35a6:	31 05       	cpc	r19, r1
    35a8:	09 f4       	brne	.+2      	; 0x35ac <LCD_voidWriteSpecialChar+0x74>
    35aa:	ae c0       	rjmp	.+348    	; 0x3708 <LCD_voidWriteSpecialChar+0x1d0>
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	85 30       	cpi	r24, 0x05	; 5
    35b2:	91 05       	cpc	r25, r1
    35b4:	0c f4       	brge	.+2      	; 0x35b8 <LCD_voidWriteSpecialChar+0x80>
    35b6:	89 c0       	rjmp	.+274    	; 0x36ca <LCD_voidWriteSpecialChar+0x192>
    35b8:	29 85       	ldd	r18, Y+9	; 0x09
    35ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    35bc:	26 30       	cpi	r18, 0x06	; 6
    35be:	31 05       	cpc	r19, r1
    35c0:	09 f4       	brne	.+2      	; 0x35c4 <LCD_voidWriteSpecialChar+0x8c>
    35c2:	c1 c0       	rjmp	.+386    	; 0x3746 <LCD_voidWriteSpecialChar+0x20e>
    35c4:	89 85       	ldd	r24, Y+9	; 0x09
    35c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    35c8:	87 30       	cpi	r24, 0x07	; 7
    35ca:	91 05       	cpc	r25, r1
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <LCD_voidWriteSpecialChar+0x98>
    35ce:	da c0       	rjmp	.+436    	; 0x3784 <LCD_voidWriteSpecialChar+0x24c>
    35d0:	f8 c0       	rjmp	.+496    	; 0x37c2 <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    35d2:	80 e4       	ldi	r24, 0x40	; 64
    35d4:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    35d8:	19 82       	std	Y+1, r1	; 0x01
    35da:	0e c0       	rjmp	.+28     	; 0x35f8 <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    35dc:	89 81       	ldd	r24, Y+1	; 0x01
    35de:	28 2f       	mov	r18, r24
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
    35e4:	9e 81       	ldd	r25, Y+6	; 0x06
    35e6:	fc 01       	movw	r30, r24
    35e8:	e2 0f       	add	r30, r18
    35ea:	f3 1f       	adc	r31, r19
    35ec:	80 81       	ld	r24, Z
    35ee:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    35f2:	89 81       	ldd	r24, Y+1	; 0x01
    35f4:	8f 5f       	subi	r24, 0xFF	; 255
    35f6:	89 83       	std	Y+1, r24	; 0x01
    35f8:	99 81       	ldd	r25, Y+1	; 0x01
    35fa:	8a 81       	ldd	r24, Y+2	; 0x02
    35fc:	98 17       	cp	r25, r24
    35fe:	70 f3       	brcs	.-36     	; 0x35dc <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3600:	8f 81       	ldd	r24, Y+7	; 0x07
    3602:	68 85       	ldd	r22, Y+8	; 0x08
    3604:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3608:	8c 81       	ldd	r24, Y+4	; 0x04
    360a:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    360e:	da c0       	rjmp	.+436    	; 0x37c4 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    3610:	88 e4       	ldi	r24, 0x48	; 72
    3612:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3616:	19 82       	std	Y+1, r1	; 0x01
    3618:	0e c0       	rjmp	.+28     	; 0x3636 <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    361a:	89 81       	ldd	r24, Y+1	; 0x01
    361c:	28 2f       	mov	r18, r24
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	8d 81       	ldd	r24, Y+5	; 0x05
    3622:	9e 81       	ldd	r25, Y+6	; 0x06
    3624:	fc 01       	movw	r30, r24
    3626:	e2 0f       	add	r30, r18
    3628:	f3 1f       	adc	r31, r19
    362a:	80 81       	ld	r24, Z
    362c:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    3630:	89 81       	ldd	r24, Y+1	; 0x01
    3632:	8f 5f       	subi	r24, 0xFF	; 255
    3634:	89 83       	std	Y+1, r24	; 0x01
    3636:	99 81       	ldd	r25, Y+1	; 0x01
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	98 17       	cp	r25, r24
    363c:	70 f3       	brcs	.-36     	; 0x361a <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    363e:	8f 81       	ldd	r24, Y+7	; 0x07
    3640:	68 85       	ldd	r22, Y+8	; 0x08
    3642:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3646:	8c 81       	ldd	r24, Y+4	; 0x04
    3648:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    364c:	bb c0       	rjmp	.+374    	; 0x37c4 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    364e:	80 e5       	ldi	r24, 0x50	; 80
    3650:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3654:	19 82       	std	Y+1, r1	; 0x01
    3656:	0e c0       	rjmp	.+28     	; 0x3674 <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3658:	89 81       	ldd	r24, Y+1	; 0x01
    365a:	28 2f       	mov	r18, r24
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	8d 81       	ldd	r24, Y+5	; 0x05
    3660:	9e 81       	ldd	r25, Y+6	; 0x06
    3662:	fc 01       	movw	r30, r24
    3664:	e2 0f       	add	r30, r18
    3666:	f3 1f       	adc	r31, r19
    3668:	80 81       	ld	r24, Z
    366a:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	8f 5f       	subi	r24, 0xFF	; 255
    3672:	89 83       	std	Y+1, r24	; 0x01
    3674:	99 81       	ldd	r25, Y+1	; 0x01
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	98 17       	cp	r25, r24
    367a:	70 f3       	brcs	.-36     	; 0x3658 <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    367c:	8f 81       	ldd	r24, Y+7	; 0x07
    367e:	68 85       	ldd	r22, Y+8	; 0x08
    3680:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3684:	8c 81       	ldd	r24, Y+4	; 0x04
    3686:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    368a:	9c c0       	rjmp	.+312    	; 0x37c4 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    368c:	88 e5       	ldi	r24, 0x58	; 88
    368e:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3692:	19 82       	std	Y+1, r1	; 0x01
    3694:	0e c0       	rjmp	.+28     	; 0x36b2 <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	28 2f       	mov	r18, r24
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	8d 81       	ldd	r24, Y+5	; 0x05
    369e:	9e 81       	ldd	r25, Y+6	; 0x06
    36a0:	fc 01       	movw	r30, r24
    36a2:	e2 0f       	add	r30, r18
    36a4:	f3 1f       	adc	r31, r19
    36a6:	80 81       	ld	r24, Z
    36a8:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    36ac:	89 81       	ldd	r24, Y+1	; 0x01
    36ae:	8f 5f       	subi	r24, 0xFF	; 255
    36b0:	89 83       	std	Y+1, r24	; 0x01
    36b2:	99 81       	ldd	r25, Y+1	; 0x01
    36b4:	8a 81       	ldd	r24, Y+2	; 0x02
    36b6:	98 17       	cp	r25, r24
    36b8:	70 f3       	brcs	.-36     	; 0x3696 <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    36ba:	8f 81       	ldd	r24, Y+7	; 0x07
    36bc:	68 85       	ldd	r22, Y+8	; 0x08
    36be:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    36c2:	8c 81       	ldd	r24, Y+4	; 0x04
    36c4:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    36c8:	7d c0       	rjmp	.+250    	; 0x37c4 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    36ca:	80 e6       	ldi	r24, 0x60	; 96
    36cc:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    36d0:	19 82       	std	Y+1, r1	; 0x01
    36d2:	0e c0       	rjmp	.+28     	; 0x36f0 <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    36d4:	89 81       	ldd	r24, Y+1	; 0x01
    36d6:	28 2f       	mov	r18, r24
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	8d 81       	ldd	r24, Y+5	; 0x05
    36dc:	9e 81       	ldd	r25, Y+6	; 0x06
    36de:	fc 01       	movw	r30, r24
    36e0:	e2 0f       	add	r30, r18
    36e2:	f3 1f       	adc	r31, r19
    36e4:	80 81       	ld	r24, Z
    36e6:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	8f 5f       	subi	r24, 0xFF	; 255
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	99 81       	ldd	r25, Y+1	; 0x01
    36f2:	8a 81       	ldd	r24, Y+2	; 0x02
    36f4:	98 17       	cp	r25, r24
    36f6:	70 f3       	brcs	.-36     	; 0x36d4 <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    36f8:	8f 81       	ldd	r24, Y+7	; 0x07
    36fa:	68 85       	ldd	r22, Y+8	; 0x08
    36fc:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3700:	8c 81       	ldd	r24, Y+4	; 0x04
    3702:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    3706:	5e c0       	rjmp	.+188    	; 0x37c4 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    3708:	88 e6       	ldi	r24, 0x68	; 104
    370a:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    370e:	19 82       	std	Y+1, r1	; 0x01
    3710:	0e c0       	rjmp	.+28     	; 0x372e <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	28 2f       	mov	r18, r24
    3716:	30 e0       	ldi	r19, 0x00	; 0
    3718:	8d 81       	ldd	r24, Y+5	; 0x05
    371a:	9e 81       	ldd	r25, Y+6	; 0x06
    371c:	fc 01       	movw	r30, r24
    371e:	e2 0f       	add	r30, r18
    3720:	f3 1f       	adc	r31, r19
    3722:	80 81       	ld	r24, Z
    3724:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    3728:	89 81       	ldd	r24, Y+1	; 0x01
    372a:	8f 5f       	subi	r24, 0xFF	; 255
    372c:	89 83       	std	Y+1, r24	; 0x01
    372e:	99 81       	ldd	r25, Y+1	; 0x01
    3730:	8a 81       	ldd	r24, Y+2	; 0x02
    3732:	98 17       	cp	r25, r24
    3734:	70 f3       	brcs	.-36     	; 0x3712 <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3736:	8f 81       	ldd	r24, Y+7	; 0x07
    3738:	68 85       	ldd	r22, Y+8	; 0x08
    373a:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    373e:	8c 81       	ldd	r24, Y+4	; 0x04
    3740:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    3744:	3f c0       	rjmp	.+126    	; 0x37c4 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    3746:	80 e7       	ldi	r24, 0x70	; 112
    3748:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    374c:	19 82       	std	Y+1, r1	; 0x01
    374e:	0e c0       	rjmp	.+28     	; 0x376c <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	28 2f       	mov	r18, r24
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	8d 81       	ldd	r24, Y+5	; 0x05
    3758:	9e 81       	ldd	r25, Y+6	; 0x06
    375a:	fc 01       	movw	r30, r24
    375c:	e2 0f       	add	r30, r18
    375e:	f3 1f       	adc	r31, r19
    3760:	80 81       	ld	r24, Z
    3762:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	8f 5f       	subi	r24, 0xFF	; 255
    376a:	89 83       	std	Y+1, r24	; 0x01
    376c:	99 81       	ldd	r25, Y+1	; 0x01
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	98 17       	cp	r25, r24
    3772:	70 f3       	brcs	.-36     	; 0x3750 <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3774:	8f 81       	ldd	r24, Y+7	; 0x07
    3776:	68 85       	ldd	r22, Y+8	; 0x08
    3778:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    377c:	8c 81       	ldd	r24, Y+4	; 0x04
    377e:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    3782:	20 c0       	rjmp	.+64     	; 0x37c4 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    3784:	88 e7       	ldi	r24, 0x78	; 120
    3786:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    378a:	19 82       	std	Y+1, r1	; 0x01
    378c:	0e c0       	rjmp	.+28     	; 0x37aa <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	28 2f       	mov	r18, r24
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	8d 81       	ldd	r24, Y+5	; 0x05
    3796:	9e 81       	ldd	r25, Y+6	; 0x06
    3798:	fc 01       	movw	r30, r24
    379a:	e2 0f       	add	r30, r18
    379c:	f3 1f       	adc	r31, r19
    379e:	80 81       	ld	r24, Z
    37a0:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	8f 5f       	subi	r24, 0xFF	; 255
    37a8:	89 83       	std	Y+1, r24	; 0x01
    37aa:	99 81       	ldd	r25, Y+1	; 0x01
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	98 17       	cp	r25, r24
    37b0:	70 f3       	brcs	.-36     	; 0x378e <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    37b2:	8f 81       	ldd	r24, Y+7	; 0x07
    37b4:	68 85       	ldd	r22, Y+8	; 0x08
    37b6:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    37ba:	8c 81       	ldd	r24, Y+4	; 0x04
    37bc:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    37c0:	01 c0       	rjmp	.+2      	; 0x37c4 <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    37c2:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    37c4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    37c6:	2a 96       	adiw	r28, 0x0a	; 10
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	cf 91       	pop	r28
    37d4:	df 91       	pop	r29
    37d6:	08 95       	ret

000037d8 <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    37d8:	df 93       	push	r29
    37da:	cf 93       	push	r28
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	e1 97       	sbiw	r28, 0x31	; 49
    37e2:	0f b6       	in	r0, 0x3f	; 63
    37e4:	f8 94       	cli
    37e6:	de bf       	out	0x3e, r29	; 62
    37e8:	0f be       	out	0x3f, r0	; 63
    37ea:	cd bf       	out	0x3d, r28	; 61
    37ec:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    37ee:	80 e0       	ldi	r24, 0x00	; 0
    37f0:	60 e0       	ldi	r22, 0x00	; 0
    37f2:	40 e0       	ldi	r20, 0x00	; 0
    37f4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	61 e0       	ldi	r22, 0x01	; 1
    37fc:	40 e0       	ldi	r20, 0x00	; 0
    37fe:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    3802:	89 a9       	ldd	r24, Y+49	; 0x31
    3804:	98 2f       	mov	r25, r24
    3806:	92 95       	swap	r25
    3808:	90 7f       	andi	r25, 0xF0	; 240
    380a:	83 e0       	ldi	r24, 0x03	; 3
    380c:	69 2f       	mov	r22, r25
    380e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	62 e0       	ldi	r22, 0x02	; 2
    3816:	41 e0       	ldi	r20, 0x01	; 1
    3818:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	a0 e8       	ldi	r26, 0x80	; 128
    3822:	bf e3       	ldi	r27, 0x3F	; 63
    3824:	8d a7       	std	Y+45, r24	; 0x2d
    3826:	9e a7       	std	Y+46, r25	; 0x2e
    3828:	af a7       	std	Y+47, r26	; 0x2f
    382a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    382c:	6d a5       	ldd	r22, Y+45	; 0x2d
    382e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3830:	8f a5       	ldd	r24, Y+47	; 0x2f
    3832:	98 a9       	ldd	r25, Y+48	; 0x30
    3834:	2b ea       	ldi	r18, 0xAB	; 171
    3836:	3a ea       	ldi	r19, 0xAA	; 170
    3838:	4a e2       	ldi	r20, 0x2A	; 42
    383a:	50 e4       	ldi	r21, 0x40	; 64
    383c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3840:	dc 01       	movw	r26, r24
    3842:	cb 01       	movw	r24, r22
    3844:	89 a7       	std	Y+41, r24	; 0x29
    3846:	9a a7       	std	Y+42, r25	; 0x2a
    3848:	ab a7       	std	Y+43, r26	; 0x2b
    384a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    384c:	69 a5       	ldd	r22, Y+41	; 0x29
    384e:	7a a5       	ldd	r23, Y+42	; 0x2a
    3850:	8b a5       	ldd	r24, Y+43	; 0x2b
    3852:	9c a5       	ldd	r25, Y+44	; 0x2c
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	30 e0       	ldi	r19, 0x00	; 0
    3858:	40 e8       	ldi	r20, 0x80	; 128
    385a:	5f e3       	ldi	r21, 0x3F	; 63
    385c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3860:	88 23       	and	r24, r24
    3862:	1c f4       	brge	.+6      	; 0x386a <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    3864:	81 e0       	ldi	r24, 0x01	; 1
    3866:	88 a7       	std	Y+40, r24	; 0x28
    3868:	91 c0       	rjmp	.+290    	; 0x398c <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    386a:	69 a5       	ldd	r22, Y+41	; 0x29
    386c:	7a a5       	ldd	r23, Y+42	; 0x2a
    386e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3870:	9c a5       	ldd	r25, Y+44	; 0x2c
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	4f e7       	ldi	r20, 0x7F	; 127
    3878:	53 e4       	ldi	r21, 0x43	; 67
    387a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    387e:	18 16       	cp	r1, r24
    3880:	0c f0       	brlt	.+2      	; 0x3884 <LCD_voidSendHalfCmnd+0xac>
    3882:	7b c0       	rjmp	.+246    	; 0x397a <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    3884:	6d a5       	ldd	r22, Y+45	; 0x2d
    3886:	7e a5       	ldd	r23, Y+46	; 0x2e
    3888:	8f a5       	ldd	r24, Y+47	; 0x2f
    388a:	98 a9       	ldd	r25, Y+48	; 0x30
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	4a e7       	ldi	r20, 0x7A	; 122
    3892:	54 e4       	ldi	r21, 0x44	; 68
    3894:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	8c a3       	std	Y+36, r24	; 0x24
    389e:	9d a3       	std	Y+37, r25	; 0x25
    38a0:	ae a3       	std	Y+38, r26	; 0x26
    38a2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38a4:	6c a1       	ldd	r22, Y+36	; 0x24
    38a6:	7d a1       	ldd	r23, Y+37	; 0x25
    38a8:	8e a1       	ldd	r24, Y+38	; 0x26
    38aa:	9f a1       	ldd	r25, Y+39	; 0x27
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	4a ef       	ldi	r20, 0xFA	; 250
    38b2:	54 e4       	ldi	r21, 0x44	; 68
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	88 a3       	std	Y+32, r24	; 0x20
    38be:	99 a3       	std	Y+33, r25	; 0x21
    38c0:	aa a3       	std	Y+34, r26	; 0x22
    38c2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    38c4:	68 a1       	ldd	r22, Y+32	; 0x20
    38c6:	79 a1       	ldd	r23, Y+33	; 0x21
    38c8:	8a a1       	ldd	r24, Y+34	; 0x22
    38ca:	9b a1       	ldd	r25, Y+35	; 0x23
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e8       	ldi	r20, 0x80	; 128
    38d2:	5f e3       	ldi	r21, 0x3F	; 63
    38d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38d8:	88 23       	and	r24, r24
    38da:	2c f4       	brge	.+10     	; 0x38e6 <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    38dc:	81 e0       	ldi	r24, 0x01	; 1
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	9f 8f       	std	Y+31, r25	; 0x1f
    38e2:	8e 8f       	std	Y+30, r24	; 0x1e
    38e4:	3f c0       	rjmp	.+126    	; 0x3964 <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    38e6:	68 a1       	ldd	r22, Y+32	; 0x20
    38e8:	79 a1       	ldd	r23, Y+33	; 0x21
    38ea:	8a a1       	ldd	r24, Y+34	; 0x22
    38ec:	9b a1       	ldd	r25, Y+35	; 0x23
    38ee:	20 e0       	ldi	r18, 0x00	; 0
    38f0:	3f ef       	ldi	r19, 0xFF	; 255
    38f2:	4f e7       	ldi	r20, 0x7F	; 127
    38f4:	57 e4       	ldi	r21, 0x47	; 71
    38f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38fa:	18 16       	cp	r1, r24
    38fc:	4c f5       	brge	.+82     	; 0x3950 <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38fe:	6c a1       	ldd	r22, Y+36	; 0x24
    3900:	7d a1       	ldd	r23, Y+37	; 0x25
    3902:	8e a1       	ldd	r24, Y+38	; 0x26
    3904:	9f a1       	ldd	r25, Y+39	; 0x27
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e2       	ldi	r20, 0x20	; 32
    390c:	51 e4       	ldi	r21, 0x41	; 65
    390e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	bc 01       	movw	r22, r24
    3918:	cd 01       	movw	r24, r26
    391a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    391e:	dc 01       	movw	r26, r24
    3920:	cb 01       	movw	r24, r22
    3922:	9f 8f       	std	Y+31, r25	; 0x1f
    3924:	8e 8f       	std	Y+30, r24	; 0x1e
    3926:	0f c0       	rjmp	.+30     	; 0x3946 <LCD_voidSendHalfCmnd+0x16e>
    3928:	88 ec       	ldi	r24, 0xC8	; 200
    392a:	90 e0       	ldi	r25, 0x00	; 0
    392c:	9d 8f       	std	Y+29, r25	; 0x1d
    392e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3930:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3932:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	f1 f7       	brne	.-4      	; 0x3934 <LCD_voidSendHalfCmnd+0x15c>
    3938:	9d 8f       	std	Y+29, r25	; 0x1d
    393a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    393c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    393e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3940:	01 97       	sbiw	r24, 0x01	; 1
    3942:	9f 8f       	std	Y+31, r25	; 0x1f
    3944:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3946:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3948:	9f 8d       	ldd	r25, Y+31	; 0x1f
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	69 f7       	brne	.-38     	; 0x3928 <LCD_voidSendHalfCmnd+0x150>
    394e:	24 c0       	rjmp	.+72     	; 0x3998 <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3950:	68 a1       	ldd	r22, Y+32	; 0x20
    3952:	79 a1       	ldd	r23, Y+33	; 0x21
    3954:	8a a1       	ldd	r24, Y+34	; 0x22
    3956:	9b a1       	ldd	r25, Y+35	; 0x23
    3958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	9f 8f       	std	Y+31, r25	; 0x1f
    3962:	8e 8f       	std	Y+30, r24	; 0x1e
    3964:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3966:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3968:	9b 8f       	std	Y+27, r25	; 0x1b
    396a:	8a 8f       	std	Y+26, r24	; 0x1a
    396c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    396e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3970:	01 97       	sbiw	r24, 0x01	; 1
    3972:	f1 f7       	brne	.-4      	; 0x3970 <LCD_voidSendHalfCmnd+0x198>
    3974:	9b 8f       	std	Y+27, r25	; 0x1b
    3976:	8a 8f       	std	Y+26, r24	; 0x1a
    3978:	0f c0       	rjmp	.+30     	; 0x3998 <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    397a:	69 a5       	ldd	r22, Y+41	; 0x29
    397c:	7a a5       	ldd	r23, Y+42	; 0x2a
    397e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3980:	9c a5       	ldd	r25, Y+44	; 0x2c
    3982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3986:	dc 01       	movw	r26, r24
    3988:	cb 01       	movw	r24, r22
    398a:	88 a7       	std	Y+40, r24	; 0x28
    398c:	88 a5       	ldd	r24, Y+40	; 0x28
    398e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3990:	89 8d       	ldd	r24, Y+25	; 0x19
    3992:	8a 95       	dec	r24
    3994:	f1 f7       	brne	.-4      	; 0x3992 <LCD_voidSendHalfCmnd+0x1ba>
    3996:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	62 e0       	ldi	r22, 0x02	; 2
    399c:	40 e0       	ldi	r20, 0x00	; 0
    399e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	a0 e8       	ldi	r26, 0x80	; 128
    39a8:	bf e3       	ldi	r27, 0x3F	; 63
    39aa:	8d 8b       	std	Y+21, r24	; 0x15
    39ac:	9e 8b       	std	Y+22, r25	; 0x16
    39ae:	af 8b       	std	Y+23, r26	; 0x17
    39b0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    39b2:	6d 89       	ldd	r22, Y+21	; 0x15
    39b4:	7e 89       	ldd	r23, Y+22	; 0x16
    39b6:	8f 89       	ldd	r24, Y+23	; 0x17
    39b8:	98 8d       	ldd	r25, Y+24	; 0x18
    39ba:	2b ea       	ldi	r18, 0xAB	; 171
    39bc:	3a ea       	ldi	r19, 0xAA	; 170
    39be:	4a e2       	ldi	r20, 0x2A	; 42
    39c0:	50 e4       	ldi	r21, 0x40	; 64
    39c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c6:	dc 01       	movw	r26, r24
    39c8:	cb 01       	movw	r24, r22
    39ca:	89 8b       	std	Y+17, r24	; 0x11
    39cc:	9a 8b       	std	Y+18, r25	; 0x12
    39ce:	ab 8b       	std	Y+19, r26	; 0x13
    39d0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    39d2:	69 89       	ldd	r22, Y+17	; 0x11
    39d4:	7a 89       	ldd	r23, Y+18	; 0x12
    39d6:	8b 89       	ldd	r24, Y+19	; 0x13
    39d8:	9c 89       	ldd	r25, Y+20	; 0x14
    39da:	20 e0       	ldi	r18, 0x00	; 0
    39dc:	30 e0       	ldi	r19, 0x00	; 0
    39de:	40 e8       	ldi	r20, 0x80	; 128
    39e0:	5f e3       	ldi	r21, 0x3F	; 63
    39e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e6:	88 23       	and	r24, r24
    39e8:	1c f4       	brge	.+6      	; 0x39f0 <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	88 8b       	std	Y+16, r24	; 0x10
    39ee:	91 c0       	rjmp	.+290    	; 0x3b12 <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    39f0:	69 89       	ldd	r22, Y+17	; 0x11
    39f2:	7a 89       	ldd	r23, Y+18	; 0x12
    39f4:	8b 89       	ldd	r24, Y+19	; 0x13
    39f6:	9c 89       	ldd	r25, Y+20	; 0x14
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	4f e7       	ldi	r20, 0x7F	; 127
    39fe:	53 e4       	ldi	r21, 0x43	; 67
    3a00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a04:	18 16       	cp	r1, r24
    3a06:	0c f0       	brlt	.+2      	; 0x3a0a <LCD_voidSendHalfCmnd+0x232>
    3a08:	7b c0       	rjmp	.+246    	; 0x3b00 <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    3a0a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a0c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a0e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a10:	98 8d       	ldd	r25, Y+24	; 0x18
    3a12:	20 e0       	ldi	r18, 0x00	; 0
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	4a e7       	ldi	r20, 0x7A	; 122
    3a18:	54 e4       	ldi	r21, 0x44	; 68
    3a1a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3a1e:	dc 01       	movw	r26, r24
    3a20:	cb 01       	movw	r24, r22
    3a22:	8c 87       	std	Y+12, r24	; 0x0c
    3a24:	9d 87       	std	Y+13, r25	; 0x0d
    3a26:	ae 87       	std	Y+14, r26	; 0x0e
    3a28:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a2c:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a30:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a ef       	ldi	r20, 0xFA	; 250
    3a38:	54 e4       	ldi	r21, 0x44	; 68
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	88 87       	std	Y+8, r24	; 0x08
    3a44:	99 87       	std	Y+9, r25	; 0x09
    3a46:	aa 87       	std	Y+10, r26	; 0x0a
    3a48:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3a4a:	68 85       	ldd	r22, Y+8	; 0x08
    3a4c:	79 85       	ldd	r23, Y+9	; 0x09
    3a4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a50:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9f 83       	std	Y+7, r25	; 0x07
    3a68:	8e 83       	std	Y+6, r24	; 0x06
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    3a6c:	68 85       	ldd	r22, Y+8	; 0x08
    3a6e:	79 85       	ldd	r23, Y+9	; 0x09
    3a70:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a72:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	6c 85       	ldd	r22, Y+12	; 0x0c
    3a86:	7d 85       	ldd	r23, Y+13	; 0x0d
    3a88:	8e 85       	ldd	r24, Y+14	; 0x0e
    3a8a:	9f 85       	ldd	r25, Y+15	; 0x0f
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9f 83       	std	Y+7, r25	; 0x07
    3aaa:	8e 83       	std	Y+6, r24	; 0x06
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <LCD_voidSendHalfCmnd+0x2f4>
    3aae:	88 ec       	ldi	r24, 0xC8	; 200
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	9d 83       	std	Y+5, r25	; 0x05
    3ab4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3ab6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ab8:	9d 81       	ldd	r25, Y+5	; 0x05
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <LCD_voidSendHalfCmnd+0x2e2>
    3abe:	9d 83       	std	Y+5, r25	; 0x05
    3ac0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	8e 81       	ldd	r24, Y+6	; 0x06
    3ac4:	9f 81       	ldd	r25, Y+7	; 0x07
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9f 83       	std	Y+7, r25	; 0x07
    3aca:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	8e 81       	ldd	r24, Y+6	; 0x06
    3ace:	9f 81       	ldd	r25, Y+7	; 0x07
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <LCD_voidSendHalfCmnd+0x2d6>
    3ad4:	24 c0       	rjmp	.+72     	; 0x3b1e <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad6:	68 85       	ldd	r22, Y+8	; 0x08
    3ad8:	79 85       	ldd	r23, Y+9	; 0x09
    3ada:	8a 85       	ldd	r24, Y+10	; 0x0a
    3adc:	9b 85       	ldd	r25, Y+11	; 0x0b
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9f 83       	std	Y+7, r25	; 0x07
    3ae8:	8e 83       	std	Y+6, r24	; 0x06
    3aea:	8e 81       	ldd	r24, Y+6	; 0x06
    3aec:	9f 81       	ldd	r25, Y+7	; 0x07
    3aee:	9b 83       	std	Y+3, r25	; 0x03
    3af0:	8a 83       	std	Y+2, r24	; 0x02
    3af2:	8a 81       	ldd	r24, Y+2	; 0x02
    3af4:	9b 81       	ldd	r25, Y+3	; 0x03
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <LCD_voidSendHalfCmnd+0x31e>
    3afa:	9b 83       	std	Y+3, r25	; 0x03
    3afc:	8a 83       	std	Y+2, r24	; 0x02
    3afe:	0f c0       	rjmp	.+30     	; 0x3b1e <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3b00:	69 89       	ldd	r22, Y+17	; 0x11
    3b02:	7a 89       	ldd	r23, Y+18	; 0x12
    3b04:	8b 89       	ldd	r24, Y+19	; 0x13
    3b06:	9c 89       	ldd	r25, Y+20	; 0x14
    3b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	cb 01       	movw	r24, r22
    3b10:	88 8b       	std	Y+16, r24	; 0x10
    3b12:	88 89       	ldd	r24, Y+16	; 0x10
    3b14:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3b16:	89 81       	ldd	r24, Y+1	; 0x01
    3b18:	8a 95       	dec	r24
    3b1a:	f1 f7       	brne	.-4      	; 0x3b18 <LCD_voidSendHalfCmnd+0x340>
    3b1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
    3b1e:	e1 96       	adiw	r28, 0x31	; 49
    3b20:	0f b6       	in	r0, 0x3f	; 63
    3b22:	f8 94       	cli
    3b24:	de bf       	out	0x3e, r29	; 62
    3b26:	0f be       	out	0x3f, r0	; 63
    3b28:	cd bf       	out	0x3d, r28	; 61
    3b2a:	cf 91       	pop	r28
    3b2c:	df 91       	pop	r29
    3b2e:	08 95       	ret

00003b30 <appenedToBuffer>:
u8 Local_u8Index = 0; // Index for buffer
u8 Local_Au8InputBuffer[6] = {0}; // Buffer to store input
u8 trials = 0;
/* Function to append a key to buffer */
void appenedToBuffer(u8 *buffer,u8 key)
{
    3b30:	df 93       	push	r29
    3b32:	cf 93       	push	r28
    3b34:	00 d0       	rcall	.+0      	; 0x3b36 <appenedToBuffer+0x6>
    3b36:	0f 92       	push	r0
    3b38:	cd b7       	in	r28, 0x3d	; 61
    3b3a:	de b7       	in	r29, 0x3e	; 62
    3b3c:	9a 83       	std	Y+2, r25	; 0x02
    3b3e:	89 83       	std	Y+1, r24	; 0x01
    3b40:	6b 83       	std	Y+3, r22	; 0x03
	if(Local_u8Index < 5) // Make sure buffer index is within range
    3b42:	80 91 71 01 	lds	r24, 0x0171
    3b46:	85 30       	cpi	r24, 0x05	; 5
    3b48:	d0 f4       	brcc	.+52     	; 0x3b7e <appenedToBuffer+0x4e>
	{
		*(buffer+Local_u8Index) = key; // Store the character in buffer
    3b4a:	80 91 71 01 	lds	r24, 0x0171
    3b4e:	28 2f       	mov	r18, r24
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	89 81       	ldd	r24, Y+1	; 0x01
    3b54:	9a 81       	ldd	r25, Y+2	; 0x02
    3b56:	fc 01       	movw	r30, r24
    3b58:	e2 0f       	add	r30, r18
    3b5a:	f3 1f       	adc	r31, r19
    3b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b5e:	80 83       	st	Z, r24
		Local_u8Index++; // Increment buffer index
    3b60:	80 91 71 01 	lds	r24, 0x0171
    3b64:	8f 5f       	subi	r24, 0xFF	; 255
    3b66:	80 93 71 01 	sts	0x0171, r24
		*(buffer+Local_u8Index) = '\0';// Null-terminate buffer
    3b6a:	80 91 71 01 	lds	r24, 0x0171
    3b6e:	28 2f       	mov	r18, r24
    3b70:	30 e0       	ldi	r19, 0x00	; 0
    3b72:	89 81       	ldd	r24, Y+1	; 0x01
    3b74:	9a 81       	ldd	r25, Y+2	; 0x02
    3b76:	fc 01       	movw	r30, r24
    3b78:	e2 0f       	add	r30, r18
    3b7a:	f3 1f       	adc	r31, r19
    3b7c:	10 82       	st	Z, r1
	}
}
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	cf 91       	pop	r28
    3b86:	df 91       	pop	r29
    3b88:	08 95       	ret

00003b8a <ClearBuffer>:
/* Function to clear buffer */
void ClearBuffer(u8 *buffer,u8 size)
{
    3b8a:	df 93       	push	r29
    3b8c:	cf 93       	push	r28
    3b8e:	00 d0       	rcall	.+0      	; 0x3b90 <ClearBuffer+0x6>
    3b90:	00 d0       	rcall	.+0      	; 0x3b92 <ClearBuffer+0x8>
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	9b 83       	std	Y+3, r25	; 0x03
    3b98:	8a 83       	std	Y+2, r24	; 0x02
    3b9a:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for (i = 0; i < size; i++)// Loop through buffer
    3b9c:	19 82       	std	Y+1, r1	; 0x01
    3b9e:	0c c0       	rjmp	.+24     	; 0x3bb8 <ClearBuffer+0x2e>
	{
		buffer[i] = '\0';// Set each element to null character
    3ba0:	89 81       	ldd	r24, Y+1	; 0x01
    3ba2:	28 2f       	mov	r18, r24
    3ba4:	30 e0       	ldi	r19, 0x00	; 0
    3ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    3baa:	fc 01       	movw	r30, r24
    3bac:	e2 0f       	add	r30, r18
    3bae:	f3 1f       	adc	r31, r19
    3bb0:	10 82       	st	Z, r1
}
/* Function to clear buffer */
void ClearBuffer(u8 *buffer,u8 size)
{
	u8 i;
	for (i = 0; i < size; i++)// Loop through buffer
    3bb2:	89 81       	ldd	r24, Y+1	; 0x01
    3bb4:	8f 5f       	subi	r24, 0xFF	; 255
    3bb6:	89 83       	std	Y+1, r24	; 0x01
    3bb8:	99 81       	ldd	r25, Y+1	; 0x01
    3bba:	8c 81       	ldd	r24, Y+4	; 0x04
    3bbc:	98 17       	cp	r25, r24
    3bbe:	80 f3       	brcs	.-32     	; 0x3ba0 <ClearBuffer+0x16>
	{
		buffer[i] = '\0';// Set each element to null character
	}
}
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	cf 91       	pop	r28
    3bca:	df 91       	pop	r29
    3bcc:	08 95       	ret

00003bce <CheckPassword>:
void CheckPassword(u8* buffer,u8* password,u8* Result)
{
    3bce:	df 93       	push	r29
    3bd0:	cf 93       	push	r28
    3bd2:	cd b7       	in	r28, 0x3d	; 61
    3bd4:	de b7       	in	r29, 0x3e	; 62
    3bd6:	28 97       	sbiw	r28, 0x08	; 8
    3bd8:	0f b6       	in	r0, 0x3f	; 63
    3bda:	f8 94       	cli
    3bdc:	de bf       	out	0x3e, r29	; 62
    3bde:	0f be       	out	0x3f, r0	; 63
    3be0:	cd bf       	out	0x3d, r28	; 61
    3be2:	9c 83       	std	Y+4, r25	; 0x04
    3be4:	8b 83       	std	Y+3, r24	; 0x03
    3be6:	7e 83       	std	Y+6, r23	; 0x06
    3be8:	6d 83       	std	Y+5, r22	; 0x05
    3bea:	58 87       	std	Y+8, r21	; 0x08
    3bec:	4f 83       	std	Y+7, r20	; 0x07
	u8 i = 0; // Loop counter
    3bee:	1a 82       	std	Y+2, r1	; 0x02
	u8 Password_Flag = 0; // 0 mean incorrect
    3bf0:	19 82       	std	Y+1, r1	; 0x01
    3bf2:	1c c0       	rjmp	.+56     	; 0x3c2c <CheckPassword+0x5e>
	while((*(buffer+i) != '\0') && (*(password+i)!= '\0'))
	{
		if(buffer[i] == password[i])
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	28 2f       	mov	r18, r24
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfe:	fc 01       	movw	r30, r24
    3c00:	e2 0f       	add	r30, r18
    3c02:	f3 1f       	adc	r31, r19
    3c04:	40 81       	ld	r20, Z
    3c06:	8a 81       	ldd	r24, Y+2	; 0x02
    3c08:	28 2f       	mov	r18, r24
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c10:	fc 01       	movw	r30, r24
    3c12:	e2 0f       	add	r30, r18
    3c14:	f3 1f       	adc	r31, r19
    3c16:	80 81       	ld	r24, Z
    3c18:	48 17       	cp	r20, r24
    3c1a:	31 f4       	brne	.+12     	; 0x3c28 <CheckPassword+0x5a>
		{
			Password_Flag = 1;
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			Password_Flag = 0;
			break;
		}
		i++;
    3c20:	8a 81       	ldd	r24, Y+2	; 0x02
    3c22:	8f 5f       	subi	r24, 0xFF	; 255
    3c24:	8a 83       	std	Y+2, r24	; 0x02
    3c26:	02 c0       	rjmp	.+4      	; 0x3c2c <CheckPassword+0x5e>
		{
			Password_Flag = 1;
		}
		else
		{
			Password_Flag = 0;
    3c28:	19 82       	std	Y+1, r1	; 0x01
    3c2a:	16 c0       	rjmp	.+44     	; 0x3c58 <CheckPassword+0x8a>
}
void CheckPassword(u8* buffer,u8* password,u8* Result)
{
	u8 i = 0; // Loop counter
	u8 Password_Flag = 0; // 0 mean incorrect
	while((*(buffer+i) != '\0') && (*(password+i)!= '\0'))
    3c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2e:	28 2f       	mov	r18, r24
    3c30:	30 e0       	ldi	r19, 0x00	; 0
    3c32:	8b 81       	ldd	r24, Y+3	; 0x03
    3c34:	9c 81       	ldd	r25, Y+4	; 0x04
    3c36:	fc 01       	movw	r30, r24
    3c38:	e2 0f       	add	r30, r18
    3c3a:	f3 1f       	adc	r31, r19
    3c3c:	80 81       	ld	r24, Z
    3c3e:	88 23       	and	r24, r24
    3c40:	59 f0       	breq	.+22     	; 0x3c58 <CheckPassword+0x8a>
    3c42:	8a 81       	ldd	r24, Y+2	; 0x02
    3c44:	28 2f       	mov	r18, r24
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	8d 81       	ldd	r24, Y+5	; 0x05
    3c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c4c:	fc 01       	movw	r30, r24
    3c4e:	e2 0f       	add	r30, r18
    3c50:	f3 1f       	adc	r31, r19
    3c52:	80 81       	ld	r24, Z
    3c54:	88 23       	and	r24, r24
    3c56:	71 f6       	brne	.-100    	; 0x3bf4 <CheckPassword+0x26>
			Password_Flag = 0;
			break;
		}
		i++;
	}
	*Result = Password_Flag;
    3c58:	ef 81       	ldd	r30, Y+7	; 0x07
    3c5a:	f8 85       	ldd	r31, Y+8	; 0x08
    3c5c:	89 81       	ldd	r24, Y+1	; 0x01
    3c5e:	80 83       	st	Z, r24
}
    3c60:	28 96       	adiw	r28, 0x08	; 8
    3c62:	0f b6       	in	r0, 0x3f	; 63
    3c64:	f8 94       	cli
    3c66:	de bf       	out	0x3e, r29	; 62
    3c68:	0f be       	out	0x3f, r0	; 63
    3c6a:	cd bf       	out	0x3d, r28	; 61
    3c6c:	cf 91       	pop	r28
    3c6e:	df 91       	pop	r29
    3c70:	08 95       	ret

00003c72 <login_system>:
void login_system(const u8* password, u8* flag)
{
    3c72:	0f 93       	push	r16
    3c74:	1f 93       	push	r17
    3c76:	df 93       	push	r29
    3c78:	cf 93       	push	r28
    3c7a:	cd b7       	in	r28, 0x3d	; 61
    3c7c:	de b7       	in	r29, 0x3e	; 62
    3c7e:	c8 56       	subi	r28, 0x68	; 104
    3c80:	d0 40       	sbci	r29, 0x00	; 0
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	f8 94       	cli
    3c86:	de bf       	out	0x3e, r29	; 62
    3c88:	0f be       	out	0x3f, r0	; 63
    3c8a:	cd bf       	out	0x3d, r28	; 61
    3c8c:	fe 01       	movw	r30, r28
    3c8e:	eb 59       	subi	r30, 0x9B	; 155
    3c90:	ff 4f       	sbci	r31, 0xFF	; 255
    3c92:	91 83       	std	Z+1, r25	; 0x01
    3c94:	80 83       	st	Z, r24
    3c96:	fe 01       	movw	r30, r28
    3c98:	e9 59       	subi	r30, 0x99	; 153
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	71 83       	std	Z+1, r23	; 0x01
    3c9e:	60 83       	st	Z, r22
	u8 Local_u8Key;
	u8 Local_u8Result;
	LCD_voidWriteString((u8*)"Enter Password: ");
    3ca0:	84 ed       	ldi	r24, 0xD4	; 212
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    3ca8:	82 e0       	ldi	r24, 0x02	; 2
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
	while(1)
	{
		if(trials < 3)
    3cb0:	80 91 78 01 	lds	r24, 0x0178
    3cb4:	83 30       	cpi	r24, 0x03	; 3
    3cb6:	08 f0       	brcs	.+2      	; 0x3cba <login_system+0x48>
    3cb8:	b1 c3       	rjmp	.+1890   	; 0x441c <login_system+0x7aa>
		{
			KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    3cba:	ce 01       	movw	r24, r28
    3cbc:	8d 59       	subi	r24, 0x9D	; 157
    3cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc0:	0e 94 ab 12 	call	0x2556	; 0x2556 <KPD_u8GetKeyState>
			if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	ed 59       	subi	r30, 0x9D	; 157
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	80 81       	ld	r24, Z
    3ccc:	8f 3f       	cpi	r24, 0xFF	; 255
    3cce:	81 f3       	breq	.-32     	; 0x3cb0 <login_system+0x3e>
			{
				if(Local_u8Key == '=') // If pressed key is '='
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	ed 59       	subi	r30, 0x9D	; 157
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	80 81       	ld	r24, Z
    3cd8:	8d 33       	cpi	r24, 0x3D	; 61
    3cda:	09 f0       	breq	.+2      	; 0x3cde <login_system+0x6c>
    3cdc:	92 c3       	rjmp	.+1828   	; 0x4402 <login_system+0x790>
				{
					CheckPassword(Local_Au8InputBuffer,password,&Local_u8Result);
    3cde:	fe 01       	movw	r30, r28
    3ce0:	eb 59       	subi	r30, 0x9B	; 155
    3ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce4:	40 81       	ld	r20, Z
    3ce6:	51 81       	ldd	r21, Z+1	; 0x01
    3ce8:	82 e7       	ldi	r24, 0x72	; 114
    3cea:	91 e0       	ldi	r25, 0x01	; 1
    3cec:	9e 01       	movw	r18, r28
    3cee:	2c 59       	subi	r18, 0x9C	; 156
    3cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3cf2:	ba 01       	movw	r22, r20
    3cf4:	a9 01       	movw	r20, r18
    3cf6:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <CheckPassword>
					if(Local_u8Result)
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	ec 59       	subi	r30, 0x9C	; 156
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	80 81       	ld	r24, Z
    3d02:	88 23       	and	r24, r24
    3d04:	09 f4       	brne	.+2      	; 0x3d08 <login_system+0x96>
    3d06:	c2 c0       	rjmp	.+388    	; 0x3e8c <login_system+0x21a>
					{
						LCD_voidClearScreen();
    3d08:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    3d0c:	fe 01       	movw	r30, r28
    3d0e:	e1 5a       	subi	r30, 0xA1	; 161
    3d10:	ff 4f       	sbci	r31, 0xFF	; 255
    3d12:	80 e0       	ldi	r24, 0x00	; 0
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	a0 ea       	ldi	r26, 0xA0	; 160
    3d18:	b1 e4       	ldi	r27, 0x41	; 65
    3d1a:	80 83       	st	Z, r24
    3d1c:	91 83       	std	Z+1, r25	; 0x01
    3d1e:	a2 83       	std	Z+2, r26	; 0x02
    3d20:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d22:	8e 01       	movw	r16, r28
    3d24:	05 5a       	subi	r16, 0xA5	; 165
    3d26:	1f 4f       	sbci	r17, 0xFF	; 255
    3d28:	fe 01       	movw	r30, r28
    3d2a:	e1 5a       	subi	r30, 0xA1	; 161
    3d2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2e:	60 81       	ld	r22, Z
    3d30:	71 81       	ldd	r23, Z+1	; 0x01
    3d32:	82 81       	ldd	r24, Z+2	; 0x02
    3d34:	93 81       	ldd	r25, Z+3	; 0x03
    3d36:	20 e0       	ldi	r18, 0x00	; 0
    3d38:	30 e0       	ldi	r19, 0x00	; 0
    3d3a:	4a ef       	ldi	r20, 0xFA	; 250
    3d3c:	54 e4       	ldi	r21, 0x44	; 68
    3d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d42:	dc 01       	movw	r26, r24
    3d44:	cb 01       	movw	r24, r22
    3d46:	f8 01       	movw	r30, r16
    3d48:	80 83       	st	Z, r24
    3d4a:	91 83       	std	Z+1, r25	; 0x01
    3d4c:	a2 83       	std	Z+2, r26	; 0x02
    3d4e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3d50:	fe 01       	movw	r30, r28
    3d52:	e5 5a       	subi	r30, 0xA5	; 165
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	60 81       	ld	r22, Z
    3d58:	71 81       	ldd	r23, Z+1	; 0x01
    3d5a:	82 81       	ldd	r24, Z+2	; 0x02
    3d5c:	93 81       	ldd	r25, Z+3	; 0x03
    3d5e:	20 e0       	ldi	r18, 0x00	; 0
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	40 e8       	ldi	r20, 0x80	; 128
    3d64:	5f e3       	ldi	r21, 0x3F	; 63
    3d66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d6a:	88 23       	and	r24, r24
    3d6c:	44 f4       	brge	.+16     	; 0x3d7e <login_system+0x10c>
		__ticks = 1;
    3d6e:	fe 01       	movw	r30, r28
    3d70:	e7 5a       	subi	r30, 0xA7	; 167
    3d72:	ff 4f       	sbci	r31, 0xFF	; 255
    3d74:	81 e0       	ldi	r24, 0x01	; 1
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	91 83       	std	Z+1, r25	; 0x01
    3d7a:	80 83       	st	Z, r24
    3d7c:	64 c0       	rjmp	.+200    	; 0x3e46 <login_system+0x1d4>
	else if (__tmp > 65535)
    3d7e:	fe 01       	movw	r30, r28
    3d80:	e5 5a       	subi	r30, 0xA5	; 165
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	60 81       	ld	r22, Z
    3d86:	71 81       	ldd	r23, Z+1	; 0x01
    3d88:	82 81       	ldd	r24, Z+2	; 0x02
    3d8a:	93 81       	ldd	r25, Z+3	; 0x03
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	3f ef       	ldi	r19, 0xFF	; 255
    3d90:	4f e7       	ldi	r20, 0x7F	; 127
    3d92:	57 e4       	ldi	r21, 0x47	; 71
    3d94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d98:	18 16       	cp	r1, r24
    3d9a:	0c f0       	brlt	.+2      	; 0x3d9e <login_system+0x12c>
    3d9c:	43 c0       	rjmp	.+134    	; 0x3e24 <login_system+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d9e:	fe 01       	movw	r30, r28
    3da0:	e1 5a       	subi	r30, 0xA1	; 161
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	40 e2       	ldi	r20, 0x20	; 32
    3db2:	51 e4       	ldi	r21, 0x41	; 65
    3db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	8e 01       	movw	r16, r28
    3dbe:	07 5a       	subi	r16, 0xA7	; 167
    3dc0:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc2:	bc 01       	movw	r22, r24
    3dc4:	cd 01       	movw	r24, r26
    3dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dca:	dc 01       	movw	r26, r24
    3dcc:	cb 01       	movw	r24, r22
    3dce:	f8 01       	movw	r30, r16
    3dd0:	91 83       	std	Z+1, r25	; 0x01
    3dd2:	80 83       	st	Z, r24
    3dd4:	1f c0       	rjmp	.+62     	; 0x3e14 <login_system+0x1a2>
    3dd6:	fe 01       	movw	r30, r28
    3dd8:	e9 5a       	subi	r30, 0xA9	; 169
    3dda:	ff 4f       	sbci	r31, 0xFF	; 255
    3ddc:	88 ec       	ldi	r24, 0xC8	; 200
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	91 83       	std	Z+1, r25	; 0x01
    3de2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3de4:	fe 01       	movw	r30, r28
    3de6:	e9 5a       	subi	r30, 0xA9	; 169
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	80 81       	ld	r24, Z
    3dec:	91 81       	ldd	r25, Z+1	; 0x01
    3dee:	01 97       	sbiw	r24, 0x01	; 1
    3df0:	f1 f7       	brne	.-4      	; 0x3dee <login_system+0x17c>
    3df2:	fe 01       	movw	r30, r28
    3df4:	e9 5a       	subi	r30, 0xA9	; 169
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	91 83       	std	Z+1, r25	; 0x01
    3dfa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfc:	de 01       	movw	r26, r28
    3dfe:	a7 5a       	subi	r26, 0xA7	; 167
    3e00:	bf 4f       	sbci	r27, 0xFF	; 255
    3e02:	fe 01       	movw	r30, r28
    3e04:	e7 5a       	subi	r30, 0xA7	; 167
    3e06:	ff 4f       	sbci	r31, 0xFF	; 255
    3e08:	80 81       	ld	r24, Z
    3e0a:	91 81       	ldd	r25, Z+1	; 0x01
    3e0c:	01 97       	sbiw	r24, 0x01	; 1
    3e0e:	11 96       	adiw	r26, 0x01	; 1
    3e10:	9c 93       	st	X, r25
    3e12:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e14:	fe 01       	movw	r30, r28
    3e16:	e7 5a       	subi	r30, 0xA7	; 167
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	80 81       	ld	r24, Z
    3e1c:	91 81       	ldd	r25, Z+1	; 0x01
    3e1e:	00 97       	sbiw	r24, 0x00	; 0
    3e20:	d1 f6       	brne	.-76     	; 0x3dd6 <login_system+0x164>
    3e22:	27 c0       	rjmp	.+78     	; 0x3e72 <login_system+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e24:	8e 01       	movw	r16, r28
    3e26:	07 5a       	subi	r16, 0xA7	; 167
    3e28:	1f 4f       	sbci	r17, 0xFF	; 255
    3e2a:	fe 01       	movw	r30, r28
    3e2c:	e5 5a       	subi	r30, 0xA5	; 165
    3e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e30:	60 81       	ld	r22, Z
    3e32:	71 81       	ldd	r23, Z+1	; 0x01
    3e34:	82 81       	ldd	r24, Z+2	; 0x02
    3e36:	93 81       	ldd	r25, Z+3	; 0x03
    3e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e3c:	dc 01       	movw	r26, r24
    3e3e:	cb 01       	movw	r24, r22
    3e40:	f8 01       	movw	r30, r16
    3e42:	91 83       	std	Z+1, r25	; 0x01
    3e44:	80 83       	st	Z, r24
    3e46:	de 01       	movw	r26, r28
    3e48:	ab 5a       	subi	r26, 0xAB	; 171
    3e4a:	bf 4f       	sbci	r27, 0xFF	; 255
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	e7 5a       	subi	r30, 0xA7	; 167
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	80 81       	ld	r24, Z
    3e54:	91 81       	ldd	r25, Z+1	; 0x01
    3e56:	8d 93       	st	X+, r24
    3e58:	9c 93       	st	X, r25
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	eb 5a       	subi	r30, 0xAB	; 171
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	f1 f7       	brne	.-4      	; 0x3e64 <login_system+0x1f2>
    3e68:	fe 01       	movw	r30, r28
    3e6a:	eb 5a       	subi	r30, 0xAB	; 171
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	80 83       	st	Z, r24
						_delay_ms(20);
						LCD_voidWriteString((u8*)"Correct Password!");
    3e72:	85 ee       	ldi	r24, 0xE5	; 229
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
						*flag = 1;
    3e7a:	fe 01       	movw	r30, r28
    3e7c:	e9 59       	subi	r30, 0x99	; 153
    3e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e80:	01 90       	ld	r0, Z+
    3e82:	f0 81       	ld	r31, Z
    3e84:	e0 2d       	mov	r30, r0
    3e86:	81 e0       	ldi	r24, 0x01	; 1
    3e88:	80 83       	st	Z, r24
    3e8a:	4c c3       	rjmp	.+1688   	; 0x4524 <login_system+0x8b2>
						break;
					}
					else
					{
						LCD_voidClearScreen();
    3e8c:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    3e90:	fe 01       	movw	r30, r28
    3e92:	ef 5a       	subi	r30, 0xAF	; 175
    3e94:	ff 4f       	sbci	r31, 0xFF	; 255
    3e96:	80 e0       	ldi	r24, 0x00	; 0
    3e98:	90 e0       	ldi	r25, 0x00	; 0
    3e9a:	a0 ea       	ldi	r26, 0xA0	; 160
    3e9c:	b1 e4       	ldi	r27, 0x41	; 65
    3e9e:	80 83       	st	Z, r24
    3ea0:	91 83       	std	Z+1, r25	; 0x01
    3ea2:	a2 83       	std	Z+2, r26	; 0x02
    3ea4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ea6:	8e 01       	movw	r16, r28
    3ea8:	03 5b       	subi	r16, 0xB3	; 179
    3eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    3eac:	fe 01       	movw	r30, r28
    3eae:	ef 5a       	subi	r30, 0xAF	; 175
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	60 81       	ld	r22, Z
    3eb4:	71 81       	ldd	r23, Z+1	; 0x01
    3eb6:	82 81       	ldd	r24, Z+2	; 0x02
    3eb8:	93 81       	ldd	r25, Z+3	; 0x03
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	30 e0       	ldi	r19, 0x00	; 0
    3ebe:	4a ef       	ldi	r20, 0xFA	; 250
    3ec0:	54 e4       	ldi	r21, 0x44	; 68
    3ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	cb 01       	movw	r24, r22
    3eca:	f8 01       	movw	r30, r16
    3ecc:	80 83       	st	Z, r24
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	a2 83       	std	Z+2, r26	; 0x02
    3ed2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ed4:	fe 01       	movw	r30, r28
    3ed6:	e3 5b       	subi	r30, 0xB3	; 179
    3ed8:	ff 4f       	sbci	r31, 0xFF	; 255
    3eda:	60 81       	ld	r22, Z
    3edc:	71 81       	ldd	r23, Z+1	; 0x01
    3ede:	82 81       	ldd	r24, Z+2	; 0x02
    3ee0:	93 81       	ldd	r25, Z+3	; 0x03
    3ee2:	20 e0       	ldi	r18, 0x00	; 0
    3ee4:	30 e0       	ldi	r19, 0x00	; 0
    3ee6:	40 e8       	ldi	r20, 0x80	; 128
    3ee8:	5f e3       	ldi	r21, 0x3F	; 63
    3eea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3eee:	88 23       	and	r24, r24
    3ef0:	44 f4       	brge	.+16     	; 0x3f02 <login_system+0x290>
		__ticks = 1;
    3ef2:	fe 01       	movw	r30, r28
    3ef4:	e5 5b       	subi	r30, 0xB5	; 181
    3ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef8:	81 e0       	ldi	r24, 0x01	; 1
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24
    3f00:	64 c0       	rjmp	.+200    	; 0x3fca <login_system+0x358>
	else if (__tmp > 65535)
    3f02:	fe 01       	movw	r30, r28
    3f04:	e3 5b       	subi	r30, 0xB3	; 179
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	60 81       	ld	r22, Z
    3f0a:	71 81       	ldd	r23, Z+1	; 0x01
    3f0c:	82 81       	ldd	r24, Z+2	; 0x02
    3f0e:	93 81       	ldd	r25, Z+3	; 0x03
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	3f ef       	ldi	r19, 0xFF	; 255
    3f14:	4f e7       	ldi	r20, 0x7F	; 127
    3f16:	57 e4       	ldi	r21, 0x47	; 71
    3f18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f1c:	18 16       	cp	r1, r24
    3f1e:	0c f0       	brlt	.+2      	; 0x3f22 <login_system+0x2b0>
    3f20:	43 c0       	rjmp	.+134    	; 0x3fa8 <login_system+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f22:	fe 01       	movw	r30, r28
    3f24:	ef 5a       	subi	r30, 0xAF	; 175
    3f26:	ff 4f       	sbci	r31, 0xFF	; 255
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	82 81       	ldd	r24, Z+2	; 0x02
    3f2e:	93 81       	ldd	r25, Z+3	; 0x03
    3f30:	20 e0       	ldi	r18, 0x00	; 0
    3f32:	30 e0       	ldi	r19, 0x00	; 0
    3f34:	40 e2       	ldi	r20, 0x20	; 32
    3f36:	51 e4       	ldi	r21, 0x41	; 65
    3f38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f3c:	dc 01       	movw	r26, r24
    3f3e:	cb 01       	movw	r24, r22
    3f40:	8e 01       	movw	r16, r28
    3f42:	05 5b       	subi	r16, 0xB5	; 181
    3f44:	1f 4f       	sbci	r17, 0xFF	; 255
    3f46:	bc 01       	movw	r22, r24
    3f48:	cd 01       	movw	r24, r26
    3f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f4e:	dc 01       	movw	r26, r24
    3f50:	cb 01       	movw	r24, r22
    3f52:	f8 01       	movw	r30, r16
    3f54:	91 83       	std	Z+1, r25	; 0x01
    3f56:	80 83       	st	Z, r24
    3f58:	1f c0       	rjmp	.+62     	; 0x3f98 <login_system+0x326>
    3f5a:	fe 01       	movw	r30, r28
    3f5c:	e7 5b       	subi	r30, 0xB7	; 183
    3f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f60:	88 ec       	ldi	r24, 0xC8	; 200
    3f62:	90 e0       	ldi	r25, 0x00	; 0
    3f64:	91 83       	std	Z+1, r25	; 0x01
    3f66:	80 83       	st	Z, r24
    3f68:	fe 01       	movw	r30, r28
    3f6a:	e7 5b       	subi	r30, 0xB7	; 183
    3f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6e:	80 81       	ld	r24, Z
    3f70:	91 81       	ldd	r25, Z+1	; 0x01
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	f1 f7       	brne	.-4      	; 0x3f72 <login_system+0x300>
    3f76:	fe 01       	movw	r30, r28
    3f78:	e7 5b       	subi	r30, 0xB7	; 183
    3f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7c:	91 83       	std	Z+1, r25	; 0x01
    3f7e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f80:	de 01       	movw	r26, r28
    3f82:	a5 5b       	subi	r26, 0xB5	; 181
    3f84:	bf 4f       	sbci	r27, 0xFF	; 255
    3f86:	fe 01       	movw	r30, r28
    3f88:	e5 5b       	subi	r30, 0xB5	; 181
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	11 96       	adiw	r26, 0x01	; 1
    3f94:	9c 93       	st	X, r25
    3f96:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f98:	fe 01       	movw	r30, r28
    3f9a:	e5 5b       	subi	r30, 0xB5	; 181
    3f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9e:	80 81       	ld	r24, Z
    3fa0:	91 81       	ldd	r25, Z+1	; 0x01
    3fa2:	00 97       	sbiw	r24, 0x00	; 0
    3fa4:	d1 f6       	brne	.-76     	; 0x3f5a <login_system+0x2e8>
    3fa6:	27 c0       	rjmp	.+78     	; 0x3ff6 <login_system+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fa8:	8e 01       	movw	r16, r28
    3faa:	05 5b       	subi	r16, 0xB5	; 181
    3fac:	1f 4f       	sbci	r17, 0xFF	; 255
    3fae:	fe 01       	movw	r30, r28
    3fb0:	e3 5b       	subi	r30, 0xB3	; 179
    3fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb4:	60 81       	ld	r22, Z
    3fb6:	71 81       	ldd	r23, Z+1	; 0x01
    3fb8:	82 81       	ldd	r24, Z+2	; 0x02
    3fba:	93 81       	ldd	r25, Z+3	; 0x03
    3fbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	f8 01       	movw	r30, r16
    3fc6:	91 83       	std	Z+1, r25	; 0x01
    3fc8:	80 83       	st	Z, r24
    3fca:	de 01       	movw	r26, r28
    3fcc:	a9 5b       	subi	r26, 0xB9	; 185
    3fce:	bf 4f       	sbci	r27, 0xFF	; 255
    3fd0:	fe 01       	movw	r30, r28
    3fd2:	e5 5b       	subi	r30, 0xB5	; 181
    3fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd6:	80 81       	ld	r24, Z
    3fd8:	91 81       	ldd	r25, Z+1	; 0x01
    3fda:	8d 93       	st	X+, r24
    3fdc:	9c 93       	st	X, r25
    3fde:	fe 01       	movw	r30, r28
    3fe0:	e9 5b       	subi	r30, 0xB9	; 185
    3fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe4:	80 81       	ld	r24, Z
    3fe6:	91 81       	ldd	r25, Z+1	; 0x01
    3fe8:	01 97       	sbiw	r24, 0x01	; 1
    3fea:	f1 f7       	brne	.-4      	; 0x3fe8 <login_system+0x376>
    3fec:	fe 01       	movw	r30, r28
    3fee:	e9 5b       	subi	r30, 0xB9	; 185
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	91 83       	std	Z+1, r25	; 0x01
    3ff4:	80 83       	st	Z, r24
						_delay_ms(20);
						LCD_voidWriteString((u8*)"Wrong Password!");
    3ff6:	87 ef       	ldi	r24, 0xF7	; 247
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
    3ffe:	fe 01       	movw	r30, r28
    4000:	ed 5b       	subi	r30, 0xBD	; 189
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 e0       	ldi	r24, 0x00	; 0
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	aa e7       	ldi	r26, 0x7A	; 122
    400a:	b4 e4       	ldi	r27, 0x44	; 68
    400c:	80 83       	st	Z, r24
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	a2 83       	std	Z+2, r26	; 0x02
    4012:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4014:	8e 01       	movw	r16, r28
    4016:	01 5c       	subi	r16, 0xC1	; 193
    4018:	1f 4f       	sbci	r17, 0xFF	; 255
    401a:	fe 01       	movw	r30, r28
    401c:	ed 5b       	subi	r30, 0xBD	; 189
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	60 81       	ld	r22, Z
    4022:	71 81       	ldd	r23, Z+1	; 0x01
    4024:	82 81       	ldd	r24, Z+2	; 0x02
    4026:	93 81       	ldd	r25, Z+3	; 0x03
    4028:	20 e0       	ldi	r18, 0x00	; 0
    402a:	30 e0       	ldi	r19, 0x00	; 0
    402c:	4a ef       	ldi	r20, 0xFA	; 250
    402e:	54 e4       	ldi	r21, 0x44	; 68
    4030:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4034:	dc 01       	movw	r26, r24
    4036:	cb 01       	movw	r24, r22
    4038:	f8 01       	movw	r30, r16
    403a:	80 83       	st	Z, r24
    403c:	91 83       	std	Z+1, r25	; 0x01
    403e:	a2 83       	std	Z+2, r26	; 0x02
    4040:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4042:	fe 01       	movw	r30, r28
    4044:	ff 96       	adiw	r30, 0x3f	; 63
    4046:	60 81       	ld	r22, Z
    4048:	71 81       	ldd	r23, Z+1	; 0x01
    404a:	82 81       	ldd	r24, Z+2	; 0x02
    404c:	93 81       	ldd	r25, Z+3	; 0x03
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	30 e0       	ldi	r19, 0x00	; 0
    4052:	40 e8       	ldi	r20, 0x80	; 128
    4054:	5f e3       	ldi	r21, 0x3F	; 63
    4056:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    405a:	88 23       	and	r24, r24
    405c:	2c f4       	brge	.+10     	; 0x4068 <login_system+0x3f6>
		__ticks = 1;
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	90 e0       	ldi	r25, 0x00	; 0
    4062:	9e af       	std	Y+62, r25	; 0x3e
    4064:	8d af       	std	Y+61, r24	; 0x3d
    4066:	46 c0       	rjmp	.+140    	; 0x40f4 <login_system+0x482>
	else if (__tmp > 65535)
    4068:	fe 01       	movw	r30, r28
    406a:	ff 96       	adiw	r30, 0x3f	; 63
    406c:	60 81       	ld	r22, Z
    406e:	71 81       	ldd	r23, Z+1	; 0x01
    4070:	82 81       	ldd	r24, Z+2	; 0x02
    4072:	93 81       	ldd	r25, Z+3	; 0x03
    4074:	20 e0       	ldi	r18, 0x00	; 0
    4076:	3f ef       	ldi	r19, 0xFF	; 255
    4078:	4f e7       	ldi	r20, 0x7F	; 127
    407a:	57 e4       	ldi	r21, 0x47	; 71
    407c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4080:	18 16       	cp	r1, r24
    4082:	64 f5       	brge	.+88     	; 0x40dc <login_system+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4084:	fe 01       	movw	r30, r28
    4086:	ed 5b       	subi	r30, 0xBD	; 189
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	60 81       	ld	r22, Z
    408c:	71 81       	ldd	r23, Z+1	; 0x01
    408e:	82 81       	ldd	r24, Z+2	; 0x02
    4090:	93 81       	ldd	r25, Z+3	; 0x03
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	40 e2       	ldi	r20, 0x20	; 32
    4098:	51 e4       	ldi	r21, 0x41	; 65
    409a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    409e:	dc 01       	movw	r26, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	bc 01       	movw	r22, r24
    40a4:	cd 01       	movw	r24, r26
    40a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40aa:	dc 01       	movw	r26, r24
    40ac:	cb 01       	movw	r24, r22
    40ae:	9e af       	std	Y+62, r25	; 0x3e
    40b0:	8d af       	std	Y+61, r24	; 0x3d
    40b2:	0f c0       	rjmp	.+30     	; 0x40d2 <login_system+0x460>
    40b4:	88 ec       	ldi	r24, 0xC8	; 200
    40b6:	90 e0       	ldi	r25, 0x00	; 0
    40b8:	9c af       	std	Y+60, r25	; 0x3c
    40ba:	8b af       	std	Y+59, r24	; 0x3b
    40bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    40be:	9c ad       	ldd	r25, Y+60	; 0x3c
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <login_system+0x44e>
    40c4:	9c af       	std	Y+60, r25	; 0x3c
    40c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    40ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    40cc:	01 97       	sbiw	r24, 0x01	; 1
    40ce:	9e af       	std	Y+62, r25	; 0x3e
    40d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    40d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    40d6:	00 97       	sbiw	r24, 0x00	; 0
    40d8:	69 f7       	brne	.-38     	; 0x40b4 <login_system+0x442>
    40da:	16 c0       	rjmp	.+44     	; 0x4108 <login_system+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40dc:	fe 01       	movw	r30, r28
    40de:	ff 96       	adiw	r30, 0x3f	; 63
    40e0:	60 81       	ld	r22, Z
    40e2:	71 81       	ldd	r23, Z+1	; 0x01
    40e4:	82 81       	ldd	r24, Z+2	; 0x02
    40e6:	93 81       	ldd	r25, Z+3	; 0x03
    40e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40ec:	dc 01       	movw	r26, r24
    40ee:	cb 01       	movw	r24, r22
    40f0:	9e af       	std	Y+62, r25	; 0x3e
    40f2:	8d af       	std	Y+61, r24	; 0x3d
    40f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    40f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    40f8:	9a af       	std	Y+58, r25	; 0x3a
    40fa:	89 af       	std	Y+57, r24	; 0x39
    40fc:	89 ad       	ldd	r24, Y+57	; 0x39
    40fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    4100:	01 97       	sbiw	r24, 0x01	; 1
    4102:	f1 f7       	brne	.-4      	; 0x4100 <login_system+0x48e>
    4104:	9a af       	std	Y+58, r25	; 0x3a
    4106:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(1000);
						if(trials < 2) // display try again for twice only
    4108:	80 91 78 01 	lds	r24, 0x0178
    410c:	82 30       	cpi	r24, 0x02	; 2
    410e:	08 f0       	brcs	.+2      	; 0x4112 <login_system+0x4a0>
    4110:	ea c0       	rjmp	.+468    	; 0x42e6 <login_system+0x674>
						{
							LCD_voidClearScreen();
    4112:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    4116:	80 e0       	ldi	r24, 0x00	; 0
    4118:	90 e0       	ldi	r25, 0x00	; 0
    411a:	a0 ea       	ldi	r26, 0xA0	; 160
    411c:	b1 e4       	ldi	r27, 0x41	; 65
    411e:	8d ab       	std	Y+53, r24	; 0x35
    4120:	9e ab       	std	Y+54, r25	; 0x36
    4122:	af ab       	std	Y+55, r26	; 0x37
    4124:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4126:	6d a9       	ldd	r22, Y+53	; 0x35
    4128:	7e a9       	ldd	r23, Y+54	; 0x36
    412a:	8f a9       	ldd	r24, Y+55	; 0x37
    412c:	98 ad       	ldd	r25, Y+56	; 0x38
    412e:	20 e0       	ldi	r18, 0x00	; 0
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	4a ef       	ldi	r20, 0xFA	; 250
    4134:	54 e4       	ldi	r21, 0x44	; 68
    4136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    413a:	dc 01       	movw	r26, r24
    413c:	cb 01       	movw	r24, r22
    413e:	89 ab       	std	Y+49, r24	; 0x31
    4140:	9a ab       	std	Y+50, r25	; 0x32
    4142:	ab ab       	std	Y+51, r26	; 0x33
    4144:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4146:	69 a9       	ldd	r22, Y+49	; 0x31
    4148:	7a a9       	ldd	r23, Y+50	; 0x32
    414a:	8b a9       	ldd	r24, Y+51	; 0x33
    414c:	9c a9       	ldd	r25, Y+52	; 0x34
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	30 e0       	ldi	r19, 0x00	; 0
    4152:	40 e8       	ldi	r20, 0x80	; 128
    4154:	5f e3       	ldi	r21, 0x3F	; 63
    4156:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    415a:	88 23       	and	r24, r24
    415c:	2c f4       	brge	.+10     	; 0x4168 <login_system+0x4f6>
		__ticks = 1;
    415e:	81 e0       	ldi	r24, 0x01	; 1
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	98 ab       	std	Y+48, r25	; 0x30
    4164:	8f a7       	std	Y+47, r24	; 0x2f
    4166:	3f c0       	rjmp	.+126    	; 0x41e6 <login_system+0x574>
	else if (__tmp > 65535)
    4168:	69 a9       	ldd	r22, Y+49	; 0x31
    416a:	7a a9       	ldd	r23, Y+50	; 0x32
    416c:	8b a9       	ldd	r24, Y+51	; 0x33
    416e:	9c a9       	ldd	r25, Y+52	; 0x34
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	3f ef       	ldi	r19, 0xFF	; 255
    4174:	4f e7       	ldi	r20, 0x7F	; 127
    4176:	57 e4       	ldi	r21, 0x47	; 71
    4178:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    417c:	18 16       	cp	r1, r24
    417e:	4c f5       	brge	.+82     	; 0x41d2 <login_system+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4180:	6d a9       	ldd	r22, Y+53	; 0x35
    4182:	7e a9       	ldd	r23, Y+54	; 0x36
    4184:	8f a9       	ldd	r24, Y+55	; 0x37
    4186:	98 ad       	ldd	r25, Y+56	; 0x38
    4188:	20 e0       	ldi	r18, 0x00	; 0
    418a:	30 e0       	ldi	r19, 0x00	; 0
    418c:	40 e2       	ldi	r20, 0x20	; 32
    418e:	51 e4       	ldi	r21, 0x41	; 65
    4190:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4194:	dc 01       	movw	r26, r24
    4196:	cb 01       	movw	r24, r22
    4198:	bc 01       	movw	r22, r24
    419a:	cd 01       	movw	r24, r26
    419c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a0:	dc 01       	movw	r26, r24
    41a2:	cb 01       	movw	r24, r22
    41a4:	98 ab       	std	Y+48, r25	; 0x30
    41a6:	8f a7       	std	Y+47, r24	; 0x2f
    41a8:	0f c0       	rjmp	.+30     	; 0x41c8 <login_system+0x556>
    41aa:	88 ec       	ldi	r24, 0xC8	; 200
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	9e a7       	std	Y+46, r25	; 0x2e
    41b0:	8d a7       	std	Y+45, r24	; 0x2d
    41b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    41b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	f1 f7       	brne	.-4      	; 0x41b6 <login_system+0x544>
    41ba:	9e a7       	std	Y+46, r25	; 0x2e
    41bc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41be:	8f a5       	ldd	r24, Y+47	; 0x2f
    41c0:	98 a9       	ldd	r25, Y+48	; 0x30
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	98 ab       	std	Y+48, r25	; 0x30
    41c6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ca:	98 a9       	ldd	r25, Y+48	; 0x30
    41cc:	00 97       	sbiw	r24, 0x00	; 0
    41ce:	69 f7       	brne	.-38     	; 0x41aa <login_system+0x538>
    41d0:	14 c0       	rjmp	.+40     	; 0x41fa <login_system+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41d2:	69 a9       	ldd	r22, Y+49	; 0x31
    41d4:	7a a9       	ldd	r23, Y+50	; 0x32
    41d6:	8b a9       	ldd	r24, Y+51	; 0x33
    41d8:	9c a9       	ldd	r25, Y+52	; 0x34
    41da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41de:	dc 01       	movw	r26, r24
    41e0:	cb 01       	movw	r24, r22
    41e2:	98 ab       	std	Y+48, r25	; 0x30
    41e4:	8f a7       	std	Y+47, r24	; 0x2f
    41e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    41e8:	98 a9       	ldd	r25, Y+48	; 0x30
    41ea:	9c a7       	std	Y+44, r25	; 0x2c
    41ec:	8b a7       	std	Y+43, r24	; 0x2b
    41ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    41f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    41f2:	01 97       	sbiw	r24, 0x01	; 1
    41f4:	f1 f7       	brne	.-4      	; 0x41f2 <login_system+0x580>
    41f6:	9c a7       	std	Y+44, r25	; 0x2c
    41f8:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(20);
							LCD_voidWriteString((u8*)"Try Again!");
    41fa:	87 e0       	ldi	r24, 0x07	; 7
    41fc:	91 e0       	ldi	r25, 0x01	; 1
    41fe:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
    4202:	80 e0       	ldi	r24, 0x00	; 0
    4204:	90 e0       	ldi	r25, 0x00	; 0
    4206:	aa e7       	ldi	r26, 0x7A	; 122
    4208:	b4 e4       	ldi	r27, 0x44	; 68
    420a:	8f a3       	std	Y+39, r24	; 0x27
    420c:	98 a7       	std	Y+40, r25	; 0x28
    420e:	a9 a7       	std	Y+41, r26	; 0x29
    4210:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4212:	6f a1       	ldd	r22, Y+39	; 0x27
    4214:	78 a5       	ldd	r23, Y+40	; 0x28
    4216:	89 a5       	ldd	r24, Y+41	; 0x29
    4218:	9a a5       	ldd	r25, Y+42	; 0x2a
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	4a ef       	ldi	r20, 0xFA	; 250
    4220:	54 e4       	ldi	r21, 0x44	; 68
    4222:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4226:	dc 01       	movw	r26, r24
    4228:	cb 01       	movw	r24, r22
    422a:	8b a3       	std	Y+35, r24	; 0x23
    422c:	9c a3       	std	Y+36, r25	; 0x24
    422e:	ad a3       	std	Y+37, r26	; 0x25
    4230:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4232:	6b a1       	ldd	r22, Y+35	; 0x23
    4234:	7c a1       	ldd	r23, Y+36	; 0x24
    4236:	8d a1       	ldd	r24, Y+37	; 0x25
    4238:	9e a1       	ldd	r25, Y+38	; 0x26
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	40 e8       	ldi	r20, 0x80	; 128
    4240:	5f e3       	ldi	r21, 0x3F	; 63
    4242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4246:	88 23       	and	r24, r24
    4248:	2c f4       	brge	.+10     	; 0x4254 <login_system+0x5e2>
		__ticks = 1;
    424a:	81 e0       	ldi	r24, 0x01	; 1
    424c:	90 e0       	ldi	r25, 0x00	; 0
    424e:	9a a3       	std	Y+34, r25	; 0x22
    4250:	89 a3       	std	Y+33, r24	; 0x21
    4252:	3f c0       	rjmp	.+126    	; 0x42d2 <login_system+0x660>
	else if (__tmp > 65535)
    4254:	6b a1       	ldd	r22, Y+35	; 0x23
    4256:	7c a1       	ldd	r23, Y+36	; 0x24
    4258:	8d a1       	ldd	r24, Y+37	; 0x25
    425a:	9e a1       	ldd	r25, Y+38	; 0x26
    425c:	20 e0       	ldi	r18, 0x00	; 0
    425e:	3f ef       	ldi	r19, 0xFF	; 255
    4260:	4f e7       	ldi	r20, 0x7F	; 127
    4262:	57 e4       	ldi	r21, 0x47	; 71
    4264:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4268:	18 16       	cp	r1, r24
    426a:	4c f5       	brge	.+82     	; 0x42be <login_system+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    426c:	6f a1       	ldd	r22, Y+39	; 0x27
    426e:	78 a5       	ldd	r23, Y+40	; 0x28
    4270:	89 a5       	ldd	r24, Y+41	; 0x29
    4272:	9a a5       	ldd	r25, Y+42	; 0x2a
    4274:	20 e0       	ldi	r18, 0x00	; 0
    4276:	30 e0       	ldi	r19, 0x00	; 0
    4278:	40 e2       	ldi	r20, 0x20	; 32
    427a:	51 e4       	ldi	r21, 0x41	; 65
    427c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4280:	dc 01       	movw	r26, r24
    4282:	cb 01       	movw	r24, r22
    4284:	bc 01       	movw	r22, r24
    4286:	cd 01       	movw	r24, r26
    4288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	9a a3       	std	Y+34, r25	; 0x22
    4292:	89 a3       	std	Y+33, r24	; 0x21
    4294:	0f c0       	rjmp	.+30     	; 0x42b4 <login_system+0x642>
    4296:	88 ec       	ldi	r24, 0xC8	; 200
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	98 a3       	std	Y+32, r25	; 0x20
    429c:	8f 8f       	std	Y+31, r24	; 0x1f
    429e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42a0:	98 a1       	ldd	r25, Y+32	; 0x20
    42a2:	01 97       	sbiw	r24, 0x01	; 1
    42a4:	f1 f7       	brne	.-4      	; 0x42a2 <login_system+0x630>
    42a6:	98 a3       	std	Y+32, r25	; 0x20
    42a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42aa:	89 a1       	ldd	r24, Y+33	; 0x21
    42ac:	9a a1       	ldd	r25, Y+34	; 0x22
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	9a a3       	std	Y+34, r25	; 0x22
    42b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42b4:	89 a1       	ldd	r24, Y+33	; 0x21
    42b6:	9a a1       	ldd	r25, Y+34	; 0x22
    42b8:	00 97       	sbiw	r24, 0x00	; 0
    42ba:	69 f7       	brne	.-38     	; 0x4296 <login_system+0x624>
    42bc:	14 c0       	rjmp	.+40     	; 0x42e6 <login_system+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42be:	6b a1       	ldd	r22, Y+35	; 0x23
    42c0:	7c a1       	ldd	r23, Y+36	; 0x24
    42c2:	8d a1       	ldd	r24, Y+37	; 0x25
    42c4:	9e a1       	ldd	r25, Y+38	; 0x26
    42c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	9a a3       	std	Y+34, r25	; 0x22
    42d0:	89 a3       	std	Y+33, r24	; 0x21
    42d2:	89 a1       	ldd	r24, Y+33	; 0x21
    42d4:	9a a1       	ldd	r25, Y+34	; 0x22
    42d6:	9e 8f       	std	Y+30, r25	; 0x1e
    42d8:	8d 8f       	std	Y+29, r24	; 0x1d
    42da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42de:	01 97       	sbiw	r24, 0x01	; 1
    42e0:	f1 f7       	brne	.-4      	; 0x42de <login_system+0x66c>
    42e2:	9e 8f       	std	Y+30, r25	; 0x1e
    42e4:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(1000);
						}
						trials++;
    42e6:	80 91 78 01 	lds	r24, 0x0178
    42ea:	8f 5f       	subi	r24, 0xFF	; 255
    42ec:	80 93 78 01 	sts	0x0178, r24
						Local_u8Index = 0;
    42f0:	10 92 71 01 	sts	0x0171, r1
						ClearBuffer(Local_Au8InputBuffer,5);
    42f4:	82 e7       	ldi	r24, 0x72	; 114
    42f6:	91 e0       	ldi	r25, 0x01	; 1
    42f8:	65 e0       	ldi	r22, 0x05	; 5
    42fa:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <ClearBuffer>
						if(trials <= 2) // For Last trial that will not display try again
    42fe:	80 91 78 01 	lds	r24, 0x0178
    4302:	83 30       	cpi	r24, 0x03	; 3
    4304:	08 f0       	brcs	.+2      	; 0x4308 <login_system+0x696>
    4306:	d4 cc       	rjmp	.-1624   	; 0x3cb0 <login_system+0x3e>
						{
							LCD_voidClearScreen();
    4308:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	a0 ea       	ldi	r26, 0xA0	; 160
    4312:	b1 e4       	ldi	r27, 0x41	; 65
    4314:	89 8f       	std	Y+25, r24	; 0x19
    4316:	9a 8f       	std	Y+26, r25	; 0x1a
    4318:	ab 8f       	std	Y+27, r26	; 0x1b
    431a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431c:	69 8d       	ldd	r22, Y+25	; 0x19
    431e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4320:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4322:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4324:	20 e0       	ldi	r18, 0x00	; 0
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	4a ef       	ldi	r20, 0xFA	; 250
    432a:	54 e4       	ldi	r21, 0x44	; 68
    432c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4330:	dc 01       	movw	r26, r24
    4332:	cb 01       	movw	r24, r22
    4334:	8d 8b       	std	Y+21, r24	; 0x15
    4336:	9e 8b       	std	Y+22, r25	; 0x16
    4338:	af 8b       	std	Y+23, r26	; 0x17
    433a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    433c:	6d 89       	ldd	r22, Y+21	; 0x15
    433e:	7e 89       	ldd	r23, Y+22	; 0x16
    4340:	8f 89       	ldd	r24, Y+23	; 0x17
    4342:	98 8d       	ldd	r25, Y+24	; 0x18
    4344:	20 e0       	ldi	r18, 0x00	; 0
    4346:	30 e0       	ldi	r19, 0x00	; 0
    4348:	40 e8       	ldi	r20, 0x80	; 128
    434a:	5f e3       	ldi	r21, 0x3F	; 63
    434c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4350:	88 23       	and	r24, r24
    4352:	2c f4       	brge	.+10     	; 0x435e <login_system+0x6ec>
		__ticks = 1;
    4354:	81 e0       	ldi	r24, 0x01	; 1
    4356:	90 e0       	ldi	r25, 0x00	; 0
    4358:	9c 8b       	std	Y+20, r25	; 0x14
    435a:	8b 8b       	std	Y+19, r24	; 0x13
    435c:	3f c0       	rjmp	.+126    	; 0x43dc <login_system+0x76a>
	else if (__tmp > 65535)
    435e:	6d 89       	ldd	r22, Y+21	; 0x15
    4360:	7e 89       	ldd	r23, Y+22	; 0x16
    4362:	8f 89       	ldd	r24, Y+23	; 0x17
    4364:	98 8d       	ldd	r25, Y+24	; 0x18
    4366:	20 e0       	ldi	r18, 0x00	; 0
    4368:	3f ef       	ldi	r19, 0xFF	; 255
    436a:	4f e7       	ldi	r20, 0x7F	; 127
    436c:	57 e4       	ldi	r21, 0x47	; 71
    436e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4372:	18 16       	cp	r1, r24
    4374:	4c f5       	brge	.+82     	; 0x43c8 <login_system+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4376:	69 8d       	ldd	r22, Y+25	; 0x19
    4378:	7a 8d       	ldd	r23, Y+26	; 0x1a
    437a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    437c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	40 e2       	ldi	r20, 0x20	; 32
    4384:	51 e4       	ldi	r21, 0x41	; 65
    4386:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438a:	dc 01       	movw	r26, r24
    438c:	cb 01       	movw	r24, r22
    438e:	bc 01       	movw	r22, r24
    4390:	cd 01       	movw	r24, r26
    4392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4396:	dc 01       	movw	r26, r24
    4398:	cb 01       	movw	r24, r22
    439a:	9c 8b       	std	Y+20, r25	; 0x14
    439c:	8b 8b       	std	Y+19, r24	; 0x13
    439e:	0f c0       	rjmp	.+30     	; 0x43be <login_system+0x74c>
    43a0:	88 ec       	ldi	r24, 0xC8	; 200
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	9a 8b       	std	Y+18, r25	; 0x12
    43a6:	89 8b       	std	Y+17, r24	; 0x11
    43a8:	89 89       	ldd	r24, Y+17	; 0x11
    43aa:	9a 89       	ldd	r25, Y+18	; 0x12
    43ac:	01 97       	sbiw	r24, 0x01	; 1
    43ae:	f1 f7       	brne	.-4      	; 0x43ac <login_system+0x73a>
    43b0:	9a 8b       	std	Y+18, r25	; 0x12
    43b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b4:	8b 89       	ldd	r24, Y+19	; 0x13
    43b6:	9c 89       	ldd	r25, Y+20	; 0x14
    43b8:	01 97       	sbiw	r24, 0x01	; 1
    43ba:	9c 8b       	std	Y+20, r25	; 0x14
    43bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43be:	8b 89       	ldd	r24, Y+19	; 0x13
    43c0:	9c 89       	ldd	r25, Y+20	; 0x14
    43c2:	00 97       	sbiw	r24, 0x00	; 0
    43c4:	69 f7       	brne	.-38     	; 0x43a0 <login_system+0x72e>
    43c6:	14 c0       	rjmp	.+40     	; 0x43f0 <login_system+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c8:	6d 89       	ldd	r22, Y+21	; 0x15
    43ca:	7e 89       	ldd	r23, Y+22	; 0x16
    43cc:	8f 89       	ldd	r24, Y+23	; 0x17
    43ce:	98 8d       	ldd	r25, Y+24	; 0x18
    43d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d4:	dc 01       	movw	r26, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	9c 8b       	std	Y+20, r25	; 0x14
    43da:	8b 8b       	std	Y+19, r24	; 0x13
    43dc:	8b 89       	ldd	r24, Y+19	; 0x13
    43de:	9c 89       	ldd	r25, Y+20	; 0x14
    43e0:	98 8b       	std	Y+16, r25	; 0x10
    43e2:	8f 87       	std	Y+15, r24	; 0x0f
    43e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e6:	98 89       	ldd	r25, Y+16	; 0x10
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	f1 f7       	brne	.-4      	; 0x43e8 <login_system+0x776>
    43ec:	98 8b       	std	Y+16, r25	; 0x10
    43ee:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(20);
							LCD_voidWriteString((u8*)"Enter Password: ");
    43f0:	84 ed       	ldi	r24, 0xD4	; 212
    43f2:	90 e0       	ldi	r25, 0x00	; 0
    43f4:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
							LCD_u8GoToXY(LCD_u8_LINE2,0);
    43f8:	82 e0       	ldi	r24, 0x02	; 2
    43fa:	60 e0       	ldi	r22, 0x00	; 0
    43fc:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
    4400:	57 cc       	rjmp	.-1874   	; 0x3cb0 <login_system+0x3e>
						}
					}
				}
				else  // If pressed key is a number or operator
				{
					appenedToBuffer(Local_Au8InputBuffer,Local_u8Key); // Append pressed key to buffer
    4402:	fe 01       	movw	r30, r28
    4404:	ed 59       	subi	r30, 0x9D	; 157
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	20 81       	ld	r18, Z
    440a:	82 e7       	ldi	r24, 0x72	; 114
    440c:	91 e0       	ldi	r25, 0x01	; 1
    440e:	62 2f       	mov	r22, r18
    4410:	0e 94 98 1d 	call	0x3b30	; 0x3b30 <appenedToBuffer>
					LCD_voidSendChar('*'); // Display pressed key on LCD
    4414:	8a e2       	ldi	r24, 0x2A	; 42
    4416:	0e 94 25 18 	call	0x304a	; 0x304a <LCD_voidSendChar>
    441a:	4a cc       	rjmp	.-1900   	; 0x3cb0 <login_system+0x3e>
				}
			}
		}
		else if ( trials == 3) // to make sure this won't execute the else before trails run out
    441c:	80 91 78 01 	lds	r24, 0x0178
    4420:	83 30       	cpi	r24, 0x03	; 3
    4422:	09 f0       	breq	.+2      	; 0x4426 <login_system+0x7b4>
    4424:	45 cc       	rjmp	.-1910   	; 0x3cb0 <login_system+0x3e>
		{
			LCD_voidClearScreen();
    4426:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    442a:	80 e0       	ldi	r24, 0x00	; 0
    442c:	90 e0       	ldi	r25, 0x00	; 0
    442e:	a0 ea       	ldi	r26, 0xA0	; 160
    4430:	b1 e4       	ldi	r27, 0x41	; 65
    4432:	8b 87       	std	Y+11, r24	; 0x0b
    4434:	9c 87       	std	Y+12, r25	; 0x0c
    4436:	ad 87       	std	Y+13, r26	; 0x0d
    4438:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    443a:	6b 85       	ldd	r22, Y+11	; 0x0b
    443c:	7c 85       	ldd	r23, Y+12	; 0x0c
    443e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4440:	9e 85       	ldd	r25, Y+14	; 0x0e
    4442:	20 e0       	ldi	r18, 0x00	; 0
    4444:	30 e0       	ldi	r19, 0x00	; 0
    4446:	4a ef       	ldi	r20, 0xFA	; 250
    4448:	54 e4       	ldi	r21, 0x44	; 68
    444a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    444e:	dc 01       	movw	r26, r24
    4450:	cb 01       	movw	r24, r22
    4452:	8f 83       	std	Y+7, r24	; 0x07
    4454:	98 87       	std	Y+8, r25	; 0x08
    4456:	a9 87       	std	Y+9, r26	; 0x09
    4458:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    445a:	6f 81       	ldd	r22, Y+7	; 0x07
    445c:	78 85       	ldd	r23, Y+8	; 0x08
    445e:	89 85       	ldd	r24, Y+9	; 0x09
    4460:	9a 85       	ldd	r25, Y+10	; 0x0a
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	40 e8       	ldi	r20, 0x80	; 128
    4468:	5f e3       	ldi	r21, 0x3F	; 63
    446a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    446e:	88 23       	and	r24, r24
    4470:	2c f4       	brge	.+10     	; 0x447c <login_system+0x80a>
		__ticks = 1;
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	9e 83       	std	Y+6, r25	; 0x06
    4478:	8d 83       	std	Y+5, r24	; 0x05
    447a:	3f c0       	rjmp	.+126    	; 0x44fa <login_system+0x888>
	else if (__tmp > 65535)
    447c:	6f 81       	ldd	r22, Y+7	; 0x07
    447e:	78 85       	ldd	r23, Y+8	; 0x08
    4480:	89 85       	ldd	r24, Y+9	; 0x09
    4482:	9a 85       	ldd	r25, Y+10	; 0x0a
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	3f ef       	ldi	r19, 0xFF	; 255
    4488:	4f e7       	ldi	r20, 0x7F	; 127
    448a:	57 e4       	ldi	r21, 0x47	; 71
    448c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4490:	18 16       	cp	r1, r24
    4492:	4c f5       	brge	.+82     	; 0x44e6 <login_system+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4494:	6b 85       	ldd	r22, Y+11	; 0x0b
    4496:	7c 85       	ldd	r23, Y+12	; 0x0c
    4498:	8d 85       	ldd	r24, Y+13	; 0x0d
    449a:	9e 85       	ldd	r25, Y+14	; 0x0e
    449c:	20 e0       	ldi	r18, 0x00	; 0
    449e:	30 e0       	ldi	r19, 0x00	; 0
    44a0:	40 e2       	ldi	r20, 0x20	; 32
    44a2:	51 e4       	ldi	r21, 0x41	; 65
    44a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a8:	dc 01       	movw	r26, r24
    44aa:	cb 01       	movw	r24, r22
    44ac:	bc 01       	movw	r22, r24
    44ae:	cd 01       	movw	r24, r26
    44b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44b4:	dc 01       	movw	r26, r24
    44b6:	cb 01       	movw	r24, r22
    44b8:	9e 83       	std	Y+6, r25	; 0x06
    44ba:	8d 83       	std	Y+5, r24	; 0x05
    44bc:	0f c0       	rjmp	.+30     	; 0x44dc <login_system+0x86a>
    44be:	88 ec       	ldi	r24, 0xC8	; 200
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	9c 83       	std	Y+4, r25	; 0x04
    44c4:	8b 83       	std	Y+3, r24	; 0x03
    44c6:	8b 81       	ldd	r24, Y+3	; 0x03
    44c8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	f1 f7       	brne	.-4      	; 0x44ca <login_system+0x858>
    44ce:	9c 83       	std	Y+4, r25	; 0x04
    44d0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44d2:	8d 81       	ldd	r24, Y+5	; 0x05
    44d4:	9e 81       	ldd	r25, Y+6	; 0x06
    44d6:	01 97       	sbiw	r24, 0x01	; 1
    44d8:	9e 83       	std	Y+6, r25	; 0x06
    44da:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44dc:	8d 81       	ldd	r24, Y+5	; 0x05
    44de:	9e 81       	ldd	r25, Y+6	; 0x06
    44e0:	00 97       	sbiw	r24, 0x00	; 0
    44e2:	69 f7       	brne	.-38     	; 0x44be <login_system+0x84c>
    44e4:	14 c0       	rjmp	.+40     	; 0x450e <login_system+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44e6:	6f 81       	ldd	r22, Y+7	; 0x07
    44e8:	78 85       	ldd	r23, Y+8	; 0x08
    44ea:	89 85       	ldd	r24, Y+9	; 0x09
    44ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44f2:	dc 01       	movw	r26, r24
    44f4:	cb 01       	movw	r24, r22
    44f6:	9e 83       	std	Y+6, r25	; 0x06
    44f8:	8d 83       	std	Y+5, r24	; 0x05
    44fa:	8d 81       	ldd	r24, Y+5	; 0x05
    44fc:	9e 81       	ldd	r25, Y+6	; 0x06
    44fe:	9a 83       	std	Y+2, r25	; 0x02
    4500:	89 83       	std	Y+1, r24	; 0x01
    4502:	89 81       	ldd	r24, Y+1	; 0x01
    4504:	9a 81       	ldd	r25, Y+2	; 0x02
    4506:	01 97       	sbiw	r24, 0x01	; 1
    4508:	f1 f7       	brne	.-4      	; 0x4506 <login_system+0x894>
    450a:	9a 83       	std	Y+2, r25	; 0x02
    450c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			LCD_voidWriteString((u8*)"Failed Login ");
    450e:	82 e1       	ldi	r24, 0x12	; 18
    4510:	91 e0       	ldi	r25, 0x01	; 1
    4512:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
			*flag = 0;
    4516:	fe 01       	movw	r30, r28
    4518:	e9 59       	subi	r30, 0x99	; 153
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	01 90       	ld	r0, Z+
    451e:	f0 81       	ld	r31, Z
    4520:	e0 2d       	mov	r30, r0
    4522:	10 82       	st	Z, r1
			break;
		}
	}
}
    4524:	c8 59       	subi	r28, 0x98	; 152
    4526:	df 4f       	sbci	r29, 0xFF	; 255
    4528:	0f b6       	in	r0, 0x3f	; 63
    452a:	f8 94       	cli
    452c:	de bf       	out	0x3e, r29	; 62
    452e:	0f be       	out	0x3f, r0	; 63
    4530:	cd bf       	out	0x3d, r28	; 61
    4532:	cf 91       	pop	r28
    4534:	df 91       	pop	r29
    4536:	1f 91       	pop	r17
    4538:	0f 91       	pop	r16
    453a:	08 95       	ret

0000453c <STEPPER_u8Move>:
#include "STEPPER_interface.h"
#include "STEPPER_config.h"
#include "STEPPER_private.h"

u8 STEPPER_u8Move(u8 direction , u16 angle) // two phase excitation
{
    453c:	0f 93       	push	r16
    453e:	1f 93       	push	r17
    4540:	df 93       	push	r29
    4542:	cf 93       	push	r28
    4544:	cd b7       	in	r28, 0x3d	; 61
    4546:	de b7       	in	r29, 0x3e	; 62
    4548:	c9 57       	subi	r28, 0x79	; 121
    454a:	d0 40       	sbci	r29, 0x00	; 0
    454c:	0f b6       	in	r0, 0x3f	; 63
    454e:	f8 94       	cli
    4550:	de bf       	out	0x3e, r29	; 62
    4552:	0f be       	out	0x3f, r0	; 63
    4554:	cd bf       	out	0x3d, r28	; 61
    4556:	fe 01       	movw	r30, r28
    4558:	e9 58       	subi	r30, 0x89	; 137
    455a:	ff 4f       	sbci	r31, 0xFF	; 255
    455c:	80 83       	st	Z, r24
    455e:	fe 01       	movw	r30, r28
    4560:	e8 58       	subi	r30, 0x88	; 136
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	71 83       	std	Z+1, r23	; 0x01
    4566:	60 83       	st	Z, r22
	u8 Local_u8ErrorState = STD_TYPES_OK;
    4568:	fe 01       	movw	r30, r28
    456a:	ea 58       	subi	r30, 0x8A	; 138
    456c:	ff 4f       	sbci	r31, 0xFF	; 255
    456e:	81 e0       	ldi	r24, 0x01	; 1
    4570:	80 83       	st	Z, r24
	// Step Angle = 0.5 deg so No of steps for full step = 360/0.5 = 720
	u32 Local_u8NoOfiterations = (((u32) angle * 720) / (360 * 4)) ; // ((angle * 720) / (360*4))
    4572:	fe 01       	movw	r30, r28
    4574:	e8 58       	subi	r30, 0x88	; 136
    4576:	ff 4f       	sbci	r31, 0xFF	; 255
    4578:	80 81       	ld	r24, Z
    457a:	91 81       	ldd	r25, Z+1	; 0x01
    457c:	cc 01       	movw	r24, r24
    457e:	a0 e0       	ldi	r26, 0x00	; 0
    4580:	b0 e0       	ldi	r27, 0x00	; 0
    4582:	20 ed       	ldi	r18, 0xD0	; 208
    4584:	32 e0       	ldi	r19, 0x02	; 2
    4586:	40 e0       	ldi	r20, 0x00	; 0
    4588:	50 e0       	ldi	r21, 0x00	; 0
    458a:	bc 01       	movw	r22, r24
    458c:	cd 01       	movw	r24, r26
    458e:	0e 94 bf 2b 	call	0x577e	; 0x577e <__mulsi3>
    4592:	dc 01       	movw	r26, r24
    4594:	cb 01       	movw	r24, r22
    4596:	8e 01       	movw	r16, r28
    4598:	0e 58       	subi	r16, 0x8E	; 142
    459a:	1f 4f       	sbci	r17, 0xFF	; 255
    459c:	20 ea       	ldi	r18, 0xA0	; 160
    459e:	35 e0       	ldi	r19, 0x05	; 5
    45a0:	40 e0       	ldi	r20, 0x00	; 0
    45a2:	50 e0       	ldi	r21, 0x00	; 0
    45a4:	bc 01       	movw	r22, r24
    45a6:	cd 01       	movw	r24, r26
    45a8:	0e 94 de 2b 	call	0x57bc	; 0x57bc <__udivmodsi4>
    45ac:	da 01       	movw	r26, r20
    45ae:	c9 01       	movw	r24, r18
    45b0:	f8 01       	movw	r30, r16
    45b2:	80 83       	st	Z, r24
    45b4:	91 83       	std	Z+1, r25	; 0x01
    45b6:	a2 83       	std	Z+2, r26	; 0x02
    45b8:	b3 83       	std	Z+3, r27	; 0x03
	u8 i;
#if STEPPER_u8_MODE == STEPPER_u8_DOUBLE_PHASE
	if(direction == STEPPER_u8_CCW)
    45ba:	fe 01       	movw	r30, r28
    45bc:	e9 58       	subi	r30, 0x89	; 137
    45be:	ff 4f       	sbci	r31, 0xFF	; 255
    45c0:	80 81       	ld	r24, Z
    45c2:	82 30       	cpi	r24, 0x02	; 2
    45c4:	09 f0       	breq	.+2      	; 0x45c8 <STEPPER_u8Move+0x8c>
    45c6:	12 c3       	rjmp	.+1572   	; 0x4bec <STEPPER_u8Move+0x6b0>
	{
		for(i = 0; i < Local_u8NoOfiterations;i++)
    45c8:	fe 01       	movw	r30, r28
    45ca:	ef 58       	subi	r30, 0x8F	; 143
    45cc:	ff 4f       	sbci	r31, 0xFF	; 255
    45ce:	10 82       	st	Z, r1
    45d0:	f7 c2       	rjmp	.+1518   	; 0x4bc0 <STEPPER_u8Move+0x684>
		{
			//Step 1 0x03 --> - step angle * 1
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	60 e0       	ldi	r22, 0x00	; 0
    45d6:	41 e0       	ldi	r20, 0x01	; 1
    45d8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	61 e0       	ldi	r22, 0x01	; 1
    45e0:	41 e0       	ldi	r20, 0x01	; 1
    45e2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	62 e0       	ldi	r22, 0x02	; 2
    45ea:	40 e0       	ldi	r20, 0x00	; 0
    45ec:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    45f0:	81 e0       	ldi	r24, 0x01	; 1
    45f2:	63 e0       	ldi	r22, 0x03	; 3
    45f4:	40 e0       	ldi	r20, 0x00	; 0
    45f6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    45fa:	fe 01       	movw	r30, r28
    45fc:	e3 59       	subi	r30, 0x93	; 147
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	a8 ec       	ldi	r26, 0xC8	; 200
    4606:	b2 e4       	ldi	r27, 0x42	; 66
    4608:	80 83       	st	Z, r24
    460a:	91 83       	std	Z+1, r25	; 0x01
    460c:	a2 83       	std	Z+2, r26	; 0x02
    460e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4610:	8e 01       	movw	r16, r28
    4612:	07 59       	subi	r16, 0x97	; 151
    4614:	1f 4f       	sbci	r17, 0xFF	; 255
    4616:	fe 01       	movw	r30, r28
    4618:	e3 59       	subi	r30, 0x93	; 147
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	60 81       	ld	r22, Z
    461e:	71 81       	ldd	r23, Z+1	; 0x01
    4620:	82 81       	ldd	r24, Z+2	; 0x02
    4622:	93 81       	ldd	r25, Z+3	; 0x03
    4624:	20 e0       	ldi	r18, 0x00	; 0
    4626:	30 e0       	ldi	r19, 0x00	; 0
    4628:	4a ef       	ldi	r20, 0xFA	; 250
    462a:	54 e4       	ldi	r21, 0x44	; 68
    462c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4630:	dc 01       	movw	r26, r24
    4632:	cb 01       	movw	r24, r22
    4634:	f8 01       	movw	r30, r16
    4636:	80 83       	st	Z, r24
    4638:	91 83       	std	Z+1, r25	; 0x01
    463a:	a2 83       	std	Z+2, r26	; 0x02
    463c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    463e:	fe 01       	movw	r30, r28
    4640:	e7 59       	subi	r30, 0x97	; 151
    4642:	ff 4f       	sbci	r31, 0xFF	; 255
    4644:	60 81       	ld	r22, Z
    4646:	71 81       	ldd	r23, Z+1	; 0x01
    4648:	82 81       	ldd	r24, Z+2	; 0x02
    464a:	93 81       	ldd	r25, Z+3	; 0x03
    464c:	20 e0       	ldi	r18, 0x00	; 0
    464e:	30 e0       	ldi	r19, 0x00	; 0
    4650:	40 e8       	ldi	r20, 0x80	; 128
    4652:	5f e3       	ldi	r21, 0x3F	; 63
    4654:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4658:	88 23       	and	r24, r24
    465a:	44 f4       	brge	.+16     	; 0x466c <STEPPER_u8Move+0x130>
		__ticks = 1;
    465c:	fe 01       	movw	r30, r28
    465e:	e9 59       	subi	r30, 0x99	; 153
    4660:	ff 4f       	sbci	r31, 0xFF	; 255
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	90 e0       	ldi	r25, 0x00	; 0
    4666:	91 83       	std	Z+1, r25	; 0x01
    4668:	80 83       	st	Z, r24
    466a:	64 c0       	rjmp	.+200    	; 0x4734 <STEPPER_u8Move+0x1f8>
	else if (__tmp > 65535)
    466c:	fe 01       	movw	r30, r28
    466e:	e7 59       	subi	r30, 0x97	; 151
    4670:	ff 4f       	sbci	r31, 0xFF	; 255
    4672:	60 81       	ld	r22, Z
    4674:	71 81       	ldd	r23, Z+1	; 0x01
    4676:	82 81       	ldd	r24, Z+2	; 0x02
    4678:	93 81       	ldd	r25, Z+3	; 0x03
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	3f ef       	ldi	r19, 0xFF	; 255
    467e:	4f e7       	ldi	r20, 0x7F	; 127
    4680:	57 e4       	ldi	r21, 0x47	; 71
    4682:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4686:	18 16       	cp	r1, r24
    4688:	0c f0       	brlt	.+2      	; 0x468c <STEPPER_u8Move+0x150>
    468a:	43 c0       	rjmp	.+134    	; 0x4712 <STEPPER_u8Move+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    468c:	fe 01       	movw	r30, r28
    468e:	e3 59       	subi	r30, 0x93	; 147
    4690:	ff 4f       	sbci	r31, 0xFF	; 255
    4692:	60 81       	ld	r22, Z
    4694:	71 81       	ldd	r23, Z+1	; 0x01
    4696:	82 81       	ldd	r24, Z+2	; 0x02
    4698:	93 81       	ldd	r25, Z+3	; 0x03
    469a:	20 e0       	ldi	r18, 0x00	; 0
    469c:	30 e0       	ldi	r19, 0x00	; 0
    469e:	40 e2       	ldi	r20, 0x20	; 32
    46a0:	51 e4       	ldi	r21, 0x41	; 65
    46a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46a6:	dc 01       	movw	r26, r24
    46a8:	cb 01       	movw	r24, r22
    46aa:	8e 01       	movw	r16, r28
    46ac:	09 59       	subi	r16, 0x99	; 153
    46ae:	1f 4f       	sbci	r17, 0xFF	; 255
    46b0:	bc 01       	movw	r22, r24
    46b2:	cd 01       	movw	r24, r26
    46b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b8:	dc 01       	movw	r26, r24
    46ba:	cb 01       	movw	r24, r22
    46bc:	f8 01       	movw	r30, r16
    46be:	91 83       	std	Z+1, r25	; 0x01
    46c0:	80 83       	st	Z, r24
    46c2:	1f c0       	rjmp	.+62     	; 0x4702 <STEPPER_u8Move+0x1c6>
    46c4:	fe 01       	movw	r30, r28
    46c6:	eb 59       	subi	r30, 0x9B	; 155
    46c8:	ff 4f       	sbci	r31, 0xFF	; 255
    46ca:	88 ec       	ldi	r24, 0xC8	; 200
    46cc:	90 e0       	ldi	r25, 0x00	; 0
    46ce:	91 83       	std	Z+1, r25	; 0x01
    46d0:	80 83       	st	Z, r24
    46d2:	fe 01       	movw	r30, r28
    46d4:	eb 59       	subi	r30, 0x9B	; 155
    46d6:	ff 4f       	sbci	r31, 0xFF	; 255
    46d8:	80 81       	ld	r24, Z
    46da:	91 81       	ldd	r25, Z+1	; 0x01
    46dc:	01 97       	sbiw	r24, 0x01	; 1
    46de:	f1 f7       	brne	.-4      	; 0x46dc <STEPPER_u8Move+0x1a0>
    46e0:	fe 01       	movw	r30, r28
    46e2:	eb 59       	subi	r30, 0x9B	; 155
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	91 83       	std	Z+1, r25	; 0x01
    46e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46ea:	de 01       	movw	r26, r28
    46ec:	a9 59       	subi	r26, 0x99	; 153
    46ee:	bf 4f       	sbci	r27, 0xFF	; 255
    46f0:	fe 01       	movw	r30, r28
    46f2:	e9 59       	subi	r30, 0x99	; 153
    46f4:	ff 4f       	sbci	r31, 0xFF	; 255
    46f6:	80 81       	ld	r24, Z
    46f8:	91 81       	ldd	r25, Z+1	; 0x01
    46fa:	01 97       	sbiw	r24, 0x01	; 1
    46fc:	11 96       	adiw	r26, 0x01	; 1
    46fe:	9c 93       	st	X, r25
    4700:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4702:	fe 01       	movw	r30, r28
    4704:	e9 59       	subi	r30, 0x99	; 153
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	80 81       	ld	r24, Z
    470a:	91 81       	ldd	r25, Z+1	; 0x01
    470c:	00 97       	sbiw	r24, 0x00	; 0
    470e:	d1 f6       	brne	.-76     	; 0x46c4 <STEPPER_u8Move+0x188>
    4710:	27 c0       	rjmp	.+78     	; 0x4760 <STEPPER_u8Move+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4712:	8e 01       	movw	r16, r28
    4714:	09 59       	subi	r16, 0x99	; 153
    4716:	1f 4f       	sbci	r17, 0xFF	; 255
    4718:	fe 01       	movw	r30, r28
    471a:	e7 59       	subi	r30, 0x97	; 151
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	60 81       	ld	r22, Z
    4720:	71 81       	ldd	r23, Z+1	; 0x01
    4722:	82 81       	ldd	r24, Z+2	; 0x02
    4724:	93 81       	ldd	r25, Z+3	; 0x03
    4726:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    472a:	dc 01       	movw	r26, r24
    472c:	cb 01       	movw	r24, r22
    472e:	f8 01       	movw	r30, r16
    4730:	91 83       	std	Z+1, r25	; 0x01
    4732:	80 83       	st	Z, r24
    4734:	de 01       	movw	r26, r28
    4736:	ad 59       	subi	r26, 0x9D	; 157
    4738:	bf 4f       	sbci	r27, 0xFF	; 255
    473a:	fe 01       	movw	r30, r28
    473c:	e9 59       	subi	r30, 0x99	; 153
    473e:	ff 4f       	sbci	r31, 0xFF	; 255
    4740:	80 81       	ld	r24, Z
    4742:	91 81       	ldd	r25, Z+1	; 0x01
    4744:	8d 93       	st	X+, r24
    4746:	9c 93       	st	X, r25
    4748:	fe 01       	movw	r30, r28
    474a:	ed 59       	subi	r30, 0x9D	; 157
    474c:	ff 4f       	sbci	r31, 0xFF	; 255
    474e:	80 81       	ld	r24, Z
    4750:	91 81       	ldd	r25, Z+1	; 0x01
    4752:	01 97       	sbiw	r24, 0x01	; 1
    4754:	f1 f7       	brne	.-4      	; 0x4752 <STEPPER_u8Move+0x216>
    4756:	fe 01       	movw	r30, r28
    4758:	ed 59       	subi	r30, 0x9D	; 157
    475a:	ff 4f       	sbci	r31, 0xFF	; 255
    475c:	91 83       	std	Z+1, r25	; 0x01
    475e:	80 83       	st	Z, r24
			_delay_ms(100);
			//Step 2 0x06 --> - step angle * 2
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    4760:	81 e0       	ldi	r24, 0x01	; 1
    4762:	60 e0       	ldi	r22, 0x00	; 0
    4764:	40 e0       	ldi	r20, 0x00	; 0
    4766:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	61 e0       	ldi	r22, 0x01	; 1
    476e:	41 e0       	ldi	r20, 0x01	; 1
    4770:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    4774:	81 e0       	ldi	r24, 0x01	; 1
    4776:	62 e0       	ldi	r22, 0x02	; 2
    4778:	41 e0       	ldi	r20, 0x01	; 1
    477a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    477e:	81 e0       	ldi	r24, 0x01	; 1
    4780:	63 e0       	ldi	r22, 0x03	; 3
    4782:	40 e0       	ldi	r20, 0x00	; 0
    4784:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    4788:	fe 01       	movw	r30, r28
    478a:	e1 5a       	subi	r30, 0xA1	; 161
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	80 e0       	ldi	r24, 0x00	; 0
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	a8 ec       	ldi	r26, 0xC8	; 200
    4794:	b2 e4       	ldi	r27, 0x42	; 66
    4796:	80 83       	st	Z, r24
    4798:	91 83       	std	Z+1, r25	; 0x01
    479a:	a2 83       	std	Z+2, r26	; 0x02
    479c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    479e:	8e 01       	movw	r16, r28
    47a0:	05 5a       	subi	r16, 0xA5	; 165
    47a2:	1f 4f       	sbci	r17, 0xFF	; 255
    47a4:	fe 01       	movw	r30, r28
    47a6:	e1 5a       	subi	r30, 0xA1	; 161
    47a8:	ff 4f       	sbci	r31, 0xFF	; 255
    47aa:	60 81       	ld	r22, Z
    47ac:	71 81       	ldd	r23, Z+1	; 0x01
    47ae:	82 81       	ldd	r24, Z+2	; 0x02
    47b0:	93 81       	ldd	r25, Z+3	; 0x03
    47b2:	20 e0       	ldi	r18, 0x00	; 0
    47b4:	30 e0       	ldi	r19, 0x00	; 0
    47b6:	4a ef       	ldi	r20, 0xFA	; 250
    47b8:	54 e4       	ldi	r21, 0x44	; 68
    47ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47be:	dc 01       	movw	r26, r24
    47c0:	cb 01       	movw	r24, r22
    47c2:	f8 01       	movw	r30, r16
    47c4:	80 83       	st	Z, r24
    47c6:	91 83       	std	Z+1, r25	; 0x01
    47c8:	a2 83       	std	Z+2, r26	; 0x02
    47ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    47cc:	fe 01       	movw	r30, r28
    47ce:	e5 5a       	subi	r30, 0xA5	; 165
    47d0:	ff 4f       	sbci	r31, 0xFF	; 255
    47d2:	60 81       	ld	r22, Z
    47d4:	71 81       	ldd	r23, Z+1	; 0x01
    47d6:	82 81       	ldd	r24, Z+2	; 0x02
    47d8:	93 81       	ldd	r25, Z+3	; 0x03
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	30 e0       	ldi	r19, 0x00	; 0
    47de:	40 e8       	ldi	r20, 0x80	; 128
    47e0:	5f e3       	ldi	r21, 0x3F	; 63
    47e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    47e6:	88 23       	and	r24, r24
    47e8:	44 f4       	brge	.+16     	; 0x47fa <STEPPER_u8Move+0x2be>
		__ticks = 1;
    47ea:	fe 01       	movw	r30, r28
    47ec:	e7 5a       	subi	r30, 0xA7	; 167
    47ee:	ff 4f       	sbci	r31, 0xFF	; 255
    47f0:	81 e0       	ldi	r24, 0x01	; 1
    47f2:	90 e0       	ldi	r25, 0x00	; 0
    47f4:	91 83       	std	Z+1, r25	; 0x01
    47f6:	80 83       	st	Z, r24
    47f8:	64 c0       	rjmp	.+200    	; 0x48c2 <STEPPER_u8Move+0x386>
	else if (__tmp > 65535)
    47fa:	fe 01       	movw	r30, r28
    47fc:	e5 5a       	subi	r30, 0xA5	; 165
    47fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4800:	60 81       	ld	r22, Z
    4802:	71 81       	ldd	r23, Z+1	; 0x01
    4804:	82 81       	ldd	r24, Z+2	; 0x02
    4806:	93 81       	ldd	r25, Z+3	; 0x03
    4808:	20 e0       	ldi	r18, 0x00	; 0
    480a:	3f ef       	ldi	r19, 0xFF	; 255
    480c:	4f e7       	ldi	r20, 0x7F	; 127
    480e:	57 e4       	ldi	r21, 0x47	; 71
    4810:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4814:	18 16       	cp	r1, r24
    4816:	0c f0       	brlt	.+2      	; 0x481a <STEPPER_u8Move+0x2de>
    4818:	43 c0       	rjmp	.+134    	; 0x48a0 <STEPPER_u8Move+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    481a:	fe 01       	movw	r30, r28
    481c:	e1 5a       	subi	r30, 0xA1	; 161
    481e:	ff 4f       	sbci	r31, 0xFF	; 255
    4820:	60 81       	ld	r22, Z
    4822:	71 81       	ldd	r23, Z+1	; 0x01
    4824:	82 81       	ldd	r24, Z+2	; 0x02
    4826:	93 81       	ldd	r25, Z+3	; 0x03
    4828:	20 e0       	ldi	r18, 0x00	; 0
    482a:	30 e0       	ldi	r19, 0x00	; 0
    482c:	40 e2       	ldi	r20, 0x20	; 32
    482e:	51 e4       	ldi	r21, 0x41	; 65
    4830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4834:	dc 01       	movw	r26, r24
    4836:	cb 01       	movw	r24, r22
    4838:	8e 01       	movw	r16, r28
    483a:	07 5a       	subi	r16, 0xA7	; 167
    483c:	1f 4f       	sbci	r17, 0xFF	; 255
    483e:	bc 01       	movw	r22, r24
    4840:	cd 01       	movw	r24, r26
    4842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4846:	dc 01       	movw	r26, r24
    4848:	cb 01       	movw	r24, r22
    484a:	f8 01       	movw	r30, r16
    484c:	91 83       	std	Z+1, r25	; 0x01
    484e:	80 83       	st	Z, r24
    4850:	1f c0       	rjmp	.+62     	; 0x4890 <STEPPER_u8Move+0x354>
    4852:	fe 01       	movw	r30, r28
    4854:	e9 5a       	subi	r30, 0xA9	; 169
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	88 ec       	ldi	r24, 0xC8	; 200
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	91 83       	std	Z+1, r25	; 0x01
    485e:	80 83       	st	Z, r24
    4860:	fe 01       	movw	r30, r28
    4862:	e9 5a       	subi	r30, 0xA9	; 169
    4864:	ff 4f       	sbci	r31, 0xFF	; 255
    4866:	80 81       	ld	r24, Z
    4868:	91 81       	ldd	r25, Z+1	; 0x01
    486a:	01 97       	sbiw	r24, 0x01	; 1
    486c:	f1 f7       	brne	.-4      	; 0x486a <STEPPER_u8Move+0x32e>
    486e:	fe 01       	movw	r30, r28
    4870:	e9 5a       	subi	r30, 0xA9	; 169
    4872:	ff 4f       	sbci	r31, 0xFF	; 255
    4874:	91 83       	std	Z+1, r25	; 0x01
    4876:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4878:	de 01       	movw	r26, r28
    487a:	a7 5a       	subi	r26, 0xA7	; 167
    487c:	bf 4f       	sbci	r27, 0xFF	; 255
    487e:	fe 01       	movw	r30, r28
    4880:	e7 5a       	subi	r30, 0xA7	; 167
    4882:	ff 4f       	sbci	r31, 0xFF	; 255
    4884:	80 81       	ld	r24, Z
    4886:	91 81       	ldd	r25, Z+1	; 0x01
    4888:	01 97       	sbiw	r24, 0x01	; 1
    488a:	11 96       	adiw	r26, 0x01	; 1
    488c:	9c 93       	st	X, r25
    488e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4890:	fe 01       	movw	r30, r28
    4892:	e7 5a       	subi	r30, 0xA7	; 167
    4894:	ff 4f       	sbci	r31, 0xFF	; 255
    4896:	80 81       	ld	r24, Z
    4898:	91 81       	ldd	r25, Z+1	; 0x01
    489a:	00 97       	sbiw	r24, 0x00	; 0
    489c:	d1 f6       	brne	.-76     	; 0x4852 <STEPPER_u8Move+0x316>
    489e:	27 c0       	rjmp	.+78     	; 0x48ee <STEPPER_u8Move+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48a0:	8e 01       	movw	r16, r28
    48a2:	07 5a       	subi	r16, 0xA7	; 167
    48a4:	1f 4f       	sbci	r17, 0xFF	; 255
    48a6:	fe 01       	movw	r30, r28
    48a8:	e5 5a       	subi	r30, 0xA5	; 165
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	60 81       	ld	r22, Z
    48ae:	71 81       	ldd	r23, Z+1	; 0x01
    48b0:	82 81       	ldd	r24, Z+2	; 0x02
    48b2:	93 81       	ldd	r25, Z+3	; 0x03
    48b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b8:	dc 01       	movw	r26, r24
    48ba:	cb 01       	movw	r24, r22
    48bc:	f8 01       	movw	r30, r16
    48be:	91 83       	std	Z+1, r25	; 0x01
    48c0:	80 83       	st	Z, r24
    48c2:	de 01       	movw	r26, r28
    48c4:	ab 5a       	subi	r26, 0xAB	; 171
    48c6:	bf 4f       	sbci	r27, 0xFF	; 255
    48c8:	fe 01       	movw	r30, r28
    48ca:	e7 5a       	subi	r30, 0xA7	; 167
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	80 81       	ld	r24, Z
    48d0:	91 81       	ldd	r25, Z+1	; 0x01
    48d2:	8d 93       	st	X+, r24
    48d4:	9c 93       	st	X, r25
    48d6:	fe 01       	movw	r30, r28
    48d8:	eb 5a       	subi	r30, 0xAB	; 171
    48da:	ff 4f       	sbci	r31, 0xFF	; 255
    48dc:	80 81       	ld	r24, Z
    48de:	91 81       	ldd	r25, Z+1	; 0x01
    48e0:	01 97       	sbiw	r24, 0x01	; 1
    48e2:	f1 f7       	brne	.-4      	; 0x48e0 <STEPPER_u8Move+0x3a4>
    48e4:	fe 01       	movw	r30, r28
    48e6:	eb 5a       	subi	r30, 0xAB	; 171
    48e8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ea:	91 83       	std	Z+1, r25	; 0x01
    48ec:	80 83       	st	Z, r24
			_delay_ms(100);
			//Step 1 0x0C --> - step angle * 3
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    48ee:	81 e0       	ldi	r24, 0x01	; 1
    48f0:	60 e0       	ldi	r22, 0x00	; 0
    48f2:	40 e0       	ldi	r20, 0x00	; 0
    48f4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    48f8:	81 e0       	ldi	r24, 0x01	; 1
    48fa:	61 e0       	ldi	r22, 0x01	; 1
    48fc:	40 e0       	ldi	r20, 0x00	; 0
    48fe:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    4902:	81 e0       	ldi	r24, 0x01	; 1
    4904:	62 e0       	ldi	r22, 0x02	; 2
    4906:	41 e0       	ldi	r20, 0x01	; 1
    4908:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    490c:	81 e0       	ldi	r24, 0x01	; 1
    490e:	63 e0       	ldi	r22, 0x03	; 3
    4910:	41 e0       	ldi	r20, 0x01	; 1
    4912:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    4916:	fe 01       	movw	r30, r28
    4918:	ef 5a       	subi	r30, 0xAF	; 175
    491a:	ff 4f       	sbci	r31, 0xFF	; 255
    491c:	80 e0       	ldi	r24, 0x00	; 0
    491e:	90 e0       	ldi	r25, 0x00	; 0
    4920:	a8 ec       	ldi	r26, 0xC8	; 200
    4922:	b2 e4       	ldi	r27, 0x42	; 66
    4924:	80 83       	st	Z, r24
    4926:	91 83       	std	Z+1, r25	; 0x01
    4928:	a2 83       	std	Z+2, r26	; 0x02
    492a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    492c:	8e 01       	movw	r16, r28
    492e:	03 5b       	subi	r16, 0xB3	; 179
    4930:	1f 4f       	sbci	r17, 0xFF	; 255
    4932:	fe 01       	movw	r30, r28
    4934:	ef 5a       	subi	r30, 0xAF	; 175
    4936:	ff 4f       	sbci	r31, 0xFF	; 255
    4938:	60 81       	ld	r22, Z
    493a:	71 81       	ldd	r23, Z+1	; 0x01
    493c:	82 81       	ldd	r24, Z+2	; 0x02
    493e:	93 81       	ldd	r25, Z+3	; 0x03
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	4a ef       	ldi	r20, 0xFA	; 250
    4946:	54 e4       	ldi	r21, 0x44	; 68
    4948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    494c:	dc 01       	movw	r26, r24
    494e:	cb 01       	movw	r24, r22
    4950:	f8 01       	movw	r30, r16
    4952:	80 83       	st	Z, r24
    4954:	91 83       	std	Z+1, r25	; 0x01
    4956:	a2 83       	std	Z+2, r26	; 0x02
    4958:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    495a:	fe 01       	movw	r30, r28
    495c:	e3 5b       	subi	r30, 0xB3	; 179
    495e:	ff 4f       	sbci	r31, 0xFF	; 255
    4960:	60 81       	ld	r22, Z
    4962:	71 81       	ldd	r23, Z+1	; 0x01
    4964:	82 81       	ldd	r24, Z+2	; 0x02
    4966:	93 81       	ldd	r25, Z+3	; 0x03
    4968:	20 e0       	ldi	r18, 0x00	; 0
    496a:	30 e0       	ldi	r19, 0x00	; 0
    496c:	40 e8       	ldi	r20, 0x80	; 128
    496e:	5f e3       	ldi	r21, 0x3F	; 63
    4970:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4974:	88 23       	and	r24, r24
    4976:	44 f4       	brge	.+16     	; 0x4988 <STEPPER_u8Move+0x44c>
		__ticks = 1;
    4978:	fe 01       	movw	r30, r28
    497a:	e5 5b       	subi	r30, 0xB5	; 181
    497c:	ff 4f       	sbci	r31, 0xFF	; 255
    497e:	81 e0       	ldi	r24, 0x01	; 1
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	91 83       	std	Z+1, r25	; 0x01
    4984:	80 83       	st	Z, r24
    4986:	64 c0       	rjmp	.+200    	; 0x4a50 <STEPPER_u8Move+0x514>
	else if (__tmp > 65535)
    4988:	fe 01       	movw	r30, r28
    498a:	e3 5b       	subi	r30, 0xB3	; 179
    498c:	ff 4f       	sbci	r31, 0xFF	; 255
    498e:	60 81       	ld	r22, Z
    4990:	71 81       	ldd	r23, Z+1	; 0x01
    4992:	82 81       	ldd	r24, Z+2	; 0x02
    4994:	93 81       	ldd	r25, Z+3	; 0x03
    4996:	20 e0       	ldi	r18, 0x00	; 0
    4998:	3f ef       	ldi	r19, 0xFF	; 255
    499a:	4f e7       	ldi	r20, 0x7F	; 127
    499c:	57 e4       	ldi	r21, 0x47	; 71
    499e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49a2:	18 16       	cp	r1, r24
    49a4:	0c f0       	brlt	.+2      	; 0x49a8 <STEPPER_u8Move+0x46c>
    49a6:	43 c0       	rjmp	.+134    	; 0x4a2e <STEPPER_u8Move+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49a8:	fe 01       	movw	r30, r28
    49aa:	ef 5a       	subi	r30, 0xAF	; 175
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	60 81       	ld	r22, Z
    49b0:	71 81       	ldd	r23, Z+1	; 0x01
    49b2:	82 81       	ldd	r24, Z+2	; 0x02
    49b4:	93 81       	ldd	r25, Z+3	; 0x03
    49b6:	20 e0       	ldi	r18, 0x00	; 0
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	40 e2       	ldi	r20, 0x20	; 32
    49bc:	51 e4       	ldi	r21, 0x41	; 65
    49be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	8e 01       	movw	r16, r28
    49c8:	05 5b       	subi	r16, 0xB5	; 181
    49ca:	1f 4f       	sbci	r17, 0xFF	; 255
    49cc:	bc 01       	movw	r22, r24
    49ce:	cd 01       	movw	r24, r26
    49d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49d4:	dc 01       	movw	r26, r24
    49d6:	cb 01       	movw	r24, r22
    49d8:	f8 01       	movw	r30, r16
    49da:	91 83       	std	Z+1, r25	; 0x01
    49dc:	80 83       	st	Z, r24
    49de:	1f c0       	rjmp	.+62     	; 0x4a1e <STEPPER_u8Move+0x4e2>
    49e0:	fe 01       	movw	r30, r28
    49e2:	e7 5b       	subi	r30, 0xB7	; 183
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	88 ec       	ldi	r24, 0xC8	; 200
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	91 83       	std	Z+1, r25	; 0x01
    49ec:	80 83       	st	Z, r24
    49ee:	fe 01       	movw	r30, r28
    49f0:	e7 5b       	subi	r30, 0xB7	; 183
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	80 81       	ld	r24, Z
    49f6:	91 81       	ldd	r25, Z+1	; 0x01
    49f8:	01 97       	sbiw	r24, 0x01	; 1
    49fa:	f1 f7       	brne	.-4      	; 0x49f8 <STEPPER_u8Move+0x4bc>
    49fc:	fe 01       	movw	r30, r28
    49fe:	e7 5b       	subi	r30, 0xB7	; 183
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	91 83       	std	Z+1, r25	; 0x01
    4a04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a06:	de 01       	movw	r26, r28
    4a08:	a5 5b       	subi	r26, 0xB5	; 181
    4a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a0c:	fe 01       	movw	r30, r28
    4a0e:	e5 5b       	subi	r30, 0xB5	; 181
    4a10:	ff 4f       	sbci	r31, 0xFF	; 255
    4a12:	80 81       	ld	r24, Z
    4a14:	91 81       	ldd	r25, Z+1	; 0x01
    4a16:	01 97       	sbiw	r24, 0x01	; 1
    4a18:	11 96       	adiw	r26, 0x01	; 1
    4a1a:	9c 93       	st	X, r25
    4a1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e5 5b       	subi	r30, 0xB5	; 181
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	80 81       	ld	r24, Z
    4a26:	91 81       	ldd	r25, Z+1	; 0x01
    4a28:	00 97       	sbiw	r24, 0x00	; 0
    4a2a:	d1 f6       	brne	.-76     	; 0x49e0 <STEPPER_u8Move+0x4a4>
    4a2c:	27 c0       	rjmp	.+78     	; 0x4a7c <STEPPER_u8Move+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a2e:	8e 01       	movw	r16, r28
    4a30:	05 5b       	subi	r16, 0xB5	; 181
    4a32:	1f 4f       	sbci	r17, 0xFF	; 255
    4a34:	fe 01       	movw	r30, r28
    4a36:	e3 5b       	subi	r30, 0xB3	; 179
    4a38:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3a:	60 81       	ld	r22, Z
    4a3c:	71 81       	ldd	r23, Z+1	; 0x01
    4a3e:	82 81       	ldd	r24, Z+2	; 0x02
    4a40:	93 81       	ldd	r25, Z+3	; 0x03
    4a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a46:	dc 01       	movw	r26, r24
    4a48:	cb 01       	movw	r24, r22
    4a4a:	f8 01       	movw	r30, r16
    4a4c:	91 83       	std	Z+1, r25	; 0x01
    4a4e:	80 83       	st	Z, r24
    4a50:	de 01       	movw	r26, r28
    4a52:	a9 5b       	subi	r26, 0xB9	; 185
    4a54:	bf 4f       	sbci	r27, 0xFF	; 255
    4a56:	fe 01       	movw	r30, r28
    4a58:	e5 5b       	subi	r30, 0xB5	; 181
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	80 81       	ld	r24, Z
    4a5e:	91 81       	ldd	r25, Z+1	; 0x01
    4a60:	8d 93       	st	X+, r24
    4a62:	9c 93       	st	X, r25
    4a64:	fe 01       	movw	r30, r28
    4a66:	e9 5b       	subi	r30, 0xB9	; 185
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	01 97       	sbiw	r24, 0x01	; 1
    4a70:	f1 f7       	brne	.-4      	; 0x4a6e <STEPPER_u8Move+0x532>
    4a72:	fe 01       	movw	r30, r28
    4a74:	e9 5b       	subi	r30, 0xB9	; 185
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	91 83       	std	Z+1, r25	; 0x01
    4a7a:	80 83       	st	Z, r24
			_delay_ms(100);
			//Step 4 0x09 --> - step angle * 4
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    4a7c:	81 e0       	ldi	r24, 0x01	; 1
    4a7e:	60 e0       	ldi	r22, 0x00	; 0
    4a80:	41 e0       	ldi	r20, 0x01	; 1
    4a82:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	61 e0       	ldi	r22, 0x01	; 1
    4a8a:	40 e0       	ldi	r20, 0x00	; 0
    4a8c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	62 e0       	ldi	r22, 0x02	; 2
    4a94:	40 e0       	ldi	r20, 0x00	; 0
    4a96:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    4a9a:	81 e0       	ldi	r24, 0x01	; 1
    4a9c:	63 e0       	ldi	r22, 0x03	; 3
    4a9e:	41 e0       	ldi	r20, 0x01	; 1
    4aa0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    4aa4:	fe 01       	movw	r30, r28
    4aa6:	ed 5b       	subi	r30, 0xBD	; 189
    4aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	a8 ec       	ldi	r26, 0xC8	; 200
    4ab0:	b2 e4       	ldi	r27, 0x42	; 66
    4ab2:	80 83       	st	Z, r24
    4ab4:	91 83       	std	Z+1, r25	; 0x01
    4ab6:	a2 83       	std	Z+2, r26	; 0x02
    4ab8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aba:	8e 01       	movw	r16, r28
    4abc:	01 5c       	subi	r16, 0xC1	; 193
    4abe:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac0:	fe 01       	movw	r30, r28
    4ac2:	ed 5b       	subi	r30, 0xBD	; 189
    4ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ac6:	60 81       	ld	r22, Z
    4ac8:	71 81       	ldd	r23, Z+1	; 0x01
    4aca:	82 81       	ldd	r24, Z+2	; 0x02
    4acc:	93 81       	ldd	r25, Z+3	; 0x03
    4ace:	20 e0       	ldi	r18, 0x00	; 0
    4ad0:	30 e0       	ldi	r19, 0x00	; 0
    4ad2:	4a ef       	ldi	r20, 0xFA	; 250
    4ad4:	54 e4       	ldi	r21, 0x44	; 68
    4ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ada:	dc 01       	movw	r26, r24
    4adc:	cb 01       	movw	r24, r22
    4ade:	f8 01       	movw	r30, r16
    4ae0:	80 83       	st	Z, r24
    4ae2:	91 83       	std	Z+1, r25	; 0x01
    4ae4:	a2 83       	std	Z+2, r26	; 0x02
    4ae6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ae8:	fe 01       	movw	r30, r28
    4aea:	ff 96       	adiw	r30, 0x3f	; 63
    4aec:	60 81       	ld	r22, Z
    4aee:	71 81       	ldd	r23, Z+1	; 0x01
    4af0:	82 81       	ldd	r24, Z+2	; 0x02
    4af2:	93 81       	ldd	r25, Z+3	; 0x03
    4af4:	20 e0       	ldi	r18, 0x00	; 0
    4af6:	30 e0       	ldi	r19, 0x00	; 0
    4af8:	40 e8       	ldi	r20, 0x80	; 128
    4afa:	5f e3       	ldi	r21, 0x3F	; 63
    4afc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b00:	88 23       	and	r24, r24
    4b02:	2c f4       	brge	.+10     	; 0x4b0e <STEPPER_u8Move+0x5d2>
		__ticks = 1;
    4b04:	81 e0       	ldi	r24, 0x01	; 1
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	9e af       	std	Y+62, r25	; 0x3e
    4b0a:	8d af       	std	Y+61, r24	; 0x3d
    4b0c:	46 c0       	rjmp	.+140    	; 0x4b9a <STEPPER_u8Move+0x65e>
	else if (__tmp > 65535)
    4b0e:	fe 01       	movw	r30, r28
    4b10:	ff 96       	adiw	r30, 0x3f	; 63
    4b12:	60 81       	ld	r22, Z
    4b14:	71 81       	ldd	r23, Z+1	; 0x01
    4b16:	82 81       	ldd	r24, Z+2	; 0x02
    4b18:	93 81       	ldd	r25, Z+3	; 0x03
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	3f ef       	ldi	r19, 0xFF	; 255
    4b1e:	4f e7       	ldi	r20, 0x7F	; 127
    4b20:	57 e4       	ldi	r21, 0x47	; 71
    4b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b26:	18 16       	cp	r1, r24
    4b28:	64 f5       	brge	.+88     	; 0x4b82 <STEPPER_u8Move+0x646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b2a:	fe 01       	movw	r30, r28
    4b2c:	ed 5b       	subi	r30, 0xBD	; 189
    4b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b30:	60 81       	ld	r22, Z
    4b32:	71 81       	ldd	r23, Z+1	; 0x01
    4b34:	82 81       	ldd	r24, Z+2	; 0x02
    4b36:	93 81       	ldd	r25, Z+3	; 0x03
    4b38:	20 e0       	ldi	r18, 0x00	; 0
    4b3a:	30 e0       	ldi	r19, 0x00	; 0
    4b3c:	40 e2       	ldi	r20, 0x20	; 32
    4b3e:	51 e4       	ldi	r21, 0x41	; 65
    4b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b44:	dc 01       	movw	r26, r24
    4b46:	cb 01       	movw	r24, r22
    4b48:	bc 01       	movw	r22, r24
    4b4a:	cd 01       	movw	r24, r26
    4b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b50:	dc 01       	movw	r26, r24
    4b52:	cb 01       	movw	r24, r22
    4b54:	9e af       	std	Y+62, r25	; 0x3e
    4b56:	8d af       	std	Y+61, r24	; 0x3d
    4b58:	0f c0       	rjmp	.+30     	; 0x4b78 <STEPPER_u8Move+0x63c>
    4b5a:	88 ec       	ldi	r24, 0xC8	; 200
    4b5c:	90 e0       	ldi	r25, 0x00	; 0
    4b5e:	9c af       	std	Y+60, r25	; 0x3c
    4b60:	8b af       	std	Y+59, r24	; 0x3b
    4b62:	8b ad       	ldd	r24, Y+59	; 0x3b
    4b64:	9c ad       	ldd	r25, Y+60	; 0x3c
    4b66:	01 97       	sbiw	r24, 0x01	; 1
    4b68:	f1 f7       	brne	.-4      	; 0x4b66 <STEPPER_u8Move+0x62a>
    4b6a:	9c af       	std	Y+60, r25	; 0x3c
    4b6c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b70:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b72:	01 97       	sbiw	r24, 0x01	; 1
    4b74:	9e af       	std	Y+62, r25	; 0x3e
    4b76:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b78:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b7c:	00 97       	sbiw	r24, 0x00	; 0
    4b7e:	69 f7       	brne	.-38     	; 0x4b5a <STEPPER_u8Move+0x61e>
    4b80:	16 c0       	rjmp	.+44     	; 0x4bae <STEPPER_u8Move+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b82:	fe 01       	movw	r30, r28
    4b84:	ff 96       	adiw	r30, 0x3f	; 63
    4b86:	60 81       	ld	r22, Z
    4b88:	71 81       	ldd	r23, Z+1	; 0x01
    4b8a:	82 81       	ldd	r24, Z+2	; 0x02
    4b8c:	93 81       	ldd	r25, Z+3	; 0x03
    4b8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b92:	dc 01       	movw	r26, r24
    4b94:	cb 01       	movw	r24, r22
    4b96:	9e af       	std	Y+62, r25	; 0x3e
    4b98:	8d af       	std	Y+61, r24	; 0x3d
    4b9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    4b9c:	9e ad       	ldd	r25, Y+62	; 0x3e
    4b9e:	9a af       	std	Y+58, r25	; 0x3a
    4ba0:	89 af       	std	Y+57, r24	; 0x39
    4ba2:	89 ad       	ldd	r24, Y+57	; 0x39
    4ba4:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ba6:	01 97       	sbiw	r24, 0x01	; 1
    4ba8:	f1 f7       	brne	.-4      	; 0x4ba6 <STEPPER_u8Move+0x66a>
    4baa:	9a af       	std	Y+58, r25	; 0x3a
    4bac:	89 af       	std	Y+57, r24	; 0x39
	u32 Local_u8NoOfiterations = (((u32) angle * 720) / (360 * 4)) ; // ((angle * 720) / (360*4))
	u8 i;
#if STEPPER_u8_MODE == STEPPER_u8_DOUBLE_PHASE
	if(direction == STEPPER_u8_CCW)
	{
		for(i = 0; i < Local_u8NoOfiterations;i++)
    4bae:	de 01       	movw	r26, r28
    4bb0:	af 58       	subi	r26, 0x8F	; 143
    4bb2:	bf 4f       	sbci	r27, 0xFF	; 255
    4bb4:	fe 01       	movw	r30, r28
    4bb6:	ef 58       	subi	r30, 0x8F	; 143
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bba:	80 81       	ld	r24, Z
    4bbc:	8f 5f       	subi	r24, 0xFF	; 255
    4bbe:	8c 93       	st	X, r24
    4bc0:	fe 01       	movw	r30, r28
    4bc2:	ef 58       	subi	r30, 0x8F	; 143
    4bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc6:	80 81       	ld	r24, Z
    4bc8:	28 2f       	mov	r18, r24
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	40 e0       	ldi	r20, 0x00	; 0
    4bce:	50 e0       	ldi	r21, 0x00	; 0
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	ee 58       	subi	r30, 0x8E	; 142
    4bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd6:	80 81       	ld	r24, Z
    4bd8:	91 81       	ldd	r25, Z+1	; 0x01
    4bda:	a2 81       	ldd	r26, Z+2	; 0x02
    4bdc:	b3 81       	ldd	r27, Z+3	; 0x03
    4bde:	28 17       	cp	r18, r24
    4be0:	39 07       	cpc	r19, r25
    4be2:	4a 07       	cpc	r20, r26
    4be4:	5b 07       	cpc	r21, r27
    4be6:	08 f4       	brcc	.+2      	; 0x4bea <STEPPER_u8Move+0x6ae>
    4be8:	f4 cc       	rjmp	.-1560   	; 0x45d2 <STEPPER_u8Move+0x96>
    4bea:	47 c2       	rjmp	.+1166   	; 0x507a <STEPPER_u8Move+0xb3e>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
			_delay_ms(100);
		}
	}
	else if(direction == STEPPER_u8_CW)
    4bec:	fe 01       	movw	r30, r28
    4bee:	e9 58       	subi	r30, 0x89	; 137
    4bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf2:	80 81       	ld	r24, Z
    4bf4:	81 30       	cpi	r24, 0x01	; 1
    4bf6:	09 f0       	breq	.+2      	; 0x4bfa <STEPPER_u8Move+0x6be>
    4bf8:	3c c2       	rjmp	.+1144   	; 0x5072 <STEPPER_u8Move+0xb36>
	{
		for(i = 0; i < Local_u8NoOfiterations;i++)
    4bfa:	fe 01       	movw	r30, r28
    4bfc:	ef 58       	subi	r30, 0x8F	; 143
    4bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4c00:	10 82       	st	Z, r1
    4c02:	21 c2       	rjmp	.+1090   	; 0x5046 <STEPPER_u8Move+0xb0a>
		{
			//Step 1 0x0C --> step angle
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    4c04:	81 e0       	ldi	r24, 0x01	; 1
    4c06:	60 e0       	ldi	r22, 0x00	; 0
    4c08:	40 e0       	ldi	r20, 0x00	; 0
    4c0a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	61 e0       	ldi	r22, 0x01	; 1
    4c12:	40 e0       	ldi	r20, 0x00	; 0
    4c14:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    4c18:	81 e0       	ldi	r24, 0x01	; 1
    4c1a:	62 e0       	ldi	r22, 0x02	; 2
    4c1c:	41 e0       	ldi	r20, 0x01	; 1
    4c1e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	63 e0       	ldi	r22, 0x03	; 3
    4c26:	41 e0       	ldi	r20, 0x01	; 1
    4c28:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    4c2c:	80 e0       	ldi	r24, 0x00	; 0
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	a8 ec       	ldi	r26, 0xC8	; 200
    4c32:	b2 e4       	ldi	r27, 0x42	; 66
    4c34:	8d ab       	std	Y+53, r24	; 0x35
    4c36:	9e ab       	std	Y+54, r25	; 0x36
    4c38:	af ab       	std	Y+55, r26	; 0x37
    4c3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c3c:	6d a9       	ldd	r22, Y+53	; 0x35
    4c3e:	7e a9       	ldd	r23, Y+54	; 0x36
    4c40:	8f a9       	ldd	r24, Y+55	; 0x37
    4c42:	98 ad       	ldd	r25, Y+56	; 0x38
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	4a ef       	ldi	r20, 0xFA	; 250
    4c4a:	54 e4       	ldi	r21, 0x44	; 68
    4c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c50:	dc 01       	movw	r26, r24
    4c52:	cb 01       	movw	r24, r22
    4c54:	89 ab       	std	Y+49, r24	; 0x31
    4c56:	9a ab       	std	Y+50, r25	; 0x32
    4c58:	ab ab       	std	Y+51, r26	; 0x33
    4c5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4c5c:	69 a9       	ldd	r22, Y+49	; 0x31
    4c5e:	7a a9       	ldd	r23, Y+50	; 0x32
    4c60:	8b a9       	ldd	r24, Y+51	; 0x33
    4c62:	9c a9       	ldd	r25, Y+52	; 0x34
    4c64:	20 e0       	ldi	r18, 0x00	; 0
    4c66:	30 e0       	ldi	r19, 0x00	; 0
    4c68:	40 e8       	ldi	r20, 0x80	; 128
    4c6a:	5f e3       	ldi	r21, 0x3F	; 63
    4c6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c70:	88 23       	and	r24, r24
    4c72:	2c f4       	brge	.+10     	; 0x4c7e <STEPPER_u8Move+0x742>
		__ticks = 1;
    4c74:	81 e0       	ldi	r24, 0x01	; 1
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	98 ab       	std	Y+48, r25	; 0x30
    4c7a:	8f a7       	std	Y+47, r24	; 0x2f
    4c7c:	3f c0       	rjmp	.+126    	; 0x4cfc <STEPPER_u8Move+0x7c0>
	else if (__tmp > 65535)
    4c7e:	69 a9       	ldd	r22, Y+49	; 0x31
    4c80:	7a a9       	ldd	r23, Y+50	; 0x32
    4c82:	8b a9       	ldd	r24, Y+51	; 0x33
    4c84:	9c a9       	ldd	r25, Y+52	; 0x34
    4c86:	20 e0       	ldi	r18, 0x00	; 0
    4c88:	3f ef       	ldi	r19, 0xFF	; 255
    4c8a:	4f e7       	ldi	r20, 0x7F	; 127
    4c8c:	57 e4       	ldi	r21, 0x47	; 71
    4c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4c92:	18 16       	cp	r1, r24
    4c94:	4c f5       	brge	.+82     	; 0x4ce8 <STEPPER_u8Move+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c96:	6d a9       	ldd	r22, Y+53	; 0x35
    4c98:	7e a9       	ldd	r23, Y+54	; 0x36
    4c9a:	8f a9       	ldd	r24, Y+55	; 0x37
    4c9c:	98 ad       	ldd	r25, Y+56	; 0x38
    4c9e:	20 e0       	ldi	r18, 0x00	; 0
    4ca0:	30 e0       	ldi	r19, 0x00	; 0
    4ca2:	40 e2       	ldi	r20, 0x20	; 32
    4ca4:	51 e4       	ldi	r21, 0x41	; 65
    4ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	bc 01       	movw	r22, r24
    4cb0:	cd 01       	movw	r24, r26
    4cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cb6:	dc 01       	movw	r26, r24
    4cb8:	cb 01       	movw	r24, r22
    4cba:	98 ab       	std	Y+48, r25	; 0x30
    4cbc:	8f a7       	std	Y+47, r24	; 0x2f
    4cbe:	0f c0       	rjmp	.+30     	; 0x4cde <STEPPER_u8Move+0x7a2>
    4cc0:	88 ec       	ldi	r24, 0xC8	; 200
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	9e a7       	std	Y+46, r25	; 0x2e
    4cc6:	8d a7       	std	Y+45, r24	; 0x2d
    4cc8:	8d a5       	ldd	r24, Y+45	; 0x2d
    4cca:	9e a5       	ldd	r25, Y+46	; 0x2e
    4ccc:	01 97       	sbiw	r24, 0x01	; 1
    4cce:	f1 f7       	brne	.-4      	; 0x4ccc <STEPPER_u8Move+0x790>
    4cd0:	9e a7       	std	Y+46, r25	; 0x2e
    4cd2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4cd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cd6:	98 a9       	ldd	r25, Y+48	; 0x30
    4cd8:	01 97       	sbiw	r24, 0x01	; 1
    4cda:	98 ab       	std	Y+48, r25	; 0x30
    4cdc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4cde:	8f a5       	ldd	r24, Y+47	; 0x2f
    4ce0:	98 a9       	ldd	r25, Y+48	; 0x30
    4ce2:	00 97       	sbiw	r24, 0x00	; 0
    4ce4:	69 f7       	brne	.-38     	; 0x4cc0 <STEPPER_u8Move+0x784>
    4ce6:	14 c0       	rjmp	.+40     	; 0x4d10 <STEPPER_u8Move+0x7d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ce8:	69 a9       	ldd	r22, Y+49	; 0x31
    4cea:	7a a9       	ldd	r23, Y+50	; 0x32
    4cec:	8b a9       	ldd	r24, Y+51	; 0x33
    4cee:	9c a9       	ldd	r25, Y+52	; 0x34
    4cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cf4:	dc 01       	movw	r26, r24
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	98 ab       	std	Y+48, r25	; 0x30
    4cfa:	8f a7       	std	Y+47, r24	; 0x2f
    4cfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    4cfe:	98 a9       	ldd	r25, Y+48	; 0x30
    4d00:	9c a7       	std	Y+44, r25	; 0x2c
    4d02:	8b a7       	std	Y+43, r24	; 0x2b
    4d04:	8b a5       	ldd	r24, Y+43	; 0x2b
    4d06:	9c a5       	ldd	r25, Y+44	; 0x2c
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	f1 f7       	brne	.-4      	; 0x4d08 <STEPPER_u8Move+0x7cc>
    4d0c:	9c a7       	std	Y+44, r25	; 0x2c
    4d0e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);
			//Step 2 0x06 --> step angle * 2
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    4d10:	81 e0       	ldi	r24, 0x01	; 1
    4d12:	60 e0       	ldi	r22, 0x00	; 0
    4d14:	40 e0       	ldi	r20, 0x00	; 0
    4d16:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    4d1a:	81 e0       	ldi	r24, 0x01	; 1
    4d1c:	61 e0       	ldi	r22, 0x01	; 1
    4d1e:	41 e0       	ldi	r20, 0x01	; 1
    4d20:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    4d24:	81 e0       	ldi	r24, 0x01	; 1
    4d26:	62 e0       	ldi	r22, 0x02	; 2
    4d28:	41 e0       	ldi	r20, 0x01	; 1
    4d2a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    4d2e:	81 e0       	ldi	r24, 0x01	; 1
    4d30:	63 e0       	ldi	r22, 0x03	; 3
    4d32:	40 e0       	ldi	r20, 0x00	; 0
    4d34:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	a8 ec       	ldi	r26, 0xC8	; 200
    4d3e:	b2 e4       	ldi	r27, 0x42	; 66
    4d40:	8f a3       	std	Y+39, r24	; 0x27
    4d42:	98 a7       	std	Y+40, r25	; 0x28
    4d44:	a9 a7       	std	Y+41, r26	; 0x29
    4d46:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d48:	6f a1       	ldd	r22, Y+39	; 0x27
    4d4a:	78 a5       	ldd	r23, Y+40	; 0x28
    4d4c:	89 a5       	ldd	r24, Y+41	; 0x29
    4d4e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4d50:	20 e0       	ldi	r18, 0x00	; 0
    4d52:	30 e0       	ldi	r19, 0x00	; 0
    4d54:	4a ef       	ldi	r20, 0xFA	; 250
    4d56:	54 e4       	ldi	r21, 0x44	; 68
    4d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	cb 01       	movw	r24, r22
    4d60:	8b a3       	std	Y+35, r24	; 0x23
    4d62:	9c a3       	std	Y+36, r25	; 0x24
    4d64:	ad a3       	std	Y+37, r26	; 0x25
    4d66:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4d68:	6b a1       	ldd	r22, Y+35	; 0x23
    4d6a:	7c a1       	ldd	r23, Y+36	; 0x24
    4d6c:	8d a1       	ldd	r24, Y+37	; 0x25
    4d6e:	9e a1       	ldd	r25, Y+38	; 0x26
    4d70:	20 e0       	ldi	r18, 0x00	; 0
    4d72:	30 e0       	ldi	r19, 0x00	; 0
    4d74:	40 e8       	ldi	r20, 0x80	; 128
    4d76:	5f e3       	ldi	r21, 0x3F	; 63
    4d78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4d7c:	88 23       	and	r24, r24
    4d7e:	2c f4       	brge	.+10     	; 0x4d8a <STEPPER_u8Move+0x84e>
		__ticks = 1;
    4d80:	81 e0       	ldi	r24, 0x01	; 1
    4d82:	90 e0       	ldi	r25, 0x00	; 0
    4d84:	9a a3       	std	Y+34, r25	; 0x22
    4d86:	89 a3       	std	Y+33, r24	; 0x21
    4d88:	3f c0       	rjmp	.+126    	; 0x4e08 <STEPPER_u8Move+0x8cc>
	else if (__tmp > 65535)
    4d8a:	6b a1       	ldd	r22, Y+35	; 0x23
    4d8c:	7c a1       	ldd	r23, Y+36	; 0x24
    4d8e:	8d a1       	ldd	r24, Y+37	; 0x25
    4d90:	9e a1       	ldd	r25, Y+38	; 0x26
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	3f ef       	ldi	r19, 0xFF	; 255
    4d96:	4f e7       	ldi	r20, 0x7F	; 127
    4d98:	57 e4       	ldi	r21, 0x47	; 71
    4d9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d9e:	18 16       	cp	r1, r24
    4da0:	4c f5       	brge	.+82     	; 0x4df4 <STEPPER_u8Move+0x8b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4da2:	6f a1       	ldd	r22, Y+39	; 0x27
    4da4:	78 a5       	ldd	r23, Y+40	; 0x28
    4da6:	89 a5       	ldd	r24, Y+41	; 0x29
    4da8:	9a a5       	ldd	r25, Y+42	; 0x2a
    4daa:	20 e0       	ldi	r18, 0x00	; 0
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	40 e2       	ldi	r20, 0x20	; 32
    4db0:	51 e4       	ldi	r21, 0x41	; 65
    4db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4db6:	dc 01       	movw	r26, r24
    4db8:	cb 01       	movw	r24, r22
    4dba:	bc 01       	movw	r22, r24
    4dbc:	cd 01       	movw	r24, r26
    4dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	cb 01       	movw	r24, r22
    4dc6:	9a a3       	std	Y+34, r25	; 0x22
    4dc8:	89 a3       	std	Y+33, r24	; 0x21
    4dca:	0f c0       	rjmp	.+30     	; 0x4dea <STEPPER_u8Move+0x8ae>
    4dcc:	88 ec       	ldi	r24, 0xC8	; 200
    4dce:	90 e0       	ldi	r25, 0x00	; 0
    4dd0:	98 a3       	std	Y+32, r25	; 0x20
    4dd2:	8f 8f       	std	Y+31, r24	; 0x1f
    4dd4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4dd6:	98 a1       	ldd	r25, Y+32	; 0x20
    4dd8:	01 97       	sbiw	r24, 0x01	; 1
    4dda:	f1 f7       	brne	.-4      	; 0x4dd8 <STEPPER_u8Move+0x89c>
    4ddc:	98 a3       	std	Y+32, r25	; 0x20
    4dde:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4de0:	89 a1       	ldd	r24, Y+33	; 0x21
    4de2:	9a a1       	ldd	r25, Y+34	; 0x22
    4de4:	01 97       	sbiw	r24, 0x01	; 1
    4de6:	9a a3       	std	Y+34, r25	; 0x22
    4de8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4dea:	89 a1       	ldd	r24, Y+33	; 0x21
    4dec:	9a a1       	ldd	r25, Y+34	; 0x22
    4dee:	00 97       	sbiw	r24, 0x00	; 0
    4df0:	69 f7       	brne	.-38     	; 0x4dcc <STEPPER_u8Move+0x890>
    4df2:	14 c0       	rjmp	.+40     	; 0x4e1c <STEPPER_u8Move+0x8e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4df4:	6b a1       	ldd	r22, Y+35	; 0x23
    4df6:	7c a1       	ldd	r23, Y+36	; 0x24
    4df8:	8d a1       	ldd	r24, Y+37	; 0x25
    4dfa:	9e a1       	ldd	r25, Y+38	; 0x26
    4dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	9a a3       	std	Y+34, r25	; 0x22
    4e06:	89 a3       	std	Y+33, r24	; 0x21
    4e08:	89 a1       	ldd	r24, Y+33	; 0x21
    4e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    4e0c:	9e 8f       	std	Y+30, r25	; 0x1e
    4e0e:	8d 8f       	std	Y+29, r24	; 0x1d
    4e10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4e12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4e14:	01 97       	sbiw	r24, 0x01	; 1
    4e16:	f1 f7       	brne	.-4      	; 0x4e14 <STEPPER_u8Move+0x8d8>
    4e18:	9e 8f       	std	Y+30, r25	; 0x1e
    4e1a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			//Step 3 0x03 --> step angle * 3
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    4e1c:	81 e0       	ldi	r24, 0x01	; 1
    4e1e:	60 e0       	ldi	r22, 0x00	; 0
    4e20:	41 e0       	ldi	r20, 0x01	; 1
    4e22:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    4e26:	81 e0       	ldi	r24, 0x01	; 1
    4e28:	61 e0       	ldi	r22, 0x01	; 1
    4e2a:	41 e0       	ldi	r20, 0x01	; 1
    4e2c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	62 e0       	ldi	r22, 0x02	; 2
    4e34:	40 e0       	ldi	r20, 0x00	; 0
    4e36:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    4e3a:	81 e0       	ldi	r24, 0x01	; 1
    4e3c:	63 e0       	ldi	r22, 0x03	; 3
    4e3e:	40 e0       	ldi	r20, 0x00	; 0
    4e40:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    4e44:	80 e0       	ldi	r24, 0x00	; 0
    4e46:	90 e0       	ldi	r25, 0x00	; 0
    4e48:	a8 ec       	ldi	r26, 0xC8	; 200
    4e4a:	b2 e4       	ldi	r27, 0x42	; 66
    4e4c:	89 8f       	std	Y+25, r24	; 0x19
    4e4e:	9a 8f       	std	Y+26, r25	; 0x1a
    4e50:	ab 8f       	std	Y+27, r26	; 0x1b
    4e52:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e54:	69 8d       	ldd	r22, Y+25	; 0x19
    4e56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4e58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4e5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4e5c:	20 e0       	ldi	r18, 0x00	; 0
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	4a ef       	ldi	r20, 0xFA	; 250
    4e62:	54 e4       	ldi	r21, 0x44	; 68
    4e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e68:	dc 01       	movw	r26, r24
    4e6a:	cb 01       	movw	r24, r22
    4e6c:	8d 8b       	std	Y+21, r24	; 0x15
    4e6e:	9e 8b       	std	Y+22, r25	; 0x16
    4e70:	af 8b       	std	Y+23, r26	; 0x17
    4e72:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4e74:	6d 89       	ldd	r22, Y+21	; 0x15
    4e76:	7e 89       	ldd	r23, Y+22	; 0x16
    4e78:	8f 89       	ldd	r24, Y+23	; 0x17
    4e7a:	98 8d       	ldd	r25, Y+24	; 0x18
    4e7c:	20 e0       	ldi	r18, 0x00	; 0
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	40 e8       	ldi	r20, 0x80	; 128
    4e82:	5f e3       	ldi	r21, 0x3F	; 63
    4e84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e88:	88 23       	and	r24, r24
    4e8a:	2c f4       	brge	.+10     	; 0x4e96 <STEPPER_u8Move+0x95a>
		__ticks = 1;
    4e8c:	81 e0       	ldi	r24, 0x01	; 1
    4e8e:	90 e0       	ldi	r25, 0x00	; 0
    4e90:	9c 8b       	std	Y+20, r25	; 0x14
    4e92:	8b 8b       	std	Y+19, r24	; 0x13
    4e94:	3f c0       	rjmp	.+126    	; 0x4f14 <STEPPER_u8Move+0x9d8>
	else if (__tmp > 65535)
    4e96:	6d 89       	ldd	r22, Y+21	; 0x15
    4e98:	7e 89       	ldd	r23, Y+22	; 0x16
    4e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    4e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	3f ef       	ldi	r19, 0xFF	; 255
    4ea2:	4f e7       	ldi	r20, 0x7F	; 127
    4ea4:	57 e4       	ldi	r21, 0x47	; 71
    4ea6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4eaa:	18 16       	cp	r1, r24
    4eac:	4c f5       	brge	.+82     	; 0x4f00 <STEPPER_u8Move+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eae:	69 8d       	ldd	r22, Y+25	; 0x19
    4eb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4eb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4eb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4eb6:	20 e0       	ldi	r18, 0x00	; 0
    4eb8:	30 e0       	ldi	r19, 0x00	; 0
    4eba:	40 e2       	ldi	r20, 0x20	; 32
    4ebc:	51 e4       	ldi	r21, 0x41	; 65
    4ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	bc 01       	movw	r22, r24
    4ec8:	cd 01       	movw	r24, r26
    4eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ece:	dc 01       	movw	r26, r24
    4ed0:	cb 01       	movw	r24, r22
    4ed2:	9c 8b       	std	Y+20, r25	; 0x14
    4ed4:	8b 8b       	std	Y+19, r24	; 0x13
    4ed6:	0f c0       	rjmp	.+30     	; 0x4ef6 <STEPPER_u8Move+0x9ba>
    4ed8:	88 ec       	ldi	r24, 0xC8	; 200
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	9a 8b       	std	Y+18, r25	; 0x12
    4ede:	89 8b       	std	Y+17, r24	; 0x11
    4ee0:	89 89       	ldd	r24, Y+17	; 0x11
    4ee2:	9a 89       	ldd	r25, Y+18	; 0x12
    4ee4:	01 97       	sbiw	r24, 0x01	; 1
    4ee6:	f1 f7       	brne	.-4      	; 0x4ee4 <STEPPER_u8Move+0x9a8>
    4ee8:	9a 8b       	std	Y+18, r25	; 0x12
    4eea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4eec:	8b 89       	ldd	r24, Y+19	; 0x13
    4eee:	9c 89       	ldd	r25, Y+20	; 0x14
    4ef0:	01 97       	sbiw	r24, 0x01	; 1
    4ef2:	9c 8b       	std	Y+20, r25	; 0x14
    4ef4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    4ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    4efa:	00 97       	sbiw	r24, 0x00	; 0
    4efc:	69 f7       	brne	.-38     	; 0x4ed8 <STEPPER_u8Move+0x99c>
    4efe:	14 c0       	rjmp	.+40     	; 0x4f28 <STEPPER_u8Move+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f00:	6d 89       	ldd	r22, Y+21	; 0x15
    4f02:	7e 89       	ldd	r23, Y+22	; 0x16
    4f04:	8f 89       	ldd	r24, Y+23	; 0x17
    4f06:	98 8d       	ldd	r25, Y+24	; 0x18
    4f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f0c:	dc 01       	movw	r26, r24
    4f0e:	cb 01       	movw	r24, r22
    4f10:	9c 8b       	std	Y+20, r25	; 0x14
    4f12:	8b 8b       	std	Y+19, r24	; 0x13
    4f14:	8b 89       	ldd	r24, Y+19	; 0x13
    4f16:	9c 89       	ldd	r25, Y+20	; 0x14
    4f18:	98 8b       	std	Y+16, r25	; 0x10
    4f1a:	8f 87       	std	Y+15, r24	; 0x0f
    4f1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4f1e:	98 89       	ldd	r25, Y+16	; 0x10
    4f20:	01 97       	sbiw	r24, 0x01	; 1
    4f22:	f1 f7       	brne	.-4      	; 0x4f20 <STEPPER_u8Move+0x9e4>
    4f24:	98 8b       	std	Y+16, r25	; 0x10
    4f26:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			//Step 4 0x09 --> step angle * 4
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    4f28:	81 e0       	ldi	r24, 0x01	; 1
    4f2a:	60 e0       	ldi	r22, 0x00	; 0
    4f2c:	41 e0       	ldi	r20, 0x01	; 1
    4f2e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    4f32:	81 e0       	ldi	r24, 0x01	; 1
    4f34:	61 e0       	ldi	r22, 0x01	; 1
    4f36:	40 e0       	ldi	r20, 0x00	; 0
    4f38:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    4f3c:	81 e0       	ldi	r24, 0x01	; 1
    4f3e:	62 e0       	ldi	r22, 0x02	; 2
    4f40:	40 e0       	ldi	r20, 0x00	; 0
    4f42:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    4f46:	81 e0       	ldi	r24, 0x01	; 1
    4f48:	63 e0       	ldi	r22, 0x03	; 3
    4f4a:	41 e0       	ldi	r20, 0x01	; 1
    4f4c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    4f50:	80 e0       	ldi	r24, 0x00	; 0
    4f52:	90 e0       	ldi	r25, 0x00	; 0
    4f54:	a8 ec       	ldi	r26, 0xC8	; 200
    4f56:	b2 e4       	ldi	r27, 0x42	; 66
    4f58:	8b 87       	std	Y+11, r24	; 0x0b
    4f5a:	9c 87       	std	Y+12, r25	; 0x0c
    4f5c:	ad 87       	std	Y+13, r26	; 0x0d
    4f5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f68:	20 e0       	ldi	r18, 0x00	; 0
    4f6a:	30 e0       	ldi	r19, 0x00	; 0
    4f6c:	4a ef       	ldi	r20, 0xFA	; 250
    4f6e:	54 e4       	ldi	r21, 0x44	; 68
    4f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f74:	dc 01       	movw	r26, r24
    4f76:	cb 01       	movw	r24, r22
    4f78:	8f 83       	std	Y+7, r24	; 0x07
    4f7a:	98 87       	std	Y+8, r25	; 0x08
    4f7c:	a9 87       	std	Y+9, r26	; 0x09
    4f7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4f80:	6f 81       	ldd	r22, Y+7	; 0x07
    4f82:	78 85       	ldd	r23, Y+8	; 0x08
    4f84:	89 85       	ldd	r24, Y+9	; 0x09
    4f86:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	40 e8       	ldi	r20, 0x80	; 128
    4f8e:	5f e3       	ldi	r21, 0x3F	; 63
    4f90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f94:	88 23       	and	r24, r24
    4f96:	2c f4       	brge	.+10     	; 0x4fa2 <STEPPER_u8Move+0xa66>
		__ticks = 1;
    4f98:	81 e0       	ldi	r24, 0x01	; 1
    4f9a:	90 e0       	ldi	r25, 0x00	; 0
    4f9c:	9e 83       	std	Y+6, r25	; 0x06
    4f9e:	8d 83       	std	Y+5, r24	; 0x05
    4fa0:	3f c0       	rjmp	.+126    	; 0x5020 <STEPPER_u8Move+0xae4>
	else if (__tmp > 65535)
    4fa2:	6f 81       	ldd	r22, Y+7	; 0x07
    4fa4:	78 85       	ldd	r23, Y+8	; 0x08
    4fa6:	89 85       	ldd	r24, Y+9	; 0x09
    4fa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	3f ef       	ldi	r19, 0xFF	; 255
    4fae:	4f e7       	ldi	r20, 0x7F	; 127
    4fb0:	57 e4       	ldi	r21, 0x47	; 71
    4fb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4fb6:	18 16       	cp	r1, r24
    4fb8:	4c f5       	brge	.+82     	; 0x500c <STEPPER_u8Move+0xad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fba:	6b 85       	ldd	r22, Y+11	; 0x0b
    4fbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    4fbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4fc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    4fc2:	20 e0       	ldi	r18, 0x00	; 0
    4fc4:	30 e0       	ldi	r19, 0x00	; 0
    4fc6:	40 e2       	ldi	r20, 0x20	; 32
    4fc8:	51 e4       	ldi	r21, 0x41	; 65
    4fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fce:	dc 01       	movw	r26, r24
    4fd0:	cb 01       	movw	r24, r22
    4fd2:	bc 01       	movw	r22, r24
    4fd4:	cd 01       	movw	r24, r26
    4fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fda:	dc 01       	movw	r26, r24
    4fdc:	cb 01       	movw	r24, r22
    4fde:	9e 83       	std	Y+6, r25	; 0x06
    4fe0:	8d 83       	std	Y+5, r24	; 0x05
    4fe2:	0f c0       	rjmp	.+30     	; 0x5002 <STEPPER_u8Move+0xac6>
    4fe4:	88 ec       	ldi	r24, 0xC8	; 200
    4fe6:	90 e0       	ldi	r25, 0x00	; 0
    4fe8:	9c 83       	std	Y+4, r25	; 0x04
    4fea:	8b 83       	std	Y+3, r24	; 0x03
    4fec:	8b 81       	ldd	r24, Y+3	; 0x03
    4fee:	9c 81       	ldd	r25, Y+4	; 0x04
    4ff0:	01 97       	sbiw	r24, 0x01	; 1
    4ff2:	f1 f7       	brne	.-4      	; 0x4ff0 <STEPPER_u8Move+0xab4>
    4ff4:	9c 83       	std	Y+4, r25	; 0x04
    4ff6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ff8:	8d 81       	ldd	r24, Y+5	; 0x05
    4ffa:	9e 81       	ldd	r25, Y+6	; 0x06
    4ffc:	01 97       	sbiw	r24, 0x01	; 1
    4ffe:	9e 83       	std	Y+6, r25	; 0x06
    5000:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5002:	8d 81       	ldd	r24, Y+5	; 0x05
    5004:	9e 81       	ldd	r25, Y+6	; 0x06
    5006:	00 97       	sbiw	r24, 0x00	; 0
    5008:	69 f7       	brne	.-38     	; 0x4fe4 <STEPPER_u8Move+0xaa8>
    500a:	14 c0       	rjmp	.+40     	; 0x5034 <STEPPER_u8Move+0xaf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    500c:	6f 81       	ldd	r22, Y+7	; 0x07
    500e:	78 85       	ldd	r23, Y+8	; 0x08
    5010:	89 85       	ldd	r24, Y+9	; 0x09
    5012:	9a 85       	ldd	r25, Y+10	; 0x0a
    5014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5018:	dc 01       	movw	r26, r24
    501a:	cb 01       	movw	r24, r22
    501c:	9e 83       	std	Y+6, r25	; 0x06
    501e:	8d 83       	std	Y+5, r24	; 0x05
    5020:	8d 81       	ldd	r24, Y+5	; 0x05
    5022:	9e 81       	ldd	r25, Y+6	; 0x06
    5024:	9a 83       	std	Y+2, r25	; 0x02
    5026:	89 83       	std	Y+1, r24	; 0x01
    5028:	89 81       	ldd	r24, Y+1	; 0x01
    502a:	9a 81       	ldd	r25, Y+2	; 0x02
    502c:	01 97       	sbiw	r24, 0x01	; 1
    502e:	f1 f7       	brne	.-4      	; 0x502c <STEPPER_u8Move+0xaf0>
    5030:	9a 83       	std	Y+2, r25	; 0x02
    5032:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
		}
	}
	else if(direction == STEPPER_u8_CW)
	{
		for(i = 0; i < Local_u8NoOfiterations;i++)
    5034:	de 01       	movw	r26, r28
    5036:	af 58       	subi	r26, 0x8F	; 143
    5038:	bf 4f       	sbci	r27, 0xFF	; 255
    503a:	fe 01       	movw	r30, r28
    503c:	ef 58       	subi	r30, 0x8F	; 143
    503e:	ff 4f       	sbci	r31, 0xFF	; 255
    5040:	80 81       	ld	r24, Z
    5042:	8f 5f       	subi	r24, 0xFF	; 255
    5044:	8c 93       	st	X, r24
    5046:	fe 01       	movw	r30, r28
    5048:	ef 58       	subi	r30, 0x8F	; 143
    504a:	ff 4f       	sbci	r31, 0xFF	; 255
    504c:	80 81       	ld	r24, Z
    504e:	28 2f       	mov	r18, r24
    5050:	30 e0       	ldi	r19, 0x00	; 0
    5052:	40 e0       	ldi	r20, 0x00	; 0
    5054:	50 e0       	ldi	r21, 0x00	; 0
    5056:	fe 01       	movw	r30, r28
    5058:	ee 58       	subi	r30, 0x8E	; 142
    505a:	ff 4f       	sbci	r31, 0xFF	; 255
    505c:	80 81       	ld	r24, Z
    505e:	91 81       	ldd	r25, Z+1	; 0x01
    5060:	a2 81       	ldd	r26, Z+2	; 0x02
    5062:	b3 81       	ldd	r27, Z+3	; 0x03
    5064:	28 17       	cp	r18, r24
    5066:	39 07       	cpc	r19, r25
    5068:	4a 07       	cpc	r20, r26
    506a:	5b 07       	cpc	r21, r27
    506c:	08 f4       	brcc	.+2      	; 0x5070 <STEPPER_u8Move+0xb34>
    506e:	ca cd       	rjmp	.-1132   	; 0x4c04 <STEPPER_u8Move+0x6c8>
    5070:	04 c0       	rjmp	.+8      	; 0x507a <STEPPER_u8Move+0xb3e>
			_delay_ms(100);
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    5072:	fe 01       	movw	r30, r28
    5074:	ea 58       	subi	r30, 0x8A	; 138
    5076:	ff 4f       	sbci	r31, 0xFF	; 255
    5078:	10 82       	st	Z, r1
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
	}
#endif
	return Local_u8ErrorState;
    507a:	fe 01       	movw	r30, r28
    507c:	ea 58       	subi	r30, 0x8A	; 138
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	80 81       	ld	r24, Z
}
    5082:	c7 58       	subi	r28, 0x87	; 135
    5084:	df 4f       	sbci	r29, 0xFF	; 255
    5086:	0f b6       	in	r0, 0x3f	; 63
    5088:	f8 94       	cli
    508a:	de bf       	out	0x3e, r29	; 62
    508c:	0f be       	out	0x3f, r0	; 63
    508e:	cd bf       	out	0x3d, r28	; 61
    5090:	cf 91       	pop	r28
    5092:	df 91       	pop	r29
    5094:	1f 91       	pop	r17
    5096:	0f 91       	pop	r16
    5098:	08 95       	ret

0000509a <main>:
#include "Login_System.h"
#include "H_Bridge.h"
#include "Dashboard.h"

int main(void)
{
    509a:	0f 93       	push	r16
    509c:	1f 93       	push	r17
    509e:	df 93       	push	r29
    50a0:	cf 93       	push	r28
    50a2:	cd b7       	in	r28, 0x3d	; 61
    50a4:	de b7       	in	r29, 0x3e	; 62
    50a6:	cf 55       	subi	r28, 0x5F	; 95
    50a8:	d0 40       	sbci	r29, 0x00	; 0
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	f8 94       	cli
    50ae:	de bf       	out	0x3e, r29	; 62
    50b0:	0f be       	out	0x3f, r0	; 63
    50b2:	cd bf       	out	0x3d, r28	; 61
	u8 const password[] = "1234";
    50b4:	ce 01       	movw	r24, r28
    50b6:	8b 5a       	subi	r24, 0xAB	; 171
    50b8:	9f 4f       	sbci	r25, 0xFF	; 255
    50ba:	6d 96       	adiw	r28, 0x1d	; 29
    50bc:	9f af       	std	Y+63, r25	; 0x3f
    50be:	8e af       	std	Y+62, r24	; 0x3e
    50c0:	6d 97       	sbiw	r28, 0x1d	; 29
    50c2:	85 e4       	ldi	r24, 0x45	; 69
    50c4:	91 e0       	ldi	r25, 0x01	; 1
    50c6:	6f 96       	adiw	r28, 0x1f	; 31
    50c8:	9f af       	std	Y+63, r25	; 0x3f
    50ca:	8e af       	std	Y+62, r24	; 0x3e
    50cc:	6f 97       	sbiw	r28, 0x1f	; 31
    50ce:	95 e0       	ldi	r25, 0x05	; 5
    50d0:	a0 96       	adiw	r28, 0x20	; 32
    50d2:	9f af       	std	Y+63, r25	; 0x3f
    50d4:	a0 97       	sbiw	r28, 0x20	; 32
    50d6:	6f 96       	adiw	r28, 0x1f	; 31
    50d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    50da:	ff ad       	ldd	r31, Y+63	; 0x3f
    50dc:	6f 97       	sbiw	r28, 0x1f	; 31
    50de:	00 80       	ld	r0, Z
    50e0:	6f 96       	adiw	r28, 0x1f	; 31
    50e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    50e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    50e6:	6f 97       	sbiw	r28, 0x1f	; 31
    50e8:	01 96       	adiw	r24, 0x01	; 1
    50ea:	6f 96       	adiw	r28, 0x1f	; 31
    50ec:	9f af       	std	Y+63, r25	; 0x3f
    50ee:	8e af       	std	Y+62, r24	; 0x3e
    50f0:	6f 97       	sbiw	r28, 0x1f	; 31
    50f2:	6d 96       	adiw	r28, 0x1d	; 29
    50f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    50f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    50f8:	6d 97       	sbiw	r28, 0x1d	; 29
    50fa:	00 82       	st	Z, r0
    50fc:	6d 96       	adiw	r28, 0x1d	; 29
    50fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    5100:	9f ad       	ldd	r25, Y+63	; 0x3f
    5102:	6d 97       	sbiw	r28, 0x1d	; 29
    5104:	01 96       	adiw	r24, 0x01	; 1
    5106:	6d 96       	adiw	r28, 0x1d	; 29
    5108:	9f af       	std	Y+63, r25	; 0x3f
    510a:	8e af       	std	Y+62, r24	; 0x3e
    510c:	6d 97       	sbiw	r28, 0x1d	; 29
    510e:	a0 96       	adiw	r28, 0x20	; 32
    5110:	9f ad       	ldd	r25, Y+63	; 0x3f
    5112:	a0 97       	sbiw	r28, 0x20	; 32
    5114:	91 50       	subi	r25, 0x01	; 1
    5116:	a0 96       	adiw	r28, 0x20	; 32
    5118:	9f af       	std	Y+63, r25	; 0x3f
    511a:	a0 97       	sbiw	r28, 0x20	; 32
    511c:	a0 96       	adiw	r28, 0x20	; 32
    511e:	ef ad       	ldd	r30, Y+63	; 0x3f
    5120:	a0 97       	sbiw	r28, 0x20	; 32
    5122:	ee 23       	and	r30, r30
    5124:	c1 f6       	brne	.-80     	; 0x50d6 <main+0x3c>
	u8 flag;//To check login correct or wrong
	DIO_voidInit();
    5126:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	LCD_voidInit();
    512a:	0e 94 ba 13 	call	0x2774	; 0x2774 <LCD_voidInit>
	while(1)
	{
		login_system(password,&flag);
    512e:	ce 01       	movw	r24, r28
    5130:	8b 5a       	subi	r24, 0xAB	; 171
    5132:	9f 4f       	sbci	r25, 0xFF	; 255
    5134:	9e 01       	movw	r18, r28
    5136:	26 5a       	subi	r18, 0xA6	; 166
    5138:	3f 4f       	sbci	r19, 0xFF	; 255
    513a:	b9 01       	movw	r22, r18
    513c:	0e 94 39 1e 	call	0x3c72	; 0x3c72 <login_system>
		if(flag)
    5140:	fe 01       	movw	r30, r28
    5142:	e6 5a       	subi	r30, 0xA6	; 166
    5144:	ff 4f       	sbci	r31, 0xFF	; 255
    5146:	80 81       	ld	r24, Z
    5148:	88 23       	and	r24, r24
    514a:	09 f4       	brne	.+2      	; 0x514e <main+0xb4>
    514c:	bb c1       	rjmp	.+886    	; 0x54c4 <main+0x42a>
    514e:	fe 01       	movw	r30, r28
    5150:	ef 5a       	subi	r30, 0xAF	; 175
    5152:	ff 4f       	sbci	r31, 0xFF	; 255
    5154:	80 e0       	ldi	r24, 0x00	; 0
    5156:	90 e0       	ldi	r25, 0x00	; 0
    5158:	aa e7       	ldi	r26, 0x7A	; 122
    515a:	b4 e4       	ldi	r27, 0x44	; 68
    515c:	80 83       	st	Z, r24
    515e:	91 83       	std	Z+1, r25	; 0x01
    5160:	a2 83       	std	Z+2, r26	; 0x02
    5162:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5164:	8e 01       	movw	r16, r28
    5166:	03 5b       	subi	r16, 0xB3	; 179
    5168:	1f 4f       	sbci	r17, 0xFF	; 255
    516a:	fe 01       	movw	r30, r28
    516c:	ef 5a       	subi	r30, 0xAF	; 175
    516e:	ff 4f       	sbci	r31, 0xFF	; 255
    5170:	60 81       	ld	r22, Z
    5172:	71 81       	ldd	r23, Z+1	; 0x01
    5174:	82 81       	ldd	r24, Z+2	; 0x02
    5176:	93 81       	ldd	r25, Z+3	; 0x03
    5178:	20 e0       	ldi	r18, 0x00	; 0
    517a:	30 e0       	ldi	r19, 0x00	; 0
    517c:	4a ef       	ldi	r20, 0xFA	; 250
    517e:	54 e4       	ldi	r21, 0x44	; 68
    5180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5184:	dc 01       	movw	r26, r24
    5186:	cb 01       	movw	r24, r22
    5188:	f8 01       	movw	r30, r16
    518a:	80 83       	st	Z, r24
    518c:	91 83       	std	Z+1, r25	; 0x01
    518e:	a2 83       	std	Z+2, r26	; 0x02
    5190:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5192:	fe 01       	movw	r30, r28
    5194:	e3 5b       	subi	r30, 0xB3	; 179
    5196:	ff 4f       	sbci	r31, 0xFF	; 255
    5198:	60 81       	ld	r22, Z
    519a:	71 81       	ldd	r23, Z+1	; 0x01
    519c:	82 81       	ldd	r24, Z+2	; 0x02
    519e:	93 81       	ldd	r25, Z+3	; 0x03
    51a0:	20 e0       	ldi	r18, 0x00	; 0
    51a2:	30 e0       	ldi	r19, 0x00	; 0
    51a4:	40 e8       	ldi	r20, 0x80	; 128
    51a6:	5f e3       	ldi	r21, 0x3F	; 63
    51a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    51ac:	88 23       	and	r24, r24
    51ae:	44 f4       	brge	.+16     	; 0x51c0 <main+0x126>
		__ticks = 1;
    51b0:	fe 01       	movw	r30, r28
    51b2:	e5 5b       	subi	r30, 0xB5	; 181
    51b4:	ff 4f       	sbci	r31, 0xFF	; 255
    51b6:	81 e0       	ldi	r24, 0x01	; 1
    51b8:	90 e0       	ldi	r25, 0x00	; 0
    51ba:	91 83       	std	Z+1, r25	; 0x01
    51bc:	80 83       	st	Z, r24
    51be:	64 c0       	rjmp	.+200    	; 0x5288 <main+0x1ee>
	else if (__tmp > 65535)
    51c0:	fe 01       	movw	r30, r28
    51c2:	e3 5b       	subi	r30, 0xB3	; 179
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	60 81       	ld	r22, Z
    51c8:	71 81       	ldd	r23, Z+1	; 0x01
    51ca:	82 81       	ldd	r24, Z+2	; 0x02
    51cc:	93 81       	ldd	r25, Z+3	; 0x03
    51ce:	20 e0       	ldi	r18, 0x00	; 0
    51d0:	3f ef       	ldi	r19, 0xFF	; 255
    51d2:	4f e7       	ldi	r20, 0x7F	; 127
    51d4:	57 e4       	ldi	r21, 0x47	; 71
    51d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51da:	18 16       	cp	r1, r24
    51dc:	0c f0       	brlt	.+2      	; 0x51e0 <main+0x146>
    51de:	43 c0       	rjmp	.+134    	; 0x5266 <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51e0:	fe 01       	movw	r30, r28
    51e2:	ef 5a       	subi	r30, 0xAF	; 175
    51e4:	ff 4f       	sbci	r31, 0xFF	; 255
    51e6:	60 81       	ld	r22, Z
    51e8:	71 81       	ldd	r23, Z+1	; 0x01
    51ea:	82 81       	ldd	r24, Z+2	; 0x02
    51ec:	93 81       	ldd	r25, Z+3	; 0x03
    51ee:	20 e0       	ldi	r18, 0x00	; 0
    51f0:	30 e0       	ldi	r19, 0x00	; 0
    51f2:	40 e2       	ldi	r20, 0x20	; 32
    51f4:	51 e4       	ldi	r21, 0x41	; 65
    51f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51fa:	dc 01       	movw	r26, r24
    51fc:	cb 01       	movw	r24, r22
    51fe:	8e 01       	movw	r16, r28
    5200:	05 5b       	subi	r16, 0xB5	; 181
    5202:	1f 4f       	sbci	r17, 0xFF	; 255
    5204:	bc 01       	movw	r22, r24
    5206:	cd 01       	movw	r24, r26
    5208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    520c:	dc 01       	movw	r26, r24
    520e:	cb 01       	movw	r24, r22
    5210:	f8 01       	movw	r30, r16
    5212:	91 83       	std	Z+1, r25	; 0x01
    5214:	80 83       	st	Z, r24
    5216:	1f c0       	rjmp	.+62     	; 0x5256 <main+0x1bc>
    5218:	fe 01       	movw	r30, r28
    521a:	e7 5b       	subi	r30, 0xB7	; 183
    521c:	ff 4f       	sbci	r31, 0xFF	; 255
    521e:	88 ec       	ldi	r24, 0xC8	; 200
    5220:	90 e0       	ldi	r25, 0x00	; 0
    5222:	91 83       	std	Z+1, r25	; 0x01
    5224:	80 83       	st	Z, r24
    5226:	fe 01       	movw	r30, r28
    5228:	e7 5b       	subi	r30, 0xB7	; 183
    522a:	ff 4f       	sbci	r31, 0xFF	; 255
    522c:	80 81       	ld	r24, Z
    522e:	91 81       	ldd	r25, Z+1	; 0x01
    5230:	01 97       	sbiw	r24, 0x01	; 1
    5232:	f1 f7       	brne	.-4      	; 0x5230 <main+0x196>
    5234:	fe 01       	movw	r30, r28
    5236:	e7 5b       	subi	r30, 0xB7	; 183
    5238:	ff 4f       	sbci	r31, 0xFF	; 255
    523a:	91 83       	std	Z+1, r25	; 0x01
    523c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    523e:	de 01       	movw	r26, r28
    5240:	a5 5b       	subi	r26, 0xB5	; 181
    5242:	bf 4f       	sbci	r27, 0xFF	; 255
    5244:	fe 01       	movw	r30, r28
    5246:	e5 5b       	subi	r30, 0xB5	; 181
    5248:	ff 4f       	sbci	r31, 0xFF	; 255
    524a:	80 81       	ld	r24, Z
    524c:	91 81       	ldd	r25, Z+1	; 0x01
    524e:	01 97       	sbiw	r24, 0x01	; 1
    5250:	11 96       	adiw	r26, 0x01	; 1
    5252:	9c 93       	st	X, r25
    5254:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5256:	fe 01       	movw	r30, r28
    5258:	e5 5b       	subi	r30, 0xB5	; 181
    525a:	ff 4f       	sbci	r31, 0xFF	; 255
    525c:	80 81       	ld	r24, Z
    525e:	91 81       	ldd	r25, Z+1	; 0x01
    5260:	00 97       	sbiw	r24, 0x00	; 0
    5262:	d1 f6       	brne	.-76     	; 0x5218 <main+0x17e>
    5264:	27 c0       	rjmp	.+78     	; 0x52b4 <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5266:	8e 01       	movw	r16, r28
    5268:	05 5b       	subi	r16, 0xB5	; 181
    526a:	1f 4f       	sbci	r17, 0xFF	; 255
    526c:	fe 01       	movw	r30, r28
    526e:	e3 5b       	subi	r30, 0xB3	; 179
    5270:	ff 4f       	sbci	r31, 0xFF	; 255
    5272:	60 81       	ld	r22, Z
    5274:	71 81       	ldd	r23, Z+1	; 0x01
    5276:	82 81       	ldd	r24, Z+2	; 0x02
    5278:	93 81       	ldd	r25, Z+3	; 0x03
    527a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    527e:	dc 01       	movw	r26, r24
    5280:	cb 01       	movw	r24, r22
    5282:	f8 01       	movw	r30, r16
    5284:	91 83       	std	Z+1, r25	; 0x01
    5286:	80 83       	st	Z, r24
    5288:	de 01       	movw	r26, r28
    528a:	a9 5b       	subi	r26, 0xB9	; 185
    528c:	bf 4f       	sbci	r27, 0xFF	; 255
    528e:	fe 01       	movw	r30, r28
    5290:	e5 5b       	subi	r30, 0xB5	; 181
    5292:	ff 4f       	sbci	r31, 0xFF	; 255
    5294:	80 81       	ld	r24, Z
    5296:	91 81       	ldd	r25, Z+1	; 0x01
    5298:	8d 93       	st	X+, r24
    529a:	9c 93       	st	X, r25
    529c:	fe 01       	movw	r30, r28
    529e:	e9 5b       	subi	r30, 0xB9	; 185
    52a0:	ff 4f       	sbci	r31, 0xFF	; 255
    52a2:	80 81       	ld	r24, Z
    52a4:	91 81       	ldd	r25, Z+1	; 0x01
    52a6:	01 97       	sbiw	r24, 0x01	; 1
    52a8:	f1 f7       	brne	.-4      	; 0x52a6 <main+0x20c>
    52aa:	fe 01       	movw	r30, r28
    52ac:	e9 5b       	subi	r30, 0xB9	; 185
    52ae:	ff 4f       	sbci	r31, 0xFF	; 255
    52b0:	91 83       	std	Z+1, r25	; 0x01
    52b2:	80 83       	st	Z, r24
		{
			_delay_ms(1000);
			LCD_voidClearScreen();
    52b4:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    52b8:	fe 01       	movw	r30, r28
    52ba:	ed 5b       	subi	r30, 0xBD	; 189
    52bc:	ff 4f       	sbci	r31, 0xFF	; 255
    52be:	80 e0       	ldi	r24, 0x00	; 0
    52c0:	90 e0       	ldi	r25, 0x00	; 0
    52c2:	a0 ea       	ldi	r26, 0xA0	; 160
    52c4:	b1 e4       	ldi	r27, 0x41	; 65
    52c6:	80 83       	st	Z, r24
    52c8:	91 83       	std	Z+1, r25	; 0x01
    52ca:	a2 83       	std	Z+2, r26	; 0x02
    52cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52ce:	8e 01       	movw	r16, r28
    52d0:	01 5c       	subi	r16, 0xC1	; 193
    52d2:	1f 4f       	sbci	r17, 0xFF	; 255
    52d4:	fe 01       	movw	r30, r28
    52d6:	ed 5b       	subi	r30, 0xBD	; 189
    52d8:	ff 4f       	sbci	r31, 0xFF	; 255
    52da:	60 81       	ld	r22, Z
    52dc:	71 81       	ldd	r23, Z+1	; 0x01
    52de:	82 81       	ldd	r24, Z+2	; 0x02
    52e0:	93 81       	ldd	r25, Z+3	; 0x03
    52e2:	20 e0       	ldi	r18, 0x00	; 0
    52e4:	30 e0       	ldi	r19, 0x00	; 0
    52e6:	4a ef       	ldi	r20, 0xFA	; 250
    52e8:	54 e4       	ldi	r21, 0x44	; 68
    52ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52ee:	dc 01       	movw	r26, r24
    52f0:	cb 01       	movw	r24, r22
    52f2:	f8 01       	movw	r30, r16
    52f4:	80 83       	st	Z, r24
    52f6:	91 83       	std	Z+1, r25	; 0x01
    52f8:	a2 83       	std	Z+2, r26	; 0x02
    52fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    52fc:	fe 01       	movw	r30, r28
    52fe:	ff 96       	adiw	r30, 0x3f	; 63
    5300:	60 81       	ld	r22, Z
    5302:	71 81       	ldd	r23, Z+1	; 0x01
    5304:	82 81       	ldd	r24, Z+2	; 0x02
    5306:	93 81       	ldd	r25, Z+3	; 0x03
    5308:	20 e0       	ldi	r18, 0x00	; 0
    530a:	30 e0       	ldi	r19, 0x00	; 0
    530c:	40 e8       	ldi	r20, 0x80	; 128
    530e:	5f e3       	ldi	r21, 0x3F	; 63
    5310:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5314:	88 23       	and	r24, r24
    5316:	2c f4       	brge	.+10     	; 0x5322 <main+0x288>
		__ticks = 1;
    5318:	81 e0       	ldi	r24, 0x01	; 1
    531a:	90 e0       	ldi	r25, 0x00	; 0
    531c:	9e af       	std	Y+62, r25	; 0x3e
    531e:	8d af       	std	Y+61, r24	; 0x3d
    5320:	46 c0       	rjmp	.+140    	; 0x53ae <main+0x314>
	else if (__tmp > 65535)
    5322:	fe 01       	movw	r30, r28
    5324:	ff 96       	adiw	r30, 0x3f	; 63
    5326:	60 81       	ld	r22, Z
    5328:	71 81       	ldd	r23, Z+1	; 0x01
    532a:	82 81       	ldd	r24, Z+2	; 0x02
    532c:	93 81       	ldd	r25, Z+3	; 0x03
    532e:	20 e0       	ldi	r18, 0x00	; 0
    5330:	3f ef       	ldi	r19, 0xFF	; 255
    5332:	4f e7       	ldi	r20, 0x7F	; 127
    5334:	57 e4       	ldi	r21, 0x47	; 71
    5336:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    533a:	18 16       	cp	r1, r24
    533c:	64 f5       	brge	.+88     	; 0x5396 <main+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    533e:	fe 01       	movw	r30, r28
    5340:	ed 5b       	subi	r30, 0xBD	; 189
    5342:	ff 4f       	sbci	r31, 0xFF	; 255
    5344:	60 81       	ld	r22, Z
    5346:	71 81       	ldd	r23, Z+1	; 0x01
    5348:	82 81       	ldd	r24, Z+2	; 0x02
    534a:	93 81       	ldd	r25, Z+3	; 0x03
    534c:	20 e0       	ldi	r18, 0x00	; 0
    534e:	30 e0       	ldi	r19, 0x00	; 0
    5350:	40 e2       	ldi	r20, 0x20	; 32
    5352:	51 e4       	ldi	r21, 0x41	; 65
    5354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5358:	dc 01       	movw	r26, r24
    535a:	cb 01       	movw	r24, r22
    535c:	bc 01       	movw	r22, r24
    535e:	cd 01       	movw	r24, r26
    5360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5364:	dc 01       	movw	r26, r24
    5366:	cb 01       	movw	r24, r22
    5368:	9e af       	std	Y+62, r25	; 0x3e
    536a:	8d af       	std	Y+61, r24	; 0x3d
    536c:	0f c0       	rjmp	.+30     	; 0x538c <main+0x2f2>
    536e:	88 ec       	ldi	r24, 0xC8	; 200
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	9c af       	std	Y+60, r25	; 0x3c
    5374:	8b af       	std	Y+59, r24	; 0x3b
    5376:	8b ad       	ldd	r24, Y+59	; 0x3b
    5378:	9c ad       	ldd	r25, Y+60	; 0x3c
    537a:	01 97       	sbiw	r24, 0x01	; 1
    537c:	f1 f7       	brne	.-4      	; 0x537a <main+0x2e0>
    537e:	9c af       	std	Y+60, r25	; 0x3c
    5380:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5382:	8d ad       	ldd	r24, Y+61	; 0x3d
    5384:	9e ad       	ldd	r25, Y+62	; 0x3e
    5386:	01 97       	sbiw	r24, 0x01	; 1
    5388:	9e af       	std	Y+62, r25	; 0x3e
    538a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    538c:	8d ad       	ldd	r24, Y+61	; 0x3d
    538e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5390:	00 97       	sbiw	r24, 0x00	; 0
    5392:	69 f7       	brne	.-38     	; 0x536e <main+0x2d4>
    5394:	16 c0       	rjmp	.+44     	; 0x53c2 <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5396:	fe 01       	movw	r30, r28
    5398:	ff 96       	adiw	r30, 0x3f	; 63
    539a:	60 81       	ld	r22, Z
    539c:	71 81       	ldd	r23, Z+1	; 0x01
    539e:	82 81       	ldd	r24, Z+2	; 0x02
    53a0:	93 81       	ldd	r25, Z+3	; 0x03
    53a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53a6:	dc 01       	movw	r26, r24
    53a8:	cb 01       	movw	r24, r22
    53aa:	9e af       	std	Y+62, r25	; 0x3e
    53ac:	8d af       	std	Y+61, r24	; 0x3d
    53ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    53b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    53b2:	9a af       	std	Y+58, r25	; 0x3a
    53b4:	89 af       	std	Y+57, r24	; 0x39
    53b6:	89 ad       	ldd	r24, Y+57	; 0x39
    53b8:	9a ad       	ldd	r25, Y+58	; 0x3a
    53ba:	01 97       	sbiw	r24, 0x01	; 1
    53bc:	f1 f7       	brne	.-4      	; 0x53ba <main+0x320>
    53be:	9a af       	std	Y+58, r25	; 0x3a
    53c0:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(20);
			LCD_voidWriteString((u8*)"Welcome To Motor");
    53c2:	80 e2       	ldi	r24, 0x20	; 32
    53c4:	91 e0       	ldi	r25, 0x01	; 1
    53c6:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
			LCD_u8GoToXY(LCD_u8_LINE2,0);
    53ca:	82 e0       	ldi	r24, 0x02	; 2
    53cc:	60 e0       	ldi	r22, 0x00	; 0
    53ce:	0e 94 60 1a 	call	0x34c0	; 0x34c0 <LCD_u8GoToXY>
			LCD_voidWriteString((u8*)"Dashboard");
    53d2:	81 e3       	ldi	r24, 0x31	; 49
    53d4:	91 e0       	ldi	r25, 0x01	; 1
    53d6:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
    53da:	80 e0       	ldi	r24, 0x00	; 0
    53dc:	90 e8       	ldi	r25, 0x80	; 128
    53de:	ab e3       	ldi	r26, 0x3B	; 59
    53e0:	b5 e4       	ldi	r27, 0x45	; 69
    53e2:	8d ab       	std	Y+53, r24	; 0x35
    53e4:	9e ab       	std	Y+54, r25	; 0x36
    53e6:	af ab       	std	Y+55, r26	; 0x37
    53e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ea:	6d a9       	ldd	r22, Y+53	; 0x35
    53ec:	7e a9       	ldd	r23, Y+54	; 0x36
    53ee:	8f a9       	ldd	r24, Y+55	; 0x37
    53f0:	98 ad       	ldd	r25, Y+56	; 0x38
    53f2:	20 e0       	ldi	r18, 0x00	; 0
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	4a ef       	ldi	r20, 0xFA	; 250
    53f8:	54 e4       	ldi	r21, 0x44	; 68
    53fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53fe:	dc 01       	movw	r26, r24
    5400:	cb 01       	movw	r24, r22
    5402:	89 ab       	std	Y+49, r24	; 0x31
    5404:	9a ab       	std	Y+50, r25	; 0x32
    5406:	ab ab       	std	Y+51, r26	; 0x33
    5408:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    540a:	69 a9       	ldd	r22, Y+49	; 0x31
    540c:	7a a9       	ldd	r23, Y+50	; 0x32
    540e:	8b a9       	ldd	r24, Y+51	; 0x33
    5410:	9c a9       	ldd	r25, Y+52	; 0x34
    5412:	20 e0       	ldi	r18, 0x00	; 0
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	40 e8       	ldi	r20, 0x80	; 128
    5418:	5f e3       	ldi	r21, 0x3F	; 63
    541a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    541e:	88 23       	and	r24, r24
    5420:	2c f4       	brge	.+10     	; 0x542c <main+0x392>
		__ticks = 1;
    5422:	81 e0       	ldi	r24, 0x01	; 1
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	98 ab       	std	Y+48, r25	; 0x30
    5428:	8f a7       	std	Y+47, r24	; 0x2f
    542a:	3f c0       	rjmp	.+126    	; 0x54aa <main+0x410>
	else if (__tmp > 65535)
    542c:	69 a9       	ldd	r22, Y+49	; 0x31
    542e:	7a a9       	ldd	r23, Y+50	; 0x32
    5430:	8b a9       	ldd	r24, Y+51	; 0x33
    5432:	9c a9       	ldd	r25, Y+52	; 0x34
    5434:	20 e0       	ldi	r18, 0x00	; 0
    5436:	3f ef       	ldi	r19, 0xFF	; 255
    5438:	4f e7       	ldi	r20, 0x7F	; 127
    543a:	57 e4       	ldi	r21, 0x47	; 71
    543c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5440:	18 16       	cp	r1, r24
    5442:	4c f5       	brge	.+82     	; 0x5496 <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5444:	6d a9       	ldd	r22, Y+53	; 0x35
    5446:	7e a9       	ldd	r23, Y+54	; 0x36
    5448:	8f a9       	ldd	r24, Y+55	; 0x37
    544a:	98 ad       	ldd	r25, Y+56	; 0x38
    544c:	20 e0       	ldi	r18, 0x00	; 0
    544e:	30 e0       	ldi	r19, 0x00	; 0
    5450:	40 e2       	ldi	r20, 0x20	; 32
    5452:	51 e4       	ldi	r21, 0x41	; 65
    5454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5458:	dc 01       	movw	r26, r24
    545a:	cb 01       	movw	r24, r22
    545c:	bc 01       	movw	r22, r24
    545e:	cd 01       	movw	r24, r26
    5460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5464:	dc 01       	movw	r26, r24
    5466:	cb 01       	movw	r24, r22
    5468:	98 ab       	std	Y+48, r25	; 0x30
    546a:	8f a7       	std	Y+47, r24	; 0x2f
    546c:	0f c0       	rjmp	.+30     	; 0x548c <main+0x3f2>
    546e:	88 ec       	ldi	r24, 0xC8	; 200
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	9e a7       	std	Y+46, r25	; 0x2e
    5474:	8d a7       	std	Y+45, r24	; 0x2d
    5476:	8d a5       	ldd	r24, Y+45	; 0x2d
    5478:	9e a5       	ldd	r25, Y+46	; 0x2e
    547a:	01 97       	sbiw	r24, 0x01	; 1
    547c:	f1 f7       	brne	.-4      	; 0x547a <main+0x3e0>
    547e:	9e a7       	std	Y+46, r25	; 0x2e
    5480:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5482:	8f a5       	ldd	r24, Y+47	; 0x2f
    5484:	98 a9       	ldd	r25, Y+48	; 0x30
    5486:	01 97       	sbiw	r24, 0x01	; 1
    5488:	98 ab       	std	Y+48, r25	; 0x30
    548a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    548c:	8f a5       	ldd	r24, Y+47	; 0x2f
    548e:	98 a9       	ldd	r25, Y+48	; 0x30
    5490:	00 97       	sbiw	r24, 0x00	; 0
    5492:	69 f7       	brne	.-38     	; 0x546e <main+0x3d4>
    5494:	14 c0       	rjmp	.+40     	; 0x54be <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5496:	69 a9       	ldd	r22, Y+49	; 0x31
    5498:	7a a9       	ldd	r23, Y+50	; 0x32
    549a:	8b a9       	ldd	r24, Y+51	; 0x33
    549c:	9c a9       	ldd	r25, Y+52	; 0x34
    549e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54a2:	dc 01       	movw	r26, r24
    54a4:	cb 01       	movw	r24, r22
    54a6:	98 ab       	std	Y+48, r25	; 0x30
    54a8:	8f a7       	std	Y+47, r24	; 0x2f
    54aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    54ac:	98 a9       	ldd	r25, Y+48	; 0x30
    54ae:	9c a7       	std	Y+44, r25	; 0x2c
    54b0:	8b a7       	std	Y+43, r24	; 0x2b
    54b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    54b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    54b6:	01 97       	sbiw	r24, 0x01	; 1
    54b8:	f1 f7       	brne	.-4      	; 0x54b6 <main+0x41c>
    54ba:	9c a7       	std	Y+44, r25	; 0x2c
    54bc:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(3000);
			Dashboard_FrameOne();
    54be:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Dashboard_FrameOne>
    54c2:	ff cf       	rjmp	.-2      	; 0x54c2 <main+0x428>
			while(1)
			{
			}
    54c4:	80 e0       	ldi	r24, 0x00	; 0
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	aa e7       	ldi	r26, 0x7A	; 122
    54ca:	b4 e4       	ldi	r27, 0x44	; 68
    54cc:	8f a3       	std	Y+39, r24	; 0x27
    54ce:	98 a7       	std	Y+40, r25	; 0x28
    54d0:	a9 a7       	std	Y+41, r26	; 0x29
    54d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54d4:	6f a1       	ldd	r22, Y+39	; 0x27
    54d6:	78 a5       	ldd	r23, Y+40	; 0x28
    54d8:	89 a5       	ldd	r24, Y+41	; 0x29
    54da:	9a a5       	ldd	r25, Y+42	; 0x2a
    54dc:	20 e0       	ldi	r18, 0x00	; 0
    54de:	30 e0       	ldi	r19, 0x00	; 0
    54e0:	4a ef       	ldi	r20, 0xFA	; 250
    54e2:	54 e4       	ldi	r21, 0x44	; 68
    54e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54e8:	dc 01       	movw	r26, r24
    54ea:	cb 01       	movw	r24, r22
    54ec:	8b a3       	std	Y+35, r24	; 0x23
    54ee:	9c a3       	std	Y+36, r25	; 0x24
    54f0:	ad a3       	std	Y+37, r26	; 0x25
    54f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    54f4:	6b a1       	ldd	r22, Y+35	; 0x23
    54f6:	7c a1       	ldd	r23, Y+36	; 0x24
    54f8:	8d a1       	ldd	r24, Y+37	; 0x25
    54fa:	9e a1       	ldd	r25, Y+38	; 0x26
    54fc:	20 e0       	ldi	r18, 0x00	; 0
    54fe:	30 e0       	ldi	r19, 0x00	; 0
    5500:	40 e8       	ldi	r20, 0x80	; 128
    5502:	5f e3       	ldi	r21, 0x3F	; 63
    5504:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5508:	88 23       	and	r24, r24
    550a:	2c f4       	brge	.+10     	; 0x5516 <main+0x47c>
		__ticks = 1;
    550c:	81 e0       	ldi	r24, 0x01	; 1
    550e:	90 e0       	ldi	r25, 0x00	; 0
    5510:	9a a3       	std	Y+34, r25	; 0x22
    5512:	89 a3       	std	Y+33, r24	; 0x21
    5514:	3f c0       	rjmp	.+126    	; 0x5594 <main+0x4fa>
	else if (__tmp > 65535)
    5516:	6b a1       	ldd	r22, Y+35	; 0x23
    5518:	7c a1       	ldd	r23, Y+36	; 0x24
    551a:	8d a1       	ldd	r24, Y+37	; 0x25
    551c:	9e a1       	ldd	r25, Y+38	; 0x26
    551e:	20 e0       	ldi	r18, 0x00	; 0
    5520:	3f ef       	ldi	r19, 0xFF	; 255
    5522:	4f e7       	ldi	r20, 0x7F	; 127
    5524:	57 e4       	ldi	r21, 0x47	; 71
    5526:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    552a:	18 16       	cp	r1, r24
    552c:	4c f5       	brge	.+82     	; 0x5580 <main+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    552e:	6f a1       	ldd	r22, Y+39	; 0x27
    5530:	78 a5       	ldd	r23, Y+40	; 0x28
    5532:	89 a5       	ldd	r24, Y+41	; 0x29
    5534:	9a a5       	ldd	r25, Y+42	; 0x2a
    5536:	20 e0       	ldi	r18, 0x00	; 0
    5538:	30 e0       	ldi	r19, 0x00	; 0
    553a:	40 e2       	ldi	r20, 0x20	; 32
    553c:	51 e4       	ldi	r21, 0x41	; 65
    553e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5542:	dc 01       	movw	r26, r24
    5544:	cb 01       	movw	r24, r22
    5546:	bc 01       	movw	r22, r24
    5548:	cd 01       	movw	r24, r26
    554a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    554e:	dc 01       	movw	r26, r24
    5550:	cb 01       	movw	r24, r22
    5552:	9a a3       	std	Y+34, r25	; 0x22
    5554:	89 a3       	std	Y+33, r24	; 0x21
    5556:	0f c0       	rjmp	.+30     	; 0x5576 <main+0x4dc>
    5558:	88 ec       	ldi	r24, 0xC8	; 200
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	98 a3       	std	Y+32, r25	; 0x20
    555e:	8f 8f       	std	Y+31, r24	; 0x1f
    5560:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5562:	98 a1       	ldd	r25, Y+32	; 0x20
    5564:	01 97       	sbiw	r24, 0x01	; 1
    5566:	f1 f7       	brne	.-4      	; 0x5564 <main+0x4ca>
    5568:	98 a3       	std	Y+32, r25	; 0x20
    556a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    556c:	89 a1       	ldd	r24, Y+33	; 0x21
    556e:	9a a1       	ldd	r25, Y+34	; 0x22
    5570:	01 97       	sbiw	r24, 0x01	; 1
    5572:	9a a3       	std	Y+34, r25	; 0x22
    5574:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5576:	89 a1       	ldd	r24, Y+33	; 0x21
    5578:	9a a1       	ldd	r25, Y+34	; 0x22
    557a:	00 97       	sbiw	r24, 0x00	; 0
    557c:	69 f7       	brne	.-38     	; 0x5558 <main+0x4be>
    557e:	14 c0       	rjmp	.+40     	; 0x55a8 <main+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5580:	6b a1       	ldd	r22, Y+35	; 0x23
    5582:	7c a1       	ldd	r23, Y+36	; 0x24
    5584:	8d a1       	ldd	r24, Y+37	; 0x25
    5586:	9e a1       	ldd	r25, Y+38	; 0x26
    5588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    558c:	dc 01       	movw	r26, r24
    558e:	cb 01       	movw	r24, r22
    5590:	9a a3       	std	Y+34, r25	; 0x22
    5592:	89 a3       	std	Y+33, r24	; 0x21
    5594:	89 a1       	ldd	r24, Y+33	; 0x21
    5596:	9a a1       	ldd	r25, Y+34	; 0x22
    5598:	9e 8f       	std	Y+30, r25	; 0x1e
    559a:	8d 8f       	std	Y+29, r24	; 0x1d
    559c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    559e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55a0:	01 97       	sbiw	r24, 0x01	; 1
    55a2:	f1 f7       	brne	.-4      	; 0x55a0 <main+0x506>
    55a4:	9e 8f       	std	Y+30, r25	; 0x1e
    55a6:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else
		{
			_delay_ms(1000);
			LCD_voidClearScreen();
    55a8:	0e 94 92 1a 	call	0x3524	; 0x3524 <LCD_voidClearScreen>
    55ac:	80 e0       	ldi	r24, 0x00	; 0
    55ae:	90 e0       	ldi	r25, 0x00	; 0
    55b0:	a0 ea       	ldi	r26, 0xA0	; 160
    55b2:	b1 e4       	ldi	r27, 0x41	; 65
    55b4:	89 8f       	std	Y+25, r24	; 0x19
    55b6:	9a 8f       	std	Y+26, r25	; 0x1a
    55b8:	ab 8f       	std	Y+27, r26	; 0x1b
    55ba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55bc:	69 8d       	ldd	r22, Y+25	; 0x19
    55be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    55c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    55c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    55c4:	20 e0       	ldi	r18, 0x00	; 0
    55c6:	30 e0       	ldi	r19, 0x00	; 0
    55c8:	4a ef       	ldi	r20, 0xFA	; 250
    55ca:	54 e4       	ldi	r21, 0x44	; 68
    55cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55d0:	dc 01       	movw	r26, r24
    55d2:	cb 01       	movw	r24, r22
    55d4:	8d 8b       	std	Y+21, r24	; 0x15
    55d6:	9e 8b       	std	Y+22, r25	; 0x16
    55d8:	af 8b       	std	Y+23, r26	; 0x17
    55da:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    55dc:	6d 89       	ldd	r22, Y+21	; 0x15
    55de:	7e 89       	ldd	r23, Y+22	; 0x16
    55e0:	8f 89       	ldd	r24, Y+23	; 0x17
    55e2:	98 8d       	ldd	r25, Y+24	; 0x18
    55e4:	20 e0       	ldi	r18, 0x00	; 0
    55e6:	30 e0       	ldi	r19, 0x00	; 0
    55e8:	40 e8       	ldi	r20, 0x80	; 128
    55ea:	5f e3       	ldi	r21, 0x3F	; 63
    55ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    55f0:	88 23       	and	r24, r24
    55f2:	2c f4       	brge	.+10     	; 0x55fe <main+0x564>
		__ticks = 1;
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	9c 8b       	std	Y+20, r25	; 0x14
    55fa:	8b 8b       	std	Y+19, r24	; 0x13
    55fc:	3f c0       	rjmp	.+126    	; 0x567c <main+0x5e2>
	else if (__tmp > 65535)
    55fe:	6d 89       	ldd	r22, Y+21	; 0x15
    5600:	7e 89       	ldd	r23, Y+22	; 0x16
    5602:	8f 89       	ldd	r24, Y+23	; 0x17
    5604:	98 8d       	ldd	r25, Y+24	; 0x18
    5606:	20 e0       	ldi	r18, 0x00	; 0
    5608:	3f ef       	ldi	r19, 0xFF	; 255
    560a:	4f e7       	ldi	r20, 0x7F	; 127
    560c:	57 e4       	ldi	r21, 0x47	; 71
    560e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5612:	18 16       	cp	r1, r24
    5614:	4c f5       	brge	.+82     	; 0x5668 <main+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5616:	69 8d       	ldd	r22, Y+25	; 0x19
    5618:	7a 8d       	ldd	r23, Y+26	; 0x1a
    561a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    561c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    561e:	20 e0       	ldi	r18, 0x00	; 0
    5620:	30 e0       	ldi	r19, 0x00	; 0
    5622:	40 e2       	ldi	r20, 0x20	; 32
    5624:	51 e4       	ldi	r21, 0x41	; 65
    5626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    562a:	dc 01       	movw	r26, r24
    562c:	cb 01       	movw	r24, r22
    562e:	bc 01       	movw	r22, r24
    5630:	cd 01       	movw	r24, r26
    5632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5636:	dc 01       	movw	r26, r24
    5638:	cb 01       	movw	r24, r22
    563a:	9c 8b       	std	Y+20, r25	; 0x14
    563c:	8b 8b       	std	Y+19, r24	; 0x13
    563e:	0f c0       	rjmp	.+30     	; 0x565e <main+0x5c4>
    5640:	88 ec       	ldi	r24, 0xC8	; 200
    5642:	90 e0       	ldi	r25, 0x00	; 0
    5644:	9a 8b       	std	Y+18, r25	; 0x12
    5646:	89 8b       	std	Y+17, r24	; 0x11
    5648:	89 89       	ldd	r24, Y+17	; 0x11
    564a:	9a 89       	ldd	r25, Y+18	; 0x12
    564c:	01 97       	sbiw	r24, 0x01	; 1
    564e:	f1 f7       	brne	.-4      	; 0x564c <main+0x5b2>
    5650:	9a 8b       	std	Y+18, r25	; 0x12
    5652:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5654:	8b 89       	ldd	r24, Y+19	; 0x13
    5656:	9c 89       	ldd	r25, Y+20	; 0x14
    5658:	01 97       	sbiw	r24, 0x01	; 1
    565a:	9c 8b       	std	Y+20, r25	; 0x14
    565c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    565e:	8b 89       	ldd	r24, Y+19	; 0x13
    5660:	9c 89       	ldd	r25, Y+20	; 0x14
    5662:	00 97       	sbiw	r24, 0x00	; 0
    5664:	69 f7       	brne	.-38     	; 0x5640 <main+0x5a6>
    5666:	14 c0       	rjmp	.+40     	; 0x5690 <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5668:	6d 89       	ldd	r22, Y+21	; 0x15
    566a:	7e 89       	ldd	r23, Y+22	; 0x16
    566c:	8f 89       	ldd	r24, Y+23	; 0x17
    566e:	98 8d       	ldd	r25, Y+24	; 0x18
    5670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	9c 8b       	std	Y+20, r25	; 0x14
    567a:	8b 8b       	std	Y+19, r24	; 0x13
    567c:	8b 89       	ldd	r24, Y+19	; 0x13
    567e:	9c 89       	ldd	r25, Y+20	; 0x14
    5680:	98 8b       	std	Y+16, r25	; 0x10
    5682:	8f 87       	std	Y+15, r24	; 0x0f
    5684:	8f 85       	ldd	r24, Y+15	; 0x0f
    5686:	98 89       	ldd	r25, Y+16	; 0x10
    5688:	01 97       	sbiw	r24, 0x01	; 1
    568a:	f1 f7       	brne	.-4      	; 0x5688 <main+0x5ee>
    568c:	98 8b       	std	Y+16, r25	; 0x10
    568e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			LCD_voidWriteString((u8*)"GoodLuck!");
    5690:	8b e3       	ldi	r24, 0x3B	; 59
    5692:	91 e0       	ldi	r25, 0x01	; 1
    5694:	0e 94 cd 19 	call	0x339a	; 0x339a <LCD_voidWriteString>
    5698:	80 e0       	ldi	r24, 0x00	; 0
    569a:	90 e8       	ldi	r25, 0x80	; 128
    569c:	ab e3       	ldi	r26, 0x3B	; 59
    569e:	b5 e4       	ldi	r27, 0x45	; 69
    56a0:	8b 87       	std	Y+11, r24	; 0x0b
    56a2:	9c 87       	std	Y+12, r25	; 0x0c
    56a4:	ad 87       	std	Y+13, r26	; 0x0d
    56a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    56aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    56ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    56ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    56b0:	20 e0       	ldi	r18, 0x00	; 0
    56b2:	30 e0       	ldi	r19, 0x00	; 0
    56b4:	4a ef       	ldi	r20, 0xFA	; 250
    56b6:	54 e4       	ldi	r21, 0x44	; 68
    56b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56bc:	dc 01       	movw	r26, r24
    56be:	cb 01       	movw	r24, r22
    56c0:	8f 83       	std	Y+7, r24	; 0x07
    56c2:	98 87       	std	Y+8, r25	; 0x08
    56c4:	a9 87       	std	Y+9, r26	; 0x09
    56c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    56c8:	6f 81       	ldd	r22, Y+7	; 0x07
    56ca:	78 85       	ldd	r23, Y+8	; 0x08
    56cc:	89 85       	ldd	r24, Y+9	; 0x09
    56ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    56d0:	20 e0       	ldi	r18, 0x00	; 0
    56d2:	30 e0       	ldi	r19, 0x00	; 0
    56d4:	40 e8       	ldi	r20, 0x80	; 128
    56d6:	5f e3       	ldi	r21, 0x3F	; 63
    56d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56dc:	88 23       	and	r24, r24
    56de:	2c f4       	brge	.+10     	; 0x56ea <main+0x650>
		__ticks = 1;
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	9e 83       	std	Y+6, r25	; 0x06
    56e6:	8d 83       	std	Y+5, r24	; 0x05
    56e8:	3f c0       	rjmp	.+126    	; 0x5768 <main+0x6ce>
	else if (__tmp > 65535)
    56ea:	6f 81       	ldd	r22, Y+7	; 0x07
    56ec:	78 85       	ldd	r23, Y+8	; 0x08
    56ee:	89 85       	ldd	r24, Y+9	; 0x09
    56f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    56f2:	20 e0       	ldi	r18, 0x00	; 0
    56f4:	3f ef       	ldi	r19, 0xFF	; 255
    56f6:	4f e7       	ldi	r20, 0x7F	; 127
    56f8:	57 e4       	ldi	r21, 0x47	; 71
    56fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    56fe:	18 16       	cp	r1, r24
    5700:	4c f5       	brge	.+82     	; 0x5754 <main+0x6ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5702:	6b 85       	ldd	r22, Y+11	; 0x0b
    5704:	7c 85       	ldd	r23, Y+12	; 0x0c
    5706:	8d 85       	ldd	r24, Y+13	; 0x0d
    5708:	9e 85       	ldd	r25, Y+14	; 0x0e
    570a:	20 e0       	ldi	r18, 0x00	; 0
    570c:	30 e0       	ldi	r19, 0x00	; 0
    570e:	40 e2       	ldi	r20, 0x20	; 32
    5710:	51 e4       	ldi	r21, 0x41	; 65
    5712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5716:	dc 01       	movw	r26, r24
    5718:	cb 01       	movw	r24, r22
    571a:	bc 01       	movw	r22, r24
    571c:	cd 01       	movw	r24, r26
    571e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	9e 83       	std	Y+6, r25	; 0x06
    5728:	8d 83       	std	Y+5, r24	; 0x05
    572a:	0f c0       	rjmp	.+30     	; 0x574a <main+0x6b0>
    572c:	88 ec       	ldi	r24, 0xC8	; 200
    572e:	90 e0       	ldi	r25, 0x00	; 0
    5730:	9c 83       	std	Y+4, r25	; 0x04
    5732:	8b 83       	std	Y+3, r24	; 0x03
    5734:	8b 81       	ldd	r24, Y+3	; 0x03
    5736:	9c 81       	ldd	r25, Y+4	; 0x04
    5738:	01 97       	sbiw	r24, 0x01	; 1
    573a:	f1 f7       	brne	.-4      	; 0x5738 <main+0x69e>
    573c:	9c 83       	std	Y+4, r25	; 0x04
    573e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5740:	8d 81       	ldd	r24, Y+5	; 0x05
    5742:	9e 81       	ldd	r25, Y+6	; 0x06
    5744:	01 97       	sbiw	r24, 0x01	; 1
    5746:	9e 83       	std	Y+6, r25	; 0x06
    5748:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    574a:	8d 81       	ldd	r24, Y+5	; 0x05
    574c:	9e 81       	ldd	r25, Y+6	; 0x06
    574e:	00 97       	sbiw	r24, 0x00	; 0
    5750:	69 f7       	brne	.-38     	; 0x572c <main+0x692>
    5752:	14 c0       	rjmp	.+40     	; 0x577c <main+0x6e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5754:	6f 81       	ldd	r22, Y+7	; 0x07
    5756:	78 85       	ldd	r23, Y+8	; 0x08
    5758:	89 85       	ldd	r24, Y+9	; 0x09
    575a:	9a 85       	ldd	r25, Y+10	; 0x0a
    575c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5760:	dc 01       	movw	r26, r24
    5762:	cb 01       	movw	r24, r22
    5764:	9e 83       	std	Y+6, r25	; 0x06
    5766:	8d 83       	std	Y+5, r24	; 0x05
    5768:	8d 81       	ldd	r24, Y+5	; 0x05
    576a:	9e 81       	ldd	r25, Y+6	; 0x06
    576c:	9a 83       	std	Y+2, r25	; 0x02
    576e:	89 83       	std	Y+1, r24	; 0x01
    5770:	89 81       	ldd	r24, Y+1	; 0x01
    5772:	9a 81       	ldd	r25, Y+2	; 0x02
    5774:	01 97       	sbiw	r24, 0x01	; 1
    5776:	f1 f7       	brne	.-4      	; 0x5774 <main+0x6da>
    5778:	9a 83       	std	Y+2, r25	; 0x02
    577a:	89 83       	std	Y+1, r24	; 0x01
    577c:	ff cf       	rjmp	.-2      	; 0x577c <main+0x6e2>

0000577e <__mulsi3>:
    577e:	62 9f       	mul	r22, r18
    5780:	d0 01       	movw	r26, r0
    5782:	73 9f       	mul	r23, r19
    5784:	f0 01       	movw	r30, r0
    5786:	82 9f       	mul	r24, r18
    5788:	e0 0d       	add	r30, r0
    578a:	f1 1d       	adc	r31, r1
    578c:	64 9f       	mul	r22, r20
    578e:	e0 0d       	add	r30, r0
    5790:	f1 1d       	adc	r31, r1
    5792:	92 9f       	mul	r25, r18
    5794:	f0 0d       	add	r31, r0
    5796:	83 9f       	mul	r24, r19
    5798:	f0 0d       	add	r31, r0
    579a:	74 9f       	mul	r23, r20
    579c:	f0 0d       	add	r31, r0
    579e:	65 9f       	mul	r22, r21
    57a0:	f0 0d       	add	r31, r0
    57a2:	99 27       	eor	r25, r25
    57a4:	72 9f       	mul	r23, r18
    57a6:	b0 0d       	add	r27, r0
    57a8:	e1 1d       	adc	r30, r1
    57aa:	f9 1f       	adc	r31, r25
    57ac:	63 9f       	mul	r22, r19
    57ae:	b0 0d       	add	r27, r0
    57b0:	e1 1d       	adc	r30, r1
    57b2:	f9 1f       	adc	r31, r25
    57b4:	bd 01       	movw	r22, r26
    57b6:	cf 01       	movw	r24, r30
    57b8:	11 24       	eor	r1, r1
    57ba:	08 95       	ret

000057bc <__udivmodsi4>:
    57bc:	a1 e2       	ldi	r26, 0x21	; 33
    57be:	1a 2e       	mov	r1, r26
    57c0:	aa 1b       	sub	r26, r26
    57c2:	bb 1b       	sub	r27, r27
    57c4:	fd 01       	movw	r30, r26
    57c6:	0d c0       	rjmp	.+26     	; 0x57e2 <__udivmodsi4_ep>

000057c8 <__udivmodsi4_loop>:
    57c8:	aa 1f       	adc	r26, r26
    57ca:	bb 1f       	adc	r27, r27
    57cc:	ee 1f       	adc	r30, r30
    57ce:	ff 1f       	adc	r31, r31
    57d0:	a2 17       	cp	r26, r18
    57d2:	b3 07       	cpc	r27, r19
    57d4:	e4 07       	cpc	r30, r20
    57d6:	f5 07       	cpc	r31, r21
    57d8:	20 f0       	brcs	.+8      	; 0x57e2 <__udivmodsi4_ep>
    57da:	a2 1b       	sub	r26, r18
    57dc:	b3 0b       	sbc	r27, r19
    57de:	e4 0b       	sbc	r30, r20
    57e0:	f5 0b       	sbc	r31, r21

000057e2 <__udivmodsi4_ep>:
    57e2:	66 1f       	adc	r22, r22
    57e4:	77 1f       	adc	r23, r23
    57e6:	88 1f       	adc	r24, r24
    57e8:	99 1f       	adc	r25, r25
    57ea:	1a 94       	dec	r1
    57ec:	69 f7       	brne	.-38     	; 0x57c8 <__udivmodsi4_loop>
    57ee:	60 95       	com	r22
    57f0:	70 95       	com	r23
    57f2:	80 95       	com	r24
    57f4:	90 95       	com	r25
    57f6:	9b 01       	movw	r18, r22
    57f8:	ac 01       	movw	r20, r24
    57fa:	bd 01       	movw	r22, r26
    57fc:	cf 01       	movw	r24, r30
    57fe:	08 95       	ret

00005800 <__prologue_saves__>:
    5800:	2f 92       	push	r2
    5802:	3f 92       	push	r3
    5804:	4f 92       	push	r4
    5806:	5f 92       	push	r5
    5808:	6f 92       	push	r6
    580a:	7f 92       	push	r7
    580c:	8f 92       	push	r8
    580e:	9f 92       	push	r9
    5810:	af 92       	push	r10
    5812:	bf 92       	push	r11
    5814:	cf 92       	push	r12
    5816:	df 92       	push	r13
    5818:	ef 92       	push	r14
    581a:	ff 92       	push	r15
    581c:	0f 93       	push	r16
    581e:	1f 93       	push	r17
    5820:	cf 93       	push	r28
    5822:	df 93       	push	r29
    5824:	cd b7       	in	r28, 0x3d	; 61
    5826:	de b7       	in	r29, 0x3e	; 62
    5828:	ca 1b       	sub	r28, r26
    582a:	db 0b       	sbc	r29, r27
    582c:	0f b6       	in	r0, 0x3f	; 63
    582e:	f8 94       	cli
    5830:	de bf       	out	0x3e, r29	; 62
    5832:	0f be       	out	0x3f, r0	; 63
    5834:	cd bf       	out	0x3d, r28	; 61
    5836:	09 94       	ijmp

00005838 <__epilogue_restores__>:
    5838:	2a 88       	ldd	r2, Y+18	; 0x12
    583a:	39 88       	ldd	r3, Y+17	; 0x11
    583c:	48 88       	ldd	r4, Y+16	; 0x10
    583e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5840:	6e 84       	ldd	r6, Y+14	; 0x0e
    5842:	7d 84       	ldd	r7, Y+13	; 0x0d
    5844:	8c 84       	ldd	r8, Y+12	; 0x0c
    5846:	9b 84       	ldd	r9, Y+11	; 0x0b
    5848:	aa 84       	ldd	r10, Y+10	; 0x0a
    584a:	b9 84       	ldd	r11, Y+9	; 0x09
    584c:	c8 84       	ldd	r12, Y+8	; 0x08
    584e:	df 80       	ldd	r13, Y+7	; 0x07
    5850:	ee 80       	ldd	r14, Y+6	; 0x06
    5852:	fd 80       	ldd	r15, Y+5	; 0x05
    5854:	0c 81       	ldd	r16, Y+4	; 0x04
    5856:	1b 81       	ldd	r17, Y+3	; 0x03
    5858:	aa 81       	ldd	r26, Y+2	; 0x02
    585a:	b9 81       	ldd	r27, Y+1	; 0x01
    585c:	ce 0f       	add	r28, r30
    585e:	d1 1d       	adc	r29, r1
    5860:	0f b6       	in	r0, 0x3f	; 63
    5862:	f8 94       	cli
    5864:	de bf       	out	0x3e, r29	; 62
    5866:	0f be       	out	0x3f, r0	; 63
    5868:	cd bf       	out	0x3d, r28	; 61
    586a:	ed 01       	movw	r28, r26
    586c:	08 95       	ret

0000586e <_exit>:
    586e:	f8 94       	cli

00005870 <__stop_program>:
    5870:	ff cf       	rjmp	.-2      	; 0x5870 <__stop_program>
