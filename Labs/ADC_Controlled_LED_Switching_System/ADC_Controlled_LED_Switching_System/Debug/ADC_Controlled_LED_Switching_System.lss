
ADC_Controlled_LED_Switching_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000e56  2**0
                  ALLOC
  2 .stab         00000f78  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000673  00000000  00000000  00001dd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_16>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 21 06 	call	0xc42	; 0xc42 <main>
  74:	0c 94 ef 06 	jmp	0xdde	; 0xdde <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:

/* ADC busy Flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	   4- Select CLK/64
	   5- Enable ADC
	    */
	//1- Select Vref = AVCC
#if ADC_u8_VREF_OPTION == ADC_u8_VREF_AVCC
	CLR_BIT(ADC_u8_ADMUX_REG,7);
  84:	a7 e2       	ldi	r26, 0x27	; 39
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	8f 77       	andi	r24, 0x7F	; 127
  90:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
  92:	a7 e2       	ldi	r26, 0x27	; 39
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	80 64       	ori	r24, 0x40	; 64
  9e:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
#endif

	//2- Right Adjust
#if ADC_u8_ADJUST_OPTION == ADC_u8_RIGHT_ADJUST
	CLR_BIT(ADC_u8_ADMUX_REG,5);
  a0:	a7 e2       	ldi	r26, 0x27	; 39
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e7 e2       	ldi	r30, 0x27	; 39
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	8f 7d       	andi	r24, 0xDF	; 223
  ac:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,5);
#endif

	//3- Disable AutoTrigger
#if ADC_u8_AUTO_TRIGGER_MODE == ADC_u8_AUTO_TRIGGER_DISABLE
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
  ae:	a6 e2       	ldi	r26, 0x26	; 38
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e2       	ldi	r30, 0x26	; 38
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	8c 93       	st	X, r24
	#endif
#endif

	//4- Select CLK/64
#if ADC_u8_PRESCALER == ADC_u8_PRESCALER_64
	SET_BIT(ADC_u8_ADCSRA_REG,2);
  bc:	a6 e2       	ldi	r26, 0x26	; 38
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e6 e2       	ldi	r30, 0x26	; 38
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e6 e2       	ldi	r30, 0x26	; 38
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
	SET_BIT(ADC_u8_ADCSRA_REG,0);
#endif

	//5- Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG,7);
  e6:	a6 e2       	ldi	r26, 0x26	; 38
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	e6 e2       	ldi	r30, 0x26	; 38
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 68       	ori	r24, 0x80	; 128
  f2:	8c 93       	st	X, r24

}
  f4:	cf 91       	pop	r28
  f6:	df 91       	pop	r29
  f8:	08 95       	ret

000000fa <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 *Copy_pu16DigitalValue)
{
  fa:	df 93       	push	r29
  fc:	cf 93       	push	r28
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	28 97       	sbiw	r28, 0x08	; 8
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	8e 83       	std	Y+6, r24	; 0x06
 110:	78 87       	std	Y+8, r23	; 0x08
 112:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
 118:	19 82       	std	Y+1, r1	; 0x01
 11a:	1a 82       	std	Y+2, r1	; 0x02
 11c:	1b 82       	std	Y+3, r1	; 0x03
 11e:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32)  && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
 120:	8e 81       	ldd	r24, Y+6	; 0x06
 122:	80 32       	cpi	r24, 0x20	; 32
 124:	08 f0       	brcs	.+2      	; 0x128 <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
 126:	65 c0       	rjmp	.+202    	; 0x1f2 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
 128:	8f 81       	ldd	r24, Y+7	; 0x07
 12a:	98 85       	ldd	r25, Y+8	; 0x08
 12c:	00 97       	sbiw	r24, 0x00	; 0
 12e:	09 f4       	brne	.+2      	; 0x132 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
 130:	60 c0       	rjmp	.+192    	; 0x1f2 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
 132:	80 91 62 00 	lds	r24, 0x0062
 136:	88 23       	and	r24, r24
 138:	09 f0       	breq	.+2      	; 0x13c <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
 13a:	5b c0       	rjmp	.+182    	; 0x1f2 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	80 93 62 00 	sts	0x0062, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
 142:	a7 e2       	ldi	r26, 0x27	; 39
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e7 e2       	ldi	r30, 0x27	; 39
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	80 7e       	andi	r24, 0xE0	; 224
 14e:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
 150:	a7 e2       	ldi	r26, 0x27	; 39
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	e7 e2       	ldi	r30, 0x27	; 39
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	90 81       	ld	r25, Z
 15a:	8e 81       	ldd	r24, Y+6	; 0x06
 15c:	89 2b       	or	r24, r25
 15e:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
 160:	a6 e2       	ldi	r26, 0x26	; 38
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	e6 e2       	ldi	r30, 0x26	; 38
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	8c 93       	st	X, r24
 16e:	0b c0       	rjmp	.+22     	; 0x186 <ADC_u8GetDigitalValueSynchNonBlocking+0x8c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	9a 81       	ldd	r25, Y+2	; 0x02
 174:	ab 81       	ldd	r26, Y+3	; 0x03
 176:	bc 81       	ldd	r27, Y+4	; 0x04
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	a1 1d       	adc	r26, r1
 17c:	b1 1d       	adc	r27, r1
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	9a 83       	std	Y+2, r25	; 0x02
 182:	ab 83       	std	Y+3, r26	; 0x03
 184:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
 186:	e6 e2       	ldi	r30, 0x26	; 38
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	82 95       	swap	r24
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	88 2f       	mov	r24, r24
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	81 70       	andi	r24, 0x01	; 1
 196:	90 70       	andi	r25, 0x00	; 0
 198:	00 97       	sbiw	r24, 0x00	; 0
 19a:	61 f4       	brne	.+24     	; 0x1b4 <ADC_u8GetDigitalValueSynchNonBlocking+0xba>
 19c:	89 81       	ldd	r24, Y+1	; 0x01
 19e:	9a 81       	ldd	r25, Y+2	; 0x02
 1a0:	ab 81       	ldd	r26, Y+3	; 0x03
 1a2:	bc 81       	ldd	r27, Y+4	; 0x04
 1a4:	80 35       	cpi	r24, 0x50	; 80
 1a6:	23 ec       	ldi	r18, 0xC3	; 195
 1a8:	92 07       	cpc	r25, r18
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	a2 07       	cpc	r26, r18
 1ae:	20 e0       	ldi	r18, 0x00	; 0
 1b0:	b2 07       	cpc	r27, r18
 1b2:	f0 f2       	brcs	.-68     	; 0x170 <ADC_u8GetDigitalValueSynchNonBlocking+0x76>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
 1b4:	e6 e2       	ldi	r30, 0x26	; 38
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	82 95       	swap	r24
 1bc:	8f 70       	andi	r24, 0x0F	; 15
 1be:	88 2f       	mov	r24, r24
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	81 70       	andi	r24, 0x01	; 1
 1c4:	90 70       	andi	r25, 0x00	; 0
 1c6:	88 23       	and	r24, r24
 1c8:	91 f0       	breq	.+36     	; 0x1ee <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
		{
			/* Clear Flag */
			ADC_u8BusyFlag = 0;
 1ca:	10 92 62 00 	sts	0x0062, r1
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
 1ce:	a6 e2       	ldi	r26, 0x26	; 38
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	e6 e2       	ldi	r30, 0x26	; 38
 1d4:	f0 e0       	ldi	r31, 0x00	; 0
 1d6:	80 81       	ld	r24, Z
 1d8:	80 61       	ori	r24, 0x10	; 16
 1da:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
 1dc:	e4 e2       	ldi	r30, 0x24	; 36
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	91 81       	ldd	r25, Z+1	; 0x01
 1e4:	ef 81       	ldd	r30, Y+7	; 0x07
 1e6:	f8 85       	ldd	r31, Y+8	; 0x08
 1e8:	91 83       	std	Z+1, r25	; 0x01
 1ea:	80 83       	st	Z, r24
 1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
 1ee:	1d 82       	std	Y+5, r1	; 0x05
 1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 1f2:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
 1f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
 1f6:	28 96       	adiw	r28, 0x08	; 8
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	f8 94       	cli
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	cd bf       	out	0x3d, r28	; 61
 202:	cf 91       	pop	r28
 204:	df 91       	pop	r29
 206:	08 95       	ret

00000208 <ADC_u8GetDigitalValueAsynch>:


u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb, void (*Copy_pfNotification) (u16))
{
 208:	df 93       	push	r29
 20a:	cf 93       	push	r28
 20c:	00 d0       	rcall	.+0      	; 0x20e <ADC_u8GetDigitalValueAsynch+0x6>
 20e:	00 d0       	rcall	.+0      	; 0x210 <ADC_u8GetDigitalValueAsynch+0x8>
 210:	cd b7       	in	r28, 0x3d	; 61
 212:	de b7       	in	r29, 0x3e	; 62
 214:	8a 83       	std	Y+2, r24	; 0x02
 216:	7c 83       	std	Y+4, r23	; 0x04
 218:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32)  && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
 21e:	8a 81       	ldd	r24, Y+2	; 0x02
 220:	80 32       	cpi	r24, 0x20	; 32
 222:	78 f5       	brcc	.+94     	; 0x282 <ADC_u8GetDigitalValueAsynch+0x7a>
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	9c 81       	ldd	r25, Y+4	; 0x04
 228:	00 97       	sbiw	r24, 0x00	; 0
 22a:	59 f1       	breq	.+86     	; 0x282 <ADC_u8GetDigitalValueAsynch+0x7a>
 22c:	80 91 62 00 	lds	r24, 0x0062
 230:	88 23       	and	r24, r24
 232:	39 f5       	brne	.+78     	; 0x282 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 62 00 	sts	0x0062, r24
		/* Update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	9c 81       	ldd	r25, Y+4	; 0x04
 23e:	90 93 61 00 	sts	0x0061, r25
 242:	80 93 60 00 	sts	0x0060, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
 246:	a6 e2       	ldi	r26, 0x26	; 38
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e6 e2       	ldi	r30, 0x26	; 38
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	88 60       	ori	r24, 0x08	; 8
 252:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
 254:	a7 e2       	ldi	r26, 0x27	; 39
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e7 e2       	ldi	r30, 0x27	; 39
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	80 7e       	andi	r24, 0xE0	; 224
 260:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
 262:	a7 e2       	ldi	r26, 0x27	; 39
 264:	b0 e0       	ldi	r27, 0x00	; 0
 266:	e7 e2       	ldi	r30, 0x27	; 39
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	90 81       	ld	r25, Z
 26c:	8a 81       	ldd	r24, Y+2	; 0x02
 26e:	89 2b       	or	r24, r25
 270:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
 272:	a6 e2       	ldi	r26, 0x26	; 38
 274:	b0 e0       	ldi	r27, 0x00	; 0
 276:	e6 e2       	ldi	r30, 0x26	; 38
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	80 64       	ori	r24, 0x40	; 64
 27e:	8c 93       	st	X, r24
 280:	01 c0       	rjmp	.+2      	; 0x284 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 282:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 284:	89 81       	ldd	r24, Y+1	; 0x01
}
 286:	0f 90       	pop	r0
 288:	0f 90       	pop	r0
 28a:	0f 90       	pop	r0
 28c:	0f 90       	pop	r0
 28e:	cf 91       	pop	r28
 290:	df 91       	pop	r29
 292:	08 95       	ret

00000294 <ADC_u8GetADCRegValue>:
u8 ADC_u8GetADCRegValue (u16 * Copy_pu16ADCValue)
{
 294:	df 93       	push	r29
 296:	cf 93       	push	r28
 298:	00 d0       	rcall	.+0      	; 0x29a <ADC_u8GetADCRegValue+0x6>
 29a:	0f 92       	push	r0
 29c:	cd b7       	in	r28, 0x3d	; 61
 29e:	de b7       	in	r29, 0x3e	; 62
 2a0:	9b 83       	std	Y+3, r25	; 0x03
 2a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
 2a8:	8a 81       	ldd	r24, Y+2	; 0x02
 2aa:	9b 81       	ldd	r25, Y+3	; 0x03
 2ac:	00 97       	sbiw	r24, 0x00	; 0
 2ae:	49 f0       	breq	.+18     	; 0x2c2 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
 2b0:	e4 e2       	ldi	r30, 0x24	; 36
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	91 81       	ldd	r25, Z+1	; 0x01
 2b8:	ea 81       	ldd	r30, Y+2	; 0x02
 2ba:	fb 81       	ldd	r31, Y+3	; 0x03
 2bc:	91 83       	std	Z+1, r25	; 0x01
 2be:	80 83       	st	Z, r24
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 2c2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 2c4:	89 81       	ldd	r24, Y+1	; 0x01
}
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	cf 91       	pop	r28
 2ce:	df 91       	pop	r29
 2d0:	08 95       	ret

000002d2 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
 2f4:	df 93       	push	r29
 2f6:	cf 93       	push	r28
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
 2fc:	80 91 60 00 	lds	r24, 0x0060
 300:	90 91 61 00 	lds	r25, 0x0061
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	99 f0       	breq	.+38     	; 0x32e <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
 308:	10 92 62 00 	sts	0x0062, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
 30c:	a6 e2       	ldi	r26, 0x26	; 38
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e6 e2       	ldi	r30, 0x26	; 38
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	87 7f       	andi	r24, 0xF7	; 247
 318:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
 31a:	20 91 60 00 	lds	r18, 0x0060
 31e:	30 91 61 00 	lds	r19, 0x0061
 322:	e4 e2       	ldi	r30, 0x24	; 36
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	80 81       	ld	r24, Z
 328:	91 81       	ldd	r25, Z+1	; 0x01
 32a:	f9 01       	movw	r30, r18
 32c:	09 95       	icall
	}
 32e:	cf 91       	pop	r28
 330:	df 91       	pop	r29
 332:	ff 91       	pop	r31
 334:	ef 91       	pop	r30
 336:	bf 91       	pop	r27
 338:	af 91       	pop	r26
 33a:	9f 91       	pop	r25
 33c:	8f 91       	pop	r24
 33e:	7f 91       	pop	r23
 340:	6f 91       	pop	r22
 342:	5f 91       	pop	r21
 344:	4f 91       	pop	r20
 346:	3f 91       	pop	r19
 348:	2f 91       	pop	r18
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
 354:	df 93       	push	r29
 356:	cf 93       	push	r28
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
 35c:	ea e3       	ldi	r30, 0x3A	; 58
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
 362:	e7 e3       	ldi	r30, 0x37	; 55
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	10 82       	st	Z, r1

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
 368:	e4 e3       	ldi	r30, 0x34	; 52
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
 36e:	e1 e3       	ldi	r30, 0x31	; 49
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	8f ef       	ldi	r24, 0xFF	; 255
 374:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
 376:	eb e3       	ldi	r30, 0x3B	; 59
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
 37c:	e8 e3       	ldi	r30, 0x38	; 56
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
 382:	e5 e3       	ldi	r30, 0x35	; 53
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
 388:	e2 e3       	ldi	r30, 0x32	; 50
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	10 82       	st	Z, r1

}
 38e:	cf 91       	pop	r28
 390:	df 91       	pop	r29
 392:	08 95       	ret

00000394 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
 394:	df 93       	push	r29
 396:	cf 93       	push	r28
 398:	cd b7       	in	r28, 0x3d	; 61
 39a:	de b7       	in	r29, 0x3e	; 62
 39c:	2e 97       	sbiw	r28, 0x0e	; 14
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
 3a8:	8a 83       	std	Y+2, r24	; 0x02
 3aa:	6b 83       	std	Y+3, r22	; 0x03
 3ac:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	84 30       	cpi	r24, 0x04	; 4
 3b6:	08 f0       	brcs	.+2      	; 0x3ba <DIO_u8SetPinDirection+0x26>
 3b8:	0d c1       	rjmp	.+538    	; 0x5d4 <DIO_u8SetPinDirection+0x240>
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	88 30       	cpi	r24, 0x08	; 8
 3be:	08 f0       	brcs	.+2      	; 0x3c2 <DIO_u8SetPinDirection+0x2e>
 3c0:	09 c1       	rjmp	.+530    	; 0x5d4 <DIO_u8SetPinDirection+0x240>
 3c2:	8c 81       	ldd	r24, Y+4	; 0x04
 3c4:	88 23       	and	r24, r24
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <DIO_u8SetPinDirection+0x3c>
 3c8:	8c 81       	ldd	r24, Y+4	; 0x04
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	09 f0       	breq	.+2      	; 0x3d0 <DIO_u8SetPinDirection+0x3c>
 3ce:	02 c1       	rjmp	.+516    	; 0x5d4 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
 3d0:	8a 81       	ldd	r24, Y+2	; 0x02
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	3e 87       	std	Y+14, r19	; 0x0e
 3d8:	2d 87       	std	Y+13, r18	; 0x0d
 3da:	8d 85       	ldd	r24, Y+13	; 0x0d
 3dc:	9e 85       	ldd	r25, Y+14	; 0x0e
 3de:	81 30       	cpi	r24, 0x01	; 1
 3e0:	91 05       	cpc	r25, r1
 3e2:	09 f4       	brne	.+2      	; 0x3e6 <DIO_u8SetPinDirection+0x52>
 3e4:	4f c0       	rjmp	.+158    	; 0x484 <DIO_u8SetPinDirection+0xf0>
 3e6:	2d 85       	ldd	r18, Y+13	; 0x0d
 3e8:	3e 85       	ldd	r19, Y+14	; 0x0e
 3ea:	22 30       	cpi	r18, 0x02	; 2
 3ec:	31 05       	cpc	r19, r1
 3ee:	2c f4       	brge	.+10     	; 0x3fa <DIO_u8SetPinDirection+0x66>
 3f0:	8d 85       	ldd	r24, Y+13	; 0x0d
 3f2:	9e 85       	ldd	r25, Y+14	; 0x0e
 3f4:	00 97       	sbiw	r24, 0x00	; 0
 3f6:	71 f0       	breq	.+28     	; 0x414 <DIO_u8SetPinDirection+0x80>
 3f8:	ee c0       	rjmp	.+476    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
 3fa:	2d 85       	ldd	r18, Y+13	; 0x0d
 3fc:	3e 85       	ldd	r19, Y+14	; 0x0e
 3fe:	22 30       	cpi	r18, 0x02	; 2
 400:	31 05       	cpc	r19, r1
 402:	09 f4       	brne	.+2      	; 0x406 <DIO_u8SetPinDirection+0x72>
 404:	77 c0       	rjmp	.+238    	; 0x4f4 <DIO_u8SetPinDirection+0x160>
 406:	8d 85       	ldd	r24, Y+13	; 0x0d
 408:	9e 85       	ldd	r25, Y+14	; 0x0e
 40a:	83 30       	cpi	r24, 0x03	; 3
 40c:	91 05       	cpc	r25, r1
 40e:	09 f4       	brne	.+2      	; 0x412 <DIO_u8SetPinDirection+0x7e>
 410:	a9 c0       	rjmp	.+338    	; 0x564 <DIO_u8SetPinDirection+0x1d0>
 412:	e1 c0       	rjmp	.+450    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
 414:	8b 81       	ldd	r24, Y+3	; 0x03
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	3c 87       	std	Y+12, r19	; 0x0c
 41c:	2b 87       	std	Y+11, r18	; 0x0b
 41e:	8b 85       	ldd	r24, Y+11	; 0x0b
 420:	9c 85       	ldd	r25, Y+12	; 0x0c
 422:	00 97       	sbiw	r24, 0x00	; 0
 424:	31 f0       	breq	.+12     	; 0x432 <DIO_u8SetPinDirection+0x9e>
 426:	2b 85       	ldd	r18, Y+11	; 0x0b
 428:	3c 85       	ldd	r19, Y+12	; 0x0c
 42a:	21 30       	cpi	r18, 0x01	; 1
 42c:	31 05       	cpc	r19, r1
 42e:	b1 f0       	breq	.+44     	; 0x45c <DIO_u8SetPinDirection+0xc8>
 430:	d2 c0       	rjmp	.+420    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 432:	aa e3       	ldi	r26, 0x3A	; 58
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	ea e3       	ldi	r30, 0x3A	; 58
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	48 2f       	mov	r20, r24
 43e:	8b 81       	ldd	r24, Y+3	; 0x03
 440:	28 2f       	mov	r18, r24
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	02 2e       	mov	r0, r18
 44a:	02 c0       	rjmp	.+4      	; 0x450 <DIO_u8SetPinDirection+0xbc>
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	0a 94       	dec	r0
 452:	e2 f7       	brpl	.-8      	; 0x44c <DIO_u8SetPinDirection+0xb8>
 454:	80 95       	com	r24
 456:	84 23       	and	r24, r20
 458:	8c 93       	st	X, r24
 45a:	bd c0       	rjmp	.+378    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 45c:	aa e3       	ldi	r26, 0x3A	; 58
 45e:	b0 e0       	ldi	r27, 0x00	; 0
 460:	ea e3       	ldi	r30, 0x3A	; 58
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	48 2f       	mov	r20, r24
 468:	8b 81       	ldd	r24, Y+3	; 0x03
 46a:	28 2f       	mov	r18, r24
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	02 2e       	mov	r0, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_u8SetPinDirection+0xe6>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_u8SetPinDirection+0xe2>
 47e:	84 2b       	or	r24, r20
 480:	8c 93       	st	X, r24
 482:	a9 c0       	rjmp	.+338    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
 484:	8b 81       	ldd	r24, Y+3	; 0x03
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	3a 87       	std	Y+10, r19	; 0x0a
 48c:	29 87       	std	Y+9, r18	; 0x09
 48e:	89 85       	ldd	r24, Y+9	; 0x09
 490:	9a 85       	ldd	r25, Y+10	; 0x0a
 492:	00 97       	sbiw	r24, 0x00	; 0
 494:	31 f0       	breq	.+12     	; 0x4a2 <DIO_u8SetPinDirection+0x10e>
 496:	29 85       	ldd	r18, Y+9	; 0x09
 498:	3a 85       	ldd	r19, Y+10	; 0x0a
 49a:	21 30       	cpi	r18, 0x01	; 1
 49c:	31 05       	cpc	r19, r1
 49e:	b1 f0       	breq	.+44     	; 0x4cc <DIO_u8SetPinDirection+0x138>
 4a0:	9a c0       	rjmp	.+308    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 4a2:	a7 e3       	ldi	r26, 0x37	; 55
 4a4:	b0 e0       	ldi	r27, 0x00	; 0
 4a6:	e7 e3       	ldi	r30, 0x37	; 55
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	48 2f       	mov	r20, r24
 4ae:	8b 81       	ldd	r24, Y+3	; 0x03
 4b0:	28 2f       	mov	r18, r24
 4b2:	30 e0       	ldi	r19, 0x00	; 0
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 2e       	mov	r0, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_u8SetPinDirection+0x12c>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_u8SetPinDirection+0x128>
 4c4:	80 95       	com	r24
 4c6:	84 23       	and	r24, r20
 4c8:	8c 93       	st	X, r24
 4ca:	85 c0       	rjmp	.+266    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 4cc:	a7 e3       	ldi	r26, 0x37	; 55
 4ce:	b0 e0       	ldi	r27, 0x00	; 0
 4d0:	e7 e3       	ldi	r30, 0x37	; 55
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	80 81       	ld	r24, Z
 4d6:	48 2f       	mov	r20, r24
 4d8:	8b 81       	ldd	r24, Y+3	; 0x03
 4da:	28 2f       	mov	r18, r24
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	02 2e       	mov	r0, r18
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <DIO_u8SetPinDirection+0x156>
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	0a 94       	dec	r0
 4ec:	e2 f7       	brpl	.-8      	; 0x4e6 <DIO_u8SetPinDirection+0x152>
 4ee:	84 2b       	or	r24, r20
 4f0:	8c 93       	st	X, r24
 4f2:	71 c0       	rjmp	.+226    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	38 87       	std	Y+8, r19	; 0x08
 4fc:	2f 83       	std	Y+7, r18	; 0x07
 4fe:	8f 81       	ldd	r24, Y+7	; 0x07
 500:	98 85       	ldd	r25, Y+8	; 0x08
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	31 f0       	breq	.+12     	; 0x512 <DIO_u8SetPinDirection+0x17e>
 506:	2f 81       	ldd	r18, Y+7	; 0x07
 508:	38 85       	ldd	r19, Y+8	; 0x08
 50a:	21 30       	cpi	r18, 0x01	; 1
 50c:	31 05       	cpc	r19, r1
 50e:	b1 f0       	breq	.+44     	; 0x53c <DIO_u8SetPinDirection+0x1a8>
 510:	62 c0       	rjmp	.+196    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 512:	a4 e3       	ldi	r26, 0x34	; 52
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	e4 e3       	ldi	r30, 0x34	; 52
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	48 2f       	mov	r20, r24
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	28 2f       	mov	r18, r24
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 2e       	mov	r0, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_u8SetPinDirection+0x19c>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	0a 94       	dec	r0
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_u8SetPinDirection+0x198>
 534:	80 95       	com	r24
 536:	84 23       	and	r24, r20
 538:	8c 93       	st	X, r24
 53a:	4d c0       	rjmp	.+154    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 53c:	a4 e3       	ldi	r26, 0x34	; 52
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e4 e3       	ldi	r30, 0x34	; 52
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	48 2f       	mov	r20, r24
 548:	8b 81       	ldd	r24, Y+3	; 0x03
 54a:	28 2f       	mov	r18, r24
 54c:	30 e0       	ldi	r19, 0x00	; 0
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	02 2e       	mov	r0, r18
 554:	02 c0       	rjmp	.+4      	; 0x55a <DIO_u8SetPinDirection+0x1c6>
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	0a 94       	dec	r0
 55c:	e2 f7       	brpl	.-8      	; 0x556 <DIO_u8SetPinDirection+0x1c2>
 55e:	84 2b       	or	r24, r20
 560:	8c 93       	st	X, r24
 562:	39 c0       	rjmp	.+114    	; 0x5d6 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
 564:	8b 81       	ldd	r24, Y+3	; 0x03
 566:	28 2f       	mov	r18, r24
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	3e 83       	std	Y+6, r19	; 0x06
 56c:	2d 83       	std	Y+5, r18	; 0x05
 56e:	8d 81       	ldd	r24, Y+5	; 0x05
 570:	9e 81       	ldd	r25, Y+6	; 0x06
 572:	00 97       	sbiw	r24, 0x00	; 0
 574:	31 f0       	breq	.+12     	; 0x582 <DIO_u8SetPinDirection+0x1ee>
 576:	2d 81       	ldd	r18, Y+5	; 0x05
 578:	3e 81       	ldd	r19, Y+6	; 0x06
 57a:	21 30       	cpi	r18, 0x01	; 1
 57c:	31 05       	cpc	r19, r1
 57e:	b1 f0       	breq	.+44     	; 0x5ac <DIO_u8SetPinDirection+0x218>
 580:	2a c0       	rjmp	.+84     	; 0x5d6 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 582:	a1 e3       	ldi	r26, 0x31	; 49
 584:	b0 e0       	ldi	r27, 0x00	; 0
 586:	e1 e3       	ldi	r30, 0x31	; 49
 588:	f0 e0       	ldi	r31, 0x00	; 0
 58a:	80 81       	ld	r24, Z
 58c:	48 2f       	mov	r20, r24
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	28 2f       	mov	r18, r24
 592:	30 e0       	ldi	r19, 0x00	; 0
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	02 2e       	mov	r0, r18
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <DIO_u8SetPinDirection+0x20c>
 59c:	88 0f       	add	r24, r24
 59e:	99 1f       	adc	r25, r25
 5a0:	0a 94       	dec	r0
 5a2:	e2 f7       	brpl	.-8      	; 0x59c <DIO_u8SetPinDirection+0x208>
 5a4:	80 95       	com	r24
 5a6:	84 23       	and	r24, r20
 5a8:	8c 93       	st	X, r24
 5aa:	15 c0       	rjmp	.+42     	; 0x5d6 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 5ac:	a1 e3       	ldi	r26, 0x31	; 49
 5ae:	b0 e0       	ldi	r27, 0x00	; 0
 5b0:	e1 e3       	ldi	r30, 0x31	; 49
 5b2:	f0 e0       	ldi	r31, 0x00	; 0
 5b4:	80 81       	ld	r24, Z
 5b6:	48 2f       	mov	r20, r24
 5b8:	8b 81       	ldd	r24, Y+3	; 0x03
 5ba:	28 2f       	mov	r18, r24
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	02 2e       	mov	r0, r18
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <DIO_u8SetPinDirection+0x236>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <DIO_u8SetPinDirection+0x232>
 5ce:	84 2b       	or	r24, r20
 5d0:	8c 93       	st	X, r24
 5d2:	01 c0       	rjmp	.+2      	; 0x5d6 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 5d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
}
 5d8:	2e 96       	adiw	r28, 0x0e	; 14
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	f8 94       	cli
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	cd bf       	out	0x3d, r28	; 61
 5e4:	cf 91       	pop	r28
 5e6:	df 91       	pop	r29
 5e8:	08 95       	ret

000005ea <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	cd b7       	in	r28, 0x3d	; 61
 5f0:	de b7       	in	r29, 0x3e	; 62
 5f2:	2e 97       	sbiw	r28, 0x0e	; 14
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	f8 94       	cli
 5f8:	de bf       	out	0x3e, r29	; 62
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	cd bf       	out	0x3d, r28	; 61
 5fe:	8a 83       	std	Y+2, r24	; 0x02
 600:	6b 83       	std	Y+3, r22	; 0x03
 602:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	88 30       	cpi	r24, 0x08	; 8
 60c:	08 f0       	brcs	.+2      	; 0x610 <DIO_u8SetPinValue+0x26>
 60e:	0c c1       	rjmp	.+536    	; 0x828 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
 610:	8a 81       	ldd	r24, Y+2	; 0x02
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	3e 87       	std	Y+14, r19	; 0x0e
 618:	2d 87       	std	Y+13, r18	; 0x0d
 61a:	8d 85       	ldd	r24, Y+13	; 0x0d
 61c:	9e 85       	ldd	r25, Y+14	; 0x0e
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	91 05       	cpc	r25, r1
 622:	09 f4       	brne	.+2      	; 0x626 <DIO_u8SetPinValue+0x3c>
 624:	51 c0       	rjmp	.+162    	; 0x6c8 <DIO_u8SetPinValue+0xde>
 626:	2d 85       	ldd	r18, Y+13	; 0x0d
 628:	3e 85       	ldd	r19, Y+14	; 0x0e
 62a:	22 30       	cpi	r18, 0x02	; 2
 62c:	31 05       	cpc	r19, r1
 62e:	2c f4       	brge	.+10     	; 0x63a <DIO_u8SetPinValue+0x50>
 630:	8d 85       	ldd	r24, Y+13	; 0x0d
 632:	9e 85       	ldd	r25, Y+14	; 0x0e
 634:	00 97       	sbiw	r24, 0x00	; 0
 636:	71 f0       	breq	.+28     	; 0x654 <DIO_u8SetPinValue+0x6a>
 638:	f5 c0       	rjmp	.+490    	; 0x824 <DIO_u8SetPinValue+0x23a>
 63a:	2d 85       	ldd	r18, Y+13	; 0x0d
 63c:	3e 85       	ldd	r19, Y+14	; 0x0e
 63e:	22 30       	cpi	r18, 0x02	; 2
 640:	31 05       	cpc	r19, r1
 642:	09 f4       	brne	.+2      	; 0x646 <DIO_u8SetPinValue+0x5c>
 644:	7b c0       	rjmp	.+246    	; 0x73c <DIO_u8SetPinValue+0x152>
 646:	8d 85       	ldd	r24, Y+13	; 0x0d
 648:	9e 85       	ldd	r25, Y+14	; 0x0e
 64a:	83 30       	cpi	r24, 0x03	; 3
 64c:	91 05       	cpc	r25, r1
 64e:	09 f4       	brne	.+2      	; 0x652 <DIO_u8SetPinValue+0x68>
 650:	af c0       	rjmp	.+350    	; 0x7b0 <DIO_u8SetPinValue+0x1c6>
 652:	e8 c0       	rjmp	.+464    	; 0x824 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
 654:	8c 81       	ldd	r24, Y+4	; 0x04
 656:	28 2f       	mov	r18, r24
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	3c 87       	std	Y+12, r19	; 0x0c
 65c:	2b 87       	std	Y+11, r18	; 0x0b
 65e:	8b 85       	ldd	r24, Y+11	; 0x0b
 660:	9c 85       	ldd	r25, Y+12	; 0x0c
 662:	00 97       	sbiw	r24, 0x00	; 0
 664:	31 f0       	breq	.+12     	; 0x672 <DIO_u8SetPinValue+0x88>
 666:	2b 85       	ldd	r18, Y+11	; 0x0b
 668:	3c 85       	ldd	r19, Y+12	; 0x0c
 66a:	21 30       	cpi	r18, 0x01	; 1
 66c:	31 05       	cpc	r19, r1
 66e:	b1 f0       	breq	.+44     	; 0x69c <DIO_u8SetPinValue+0xb2>
 670:	29 c0       	rjmp	.+82     	; 0x6c4 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 672:	ab e3       	ldi	r26, 0x3B	; 59
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	eb e3       	ldi	r30, 0x3B	; 59
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	48 2f       	mov	r20, r24
 67e:	8b 81       	ldd	r24, Y+3	; 0x03
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	81 e0       	ldi	r24, 0x01	; 1
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	02 2e       	mov	r0, r18
 68a:	02 c0       	rjmp	.+4      	; 0x690 <DIO_u8SetPinValue+0xa6>
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	0a 94       	dec	r0
 692:	e2 f7       	brpl	.-8      	; 0x68c <DIO_u8SetPinValue+0xa2>
 694:	80 95       	com	r24
 696:	84 23       	and	r24, r20
 698:	8c 93       	st	X, r24
 69a:	c7 c0       	rjmp	.+398    	; 0x82a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 69c:	ab e3       	ldi	r26, 0x3B	; 59
 69e:	b0 e0       	ldi	r27, 0x00	; 0
 6a0:	eb e3       	ldi	r30, 0x3B	; 59
 6a2:	f0 e0       	ldi	r31, 0x00	; 0
 6a4:	80 81       	ld	r24, Z
 6a6:	48 2f       	mov	r20, r24
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	28 2f       	mov	r18, r24
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	02 2e       	mov	r0, r18
 6b4:	02 c0       	rjmp	.+4      	; 0x6ba <DIO_u8SetPinValue+0xd0>
 6b6:	88 0f       	add	r24, r24
 6b8:	99 1f       	adc	r25, r25
 6ba:	0a 94       	dec	r0
 6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <DIO_u8SetPinValue+0xcc>
 6be:	84 2b       	or	r24, r20
 6c0:	8c 93       	st	X, r24
 6c2:	b3 c0       	rjmp	.+358    	; 0x82a <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 6c4:	19 82       	std	Y+1, r1	; 0x01
 6c6:	b1 c0       	rjmp	.+354    	; 0x82a <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
 6c8:	8c 81       	ldd	r24, Y+4	; 0x04
 6ca:	28 2f       	mov	r18, r24
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	3a 87       	std	Y+10, r19	; 0x0a
 6d0:	29 87       	std	Y+9, r18	; 0x09
 6d2:	89 85       	ldd	r24, Y+9	; 0x09
 6d4:	9a 85       	ldd	r25, Y+10	; 0x0a
 6d6:	00 97       	sbiw	r24, 0x00	; 0
 6d8:	31 f0       	breq	.+12     	; 0x6e6 <DIO_u8SetPinValue+0xfc>
 6da:	29 85       	ldd	r18, Y+9	; 0x09
 6dc:	3a 85       	ldd	r19, Y+10	; 0x0a
 6de:	21 30       	cpi	r18, 0x01	; 1
 6e0:	31 05       	cpc	r19, r1
 6e2:	b1 f0       	breq	.+44     	; 0x710 <DIO_u8SetPinValue+0x126>
 6e4:	29 c0       	rjmp	.+82     	; 0x738 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 6e6:	a8 e3       	ldi	r26, 0x38	; 56
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e8 e3       	ldi	r30, 0x38	; 56
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	48 2f       	mov	r20, r24
 6f2:	8b 81       	ldd	r24, Y+3	; 0x03
 6f4:	28 2f       	mov	r18, r24
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 2e       	mov	r0, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_u8SetPinValue+0x11a>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	0a 94       	dec	r0
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_u8SetPinValue+0x116>
 708:	80 95       	com	r24
 70a:	84 23       	and	r24, r20
 70c:	8c 93       	st	X, r24
 70e:	8d c0       	rjmp	.+282    	; 0x82a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 710:	a8 e3       	ldi	r26, 0x38	; 56
 712:	b0 e0       	ldi	r27, 0x00	; 0
 714:	e8 e3       	ldi	r30, 0x38	; 56
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	80 81       	ld	r24, Z
 71a:	48 2f       	mov	r20, r24
 71c:	8b 81       	ldd	r24, Y+3	; 0x03
 71e:	28 2f       	mov	r18, r24
 720:	30 e0       	ldi	r19, 0x00	; 0
 722:	81 e0       	ldi	r24, 0x01	; 1
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	02 2e       	mov	r0, r18
 728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_u8SetPinValue+0x144>
 72a:	88 0f       	add	r24, r24
 72c:	99 1f       	adc	r25, r25
 72e:	0a 94       	dec	r0
 730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_u8SetPinValue+0x140>
 732:	84 2b       	or	r24, r20
 734:	8c 93       	st	X, r24
 736:	79 c0       	rjmp	.+242    	; 0x82a <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 738:	19 82       	std	Y+1, r1	; 0x01
 73a:	77 c0       	rjmp	.+238    	; 0x82a <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
 73c:	8c 81       	ldd	r24, Y+4	; 0x04
 73e:	28 2f       	mov	r18, r24
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	38 87       	std	Y+8, r19	; 0x08
 744:	2f 83       	std	Y+7, r18	; 0x07
 746:	8f 81       	ldd	r24, Y+7	; 0x07
 748:	98 85       	ldd	r25, Y+8	; 0x08
 74a:	00 97       	sbiw	r24, 0x00	; 0
 74c:	31 f0       	breq	.+12     	; 0x75a <DIO_u8SetPinValue+0x170>
 74e:	2f 81       	ldd	r18, Y+7	; 0x07
 750:	38 85       	ldd	r19, Y+8	; 0x08
 752:	21 30       	cpi	r18, 0x01	; 1
 754:	31 05       	cpc	r19, r1
 756:	b1 f0       	breq	.+44     	; 0x784 <DIO_u8SetPinValue+0x19a>
 758:	29 c0       	rjmp	.+82     	; 0x7ac <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 75a:	a5 e3       	ldi	r26, 0x35	; 53
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	e5 e3       	ldi	r30, 0x35	; 53
 760:	f0 e0       	ldi	r31, 0x00	; 0
 762:	80 81       	ld	r24, Z
 764:	48 2f       	mov	r20, r24
 766:	8b 81       	ldd	r24, Y+3	; 0x03
 768:	28 2f       	mov	r18, r24
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	81 e0       	ldi	r24, 0x01	; 1
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	02 2e       	mov	r0, r18
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_u8SetPinValue+0x18e>
 774:	88 0f       	add	r24, r24
 776:	99 1f       	adc	r25, r25
 778:	0a 94       	dec	r0
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_u8SetPinValue+0x18a>
 77c:	80 95       	com	r24
 77e:	84 23       	and	r24, r20
 780:	8c 93       	st	X, r24
 782:	53 c0       	rjmp	.+166    	; 0x82a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 784:	a5 e3       	ldi	r26, 0x35	; 53
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	e5 e3       	ldi	r30, 0x35	; 53
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	80 81       	ld	r24, Z
 78e:	48 2f       	mov	r20, r24
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	28 2f       	mov	r18, r24
 794:	30 e0       	ldi	r19, 0x00	; 0
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	02 2e       	mov	r0, r18
 79c:	02 c0       	rjmp	.+4      	; 0x7a2 <DIO_u8SetPinValue+0x1b8>
 79e:	88 0f       	add	r24, r24
 7a0:	99 1f       	adc	r25, r25
 7a2:	0a 94       	dec	r0
 7a4:	e2 f7       	brpl	.-8      	; 0x79e <DIO_u8SetPinValue+0x1b4>
 7a6:	84 2b       	or	r24, r20
 7a8:	8c 93       	st	X, r24
 7aa:	3f c0       	rjmp	.+126    	; 0x82a <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 7ac:	19 82       	std	Y+1, r1	; 0x01
 7ae:	3d c0       	rjmp	.+122    	; 0x82a <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
 7b0:	8c 81       	ldd	r24, Y+4	; 0x04
 7b2:	28 2f       	mov	r18, r24
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	3e 83       	std	Y+6, r19	; 0x06
 7b8:	2d 83       	std	Y+5, r18	; 0x05
 7ba:	8d 81       	ldd	r24, Y+5	; 0x05
 7bc:	9e 81       	ldd	r25, Y+6	; 0x06
 7be:	00 97       	sbiw	r24, 0x00	; 0
 7c0:	31 f0       	breq	.+12     	; 0x7ce <DIO_u8SetPinValue+0x1e4>
 7c2:	2d 81       	ldd	r18, Y+5	; 0x05
 7c4:	3e 81       	ldd	r19, Y+6	; 0x06
 7c6:	21 30       	cpi	r18, 0x01	; 1
 7c8:	31 05       	cpc	r19, r1
 7ca:	b1 f0       	breq	.+44     	; 0x7f8 <DIO_u8SetPinValue+0x20e>
 7cc:	29 c0       	rjmp	.+82     	; 0x820 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 7ce:	a2 e3       	ldi	r26, 0x32	; 50
 7d0:	b0 e0       	ldi	r27, 0x00	; 0
 7d2:	e2 e3       	ldi	r30, 0x32	; 50
 7d4:	f0 e0       	ldi	r31, 0x00	; 0
 7d6:	80 81       	ld	r24, Z
 7d8:	48 2f       	mov	r20, r24
 7da:	8b 81       	ldd	r24, Y+3	; 0x03
 7dc:	28 2f       	mov	r18, r24
 7de:	30 e0       	ldi	r19, 0x00	; 0
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	02 2e       	mov	r0, r18
 7e6:	02 c0       	rjmp	.+4      	; 0x7ec <DIO_u8SetPinValue+0x202>
 7e8:	88 0f       	add	r24, r24
 7ea:	99 1f       	adc	r25, r25
 7ec:	0a 94       	dec	r0
 7ee:	e2 f7       	brpl	.-8      	; 0x7e8 <DIO_u8SetPinValue+0x1fe>
 7f0:	80 95       	com	r24
 7f2:	84 23       	and	r24, r20
 7f4:	8c 93       	st	X, r24
 7f6:	19 c0       	rjmp	.+50     	; 0x82a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 7f8:	a2 e3       	ldi	r26, 0x32	; 50
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	e2 e3       	ldi	r30, 0x32	; 50
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	48 2f       	mov	r20, r24
 804:	8b 81       	ldd	r24, Y+3	; 0x03
 806:	28 2f       	mov	r18, r24
 808:	30 e0       	ldi	r19, 0x00	; 0
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 2e       	mov	r0, r18
 810:	02 c0       	rjmp	.+4      	; 0x816 <DIO_u8SetPinValue+0x22c>
 812:	88 0f       	add	r24, r24
 814:	99 1f       	adc	r25, r25
 816:	0a 94       	dec	r0
 818:	e2 f7       	brpl	.-8      	; 0x812 <DIO_u8SetPinValue+0x228>
 81a:	84 2b       	or	r24, r20
 81c:	8c 93       	st	X, r24
 81e:	05 c0       	rjmp	.+10     	; 0x82a <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 820:	19 82       	std	Y+1, r1	; 0x01
 822:	03 c0       	rjmp	.+6      	; 0x82a <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 824:	19 82       	std	Y+1, r1	; 0x01
 826:	01 c0       	rjmp	.+2      	; 0x82a <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 828:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 82a:	89 81       	ldd	r24, Y+1	; 0x01
}
 82c:	2e 96       	adiw	r28, 0x0e	; 14
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	f8 94       	cli
 832:	de bf       	out	0x3e, r29	; 62
 834:	0f be       	out	0x3f, r0	; 63
 836:	cd bf       	out	0x3d, r28	; 61
 838:	cf 91       	pop	r28
 83a:	df 91       	pop	r29
 83c:	08 95       	ret

0000083e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
 83e:	df 93       	push	r29
 840:	cf 93       	push	r28
 842:	cd b7       	in	r28, 0x3d	; 61
 844:	de b7       	in	r29, 0x3e	; 62
 846:	28 97       	sbiw	r28, 0x08	; 8
 848:	0f b6       	in	r0, 0x3f	; 63
 84a:	f8 94       	cli
 84c:	de bf       	out	0x3e, r29	; 62
 84e:	0f be       	out	0x3f, r0	; 63
 850:	cd bf       	out	0x3d, r28	; 61
 852:	8b 83       	std	Y+3, r24	; 0x03
 854:	6c 83       	std	Y+4, r22	; 0x04
 856:	5e 83       	std	Y+6, r21	; 0x06
 858:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
 85e:	8b 81       	ldd	r24, Y+3	; 0x03
 860:	84 30       	cpi	r24, 0x04	; 4
 862:	08 f0       	brcs	.+2      	; 0x866 <__stack+0x7>
 864:	a1 c0       	rjmp	.+322    	; 0x9a8 <__stack+0x149>
 866:	8c 81       	ldd	r24, Y+4	; 0x04
 868:	88 30       	cpi	r24, 0x08	; 8
 86a:	08 f0       	brcs	.+2      	; 0x86e <__stack+0xf>
 86c:	9d c0       	rjmp	.+314    	; 0x9a8 <__stack+0x149>
 86e:	8d 81       	ldd	r24, Y+5	; 0x05
 870:	9e 81       	ldd	r25, Y+6	; 0x06
 872:	00 97       	sbiw	r24, 0x00	; 0
 874:	09 f4       	brne	.+2      	; 0x878 <__stack+0x19>
 876:	98 c0       	rjmp	.+304    	; 0x9a8 <__stack+0x149>
	{
		switch(Copy_u8PortId)
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	28 2f       	mov	r18, r24
 87c:	30 e0       	ldi	r19, 0x00	; 0
 87e:	38 87       	std	Y+8, r19	; 0x08
 880:	2f 83       	std	Y+7, r18	; 0x07
 882:	4f 81       	ldd	r20, Y+7	; 0x07
 884:	58 85       	ldd	r21, Y+8	; 0x08
 886:	41 30       	cpi	r20, 0x01	; 1
 888:	51 05       	cpc	r21, r1
 88a:	a9 f1       	breq	.+106    	; 0x8f6 <__stack+0x97>
 88c:	8f 81       	ldd	r24, Y+7	; 0x07
 88e:	98 85       	ldd	r25, Y+8	; 0x08
 890:	82 30       	cpi	r24, 0x02	; 2
 892:	91 05       	cpc	r25, r1
 894:	34 f4       	brge	.+12     	; 0x8a2 <__stack+0x43>
 896:	2f 81       	ldd	r18, Y+7	; 0x07
 898:	38 85       	ldd	r19, Y+8	; 0x08
 89a:	21 15       	cp	r18, r1
 89c:	31 05       	cpc	r19, r1
 89e:	71 f0       	breq	.+28     	; 0x8bc <__stack+0x5d>
 8a0:	81 c0       	rjmp	.+258    	; 0x9a4 <__stack+0x145>
 8a2:	4f 81       	ldd	r20, Y+7	; 0x07
 8a4:	58 85       	ldd	r21, Y+8	; 0x08
 8a6:	42 30       	cpi	r20, 0x02	; 2
 8a8:	51 05       	cpc	r21, r1
 8aa:	09 f4       	brne	.+2      	; 0x8ae <__stack+0x4f>
 8ac:	41 c0       	rjmp	.+130    	; 0x930 <__stack+0xd1>
 8ae:	8f 81       	ldd	r24, Y+7	; 0x07
 8b0:	98 85       	ldd	r25, Y+8	; 0x08
 8b2:	83 30       	cpi	r24, 0x03	; 3
 8b4:	91 05       	cpc	r25, r1
 8b6:	09 f4       	brne	.+2      	; 0x8ba <__stack+0x5b>
 8b8:	58 c0       	rjmp	.+176    	; 0x96a <__stack+0x10b>
 8ba:	74 c0       	rjmp	.+232    	; 0x9a4 <__stack+0x145>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
 8bc:	e9 e3       	ldi	r30, 0x39	; 57
 8be:	f0 e0       	ldi	r31, 0x00	; 0
 8c0:	80 81       	ld	r24, Z
 8c2:	28 2f       	mov	r18, r24
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	8c 81       	ldd	r24, Y+4	; 0x04
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	a9 01       	movw	r20, r18
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <__stack+0x75>
 8d0:	55 95       	asr	r21
 8d2:	47 95       	ror	r20
 8d4:	8a 95       	dec	r24
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <__stack+0x71>
 8d8:	ca 01       	movw	r24, r20
 8da:	81 70       	andi	r24, 0x01	; 1
 8dc:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	88 23       	and	r24, r24
 8e2:	21 f4       	brne	.+8      	; 0x8ec <__stack+0x8d>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 8e4:	ed 81       	ldd	r30, Y+5	; 0x05
 8e6:	fe 81       	ldd	r31, Y+6	; 0x06
 8e8:	10 82       	st	Z, r1
 8ea:	5f c0       	rjmp	.+190    	; 0x9aa <__stack+0x14b>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 8ec:	ed 81       	ldd	r30, Y+5	; 0x05
 8ee:	fe 81       	ldd	r31, Y+6	; 0x06
 8f0:	81 e0       	ldi	r24, 0x01	; 1
 8f2:	80 83       	st	Z, r24
 8f4:	5a c0       	rjmp	.+180    	; 0x9aa <__stack+0x14b>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
 8f6:	e6 e3       	ldi	r30, 0x36	; 54
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	80 81       	ld	r24, Z
 8fc:	28 2f       	mov	r18, r24
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	8c 81       	ldd	r24, Y+4	; 0x04
 902:	88 2f       	mov	r24, r24
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	a9 01       	movw	r20, r18
 908:	02 c0       	rjmp	.+4      	; 0x90e <__stack+0xaf>
 90a:	55 95       	asr	r21
 90c:	47 95       	ror	r20
 90e:	8a 95       	dec	r24
 910:	e2 f7       	brpl	.-8      	; 0x90a <__stack+0xab>
 912:	ca 01       	movw	r24, r20
 914:	81 70       	andi	r24, 0x01	; 1
 916:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 918:	89 81       	ldd	r24, Y+1	; 0x01
 91a:	88 23       	and	r24, r24
 91c:	21 f4       	brne	.+8      	; 0x926 <__stack+0xc7>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 91e:	ed 81       	ldd	r30, Y+5	; 0x05
 920:	fe 81       	ldd	r31, Y+6	; 0x06
 922:	10 82       	st	Z, r1
 924:	42 c0       	rjmp	.+132    	; 0x9aa <__stack+0x14b>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 926:	ed 81       	ldd	r30, Y+5	; 0x05
 928:	fe 81       	ldd	r31, Y+6	; 0x06
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	80 83       	st	Z, r24
 92e:	3d c0       	rjmp	.+122    	; 0x9aa <__stack+0x14b>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
 930:	e3 e3       	ldi	r30, 0x33	; 51
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	80 81       	ld	r24, Z
 936:	28 2f       	mov	r18, r24
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	8c 81       	ldd	r24, Y+4	; 0x04
 93c:	88 2f       	mov	r24, r24
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	a9 01       	movw	r20, r18
 942:	02 c0       	rjmp	.+4      	; 0x948 <__stack+0xe9>
 944:	55 95       	asr	r21
 946:	47 95       	ror	r20
 948:	8a 95       	dec	r24
 94a:	e2 f7       	brpl	.-8      	; 0x944 <__stack+0xe5>
 94c:	ca 01       	movw	r24, r20
 94e:	81 70       	andi	r24, 0x01	; 1
 950:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 952:	89 81       	ldd	r24, Y+1	; 0x01
 954:	88 23       	and	r24, r24
 956:	21 f4       	brne	.+8      	; 0x960 <__stack+0x101>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 958:	ed 81       	ldd	r30, Y+5	; 0x05
 95a:	fe 81       	ldd	r31, Y+6	; 0x06
 95c:	10 82       	st	Z, r1
 95e:	25 c0       	rjmp	.+74     	; 0x9aa <__stack+0x14b>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 960:	ed 81       	ldd	r30, Y+5	; 0x05
 962:	fe 81       	ldd	r31, Y+6	; 0x06
 964:	81 e0       	ldi	r24, 0x01	; 1
 966:	80 83       	st	Z, r24
 968:	20 c0       	rjmp	.+64     	; 0x9aa <__stack+0x14b>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
 96a:	e0 e3       	ldi	r30, 0x30	; 48
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	80 81       	ld	r24, Z
 970:	28 2f       	mov	r18, r24
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	8c 81       	ldd	r24, Y+4	; 0x04
 976:	88 2f       	mov	r24, r24
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	a9 01       	movw	r20, r18
 97c:	02 c0       	rjmp	.+4      	; 0x982 <__stack+0x123>
 97e:	55 95       	asr	r21
 980:	47 95       	ror	r20
 982:	8a 95       	dec	r24
 984:	e2 f7       	brpl	.-8      	; 0x97e <__stack+0x11f>
 986:	ca 01       	movw	r24, r20
 988:	81 70       	andi	r24, 0x01	; 1
 98a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 98c:	89 81       	ldd	r24, Y+1	; 0x01
 98e:	88 23       	and	r24, r24
 990:	21 f4       	brne	.+8      	; 0x99a <__stack+0x13b>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 992:	ed 81       	ldd	r30, Y+5	; 0x05
 994:	fe 81       	ldd	r31, Y+6	; 0x06
 996:	10 82       	st	Z, r1
 998:	08 c0       	rjmp	.+16     	; 0x9aa <__stack+0x14b>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 99a:	ed 81       	ldd	r30, Y+5	; 0x05
 99c:	fe 81       	ldd	r31, Y+6	; 0x06
 99e:	81 e0       	ldi	r24, 0x01	; 1
 9a0:	80 83       	st	Z, r24
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <__stack+0x14b>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
 9a4:	1a 82       	std	Y+2, r1	; 0x02
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <__stack+0x14b>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 9a8:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
 9aa:	8a 81       	ldd	r24, Y+2	; 0x02
}
 9ac:	28 96       	adiw	r28, 0x08	; 8
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	f8 94       	cli
 9b2:	de bf       	out	0x3e, r29	; 62
 9b4:	0f be       	out	0x3f, r0	; 63
 9b6:	cd bf       	out	0x3d, r28	; 61
 9b8:	cf 91       	pop	r28
 9ba:	df 91       	pop	r29
 9bc:	08 95       	ret

000009be <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 9be:	df 93       	push	r29
 9c0:	cf 93       	push	r28
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
 9c6:	2d 97       	sbiw	r28, 0x0d	; 13
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	f8 94       	cli
 9cc:	de bf       	out	0x3e, r29	; 62
 9ce:	0f be       	out	0x3f, r0	; 63
 9d0:	cd bf       	out	0x3d, r28	; 61
 9d2:	8a 83       	std	Y+2, r24	; 0x02
 9d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
 9da:	8b 81       	ldd	r24, Y+3	; 0x03
 9dc:	88 23       	and	r24, r24
 9de:	21 f0       	breq	.+8      	; 0x9e8 <DIO_u8SetPortDirection+0x2a>
 9e0:	8b 81       	ldd	r24, Y+3	; 0x03
 9e2:	81 30       	cpi	r24, 0x01	; 1
 9e4:	09 f0       	breq	.+2      	; 0x9e8 <DIO_u8SetPortDirection+0x2a>
 9e6:	82 c0       	rjmp	.+260    	; 0xaec <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	28 2f       	mov	r18, r24
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	3d 87       	std	Y+13, r19	; 0x0d
 9f0:	2c 87       	std	Y+12, r18	; 0x0c
 9f2:	8c 85       	ldd	r24, Y+12	; 0x0c
 9f4:	9d 85       	ldd	r25, Y+13	; 0x0d
 9f6:	81 30       	cpi	r24, 0x01	; 1
 9f8:	91 05       	cpc	r25, r1
 9fa:	71 f1       	breq	.+92     	; 0xa58 <DIO_u8SetPortDirection+0x9a>
 9fc:	2c 85       	ldd	r18, Y+12	; 0x0c
 9fe:	3d 85       	ldd	r19, Y+13	; 0x0d
 a00:	22 30       	cpi	r18, 0x02	; 2
 a02:	31 05       	cpc	r19, r1
 a04:	2c f4       	brge	.+10     	; 0xa10 <DIO_u8SetPortDirection+0x52>
 a06:	8c 85       	ldd	r24, Y+12	; 0x0c
 a08:	9d 85       	ldd	r25, Y+13	; 0x0d
 a0a:	00 97       	sbiw	r24, 0x00	; 0
 a0c:	69 f0       	breq	.+26     	; 0xa28 <DIO_u8SetPortDirection+0x6a>
 a0e:	6c c0       	rjmp	.+216    	; 0xae8 <DIO_u8SetPortDirection+0x12a>
 a10:	2c 85       	ldd	r18, Y+12	; 0x0c
 a12:	3d 85       	ldd	r19, Y+13	; 0x0d
 a14:	22 30       	cpi	r18, 0x02	; 2
 a16:	31 05       	cpc	r19, r1
 a18:	b9 f1       	breq	.+110    	; 0xa88 <DIO_u8SetPortDirection+0xca>
 a1a:	8c 85       	ldd	r24, Y+12	; 0x0c
 a1c:	9d 85       	ldd	r25, Y+13	; 0x0d
 a1e:	83 30       	cpi	r24, 0x03	; 3
 a20:	91 05       	cpc	r25, r1
 a22:	09 f4       	brne	.+2      	; 0xa26 <DIO_u8SetPortDirection+0x68>
 a24:	49 c0       	rjmp	.+146    	; 0xab8 <DIO_u8SetPortDirection+0xfa>
 a26:	60 c0       	rjmp	.+192    	; 0xae8 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
 a28:	8b 81       	ldd	r24, Y+3	; 0x03
 a2a:	28 2f       	mov	r18, r24
 a2c:	30 e0       	ldi	r19, 0x00	; 0
 a2e:	3b 87       	std	Y+11, r19	; 0x0b
 a30:	2a 87       	std	Y+10, r18	; 0x0a
 a32:	8a 85       	ldd	r24, Y+10	; 0x0a
 a34:	9b 85       	ldd	r25, Y+11	; 0x0b
 a36:	00 97       	sbiw	r24, 0x00	; 0
 a38:	31 f0       	breq	.+12     	; 0xa46 <DIO_u8SetPortDirection+0x88>
 a3a:	2a 85       	ldd	r18, Y+10	; 0x0a
 a3c:	3b 85       	ldd	r19, Y+11	; 0x0b
 a3e:	21 30       	cpi	r18, 0x01	; 1
 a40:	31 05       	cpc	r19, r1
 a42:	29 f0       	breq	.+10     	; 0xa4e <DIO_u8SetPortDirection+0x90>
 a44:	54 c0       	rjmp	.+168    	; 0xaee <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
 a46:	ea e3       	ldi	r30, 0x3A	; 58
 a48:	f0 e0       	ldi	r31, 0x00	; 0
 a4a:	10 82       	st	Z, r1
 a4c:	50 c0       	rjmp	.+160    	; 0xaee <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
 a4e:	ea e3       	ldi	r30, 0x3A	; 58
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	8f ef       	ldi	r24, 0xFF	; 255
 a54:	80 83       	st	Z, r24
 a56:	4b c0       	rjmp	.+150    	; 0xaee <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
 a58:	8b 81       	ldd	r24, Y+3	; 0x03
 a5a:	28 2f       	mov	r18, r24
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	39 87       	std	Y+9, r19	; 0x09
 a60:	28 87       	std	Y+8, r18	; 0x08
 a62:	88 85       	ldd	r24, Y+8	; 0x08
 a64:	99 85       	ldd	r25, Y+9	; 0x09
 a66:	00 97       	sbiw	r24, 0x00	; 0
 a68:	31 f0       	breq	.+12     	; 0xa76 <DIO_u8SetPortDirection+0xb8>
 a6a:	28 85       	ldd	r18, Y+8	; 0x08
 a6c:	39 85       	ldd	r19, Y+9	; 0x09
 a6e:	21 30       	cpi	r18, 0x01	; 1
 a70:	31 05       	cpc	r19, r1
 a72:	29 f0       	breq	.+10     	; 0xa7e <DIO_u8SetPortDirection+0xc0>
 a74:	3c c0       	rjmp	.+120    	; 0xaee <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
 a76:	e7 e3       	ldi	r30, 0x37	; 55
 a78:	f0 e0       	ldi	r31, 0x00	; 0
 a7a:	10 82       	st	Z, r1
 a7c:	38 c0       	rjmp	.+112    	; 0xaee <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
 a7e:	e7 e3       	ldi	r30, 0x37	; 55
 a80:	f0 e0       	ldi	r31, 0x00	; 0
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	80 83       	st	Z, r24
 a86:	33 c0       	rjmp	.+102    	; 0xaee <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
 a88:	8b 81       	ldd	r24, Y+3	; 0x03
 a8a:	28 2f       	mov	r18, r24
 a8c:	30 e0       	ldi	r19, 0x00	; 0
 a8e:	3f 83       	std	Y+7, r19	; 0x07
 a90:	2e 83       	std	Y+6, r18	; 0x06
 a92:	8e 81       	ldd	r24, Y+6	; 0x06
 a94:	9f 81       	ldd	r25, Y+7	; 0x07
 a96:	00 97       	sbiw	r24, 0x00	; 0
 a98:	31 f0       	breq	.+12     	; 0xaa6 <DIO_u8SetPortDirection+0xe8>
 a9a:	2e 81       	ldd	r18, Y+6	; 0x06
 a9c:	3f 81       	ldd	r19, Y+7	; 0x07
 a9e:	21 30       	cpi	r18, 0x01	; 1
 aa0:	31 05       	cpc	r19, r1
 aa2:	29 f0       	breq	.+10     	; 0xaae <DIO_u8SetPortDirection+0xf0>
 aa4:	24 c0       	rjmp	.+72     	; 0xaee <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
 aa6:	e4 e3       	ldi	r30, 0x34	; 52
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	10 82       	st	Z, r1
 aac:	20 c0       	rjmp	.+64     	; 0xaee <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
 aae:	e4 e3       	ldi	r30, 0x34	; 52
 ab0:	f0 e0       	ldi	r31, 0x00	; 0
 ab2:	8f ef       	ldi	r24, 0xFF	; 255
 ab4:	80 83       	st	Z, r24
 ab6:	1b c0       	rjmp	.+54     	; 0xaee <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
 ab8:	8b 81       	ldd	r24, Y+3	; 0x03
 aba:	28 2f       	mov	r18, r24
 abc:	30 e0       	ldi	r19, 0x00	; 0
 abe:	3d 83       	std	Y+5, r19	; 0x05
 ac0:	2c 83       	std	Y+4, r18	; 0x04
 ac2:	8c 81       	ldd	r24, Y+4	; 0x04
 ac4:	9d 81       	ldd	r25, Y+5	; 0x05
 ac6:	00 97       	sbiw	r24, 0x00	; 0
 ac8:	31 f0       	breq	.+12     	; 0xad6 <DIO_u8SetPortDirection+0x118>
 aca:	2c 81       	ldd	r18, Y+4	; 0x04
 acc:	3d 81       	ldd	r19, Y+5	; 0x05
 ace:	21 30       	cpi	r18, 0x01	; 1
 ad0:	31 05       	cpc	r19, r1
 ad2:	29 f0       	breq	.+10     	; 0xade <DIO_u8SetPortDirection+0x120>
 ad4:	0c c0       	rjmp	.+24     	; 0xaee <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
 ad6:	e1 e3       	ldi	r30, 0x31	; 49
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	10 82       	st	Z, r1
 adc:	08 c0       	rjmp	.+16     	; 0xaee <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
 ade:	e1 e3       	ldi	r30, 0x31	; 49
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	8f ef       	ldi	r24, 0xFF	; 255
 ae4:	80 83       	st	Z, r24
 ae6:	03 c0       	rjmp	.+6      	; 0xaee <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
 ae8:	19 82       	std	Y+1, r1	; 0x01
 aea:	01 c0       	rjmp	.+2      	; 0xaee <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 aec:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 aee:	89 81       	ldd	r24, Y+1	; 0x01
}
 af0:	2d 96       	adiw	r28, 0x0d	; 13
 af2:	0f b6       	in	r0, 0x3f	; 63
 af4:	f8 94       	cli
 af6:	de bf       	out	0x3e, r29	; 62
 af8:	0f be       	out	0x3f, r0	; 63
 afa:	cd bf       	out	0x3d, r28	; 61
 afc:	cf 91       	pop	r28
 afe:	df 91       	pop	r29
 b00:	08 95       	ret

00000b02 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 b02:	df 93       	push	r29
 b04:	cf 93       	push	r28
 b06:	00 d0       	rcall	.+0      	; 0xb08 <DIO_u8SetPortValue+0x6>
 b08:	00 d0       	rcall	.+0      	; 0xb0a <DIO_u8SetPortValue+0x8>
 b0a:	0f 92       	push	r0
 b0c:	cd b7       	in	r28, 0x3d	; 61
 b0e:	de b7       	in	r29, 0x3e	; 62
 b10:	8a 83       	std	Y+2, r24	; 0x02
 b12:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 b14:	81 e0       	ldi	r24, 0x01	; 1
 b16:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
 b18:	8a 81       	ldd	r24, Y+2	; 0x02
 b1a:	28 2f       	mov	r18, r24
 b1c:	30 e0       	ldi	r19, 0x00	; 0
 b1e:	3d 83       	std	Y+5, r19	; 0x05
 b20:	2c 83       	std	Y+4, r18	; 0x04
 b22:	8c 81       	ldd	r24, Y+4	; 0x04
 b24:	9d 81       	ldd	r25, Y+5	; 0x05
 b26:	81 30       	cpi	r24, 0x01	; 1
 b28:	91 05       	cpc	r25, r1
 b2a:	d1 f0       	breq	.+52     	; 0xb60 <DIO_u8SetPortValue+0x5e>
 b2c:	2c 81       	ldd	r18, Y+4	; 0x04
 b2e:	3d 81       	ldd	r19, Y+5	; 0x05
 b30:	22 30       	cpi	r18, 0x02	; 2
 b32:	31 05       	cpc	r19, r1
 b34:	2c f4       	brge	.+10     	; 0xb40 <DIO_u8SetPortValue+0x3e>
 b36:	8c 81       	ldd	r24, Y+4	; 0x04
 b38:	9d 81       	ldd	r25, Y+5	; 0x05
 b3a:	00 97       	sbiw	r24, 0x00	; 0
 b3c:	61 f0       	breq	.+24     	; 0xb56 <DIO_u8SetPortValue+0x54>
 b3e:	1f c0       	rjmp	.+62     	; 0xb7e <DIO_u8SetPortValue+0x7c>
 b40:	2c 81       	ldd	r18, Y+4	; 0x04
 b42:	3d 81       	ldd	r19, Y+5	; 0x05
 b44:	22 30       	cpi	r18, 0x02	; 2
 b46:	31 05       	cpc	r19, r1
 b48:	81 f0       	breq	.+32     	; 0xb6a <DIO_u8SetPortValue+0x68>
 b4a:	8c 81       	ldd	r24, Y+4	; 0x04
 b4c:	9d 81       	ldd	r25, Y+5	; 0x05
 b4e:	83 30       	cpi	r24, 0x03	; 3
 b50:	91 05       	cpc	r25, r1
 b52:	81 f0       	breq	.+32     	; 0xb74 <DIO_u8SetPortValue+0x72>
 b54:	14 c0       	rjmp	.+40     	; 0xb7e <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
 b56:	eb e3       	ldi	r30, 0x3B	; 59
 b58:	f0 e0       	ldi	r31, 0x00	; 0
 b5a:	8b 81       	ldd	r24, Y+3	; 0x03
 b5c:	80 83       	st	Z, r24
 b5e:	10 c0       	rjmp	.+32     	; 0xb80 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
 b60:	e8 e3       	ldi	r30, 0x38	; 56
 b62:	f0 e0       	ldi	r31, 0x00	; 0
 b64:	8b 81       	ldd	r24, Y+3	; 0x03
 b66:	80 83       	st	Z, r24
 b68:	0b c0       	rjmp	.+22     	; 0xb80 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
 b6a:	e5 e3       	ldi	r30, 0x35	; 53
 b6c:	f0 e0       	ldi	r31, 0x00	; 0
 b6e:	8b 81       	ldd	r24, Y+3	; 0x03
 b70:	80 83       	st	Z, r24
 b72:	06 c0       	rjmp	.+12     	; 0xb80 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
 b74:	e2 e3       	ldi	r30, 0x32	; 50
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	8b 81       	ldd	r24, Y+3	; 0x03
 b7a:	80 83       	st	Z, r24
 b7c:	01 c0       	rjmp	.+2      	; 0xb80 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
 b7e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 b80:	89 81       	ldd	r24, Y+1	; 0x01
}
 b82:	0f 90       	pop	r0
 b84:	0f 90       	pop	r0
 b86:	0f 90       	pop	r0
 b88:	0f 90       	pop	r0
 b8a:	0f 90       	pop	r0
 b8c:	cf 91       	pop	r28
 b8e:	df 91       	pop	r29
 b90:	08 95       	ret

00000b92 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
 b92:	df 93       	push	r29
 b94:	cf 93       	push	r28
 b96:	00 d0       	rcall	.+0      	; 0xb98 <DIO_u8GetPortValue+0x6>
 b98:	00 d0       	rcall	.+0      	; 0xb9a <DIO_u8GetPortValue+0x8>
 b9a:	00 d0       	rcall	.+0      	; 0xb9c <DIO_u8GetPortValue+0xa>
 b9c:	cd b7       	in	r28, 0x3d	; 61
 b9e:	de b7       	in	r29, 0x3e	; 62
 ba0:	8a 83       	std	Y+2, r24	; 0x02
 ba2:	7c 83       	std	Y+4, r23	; 0x04
 ba4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 ba6:	81 e0       	ldi	r24, 0x01	; 1
 ba8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
 baa:	8b 81       	ldd	r24, Y+3	; 0x03
 bac:	9c 81       	ldd	r25, Y+4	; 0x04
 bae:	00 97       	sbiw	r24, 0x00	; 0
 bb0:	e9 f1       	breq	.+122    	; 0xc2c <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
 bb2:	8a 81       	ldd	r24, Y+2	; 0x02
 bb4:	28 2f       	mov	r18, r24
 bb6:	30 e0       	ldi	r19, 0x00	; 0
 bb8:	3e 83       	std	Y+6, r19	; 0x06
 bba:	2d 83       	std	Y+5, r18	; 0x05
 bbc:	8d 81       	ldd	r24, Y+5	; 0x05
 bbe:	9e 81       	ldd	r25, Y+6	; 0x06
 bc0:	81 30       	cpi	r24, 0x01	; 1
 bc2:	91 05       	cpc	r25, r1
 bc4:	e1 f0       	breq	.+56     	; 0xbfe <DIO_u8GetPortValue+0x6c>
 bc6:	2d 81       	ldd	r18, Y+5	; 0x05
 bc8:	3e 81       	ldd	r19, Y+6	; 0x06
 bca:	22 30       	cpi	r18, 0x02	; 2
 bcc:	31 05       	cpc	r19, r1
 bce:	2c f4       	brge	.+10     	; 0xbda <DIO_u8GetPortValue+0x48>
 bd0:	8d 81       	ldd	r24, Y+5	; 0x05
 bd2:	9e 81       	ldd	r25, Y+6	; 0x06
 bd4:	00 97       	sbiw	r24, 0x00	; 0
 bd6:	61 f0       	breq	.+24     	; 0xbf0 <DIO_u8GetPortValue+0x5e>
 bd8:	27 c0       	rjmp	.+78     	; 0xc28 <DIO_u8GetPortValue+0x96>
 bda:	2d 81       	ldd	r18, Y+5	; 0x05
 bdc:	3e 81       	ldd	r19, Y+6	; 0x06
 bde:	22 30       	cpi	r18, 0x02	; 2
 be0:	31 05       	cpc	r19, r1
 be2:	a1 f0       	breq	.+40     	; 0xc0c <DIO_u8GetPortValue+0x7a>
 be4:	8d 81       	ldd	r24, Y+5	; 0x05
 be6:	9e 81       	ldd	r25, Y+6	; 0x06
 be8:	83 30       	cpi	r24, 0x03	; 3
 bea:	91 05       	cpc	r25, r1
 bec:	b1 f0       	breq	.+44     	; 0xc1a <DIO_u8GetPortValue+0x88>
 bee:	1c c0       	rjmp	.+56     	; 0xc28 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
 bf0:	e9 e3       	ldi	r30, 0x39	; 57
 bf2:	f0 e0       	ldi	r31, 0x00	; 0
 bf4:	80 81       	ld	r24, Z
 bf6:	eb 81       	ldd	r30, Y+3	; 0x03
 bf8:	fc 81       	ldd	r31, Y+4	; 0x04
 bfa:	80 83       	st	Z, r24
 bfc:	18 c0       	rjmp	.+48     	; 0xc2e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
 bfe:	e6 e3       	ldi	r30, 0x36	; 54
 c00:	f0 e0       	ldi	r31, 0x00	; 0
 c02:	80 81       	ld	r24, Z
 c04:	eb 81       	ldd	r30, Y+3	; 0x03
 c06:	fc 81       	ldd	r31, Y+4	; 0x04
 c08:	80 83       	st	Z, r24
 c0a:	11 c0       	rjmp	.+34     	; 0xc2e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
 c0c:	e3 e3       	ldi	r30, 0x33	; 51
 c0e:	f0 e0       	ldi	r31, 0x00	; 0
 c10:	80 81       	ld	r24, Z
 c12:	eb 81       	ldd	r30, Y+3	; 0x03
 c14:	fc 81       	ldd	r31, Y+4	; 0x04
 c16:	80 83       	st	Z, r24
 c18:	0a c0       	rjmp	.+20     	; 0xc2e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
 c1a:	e0 e3       	ldi	r30, 0x30	; 48
 c1c:	f0 e0       	ldi	r31, 0x00	; 0
 c1e:	80 81       	ld	r24, Z
 c20:	eb 81       	ldd	r30, Y+3	; 0x03
 c22:	fc 81       	ldd	r31, Y+4	; 0x04
 c24:	80 83       	st	Z, r24
 c26:	03 c0       	rjmp	.+6      	; 0xc2e <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
 c28:	19 82       	std	Y+1, r1	; 0x01
 c2a:	01 c0       	rjmp	.+2      	; 0xc2e <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 c2c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 c2e:	89 81       	ldd	r24, Y+1	; 0x01
 c30:	26 96       	adiw	r28, 0x06	; 6
 c32:	0f b6       	in	r0, 0x3f	; 63
 c34:	f8 94       	cli
 c36:	de bf       	out	0x3e, r29	; 62
 c38:	0f be       	out	0x3f, r0	; 63
 c3a:	cd bf       	out	0x3d, r28	; 61
 c3c:	cf 91       	pop	r28
 c3e:	df 91       	pop	r29
 c40:	08 95       	ret

00000c42 <main>:

#include "DIO_interface.h"
#include "ADC_interface.h"

int main()
{
 c42:	df 93       	push	r29
 c44:	cf 93       	push	r28
 c46:	00 d0       	rcall	.+0      	; 0xc48 <main+0x6>
 c48:	00 d0       	rcall	.+0      	; 0xc4a <main+0x8>
 c4a:	cd b7       	in	r28, 0x3d	; 61
 c4c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
 c4e:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidInit>
	ADC_voidInit();
 c52:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_voidInit>
	u16 Local_u16DigitalValue,Local_u16AnalogValue;
	while(1)
	{
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0,&Local_u16DigitalValue);
 c56:	9e 01       	movw	r18, r28
 c58:	2d 5f       	subi	r18, 0xFD	; 253
 c5a:	3f 4f       	sbci	r19, 0xFF	; 255
 c5c:	80 e0       	ldi	r24, 0x00	; 0
 c5e:	b9 01       	movw	r22, r18
 c60:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_u8GetDigitalValueSynchNonBlocking>
		Local_u16AnalogValue = (u16)((Local_u16DigitalValue * 5000UL)/1024);
 c64:	8b 81       	ldd	r24, Y+3	; 0x03
 c66:	9c 81       	ldd	r25, Y+4	; 0x04
 c68:	cc 01       	movw	r24, r24
 c6a:	a0 e0       	ldi	r26, 0x00	; 0
 c6c:	b0 e0       	ldi	r27, 0x00	; 0
 c6e:	28 e8       	ldi	r18, 0x88	; 136
 c70:	33 e1       	ldi	r19, 0x13	; 19
 c72:	40 e0       	ldi	r20, 0x00	; 0
 c74:	50 e0       	ldi	r21, 0x00	; 0
 c76:	bc 01       	movw	r22, r24
 c78:	cd 01       	movw	r24, r26
 c7a:	0e 94 d0 06 	call	0xda0	; 0xda0 <__mulsi3>
 c7e:	dc 01       	movw	r26, r24
 c80:	cb 01       	movw	r24, r22
 c82:	07 2e       	mov	r0, r23
 c84:	7a e0       	ldi	r23, 0x0A	; 10
 c86:	b6 95       	lsr	r27
 c88:	a7 95       	ror	r26
 c8a:	97 95       	ror	r25
 c8c:	87 95       	ror	r24
 c8e:	7a 95       	dec	r23
 c90:	d1 f7       	brne	.-12     	; 0xc86 <main+0x44>
 c92:	70 2d       	mov	r23, r0
 c94:	9a 83       	std	Y+2, r25	; 0x02
 c96:	89 83       	std	Y+1, r24	; 0x01
		if((Local_u16AnalogValue >= 0) && (Local_u16AnalogValue < 625))
 c98:	89 81       	ldd	r24, Y+1	; 0x01
 c9a:	9a 81       	ldd	r25, Y+2	; 0x02
 c9c:	22 e0       	ldi	r18, 0x02	; 2
 c9e:	81 37       	cpi	r24, 0x71	; 113
 ca0:	92 07       	cpc	r25, r18
 ca2:	28 f4       	brcc	.+10     	; 0xcae <main+0x6c>
		{
			DIO_u8SetPortValue(DIO_u8_PORTD,0x01);
 ca4:	83 e0       	ldi	r24, 0x03	; 3
 ca6:	61 e0       	ldi	r22, 0x01	; 1
 ca8:	0e 94 81 05 	call	0xb02	; 0xb02 <DIO_u8SetPortValue>
 cac:	d4 cf       	rjmp	.-88     	; 0xc56 <main+0x14>
		}
		else if ((Local_u16AnalogValue >= 625) && (Local_u16AnalogValue < 1250))
 cae:	89 81       	ldd	r24, Y+1	; 0x01
 cb0:	9a 81       	ldd	r25, Y+2	; 0x02
 cb2:	22 e0       	ldi	r18, 0x02	; 2
 cb4:	81 37       	cpi	r24, 0x71	; 113
 cb6:	92 07       	cpc	r25, r18
 cb8:	58 f0       	brcs	.+22     	; 0xcd0 <main+0x8e>
 cba:	89 81       	ldd	r24, Y+1	; 0x01
 cbc:	9a 81       	ldd	r25, Y+2	; 0x02
 cbe:	24 e0       	ldi	r18, 0x04	; 4
 cc0:	82 3e       	cpi	r24, 0xE2	; 226
 cc2:	92 07       	cpc	r25, r18
 cc4:	28 f4       	brcc	.+10     	; 0xcd0 <main+0x8e>
		{
			DIO_u8SetPortValue(DIO_u8_PORTD,0x03);
 cc6:	83 e0       	ldi	r24, 0x03	; 3
 cc8:	63 e0       	ldi	r22, 0x03	; 3
 cca:	0e 94 81 05 	call	0xb02	; 0xb02 <DIO_u8SetPortValue>
 cce:	c3 cf       	rjmp	.-122    	; 0xc56 <main+0x14>
		}
		else if ((Local_u16AnalogValue >= 1250) && (Local_u16AnalogValue < 1875))
 cd0:	89 81       	ldd	r24, Y+1	; 0x01
 cd2:	9a 81       	ldd	r25, Y+2	; 0x02
 cd4:	24 e0       	ldi	r18, 0x04	; 4
 cd6:	82 3e       	cpi	r24, 0xE2	; 226
 cd8:	92 07       	cpc	r25, r18
 cda:	58 f0       	brcs	.+22     	; 0xcf2 <main+0xb0>
 cdc:	89 81       	ldd	r24, Y+1	; 0x01
 cde:	9a 81       	ldd	r25, Y+2	; 0x02
 ce0:	27 e0       	ldi	r18, 0x07	; 7
 ce2:	83 35       	cpi	r24, 0x53	; 83
 ce4:	92 07       	cpc	r25, r18
 ce6:	28 f4       	brcc	.+10     	; 0xcf2 <main+0xb0>
		{
			DIO_u8SetPortValue(DIO_u8_PORTD,0x07);
 ce8:	83 e0       	ldi	r24, 0x03	; 3
 cea:	67 e0       	ldi	r22, 0x07	; 7
 cec:	0e 94 81 05 	call	0xb02	; 0xb02 <DIO_u8SetPortValue>
 cf0:	b2 cf       	rjmp	.-156    	; 0xc56 <main+0x14>
		}
		else if ((Local_u16AnalogValue >= 1875) && (Local_u16AnalogValue < 2500))
 cf2:	89 81       	ldd	r24, Y+1	; 0x01
 cf4:	9a 81       	ldd	r25, Y+2	; 0x02
 cf6:	27 e0       	ldi	r18, 0x07	; 7
 cf8:	83 35       	cpi	r24, 0x53	; 83
 cfa:	92 07       	cpc	r25, r18
 cfc:	58 f0       	brcs	.+22     	; 0xd14 <main+0xd2>
 cfe:	89 81       	ldd	r24, Y+1	; 0x01
 d00:	9a 81       	ldd	r25, Y+2	; 0x02
 d02:	29 e0       	ldi	r18, 0x09	; 9
 d04:	84 3c       	cpi	r24, 0xC4	; 196
 d06:	92 07       	cpc	r25, r18
 d08:	28 f4       	brcc	.+10     	; 0xd14 <main+0xd2>
		{
			DIO_u8SetPortValue(DIO_u8_PORTD,0x0F);
 d0a:	83 e0       	ldi	r24, 0x03	; 3
 d0c:	6f e0       	ldi	r22, 0x0F	; 15
 d0e:	0e 94 81 05 	call	0xb02	; 0xb02 <DIO_u8SetPortValue>
 d12:	a1 cf       	rjmp	.-190    	; 0xc56 <main+0x14>
		}
		else if ((Local_u16AnalogValue >= 2500) && (Local_u16AnalogValue < 3125))
 d14:	89 81       	ldd	r24, Y+1	; 0x01
 d16:	9a 81       	ldd	r25, Y+2	; 0x02
 d18:	29 e0       	ldi	r18, 0x09	; 9
 d1a:	84 3c       	cpi	r24, 0xC4	; 196
 d1c:	92 07       	cpc	r25, r18
 d1e:	58 f0       	brcs	.+22     	; 0xd36 <main+0xf4>
 d20:	89 81       	ldd	r24, Y+1	; 0x01
 d22:	9a 81       	ldd	r25, Y+2	; 0x02
 d24:	2c e0       	ldi	r18, 0x0C	; 12
 d26:	85 33       	cpi	r24, 0x35	; 53
 d28:	92 07       	cpc	r25, r18
 d2a:	28 f4       	brcc	.+10     	; 0xd36 <main+0xf4>
		{
			DIO_u8SetPortValue(DIO_u8_PORTD,0x1F);
 d2c:	83 e0       	ldi	r24, 0x03	; 3
 d2e:	6f e1       	ldi	r22, 0x1F	; 31
 d30:	0e 94 81 05 	call	0xb02	; 0xb02 <DIO_u8SetPortValue>
 d34:	90 cf       	rjmp	.-224    	; 0xc56 <main+0x14>
		}
		else if ((Local_u16AnalogValue >= 3125) && (Local_u16AnalogValue < 3750))
 d36:	89 81       	ldd	r24, Y+1	; 0x01
 d38:	9a 81       	ldd	r25, Y+2	; 0x02
 d3a:	2c e0       	ldi	r18, 0x0C	; 12
 d3c:	85 33       	cpi	r24, 0x35	; 53
 d3e:	92 07       	cpc	r25, r18
 d40:	58 f0       	brcs	.+22     	; 0xd58 <main+0x116>
 d42:	89 81       	ldd	r24, Y+1	; 0x01
 d44:	9a 81       	ldd	r25, Y+2	; 0x02
 d46:	2e e0       	ldi	r18, 0x0E	; 14
 d48:	86 3a       	cpi	r24, 0xA6	; 166
 d4a:	92 07       	cpc	r25, r18
 d4c:	28 f4       	brcc	.+10     	; 0xd58 <main+0x116>
		{
			DIO_u8SetPortValue(DIO_u8_PORTD,0x3F);
 d4e:	83 e0       	ldi	r24, 0x03	; 3
 d50:	6f e3       	ldi	r22, 0x3F	; 63
 d52:	0e 94 81 05 	call	0xb02	; 0xb02 <DIO_u8SetPortValue>
 d56:	7f cf       	rjmp	.-258    	; 0xc56 <main+0x14>
		}
		else if ((Local_u16AnalogValue >= 3750) && (Local_u16AnalogValue < 4375))
 d58:	89 81       	ldd	r24, Y+1	; 0x01
 d5a:	9a 81       	ldd	r25, Y+2	; 0x02
 d5c:	2e e0       	ldi	r18, 0x0E	; 14
 d5e:	86 3a       	cpi	r24, 0xA6	; 166
 d60:	92 07       	cpc	r25, r18
 d62:	58 f0       	brcs	.+22     	; 0xd7a <main+0x138>
 d64:	89 81       	ldd	r24, Y+1	; 0x01
 d66:	9a 81       	ldd	r25, Y+2	; 0x02
 d68:	21 e1       	ldi	r18, 0x11	; 17
 d6a:	87 31       	cpi	r24, 0x17	; 23
 d6c:	92 07       	cpc	r25, r18
 d6e:	28 f4       	brcc	.+10     	; 0xd7a <main+0x138>
		{
			DIO_u8SetPortValue(DIO_u8_PORTD,0x7F);
 d70:	83 e0       	ldi	r24, 0x03	; 3
 d72:	6f e7       	ldi	r22, 0x7F	; 127
 d74:	0e 94 81 05 	call	0xb02	; 0xb02 <DIO_u8SetPortValue>
 d78:	6e cf       	rjmp	.-292    	; 0xc56 <main+0x14>
		}
		else if ((Local_u16AnalogValue >= 4375) && (Local_u16AnalogValue < 5000))
 d7a:	89 81       	ldd	r24, Y+1	; 0x01
 d7c:	9a 81       	ldd	r25, Y+2	; 0x02
 d7e:	21 e1       	ldi	r18, 0x11	; 17
 d80:	87 31       	cpi	r24, 0x17	; 23
 d82:	92 07       	cpc	r25, r18
 d84:	08 f4       	brcc	.+2      	; 0xd88 <main+0x146>
 d86:	67 cf       	rjmp	.-306    	; 0xc56 <main+0x14>
 d88:	89 81       	ldd	r24, Y+1	; 0x01
 d8a:	9a 81       	ldd	r25, Y+2	; 0x02
 d8c:	23 e1       	ldi	r18, 0x13	; 19
 d8e:	88 38       	cpi	r24, 0x88	; 136
 d90:	92 07       	cpc	r25, r18
 d92:	08 f0       	brcs	.+2      	; 0xd96 <main+0x154>
 d94:	60 cf       	rjmp	.-320    	; 0xc56 <main+0x14>
		{
			DIO_u8SetPortValue(DIO_u8_PORTD,0xFF);
 d96:	83 e0       	ldi	r24, 0x03	; 3
 d98:	6f ef       	ldi	r22, 0xFF	; 255
 d9a:	0e 94 81 05 	call	0xb02	; 0xb02 <DIO_u8SetPortValue>
 d9e:	5b cf       	rjmp	.-330    	; 0xc56 <main+0x14>

00000da0 <__mulsi3>:
 da0:	62 9f       	mul	r22, r18
 da2:	d0 01       	movw	r26, r0
 da4:	73 9f       	mul	r23, r19
 da6:	f0 01       	movw	r30, r0
 da8:	82 9f       	mul	r24, r18
 daa:	e0 0d       	add	r30, r0
 dac:	f1 1d       	adc	r31, r1
 dae:	64 9f       	mul	r22, r20
 db0:	e0 0d       	add	r30, r0
 db2:	f1 1d       	adc	r31, r1
 db4:	92 9f       	mul	r25, r18
 db6:	f0 0d       	add	r31, r0
 db8:	83 9f       	mul	r24, r19
 dba:	f0 0d       	add	r31, r0
 dbc:	74 9f       	mul	r23, r20
 dbe:	f0 0d       	add	r31, r0
 dc0:	65 9f       	mul	r22, r21
 dc2:	f0 0d       	add	r31, r0
 dc4:	99 27       	eor	r25, r25
 dc6:	72 9f       	mul	r23, r18
 dc8:	b0 0d       	add	r27, r0
 dca:	e1 1d       	adc	r30, r1
 dcc:	f9 1f       	adc	r31, r25
 dce:	63 9f       	mul	r22, r19
 dd0:	b0 0d       	add	r27, r0
 dd2:	e1 1d       	adc	r30, r1
 dd4:	f9 1f       	adc	r31, r25
 dd6:	bd 01       	movw	r22, r26
 dd8:	cf 01       	movw	r24, r30
 dda:	11 24       	eor	r1, r1
 ddc:	08 95       	ret

00000dde <_exit>:
 dde:	f8 94       	cli

00000de0 <__stop_program>:
 de0:	ff cf       	rjmp	.-2      	; 0xde0 <__stop_program>
