
Motor_Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00800060  000045a4  00004638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800152  00800152  0000472a  2**0
                  ALLOC
  3 .stab         000039b4  00000000  00000000  0000472c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f8e  00000000  00000000  000080e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000906e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000091ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000935d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b3a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c4a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d428  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d86a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e0f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ea       	ldi	r30, 0xA4	; 164
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 35       	cpi	r26, 0x52	; 82
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e5       	ldi	r26, 0x52	; 82
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 35       	cpi	r26, 0x59	; 89
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <main>
      8a:	0c 94 d0 22 	jmp	0x45a0	; 0x45a0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 99 22 	jmp	0x4532	; 0x4532 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e3       	ldi	r26, 0x31	; 49
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b5 22 	jmp	0x456a	; 0x456a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 99 22 	jmp	0x4532	; 0x4532 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e3       	ldi	r24, 0x31	; 49
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b5 22 	jmp	0x456a	; 0x456a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a1 22 	jmp	0x4542	; 0x4542 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e3       	ldi	r22, 0x31	; 49
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bd 22 	jmp	0x457a	; 0x457a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c1 22 	jmp	0x4582	; 0x4582 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a9 22 	jmp	0x4552	; 0x4552 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c5 22 	jmp	0x458a	; 0x458a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	80 83       	st	Z, r24

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1

}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2e 97       	sbiw	r28, 0x0e	; 14
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	8a 83       	std	Y+2, r24	; 0x02
     cfc:	6b 83       	std	Y+3, r22	; 0x03
     cfe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x26>
     d0a:	0d c1       	rjmp	.+538    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x2e>
     d12:	09 c1       	rjmp	.+530    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d20:	02 c1       	rjmp	.+516    	; 0xf26 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3e 87       	std	Y+14, r19	; 0x0e
     d2a:	2d 87       	std	Y+13, r18	; 0x0d
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_u8SetPinDirection+0x52>
     d36:	4f c0       	rjmp	.+158    	; 0xdd6 <DIO_u8SetPinDirection+0xf0>
     d38:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_u8SetPinDirection+0x66>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <DIO_u8SetPinDirection+0x80>
     d4a:	ee c0       	rjmp	.+476    	; 0xf28 <DIO_u8SetPinDirection+0x242>
     d4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_u8SetPinDirection+0x72>
     d56:	77 c0       	rjmp	.+238    	; 0xe46 <DIO_u8SetPinDirection+0x160>
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_u8SetPinDirection+0x7e>
     d62:	a9 c0       	rjmp	.+338    	; 0xeb6 <DIO_u8SetPinDirection+0x1d0>
     d64:	e1 c0       	rjmp	.+450    	; 0xf28 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3c 87       	std	Y+12, r19	; 0x0c
     d6e:	2b 87       	std	Y+11, r18	; 0x0b
     d70:	8b 85       	ldd	r24, Y+11	; 0x0b
     d72:	9c 85       	ldd	r25, Y+12	; 0x0c
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	31 f0       	breq	.+12     	; 0xd84 <DIO_u8SetPinDirection+0x9e>
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	21 30       	cpi	r18, 0x01	; 1
     d7e:	31 05       	cpc	r19, r1
     d80:	b1 f0       	breq	.+44     	; 0xdae <DIO_u8SetPinDirection+0xc8>
     d82:	d2 c0       	rjmp	.+420    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d84:	aa e3       	ldi	r26, 0x3A	; 58
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ea e3       	ldi	r30, 0x3A	; 58
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_u8SetPinDirection+0xbc>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_u8SetPinDirection+0xb8>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	bd c0       	rjmp	.+378    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     dae:	aa e3       	ldi	r26, 0x3A	; 58
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_u8SetPinDirection+0xe6>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_u8SetPinDirection+0xe2>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	a9 c0       	rjmp	.+338    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	3a 87       	std	Y+10, r19	; 0x0a
     dde:	29 87       	std	Y+9, r18	; 0x09
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	31 f0       	breq	.+12     	; 0xdf4 <DIO_u8SetPinDirection+0x10e>
     de8:	29 85       	ldd	r18, Y+9	; 0x09
     dea:	3a 85       	ldd	r19, Y+10	; 0x0a
     dec:	21 30       	cpi	r18, 0x01	; 1
     dee:	31 05       	cpc	r19, r1
     df0:	b1 f0       	breq	.+44     	; 0xe1e <DIO_u8SetPinDirection+0x138>
     df2:	9a c0       	rjmp	.+308    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     df4:	a7 e3       	ldi	r26, 0x37	; 55
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_u8SetPinDirection+0x12c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_u8SetPinDirection+0x128>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	85 c0       	rjmp	.+266    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e1e:	a7 e3       	ldi	r26, 0x37	; 55
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e3       	ldi	r30, 0x37	; 55
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_u8SetPinDirection+0x156>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_u8SetPinDirection+0x152>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	71 c0       	rjmp	.+226    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	38 87       	std	Y+8, r19	; 0x08
     e4e:	2f 83       	std	Y+7, r18	; 0x07
     e50:	8f 81       	ldd	r24, Y+7	; 0x07
     e52:	98 85       	ldd	r25, Y+8	; 0x08
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	31 f0       	breq	.+12     	; 0xe64 <DIO_u8SetPinDirection+0x17e>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	21 30       	cpi	r18, 0x01	; 1
     e5e:	31 05       	cpc	r19, r1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <DIO_u8SetPinDirection+0x1a8>
     e62:	62 c0       	rjmp	.+196    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x19c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0x198>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	4d c0       	rjmp	.+154    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinDirection+0x1c6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinDirection+0x1c2>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	39 c0       	rjmp	.+114    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3e 83       	std	Y+6, r19	; 0x06
     ebe:	2d 83       	std	Y+5, r18	; 0x05
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	31 f0       	breq	.+12     	; 0xed4 <DIO_u8SetPinDirection+0x1ee>
     ec8:	2d 81       	ldd	r18, Y+5	; 0x05
     eca:	3e 81       	ldd	r19, Y+6	; 0x06
     ecc:	21 30       	cpi	r18, 0x01	; 1
     ece:	31 05       	cpc	r19, r1
     ed0:	b1 f0       	breq	.+44     	; 0xefe <DIO_u8SetPinDirection+0x218>
     ed2:	2a c0       	rjmp	.+84     	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_u8SetPinDirection+0x20c>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_u8SetPinDirection+0x208>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     efe:	a1 e3       	ldi	r26, 0x31	; 49
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e1 e3       	ldi	r30, 0x31	; 49
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_u8SetPinDirection+0x236>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_u8SetPinDirection+0x232>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f26:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	2e 96       	adiw	r28, 0x0e	; 14
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2e 97       	sbiw	r28, 0x0e	; 14
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	6b 83       	std	Y+3, r22	; 0x03
     f54:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <DIO_u8SetPinValue+0x26>
     f60:	0c c1       	rjmp	.+536    	; 0x117a <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3e 87       	std	Y+14, r19	; 0x0e
     f6a:	2d 87       	std	Y+13, r18	; 0x0d
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <DIO_u8SetPinValue+0x3c>
     f76:	51 c0       	rjmp	.+162    	; 0x101a <DIO_u8SetPinValue+0xde>
     f78:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	2c f4       	brge	.+10     	; 0xf8c <DIO_u8SetPinValue+0x50>
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	71 f0       	breq	.+28     	; 0xfa6 <DIO_u8SetPinValue+0x6a>
     f8a:	f5 c0       	rjmp	.+490    	; 0x1176 <DIO_u8SetPinValue+0x23a>
     f8c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f8e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_u8SetPinValue+0x5c>
     f96:	7b c0       	rjmp	.+246    	; 0x108e <DIO_u8SetPinValue+0x152>
     f98:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_u8SetPinValue+0x68>
     fa2:	af c0       	rjmp	.+350    	; 0x1102 <DIO_u8SetPinValue+0x1c6>
     fa4:	e8 c0       	rjmp	.+464    	; 0x1176 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3c 87       	std	Y+12, r19	; 0x0c
     fae:	2b 87       	std	Y+11, r18	; 0x0b
     fb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <DIO_u8SetPinValue+0x88>
     fb8:	2b 85       	ldd	r18, Y+11	; 0x0b
     fba:	3c 85       	ldd	r19, Y+12	; 0x0c
     fbc:	21 30       	cpi	r18, 0x01	; 1
     fbe:	31 05       	cpc	r19, r1
     fc0:	b1 f0       	breq	.+44     	; 0xfee <DIO_u8SetPinValue+0xb2>
     fc2:	29 c0       	rjmp	.+82     	; 0x1016 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fc4:	ab e3       	ldi	r26, 0x3B	; 59
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e3       	ldi	r30, 0x3B	; 59
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_u8SetPinValue+0xa6>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_u8SetPinValue+0xa2>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	c7 c0       	rjmp	.+398    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fee:	ab e3       	ldi	r26, 0x3B	; 59
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	eb e3       	ldi	r30, 0x3B	; 59
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_u8SetPinValue+0xd0>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_u8SetPinValue+0xcc>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	b3 c0       	rjmp	.+358    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	b1 c0       	rjmp	.+354    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3a 87       	std	Y+10, r19	; 0x0a
    1022:	29 87       	std	Y+9, r18	; 0x09
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	31 f0       	breq	.+12     	; 0x1038 <DIO_u8SetPinValue+0xfc>
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	21 30       	cpi	r18, 0x01	; 1
    1032:	31 05       	cpc	r19, r1
    1034:	b1 f0       	breq	.+44     	; 0x1062 <DIO_u8SetPinValue+0x126>
    1036:	29 c0       	rjmp	.+82     	; 0x108a <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_u8SetPinValue+0x11a>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_u8SetPinValue+0x116>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	8d c0       	rjmp	.+282    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1062:	a8 e3       	ldi	r26, 0x38	; 56
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e8 e3       	ldi	r30, 0x38	; 56
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinValue+0x144>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinValue+0x140>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	79 c0       	rjmp	.+242    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	77 c0       	rjmp	.+238    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	38 87       	std	Y+8, r19	; 0x08
    1096:	2f 83       	std	Y+7, r18	; 0x07
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	31 f0       	breq	.+12     	; 0x10ac <DIO_u8SetPinValue+0x170>
    10a0:	2f 81       	ldd	r18, Y+7	; 0x07
    10a2:	38 85       	ldd	r19, Y+8	; 0x08
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	b1 f0       	breq	.+44     	; 0x10d6 <DIO_u8SetPinValue+0x19a>
    10aa:	29 c0       	rjmp	.+82     	; 0x10fe <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8SetPinValue+0x18e>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_u8SetPinValue+0x18a>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	53 c0       	rjmp	.+166    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8SetPinValue+0x1b8>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8SetPinValue+0x1b4>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	3f c0       	rjmp	.+126    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	3d c0       	rjmp	.+122    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3e 83       	std	Y+6, r19	; 0x06
    110a:	2d 83       	std	Y+5, r18	; 0x05
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	31 f0       	breq	.+12     	; 0x1120 <DIO_u8SetPinValue+0x1e4>
    1114:	2d 81       	ldd	r18, Y+5	; 0x05
    1116:	3e 81       	ldd	r19, Y+6	; 0x06
    1118:	21 30       	cpi	r18, 0x01	; 1
    111a:	31 05       	cpc	r19, r1
    111c:	b1 f0       	breq	.+44     	; 0x114a <DIO_u8SetPinValue+0x20e>
    111e:	29 c0       	rjmp	.+82     	; 0x1172 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1120:	a2 e3       	ldi	r26, 0x32	; 50
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e2 e3       	ldi	r30, 0x32	; 50
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8SetPinValue+0x202>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8SetPinValue+0x1fe>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	19 c0       	rjmp	.+50     	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    114a:	a2 e3       	ldi	r26, 0x32	; 50
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e2 e3       	ldi	r30, 0x32	; 50
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_u8SetPinValue+0x22c>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_u8SetPinValue+0x228>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	05 c0       	rjmp	.+10     	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	03 c0       	rjmp	.+6      	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	01 c0       	rjmp	.+2      	; 0x117c <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    117a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	2e 96       	adiw	r28, 0x0e	; 14
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	28 97       	sbiw	r28, 0x08	; 8
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	6c 83       	std	Y+4, r22	; 0x04
    11a8:	5e 83       	std	Y+6, r21	; 0x06
    11aa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <DIO_u8GetPinValue+0x28>
    11b6:	a1 c0       	rjmp	.+322    	; 0x12fa <DIO_u8GetPinValue+0x16a>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <DIO_u8GetPinValue+0x30>
    11be:	9d c0       	rjmp	.+314    	; 0x12fa <DIO_u8GetPinValue+0x16a>
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	09 f4       	brne	.+2      	; 0x11ca <DIO_u8GetPinValue+0x3a>
    11c8:	98 c0       	rjmp	.+304    	; 0x12fa <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	38 87       	std	Y+8, r19	; 0x08
    11d2:	2f 83       	std	Y+7, r18	; 0x07
    11d4:	4f 81       	ldd	r20, Y+7	; 0x07
    11d6:	58 85       	ldd	r21, Y+8	; 0x08
    11d8:	41 30       	cpi	r20, 0x01	; 1
    11da:	51 05       	cpc	r21, r1
    11dc:	a9 f1       	breq	.+106    	; 0x1248 <DIO_u8GetPinValue+0xb8>
    11de:	8f 81       	ldd	r24, Y+7	; 0x07
    11e0:	98 85       	ldd	r25, Y+8	; 0x08
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	34 f4       	brge	.+12     	; 0x11f4 <DIO_u8GetPinValue+0x64>
    11e8:	2f 81       	ldd	r18, Y+7	; 0x07
    11ea:	38 85       	ldd	r19, Y+8	; 0x08
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	71 f0       	breq	.+28     	; 0x120e <DIO_u8GetPinValue+0x7e>
    11f2:	81 c0       	rjmp	.+258    	; 0x12f6 <DIO_u8GetPinValue+0x166>
    11f4:	4f 81       	ldd	r20, Y+7	; 0x07
    11f6:	58 85       	ldd	r21, Y+8	; 0x08
    11f8:	42 30       	cpi	r20, 0x02	; 2
    11fa:	51 05       	cpc	r21, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_u8GetPinValue+0x70>
    11fe:	41 c0       	rjmp	.+130    	; 0x1282 <DIO_u8GetPinValue+0xf2>
    1200:	8f 81       	ldd	r24, Y+7	; 0x07
    1202:	98 85       	ldd	r25, Y+8	; 0x08
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <DIO_u8GetPinValue+0x7c>
    120a:	58 c0       	rjmp	.+176    	; 0x12bc <DIO_u8GetPinValue+0x12c>
    120c:	74 c0       	rjmp	.+232    	; 0x12f6 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    120e:	e9 e3       	ldi	r30, 0x39	; 57
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_u8GetPinValue+0x96>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_u8GetPinValue+0x92>
    122a:	ca 01       	movw	r24, r20
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 23       	and	r24, r24
    1234:	21 f4       	brne	.+8      	; 0x123e <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1236:	ed 81       	ldd	r30, Y+5	; 0x05
    1238:	fe 81       	ldd	r31, Y+6	; 0x06
    123a:	10 82       	st	Z, r1
    123c:	5f c0       	rjmp	.+190    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    123e:	ed 81       	ldd	r30, Y+5	; 0x05
    1240:	fe 81       	ldd	r31, Y+6	; 0x06
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 83       	st	Z, r24
    1246:	5a c0       	rjmp	.+180    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1248:	e6 e3       	ldi	r30, 0x36	; 54
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8GetPinValue+0xd0>
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8GetPinValue+0xcc>
    1264:	ca 01       	movw	r24, r20
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	88 23       	and	r24, r24
    126e:	21 f4       	brne	.+8      	; 0x1278 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1270:	ed 81       	ldd	r30, Y+5	; 0x05
    1272:	fe 81       	ldd	r31, Y+6	; 0x06
    1274:	10 82       	st	Z, r1
    1276:	42 c0       	rjmp	.+132    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1278:	ed 81       	ldd	r30, Y+5	; 0x05
    127a:	fe 81       	ldd	r31, Y+6	; 0x06
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 83       	st	Z, r24
    1280:	3d c0       	rjmp	.+122    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1282:	e3 e3       	ldi	r30, 0x33	; 51
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8GetPinValue+0x10a>
    1296:	55 95       	asr	r21
    1298:	47 95       	ror	r20
    129a:	8a 95       	dec	r24
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8GetPinValue+0x106>
    129e:	ca 01       	movw	r24, r20
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	88 23       	and	r24, r24
    12a8:	21 f4       	brne	.+8      	; 0x12b2 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12aa:	ed 81       	ldd	r30, Y+5	; 0x05
    12ac:	fe 81       	ldd	r31, Y+6	; 0x06
    12ae:	10 82       	st	Z, r1
    12b0:	25 c0       	rjmp	.+74     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12b2:	ed 81       	ldd	r30, Y+5	; 0x05
    12b4:	fe 81       	ldd	r31, Y+6	; 0x06
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 83       	st	Z, r24
    12ba:	20 c0       	rjmp	.+64     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12bc:	e0 e3       	ldi	r30, 0x30	; 48
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_u8GetPinValue+0x144>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_u8GetPinValue+0x140>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	88 23       	and	r24, r24
    12e2:	21 f4       	brne	.+8      	; 0x12ec <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12e4:	ed 81       	ldd	r30, Y+5	; 0x05
    12e6:	fe 81       	ldd	r31, Y+6	; 0x06
    12e8:	10 82       	st	Z, r1
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12ec:	ed 81       	ldd	r30, Y+5	; 0x05
    12ee:	fe 81       	ldd	r31, Y+6	; 0x06
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 83       	st	Z, r24
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    12f6:	1a 82       	std	Y+2, r1	; 0x02
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12fa:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12fe:	28 96       	adiw	r28, 0x08	; 8
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	2d 97       	sbiw	r28, 0x0d	; 13
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 23       	and	r24, r24
    1330:	21 f0       	breq	.+8      	; 0x133a <DIO_u8SetPortDirection+0x2a>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	09 f0       	breq	.+2      	; 0x133a <DIO_u8SetPortDirection+0x2a>
    1338:	82 c0       	rjmp	.+260    	; 0x143e <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3d 87       	std	Y+13, r19	; 0x0d
    1342:	2c 87       	std	Y+12, r18	; 0x0c
    1344:	8c 85       	ldd	r24, Y+12	; 0x0c
    1346:	9d 85       	ldd	r25, Y+13	; 0x0d
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	71 f1       	breq	.+92     	; 0x13aa <DIO_u8SetPortDirection+0x9a>
    134e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1350:	3d 85       	ldd	r19, Y+13	; 0x0d
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <DIO_u8SetPortDirection+0x52>
    1358:	8c 85       	ldd	r24, Y+12	; 0x0c
    135a:	9d 85       	ldd	r25, Y+13	; 0x0d
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	69 f0       	breq	.+26     	; 0x137a <DIO_u8SetPortDirection+0x6a>
    1360:	6c c0       	rjmp	.+216    	; 0x143a <DIO_u8SetPortDirection+0x12a>
    1362:	2c 85       	ldd	r18, Y+12	; 0x0c
    1364:	3d 85       	ldd	r19, Y+13	; 0x0d
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	b9 f1       	breq	.+110    	; 0x13da <DIO_u8SetPortDirection+0xca>
    136c:	8c 85       	ldd	r24, Y+12	; 0x0c
    136e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <DIO_u8SetPortDirection+0x68>
    1376:	49 c0       	rjmp	.+146    	; 0x140a <DIO_u8SetPortDirection+0xfa>
    1378:	60 c0       	rjmp	.+192    	; 0x143a <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3b 87       	std	Y+11, r19	; 0x0b
    1382:	2a 87       	std	Y+10, r18	; 0x0a
    1384:	8a 85       	ldd	r24, Y+10	; 0x0a
    1386:	9b 85       	ldd	r25, Y+11	; 0x0b
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	31 f0       	breq	.+12     	; 0x1398 <DIO_u8SetPortDirection+0x88>
    138c:	2a 85       	ldd	r18, Y+10	; 0x0a
    138e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1390:	21 30       	cpi	r18, 0x01	; 1
    1392:	31 05       	cpc	r19, r1
    1394:	29 f0       	breq	.+10     	; 0x13a0 <DIO_u8SetPortDirection+0x90>
    1396:	54 c0       	rjmp	.+168    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	10 82       	st	Z, r1
    139e:	50 c0       	rjmp	.+160    	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    13a0:	ea e3       	ldi	r30, 0x3A	; 58
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	80 83       	st	Z, r24
    13a8:	4b c0       	rjmp	.+150    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	39 87       	std	Y+9, r19	; 0x09
    13b2:	28 87       	std	Y+8, r18	; 0x08
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	99 85       	ldd	r25, Y+9	; 0x09
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <DIO_u8SetPortDirection+0xb8>
    13bc:	28 85       	ldd	r18, Y+8	; 0x08
    13be:	39 85       	ldd	r19, Y+9	; 0x09
    13c0:	21 30       	cpi	r18, 0x01	; 1
    13c2:	31 05       	cpc	r19, r1
    13c4:	29 f0       	breq	.+10     	; 0x13d0 <DIO_u8SetPortDirection+0xc0>
    13c6:	3c c0       	rjmp	.+120    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    13c8:	e7 e3       	ldi	r30, 0x37	; 55
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	10 82       	st	Z, r1
    13ce:	38 c0       	rjmp	.+112    	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    13d0:	e7 e3       	ldi	r30, 0x37	; 55
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	80 83       	st	Z, r24
    13d8:	33 c0       	rjmp	.+102    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3f 83       	std	Y+7, r19	; 0x07
    13e2:	2e 83       	std	Y+6, r18	; 0x06
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <DIO_u8SetPortDirection+0xe8>
    13ec:	2e 81       	ldd	r18, Y+6	; 0x06
    13ee:	3f 81       	ldd	r19, Y+7	; 0x07
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	29 f0       	breq	.+10     	; 0x1400 <DIO_u8SetPortDirection+0xf0>
    13f6:	24 c0       	rjmp	.+72     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    13f8:	e4 e3       	ldi	r30, 0x34	; 52
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	10 82       	st	Z, r1
    13fe:	20 c0       	rjmp	.+64     	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    1400:	e4 e3       	ldi	r30, 0x34	; 52
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	80 83       	st	Z, r24
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3d 83       	std	Y+5, r19	; 0x05
    1412:	2c 83       	std	Y+4, r18	; 0x04
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	31 f0       	breq	.+12     	; 0x1428 <DIO_u8SetPortDirection+0x118>
    141c:	2c 81       	ldd	r18, Y+4	; 0x04
    141e:	3d 81       	ldd	r19, Y+5	; 0x05
    1420:	21 30       	cpi	r18, 0x01	; 1
    1422:	31 05       	cpc	r19, r1
    1424:	29 f0       	breq	.+10     	; 0x1430 <DIO_u8SetPortDirection+0x120>
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    1428:	e1 e3       	ldi	r30, 0x31	; 49
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	10 82       	st	Z, r1
    142e:	08 c0       	rjmp	.+16     	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	80 83       	st	Z, r24
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    143e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	2d 96       	adiw	r28, 0x0d	; 13
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_u8SetPortValue+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_u8SetPortValue+0x8>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3d 83       	std	Y+5, r19	; 0x05
    1472:	2c 83       	std	Y+4, r18	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	d1 f0       	breq	.+52     	; 0x14b2 <DIO_u8SetPortValue+0x5e>
    147e:	2c 81       	ldd	r18, Y+4	; 0x04
    1480:	3d 81       	ldd	r19, Y+5	; 0x05
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	2c f4       	brge	.+10     	; 0x1492 <DIO_u8SetPortValue+0x3e>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	61 f0       	breq	.+24     	; 0x14a8 <DIO_u8SetPortValue+0x54>
    1490:	1f c0       	rjmp	.+62     	; 0x14d0 <DIO_u8SetPortValue+0x7c>
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	81 f0       	breq	.+32     	; 0x14bc <DIO_u8SetPortValue+0x68>
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	81 f0       	breq	.+32     	; 0x14c6 <DIO_u8SetPortValue+0x72>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    14a8:	eb e3       	ldi	r30, 0x3B	; 59
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	80 83       	st	Z, r24
    14b0:	10 c0       	rjmp	.+32     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    14b2:	e8 e3       	ldi	r30, 0x38	; 56
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	80 83       	st	Z, r24
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	80 83       	st	Z, r24
    14c4:	06 c0       	rjmp	.+12     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    14c6:	e2 e3       	ldi	r30, 0x32	; 50
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	80 83       	st	Z, r24
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    14d0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_u8GetPortValue+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_u8GetPortValue+0x8>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <DIO_u8GetPortValue+0xa>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	8a 83       	std	Y+2, r24	; 0x02
    14f4:	7c 83       	std	Y+4, r23	; 0x04
    14f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	e9 f1       	breq	.+122    	; 0x157e <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3e 83       	std	Y+6, r19	; 0x06
    150c:	2d 83       	std	Y+5, r18	; 0x05
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	e1 f0       	breq	.+56     	; 0x1550 <DIO_u8GetPortValue+0x6c>
    1518:	2d 81       	ldd	r18, Y+5	; 0x05
    151a:	3e 81       	ldd	r19, Y+6	; 0x06
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <DIO_u8GetPortValue+0x48>
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	61 f0       	breq	.+24     	; 0x1542 <DIO_u8GetPortValue+0x5e>
    152a:	27 c0       	rjmp	.+78     	; 0x157a <DIO_u8GetPortValue+0x96>
    152c:	2d 81       	ldd	r18, Y+5	; 0x05
    152e:	3e 81       	ldd	r19, Y+6	; 0x06
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	a1 f0       	breq	.+40     	; 0x155e <DIO_u8GetPortValue+0x7a>
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	b1 f0       	breq	.+44     	; 0x156c <DIO_u8GetPortValue+0x88>
    1540:	1c c0       	rjmp	.+56     	; 0x157a <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1542:	e9 e3       	ldi	r30, 0x39	; 57
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	eb 81       	ldd	r30, Y+3	; 0x03
    154a:	fc 81       	ldd	r31, Y+4	; 0x04
    154c:	80 83       	st	Z, r24
    154e:	18 c0       	rjmp	.+48     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1550:	e6 e3       	ldi	r30, 0x36	; 54
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 83       	st	Z, r24
    155c:	11 c0       	rjmp	.+34     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    155e:	e3 e3       	ldi	r30, 0x33	; 51
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	eb 81       	ldd	r30, Y+3	; 0x03
    1566:	fc 81       	ldd	r31, Y+4	; 0x04
    1568:	80 83       	st	Z, r24
    156a:	0a c0       	rjmp	.+20     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    156c:	e0 e3       	ldi	r30, 0x30	; 48
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	eb 81       	ldd	r30, Y+3	; 0x03
    1574:	fc 81       	ldd	r31, Y+4	; 0x04
    1576:	80 83       	st	Z, r24
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    157a:	19 82       	std	Y+1, r1	; 0x01
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    157e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	26 96       	adiw	r28, 0x06	; 6
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <Dashboard_FrameOne>:
#include "LCD_interface.h"
#include "H_Bridge.h"


void Dashboard_FrameOne(void)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	ab 97       	sbiw	r28, 0x2b	; 43
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;

	LCD_voidClearScreen();
    15a8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a0 ea       	ldi	r26, 0xA0	; 160
    15b2:	b1 e4       	ldi	r27, 0x41	; 65
    15b4:	8f a3       	std	Y+39, r24	; 0x27
    15b6:	98 a7       	std	Y+40, r25	; 0x28
    15b8:	a9 a7       	std	Y+41, r26	; 0x29
    15ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15bc:	6f a1       	ldd	r22, Y+39	; 0x27
    15be:	78 a5       	ldd	r23, Y+40	; 0x28
    15c0:	89 a5       	ldd	r24, Y+41	; 0x29
    15c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15c4:	20 e0       	ldi	r18, 0x00	; 0
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	4a ef       	ldi	r20, 0xFA	; 250
    15ca:	54 e4       	ldi	r21, 0x44	; 68
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	8b a3       	std	Y+35, r24	; 0x23
    15d6:	9c a3       	std	Y+36, r25	; 0x24
    15d8:	ad a3       	std	Y+37, r26	; 0x25
    15da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15dc:	6b a1       	ldd	r22, Y+35	; 0x23
    15de:	7c a1       	ldd	r23, Y+36	; 0x24
    15e0:	8d a1       	ldd	r24, Y+37	; 0x25
    15e2:	9e a1       	ldd	r25, Y+38	; 0x26
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	40 e8       	ldi	r20, 0x80	; 128
    15ea:	5f e3       	ldi	r21, 0x3F	; 63
    15ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15f0:	88 23       	and	r24, r24
    15f2:	2c f4       	brge	.+10     	; 0x15fe <Dashboard_FrameOne+0x6a>
		__ticks = 1;
    15f4:	81 e0       	ldi	r24, 0x01	; 1
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9a a3       	std	Y+34, r25	; 0x22
    15fa:	89 a3       	std	Y+33, r24	; 0x21
    15fc:	3f c0       	rjmp	.+126    	; 0x167c <Dashboard_FrameOne+0xe8>
	else if (__tmp > 65535)
    15fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1600:	7c a1       	ldd	r23, Y+36	; 0x24
    1602:	8d a1       	ldd	r24, Y+37	; 0x25
    1604:	9e a1       	ldd	r25, Y+38	; 0x26
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	3f ef       	ldi	r19, 0xFF	; 255
    160a:	4f e7       	ldi	r20, 0x7F	; 127
    160c:	57 e4       	ldi	r21, 0x47	; 71
    160e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1612:	18 16       	cp	r1, r24
    1614:	4c f5       	brge	.+82     	; 0x1668 <Dashboard_FrameOne+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1616:	6f a1       	ldd	r22, Y+39	; 0x27
    1618:	78 a5       	ldd	r23, Y+40	; 0x28
    161a:	89 a5       	ldd	r24, Y+41	; 0x29
    161c:	9a a5       	ldd	r25, Y+42	; 0x2a
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	40 e2       	ldi	r20, 0x20	; 32
    1624:	51 e4       	ldi	r21, 0x41	; 65
    1626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	bc 01       	movw	r22, r24
    1630:	cd 01       	movw	r24, r26
    1632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1636:	dc 01       	movw	r26, r24
    1638:	cb 01       	movw	r24, r22
    163a:	9a a3       	std	Y+34, r25	; 0x22
    163c:	89 a3       	std	Y+33, r24	; 0x21
    163e:	0f c0       	rjmp	.+30     	; 0x165e <Dashboard_FrameOne+0xca>
    1640:	88 ec       	ldi	r24, 0xC8	; 200
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	98 a3       	std	Y+32, r25	; 0x20
    1646:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    164a:	98 a1       	ldd	r25, Y+32	; 0x20
    164c:	01 97       	sbiw	r24, 0x01	; 1
    164e:	f1 f7       	brne	.-4      	; 0x164c <Dashboard_FrameOne+0xb8>
    1650:	98 a3       	std	Y+32, r25	; 0x20
    1652:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	89 a1       	ldd	r24, Y+33	; 0x21
    1656:	9a a1       	ldd	r25, Y+34	; 0x22
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9a a3       	std	Y+34, r25	; 0x22
    165c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    165e:	89 a1       	ldd	r24, Y+33	; 0x21
    1660:	9a a1       	ldd	r25, Y+34	; 0x22
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	69 f7       	brne	.-38     	; 0x1640 <Dashboard_FrameOne+0xac>
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <Dashboard_FrameOne+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1668:	6b a1       	ldd	r22, Y+35	; 0x23
    166a:	7c a1       	ldd	r23, Y+36	; 0x24
    166c:	8d a1       	ldd	r24, Y+37	; 0x25
    166e:	9e a1       	ldd	r25, Y+38	; 0x26
    1670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1674:	dc 01       	movw	r26, r24
    1676:	cb 01       	movw	r24, r22
    1678:	9a a3       	std	Y+34, r25	; 0x22
    167a:	89 a3       	std	Y+33, r24	; 0x21
    167c:	89 a1       	ldd	r24, Y+33	; 0x21
    167e:	9a a1       	ldd	r25, Y+34	; 0x22
    1680:	9e 8f       	std	Y+30, r25	; 0x1e
    1682:	8d 8f       	std	Y+29, r24	; 0x1d
    1684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	f1 f7       	brne	.-4      	; 0x1688 <Dashboard_FrameOne+0xf4>
    168c:	9e 8f       	std	Y+30, r25	; 0x1e
    168e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-DC Motor");
    1690:	80 e6       	ldi	r24, 0x60	; 96
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    1698:	82 e0       	ldi	r24, 0x02	; 2
    169a:	60 e0       	ldi	r22, 0x00	; 0
    169c:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-Exit");
    16a0:	8b e6       	ldi	r24, 0x6B	; 107
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>

	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    16a8:	ce 01       	movw	r24, r28
    16aa:	8b 96       	adiw	r24, 0x2b	; 43
    16ac:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    16b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b2:	8f 3f       	cpi	r24, 0xFF	; 255
    16b4:	c9 f3       	breq	.-14     	; 0x16a8 <Dashboard_FrameOne+0x114>
		{
			if(Local_u8Key == '1') // If pressed key is '1'
    16b6:	8b a5       	ldd	r24, Y+43	; 0x2b
    16b8:	81 33       	cpi	r24, 0x31	; 49
    16ba:	19 f4       	brne	.+6      	; 0x16c2 <Dashboard_FrameOne+0x12e>
			{
				Dashboard_FrameTwo();
    16bc:	0e 94 4f 0c 	call	0x189e	; 0x189e <Dashboard_FrameTwo>
    16c0:	f3 cf       	rjmp	.-26     	; 0x16a8 <Dashboard_FrameOne+0x114>
			}
			else if (Local_u8Key == '2') // If pressed key is '2'
    16c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    16c4:	82 33       	cpi	r24, 0x32	; 50
    16c6:	81 f7       	brne	.-32     	; 0x16a8 <Dashboard_FrameOne+0x114>
			{
				LCD_voidClearScreen();
    16c8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a0 ea       	ldi	r26, 0xA0	; 160
    16d2:	b1 e4       	ldi	r27, 0x41	; 65
    16d4:	89 8f       	std	Y+25, r24	; 0x19
    16d6:	9a 8f       	std	Y+26, r25	; 0x1a
    16d8:	ab 8f       	std	Y+27, r26	; 0x1b
    16da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	69 8d       	ldd	r22, Y+25	; 0x19
    16de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a ef       	ldi	r20, 0xFA	; 250
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8d 8b       	std	Y+21, r24	; 0x15
    16f6:	9e 8b       	std	Y+22, r25	; 0x16
    16f8:	af 8b       	std	Y+23, r26	; 0x17
    16fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16fc:	6d 89       	ldd	r22, Y+21	; 0x15
    16fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1700:	8f 89       	ldd	r24, Y+23	; 0x17
    1702:	98 8d       	ldd	r25, Y+24	; 0x18
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1710:	88 23       	and	r24, r24
    1712:	2c f4       	brge	.+10     	; 0x171e <Dashboard_FrameOne+0x18a>
		__ticks = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 8b       	std	Y+20, r25	; 0x14
    171a:	8b 8b       	std	Y+19, r24	; 0x13
    171c:	3f c0       	rjmp	.+126    	; 0x179c <Dashboard_FrameOne+0x208>
	else if (__tmp > 65535)
    171e:	6d 89       	ldd	r22, Y+21	; 0x15
    1720:	7e 89       	ldd	r23, Y+22	; 0x16
    1722:	8f 89       	ldd	r24, Y+23	; 0x17
    1724:	98 8d       	ldd	r25, Y+24	; 0x18
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	57 e4       	ldi	r21, 0x47	; 71
    172e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	4c f5       	brge	.+82     	; 0x1788 <Dashboard_FrameOne+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	69 8d       	ldd	r22, Y+25	; 0x19
    1738:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9c 8b       	std	Y+20, r25	; 0x14
    175c:	8b 8b       	std	Y+19, r24	; 0x13
    175e:	0f c0       	rjmp	.+30     	; 0x177e <Dashboard_FrameOne+0x1ea>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9a 8b       	std	Y+18, r25	; 0x12
    1766:	89 8b       	std	Y+17, r24	; 0x11
    1768:	89 89       	ldd	r24, Y+17	; 0x11
    176a:	9a 89       	ldd	r25, Y+18	; 0x12
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <Dashboard_FrameOne+0x1d8>
    1770:	9a 8b       	std	Y+18, r25	; 0x12
    1772:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	8b 89       	ldd	r24, Y+19	; 0x13
    1776:	9c 89       	ldd	r25, Y+20	; 0x14
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9c 8b       	std	Y+20, r25	; 0x14
    177c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	8b 89       	ldd	r24, Y+19	; 0x13
    1780:	9c 89       	ldd	r25, Y+20	; 0x14
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <Dashboard_FrameOne+0x1cc>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <Dashboard_FrameOne+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	6d 89       	ldd	r22, Y+21	; 0x15
    178a:	7e 89       	ldd	r23, Y+22	; 0x16
    178c:	8f 89       	ldd	r24, Y+23	; 0x17
    178e:	98 8d       	ldd	r25, Y+24	; 0x18
    1790:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9c 8b       	std	Y+20, r25	; 0x14
    179a:	8b 8b       	std	Y+19, r24	; 0x13
    179c:	8b 89       	ldd	r24, Y+19	; 0x13
    179e:	9c 89       	ldd	r25, Y+20	; 0x14
    17a0:	98 8b       	std	Y+16, r25	; 0x10
    17a2:	8f 87       	std	Y+15, r24	; 0x0f
    17a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a6:	98 89       	ldd	r25, Y+16	; 0x10
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <Dashboard_FrameOne+0x214>
    17ac:	98 8b       	std	Y+16, r25	; 0x10
    17ae:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidWriteString((u8*)"GoodLuck!");
    17b0:	82 e7       	ldi	r24, 0x72	; 114
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e8       	ldi	r25, 0x80	; 128
    17bc:	ab e3       	ldi	r26, 0x3B	; 59
    17be:	b5 e4       	ldi	r27, 0x45	; 69
    17c0:	8b 87       	std	Y+11, r24	; 0x0b
    17c2:	9c 87       	std	Y+12, r25	; 0x0c
    17c4:	ad 87       	std	Y+13, r26	; 0x0d
    17c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    17cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a ef       	ldi	r20, 0xFA	; 250
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8f 83       	std	Y+7, r24	; 0x07
    17e2:	98 87       	std	Y+8, r25	; 0x08
    17e4:	a9 87       	std	Y+9, r26	; 0x09
    17e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17e8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ea:	78 85       	ldd	r23, Y+8	; 0x08
    17ec:	89 85       	ldd	r24, Y+9	; 0x09
    17ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <Dashboard_FrameOne+0x276>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <Dashboard_FrameOne+0x2f4>
	else if (__tmp > 65535)
    180a:	6f 81       	ldd	r22, Y+7	; 0x07
    180c:	78 85       	ldd	r23, Y+8	; 0x08
    180e:	89 85       	ldd	r24, Y+9	; 0x09
    1810:	9a 85       	ldd	r25, Y+10	; 0x0a
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <Dashboard_FrameOne+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	6b 85       	ldd	r22, Y+11	; 0x0b
    1824:	7c 85       	ldd	r23, Y+12	; 0x0c
    1826:	8d 85       	ldd	r24, Y+13	; 0x0d
    1828:	9e 85       	ldd	r25, Y+14	; 0x0e
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	9e 83       	std	Y+6, r25	; 0x06
    1848:	8d 83       	std	Y+5, r24	; 0x05
    184a:	0f c0       	rjmp	.+30     	; 0x186a <Dashboard_FrameOne+0x2d6>
    184c:	88 ec       	ldi	r24, 0xC8	; 200
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	9c 83       	std	Y+4, r25	; 0x04
    1852:	8b 83       	std	Y+3, r24	; 0x03
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <Dashboard_FrameOne+0x2c4>
    185c:	9c 83       	std	Y+4, r25	; 0x04
    185e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8d 81       	ldd	r24, Y+5	; 0x05
    1862:	9e 81       	ldd	r25, Y+6	; 0x06
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8d 81       	ldd	r24, Y+5	; 0x05
    186c:	9e 81       	ldd	r25, Y+6	; 0x06
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <Dashboard_FrameOne+0x2b8>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <Dashboard_FrameOne+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	6f 81       	ldd	r22, Y+7	; 0x07
    1876:	78 85       	ldd	r23, Y+8	; 0x08
    1878:	89 85       	ldd	r24, Y+9	; 0x09
    187a:	9a 85       	ldd	r25, Y+10	; 0x0a
    187c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	9e 83       	std	Y+6, r25	; 0x06
    1886:	8d 83       	std	Y+5, r24	; 0x05
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <Dashboard_FrameOne+0x300>
    1898:	9a 83       	std	Y+2, r25	; 0x02
    189a:	89 83       	std	Y+1, r24	; 0x01
    189c:	ff cf       	rjmp	.-2      	; 0x189c <Dashboard_FrameOne+0x308>

0000189e <Dashboard_FrameTwo>:
			}
		}
	}
}
void Dashboard_FrameTwo(void)
{
    189e:	0f 93       	push	r16
    18a0:	1f 93       	push	r17
    18a2:	df 93       	push	r29
    18a4:	cf 93       	push	r28
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	c7 54       	subi	r28, 0x47	; 71
    18ac:	d0 40       	sbci	r29, 0x00	; 0
    18ae:	0f b6       	in	r0, 0x3f	; 63
    18b0:	f8 94       	cli
    18b2:	de bf       	out	0x3e, r29	; 62
    18b4:	0f be       	out	0x3f, r0	; 63
    18b6:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;

	LCD_voidClearScreen();
    18b8:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    18bc:	fe 01       	movw	r30, r28
    18be:	ed 5b       	subi	r30, 0xBD	; 189
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 ea       	ldi	r26, 0xA0	; 160
    18c8:	b1 e4       	ldi	r27, 0x41	; 65
    18ca:	80 83       	st	Z, r24
    18cc:	91 83       	std	Z+1, r25	; 0x01
    18ce:	a2 83       	std	Z+2, r26	; 0x02
    18d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	8e 01       	movw	r16, r28
    18d4:	01 5c       	subi	r16, 0xC1	; 193
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	fe 01       	movw	r30, r28
    18da:	ed 5b       	subi	r30, 0xBD	; 189
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	4a ef       	ldi	r20, 0xFA	; 250
    18ec:	54 e4       	ldi	r21, 0x44	; 68
    18ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	f8 01       	movw	r30, r16
    18f8:	80 83       	st	Z, r24
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	a2 83       	std	Z+2, r26	; 0x02
    18fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1900:	fe 01       	movw	r30, r28
    1902:	ff 96       	adiw	r30, 0x3f	; 63
    1904:	60 81       	ld	r22, Z
    1906:	71 81       	ldd	r23, Z+1	; 0x01
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	20 e0       	ldi	r18, 0x00	; 0
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	40 e8       	ldi	r20, 0x80	; 128
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1918:	88 23       	and	r24, r24
    191a:	2c f4       	brge	.+10     	; 0x1926 <Dashboard_FrameTwo+0x88>
		__ticks = 1;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9e af       	std	Y+62, r25	; 0x3e
    1922:	8d af       	std	Y+61, r24	; 0x3d
    1924:	46 c0       	rjmp	.+140    	; 0x19b2 <Dashboard_FrameTwo+0x114>
	else if (__tmp > 65535)
    1926:	fe 01       	movw	r30, r28
    1928:	ff 96       	adiw	r30, 0x3f	; 63
    192a:	60 81       	ld	r22, Z
    192c:	71 81       	ldd	r23, Z+1	; 0x01
    192e:	82 81       	ldd	r24, Z+2	; 0x02
    1930:	93 81       	ldd	r25, Z+3	; 0x03
    1932:	20 e0       	ldi	r18, 0x00	; 0
    1934:	3f ef       	ldi	r19, 0xFF	; 255
    1936:	4f e7       	ldi	r20, 0x7F	; 127
    1938:	57 e4       	ldi	r21, 0x47	; 71
    193a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    193e:	18 16       	cp	r1, r24
    1940:	64 f5       	brge	.+88     	; 0x199a <Dashboard_FrameTwo+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1942:	fe 01       	movw	r30, r28
    1944:	ed 5b       	subi	r30, 0xBD	; 189
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	40 e2       	ldi	r20, 0x20	; 32
    1956:	51 e4       	ldi	r21, 0x41	; 65
    1958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	9e af       	std	Y+62, r25	; 0x3e
    196e:	8d af       	std	Y+61, r24	; 0x3d
    1970:	0f c0       	rjmp	.+30     	; 0x1990 <Dashboard_FrameTwo+0xf2>
    1972:	88 ec       	ldi	r24, 0xC8	; 200
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9c af       	std	Y+60, r25	; 0x3c
    1978:	8b af       	std	Y+59, r24	; 0x3b
    197a:	8b ad       	ldd	r24, Y+59	; 0x3b
    197c:	9c ad       	ldd	r25, Y+60	; 0x3c
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <Dashboard_FrameTwo+0xe0>
    1982:	9c af       	std	Y+60, r25	; 0x3c
    1984:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1986:	8d ad       	ldd	r24, Y+61	; 0x3d
    1988:	9e ad       	ldd	r25, Y+62	; 0x3e
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	9e af       	std	Y+62, r25	; 0x3e
    198e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1990:	8d ad       	ldd	r24, Y+61	; 0x3d
    1992:	9e ad       	ldd	r25, Y+62	; 0x3e
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	69 f7       	brne	.-38     	; 0x1972 <Dashboard_FrameTwo+0xd4>
    1998:	16 c0       	rjmp	.+44     	; 0x19c6 <Dashboard_FrameTwo+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199a:	fe 01       	movw	r30, r28
    199c:	ff 96       	adiw	r30, 0x3f	; 63
    199e:	60 81       	ld	r22, Z
    19a0:	71 81       	ldd	r23, Z+1	; 0x01
    19a2:	82 81       	ldd	r24, Z+2	; 0x02
    19a4:	93 81       	ldd	r25, Z+3	; 0x03
    19a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	9e af       	std	Y+62, r25	; 0x3e
    19b0:	8d af       	std	Y+61, r24	; 0x3d
    19b2:	8d ad       	ldd	r24, Y+61	; 0x3d
    19b4:	9e ad       	ldd	r25, Y+62	; 0x3e
    19b6:	9a af       	std	Y+58, r25	; 0x3a
    19b8:	89 af       	std	Y+57, r24	; 0x39
    19ba:	89 ad       	ldd	r24, Y+57	; 0x39
    19bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	f1 f7       	brne	.-4      	; 0x19be <Dashboard_FrameTwo+0x120>
    19c2:	9a af       	std	Y+58, r25	; 0x3a
    19c4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-RotateCW");
    19c6:	8c e7       	ldi	r24, 0x7C	; 124
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	60 e0       	ldi	r22, 0x00	; 0
    19d2:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-RotateCCW");
    19d6:	87 e8       	ldi	r24, 0x87	; 135
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE1,10);
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	6a e0       	ldi	r22, 0x0A	; 10
    19e2:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"3-Back");
    19e6:	83 e9       	ldi	r24, 0x93	; 147
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    19ee:	ce 01       	movw	r24, r28
    19f0:	89 5b       	subi	r24, 0xB9	; 185
    19f2:	9f 4f       	sbci	r25, 0xFF	; 255
    19f4:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    19f8:	fe 01       	movw	r30, r28
    19fa:	e9 5b       	subi	r30, 0xB9	; 185
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	80 81       	ld	r24, Z
    1a00:	8f 3f       	cpi	r24, 0xFF	; 255
    1a02:	a9 f3       	breq	.-22     	; 0x19ee <Dashboard_FrameTwo+0x150>
		{
			if(Local_u8Key == '1') // If pressed key is '1'
    1a04:	fe 01       	movw	r30, r28
    1a06:	e9 5b       	subi	r30, 0xB9	; 185
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	80 81       	ld	r24, Z
    1a0c:	81 33       	cpi	r24, 0x31	; 49
    1a0e:	09 f0       	breq	.+2      	; 0x1a12 <Dashboard_FrameTwo+0x174>
    1a10:	ed c0       	rjmp	.+474    	; 0x1bec <Dashboard_FrameTwo+0x34e>
			{
				LCD_voidClearScreen();
    1a12:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 ea       	ldi	r26, 0xA0	; 160
    1a1c:	b1 e4       	ldi	r27, 0x41	; 65
    1a1e:	8d ab       	std	Y+53, r24	; 0x35
    1a20:	9e ab       	std	Y+54, r25	; 0x36
    1a22:	af ab       	std	Y+55, r26	; 0x37
    1a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6d a9       	ldd	r22, Y+53	; 0x35
    1a28:	7e a9       	ldd	r23, Y+54	; 0x36
    1a2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a ef       	ldi	r20, 0xFA	; 250
    1a34:	54 e4       	ldi	r21, 0x44	; 68
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	89 ab       	std	Y+49, r24	; 0x31
    1a40:	9a ab       	std	Y+50, r25	; 0x32
    1a42:	ab ab       	std	Y+51, r26	; 0x33
    1a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1a46:	69 a9       	ldd	r22, Y+49	; 0x31
    1a48:	7a a9       	ldd	r23, Y+50	; 0x32
    1a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <Dashboard_FrameTwo+0x1ca>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	98 ab       	std	Y+48, r25	; 0x30
    1a64:	8f a7       	std	Y+47, r24	; 0x2f
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <Dashboard_FrameTwo+0x248>
	else if (__tmp > 65535)
    1a68:	69 a9       	ldd	r22, Y+49	; 0x31
    1a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    1a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <Dashboard_FrameTwo+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6d a9       	ldd	r22, Y+53	; 0x35
    1a82:	7e a9       	ldd	r23, Y+54	; 0x36
    1a84:	8f a9       	ldd	r24, Y+55	; 0x37
    1a86:	98 ad       	ldd	r25, Y+56	; 0x38
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	98 ab       	std	Y+48, r25	; 0x30
    1aa6:	8f a7       	std	Y+47, r24	; 0x2f
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <Dashboard_FrameTwo+0x22a>
    1aaa:	88 ec       	ldi	r24, 0xC8	; 200
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9e a7       	std	Y+46, r25	; 0x2e
    1ab0:	8d a7       	std	Y+45, r24	; 0x2d
    1ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <Dashboard_FrameTwo+0x218>
    1aba:	9e a7       	std	Y+46, r25	; 0x2e
    1abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	98 ab       	std	Y+48, r25	; 0x30
    1ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aca:	98 a9       	ldd	r25, Y+48	; 0x30
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <Dashboard_FrameTwo+0x20c>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <Dashboard_FrameTwo+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	98 ab       	std	Y+48, r25	; 0x30
    1ae4:	8f a7       	std	Y+47, r24	; 0x2f
    1ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    1aea:	9c a7       	std	Y+44, r25	; 0x2c
    1aec:	8b a7       	std	Y+43, r24	; 0x2b
    1aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <Dashboard_FrameTwo+0x254>
    1af6:	9c a7       	std	Y+44, r25	; 0x2c
    1af8:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CW ....");
    1afa:	8a e9       	ldi	r24, 0x9A	; 154
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
				H_BRIDGE_voidRotateCW();
    1b02:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <H_BRIDGE_voidRotateCW>
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e4       	ldi	r25, 0x40	; 64
    1b0a:	ac e9       	ldi	r26, 0x9C	; 156
    1b0c:	b5 e4       	ldi	r27, 0x45	; 69
    1b0e:	8f a3       	std	Y+39, r24	; 0x27
    1b10:	98 a7       	std	Y+40, r25	; 0x28
    1b12:	a9 a7       	std	Y+41, r26	; 0x29
    1b14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b16:	6f a1       	ldd	r22, Y+39	; 0x27
    1b18:	78 a5       	ldd	r23, Y+40	; 0x28
    1b1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1b1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	4a ef       	ldi	r20, 0xFA	; 250
    1b24:	54 e4       	ldi	r21, 0x44	; 68
    1b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	8b a3       	std	Y+35, r24	; 0x23
    1b30:	9c a3       	std	Y+36, r25	; 0x24
    1b32:	ad a3       	std	Y+37, r26	; 0x25
    1b34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b36:	6b a1       	ldd	r22, Y+35	; 0x23
    1b38:	7c a1       	ldd	r23, Y+36	; 0x24
    1b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    1b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	2c f4       	brge	.+10     	; 0x1b58 <Dashboard_FrameTwo+0x2ba>
		__ticks = 1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	9a a3       	std	Y+34, r25	; 0x22
    1b54:	89 a3       	std	Y+33, r24	; 0x21
    1b56:	3f c0       	rjmp	.+126    	; 0x1bd6 <Dashboard_FrameTwo+0x338>
	else if (__tmp > 65535)
    1b58:	6b a1       	ldd	r22, Y+35	; 0x23
    1b5a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b5c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	3f ef       	ldi	r19, 0xFF	; 255
    1b64:	4f e7       	ldi	r20, 0x7F	; 127
    1b66:	57 e4       	ldi	r21, 0x47	; 71
    1b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b6c:	18 16       	cp	r1, r24
    1b6e:	4c f5       	brge	.+82     	; 0x1bc2 <Dashboard_FrameTwo+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b70:	6f a1       	ldd	r22, Y+39	; 0x27
    1b72:	78 a5       	ldd	r23, Y+40	; 0x28
    1b74:	89 a5       	ldd	r24, Y+41	; 0x29
    1b76:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e2       	ldi	r20, 0x20	; 32
    1b7e:	51 e4       	ldi	r21, 0x41	; 65
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	bc 01       	movw	r22, r24
    1b8a:	cd 01       	movw	r24, r26
    1b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b90:	dc 01       	movw	r26, r24
    1b92:	cb 01       	movw	r24, r22
    1b94:	9a a3       	std	Y+34, r25	; 0x22
    1b96:	89 a3       	std	Y+33, r24	; 0x21
    1b98:	0f c0       	rjmp	.+30     	; 0x1bb8 <Dashboard_FrameTwo+0x31a>
    1b9a:	88 ec       	ldi	r24, 0xC8	; 200
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	98 a3       	std	Y+32, r25	; 0x20
    1ba0:	8f 8f       	std	Y+31, r24	; 0x1f
    1ba2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ba4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <Dashboard_FrameTwo+0x308>
    1baa:	98 a3       	std	Y+32, r25	; 0x20
    1bac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bae:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb0:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	9a a3       	std	Y+34, r25	; 0x22
    1bb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bba:	9a a1       	ldd	r25, Y+34	; 0x22
    1bbc:	00 97       	sbiw	r24, 0x00	; 0
    1bbe:	69 f7       	brne	.-38     	; 0x1b9a <Dashboard_FrameTwo+0x2fc>
    1bc0:	14 c0       	rjmp	.+40     	; 0x1bea <Dashboard_FrameTwo+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc2:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc4:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc6:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc8:	9e a1       	ldd	r25, Y+38	; 0x26
    1bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	9a a3       	std	Y+34, r25	; 0x22
    1bd4:	89 a3       	std	Y+33, r24	; 0x21
    1bd6:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd8:	9a a1       	ldd	r25, Y+34	; 0x22
    1bda:	9e 8f       	std	Y+30, r25	; 0x1e
    1bdc:	8d 8f       	std	Y+29, r24	; 0x1d
    1bde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1be0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <Dashboard_FrameTwo+0x344>
    1be6:	9e 8f       	std	Y+30, r25	; 0x1e
    1be8:	8d 8f       	std	Y+29, r24	; 0x1d
    1bea:	ff cf       	rjmp	.-2      	; 0x1bea <Dashboard_FrameTwo+0x34c>
				_delay_ms(5000);
				while(1);
			}
			else if (Local_u8Key == '2') // If pressed key is '2'
    1bec:	fe 01       	movw	r30, r28
    1bee:	e9 5b       	subi	r30, 0xB9	; 185
    1bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf2:	80 81       	ld	r24, Z
    1bf4:	82 33       	cpi	r24, 0x32	; 50
    1bf6:	09 f0       	breq	.+2      	; 0x1bfa <Dashboard_FrameTwo+0x35c>
    1bf8:	ed c0       	rjmp	.+474    	; 0x1dd4 <Dashboard_FrameTwo+0x536>
			{
				LCD_voidClearScreen();
    1bfa:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a0 ea       	ldi	r26, 0xA0	; 160
    1c04:	b1 e4       	ldi	r27, 0x41	; 65
    1c06:	89 8f       	std	Y+25, r24	; 0x19
    1c08:	9a 8f       	std	Y+26, r25	; 0x1a
    1c0a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a ef       	ldi	r20, 0xFA	; 250
    1c1c:	54 e4       	ldi	r21, 0x44	; 68
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	8d 8b       	std	Y+21, r24	; 0x15
    1c28:	9e 8b       	std	Y+22, r25	; 0x16
    1c2a:	af 8b       	std	Y+23, r26	; 0x17
    1c2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1c30:	7e 89       	ldd	r23, Y+22	; 0x16
    1c32:	8f 89       	ldd	r24, Y+23	; 0x17
    1c34:	98 8d       	ldd	r25, Y+24	; 0x18
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <Dashboard_FrameTwo+0x3b2>
		__ticks = 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	9c 8b       	std	Y+20, r25	; 0x14
    1c4c:	8b 8b       	std	Y+19, r24	; 0x13
    1c4e:	3f c0       	rjmp	.+126    	; 0x1cce <Dashboard_FrameTwo+0x430>
	else if (__tmp > 65535)
    1c50:	6d 89       	ldd	r22, Y+21	; 0x15
    1c52:	7e 89       	ldd	r23, Y+22	; 0x16
    1c54:	8f 89       	ldd	r24, Y+23	; 0x17
    1c56:	98 8d       	ldd	r25, Y+24	; 0x18
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	4c f5       	brge	.+82     	; 0x1cba <Dashboard_FrameTwo+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	69 8d       	ldd	r22, Y+25	; 0x19
    1c6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9c 8b       	std	Y+20, r25	; 0x14
    1c8e:	8b 8b       	std	Y+19, r24	; 0x13
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <Dashboard_FrameTwo+0x412>
    1c92:	88 ec       	ldi	r24, 0xC8	; 200
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9a 8b       	std	Y+18, r25	; 0x12
    1c98:	89 8b       	std	Y+17, r24	; 0x11
    1c9a:	89 89       	ldd	r24, Y+17	; 0x11
    1c9c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <Dashboard_FrameTwo+0x400>
    1ca2:	9a 8b       	std	Y+18, r25	; 0x12
    1ca4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca8:	9c 89       	ldd	r25, Y+20	; 0x14
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	9c 8b       	std	Y+20, r25	; 0x14
    1cae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1cb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <Dashboard_FrameTwo+0x3f4>
    1cb8:	14 c0       	rjmp	.+40     	; 0x1ce2 <Dashboard_FrameTwo+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	6d 89       	ldd	r22, Y+21	; 0x15
    1cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    1cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	9c 8b       	std	Y+20, r25	; 0x14
    1ccc:	8b 8b       	std	Y+19, r24	; 0x13
    1cce:	8b 89       	ldd	r24, Y+19	; 0x13
    1cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1cd2:	98 8b       	std	Y+16, r25	; 0x10
    1cd4:	8f 87       	std	Y+15, r24	; 0x0f
    1cd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cd8:	98 89       	ldd	r25, Y+16	; 0x10
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <Dashboard_FrameTwo+0x43c>
    1cde:	98 8b       	std	Y+16, r25	; 0x10
    1ce0:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CCW ....");
    1ce2:	8a ea       	ldi	r24, 0xAA	; 170
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
				H_BRIDGE_voidRotateCCW();
    1cea:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <H_BRIDGE_voidRotateCCW>
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e4       	ldi	r25, 0x40	; 64
    1cf2:	ac e9       	ldi	r26, 0x9C	; 156
    1cf4:	b5 e4       	ldi	r27, 0x45	; 69
    1cf6:	8b 87       	std	Y+11, r24	; 0x0b
    1cf8:	9c 87       	std	Y+12, r25	; 0x0c
    1cfa:	ad 87       	std	Y+13, r26	; 0x0d
    1cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4a ef       	ldi	r20, 0xFA	; 250
    1d0c:	54 e4       	ldi	r21, 0x44	; 68
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8f 83       	std	Y+7, r24	; 0x07
    1d18:	98 87       	std	Y+8, r25	; 0x08
    1d1a:	a9 87       	std	Y+9, r26	; 0x09
    1d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d20:	78 85       	ldd	r23, Y+8	; 0x08
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	2c f4       	brge	.+10     	; 0x1d40 <Dashboard_FrameTwo+0x4a2>
		__ticks = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	3f c0       	rjmp	.+126    	; 0x1dbe <Dashboard_FrameTwo+0x520>
	else if (__tmp > 65535)
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	4c f5       	brge	.+82     	; 0x1daa <Dashboard_FrameTwo+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <Dashboard_FrameTwo+0x502>
    1d82:	88 ec       	ldi	r24, 0xC8	; 200
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 83       	std	Y+4, r25	; 0x04
    1d88:	8b 83       	std	Y+3, r24	; 0x03
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <Dashboard_FrameTwo+0x4f0>
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	69 f7       	brne	.-38     	; 0x1d82 <Dashboard_FrameTwo+0x4e4>
    1da8:	14 c0       	rjmp	.+40     	; 0x1dd2 <Dashboard_FrameTwo+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <Dashboard_FrameTwo+0x52c>
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01
    1dd2:	ff cf       	rjmp	.-2      	; 0x1dd2 <Dashboard_FrameTwo+0x534>
				_delay_ms(5000);
				while(1);
			}
			else if(Local_u8Key == '3' ) // If pressed key is '3'
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e9 5b       	subi	r30, 0xB9	; 185
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	83 33       	cpi	r24, 0x33	; 51
    1dde:	09 f0       	breq	.+2      	; 0x1de2 <Dashboard_FrameTwo+0x544>
    1de0:	06 ce       	rjmp	.-1012   	; 0x19ee <Dashboard_FrameTwo+0x150>
			{
				Dashboard_FrameOne();
    1de2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Dashboard_FrameOne>
    1de6:	03 ce       	rjmp	.-1018   	; 0x19ee <Dashboard_FrameTwo+0x150>

00001de8 <H_BRIDGE_voidRotateCW>:

#include "H_Bridge.h"


void H_BRIDGE_voidRotateCW(void)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_LOW);
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	60 e0       	ldi	r22, 0x00	; 0
    1df4:	40 e0       	ldi	r20, 0x00	; 0
    1df6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_HIGH);
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    1e04:	f5 cf       	rjmp	.-22     	; 0x1df0 <H_BRIDGE_voidRotateCW+0x8>

00001e06 <H_BRIDGE_voidRotateCCW>:
	}
}
void H_BRIDGE_voidRotateCCW(void)
{
    1e06:	df 93       	push	r29
    1e08:	cf 93       	push	r28
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_LOW);
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	61 e0       	ldi	r22, 0x01	; 1
    1e12:	40 e0       	ldi	r20, 0x00	; 0
    1e14:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_HIGH);
    1e18:	81 e0       	ldi	r24, 0x01	; 1
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    1e22:	f5 cf       	rjmp	.-22     	; 0x1e0e <H_BRIDGE_voidRotateCCW+0x8>

00001e24 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    1e24:	df 93       	push	r29
    1e26:	cf 93       	push	r28
    1e28:	cd b7       	in	r28, 0x3d	; 61
    1e2a:	de b7       	in	r29, 0x3e	; 62
    1e2c:	66 97       	sbiw	r28, 0x16	; 22
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	f8 94       	cli
    1e32:	de bf       	out	0x3e, r29	; 62
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	cd bf       	out	0x3d, r28	; 61
    1e38:	9e 8b       	std	Y+22, r25	; 0x16
    1e3a:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	8b 8b       	std	Y+19, r24	; 0x13
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    1e40:	18 8a       	std	Y+16, r1	; 0x10
	if(Copy_pu8ReturnedKey != NULL)
    1e42:	8d 89       	ldd	r24, Y+21	; 0x15
    1e44:	9e 89       	ldd	r25, Y+22	; 0x16
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <KPD_u8GetKeyState+0x28>
    1e4a:	f0 c0       	rjmp	.+480    	; 0x202c <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1e4c:	ed 89       	ldd	r30, Y+21	; 0x15
    1e4e:	fe 89       	ldd	r31, Y+22	; 0x16
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    1e54:	1a 8a       	std	Y+18, r1	; 0x12
    1e56:	e5 c0       	rjmp	.+458    	; 0x2022 <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    1e58:	8a 89       	ldd	r24, Y+18	; 0x12
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	fc 01       	movw	r30, r24
    1e60:	e7 5b       	subi	r30, 0xB7	; 183
    1e62:	fe 4f       	sbci	r31, 0xFE	; 254
    1e64:	90 81       	ld	r25, Z
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	69 2f       	mov	r22, r25
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    1e70:	19 8a       	std	Y+17, r1	; 0x11
    1e72:	c1 c0       	rjmp	.+386    	; 0x1ff6 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1e74:	89 89       	ldd	r24, Y+17	; 0x11
    1e76:	88 2f       	mov	r24, r24
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	e3 5b       	subi	r30, 0xB3	; 179
    1e7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e80:	90 81       	ld	r25, Z
    1e82:	9e 01       	movw	r18, r28
    1e84:	2c 5e       	subi	r18, 0xEC	; 236
    1e86:	3f 4f       	sbci	r19, 0xFF	; 255
    1e88:	82 e0       	ldi	r24, 0x02	; 2
    1e8a:	69 2f       	mov	r22, r25
    1e8c:	a9 01       	movw	r20, r18
    1e8e:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    1e92:	8c 89       	ldd	r24, Y+20	; 0x14
    1e94:	88 23       	and	r24, r24
    1e96:	09 f0       	breq	.+2      	; 0x1e9a <KPD_u8GetKeyState+0x76>
    1e98:	ab c0       	rjmp	.+342    	; 0x1ff0 <KPD_u8GetKeyState+0x1cc>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	a0 ea       	ldi	r26, 0xA0	; 160
    1ea0:	b1 e4       	ldi	r27, 0x41	; 65
    1ea2:	8b 87       	std	Y+11, r24	; 0x0b
    1ea4:	9c 87       	std	Y+12, r25	; 0x0c
    1ea6:	ad 87       	std	Y+13, r26	; 0x0d
    1ea8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eaa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eac:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eae:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eb0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	4a ef       	ldi	r20, 0xFA	; 250
    1eb8:	54 e4       	ldi	r21, 0x44	; 68
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8f 83       	std	Y+7, r24	; 0x07
    1ec4:	98 87       	std	Y+8, r25	; 0x08
    1ec6:	a9 87       	std	Y+9, r26	; 0x09
    1ec8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eca:	6f 81       	ldd	r22, Y+7	; 0x07
    1ecc:	78 85       	ldd	r23, Y+8	; 0x08
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	20 e0       	ldi	r18, 0x00	; 0
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	40 e8       	ldi	r20, 0x80	; 128
    1ed8:	5f e3       	ldi	r21, 0x3F	; 63
    1eda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ede:	88 23       	and	r24, r24
    1ee0:	2c f4       	brge	.+10     	; 0x1eec <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
    1eea:	3f c0       	rjmp	.+126    	; 0x1f6a <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1eec:	6f 81       	ldd	r22, Y+7	; 0x07
    1eee:	78 85       	ldd	r23, Y+8	; 0x08
    1ef0:	89 85       	ldd	r24, Y+9	; 0x09
    1ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	57 e4       	ldi	r21, 0x47	; 71
    1efc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	4c f5       	brge	.+82     	; 0x1f56 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f04:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f06:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f08:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	9e 83       	std	Y+6, r25	; 0x06
    1f2a:	8d 83       	std	Y+5, r24	; 0x05
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <KPD_u8GetKeyState+0x128>
    1f2e:	88 ec       	ldi	r24, 0xC8	; 200
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9c 83       	std	Y+4, r25	; 0x04
    1f34:	8b 83       	std	Y+3, r24	; 0x03
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	9c 81       	ldd	r25, Y+4	; 0x04
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <KPD_u8GetKeyState+0x116>
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	9e 83       	std	Y+6, r25	; 0x06
    1f4a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	00 97       	sbiw	r24, 0x00	; 0
    1f52:	69 f7       	brne	.-38     	; 0x1f2e <KPD_u8GetKeyState+0x10a>
    1f54:	14 c0       	rjmp	.+40     	; 0x1f7e <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f56:	6f 81       	ldd	r22, Y+7	; 0x07
    1f58:	78 85       	ldd	r23, Y+8	; 0x08
    1f5a:	89 85       	ldd	r24, Y+9	; 0x09
    1f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	9e 83       	std	Y+6, r25	; 0x06
    1f68:	8d 83       	std	Y+5, r24	; 0x05
    1f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6e:	9a 83       	std	Y+2, r25	; 0x02
    1f70:	89 83       	std	Y+1, r24	; 0x01
    1f72:	89 81       	ldd	r24, Y+1	; 0x01
    1f74:	9a 81       	ldd	r25, Y+2	; 0x02
    1f76:	01 97       	sbiw	r24, 0x01	; 1
    1f78:	f1 f7       	brne	.-4      	; 0x1f76 <KPD_u8GetKeyState+0x152>
    1f7a:	9a 83       	std	Y+2, r25	; 0x02
    1f7c:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1f7e:	89 89       	ldd	r24, Y+17	; 0x11
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	fc 01       	movw	r30, r24
    1f86:	e3 5b       	subi	r30, 0xB3	; 179
    1f88:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8a:	90 81       	ld	r25, Z
    1f8c:	9e 01       	movw	r18, r28
    1f8e:	2c 5e       	subi	r18, 0xEC	; 236
    1f90:	3f 4f       	sbci	r19, 0xFF	; 255
    1f92:	82 e0       	ldi	r24, 0x02	; 2
    1f94:	69 2f       	mov	r22, r25
    1f96:	a9 01       	movw	r20, r18
    1f98:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1f9e:	89 89       	ldd	r24, Y+17	; 0x11
    1fa0:	88 2f       	mov	r24, r24
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e3 5b       	subi	r30, 0xB3	; 179
    1fa8:	fe 4f       	sbci	r31, 0xFE	; 254
    1faa:	90 81       	ld	r25, Z
    1fac:	9e 01       	movw	r18, r28
    1fae:	2c 5e       	subi	r18, 0xEC	; 236
    1fb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb2:	82 e0       	ldi	r24, 0x02	; 2
    1fb4:	69 2f       	mov	r22, r25
    1fb6:	a9 01       	movw	r20, r18
    1fb8:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    1fbc:	8c 89       	ldd	r24, Y+20	; 0x14
    1fbe:	88 23       	and	r24, r24
    1fc0:	71 f3       	breq	.-36     	; 0x1f9e <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1fc2:	8a 89       	ldd	r24, Y+18	; 0x12
    1fc4:	48 2f       	mov	r20, r24
    1fc6:	50 e0       	ldi	r21, 0x00	; 0
    1fc8:	89 89       	ldd	r24, Y+17	; 0x11
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	ca 01       	movw	r24, r20
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	82 0f       	add	r24, r18
    1fda:	93 1f       	adc	r25, r19
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e7 5c       	subi	r30, 0xC7	; 199
    1fe0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fe2:	80 81       	ld	r24, Z
    1fe4:	ed 89       	ldd	r30, Y+21	; 0x15
    1fe6:	fe 89       	ldd	r31, Y+22	; 0x16
    1fe8:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	88 8b       	std	Y+16, r24	; 0x10
    1fee:	07 c0       	rjmp	.+14     	; 0x1ffe <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    1ff0:	89 89       	ldd	r24, Y+17	; 0x11
    1ff2:	8f 5f       	subi	r24, 0xFF	; 255
    1ff4:	89 8b       	std	Y+17, r24	; 0x11
    1ff6:	89 89       	ldd	r24, Y+17	; 0x11
    1ff8:	84 30       	cpi	r24, 0x04	; 4
    1ffa:	08 f4       	brcc	.+2      	; 0x1ffe <KPD_u8GetKeyState+0x1da>
    1ffc:	3b cf       	rjmp	.-394    	; 0x1e74 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row*/
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    1ffe:	8a 89       	ldd	r24, Y+18	; 0x12
    2000:	88 2f       	mov	r24, r24
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	fc 01       	movw	r30, r24
    2006:	e7 5b       	subi	r30, 0xB7	; 183
    2008:	fe 4f       	sbci	r31, 0xFE	; 254
    200a:	90 81       	ld	r25, Z
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	69 2f       	mov	r22, r25
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    2016:	88 89       	ldd	r24, Y+16	; 0x10
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	49 f0       	breq	.+18     	; 0x202e <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    201c:	8a 89       	ldd	r24, Y+18	; 0x12
    201e:	8f 5f       	subi	r24, 0xFF	; 255
    2020:	8a 8b       	std	Y+18, r24	; 0x12
    2022:	8a 89       	ldd	r24, Y+18	; 0x12
    2024:	84 30       	cpi	r24, 0x04	; 4
    2026:	08 f4       	brcc	.+2      	; 0x202a <KPD_u8GetKeyState+0x206>
    2028:	17 cf       	rjmp	.-466    	; 0x1e58 <KPD_u8GetKeyState+0x34>
    202a:	01 c0       	rjmp	.+2      	; 0x202e <KPD_u8GetKeyState+0x20a>


	}
	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    202c:	1f 86       	std	Y+15, r1	; 0x0f
	}
	return Local_u8ErrorState;
    202e:	8b 89       	ldd	r24, Y+19	; 0x13
    2030:	66 96       	adiw	r28, 0x16	; 22
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    2042:	0f 93       	push	r16
    2044:	1f 93       	push	r17
    2046:	df 93       	push	r29
    2048:	cf 93       	push	r28
    204a:	cd b7       	in	r28, 0x3d	; 61
    204c:	de b7       	in	r29, 0x3e	; 62
    204e:	cc 54       	subi	r28, 0x4C	; 76
    2050:	d0 40       	sbci	r29, 0x00	; 0
    2052:	0f b6       	in	r0, 0x3f	; 63
    2054:	f8 94       	cli
    2056:	de bf       	out	0x3e, r29	; 62
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	cd bf       	out	0x3d, r28	; 61
    205c:	fe 01       	movw	r30, r28
    205e:	e7 5b       	subi	r30, 0xB7	; 183
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	ac e0       	ldi	r26, 0x0C	; 12
    2068:	b2 e4       	ldi	r27, 0x42	; 66
    206a:	80 83       	st	Z, r24
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	a2 83       	std	Z+2, r26	; 0x02
    2070:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2072:	8e 01       	movw	r16, r28
    2074:	0b 5b       	subi	r16, 0xBB	; 187
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	fe 01       	movw	r30, r28
    207a:	e7 5b       	subi	r30, 0xB7	; 183
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a ef       	ldi	r20, 0xFA	; 250
    208c:	54 e4       	ldi	r21, 0x44	; 68
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	f8 01       	movw	r30, r16
    2098:	80 83       	st	Z, r24
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	a2 83       	std	Z+2, r26	; 0x02
    209e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a0:	fe 01       	movw	r30, r28
    20a2:	eb 5b       	subi	r30, 0xBB	; 187
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	44 f4       	brge	.+16     	; 0x20ce <LCD_voidInit+0x8c>
		__ticks = 1;
    20be:	fe 01       	movw	r30, r28
    20c0:	ed 5b       	subi	r30, 0xBD	; 189
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
    20cc:	64 c0       	rjmp	.+200    	; 0x2196 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    20ce:	fe 01       	movw	r30, r28
    20d0:	eb 5b       	subi	r30, 0xBB	; 187
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	0c f0       	brlt	.+2      	; 0x20ee <LCD_voidInit+0xac>
    20ec:	43 c0       	rjmp	.+134    	; 0x2174 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	fe 01       	movw	r30, r28
    20f0:	e7 5b       	subi	r30, 0xB7	; 183
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e2       	ldi	r20, 0x20	; 32
    2102:	51 e4       	ldi	r21, 0x41	; 65
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	8e 01       	movw	r16, r28
    210e:	0d 5b       	subi	r16, 0xBD	; 189
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	f8 01       	movw	r30, r16
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
    2124:	1f c0       	rjmp	.+62     	; 0x2164 <LCD_voidInit+0x122>
    2126:	fe 01       	movw	r30, r28
    2128:	ef 5b       	subi	r30, 0xBF	; 191
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	88 ec       	ldi	r24, 0xC8	; 200
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
    2134:	fe 01       	movw	r30, r28
    2136:	ef 5b       	subi	r30, 0xBF	; 191
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <LCD_voidInit+0xfc>
    2142:	fe 01       	movw	r30, r28
    2144:	ef 5b       	subi	r30, 0xBF	; 191
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	de 01       	movw	r26, r28
    214e:	ad 5b       	subi	r26, 0xBD	; 189
    2150:	bf 4f       	sbci	r27, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	ed 5b       	subi	r30, 0xBD	; 189
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	9c 93       	st	X, r25
    2162:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2164:	fe 01       	movw	r30, r28
    2166:	ed 5b       	subi	r30, 0xBD	; 189
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	d1 f6       	brne	.-76     	; 0x2126 <LCD_voidInit+0xe4>
    2172:	24 c0       	rjmp	.+72     	; 0x21bc <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	8e 01       	movw	r16, r28
    2176:	0d 5b       	subi	r16, 0xBD	; 189
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	fe 01       	movw	r30, r28
    217c:	eb 5b       	subi	r30, 0xBB	; 187
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	f8 01       	movw	r30, r16
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
    2196:	fe 01       	movw	r30, r28
    2198:	ed 5b       	subi	r30, 0xBD	; 189
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	fe 01       	movw	r30, r28
    21a2:	ff 96       	adiw	r30, 0x3f	; 63
    21a4:	91 83       	std	Z+1, r25	; 0x01
    21a6:	80 83       	st	Z, r24
    21a8:	fe 01       	movw	r30, r28
    21aa:	ff 96       	adiw	r30, 0x3f	; 63
    21ac:	80 81       	ld	r24, Z
    21ae:	91 81       	ldd	r25, Z+1	; 0x01
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_voidInit+0x16e>
    21b4:	fe 01       	movw	r30, r28
    21b6:	ff 96       	adiw	r30, 0x3f	; 63
    21b8:	91 83       	std	Z+1, r25	; 0x01
    21ba:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    21bc:	88 e3       	ldi	r24, 0x38	; 56
    21be:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a0 e2       	ldi	r26, 0x20	; 32
    21c8:	b2 e4       	ldi	r27, 0x42	; 66
    21ca:	8b af       	std	Y+59, r24	; 0x3b
    21cc:	9c af       	std	Y+60, r25	; 0x3c
    21ce:	ad af       	std	Y+61, r26	; 0x3d
    21d0:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21d2:	6b ad       	ldd	r22, Y+59	; 0x3b
    21d4:	7c ad       	ldd	r23, Y+60	; 0x3c
    21d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    21d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    21da:	2b ea       	ldi	r18, 0xAB	; 171
    21dc:	3a ea       	ldi	r19, 0xAA	; 170
    21de:	4a e2       	ldi	r20, 0x2A	; 42
    21e0:	50 e4       	ldi	r21, 0x40	; 64
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8f ab       	std	Y+55, r24	; 0x37
    21ec:	98 af       	std	Y+56, r25	; 0x38
    21ee:	a9 af       	std	Y+57, r26	; 0x39
    21f0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    21f2:	6f a9       	ldd	r22, Y+55	; 0x37
    21f4:	78 ad       	ldd	r23, Y+56	; 0x38
    21f6:	89 ad       	ldd	r24, Y+57	; 0x39
    21f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	1c f4       	brge	.+6      	; 0x2210 <LCD_voidInit+0x1ce>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	8e ab       	std	Y+54, r24	; 0x36
    220e:	91 c0       	rjmp	.+290    	; 0x2332 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2210:	6f a9       	ldd	r22, Y+55	; 0x37
    2212:	78 ad       	ldd	r23, Y+56	; 0x38
    2214:	89 ad       	ldd	r24, Y+57	; 0x39
    2216:	9a ad       	ldd	r25, Y+58	; 0x3a
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	4f e7       	ldi	r20, 0x7F	; 127
    221e:	53 e4       	ldi	r21, 0x43	; 67
    2220:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2224:	18 16       	cp	r1, r24
    2226:	0c f0       	brlt	.+2      	; 0x222a <LCD_voidInit+0x1e8>
    2228:	7b c0       	rjmp	.+246    	; 0x2320 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    222a:	6b ad       	ldd	r22, Y+59	; 0x3b
    222c:	7c ad       	ldd	r23, Y+60	; 0x3c
    222e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2230:	9e ad       	ldd	r25, Y+62	; 0x3e
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	4a e7       	ldi	r20, 0x7A	; 122
    2238:	54 e4       	ldi	r21, 0x44	; 68
    223a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	8a ab       	std	Y+50, r24	; 0x32
    2244:	9b ab       	std	Y+51, r25	; 0x33
    2246:	ac ab       	std	Y+52, r26	; 0x34
    2248:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    224a:	6a a9       	ldd	r22, Y+50	; 0x32
    224c:	7b a9       	ldd	r23, Y+51	; 0x33
    224e:	8c a9       	ldd	r24, Y+52	; 0x34
    2250:	9d a9       	ldd	r25, Y+53	; 0x35
    2252:	20 e0       	ldi	r18, 0x00	; 0
    2254:	30 e0       	ldi	r19, 0x00	; 0
    2256:	4a ef       	ldi	r20, 0xFA	; 250
    2258:	54 e4       	ldi	r21, 0x44	; 68
    225a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225e:	dc 01       	movw	r26, r24
    2260:	cb 01       	movw	r24, r22
    2262:	8e a7       	std	Y+46, r24	; 0x2e
    2264:	9f a7       	std	Y+47, r25	; 0x2f
    2266:	a8 ab       	std	Y+48, r26	; 0x30
    2268:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    226a:	6e a5       	ldd	r22, Y+46	; 0x2e
    226c:	7f a5       	ldd	r23, Y+47	; 0x2f
    226e:	88 a9       	ldd	r24, Y+48	; 0x30
    2270:	99 a9       	ldd	r25, Y+49	; 0x31
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	30 e0       	ldi	r19, 0x00	; 0
    2276:	40 e8       	ldi	r20, 0x80	; 128
    2278:	5f e3       	ldi	r21, 0x3F	; 63
    227a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227e:	88 23       	and	r24, r24
    2280:	2c f4       	brge	.+10     	; 0x228c <LCD_voidInit+0x24a>
		__ticks = 1;
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	9d a7       	std	Y+45, r25	; 0x2d
    2288:	8c a7       	std	Y+44, r24	; 0x2c
    228a:	3f c0       	rjmp	.+126    	; 0x230a <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    228c:	6e a5       	ldd	r22, Y+46	; 0x2e
    228e:	7f a5       	ldd	r23, Y+47	; 0x2f
    2290:	88 a9       	ldd	r24, Y+48	; 0x30
    2292:	99 a9       	ldd	r25, Y+49	; 0x31
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	3f ef       	ldi	r19, 0xFF	; 255
    2298:	4f e7       	ldi	r20, 0x7F	; 127
    229a:	57 e4       	ldi	r21, 0x47	; 71
    229c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22a0:	18 16       	cp	r1, r24
    22a2:	4c f5       	brge	.+82     	; 0x22f6 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a4:	6a a9       	ldd	r22, Y+50	; 0x32
    22a6:	7b a9       	ldd	r23, Y+51	; 0x33
    22a8:	8c a9       	ldd	r24, Y+52	; 0x34
    22aa:	9d a9       	ldd	r25, Y+53	; 0x35
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e2       	ldi	r20, 0x20	; 32
    22b2:	51 e4       	ldi	r21, 0x41	; 65
    22b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	bc 01       	movw	r22, r24
    22be:	cd 01       	movw	r24, r26
    22c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	9d a7       	std	Y+45, r25	; 0x2d
    22ca:	8c a7       	std	Y+44, r24	; 0x2c
    22cc:	0f c0       	rjmp	.+30     	; 0x22ec <LCD_voidInit+0x2aa>
    22ce:	88 ec       	ldi	r24, 0xC8	; 200
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	9b a7       	std	Y+43, r25	; 0x2b
    22d4:	8a a7       	std	Y+42, r24	; 0x2a
    22d6:	8a a5       	ldd	r24, Y+42	; 0x2a
    22d8:	9b a5       	ldd	r25, Y+43	; 0x2b
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_voidInit+0x298>
    22de:	9b a7       	std	Y+43, r25	; 0x2b
    22e0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	8c a5       	ldd	r24, Y+44	; 0x2c
    22e4:	9d a5       	ldd	r25, Y+45	; 0x2d
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	9d a7       	std	Y+45, r25	; 0x2d
    22ea:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    22ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    22f0:	00 97       	sbiw	r24, 0x00	; 0
    22f2:	69 f7       	brne	.-38     	; 0x22ce <LCD_voidInit+0x28c>
    22f4:	24 c0       	rjmp	.+72     	; 0x233e <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f6:	6e a5       	ldd	r22, Y+46	; 0x2e
    22f8:	7f a5       	ldd	r23, Y+47	; 0x2f
    22fa:	88 a9       	ldd	r24, Y+48	; 0x30
    22fc:	99 a9       	ldd	r25, Y+49	; 0x31
    22fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	9d a7       	std	Y+45, r25	; 0x2d
    2308:	8c a7       	std	Y+44, r24	; 0x2c
    230a:	8c a5       	ldd	r24, Y+44	; 0x2c
    230c:	9d a5       	ldd	r25, Y+45	; 0x2d
    230e:	99 a7       	std	Y+41, r25	; 0x29
    2310:	88 a7       	std	Y+40, r24	; 0x28
    2312:	88 a5       	ldd	r24, Y+40	; 0x28
    2314:	99 a5       	ldd	r25, Y+41	; 0x29
    2316:	01 97       	sbiw	r24, 0x01	; 1
    2318:	f1 f7       	brne	.-4      	; 0x2316 <LCD_voidInit+0x2d4>
    231a:	99 a7       	std	Y+41, r25	; 0x29
    231c:	88 a7       	std	Y+40, r24	; 0x28
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2320:	6f a9       	ldd	r22, Y+55	; 0x37
    2322:	78 ad       	ldd	r23, Y+56	; 0x38
    2324:	89 ad       	ldd	r24, Y+57	; 0x39
    2326:	9a ad       	ldd	r25, Y+58	; 0x3a
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	8e ab       	std	Y+54, r24	; 0x36
    2332:	8e a9       	ldd	r24, Y+54	; 0x36
    2334:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2336:	8f a1       	ldd	r24, Y+39	; 0x27
    2338:	8a 95       	dec	r24
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_voidInit+0x2f6>
    233c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    233e:	8e e0       	ldi	r24, 0x0E	; 14
    2340:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e2       	ldi	r26, 0x20	; 32
    234a:	b2 e4       	ldi	r27, 0x42	; 66
    234c:	8b a3       	std	Y+35, r24	; 0x23
    234e:	9c a3       	std	Y+36, r25	; 0x24
    2350:	ad a3       	std	Y+37, r26	; 0x25
    2352:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2354:	6b a1       	ldd	r22, Y+35	; 0x23
    2356:	7c a1       	ldd	r23, Y+36	; 0x24
    2358:	8d a1       	ldd	r24, Y+37	; 0x25
    235a:	9e a1       	ldd	r25, Y+38	; 0x26
    235c:	2b ea       	ldi	r18, 0xAB	; 171
    235e:	3a ea       	ldi	r19, 0xAA	; 170
    2360:	4a e2       	ldi	r20, 0x2A	; 42
    2362:	50 e4       	ldi	r21, 0x40	; 64
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	8f 8f       	std	Y+31, r24	; 0x1f
    236e:	98 a3       	std	Y+32, r25	; 0x20
    2370:	a9 a3       	std	Y+33, r26	; 0x21
    2372:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2374:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2376:	78 a1       	ldd	r23, Y+32	; 0x20
    2378:	89 a1       	ldd	r24, Y+33	; 0x21
    237a:	9a a1       	ldd	r25, Y+34	; 0x22
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	1c f4       	brge	.+6      	; 0x2392 <LCD_voidInit+0x350>
		__ticks = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	8e 8f       	std	Y+30, r24	; 0x1e
    2390:	91 c0       	rjmp	.+290    	; 0x24b4 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2392:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2394:	78 a1       	ldd	r23, Y+32	; 0x20
    2396:	89 a1       	ldd	r24, Y+33	; 0x21
    2398:	9a a1       	ldd	r25, Y+34	; 0x22
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4f e7       	ldi	r20, 0x7F	; 127
    23a0:	53 e4       	ldi	r21, 0x43	; 67
    23a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a6:	18 16       	cp	r1, r24
    23a8:	0c f0       	brlt	.+2      	; 0x23ac <LCD_voidInit+0x36a>
    23aa:	7b c0       	rjmp	.+246    	; 0x24a2 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    23ac:	6b a1       	ldd	r22, Y+35	; 0x23
    23ae:	7c a1       	ldd	r23, Y+36	; 0x24
    23b0:	8d a1       	ldd	r24, Y+37	; 0x25
    23b2:	9e a1       	ldd	r25, Y+38	; 0x26
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a e7       	ldi	r20, 0x7A	; 122
    23ba:	54 e4       	ldi	r21, 0x44	; 68
    23bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8a 8f       	std	Y+26, r24	; 0x1a
    23c6:	9b 8f       	std	Y+27, r25	; 0x1b
    23c8:	ac 8f       	std	Y+28, r26	; 0x1c
    23ca:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23ce:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a ef       	ldi	r20, 0xFA	; 250
    23da:	54 e4       	ldi	r21, 0x44	; 68
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	8e 8b       	std	Y+22, r24	; 0x16
    23e6:	9f 8b       	std	Y+23, r25	; 0x17
    23e8:	a8 8f       	std	Y+24, r26	; 0x18
    23ea:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    23ec:	6e 89       	ldd	r22, Y+22	; 0x16
    23ee:	7f 89       	ldd	r23, Y+23	; 0x17
    23f0:	88 8d       	ldd	r24, Y+24	; 0x18
    23f2:	99 8d       	ldd	r25, Y+25	; 0x19
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <LCD_voidInit+0x3cc>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9d 8b       	std	Y+21, r25	; 0x15
    240a:	8c 8b       	std	Y+20, r24	; 0x14
    240c:	3f c0       	rjmp	.+126    	; 0x248c <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    240e:	6e 89       	ldd	r22, Y+22	; 0x16
    2410:	7f 89       	ldd	r23, Y+23	; 0x17
    2412:	88 8d       	ldd	r24, Y+24	; 0x18
    2414:	99 8d       	ldd	r25, Y+25	; 0x19
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2428:	7b 8d       	ldd	r23, Y+27	; 0x1b
    242a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    242c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9d 8b       	std	Y+21, r25	; 0x15
    244c:	8c 8b       	std	Y+20, r24	; 0x14
    244e:	0f c0       	rjmp	.+30     	; 0x246e <LCD_voidInit+0x42c>
    2450:	88 ec       	ldi	r24, 0xC8	; 200
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9b 8b       	std	Y+19, r25	; 0x13
    2456:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2458:	8a 89       	ldd	r24, Y+18	; 0x12
    245a:	9b 89       	ldd	r25, Y+19	; 0x13
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_voidInit+0x41a>
    2460:	9b 8b       	std	Y+19, r25	; 0x13
    2462:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8c 89       	ldd	r24, Y+20	; 0x14
    2466:	9d 89       	ldd	r25, Y+21	; 0x15
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9d 8b       	std	Y+21, r25	; 0x15
    246c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8c 89       	ldd	r24, Y+20	; 0x14
    2470:	9d 89       	ldd	r25, Y+21	; 0x15
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <LCD_voidInit+0x40e>
    2476:	24 c0       	rjmp	.+72     	; 0x24c0 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	6e 89       	ldd	r22, Y+22	; 0x16
    247a:	7f 89       	ldd	r23, Y+23	; 0x17
    247c:	88 8d       	ldd	r24, Y+24	; 0x18
    247e:	99 8d       	ldd	r25, Y+25	; 0x19
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9d 8b       	std	Y+21, r25	; 0x15
    248a:	8c 8b       	std	Y+20, r24	; 0x14
    248c:	8c 89       	ldd	r24, Y+20	; 0x14
    248e:	9d 89       	ldd	r25, Y+21	; 0x15
    2490:	99 8b       	std	Y+17, r25	; 0x11
    2492:	88 8b       	std	Y+16, r24	; 0x10
    2494:	88 89       	ldd	r24, Y+16	; 0x10
    2496:	99 89       	ldd	r25, Y+17	; 0x11
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <LCD_voidInit+0x456>
    249c:	99 8b       	std	Y+17, r25	; 0x11
    249e:	88 8b       	std	Y+16, r24	; 0x10
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24a4:	78 a1       	ldd	r23, Y+32	; 0x20
    24a6:	89 a1       	ldd	r24, Y+33	; 0x21
    24a8:	9a a1       	ldd	r25, Y+34	; 0x22
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	8e 8f       	std	Y+30, r24	; 0x1e
    24b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24b6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ba:	8a 95       	dec	r24
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_voidInit+0x478>
    24be:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	b0 e4       	ldi	r27, 0x40	; 64
    24ce:	8b 87       	std	Y+11, r24	; 0x0b
    24d0:	9c 87       	std	Y+12, r25	; 0x0c
    24d2:	ad 87       	std	Y+13, r26	; 0x0d
    24d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24da:	8d 85       	ldd	r24, Y+13	; 0x0d
    24dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	4a ef       	ldi	r20, 0xFA	; 250
    24e4:	54 e4       	ldi	r21, 0x44	; 68
    24e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	8f 83       	std	Y+7, r24	; 0x07
    24f0:	98 87       	std	Y+8, r25	; 0x08
    24f2:	a9 87       	std	Y+9, r26	; 0x09
    24f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24f6:	6f 81       	ldd	r22, Y+7	; 0x07
    24f8:	78 85       	ldd	r23, Y+8	; 0x08
    24fa:	89 85       	ldd	r24, Y+9	; 0x09
    24fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	40 e8       	ldi	r20, 0x80	; 128
    2504:	5f e3       	ldi	r21, 0x3F	; 63
    2506:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    250a:	88 23       	and	r24, r24
    250c:	2c f4       	brge	.+10     	; 0x2518 <LCD_voidInit+0x4d6>
		__ticks = 1;
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9e 83       	std	Y+6, r25	; 0x06
    2514:	8d 83       	std	Y+5, r24	; 0x05
    2516:	3f c0       	rjmp	.+126    	; 0x2596 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    2518:	6f 81       	ldd	r22, Y+7	; 0x07
    251a:	78 85       	ldd	r23, Y+8	; 0x08
    251c:	89 85       	ldd	r24, Y+9	; 0x09
    251e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2520:	20 e0       	ldi	r18, 0x00	; 0
    2522:	3f ef       	ldi	r19, 0xFF	; 255
    2524:	4f e7       	ldi	r20, 0x7F	; 127
    2526:	57 e4       	ldi	r21, 0x47	; 71
    2528:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    252c:	18 16       	cp	r1, r24
    252e:	4c f5       	brge	.+82     	; 0x2582 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2530:	6b 85       	ldd	r22, Y+11	; 0x0b
    2532:	7c 85       	ldd	r23, Y+12	; 0x0c
    2534:	8d 85       	ldd	r24, Y+13	; 0x0d
    2536:	9e 85       	ldd	r25, Y+14	; 0x0e
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e2       	ldi	r20, 0x20	; 32
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	bc 01       	movw	r22, r24
    254a:	cd 01       	movw	r24, r26
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
    2558:	0f c0       	rjmp	.+30     	; 0x2578 <LCD_voidInit+0x536>
    255a:	88 ec       	ldi	r24, 0xC8	; 200
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9c 83       	std	Y+4, r25	; 0x04
    2560:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <LCD_voidInit+0x524>
    256a:	9c 83       	std	Y+4, r25	; 0x04
    256c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    256e:	8d 81       	ldd	r24, Y+5	; 0x05
    2570:	9e 81       	ldd	r25, Y+6	; 0x06
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2578:	8d 81       	ldd	r24, Y+5	; 0x05
    257a:	9e 81       	ldd	r25, Y+6	; 0x06
    257c:	00 97       	sbiw	r24, 0x00	; 0
    257e:	69 f7       	brne	.-38     	; 0x255a <LCD_voidInit+0x518>
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	9e 83       	std	Y+6, r25	; 0x06
    2594:	8d 83       	std	Y+5, r24	; 0x05
    2596:	8d 81       	ldd	r24, Y+5	; 0x05
    2598:	9e 81       	ldd	r25, Y+6	; 0x06
    259a:	9a 83       	std	Y+2, r25	; 0x02
    259c:	89 83       	std	Y+1, r24	; 0x01
    259e:	89 81       	ldd	r24, Y+1	; 0x01
    25a0:	9a 81       	ldd	r25, Y+2	; 0x02
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <LCD_voidInit+0x560>
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    25aa:	86 e0       	ldi	r24, 0x06	; 6
    25ac:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>


}
    25b0:	c4 5b       	subi	r28, 0xB4	; 180
    25b2:	df 4f       	sbci	r29, 0xFF	; 255
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	08 95       	ret

000025c8 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    25c8:	df 93       	push	r29
    25ca:	cf 93       	push	r28
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	e1 97       	sbiw	r28, 0x31	; 49
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	40 e0       	ldi	r20, 0x00	; 0
    25e4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	61 e0       	ldi	r22, 0x01	; 1
    25ec:	40 e0       	ldi	r20, 0x00	; 0
    25ee:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    25f2:	83 e0       	ldi	r24, 0x03	; 3
    25f4:	69 a9       	ldd	r22, Y+49	; 0x31
    25f6:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	62 e0       	ldi	r22, 0x02	; 2
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	8d a7       	std	Y+45, r24	; 0x2d
    260e:	9e a7       	std	Y+46, r25	; 0x2e
    2610:	af a7       	std	Y+47, r26	; 0x2f
    2612:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2614:	6d a5       	ldd	r22, Y+45	; 0x2d
    2616:	7e a5       	ldd	r23, Y+46	; 0x2e
    2618:	8f a5       	ldd	r24, Y+47	; 0x2f
    261a:	98 a9       	ldd	r25, Y+48	; 0x30
    261c:	2b ea       	ldi	r18, 0xAB	; 171
    261e:	3a ea       	ldi	r19, 0xAA	; 170
    2620:	4a e2       	ldi	r20, 0x2A	; 42
    2622:	50 e4       	ldi	r21, 0x40	; 64
    2624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	89 a7       	std	Y+41, r24	; 0x29
    262e:	9a a7       	std	Y+42, r25	; 0x2a
    2630:	ab a7       	std	Y+43, r26	; 0x2b
    2632:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2634:	69 a5       	ldd	r22, Y+41	; 0x29
    2636:	7a a5       	ldd	r23, Y+42	; 0x2a
    2638:	8b a5       	ldd	r24, Y+43	; 0x2b
    263a:	9c a5       	ldd	r25, Y+44	; 0x2c
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	1c f4       	brge	.+6      	; 0x2652 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	88 a7       	std	Y+40, r24	; 0x28
    2650:	91 c0       	rjmp	.+290    	; 0x2774 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2652:	69 a5       	ldd	r22, Y+41	; 0x29
    2654:	7a a5       	ldd	r23, Y+42	; 0x2a
    2656:	8b a5       	ldd	r24, Y+43	; 0x2b
    2658:	9c a5       	ldd	r25, Y+44	; 0x2c
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	53 e4       	ldi	r21, 0x43	; 67
    2662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	0c f0       	brlt	.+2      	; 0x266c <LCD_voidSendCmnd+0xa4>
    266a:	7b c0       	rjmp	.+246    	; 0x2762 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    266c:	6d a5       	ldd	r22, Y+45	; 0x2d
    266e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2670:	8f a5       	ldd	r24, Y+47	; 0x2f
    2672:	98 a9       	ldd	r25, Y+48	; 0x30
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	4a e7       	ldi	r20, 0x7A	; 122
    267a:	54 e4       	ldi	r21, 0x44	; 68
    267c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	8c a3       	std	Y+36, r24	; 0x24
    2686:	9d a3       	std	Y+37, r25	; 0x25
    2688:	ae a3       	std	Y+38, r26	; 0x26
    268a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268c:	6c a1       	ldd	r22, Y+36	; 0x24
    268e:	7d a1       	ldd	r23, Y+37	; 0x25
    2690:	8e a1       	ldd	r24, Y+38	; 0x26
    2692:	9f a1       	ldd	r25, Y+39	; 0x27
    2694:	20 e0       	ldi	r18, 0x00	; 0
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	4a ef       	ldi	r20, 0xFA	; 250
    269a:	54 e4       	ldi	r21, 0x44	; 68
    269c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	88 a3       	std	Y+32, r24	; 0x20
    26a6:	99 a3       	std	Y+33, r25	; 0x21
    26a8:	aa a3       	std	Y+34, r26	; 0x22
    26aa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    26ac:	68 a1       	ldd	r22, Y+32	; 0x20
    26ae:	79 a1       	ldd	r23, Y+33	; 0x21
    26b0:	8a a1       	ldd	r24, Y+34	; 0x22
    26b2:	9b a1       	ldd	r25, Y+35	; 0x23
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e8       	ldi	r20, 0x80	; 128
    26ba:	5f e3       	ldi	r21, 0x3F	; 63
    26bc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26c0:	88 23       	and	r24, r24
    26c2:	2c f4       	brge	.+10     	; 0x26ce <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    26c4:	81 e0       	ldi	r24, 0x01	; 1
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9f 8f       	std	Y+31, r25	; 0x1f
    26ca:	8e 8f       	std	Y+30, r24	; 0x1e
    26cc:	3f c0       	rjmp	.+126    	; 0x274c <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    26ce:	68 a1       	ldd	r22, Y+32	; 0x20
    26d0:	79 a1       	ldd	r23, Y+33	; 0x21
    26d2:	8a a1       	ldd	r24, Y+34	; 0x22
    26d4:	9b a1       	ldd	r25, Y+35	; 0x23
    26d6:	20 e0       	ldi	r18, 0x00	; 0
    26d8:	3f ef       	ldi	r19, 0xFF	; 255
    26da:	4f e7       	ldi	r20, 0x7F	; 127
    26dc:	57 e4       	ldi	r21, 0x47	; 71
    26de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e2:	18 16       	cp	r1, r24
    26e4:	4c f5       	brge	.+82     	; 0x2738 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e6:	6c a1       	ldd	r22, Y+36	; 0x24
    26e8:	7d a1       	ldd	r23, Y+37	; 0x25
    26ea:	8e a1       	ldd	r24, Y+38	; 0x26
    26ec:	9f a1       	ldd	r25, Y+39	; 0x27
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e2       	ldi	r20, 0x20	; 32
    26f4:	51 e4       	ldi	r21, 0x41	; 65
    26f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	bc 01       	movw	r22, r24
    2700:	cd 01       	movw	r24, r26
    2702:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2706:	dc 01       	movw	r26, r24
    2708:	cb 01       	movw	r24, r22
    270a:	9f 8f       	std	Y+31, r25	; 0x1f
    270c:	8e 8f       	std	Y+30, r24	; 0x1e
    270e:	0f c0       	rjmp	.+30     	; 0x272e <LCD_voidSendCmnd+0x166>
    2710:	88 ec       	ldi	r24, 0xC8	; 200
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	9d 8f       	std	Y+29, r25	; 0x1d
    2716:	8c 8f       	std	Y+28, r24	; 0x1c
    2718:	8c 8d       	ldd	r24, Y+28	; 0x1c
    271a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	f1 f7       	brne	.-4      	; 0x271c <LCD_voidSendCmnd+0x154>
    2720:	9d 8f       	std	Y+29, r25	; 0x1d
    2722:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2724:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2726:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	9f 8f       	std	Y+31, r25	; 0x1f
    272c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    272e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2730:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2732:	00 97       	sbiw	r24, 0x00	; 0
    2734:	69 f7       	brne	.-38     	; 0x2710 <LCD_voidSendCmnd+0x148>
    2736:	24 c0       	rjmp	.+72     	; 0x2780 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2738:	68 a1       	ldd	r22, Y+32	; 0x20
    273a:	79 a1       	ldd	r23, Y+33	; 0x21
    273c:	8a a1       	ldd	r24, Y+34	; 0x22
    273e:	9b a1       	ldd	r25, Y+35	; 0x23
    2740:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	9f 8f       	std	Y+31, r25	; 0x1f
    274a:	8e 8f       	std	Y+30, r24	; 0x1e
    274c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    274e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2750:	9b 8f       	std	Y+27, r25	; 0x1b
    2752:	8a 8f       	std	Y+26, r24	; 0x1a
    2754:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2756:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <LCD_voidSendCmnd+0x190>
    275c:	9b 8f       	std	Y+27, r25	; 0x1b
    275e:	8a 8f       	std	Y+26, r24	; 0x1a
    2760:	0f c0       	rjmp	.+30     	; 0x2780 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2762:	69 a5       	ldd	r22, Y+41	; 0x29
    2764:	7a a5       	ldd	r23, Y+42	; 0x2a
    2766:	8b a5       	ldd	r24, Y+43	; 0x2b
    2768:	9c a5       	ldd	r25, Y+44	; 0x2c
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	88 a7       	std	Y+40, r24	; 0x28
    2774:	88 a5       	ldd	r24, Y+40	; 0x28
    2776:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2778:	89 8d       	ldd	r24, Y+25	; 0x19
    277a:	8a 95       	dec	r24
    277c:	f1 f7       	brne	.-4      	; 0x277a <LCD_voidSendCmnd+0x1b2>
    277e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	62 e0       	ldi	r22, 0x02	; 2
    2784:	40 e0       	ldi	r20, 0x00	; 0
    2786:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	a0 e8       	ldi	r26, 0x80	; 128
    2790:	bf e3       	ldi	r27, 0x3F	; 63
    2792:	8d 8b       	std	Y+21, r24	; 0x15
    2794:	9e 8b       	std	Y+22, r25	; 0x16
    2796:	af 8b       	std	Y+23, r26	; 0x17
    2798:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    279a:	6d 89       	ldd	r22, Y+21	; 0x15
    279c:	7e 89       	ldd	r23, Y+22	; 0x16
    279e:	8f 89       	ldd	r24, Y+23	; 0x17
    27a0:	98 8d       	ldd	r25, Y+24	; 0x18
    27a2:	2b ea       	ldi	r18, 0xAB	; 171
    27a4:	3a ea       	ldi	r19, 0xAA	; 170
    27a6:	4a e2       	ldi	r20, 0x2A	; 42
    27a8:	50 e4       	ldi	r21, 0x40	; 64
    27aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	89 8b       	std	Y+17, r24	; 0x11
    27b4:	9a 8b       	std	Y+18, r25	; 0x12
    27b6:	ab 8b       	std	Y+19, r26	; 0x13
    27b8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27ba:	69 89       	ldd	r22, Y+17	; 0x11
    27bc:	7a 89       	ldd	r23, Y+18	; 0x12
    27be:	8b 89       	ldd	r24, Y+19	; 0x13
    27c0:	9c 89       	ldd	r25, Y+20	; 0x14
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e8       	ldi	r20, 0x80	; 128
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27ce:	88 23       	and	r24, r24
    27d0:	1c f4       	brge	.+6      	; 0x27d8 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	88 8b       	std	Y+16, r24	; 0x10
    27d6:	91 c0       	rjmp	.+290    	; 0x28fa <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    27d8:	69 89       	ldd	r22, Y+17	; 0x11
    27da:	7a 89       	ldd	r23, Y+18	; 0x12
    27dc:	8b 89       	ldd	r24, Y+19	; 0x13
    27de:	9c 89       	ldd	r25, Y+20	; 0x14
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	4f e7       	ldi	r20, 0x7F	; 127
    27e6:	53 e4       	ldi	r21, 0x43	; 67
    27e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ec:	18 16       	cp	r1, r24
    27ee:	0c f0       	brlt	.+2      	; 0x27f2 <LCD_voidSendCmnd+0x22a>
    27f0:	7b c0       	rjmp	.+246    	; 0x28e8 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    27f2:	6d 89       	ldd	r22, Y+21	; 0x15
    27f4:	7e 89       	ldd	r23, Y+22	; 0x16
    27f6:	8f 89       	ldd	r24, Y+23	; 0x17
    27f8:	98 8d       	ldd	r25, Y+24	; 0x18
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a e7       	ldi	r20, 0x7A	; 122
    2800:	54 e4       	ldi	r21, 0x44	; 68
    2802:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	8c 87       	std	Y+12, r24	; 0x0c
    280c:	9d 87       	std	Y+13, r25	; 0x0d
    280e:	ae 87       	std	Y+14, r26	; 0x0e
    2810:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2812:	6c 85       	ldd	r22, Y+12	; 0x0c
    2814:	7d 85       	ldd	r23, Y+13	; 0x0d
    2816:	8e 85       	ldd	r24, Y+14	; 0x0e
    2818:	9f 85       	ldd	r25, Y+15	; 0x0f
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	4a ef       	ldi	r20, 0xFA	; 250
    2820:	54 e4       	ldi	r21, 0x44	; 68
    2822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2826:	dc 01       	movw	r26, r24
    2828:	cb 01       	movw	r24, r22
    282a:	88 87       	std	Y+8, r24	; 0x08
    282c:	99 87       	std	Y+9, r25	; 0x09
    282e:	aa 87       	std	Y+10, r26	; 0x0a
    2830:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2832:	68 85       	ldd	r22, Y+8	; 0x08
    2834:	79 85       	ldd	r23, Y+9	; 0x09
    2836:	8a 85       	ldd	r24, Y+10	; 0x0a
    2838:	9b 85       	ldd	r25, Y+11	; 0x0b
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e8       	ldi	r20, 0x80	; 128
    2840:	5f e3       	ldi	r21, 0x3F	; 63
    2842:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2846:	88 23       	and	r24, r24
    2848:	2c f4       	brge	.+10     	; 0x2854 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    284a:	81 e0       	ldi	r24, 0x01	; 1
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	9f 83       	std	Y+7, r25	; 0x07
    2850:	8e 83       	std	Y+6, r24	; 0x06
    2852:	3f c0       	rjmp	.+126    	; 0x28d2 <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2854:	68 85       	ldd	r22, Y+8	; 0x08
    2856:	79 85       	ldd	r23, Y+9	; 0x09
    2858:	8a 85       	ldd	r24, Y+10	; 0x0a
    285a:	9b 85       	ldd	r25, Y+11	; 0x0b
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	3f ef       	ldi	r19, 0xFF	; 255
    2860:	4f e7       	ldi	r20, 0x7F	; 127
    2862:	57 e4       	ldi	r21, 0x47	; 71
    2864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2868:	18 16       	cp	r1, r24
    286a:	4c f5       	brge	.+82     	; 0x28be <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286c:	6c 85       	ldd	r22, Y+12	; 0x0c
    286e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2870:	8e 85       	ldd	r24, Y+14	; 0x0e
    2872:	9f 85       	ldd	r25, Y+15	; 0x0f
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	30 e0       	ldi	r19, 0x00	; 0
    2878:	40 e2       	ldi	r20, 0x20	; 32
    287a:	51 e4       	ldi	r21, 0x41	; 65
    287c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2880:	dc 01       	movw	r26, r24
    2882:	cb 01       	movw	r24, r22
    2884:	bc 01       	movw	r22, r24
    2886:	cd 01       	movw	r24, r26
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	9f 83       	std	Y+7, r25	; 0x07
    2892:	8e 83       	std	Y+6, r24	; 0x06
    2894:	0f c0       	rjmp	.+30     	; 0x28b4 <LCD_voidSendCmnd+0x2ec>
    2896:	88 ec       	ldi	r24, 0xC8	; 200
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	9d 83       	std	Y+5, r25	; 0x05
    289c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    289e:	8c 81       	ldd	r24, Y+4	; 0x04
    28a0:	9d 81       	ldd	r25, Y+5	; 0x05
    28a2:	01 97       	sbiw	r24, 0x01	; 1
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <LCD_voidSendCmnd+0x2da>
    28a6:	9d 83       	std	Y+5, r25	; 0x05
    28a8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28aa:	8e 81       	ldd	r24, Y+6	; 0x06
    28ac:	9f 81       	ldd	r25, Y+7	; 0x07
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	9f 83       	std	Y+7, r25	; 0x07
    28b2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b4:	8e 81       	ldd	r24, Y+6	; 0x06
    28b6:	9f 81       	ldd	r25, Y+7	; 0x07
    28b8:	00 97       	sbiw	r24, 0x00	; 0
    28ba:	69 f7       	brne	.-38     	; 0x2896 <LCD_voidSendCmnd+0x2ce>
    28bc:	24 c0       	rjmp	.+72     	; 0x2906 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28be:	68 85       	ldd	r22, Y+8	; 0x08
    28c0:	79 85       	ldd	r23, Y+9	; 0x09
    28c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9f 83       	std	Y+7, r25	; 0x07
    28d0:	8e 83       	std	Y+6, r24	; 0x06
    28d2:	8e 81       	ldd	r24, Y+6	; 0x06
    28d4:	9f 81       	ldd	r25, Y+7	; 0x07
    28d6:	9b 83       	std	Y+3, r25	; 0x03
    28d8:	8a 83       	std	Y+2, r24	; 0x02
    28da:	8a 81       	ldd	r24, Y+2	; 0x02
    28dc:	9b 81       	ldd	r25, Y+3	; 0x03
    28de:	01 97       	sbiw	r24, 0x01	; 1
    28e0:	f1 f7       	brne	.-4      	; 0x28de <LCD_voidSendCmnd+0x316>
    28e2:	9b 83       	std	Y+3, r25	; 0x03
    28e4:	8a 83       	std	Y+2, r24	; 0x02
    28e6:	0f c0       	rjmp	.+30     	; 0x2906 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28e8:	69 89       	ldd	r22, Y+17	; 0x11
    28ea:	7a 89       	ldd	r23, Y+18	; 0x12
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	88 8b       	std	Y+16, r24	; 0x10
    28fa:	88 89       	ldd	r24, Y+16	; 0x10
    28fc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	8a 95       	dec	r24
    2902:	f1 f7       	brne	.-4      	; 0x2900 <LCD_voidSendCmnd+0x338>
    2904:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    2906:	e1 96       	adiw	r28, 0x31	; 49
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	08 95       	ret

00002918 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    2918:	df 93       	push	r29
    291a:	cf 93       	push	r28
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	e1 97       	sbiw	r28, 0x31	; 49
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	de bf       	out	0x3e, r29	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	cd bf       	out	0x3d, r28	; 61
    292c:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    292e:	80 e0       	ldi	r24, 0x00	; 0
    2930:	60 e0       	ldi	r22, 0x00	; 0
    2932:	41 e0       	ldi	r20, 0x01	; 1
    2934:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    2942:	83 e0       	ldi	r24, 0x03	; 3
    2944:	69 a9       	ldd	r22, Y+49	; 0x31
    2946:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	62 e0       	ldi	r22, 0x02	; 2
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	a0 e8       	ldi	r26, 0x80	; 128
    295a:	bf e3       	ldi	r27, 0x3F	; 63
    295c:	8d a7       	std	Y+45, r24	; 0x2d
    295e:	9e a7       	std	Y+46, r25	; 0x2e
    2960:	af a7       	std	Y+47, r26	; 0x2f
    2962:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2964:	6d a5       	ldd	r22, Y+45	; 0x2d
    2966:	7e a5       	ldd	r23, Y+46	; 0x2e
    2968:	8f a5       	ldd	r24, Y+47	; 0x2f
    296a:	98 a9       	ldd	r25, Y+48	; 0x30
    296c:	2b ea       	ldi	r18, 0xAB	; 171
    296e:	3a ea       	ldi	r19, 0xAA	; 170
    2970:	4a e2       	ldi	r20, 0x2A	; 42
    2972:	50 e4       	ldi	r21, 0x40	; 64
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	89 a7       	std	Y+41, r24	; 0x29
    297e:	9a a7       	std	Y+42, r25	; 0x2a
    2980:	ab a7       	std	Y+43, r26	; 0x2b
    2982:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2984:	69 a5       	ldd	r22, Y+41	; 0x29
    2986:	7a a5       	ldd	r23, Y+42	; 0x2a
    2988:	8b a5       	ldd	r24, Y+43	; 0x2b
    298a:	9c a5       	ldd	r25, Y+44	; 0x2c
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e8       	ldi	r20, 0x80	; 128
    2992:	5f e3       	ldi	r21, 0x3F	; 63
    2994:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2998:	88 23       	and	r24, r24
    299a:	1c f4       	brge	.+6      	; 0x29a2 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	88 a7       	std	Y+40, r24	; 0x28
    29a0:	91 c0       	rjmp	.+290    	; 0x2ac4 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    29a2:	69 a5       	ldd	r22, Y+41	; 0x29
    29a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    29a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    29a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	53 e4       	ldi	r21, 0x43	; 67
    29b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <LCD_voidSendChar+0xa4>
    29ba:	7b c0       	rjmp	.+246    	; 0x2ab2 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    29bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    29be:	7e a5       	ldd	r23, Y+46	; 0x2e
    29c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c2:	98 a9       	ldd	r25, Y+48	; 0x30
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a e7       	ldi	r20, 0x7A	; 122
    29ca:	54 e4       	ldi	r21, 0x44	; 68
    29cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8c a3       	std	Y+36, r24	; 0x24
    29d6:	9d a3       	std	Y+37, r25	; 0x25
    29d8:	ae a3       	std	Y+38, r26	; 0x26
    29da:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	6c a1       	ldd	r22, Y+36	; 0x24
    29de:	7d a1       	ldd	r23, Y+37	; 0x25
    29e0:	8e a1       	ldd	r24, Y+38	; 0x26
    29e2:	9f a1       	ldd	r25, Y+39	; 0x27
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4a ef       	ldi	r20, 0xFA	; 250
    29ea:	54 e4       	ldi	r21, 0x44	; 68
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	88 a3       	std	Y+32, r24	; 0x20
    29f6:	99 a3       	std	Y+33, r25	; 0x21
    29f8:	aa a3       	std	Y+34, r26	; 0x22
    29fa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29fc:	68 a1       	ldd	r22, Y+32	; 0x20
    29fe:	79 a1       	ldd	r23, Y+33	; 0x21
    2a00:	8a a1       	ldd	r24, Y+34	; 0x22
    2a02:	9b a1       	ldd	r25, Y+35	; 0x23
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <LCD_voidSendChar+0x106>
		__ticks = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9f 8f       	std	Y+31, r25	; 0x1f
    2a1a:	8e 8f       	std	Y+30, r24	; 0x1e
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2a1e:	68 a1       	ldd	r22, Y+32	; 0x20
    2a20:	79 a1       	ldd	r23, Y+33	; 0x21
    2a22:	8a a1       	ldd	r24, Y+34	; 0x22
    2a24:	9b a1       	ldd	r25, Y+35	; 0x23
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	4c f5       	brge	.+82     	; 0x2a88 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	6c a1       	ldd	r22, Y+36	; 0x24
    2a38:	7d a1       	ldd	r23, Y+37	; 0x25
    2a3a:	8e a1       	ldd	r24, Y+38	; 0x26
    2a3c:	9f a1       	ldd	r25, Y+39	; 0x27
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a5c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <LCD_voidSendChar+0x166>
    2a60:	88 ec       	ldi	r24, 0xC8	; 200
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9d 8f       	std	Y+29, r25	; 0x1d
    2a66:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_voidSendChar+0x154>
    2a70:	9d 8f       	std	Y+29, r25	; 0x1d
    2a72:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a7c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <LCD_voidSendChar+0x148>
    2a86:	24 c0       	rjmp	.+72     	; 0x2ad0 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	68 a1       	ldd	r22, Y+32	; 0x20
    2a8a:	79 a1       	ldd	r23, Y+33	; 0x21
    2a8c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a8e:	9b a1       	ldd	r25, Y+35	; 0x23
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9f 8f       	std	Y+31, r25	; 0x1f
    2a9a:	8e 8f       	std	Y+30, r24	; 0x1e
    2a9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aa0:	9b 8f       	std	Y+27, r25	; 0x1b
    2aa2:	8a 8f       	std	Y+26, r24	; 0x1a
    2aa4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aa6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <LCD_voidSendChar+0x190>
    2aac:	9b 8f       	std	Y+27, r25	; 0x1b
    2aae:	8a 8f       	std	Y+26, r24	; 0x1a
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ab2:	69 a5       	ldd	r22, Y+41	; 0x29
    2ab4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ab6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ab8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	88 a7       	std	Y+40, r24	; 0x28
    2ac4:	88 a5       	ldd	r24, Y+40	; 0x28
    2ac6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ac8:	89 8d       	ldd	r24, Y+25	; 0x19
    2aca:	8a 95       	dec	r24
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_voidSendChar+0x1b2>
    2ace:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	62 e0       	ldi	r22, 0x02	; 2
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	a0 e8       	ldi	r26, 0x80	; 128
    2ae0:	bf e3       	ldi	r27, 0x3F	; 63
    2ae2:	8d 8b       	std	Y+21, r24	; 0x15
    2ae4:	9e 8b       	std	Y+22, r25	; 0x16
    2ae6:	af 8b       	std	Y+23, r26	; 0x17
    2ae8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aea:	6d 89       	ldd	r22, Y+21	; 0x15
    2aec:	7e 89       	ldd	r23, Y+22	; 0x16
    2aee:	8f 89       	ldd	r24, Y+23	; 0x17
    2af0:	98 8d       	ldd	r25, Y+24	; 0x18
    2af2:	2b ea       	ldi	r18, 0xAB	; 171
    2af4:	3a ea       	ldi	r19, 0xAA	; 170
    2af6:	4a e2       	ldi	r20, 0x2A	; 42
    2af8:	50 e4       	ldi	r21, 0x40	; 64
    2afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	89 8b       	std	Y+17, r24	; 0x11
    2b04:	9a 8b       	std	Y+18, r25	; 0x12
    2b06:	ab 8b       	std	Y+19, r26	; 0x13
    2b08:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b0a:	69 89       	ldd	r22, Y+17	; 0x11
    2b0c:	7a 89       	ldd	r23, Y+18	; 0x12
    2b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b10:	9c 89       	ldd	r25, Y+20	; 0x14
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e8       	ldi	r20, 0x80	; 128
    2b18:	5f e3       	ldi	r21, 0x3F	; 63
    2b1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b1e:	88 23       	and	r24, r24
    2b20:	1c f4       	brge	.+6      	; 0x2b28 <LCD_voidSendChar+0x210>
		__ticks = 1;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	88 8b       	std	Y+16, r24	; 0x10
    2b26:	91 c0       	rjmp	.+290    	; 0x2c4a <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    2b28:	69 89       	ldd	r22, Y+17	; 0x11
    2b2a:	7a 89       	ldd	r23, Y+18	; 0x12
    2b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4f e7       	ldi	r20, 0x7F	; 127
    2b36:	53 e4       	ldi	r21, 0x43	; 67
    2b38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b3c:	18 16       	cp	r1, r24
    2b3e:	0c f0       	brlt	.+2      	; 0x2b42 <LCD_voidSendChar+0x22a>
    2b40:	7b c0       	rjmp	.+246    	; 0x2c38 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a e7       	ldi	r20, 0x7A	; 122
    2b50:	54 e4       	ldi	r21, 0x44	; 68
    2b52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8c 87       	std	Y+12, r24	; 0x0c
    2b5c:	9d 87       	std	Y+13, r25	; 0x0d
    2b5e:	ae 87       	std	Y+14, r26	; 0x0e
    2b60:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b64:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b66:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b68:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a ef       	ldi	r20, 0xFA	; 250
    2b70:	54 e4       	ldi	r21, 0x44	; 68
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	88 87       	std	Y+8, r24	; 0x08
    2b7c:	99 87       	std	Y+9, r25	; 0x09
    2b7e:	aa 87       	std	Y+10, r26	; 0x0a
    2b80:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b82:	68 85       	ldd	r22, Y+8	; 0x08
    2b84:	79 85       	ldd	r23, Y+9	; 0x09
    2b86:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b88:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9f 83       	std	Y+7, r25	; 0x07
    2ba0:	8e 83       	std	Y+6, r24	; 0x06
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2ba4:	68 85       	ldd	r22, Y+8	; 0x08
    2ba6:	79 85       	ldd	r23, Y+9	; 0x09
    2ba8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2baa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9f 83       	std	Y+7, r25	; 0x07
    2be2:	8e 83       	std	Y+6, r24	; 0x06
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <LCD_voidSendChar+0x2ec>
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9d 83       	std	Y+5, r25	; 0x05
    2bec:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bee:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_voidSendChar+0x2da>
    2bf6:	9d 83       	std	Y+5, r25	; 0x05
    2bf8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9f 83       	std	Y+7, r25	; 0x07
    2c02:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8e 81       	ldd	r24, Y+6	; 0x06
    2c06:	9f 81       	ldd	r25, Y+7	; 0x07
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <LCD_voidSendChar+0x2ce>
    2c0c:	24 c0       	rjmp	.+72     	; 0x2c56 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	68 85       	ldd	r22, Y+8	; 0x08
    2c10:	79 85       	ldd	r23, Y+9	; 0x09
    2c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c14:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9f 83       	std	Y+7, r25	; 0x07
    2c20:	8e 83       	std	Y+6, r24	; 0x06
    2c22:	8e 81       	ldd	r24, Y+6	; 0x06
    2c24:	9f 81       	ldd	r25, Y+7	; 0x07
    2c26:	9b 83       	std	Y+3, r25	; 0x03
    2c28:	8a 83       	std	Y+2, r24	; 0x02
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_voidSendChar+0x316>
    2c32:	9b 83       	std	Y+3, r25	; 0x03
    2c34:	8a 83       	std	Y+2, r24	; 0x02
    2c36:	0f c0       	rjmp	.+30     	; 0x2c56 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c38:	69 89       	ldd	r22, Y+17	; 0x11
    2c3a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	88 8b       	std	Y+16, r24	; 0x10
    2c4a:	88 89       	ldd	r24, Y+16	; 0x10
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	8a 95       	dec	r24
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_voidSendChar+0x338>
    2c54:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    2c56:	e1 96       	adiw	r28, 0x31	; 49
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    2c68:	df 93       	push	r29
    2c6a:	cf 93       	push	r28
    2c6c:	00 d0       	rcall	.+0      	; 0x2c6e <LCD_voidWriteString+0x6>
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	9a 83       	std	Y+2, r25	; 0x02
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	0a c0       	rjmp	.+20     	; 0x2c8c <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    2c78:	e9 81       	ldd	r30, Y+1	; 0x01
    2c7a:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7c:	80 81       	ld	r24, Z
    2c7e:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	9a 81       	ldd	r25, Y+2	; 0x02
    2c86:	01 96       	adiw	r24, 0x01	; 1
    2c88:	9a 83       	std	Y+2, r25	; 0x02
    2c8a:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    2c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2c90:	80 81       	ld	r24, Z
    2c92:	88 23       	and	r24, r24
    2c94:	89 f7       	brne	.-30     	; 0x2c78 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
    2ca4:	df 93       	push	r29
    2ca6:	cf 93       	push	r28
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	65 97       	sbiw	r28, 0x15	; 21
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	6a 8b       	std	Y+18, r22	; 0x12
    2cba:	7b 8b       	std	Y+19, r23	; 0x13
    2cbc:	8c 8b       	std	Y+20, r24	; 0x14
    2cbe:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    2cc0:	8f ef       	ldi	r24, 0xFF	; 255
    2cc2:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    2cc4:	8a 89       	ldd	r24, Y+18	; 0x12
    2cc6:	9b 89       	ldd	r25, Y+19	; 0x13
    2cc8:	ac 89       	ldd	r26, Y+20	; 0x14
    2cca:	bd 89       	ldd	r27, Y+21	; 0x15
    2ccc:	00 97       	sbiw	r24, 0x00	; 0
    2cce:	a1 05       	cpc	r26, r1
    2cd0:	b1 05       	cpc	r27, r1
    2cd2:	99 f5       	brne	.+102    	; 0x2d3a <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    2cd4:	80 e3       	ldi	r24, 0x30	; 48
    2cd6:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    2cda:	4e c0       	rjmp	.+156    	; 0x2d78 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	8f 5f       	subi	r24, 0xFF	; 255
    2ce0:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	08 2f       	mov	r16, r24
    2ce6:	11 27       	eor	r17, r17
    2ce8:	07 fd       	sbrc	r16, 7
    2cea:	10 95       	com	r17
    2cec:	8a 89       	ldd	r24, Y+18	; 0x12
    2cee:	9b 89       	ldd	r25, Y+19	; 0x13
    2cf0:	ac 89       	ldd	r26, Y+20	; 0x14
    2cf2:	bd 89       	ldd	r27, Y+21	; 0x15
    2cf4:	2a e0       	ldi	r18, 0x0A	; 10
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	40 e0       	ldi	r20, 0x00	; 0
    2cfa:	50 e0       	ldi	r21, 0x00	; 0
    2cfc:	bc 01       	movw	r22, r24
    2cfe:	cd 01       	movw	r24, r26
    2d00:	0e 94 77 22 	call	0x44ee	; 0x44ee <__udivmodsi4>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	28 2f       	mov	r18, r24
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	03 96       	adiw	r24, 0x03	; 3
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e0 0f       	add	r30, r16
    2d12:	f1 1f       	adc	r31, r17
    2d14:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    2d16:	8a 89       	ldd	r24, Y+18	; 0x12
    2d18:	9b 89       	ldd	r25, Y+19	; 0x13
    2d1a:	ac 89       	ldd	r26, Y+20	; 0x14
    2d1c:	bd 89       	ldd	r27, Y+21	; 0x15
    2d1e:	2a e0       	ldi	r18, 0x0A	; 10
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	50 e0       	ldi	r21, 0x00	; 0
    2d26:	bc 01       	movw	r22, r24
    2d28:	cd 01       	movw	r24, r26
    2d2a:	0e 94 77 22 	call	0x44ee	; 0x44ee <__udivmodsi4>
    2d2e:	da 01       	movw	r26, r20
    2d30:	c9 01       	movw	r24, r18
    2d32:	8a 8b       	std	Y+18, r24	; 0x12
    2d34:	9b 8b       	std	Y+19, r25	; 0x13
    2d36:	ac 8b       	std	Y+20, r26	; 0x14
    2d38:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    2d3a:	8a 89       	ldd	r24, Y+18	; 0x12
    2d3c:	9b 89       	ldd	r25, Y+19	; 0x13
    2d3e:	ac 89       	ldd	r26, Y+20	; 0x14
    2d40:	bd 89       	ldd	r27, Y+21	; 0x15
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	a1 05       	cpc	r26, r1
    2d46:	b1 05       	cpc	r27, r1
    2d48:	49 f6       	brne	.-110    	; 0x2cdc <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	89 83       	std	Y+1, r24	; 0x01
    2d4e:	11 c0       	rjmp	.+34     	; 0x2d72 <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	28 2f       	mov	r18, r24
    2d54:	33 27       	eor	r19, r19
    2d56:	27 fd       	sbrc	r18, 7
    2d58:	30 95       	com	r19
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	03 96       	adiw	r24, 0x03	; 3
    2d5e:	fc 01       	movw	r30, r24
    2d60:	e2 0f       	add	r30, r18
    2d62:	f3 1f       	adc	r31, r19
    2d64:	80 81       	ld	r24, Z
    2d66:	80 5d       	subi	r24, 0xD0	; 208
    2d68:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2d6c:	89 81       	ldd	r24, Y+1	; 0x01
    2d6e:	81 50       	subi	r24, 0x01	; 1
    2d70:	89 83       	std	Y+1, r24	; 0x01
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	88 23       	and	r24, r24
    2d76:	64 f7       	brge	.-40     	; 0x2d50 <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    2d78:	65 96       	adiw	r28, 0x15	; 21
    2d7a:	0f b6       	in	r0, 0x3f	; 63
    2d7c:	f8 94       	cli
    2d7e:	de bf       	out	0x3e, r29	; 62
    2d80:	0f be       	out	0x3f, r0	; 63
    2d82:	cd bf       	out	0x3d, r28	; 61
    2d84:	cf 91       	pop	r28
    2d86:	df 91       	pop	r29
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	08 95       	ret

00002d8e <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <LCD_u8GoToXY+0x6>
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <LCD_u8GoToXY+0x8>
    2d96:	0f 92       	push	r0
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62
    2d9c:	8a 83       	std	Y+2, r24	; 0x02
    2d9e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    2da4:	8b 81       	ldd	r24, Y+3	; 0x03
    2da6:	88 32       	cpi	r24, 0x28	; 40
    2da8:	d8 f4       	brcc	.+54     	; 0x2de0 <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2daa:	8a 81       	ldd	r24, Y+2	; 0x02
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	3d 83       	std	Y+5, r19	; 0x05
    2db2:	2c 83       	std	Y+4, r18	; 0x04
    2db4:	8c 81       	ldd	r24, Y+4	; 0x04
    2db6:	9d 81       	ldd	r25, Y+5	; 0x05
    2db8:	81 30       	cpi	r24, 0x01	; 1
    2dba:	91 05       	cpc	r25, r1
    2dbc:	31 f0       	breq	.+12     	; 0x2dca <LCD_u8GoToXY+0x3c>
    2dbe:	2c 81       	ldd	r18, Y+4	; 0x04
    2dc0:	3d 81       	ldd	r19, Y+5	; 0x05
    2dc2:	22 30       	cpi	r18, 0x02	; 2
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	31 f0       	breq	.+12     	; 0x2dd4 <LCD_u8GoToXY+0x46>
    2dc8:	0a c0       	rjmp	.+20     	; 0x2dde <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2dca:	8b 81       	ldd	r24, Y+3	; 0x03
    2dcc:	80 58       	subi	r24, 0x80	; 128
    2dce:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
    2dd2:	06 c0       	rjmp	.+12     	; 0x2de0 <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    2dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd6:	80 54       	subi	r24, 0x40	; 64
    2dd8:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
    2ddc:	01 c0       	rjmp	.+2      	; 0x2de0 <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2dde:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2de2:	0f 90       	pop	r0
    2de4:	0f 90       	pop	r0
    2de6:	0f 90       	pop	r0
    2de8:	0f 90       	pop	r0
    2dea:	0f 90       	pop	r0
    2dec:	cf 91       	pop	r28
    2dee:	df 91       	pop	r29
    2df0:	08 95       	ret

00002df2 <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    2df2:	df 93       	push	r29
    2df4:	cf 93       	push	r28
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
}
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	2a 97       	sbiw	r28, 0x0a	; 10
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	8c 83       	std	Y+4, r24	; 0x04
    2e1c:	7e 83       	std	Y+6, r23	; 0x06
    2e1e:	6d 83       	std	Y+5, r22	; 0x05
    2e20:	4f 83       	std	Y+7, r20	; 0x07
    2e22:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2e24:	81 e0       	ldi	r24, 0x01	; 1
    2e26:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    2e28:	88 e0       	ldi	r24, 0x08	; 8
    2e2a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    2e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2e:	28 2f       	mov	r18, r24
    2e30:	30 e0       	ldi	r19, 0x00	; 0
    2e32:	3a 87       	std	Y+10, r19	; 0x0a
    2e34:	29 87       	std	Y+9, r18	; 0x09
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	83 30       	cpi	r24, 0x03	; 3
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <LCD_voidWriteSpecialChar+0x3c>
    2e40:	8c c0       	rjmp	.+280    	; 0x2f5a <LCD_voidWriteSpecialChar+0x154>
    2e42:	29 85       	ldd	r18, Y+9	; 0x09
    2e44:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e46:	24 30       	cpi	r18, 0x04	; 4
    2e48:	31 05       	cpc	r19, r1
    2e4a:	8c f4       	brge	.+34     	; 0x2e6e <LCD_voidWriteSpecialChar+0x68>
    2e4c:	89 85       	ldd	r24, Y+9	; 0x09
    2e4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e50:	81 30       	cpi	r24, 0x01	; 1
    2e52:	91 05       	cpc	r25, r1
    2e54:	09 f4       	brne	.+2      	; 0x2e58 <LCD_voidWriteSpecialChar+0x52>
    2e56:	43 c0       	rjmp	.+134    	; 0x2ede <LCD_voidWriteSpecialChar+0xd8>
    2e58:	29 85       	ldd	r18, Y+9	; 0x09
    2e5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e5c:	22 30       	cpi	r18, 0x02	; 2
    2e5e:	31 05       	cpc	r19, r1
    2e60:	0c f0       	brlt	.+2      	; 0x2e64 <LCD_voidWriteSpecialChar+0x5e>
    2e62:	5c c0       	rjmp	.+184    	; 0x2f1c <LCD_voidWriteSpecialChar+0x116>
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	d1 f0       	breq	.+52     	; 0x2ea0 <LCD_voidWriteSpecialChar+0x9a>
    2e6c:	11 c1       	rjmp	.+546    	; 0x3090 <LCD_voidWriteSpecialChar+0x28a>
    2e6e:	29 85       	ldd	r18, Y+9	; 0x09
    2e70:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e72:	25 30       	cpi	r18, 0x05	; 5
    2e74:	31 05       	cpc	r19, r1
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <LCD_voidWriteSpecialChar+0x74>
    2e78:	ae c0       	rjmp	.+348    	; 0x2fd6 <LCD_voidWriteSpecialChar+0x1d0>
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	85 30       	cpi	r24, 0x05	; 5
    2e80:	91 05       	cpc	r25, r1
    2e82:	0c f4       	brge	.+2      	; 0x2e86 <LCD_voidWriteSpecialChar+0x80>
    2e84:	89 c0       	rjmp	.+274    	; 0x2f98 <LCD_voidWriteSpecialChar+0x192>
    2e86:	29 85       	ldd	r18, Y+9	; 0x09
    2e88:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e8a:	26 30       	cpi	r18, 0x06	; 6
    2e8c:	31 05       	cpc	r19, r1
    2e8e:	09 f4       	brne	.+2      	; 0x2e92 <LCD_voidWriteSpecialChar+0x8c>
    2e90:	c1 c0       	rjmp	.+386    	; 0x3014 <LCD_voidWriteSpecialChar+0x20e>
    2e92:	89 85       	ldd	r24, Y+9	; 0x09
    2e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e96:	87 30       	cpi	r24, 0x07	; 7
    2e98:	91 05       	cpc	r25, r1
    2e9a:	09 f4       	brne	.+2      	; 0x2e9e <LCD_voidWriteSpecialChar+0x98>
    2e9c:	da c0       	rjmp	.+436    	; 0x3052 <LCD_voidWriteSpecialChar+0x24c>
    2e9e:	f8 c0       	rjmp	.+496    	; 0x3090 <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2ea0:	80 e4       	ldi	r24, 0x40	; 64
    2ea2:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2ea6:	19 82       	std	Y+1, r1	; 0x01
    2ea8:	0e c0       	rjmp	.+28     	; 0x2ec6 <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	28 2f       	mov	r18, r24
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	fc 01       	movw	r30, r24
    2eb6:	e2 0f       	add	r30, r18
    2eb8:	f3 1f       	adc	r31, r19
    2eba:	80 81       	ld	r24, Z
    2ebc:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	8f 5f       	subi	r24, 0xFF	; 255
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	99 81       	ldd	r25, Y+1	; 0x01
    2ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eca:	98 17       	cp	r25, r24
    2ecc:	70 f3       	brcs	.-36     	; 0x2eaa <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2ece:	8f 81       	ldd	r24, Y+7	; 0x07
    2ed0:	68 85       	ldd	r22, Y+8	; 0x08
    2ed2:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed8:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    2edc:	da c0       	rjmp	.+436    	; 0x3092 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2ede:	88 e4       	ldi	r24, 0x48	; 72
    2ee0:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2ee4:	19 82       	std	Y+1, r1	; 0x01
    2ee6:	0e c0       	rjmp	.+28     	; 0x2f04 <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	e2 0f       	add	r30, r18
    2ef6:	f3 1f       	adc	r31, r19
    2ef8:	80 81       	ld	r24, Z
    2efa:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    2efe:	89 81       	ldd	r24, Y+1	; 0x01
    2f00:	8f 5f       	subi	r24, 0xFF	; 255
    2f02:	89 83       	std	Y+1, r24	; 0x01
    2f04:	99 81       	ldd	r25, Y+1	; 0x01
    2f06:	8a 81       	ldd	r24, Y+2	; 0x02
    2f08:	98 17       	cp	r25, r24
    2f0a:	70 f3       	brcs	.-36     	; 0x2ee8 <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2f0c:	8f 81       	ldd	r24, Y+7	; 0x07
    2f0e:	68 85       	ldd	r22, Y+8	; 0x08
    2f10:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f14:	8c 81       	ldd	r24, Y+4	; 0x04
    2f16:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    2f1a:	bb c0       	rjmp	.+374    	; 0x3092 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    2f1c:	80 e5       	ldi	r24, 0x50	; 80
    2f1e:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2f22:	19 82       	std	Y+1, r1	; 0x01
    2f24:	0e c0       	rjmp	.+28     	; 0x2f42 <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f30:	fc 01       	movw	r30, r24
    2f32:	e2 0f       	add	r30, r18
    2f34:	f3 1f       	adc	r31, r19
    2f36:	80 81       	ld	r24, Z
    2f38:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    2f3c:	89 81       	ldd	r24, Y+1	; 0x01
    2f3e:	8f 5f       	subi	r24, 0xFF	; 255
    2f40:	89 83       	std	Y+1, r24	; 0x01
    2f42:	99 81       	ldd	r25, Y+1	; 0x01
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	98 17       	cp	r25, r24
    2f48:	70 f3       	brcs	.-36     	; 0x2f26 <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2f4a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f4c:	68 85       	ldd	r22, Y+8	; 0x08
    2f4e:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f52:	8c 81       	ldd	r24, Y+4	; 0x04
    2f54:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    2f58:	9c c0       	rjmp	.+312    	; 0x3092 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    2f5a:	88 e5       	ldi	r24, 0x58	; 88
    2f5c:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2f60:	19 82       	std	Y+1, r1	; 0x01
    2f62:	0e c0       	rjmp	.+28     	; 0x2f80 <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f6e:	fc 01       	movw	r30, r24
    2f70:	e2 0f       	add	r30, r18
    2f72:	f3 1f       	adc	r31, r19
    2f74:	80 81       	ld	r24, Z
    2f76:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    2f7a:	89 81       	ldd	r24, Y+1	; 0x01
    2f7c:	8f 5f       	subi	r24, 0xFF	; 255
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	99 81       	ldd	r25, Y+1	; 0x01
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	98 17       	cp	r25, r24
    2f86:	70 f3       	brcs	.-36     	; 0x2f64 <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2f88:	8f 81       	ldd	r24, Y+7	; 0x07
    2f8a:	68 85       	ldd	r22, Y+8	; 0x08
    2f8c:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f90:	8c 81       	ldd	r24, Y+4	; 0x04
    2f92:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    2f96:	7d c0       	rjmp	.+250    	; 0x3092 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    2f98:	80 e6       	ldi	r24, 0x60	; 96
    2f9a:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2f9e:	19 82       	std	Y+1, r1	; 0x01
    2fa0:	0e c0       	rjmp	.+28     	; 0x2fbe <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	28 2f       	mov	r18, r24
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2faa:	9e 81       	ldd	r25, Y+6	; 0x06
    2fac:	fc 01       	movw	r30, r24
    2fae:	e2 0f       	add	r30, r18
    2fb0:	f3 1f       	adc	r31, r19
    2fb2:	80 81       	ld	r24, Z
    2fb4:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	8f 5f       	subi	r24, 0xFF	; 255
    2fbc:	89 83       	std	Y+1, r24	; 0x01
    2fbe:	99 81       	ldd	r25, Y+1	; 0x01
    2fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc2:	98 17       	cp	r25, r24
    2fc4:	70 f3       	brcs	.-36     	; 0x2fa2 <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2fc6:	8f 81       	ldd	r24, Y+7	; 0x07
    2fc8:	68 85       	ldd	r22, Y+8	; 0x08
    2fca:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2fce:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd0:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    2fd4:	5e c0       	rjmp	.+188    	; 0x3092 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    2fd6:	88 e6       	ldi	r24, 0x68	; 104
    2fd8:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2fdc:	19 82       	std	Y+1, r1	; 0x01
    2fde:	0e c0       	rjmp	.+28     	; 0x2ffc <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	28 2f       	mov	r18, r24
    2fe4:	30 e0       	ldi	r19, 0x00	; 0
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	fc 01       	movw	r30, r24
    2fec:	e2 0f       	add	r30, r18
    2fee:	f3 1f       	adc	r31, r19
    2ff0:	80 81       	ld	r24, Z
    2ff2:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    2ff6:	89 81       	ldd	r24, Y+1	; 0x01
    2ff8:	8f 5f       	subi	r24, 0xFF	; 255
    2ffa:	89 83       	std	Y+1, r24	; 0x01
    2ffc:	99 81       	ldd	r25, Y+1	; 0x01
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	98 17       	cp	r25, r24
    3002:	70 f3       	brcs	.-36     	; 0x2fe0 <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3004:	8f 81       	ldd	r24, Y+7	; 0x07
    3006:	68 85       	ldd	r22, Y+8	; 0x08
    3008:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    300c:	8c 81       	ldd	r24, Y+4	; 0x04
    300e:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    3012:	3f c0       	rjmp	.+126    	; 0x3092 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    3014:	80 e7       	ldi	r24, 0x70	; 112
    3016:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    301a:	19 82       	std	Y+1, r1	; 0x01
    301c:	0e c0       	rjmp	.+28     	; 0x303a <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	8d 81       	ldd	r24, Y+5	; 0x05
    3026:	9e 81       	ldd	r25, Y+6	; 0x06
    3028:	fc 01       	movw	r30, r24
    302a:	e2 0f       	add	r30, r18
    302c:	f3 1f       	adc	r31, r19
    302e:	80 81       	ld	r24, Z
    3030:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	8f 5f       	subi	r24, 0xFF	; 255
    3038:	89 83       	std	Y+1, r24	; 0x01
    303a:	99 81       	ldd	r25, Y+1	; 0x01
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	98 17       	cp	r25, r24
    3040:	70 f3       	brcs	.-36     	; 0x301e <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3042:	8f 81       	ldd	r24, Y+7	; 0x07
    3044:	68 85       	ldd	r22, Y+8	; 0x08
    3046:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    304a:	8c 81       	ldd	r24, Y+4	; 0x04
    304c:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    3050:	20 c0       	rjmp	.+64     	; 0x3092 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    3052:	88 e7       	ldi	r24, 0x78	; 120
    3054:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3058:	19 82       	std	Y+1, r1	; 0x01
    305a:	0e c0       	rjmp	.+28     	; 0x3078 <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	28 2f       	mov	r18, r24
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	8d 81       	ldd	r24, Y+5	; 0x05
    3064:	9e 81       	ldd	r25, Y+6	; 0x06
    3066:	fc 01       	movw	r30, r24
    3068:	e2 0f       	add	r30, r18
    306a:	f3 1f       	adc	r31, r19
    306c:	80 81       	ld	r24, Z
    306e:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    3072:	89 81       	ldd	r24, Y+1	; 0x01
    3074:	8f 5f       	subi	r24, 0xFF	; 255
    3076:	89 83       	std	Y+1, r24	; 0x01
    3078:	99 81       	ldd	r25, Y+1	; 0x01
    307a:	8a 81       	ldd	r24, Y+2	; 0x02
    307c:	98 17       	cp	r25, r24
    307e:	70 f3       	brcs	.-36     	; 0x305c <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3080:	8f 81       	ldd	r24, Y+7	; 0x07
    3082:	68 85       	ldd	r22, Y+8	; 0x08
    3084:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3088:	8c 81       	ldd	r24, Y+4	; 0x04
    308a:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    308e:	01 c0       	rjmp	.+2      	; 0x3092 <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    3090:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    3092:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3094:	2a 96       	adiw	r28, 0x0a	; 10
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	cd b7       	in	r28, 0x3d	; 61
    30ac:	de b7       	in	r29, 0x3e	; 62
    30ae:	e1 97       	sbiw	r28, 0x31	; 49
    30b0:	0f b6       	in	r0, 0x3f	; 63
    30b2:	f8 94       	cli
    30b4:	de bf       	out	0x3e, r29	; 62
    30b6:	0f be       	out	0x3f, r0	; 63
    30b8:	cd bf       	out	0x3d, r28	; 61
    30ba:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	40 e0       	ldi	r20, 0x00	; 0
    30c2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	61 e0       	ldi	r22, 0x01	; 1
    30ca:	40 e0       	ldi	r20, 0x00	; 0
    30cc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    30d0:	89 a9       	ldd	r24, Y+49	; 0x31
    30d2:	98 2f       	mov	r25, r24
    30d4:	92 95       	swap	r25
    30d6:	90 7f       	andi	r25, 0xF0	; 240
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	69 2f       	mov	r22, r25
    30dc:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	62 e0       	ldi	r22, 0x02	; 2
    30e4:	41 e0       	ldi	r20, 0x01	; 1
    30e6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a0 e8       	ldi	r26, 0x80	; 128
    30f0:	bf e3       	ldi	r27, 0x3F	; 63
    30f2:	8d a7       	std	Y+45, r24	; 0x2d
    30f4:	9e a7       	std	Y+46, r25	; 0x2e
    30f6:	af a7       	std	Y+47, r26	; 0x2f
    30f8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30fa:	6d a5       	ldd	r22, Y+45	; 0x2d
    30fc:	7e a5       	ldd	r23, Y+46	; 0x2e
    30fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3100:	98 a9       	ldd	r25, Y+48	; 0x30
    3102:	2b ea       	ldi	r18, 0xAB	; 171
    3104:	3a ea       	ldi	r19, 0xAA	; 170
    3106:	4a e2       	ldi	r20, 0x2A	; 42
    3108:	50 e4       	ldi	r21, 0x40	; 64
    310a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	89 a7       	std	Y+41, r24	; 0x29
    3114:	9a a7       	std	Y+42, r25	; 0x2a
    3116:	ab a7       	std	Y+43, r26	; 0x2b
    3118:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    311a:	69 a5       	ldd	r22, Y+41	; 0x29
    311c:	7a a5       	ldd	r23, Y+42	; 0x2a
    311e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3120:	9c a5       	ldd	r25, Y+44	; 0x2c
    3122:	20 e0       	ldi	r18, 0x00	; 0
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	40 e8       	ldi	r20, 0x80	; 128
    3128:	5f e3       	ldi	r21, 0x3F	; 63
    312a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    312e:	88 23       	and	r24, r24
    3130:	1c f4       	brge	.+6      	; 0x3138 <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	88 a7       	std	Y+40, r24	; 0x28
    3136:	91 c0       	rjmp	.+290    	; 0x325a <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    3138:	69 a5       	ldd	r22, Y+41	; 0x29
    313a:	7a a5       	ldd	r23, Y+42	; 0x2a
    313c:	8b a5       	ldd	r24, Y+43	; 0x2b
    313e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	30 e0       	ldi	r19, 0x00	; 0
    3144:	4f e7       	ldi	r20, 0x7F	; 127
    3146:	53 e4       	ldi	r21, 0x43	; 67
    3148:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    314c:	18 16       	cp	r1, r24
    314e:	0c f0       	brlt	.+2      	; 0x3152 <LCD_voidSendHalfCmnd+0xac>
    3150:	7b c0       	rjmp	.+246    	; 0x3248 <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    3152:	6d a5       	ldd	r22, Y+45	; 0x2d
    3154:	7e a5       	ldd	r23, Y+46	; 0x2e
    3156:	8f a5       	ldd	r24, Y+47	; 0x2f
    3158:	98 a9       	ldd	r25, Y+48	; 0x30
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a e7       	ldi	r20, 0x7A	; 122
    3160:	54 e4       	ldi	r21, 0x44	; 68
    3162:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	8c a3       	std	Y+36, r24	; 0x24
    316c:	9d a3       	std	Y+37, r25	; 0x25
    316e:	ae a3       	std	Y+38, r26	; 0x26
    3170:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3172:	6c a1       	ldd	r22, Y+36	; 0x24
    3174:	7d a1       	ldd	r23, Y+37	; 0x25
    3176:	8e a1       	ldd	r24, Y+38	; 0x26
    3178:	9f a1       	ldd	r25, Y+39	; 0x27
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	4a ef       	ldi	r20, 0xFA	; 250
    3180:	54 e4       	ldi	r21, 0x44	; 68
    3182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	88 a3       	std	Y+32, r24	; 0x20
    318c:	99 a3       	std	Y+33, r25	; 0x21
    318e:	aa a3       	std	Y+34, r26	; 0x22
    3190:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3192:	68 a1       	ldd	r22, Y+32	; 0x20
    3194:	79 a1       	ldd	r23, Y+33	; 0x21
    3196:	8a a1       	ldd	r24, Y+34	; 0x22
    3198:	9b a1       	ldd	r25, Y+35	; 0x23
    319a:	20 e0       	ldi	r18, 0x00	; 0
    319c:	30 e0       	ldi	r19, 0x00	; 0
    319e:	40 e8       	ldi	r20, 0x80	; 128
    31a0:	5f e3       	ldi	r21, 0x3F	; 63
    31a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31a6:	88 23       	and	r24, r24
    31a8:	2c f4       	brge	.+10     	; 0x31b4 <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	9f 8f       	std	Y+31, r25	; 0x1f
    31b0:	8e 8f       	std	Y+30, r24	; 0x1e
    31b2:	3f c0       	rjmp	.+126    	; 0x3232 <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    31b4:	68 a1       	ldd	r22, Y+32	; 0x20
    31b6:	79 a1       	ldd	r23, Y+33	; 0x21
    31b8:	8a a1       	ldd	r24, Y+34	; 0x22
    31ba:	9b a1       	ldd	r25, Y+35	; 0x23
    31bc:	20 e0       	ldi	r18, 0x00	; 0
    31be:	3f ef       	ldi	r19, 0xFF	; 255
    31c0:	4f e7       	ldi	r20, 0x7F	; 127
    31c2:	57 e4       	ldi	r21, 0x47	; 71
    31c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31c8:	18 16       	cp	r1, r24
    31ca:	4c f5       	brge	.+82     	; 0x321e <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31cc:	6c a1       	ldd	r22, Y+36	; 0x24
    31ce:	7d a1       	ldd	r23, Y+37	; 0x25
    31d0:	8e a1       	ldd	r24, Y+38	; 0x26
    31d2:	9f a1       	ldd	r25, Y+39	; 0x27
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	40 e2       	ldi	r20, 0x20	; 32
    31da:	51 e4       	ldi	r21, 0x41	; 65
    31dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9f 8f       	std	Y+31, r25	; 0x1f
    31f2:	8e 8f       	std	Y+30, r24	; 0x1e
    31f4:	0f c0       	rjmp	.+30     	; 0x3214 <LCD_voidSendHalfCmnd+0x16e>
    31f6:	88 ec       	ldi	r24, 0xC8	; 200
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9d 8f       	std	Y+29, r25	; 0x1d
    31fc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31fe:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3200:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3202:	01 97       	sbiw	r24, 0x01	; 1
    3204:	f1 f7       	brne	.-4      	; 0x3202 <LCD_voidSendHalfCmnd+0x15c>
    3206:	9d 8f       	std	Y+29, r25	; 0x1d
    3208:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    320a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    320c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	9f 8f       	std	Y+31, r25	; 0x1f
    3212:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3214:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3216:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	69 f7       	brne	.-38     	; 0x31f6 <LCD_voidSendHalfCmnd+0x150>
    321c:	24 c0       	rjmp	.+72     	; 0x3266 <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    321e:	68 a1       	ldd	r22, Y+32	; 0x20
    3220:	79 a1       	ldd	r23, Y+33	; 0x21
    3222:	8a a1       	ldd	r24, Y+34	; 0x22
    3224:	9b a1       	ldd	r25, Y+35	; 0x23
    3226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	9f 8f       	std	Y+31, r25	; 0x1f
    3230:	8e 8f       	std	Y+30, r24	; 0x1e
    3232:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3234:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3236:	9b 8f       	std	Y+27, r25	; 0x1b
    3238:	8a 8f       	std	Y+26, r24	; 0x1a
    323a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    323c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    323e:	01 97       	sbiw	r24, 0x01	; 1
    3240:	f1 f7       	brne	.-4      	; 0x323e <LCD_voidSendHalfCmnd+0x198>
    3242:	9b 8f       	std	Y+27, r25	; 0x1b
    3244:	8a 8f       	std	Y+26, r24	; 0x1a
    3246:	0f c0       	rjmp	.+30     	; 0x3266 <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3248:	69 a5       	ldd	r22, Y+41	; 0x29
    324a:	7a a5       	ldd	r23, Y+42	; 0x2a
    324c:	8b a5       	ldd	r24, Y+43	; 0x2b
    324e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	88 a7       	std	Y+40, r24	; 0x28
    325a:	88 a5       	ldd	r24, Y+40	; 0x28
    325c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    325e:	89 8d       	ldd	r24, Y+25	; 0x19
    3260:	8a 95       	dec	r24
    3262:	f1 f7       	brne	.-4      	; 0x3260 <LCD_voidSendHalfCmnd+0x1ba>
    3264:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	62 e0       	ldi	r22, 0x02	; 2
    326a:	40 e0       	ldi	r20, 0x00	; 0
    326c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    3270:	80 e0       	ldi	r24, 0x00	; 0
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	a0 e8       	ldi	r26, 0x80	; 128
    3276:	bf e3       	ldi	r27, 0x3F	; 63
    3278:	8d 8b       	std	Y+21, r24	; 0x15
    327a:	9e 8b       	std	Y+22, r25	; 0x16
    327c:	af 8b       	std	Y+23, r26	; 0x17
    327e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3280:	6d 89       	ldd	r22, Y+21	; 0x15
    3282:	7e 89       	ldd	r23, Y+22	; 0x16
    3284:	8f 89       	ldd	r24, Y+23	; 0x17
    3286:	98 8d       	ldd	r25, Y+24	; 0x18
    3288:	2b ea       	ldi	r18, 0xAB	; 171
    328a:	3a ea       	ldi	r19, 0xAA	; 170
    328c:	4a e2       	ldi	r20, 0x2A	; 42
    328e:	50 e4       	ldi	r21, 0x40	; 64
    3290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	89 8b       	std	Y+17, r24	; 0x11
    329a:	9a 8b       	std	Y+18, r25	; 0x12
    329c:	ab 8b       	std	Y+19, r26	; 0x13
    329e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    32a0:	69 89       	ldd	r22, Y+17	; 0x11
    32a2:	7a 89       	ldd	r23, Y+18	; 0x12
    32a4:	8b 89       	ldd	r24, Y+19	; 0x13
    32a6:	9c 89       	ldd	r25, Y+20	; 0x14
    32a8:	20 e0       	ldi	r18, 0x00	; 0
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e8       	ldi	r20, 0x80	; 128
    32ae:	5f e3       	ldi	r21, 0x3F	; 63
    32b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32b4:	88 23       	and	r24, r24
    32b6:	1c f4       	brge	.+6      	; 0x32be <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	88 8b       	std	Y+16, r24	; 0x10
    32bc:	91 c0       	rjmp	.+290    	; 0x33e0 <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    32be:	69 89       	ldd	r22, Y+17	; 0x11
    32c0:	7a 89       	ldd	r23, Y+18	; 0x12
    32c2:	8b 89       	ldd	r24, Y+19	; 0x13
    32c4:	9c 89       	ldd	r25, Y+20	; 0x14
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	4f e7       	ldi	r20, 0x7F	; 127
    32cc:	53 e4       	ldi	r21, 0x43	; 67
    32ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32d2:	18 16       	cp	r1, r24
    32d4:	0c f0       	brlt	.+2      	; 0x32d8 <LCD_voidSendHalfCmnd+0x232>
    32d6:	7b c0       	rjmp	.+246    	; 0x33ce <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    32d8:	6d 89       	ldd	r22, Y+21	; 0x15
    32da:	7e 89       	ldd	r23, Y+22	; 0x16
    32dc:	8f 89       	ldd	r24, Y+23	; 0x17
    32de:	98 8d       	ldd	r25, Y+24	; 0x18
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	4a e7       	ldi	r20, 0x7A	; 122
    32e6:	54 e4       	ldi	r21, 0x44	; 68
    32e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32ec:	dc 01       	movw	r26, r24
    32ee:	cb 01       	movw	r24, r22
    32f0:	8c 87       	std	Y+12, r24	; 0x0c
    32f2:	9d 87       	std	Y+13, r25	; 0x0d
    32f4:	ae 87       	std	Y+14, r26	; 0x0e
    32f6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    32fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    32fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    32fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    3300:	20 e0       	ldi	r18, 0x00	; 0
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	4a ef       	ldi	r20, 0xFA	; 250
    3306:	54 e4       	ldi	r21, 0x44	; 68
    3308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	88 87       	std	Y+8, r24	; 0x08
    3312:	99 87       	std	Y+9, r25	; 0x09
    3314:	aa 87       	std	Y+10, r26	; 0x0a
    3316:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3318:	68 85       	ldd	r22, Y+8	; 0x08
    331a:	79 85       	ldd	r23, Y+9	; 0x09
    331c:	8a 85       	ldd	r24, Y+10	; 0x0a
    331e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	40 e8       	ldi	r20, 0x80	; 128
    3326:	5f e3       	ldi	r21, 0x3F	; 63
    3328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    332c:	88 23       	and	r24, r24
    332e:	2c f4       	brge	.+10     	; 0x333a <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    3330:	81 e0       	ldi	r24, 0x01	; 1
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	9f 83       	std	Y+7, r25	; 0x07
    3336:	8e 83       	std	Y+6, r24	; 0x06
    3338:	3f c0       	rjmp	.+126    	; 0x33b8 <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    333a:	68 85       	ldd	r22, Y+8	; 0x08
    333c:	79 85       	ldd	r23, Y+9	; 0x09
    333e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3340:	9b 85       	ldd	r25, Y+11	; 0x0b
    3342:	20 e0       	ldi	r18, 0x00	; 0
    3344:	3f ef       	ldi	r19, 0xFF	; 255
    3346:	4f e7       	ldi	r20, 0x7F	; 127
    3348:	57 e4       	ldi	r21, 0x47	; 71
    334a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334e:	18 16       	cp	r1, r24
    3350:	4c f5       	brge	.+82     	; 0x33a4 <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3352:	6c 85       	ldd	r22, Y+12	; 0x0c
    3354:	7d 85       	ldd	r23, Y+13	; 0x0d
    3356:	8e 85       	ldd	r24, Y+14	; 0x0e
    3358:	9f 85       	ldd	r25, Y+15	; 0x0f
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	40 e2       	ldi	r20, 0x20	; 32
    3360:	51 e4       	ldi	r21, 0x41	; 65
    3362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	bc 01       	movw	r22, r24
    336c:	cd 01       	movw	r24, r26
    336e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3372:	dc 01       	movw	r26, r24
    3374:	cb 01       	movw	r24, r22
    3376:	9f 83       	std	Y+7, r25	; 0x07
    3378:	8e 83       	std	Y+6, r24	; 0x06
    337a:	0f c0       	rjmp	.+30     	; 0x339a <LCD_voidSendHalfCmnd+0x2f4>
    337c:	88 ec       	ldi	r24, 0xC8	; 200
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	9d 83       	std	Y+5, r25	; 0x05
    3382:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3384:	8c 81       	ldd	r24, Y+4	; 0x04
    3386:	9d 81       	ldd	r25, Y+5	; 0x05
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	f1 f7       	brne	.-4      	; 0x3388 <LCD_voidSendHalfCmnd+0x2e2>
    338c:	9d 83       	std	Y+5, r25	; 0x05
    338e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3390:	8e 81       	ldd	r24, Y+6	; 0x06
    3392:	9f 81       	ldd	r25, Y+7	; 0x07
    3394:	01 97       	sbiw	r24, 0x01	; 1
    3396:	9f 83       	std	Y+7, r25	; 0x07
    3398:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339a:	8e 81       	ldd	r24, Y+6	; 0x06
    339c:	9f 81       	ldd	r25, Y+7	; 0x07
    339e:	00 97       	sbiw	r24, 0x00	; 0
    33a0:	69 f7       	brne	.-38     	; 0x337c <LCD_voidSendHalfCmnd+0x2d6>
    33a2:	24 c0       	rjmp	.+72     	; 0x33ec <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a4:	68 85       	ldd	r22, Y+8	; 0x08
    33a6:	79 85       	ldd	r23, Y+9	; 0x09
    33a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    33aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    33ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b0:	dc 01       	movw	r26, r24
    33b2:	cb 01       	movw	r24, r22
    33b4:	9f 83       	std	Y+7, r25	; 0x07
    33b6:	8e 83       	std	Y+6, r24	; 0x06
    33b8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ba:	9f 81       	ldd	r25, Y+7	; 0x07
    33bc:	9b 83       	std	Y+3, r25	; 0x03
    33be:	8a 83       	std	Y+2, r24	; 0x02
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	9b 81       	ldd	r25, Y+3	; 0x03
    33c4:	01 97       	sbiw	r24, 0x01	; 1
    33c6:	f1 f7       	brne	.-4      	; 0x33c4 <LCD_voidSendHalfCmnd+0x31e>
    33c8:	9b 83       	std	Y+3, r25	; 0x03
    33ca:	8a 83       	std	Y+2, r24	; 0x02
    33cc:	0f c0       	rjmp	.+30     	; 0x33ec <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33ce:	69 89       	ldd	r22, Y+17	; 0x11
    33d0:	7a 89       	ldd	r23, Y+18	; 0x12
    33d2:	8b 89       	ldd	r24, Y+19	; 0x13
    33d4:	9c 89       	ldd	r25, Y+20	; 0x14
    33d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33da:	dc 01       	movw	r26, r24
    33dc:	cb 01       	movw	r24, r22
    33de:	88 8b       	std	Y+16, r24	; 0x10
    33e0:	88 89       	ldd	r24, Y+16	; 0x10
    33e2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33e4:	89 81       	ldd	r24, Y+1	; 0x01
    33e6:	8a 95       	dec	r24
    33e8:	f1 f7       	brne	.-4      	; 0x33e6 <LCD_voidSendHalfCmnd+0x340>
    33ea:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
    33ec:	e1 96       	adiw	r28, 0x31	; 49
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	cf 91       	pop	r28
    33fa:	df 91       	pop	r29
    33fc:	08 95       	ret

000033fe <appenedToBuffer>:
u8 Local_u8Index = 0; // Index for buffer
u8 Local_Au8InputBuffer[5] = {0}; // Buffer to store input
u8 trials = 0;
/* Function to append a key to buffer */
void appenedToBuffer(u8 *buffer,u8 key)
{
    33fe:	df 93       	push	r29
    3400:	cf 93       	push	r28
    3402:	00 d0       	rcall	.+0      	; 0x3404 <appenedToBuffer+0x6>
    3404:	0f 92       	push	r0
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	9a 83       	std	Y+2, r25	; 0x02
    340c:	89 83       	std	Y+1, r24	; 0x01
    340e:	6b 83       	std	Y+3, r22	; 0x03
	if(Local_u8Index < 4) // Make sure buffer index is within range
    3410:	80 91 52 01 	lds	r24, 0x0152
    3414:	84 30       	cpi	r24, 0x04	; 4
    3416:	d0 f4       	brcc	.+52     	; 0x344c <appenedToBuffer+0x4e>
	{
		*(buffer+Local_u8Index) = key; // Store the character in buffer
    3418:	80 91 52 01 	lds	r24, 0x0152
    341c:	28 2f       	mov	r18, r24
    341e:	30 e0       	ldi	r19, 0x00	; 0
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	9a 81       	ldd	r25, Y+2	; 0x02
    3424:	fc 01       	movw	r30, r24
    3426:	e2 0f       	add	r30, r18
    3428:	f3 1f       	adc	r31, r19
    342a:	8b 81       	ldd	r24, Y+3	; 0x03
    342c:	80 83       	st	Z, r24
		Local_u8Index++; // Increment buffer index
    342e:	80 91 52 01 	lds	r24, 0x0152
    3432:	8f 5f       	subi	r24, 0xFF	; 255
    3434:	80 93 52 01 	sts	0x0152, r24
		*(buffer+Local_u8Index) = '\0';// Null-terminate buffer
    3438:	80 91 52 01 	lds	r24, 0x0152
    343c:	28 2f       	mov	r18, r24
    343e:	30 e0       	ldi	r19, 0x00	; 0
    3440:	89 81       	ldd	r24, Y+1	; 0x01
    3442:	9a 81       	ldd	r25, Y+2	; 0x02
    3444:	fc 01       	movw	r30, r24
    3446:	e2 0f       	add	r30, r18
    3448:	f3 1f       	adc	r31, r19
    344a:	10 82       	st	Z, r1
	}
}
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <ClearBuffer>:
/* Function to clear buffer */
void ClearBuffer(u8 *buffer,u8 size)
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <ClearBuffer+0x6>
    345e:	00 d0       	rcall	.+0      	; 0x3460 <ClearBuffer+0x8>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	9b 83       	std	Y+3, r25	; 0x03
    3466:	8a 83       	std	Y+2, r24	; 0x02
    3468:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for (i = 0; i < size; i++)// Loop through buffer
    346a:	19 82       	std	Y+1, r1	; 0x01
    346c:	0c c0       	rjmp	.+24     	; 0x3486 <ClearBuffer+0x2e>
	{
		buffer[i] = '\0';// Set each element to null character
    346e:	89 81       	ldd	r24, Y+1	; 0x01
    3470:	28 2f       	mov	r18, r24
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	8a 81       	ldd	r24, Y+2	; 0x02
    3476:	9b 81       	ldd	r25, Y+3	; 0x03
    3478:	fc 01       	movw	r30, r24
    347a:	e2 0f       	add	r30, r18
    347c:	f3 1f       	adc	r31, r19
    347e:	10 82       	st	Z, r1
}
/* Function to clear buffer */
void ClearBuffer(u8 *buffer,u8 size)
{
	u8 i;
	for (i = 0; i < size; i++)// Loop through buffer
    3480:	89 81       	ldd	r24, Y+1	; 0x01
    3482:	8f 5f       	subi	r24, 0xFF	; 255
    3484:	89 83       	std	Y+1, r24	; 0x01
    3486:	99 81       	ldd	r25, Y+1	; 0x01
    3488:	8c 81       	ldd	r24, Y+4	; 0x04
    348a:	98 17       	cp	r25, r24
    348c:	80 f3       	brcs	.-32     	; 0x346e <ClearBuffer+0x16>
	{
		buffer[i] = '\0';// Set each element to null character
	}
}
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <CheckPassword>:
void CheckPassword(u8* buffer,u8* password,u8* Result)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	28 97       	sbiw	r28, 0x08	; 8
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	9c 83       	std	Y+4, r25	; 0x04
    34b2:	8b 83       	std	Y+3, r24	; 0x03
    34b4:	7e 83       	std	Y+6, r23	; 0x06
    34b6:	6d 83       	std	Y+5, r22	; 0x05
    34b8:	58 87       	std	Y+8, r21	; 0x08
    34ba:	4f 83       	std	Y+7, r20	; 0x07
	u8 i = 0; // Loop counter
    34bc:	1a 82       	std	Y+2, r1	; 0x02
	u8 Password_Flag = 0; // 0 mean incorrect
    34be:	19 82       	std	Y+1, r1	; 0x01
    34c0:	1c c0       	rjmp	.+56     	; 0x34fa <CheckPassword+0x5e>
	while((*(buffer+i) != '\0') && (*(password+i)!= '\0'))
	{
		if(buffer[i] == password[i])
    34c2:	8a 81       	ldd	r24, Y+2	; 0x02
    34c4:	28 2f       	mov	r18, r24
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	9c 81       	ldd	r25, Y+4	; 0x04
    34cc:	fc 01       	movw	r30, r24
    34ce:	e2 0f       	add	r30, r18
    34d0:	f3 1f       	adc	r31, r19
    34d2:	40 81       	ld	r20, Z
    34d4:	8a 81       	ldd	r24, Y+2	; 0x02
    34d6:	28 2f       	mov	r18, r24
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	8d 81       	ldd	r24, Y+5	; 0x05
    34dc:	9e 81       	ldd	r25, Y+6	; 0x06
    34de:	fc 01       	movw	r30, r24
    34e0:	e2 0f       	add	r30, r18
    34e2:	f3 1f       	adc	r31, r19
    34e4:	80 81       	ld	r24, Z
    34e6:	48 17       	cp	r20, r24
    34e8:	31 f4       	brne	.+12     	; 0x34f6 <CheckPassword+0x5a>
		{
			Password_Flag = 1;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			Password_Flag = 0;
			break;
		}
		i++;
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	8f 5f       	subi	r24, 0xFF	; 255
    34f2:	8a 83       	std	Y+2, r24	; 0x02
    34f4:	02 c0       	rjmp	.+4      	; 0x34fa <CheckPassword+0x5e>
		{
			Password_Flag = 1;
		}
		else
		{
			Password_Flag = 0;
    34f6:	19 82       	std	Y+1, r1	; 0x01
    34f8:	16 c0       	rjmp	.+44     	; 0x3526 <CheckPassword+0x8a>
}
void CheckPassword(u8* buffer,u8* password,u8* Result)
{
	u8 i = 0; // Loop counter
	u8 Password_Flag = 0; // 0 mean incorrect
	while((*(buffer+i) != '\0') && (*(password+i)!= '\0'))
    34fa:	8a 81       	ldd	r24, Y+2	; 0x02
    34fc:	28 2f       	mov	r18, r24
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	8b 81       	ldd	r24, Y+3	; 0x03
    3502:	9c 81       	ldd	r25, Y+4	; 0x04
    3504:	fc 01       	movw	r30, r24
    3506:	e2 0f       	add	r30, r18
    3508:	f3 1f       	adc	r31, r19
    350a:	80 81       	ld	r24, Z
    350c:	88 23       	and	r24, r24
    350e:	59 f0       	breq	.+22     	; 0x3526 <CheckPassword+0x8a>
    3510:	8a 81       	ldd	r24, Y+2	; 0x02
    3512:	28 2f       	mov	r18, r24
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	8d 81       	ldd	r24, Y+5	; 0x05
    3518:	9e 81       	ldd	r25, Y+6	; 0x06
    351a:	fc 01       	movw	r30, r24
    351c:	e2 0f       	add	r30, r18
    351e:	f3 1f       	adc	r31, r19
    3520:	80 81       	ld	r24, Z
    3522:	88 23       	and	r24, r24
    3524:	71 f6       	brne	.-100    	; 0x34c2 <CheckPassword+0x26>
			Password_Flag = 0;
			break;
		}
		i++;
	}
	*Result = Password_Flag;
    3526:	ef 81       	ldd	r30, Y+7	; 0x07
    3528:	f8 85       	ldd	r31, Y+8	; 0x08
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	80 83       	st	Z, r24
}
    352e:	28 96       	adiw	r28, 0x08	; 8
    3530:	0f b6       	in	r0, 0x3f	; 63
    3532:	f8 94       	cli
    3534:	de bf       	out	0x3e, r29	; 62
    3536:	0f be       	out	0x3f, r0	; 63
    3538:	cd bf       	out	0x3d, r28	; 61
    353a:	cf 91       	pop	r28
    353c:	df 91       	pop	r29
    353e:	08 95       	ret

00003540 <login_system>:
void login_system(const u8* password, u8* flag)
{
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	df 93       	push	r29
    3546:	cf 93       	push	r28
    3548:	cd b7       	in	r28, 0x3d	; 61
    354a:	de b7       	in	r29, 0x3e	; 62
    354c:	c8 56       	subi	r28, 0x68	; 104
    354e:	d0 40       	sbci	r29, 0x00	; 0
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	fe 01       	movw	r30, r28
    355c:	eb 59       	subi	r30, 0x9B	; 155
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	91 83       	std	Z+1, r25	; 0x01
    3562:	80 83       	st	Z, r24
    3564:	fe 01       	movw	r30, r28
    3566:	e9 59       	subi	r30, 0x99	; 153
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	71 83       	std	Z+1, r23	; 0x01
    356c:	60 83       	st	Z, r22
	u8 Local_u8Key;
	u8 Local_u8Result;
	LCD_voidWriteString((u8*)"Enter Password: ");
    356e:	8b eb       	ldi	r24, 0xBB	; 187
    3570:	90 e0       	ldi	r25, 0x00	; 0
    3572:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    3576:	82 e0       	ldi	r24, 0x02	; 2
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
	while(1)
	{
		if(trials < 3)
    357e:	80 91 58 01 	lds	r24, 0x0158
    3582:	83 30       	cpi	r24, 0x03	; 3
    3584:	08 f0       	brcs	.+2      	; 0x3588 <login_system+0x48>
    3586:	b1 c3       	rjmp	.+1890   	; 0x3cea <login_system+0x7aa>
		{
			KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    3588:	ce 01       	movw	r24, r28
    358a:	8d 59       	subi	r24, 0x9D	; 157
    358c:	9f 4f       	sbci	r25, 0xFF	; 255
    358e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <KPD_u8GetKeyState>
			if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    3592:	fe 01       	movw	r30, r28
    3594:	ed 59       	subi	r30, 0x9D	; 157
    3596:	ff 4f       	sbci	r31, 0xFF	; 255
    3598:	80 81       	ld	r24, Z
    359a:	8f 3f       	cpi	r24, 0xFF	; 255
    359c:	81 f3       	breq	.-32     	; 0x357e <login_system+0x3e>
			{
				if(Local_u8Key == '=') // If pressed key is '='
    359e:	fe 01       	movw	r30, r28
    35a0:	ed 59       	subi	r30, 0x9D	; 157
    35a2:	ff 4f       	sbci	r31, 0xFF	; 255
    35a4:	80 81       	ld	r24, Z
    35a6:	8d 33       	cpi	r24, 0x3D	; 61
    35a8:	09 f0       	breq	.+2      	; 0x35ac <login_system+0x6c>
    35aa:	92 c3       	rjmp	.+1828   	; 0x3cd0 <login_system+0x790>
				{
					CheckPassword(Local_Au8InputBuffer,password,&Local_u8Result);
    35ac:	fe 01       	movw	r30, r28
    35ae:	eb 59       	subi	r30, 0x9B	; 155
    35b0:	ff 4f       	sbci	r31, 0xFF	; 255
    35b2:	40 81       	ld	r20, Z
    35b4:	51 81       	ldd	r21, Z+1	; 0x01
    35b6:	83 e5       	ldi	r24, 0x53	; 83
    35b8:	91 e0       	ldi	r25, 0x01	; 1
    35ba:	9e 01       	movw	r18, r28
    35bc:	2c 59       	subi	r18, 0x9C	; 156
    35be:	3f 4f       	sbci	r19, 0xFF	; 255
    35c0:	ba 01       	movw	r22, r20
    35c2:	a9 01       	movw	r20, r18
    35c4:	0e 94 4e 1a 	call	0x349c	; 0x349c <CheckPassword>
					if(Local_u8Result)
    35c8:	fe 01       	movw	r30, r28
    35ca:	ec 59       	subi	r30, 0x9C	; 156
    35cc:	ff 4f       	sbci	r31, 0xFF	; 255
    35ce:	80 81       	ld	r24, Z
    35d0:	88 23       	and	r24, r24
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <login_system+0x96>
    35d4:	c2 c0       	rjmp	.+388    	; 0x375a <login_system+0x21a>
					{
						LCD_voidClearScreen();
    35d6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    35da:	fe 01       	movw	r30, r28
    35dc:	e1 5a       	subi	r30, 0xA1	; 161
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	a0 ea       	ldi	r26, 0xA0	; 160
    35e6:	b1 e4       	ldi	r27, 0x41	; 65
    35e8:	80 83       	st	Z, r24
    35ea:	91 83       	std	Z+1, r25	; 0x01
    35ec:	a2 83       	std	Z+2, r26	; 0x02
    35ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f0:	8e 01       	movw	r16, r28
    35f2:	05 5a       	subi	r16, 0xA5	; 165
    35f4:	1f 4f       	sbci	r17, 0xFF	; 255
    35f6:	fe 01       	movw	r30, r28
    35f8:	e1 5a       	subi	r30, 0xA1	; 161
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	60 81       	ld	r22, Z
    35fe:	71 81       	ldd	r23, Z+1	; 0x01
    3600:	82 81       	ldd	r24, Z+2	; 0x02
    3602:	93 81       	ldd	r25, Z+3	; 0x03
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	4a ef       	ldi	r20, 0xFA	; 250
    360a:	54 e4       	ldi	r21, 0x44	; 68
    360c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3610:	dc 01       	movw	r26, r24
    3612:	cb 01       	movw	r24, r22
    3614:	f8 01       	movw	r30, r16
    3616:	80 83       	st	Z, r24
    3618:	91 83       	std	Z+1, r25	; 0x01
    361a:	a2 83       	std	Z+2, r26	; 0x02
    361c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    361e:	fe 01       	movw	r30, r28
    3620:	e5 5a       	subi	r30, 0xA5	; 165
    3622:	ff 4f       	sbci	r31, 0xFF	; 255
    3624:	60 81       	ld	r22, Z
    3626:	71 81       	ldd	r23, Z+1	; 0x01
    3628:	82 81       	ldd	r24, Z+2	; 0x02
    362a:	93 81       	ldd	r25, Z+3	; 0x03
    362c:	20 e0       	ldi	r18, 0x00	; 0
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	40 e8       	ldi	r20, 0x80	; 128
    3632:	5f e3       	ldi	r21, 0x3F	; 63
    3634:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3638:	88 23       	and	r24, r24
    363a:	44 f4       	brge	.+16     	; 0x364c <login_system+0x10c>
		__ticks = 1;
    363c:	fe 01       	movw	r30, r28
    363e:	e7 5a       	subi	r30, 0xA7	; 167
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	80 83       	st	Z, r24
    364a:	64 c0       	rjmp	.+200    	; 0x3714 <login_system+0x1d4>
	else if (__tmp > 65535)
    364c:	fe 01       	movw	r30, r28
    364e:	e5 5a       	subi	r30, 0xA5	; 165
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	60 81       	ld	r22, Z
    3654:	71 81       	ldd	r23, Z+1	; 0x01
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	3f ef       	ldi	r19, 0xFF	; 255
    365e:	4f e7       	ldi	r20, 0x7F	; 127
    3660:	57 e4       	ldi	r21, 0x47	; 71
    3662:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3666:	18 16       	cp	r1, r24
    3668:	0c f0       	brlt	.+2      	; 0x366c <login_system+0x12c>
    366a:	43 c0       	rjmp	.+134    	; 0x36f2 <login_system+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366c:	fe 01       	movw	r30, r28
    366e:	e1 5a       	subi	r30, 0xA1	; 161
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	60 81       	ld	r22, Z
    3674:	71 81       	ldd	r23, Z+1	; 0x01
    3676:	82 81       	ldd	r24, Z+2	; 0x02
    3678:	93 81       	ldd	r25, Z+3	; 0x03
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e2       	ldi	r20, 0x20	; 32
    3680:	51 e4       	ldi	r21, 0x41	; 65
    3682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	8e 01       	movw	r16, r28
    368c:	07 5a       	subi	r16, 0xA7	; 167
    368e:	1f 4f       	sbci	r17, 0xFF	; 255
    3690:	bc 01       	movw	r22, r24
    3692:	cd 01       	movw	r24, r26
    3694:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3698:	dc 01       	movw	r26, r24
    369a:	cb 01       	movw	r24, r22
    369c:	f8 01       	movw	r30, r16
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	80 83       	st	Z, r24
    36a2:	1f c0       	rjmp	.+62     	; 0x36e2 <login_system+0x1a2>
    36a4:	fe 01       	movw	r30, r28
    36a6:	e9 5a       	subi	r30, 0xA9	; 169
    36a8:	ff 4f       	sbci	r31, 0xFF	; 255
    36aa:	88 ec       	ldi	r24, 0xC8	; 200
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36b2:	fe 01       	movw	r30, r28
    36b4:	e9 5a       	subi	r30, 0xA9	; 169
    36b6:	ff 4f       	sbci	r31, 0xFF	; 255
    36b8:	80 81       	ld	r24, Z
    36ba:	91 81       	ldd	r25, Z+1	; 0x01
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <login_system+0x17c>
    36c0:	fe 01       	movw	r30, r28
    36c2:	e9 5a       	subi	r30, 0xA9	; 169
    36c4:	ff 4f       	sbci	r31, 0xFF	; 255
    36c6:	91 83       	std	Z+1, r25	; 0x01
    36c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ca:	de 01       	movw	r26, r28
    36cc:	a7 5a       	subi	r26, 0xA7	; 167
    36ce:	bf 4f       	sbci	r27, 0xFF	; 255
    36d0:	fe 01       	movw	r30, r28
    36d2:	e7 5a       	subi	r30, 0xA7	; 167
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	80 81       	ld	r24, Z
    36d8:	91 81       	ldd	r25, Z+1	; 0x01
    36da:	01 97       	sbiw	r24, 0x01	; 1
    36dc:	11 96       	adiw	r26, 0x01	; 1
    36de:	9c 93       	st	X, r25
    36e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36e2:	fe 01       	movw	r30, r28
    36e4:	e7 5a       	subi	r30, 0xA7	; 167
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	80 81       	ld	r24, Z
    36ea:	91 81       	ldd	r25, Z+1	; 0x01
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	d1 f6       	brne	.-76     	; 0x36a4 <login_system+0x164>
    36f0:	27 c0       	rjmp	.+78     	; 0x3740 <login_system+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36f2:	8e 01       	movw	r16, r28
    36f4:	07 5a       	subi	r16, 0xA7	; 167
    36f6:	1f 4f       	sbci	r17, 0xFF	; 255
    36f8:	fe 01       	movw	r30, r28
    36fa:	e5 5a       	subi	r30, 0xA5	; 165
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	82 81       	ldd	r24, Z+2	; 0x02
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	f8 01       	movw	r30, r16
    3710:	91 83       	std	Z+1, r25	; 0x01
    3712:	80 83       	st	Z, r24
    3714:	de 01       	movw	r26, r28
    3716:	ab 5a       	subi	r26, 0xAB	; 171
    3718:	bf 4f       	sbci	r27, 0xFF	; 255
    371a:	fe 01       	movw	r30, r28
    371c:	e7 5a       	subi	r30, 0xA7	; 167
    371e:	ff 4f       	sbci	r31, 0xFF	; 255
    3720:	80 81       	ld	r24, Z
    3722:	91 81       	ldd	r25, Z+1	; 0x01
    3724:	8d 93       	st	X+, r24
    3726:	9c 93       	st	X, r25
    3728:	fe 01       	movw	r30, r28
    372a:	eb 5a       	subi	r30, 0xAB	; 171
    372c:	ff 4f       	sbci	r31, 0xFF	; 255
    372e:	80 81       	ld	r24, Z
    3730:	91 81       	ldd	r25, Z+1	; 0x01
    3732:	01 97       	sbiw	r24, 0x01	; 1
    3734:	f1 f7       	brne	.-4      	; 0x3732 <login_system+0x1f2>
    3736:	fe 01       	movw	r30, r28
    3738:	eb 5a       	subi	r30, 0xAB	; 171
    373a:	ff 4f       	sbci	r31, 0xFF	; 255
    373c:	91 83       	std	Z+1, r25	; 0x01
    373e:	80 83       	st	Z, r24
						_delay_ms(20);
						LCD_voidWriteString((u8*)"Correct Password!");
    3740:	8c ec       	ldi	r24, 0xCC	; 204
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
						*flag = 1;
    3748:	fe 01       	movw	r30, r28
    374a:	e9 59       	subi	r30, 0x99	; 153
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	01 90       	ld	r0, Z+
    3750:	f0 81       	ld	r31, Z
    3752:	e0 2d       	mov	r30, r0
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	80 83       	st	Z, r24
    3758:	4c c3       	rjmp	.+1688   	; 0x3df2 <login_system+0x8b2>
						break;
					}
					else
					{
						LCD_voidClearScreen();
    375a:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    375e:	fe 01       	movw	r30, r28
    3760:	ef 5a       	subi	r30, 0xAF	; 175
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	a0 ea       	ldi	r26, 0xA0	; 160
    376a:	b1 e4       	ldi	r27, 0x41	; 65
    376c:	80 83       	st	Z, r24
    376e:	91 83       	std	Z+1, r25	; 0x01
    3770:	a2 83       	std	Z+2, r26	; 0x02
    3772:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3774:	8e 01       	movw	r16, r28
    3776:	03 5b       	subi	r16, 0xB3	; 179
    3778:	1f 4f       	sbci	r17, 0xFF	; 255
    377a:	fe 01       	movw	r30, r28
    377c:	ef 5a       	subi	r30, 0xAF	; 175
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	60 81       	ld	r22, Z
    3782:	71 81       	ldd	r23, Z+1	; 0x01
    3784:	82 81       	ldd	r24, Z+2	; 0x02
    3786:	93 81       	ldd	r25, Z+3	; 0x03
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	4a ef       	ldi	r20, 0xFA	; 250
    378e:	54 e4       	ldi	r21, 0x44	; 68
    3790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	f8 01       	movw	r30, r16
    379a:	80 83       	st	Z, r24
    379c:	91 83       	std	Z+1, r25	; 0x01
    379e:	a2 83       	std	Z+2, r26	; 0x02
    37a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37a2:	fe 01       	movw	r30, r28
    37a4:	e3 5b       	subi	r30, 0xB3	; 179
    37a6:	ff 4f       	sbci	r31, 0xFF	; 255
    37a8:	60 81       	ld	r22, Z
    37aa:	71 81       	ldd	r23, Z+1	; 0x01
    37ac:	82 81       	ldd	r24, Z+2	; 0x02
    37ae:	93 81       	ldd	r25, Z+3	; 0x03
    37b0:	20 e0       	ldi	r18, 0x00	; 0
    37b2:	30 e0       	ldi	r19, 0x00	; 0
    37b4:	40 e8       	ldi	r20, 0x80	; 128
    37b6:	5f e3       	ldi	r21, 0x3F	; 63
    37b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37bc:	88 23       	and	r24, r24
    37be:	44 f4       	brge	.+16     	; 0x37d0 <login_system+0x290>
		__ticks = 1;
    37c0:	fe 01       	movw	r30, r28
    37c2:	e5 5b       	subi	r30, 0xB5	; 181
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	91 83       	std	Z+1, r25	; 0x01
    37cc:	80 83       	st	Z, r24
    37ce:	64 c0       	rjmp	.+200    	; 0x3898 <login_system+0x358>
	else if (__tmp > 65535)
    37d0:	fe 01       	movw	r30, r28
    37d2:	e3 5b       	subi	r30, 0xB3	; 179
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	60 81       	ld	r22, Z
    37d8:	71 81       	ldd	r23, Z+1	; 0x01
    37da:	82 81       	ldd	r24, Z+2	; 0x02
    37dc:	93 81       	ldd	r25, Z+3	; 0x03
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	3f ef       	ldi	r19, 0xFF	; 255
    37e2:	4f e7       	ldi	r20, 0x7F	; 127
    37e4:	57 e4       	ldi	r21, 0x47	; 71
    37e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37ea:	18 16       	cp	r1, r24
    37ec:	0c f0       	brlt	.+2      	; 0x37f0 <login_system+0x2b0>
    37ee:	43 c0       	rjmp	.+134    	; 0x3876 <login_system+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f0:	fe 01       	movw	r30, r28
    37f2:	ef 5a       	subi	r30, 0xAF	; 175
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	60 81       	ld	r22, Z
    37f8:	71 81       	ldd	r23, Z+1	; 0x01
    37fa:	82 81       	ldd	r24, Z+2	; 0x02
    37fc:	93 81       	ldd	r25, Z+3	; 0x03
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e2       	ldi	r20, 0x20	; 32
    3804:	51 e4       	ldi	r21, 0x41	; 65
    3806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	8e 01       	movw	r16, r28
    3810:	05 5b       	subi	r16, 0xB5	; 181
    3812:	1f 4f       	sbci	r17, 0xFF	; 255
    3814:	bc 01       	movw	r22, r24
    3816:	cd 01       	movw	r24, r26
    3818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381c:	dc 01       	movw	r26, r24
    381e:	cb 01       	movw	r24, r22
    3820:	f8 01       	movw	r30, r16
    3822:	91 83       	std	Z+1, r25	; 0x01
    3824:	80 83       	st	Z, r24
    3826:	1f c0       	rjmp	.+62     	; 0x3866 <login_system+0x326>
    3828:	fe 01       	movw	r30, r28
    382a:	e7 5b       	subi	r30, 0xB7	; 183
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	88 ec       	ldi	r24, 0xC8	; 200
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	91 83       	std	Z+1, r25	; 0x01
    3834:	80 83       	st	Z, r24
    3836:	fe 01       	movw	r30, r28
    3838:	e7 5b       	subi	r30, 0xB7	; 183
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <login_system+0x300>
    3844:	fe 01       	movw	r30, r28
    3846:	e7 5b       	subi	r30, 0xB7	; 183
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    384e:	de 01       	movw	r26, r28
    3850:	a5 5b       	subi	r26, 0xB5	; 181
    3852:	bf 4f       	sbci	r27, 0xFF	; 255
    3854:	fe 01       	movw	r30, r28
    3856:	e5 5b       	subi	r30, 0xB5	; 181
    3858:	ff 4f       	sbci	r31, 0xFF	; 255
    385a:	80 81       	ld	r24, Z
    385c:	91 81       	ldd	r25, Z+1	; 0x01
    385e:	01 97       	sbiw	r24, 0x01	; 1
    3860:	11 96       	adiw	r26, 0x01	; 1
    3862:	9c 93       	st	X, r25
    3864:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3866:	fe 01       	movw	r30, r28
    3868:	e5 5b       	subi	r30, 0xB5	; 181
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	80 81       	ld	r24, Z
    386e:	91 81       	ldd	r25, Z+1	; 0x01
    3870:	00 97       	sbiw	r24, 0x00	; 0
    3872:	d1 f6       	brne	.-76     	; 0x3828 <login_system+0x2e8>
    3874:	27 c0       	rjmp	.+78     	; 0x38c4 <login_system+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3876:	8e 01       	movw	r16, r28
    3878:	05 5b       	subi	r16, 0xB5	; 181
    387a:	1f 4f       	sbci	r17, 0xFF	; 255
    387c:	fe 01       	movw	r30, r28
    387e:	e3 5b       	subi	r30, 0xB3	; 179
    3880:	ff 4f       	sbci	r31, 0xFF	; 255
    3882:	60 81       	ld	r22, Z
    3884:	71 81       	ldd	r23, Z+1	; 0x01
    3886:	82 81       	ldd	r24, Z+2	; 0x02
    3888:	93 81       	ldd	r25, Z+3	; 0x03
    388a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	f8 01       	movw	r30, r16
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	de 01       	movw	r26, r28
    389a:	a9 5b       	subi	r26, 0xB9	; 185
    389c:	bf 4f       	sbci	r27, 0xFF	; 255
    389e:	fe 01       	movw	r30, r28
    38a0:	e5 5b       	subi	r30, 0xB5	; 181
    38a2:	ff 4f       	sbci	r31, 0xFF	; 255
    38a4:	80 81       	ld	r24, Z
    38a6:	91 81       	ldd	r25, Z+1	; 0x01
    38a8:	8d 93       	st	X+, r24
    38aa:	9c 93       	st	X, r25
    38ac:	fe 01       	movw	r30, r28
    38ae:	e9 5b       	subi	r30, 0xB9	; 185
    38b0:	ff 4f       	sbci	r31, 0xFF	; 255
    38b2:	80 81       	ld	r24, Z
    38b4:	91 81       	ldd	r25, Z+1	; 0x01
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <login_system+0x376>
    38ba:	fe 01       	movw	r30, r28
    38bc:	e9 5b       	subi	r30, 0xB9	; 185
    38be:	ff 4f       	sbci	r31, 0xFF	; 255
    38c0:	91 83       	std	Z+1, r25	; 0x01
    38c2:	80 83       	st	Z, r24
						_delay_ms(20);
						LCD_voidWriteString((u8*)"Wrong Password!");
    38c4:	8e ed       	ldi	r24, 0xDE	; 222
    38c6:	90 e0       	ldi	r25, 0x00	; 0
    38c8:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
    38cc:	fe 01       	movw	r30, r28
    38ce:	ed 5b       	subi	r30, 0xBD	; 189
    38d0:	ff 4f       	sbci	r31, 0xFF	; 255
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	aa e7       	ldi	r26, 0x7A	; 122
    38d8:	b4 e4       	ldi	r27, 0x44	; 68
    38da:	80 83       	st	Z, r24
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	a2 83       	std	Z+2, r26	; 0x02
    38e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38e2:	8e 01       	movw	r16, r28
    38e4:	01 5c       	subi	r16, 0xC1	; 193
    38e6:	1f 4f       	sbci	r17, 0xFF	; 255
    38e8:	fe 01       	movw	r30, r28
    38ea:	ed 5b       	subi	r30, 0xBD	; 189
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	60 81       	ld	r22, Z
    38f0:	71 81       	ldd	r23, Z+1	; 0x01
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	4a ef       	ldi	r20, 0xFA	; 250
    38fc:	54 e4       	ldi	r21, 0x44	; 68
    38fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	f8 01       	movw	r30, r16
    3908:	80 83       	st	Z, r24
    390a:	91 83       	std	Z+1, r25	; 0x01
    390c:	a2 83       	std	Z+2, r26	; 0x02
    390e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3910:	fe 01       	movw	r30, r28
    3912:	ff 96       	adiw	r30, 0x3f	; 63
    3914:	60 81       	ld	r22, Z
    3916:	71 81       	ldd	r23, Z+1	; 0x01
    3918:	82 81       	ldd	r24, Z+2	; 0x02
    391a:	93 81       	ldd	r25, Z+3	; 0x03
    391c:	20 e0       	ldi	r18, 0x00	; 0
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e8       	ldi	r20, 0x80	; 128
    3922:	5f e3       	ldi	r21, 0x3F	; 63
    3924:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3928:	88 23       	and	r24, r24
    392a:	2c f4       	brge	.+10     	; 0x3936 <login_system+0x3f6>
		__ticks = 1;
    392c:	81 e0       	ldi	r24, 0x01	; 1
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	9e af       	std	Y+62, r25	; 0x3e
    3932:	8d af       	std	Y+61, r24	; 0x3d
    3934:	46 c0       	rjmp	.+140    	; 0x39c2 <login_system+0x482>
	else if (__tmp > 65535)
    3936:	fe 01       	movw	r30, r28
    3938:	ff 96       	adiw	r30, 0x3f	; 63
    393a:	60 81       	ld	r22, Z
    393c:	71 81       	ldd	r23, Z+1	; 0x01
    393e:	82 81       	ldd	r24, Z+2	; 0x02
    3940:	93 81       	ldd	r25, Z+3	; 0x03
    3942:	20 e0       	ldi	r18, 0x00	; 0
    3944:	3f ef       	ldi	r19, 0xFF	; 255
    3946:	4f e7       	ldi	r20, 0x7F	; 127
    3948:	57 e4       	ldi	r21, 0x47	; 71
    394a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    394e:	18 16       	cp	r1, r24
    3950:	64 f5       	brge	.+88     	; 0x39aa <login_system+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3952:	fe 01       	movw	r30, r28
    3954:	ed 5b       	subi	r30, 0xBD	; 189
    3956:	ff 4f       	sbci	r31, 0xFF	; 255
    3958:	60 81       	ld	r22, Z
    395a:	71 81       	ldd	r23, Z+1	; 0x01
    395c:	82 81       	ldd	r24, Z+2	; 0x02
    395e:	93 81       	ldd	r25, Z+3	; 0x03
    3960:	20 e0       	ldi	r18, 0x00	; 0
    3962:	30 e0       	ldi	r19, 0x00	; 0
    3964:	40 e2       	ldi	r20, 0x20	; 32
    3966:	51 e4       	ldi	r21, 0x41	; 65
    3968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    396c:	dc 01       	movw	r26, r24
    396e:	cb 01       	movw	r24, r22
    3970:	bc 01       	movw	r22, r24
    3972:	cd 01       	movw	r24, r26
    3974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3978:	dc 01       	movw	r26, r24
    397a:	cb 01       	movw	r24, r22
    397c:	9e af       	std	Y+62, r25	; 0x3e
    397e:	8d af       	std	Y+61, r24	; 0x3d
    3980:	0f c0       	rjmp	.+30     	; 0x39a0 <login_system+0x460>
    3982:	88 ec       	ldi	r24, 0xC8	; 200
    3984:	90 e0       	ldi	r25, 0x00	; 0
    3986:	9c af       	std	Y+60, r25	; 0x3c
    3988:	8b af       	std	Y+59, r24	; 0x3b
    398a:	8b ad       	ldd	r24, Y+59	; 0x3b
    398c:	9c ad       	ldd	r25, Y+60	; 0x3c
    398e:	01 97       	sbiw	r24, 0x01	; 1
    3990:	f1 f7       	brne	.-4      	; 0x398e <login_system+0x44e>
    3992:	9c af       	std	Y+60, r25	; 0x3c
    3994:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3996:	8d ad       	ldd	r24, Y+61	; 0x3d
    3998:	9e ad       	ldd	r25, Y+62	; 0x3e
    399a:	01 97       	sbiw	r24, 0x01	; 1
    399c:	9e af       	std	Y+62, r25	; 0x3e
    399e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    39a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    39a4:	00 97       	sbiw	r24, 0x00	; 0
    39a6:	69 f7       	brne	.-38     	; 0x3982 <login_system+0x442>
    39a8:	16 c0       	rjmp	.+44     	; 0x39d6 <login_system+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39aa:	fe 01       	movw	r30, r28
    39ac:	ff 96       	adiw	r30, 0x3f	; 63
    39ae:	60 81       	ld	r22, Z
    39b0:	71 81       	ldd	r23, Z+1	; 0x01
    39b2:	82 81       	ldd	r24, Z+2	; 0x02
    39b4:	93 81       	ldd	r25, Z+3	; 0x03
    39b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	9e af       	std	Y+62, r25	; 0x3e
    39c0:	8d af       	std	Y+61, r24	; 0x3d
    39c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    39c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    39c6:	9a af       	std	Y+58, r25	; 0x3a
    39c8:	89 af       	std	Y+57, r24	; 0x39
    39ca:	89 ad       	ldd	r24, Y+57	; 0x39
    39cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <login_system+0x48e>
    39d2:	9a af       	std	Y+58, r25	; 0x3a
    39d4:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(1000);
						if(trials < 2) // display try again for twice only
    39d6:	80 91 58 01 	lds	r24, 0x0158
    39da:	82 30       	cpi	r24, 0x02	; 2
    39dc:	08 f0       	brcs	.+2      	; 0x39e0 <login_system+0x4a0>
    39de:	ea c0       	rjmp	.+468    	; 0x3bb4 <login_system+0x674>
						{
							LCD_voidClearScreen();
    39e0:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    39e4:	80 e0       	ldi	r24, 0x00	; 0
    39e6:	90 e0       	ldi	r25, 0x00	; 0
    39e8:	a0 ea       	ldi	r26, 0xA0	; 160
    39ea:	b1 e4       	ldi	r27, 0x41	; 65
    39ec:	8d ab       	std	Y+53, r24	; 0x35
    39ee:	9e ab       	std	Y+54, r25	; 0x36
    39f0:	af ab       	std	Y+55, r26	; 0x37
    39f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f4:	6d a9       	ldd	r22, Y+53	; 0x35
    39f6:	7e a9       	ldd	r23, Y+54	; 0x36
    39f8:	8f a9       	ldd	r24, Y+55	; 0x37
    39fa:	98 ad       	ldd	r25, Y+56	; 0x38
    39fc:	20 e0       	ldi	r18, 0x00	; 0
    39fe:	30 e0       	ldi	r19, 0x00	; 0
    3a00:	4a ef       	ldi	r20, 0xFA	; 250
    3a02:	54 e4       	ldi	r21, 0x44	; 68
    3a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a08:	dc 01       	movw	r26, r24
    3a0a:	cb 01       	movw	r24, r22
    3a0c:	89 ab       	std	Y+49, r24	; 0x31
    3a0e:	9a ab       	std	Y+50, r25	; 0x32
    3a10:	ab ab       	std	Y+51, r26	; 0x33
    3a12:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3a14:	69 a9       	ldd	r22, Y+49	; 0x31
    3a16:	7a a9       	ldd	r23, Y+50	; 0x32
    3a18:	8b a9       	ldd	r24, Y+51	; 0x33
    3a1a:	9c a9       	ldd	r25, Y+52	; 0x34
    3a1c:	20 e0       	ldi	r18, 0x00	; 0
    3a1e:	30 e0       	ldi	r19, 0x00	; 0
    3a20:	40 e8       	ldi	r20, 0x80	; 128
    3a22:	5f e3       	ldi	r21, 0x3F	; 63
    3a24:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a28:	88 23       	and	r24, r24
    3a2a:	2c f4       	brge	.+10     	; 0x3a36 <login_system+0x4f6>
		__ticks = 1;
    3a2c:	81 e0       	ldi	r24, 0x01	; 1
    3a2e:	90 e0       	ldi	r25, 0x00	; 0
    3a30:	98 ab       	std	Y+48, r25	; 0x30
    3a32:	8f a7       	std	Y+47, r24	; 0x2f
    3a34:	3f c0       	rjmp	.+126    	; 0x3ab4 <login_system+0x574>
	else if (__tmp > 65535)
    3a36:	69 a9       	ldd	r22, Y+49	; 0x31
    3a38:	7a a9       	ldd	r23, Y+50	; 0x32
    3a3a:	8b a9       	ldd	r24, Y+51	; 0x33
    3a3c:	9c a9       	ldd	r25, Y+52	; 0x34
    3a3e:	20 e0       	ldi	r18, 0x00	; 0
    3a40:	3f ef       	ldi	r19, 0xFF	; 255
    3a42:	4f e7       	ldi	r20, 0x7F	; 127
    3a44:	57 e4       	ldi	r21, 0x47	; 71
    3a46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a4a:	18 16       	cp	r1, r24
    3a4c:	4c f5       	brge	.+82     	; 0x3aa0 <login_system+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4e:	6d a9       	ldd	r22, Y+53	; 0x35
    3a50:	7e a9       	ldd	r23, Y+54	; 0x36
    3a52:	8f a9       	ldd	r24, Y+55	; 0x37
    3a54:	98 ad       	ldd	r25, Y+56	; 0x38
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e2       	ldi	r20, 0x20	; 32
    3a5c:	51 e4       	ldi	r21, 0x41	; 65
    3a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a62:	dc 01       	movw	r26, r24
    3a64:	cb 01       	movw	r24, r22
    3a66:	bc 01       	movw	r22, r24
    3a68:	cd 01       	movw	r24, r26
    3a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	98 ab       	std	Y+48, r25	; 0x30
    3a74:	8f a7       	std	Y+47, r24	; 0x2f
    3a76:	0f c0       	rjmp	.+30     	; 0x3a96 <login_system+0x556>
    3a78:	88 ec       	ldi	r24, 0xC8	; 200
    3a7a:	90 e0       	ldi	r25, 0x00	; 0
    3a7c:	9e a7       	std	Y+46, r25	; 0x2e
    3a7e:	8d a7       	std	Y+45, r24	; 0x2d
    3a80:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a82:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a84:	01 97       	sbiw	r24, 0x01	; 1
    3a86:	f1 f7       	brne	.-4      	; 0x3a84 <login_system+0x544>
    3a88:	9e a7       	std	Y+46, r25	; 0x2e
    3a8a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a8e:	98 a9       	ldd	r25, Y+48	; 0x30
    3a90:	01 97       	sbiw	r24, 0x01	; 1
    3a92:	98 ab       	std	Y+48, r25	; 0x30
    3a94:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a96:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a98:	98 a9       	ldd	r25, Y+48	; 0x30
    3a9a:	00 97       	sbiw	r24, 0x00	; 0
    3a9c:	69 f7       	brne	.-38     	; 0x3a78 <login_system+0x538>
    3a9e:	14 c0       	rjmp	.+40     	; 0x3ac8 <login_system+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa0:	69 a9       	ldd	r22, Y+49	; 0x31
    3aa2:	7a a9       	ldd	r23, Y+50	; 0x32
    3aa4:	8b a9       	ldd	r24, Y+51	; 0x33
    3aa6:	9c a9       	ldd	r25, Y+52	; 0x34
    3aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aac:	dc 01       	movw	r26, r24
    3aae:	cb 01       	movw	r24, r22
    3ab0:	98 ab       	std	Y+48, r25	; 0x30
    3ab2:	8f a7       	std	Y+47, r24	; 0x2f
    3ab4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ab6:	98 a9       	ldd	r25, Y+48	; 0x30
    3ab8:	9c a7       	std	Y+44, r25	; 0x2c
    3aba:	8b a7       	std	Y+43, r24	; 0x2b
    3abc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3abe:	9c a5       	ldd	r25, Y+44	; 0x2c
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <login_system+0x580>
    3ac4:	9c a7       	std	Y+44, r25	; 0x2c
    3ac6:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(20);
							LCD_voidWriteString((u8*)"Try Again!");
    3ac8:	8e ee       	ldi	r24, 0xEE	; 238
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
    3ad0:	80 e0       	ldi	r24, 0x00	; 0
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	aa e7       	ldi	r26, 0x7A	; 122
    3ad6:	b4 e4       	ldi	r27, 0x44	; 68
    3ad8:	8f a3       	std	Y+39, r24	; 0x27
    3ada:	98 a7       	std	Y+40, r25	; 0x28
    3adc:	a9 a7       	std	Y+41, r26	; 0x29
    3ade:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ae0:	6f a1       	ldd	r22, Y+39	; 0x27
    3ae2:	78 a5       	ldd	r23, Y+40	; 0x28
    3ae4:	89 a5       	ldd	r24, Y+41	; 0x29
    3ae6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ae8:	20 e0       	ldi	r18, 0x00	; 0
    3aea:	30 e0       	ldi	r19, 0x00	; 0
    3aec:	4a ef       	ldi	r20, 0xFA	; 250
    3aee:	54 e4       	ldi	r21, 0x44	; 68
    3af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3af4:	dc 01       	movw	r26, r24
    3af6:	cb 01       	movw	r24, r22
    3af8:	8b a3       	std	Y+35, r24	; 0x23
    3afa:	9c a3       	std	Y+36, r25	; 0x24
    3afc:	ad a3       	std	Y+37, r26	; 0x25
    3afe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b00:	6b a1       	ldd	r22, Y+35	; 0x23
    3b02:	7c a1       	ldd	r23, Y+36	; 0x24
    3b04:	8d a1       	ldd	r24, Y+37	; 0x25
    3b06:	9e a1       	ldd	r25, Y+38	; 0x26
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e8       	ldi	r20, 0x80	; 128
    3b0e:	5f e3       	ldi	r21, 0x3F	; 63
    3b10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b14:	88 23       	and	r24, r24
    3b16:	2c f4       	brge	.+10     	; 0x3b22 <login_system+0x5e2>
		__ticks = 1;
    3b18:	81 e0       	ldi	r24, 0x01	; 1
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	9a a3       	std	Y+34, r25	; 0x22
    3b1e:	89 a3       	std	Y+33, r24	; 0x21
    3b20:	3f c0       	rjmp	.+126    	; 0x3ba0 <login_system+0x660>
	else if (__tmp > 65535)
    3b22:	6b a1       	ldd	r22, Y+35	; 0x23
    3b24:	7c a1       	ldd	r23, Y+36	; 0x24
    3b26:	8d a1       	ldd	r24, Y+37	; 0x25
    3b28:	9e a1       	ldd	r25, Y+38	; 0x26
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	3f ef       	ldi	r19, 0xFF	; 255
    3b2e:	4f e7       	ldi	r20, 0x7F	; 127
    3b30:	57 e4       	ldi	r21, 0x47	; 71
    3b32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b36:	18 16       	cp	r1, r24
    3b38:	4c f5       	brge	.+82     	; 0x3b8c <login_system+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b3a:	6f a1       	ldd	r22, Y+39	; 0x27
    3b3c:	78 a5       	ldd	r23, Y+40	; 0x28
    3b3e:	89 a5       	ldd	r24, Y+41	; 0x29
    3b40:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	40 e2       	ldi	r20, 0x20	; 32
    3b48:	51 e4       	ldi	r21, 0x41	; 65
    3b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4e:	dc 01       	movw	r26, r24
    3b50:	cb 01       	movw	r24, r22
    3b52:	bc 01       	movw	r22, r24
    3b54:	cd 01       	movw	r24, r26
    3b56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	9a a3       	std	Y+34, r25	; 0x22
    3b60:	89 a3       	std	Y+33, r24	; 0x21
    3b62:	0f c0       	rjmp	.+30     	; 0x3b82 <login_system+0x642>
    3b64:	88 ec       	ldi	r24, 0xC8	; 200
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	98 a3       	std	Y+32, r25	; 0x20
    3b6a:	8f 8f       	std	Y+31, r24	; 0x1f
    3b6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b6e:	98 a1       	ldd	r25, Y+32	; 0x20
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	f1 f7       	brne	.-4      	; 0x3b70 <login_system+0x630>
    3b74:	98 a3       	std	Y+32, r25	; 0x20
    3b76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b78:	89 a1       	ldd	r24, Y+33	; 0x21
    3b7a:	9a a1       	ldd	r25, Y+34	; 0x22
    3b7c:	01 97       	sbiw	r24, 0x01	; 1
    3b7e:	9a a3       	std	Y+34, r25	; 0x22
    3b80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b82:	89 a1       	ldd	r24, Y+33	; 0x21
    3b84:	9a a1       	ldd	r25, Y+34	; 0x22
    3b86:	00 97       	sbiw	r24, 0x00	; 0
    3b88:	69 f7       	brne	.-38     	; 0x3b64 <login_system+0x624>
    3b8a:	14 c0       	rjmp	.+40     	; 0x3bb4 <login_system+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b8e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b90:	8d a1       	ldd	r24, Y+37	; 0x25
    3b92:	9e a1       	ldd	r25, Y+38	; 0x26
    3b94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b98:	dc 01       	movw	r26, r24
    3b9a:	cb 01       	movw	r24, r22
    3b9c:	9a a3       	std	Y+34, r25	; 0x22
    3b9e:	89 a3       	std	Y+33, r24	; 0x21
    3ba0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ba2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ba4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ba6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ba8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3baa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bac:	01 97       	sbiw	r24, 0x01	; 1
    3bae:	f1 f7       	brne	.-4      	; 0x3bac <login_system+0x66c>
    3bb0:	9e 8f       	std	Y+30, r25	; 0x1e
    3bb2:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(1000);
						}
						trials++;
    3bb4:	80 91 58 01 	lds	r24, 0x0158
    3bb8:	8f 5f       	subi	r24, 0xFF	; 255
    3bba:	80 93 58 01 	sts	0x0158, r24
						Local_u8Index = 0;
    3bbe:	10 92 52 01 	sts	0x0152, r1
						ClearBuffer(Local_Au8InputBuffer,5);
    3bc2:	83 e5       	ldi	r24, 0x53	; 83
    3bc4:	91 e0       	ldi	r25, 0x01	; 1
    3bc6:	65 e0       	ldi	r22, 0x05	; 5
    3bc8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <ClearBuffer>
						if(trials <= 2) // For Last trial that will not display try again
    3bcc:	80 91 58 01 	lds	r24, 0x0158
    3bd0:	83 30       	cpi	r24, 0x03	; 3
    3bd2:	08 f0       	brcs	.+2      	; 0x3bd6 <login_system+0x696>
    3bd4:	d4 cc       	rjmp	.-1624   	; 0x357e <login_system+0x3e>
						{
							LCD_voidClearScreen();
    3bd6:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	90 e0       	ldi	r25, 0x00	; 0
    3bde:	a0 ea       	ldi	r26, 0xA0	; 160
    3be0:	b1 e4       	ldi	r27, 0x41	; 65
    3be2:	89 8f       	std	Y+25, r24	; 0x19
    3be4:	9a 8f       	std	Y+26, r25	; 0x1a
    3be6:	ab 8f       	std	Y+27, r26	; 0x1b
    3be8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bea:	69 8d       	ldd	r22, Y+25	; 0x19
    3bec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bf0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bf2:	20 e0       	ldi	r18, 0x00	; 0
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	4a ef       	ldi	r20, 0xFA	; 250
    3bf8:	54 e4       	ldi	r21, 0x44	; 68
    3bfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bfe:	dc 01       	movw	r26, r24
    3c00:	cb 01       	movw	r24, r22
    3c02:	8d 8b       	std	Y+21, r24	; 0x15
    3c04:	9e 8b       	std	Y+22, r25	; 0x16
    3c06:	af 8b       	std	Y+23, r26	; 0x17
    3c08:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c0a:	6d 89       	ldd	r22, Y+21	; 0x15
    3c0c:	7e 89       	ldd	r23, Y+22	; 0x16
    3c0e:	8f 89       	ldd	r24, Y+23	; 0x17
    3c10:	98 8d       	ldd	r25, Y+24	; 0x18
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	40 e8       	ldi	r20, 0x80	; 128
    3c18:	5f e3       	ldi	r21, 0x3F	; 63
    3c1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c1e:	88 23       	and	r24, r24
    3c20:	2c f4       	brge	.+10     	; 0x3c2c <login_system+0x6ec>
		__ticks = 1;
    3c22:	81 e0       	ldi	r24, 0x01	; 1
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	9c 8b       	std	Y+20, r25	; 0x14
    3c28:	8b 8b       	std	Y+19, r24	; 0x13
    3c2a:	3f c0       	rjmp	.+126    	; 0x3caa <login_system+0x76a>
	else if (__tmp > 65535)
    3c2c:	6d 89       	ldd	r22, Y+21	; 0x15
    3c2e:	7e 89       	ldd	r23, Y+22	; 0x16
    3c30:	8f 89       	ldd	r24, Y+23	; 0x17
    3c32:	98 8d       	ldd	r25, Y+24	; 0x18
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	3f ef       	ldi	r19, 0xFF	; 255
    3c38:	4f e7       	ldi	r20, 0x7F	; 127
    3c3a:	57 e4       	ldi	r21, 0x47	; 71
    3c3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c40:	18 16       	cp	r1, r24
    3c42:	4c f5       	brge	.+82     	; 0x3c96 <login_system+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c44:	69 8d       	ldd	r22, Y+25	; 0x19
    3c46:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c4a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	40 e2       	ldi	r20, 0x20	; 32
    3c52:	51 e4       	ldi	r21, 0x41	; 65
    3c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c58:	dc 01       	movw	r26, r24
    3c5a:	cb 01       	movw	r24, r22
    3c5c:	bc 01       	movw	r22, r24
    3c5e:	cd 01       	movw	r24, r26
    3c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	9c 8b       	std	Y+20, r25	; 0x14
    3c6a:	8b 8b       	std	Y+19, r24	; 0x13
    3c6c:	0f c0       	rjmp	.+30     	; 0x3c8c <login_system+0x74c>
    3c6e:	88 ec       	ldi	r24, 0xC8	; 200
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	9a 8b       	std	Y+18, r25	; 0x12
    3c74:	89 8b       	std	Y+17, r24	; 0x11
    3c76:	89 89       	ldd	r24, Y+17	; 0x11
    3c78:	9a 89       	ldd	r25, Y+18	; 0x12
    3c7a:	01 97       	sbiw	r24, 0x01	; 1
    3c7c:	f1 f7       	brne	.-4      	; 0x3c7a <login_system+0x73a>
    3c7e:	9a 8b       	std	Y+18, r25	; 0x12
    3c80:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c82:	8b 89       	ldd	r24, Y+19	; 0x13
    3c84:	9c 89       	ldd	r25, Y+20	; 0x14
    3c86:	01 97       	sbiw	r24, 0x01	; 1
    3c88:	9c 8b       	std	Y+20, r25	; 0x14
    3c8a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c90:	00 97       	sbiw	r24, 0x00	; 0
    3c92:	69 f7       	brne	.-38     	; 0x3c6e <login_system+0x72e>
    3c94:	14 c0       	rjmp	.+40     	; 0x3cbe <login_system+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c96:	6d 89       	ldd	r22, Y+21	; 0x15
    3c98:	7e 89       	ldd	r23, Y+22	; 0x16
    3c9a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c9c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	9c 8b       	std	Y+20, r25	; 0x14
    3ca8:	8b 8b       	std	Y+19, r24	; 0x13
    3caa:	8b 89       	ldd	r24, Y+19	; 0x13
    3cac:	9c 89       	ldd	r25, Y+20	; 0x14
    3cae:	98 8b       	std	Y+16, r25	; 0x10
    3cb0:	8f 87       	std	Y+15, r24	; 0x0f
    3cb2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3cb4:	98 89       	ldd	r25, Y+16	; 0x10
    3cb6:	01 97       	sbiw	r24, 0x01	; 1
    3cb8:	f1 f7       	brne	.-4      	; 0x3cb6 <login_system+0x776>
    3cba:	98 8b       	std	Y+16, r25	; 0x10
    3cbc:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(20);
							LCD_voidWriteString((u8*)"Enter Password: ");
    3cbe:	8b eb       	ldi	r24, 0xBB	; 187
    3cc0:	90 e0       	ldi	r25, 0x00	; 0
    3cc2:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
							LCD_u8GoToXY(LCD_u8_LINE2,0);
    3cc6:	82 e0       	ldi	r24, 0x02	; 2
    3cc8:	60 e0       	ldi	r22, 0x00	; 0
    3cca:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
    3cce:	57 cc       	rjmp	.-1874   	; 0x357e <login_system+0x3e>
						}
					}
				}
				else  // If pressed key is a number or operator
				{
					appenedToBuffer(Local_Au8InputBuffer,Local_u8Key); // Append pressed key to buffer
    3cd0:	fe 01       	movw	r30, r28
    3cd2:	ed 59       	subi	r30, 0x9D	; 157
    3cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd6:	20 81       	ld	r18, Z
    3cd8:	83 e5       	ldi	r24, 0x53	; 83
    3cda:	91 e0       	ldi	r25, 0x01	; 1
    3cdc:	62 2f       	mov	r22, r18
    3cde:	0e 94 ff 19 	call	0x33fe	; 0x33fe <appenedToBuffer>
					LCD_voidSendChar('*'); // Display pressed key on LCD
    3ce2:	8a e2       	ldi	r24, 0x2A	; 42
    3ce4:	0e 94 8c 14 	call	0x2918	; 0x2918 <LCD_voidSendChar>
    3ce8:	4a cc       	rjmp	.-1900   	; 0x357e <login_system+0x3e>
				}
			}
		}
		else if ( trials == 3) // to make sure this won't execute the else before trails run out
    3cea:	80 91 58 01 	lds	r24, 0x0158
    3cee:	83 30       	cpi	r24, 0x03	; 3
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <login_system+0x7b4>
    3cf2:	45 cc       	rjmp	.-1910   	; 0x357e <login_system+0x3e>
		{
			LCD_voidClearScreen();
    3cf4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    3cf8:	80 e0       	ldi	r24, 0x00	; 0
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	a0 ea       	ldi	r26, 0xA0	; 160
    3cfe:	b1 e4       	ldi	r27, 0x41	; 65
    3d00:	8b 87       	std	Y+11, r24	; 0x0b
    3d02:	9c 87       	std	Y+12, r25	; 0x0c
    3d04:	ad 87       	std	Y+13, r26	; 0x0d
    3d06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d08:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d10:	20 e0       	ldi	r18, 0x00	; 0
    3d12:	30 e0       	ldi	r19, 0x00	; 0
    3d14:	4a ef       	ldi	r20, 0xFA	; 250
    3d16:	54 e4       	ldi	r21, 0x44	; 68
    3d18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1c:	dc 01       	movw	r26, r24
    3d1e:	cb 01       	movw	r24, r22
    3d20:	8f 83       	std	Y+7, r24	; 0x07
    3d22:	98 87       	std	Y+8, r25	; 0x08
    3d24:	a9 87       	std	Y+9, r26	; 0x09
    3d26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d28:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2a:	78 85       	ldd	r23, Y+8	; 0x08
    3d2c:	89 85       	ldd	r24, Y+9	; 0x09
    3d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d30:	20 e0       	ldi	r18, 0x00	; 0
    3d32:	30 e0       	ldi	r19, 0x00	; 0
    3d34:	40 e8       	ldi	r20, 0x80	; 128
    3d36:	5f e3       	ldi	r21, 0x3F	; 63
    3d38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d3c:	88 23       	and	r24, r24
    3d3e:	2c f4       	brge	.+10     	; 0x3d4a <login_system+0x80a>
		__ticks = 1;
    3d40:	81 e0       	ldi	r24, 0x01	; 1
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	9e 83       	std	Y+6, r25	; 0x06
    3d46:	8d 83       	std	Y+5, r24	; 0x05
    3d48:	3f c0       	rjmp	.+126    	; 0x3dc8 <login_system+0x888>
	else if (__tmp > 65535)
    3d4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4c:	78 85       	ldd	r23, Y+8	; 0x08
    3d4e:	89 85       	ldd	r24, Y+9	; 0x09
    3d50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	3f ef       	ldi	r19, 0xFF	; 255
    3d56:	4f e7       	ldi	r20, 0x7F	; 127
    3d58:	57 e4       	ldi	r21, 0x47	; 71
    3d5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d5e:	18 16       	cp	r1, r24
    3d60:	4c f5       	brge	.+82     	; 0x3db4 <login_system+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d62:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d64:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d6a:	20 e0       	ldi	r18, 0x00	; 0
    3d6c:	30 e0       	ldi	r19, 0x00	; 0
    3d6e:	40 e2       	ldi	r20, 0x20	; 32
    3d70:	51 e4       	ldi	r21, 0x41	; 65
    3d72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d76:	dc 01       	movw	r26, r24
    3d78:	cb 01       	movw	r24, r22
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	cd 01       	movw	r24, r26
    3d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d82:	dc 01       	movw	r26, r24
    3d84:	cb 01       	movw	r24, r22
    3d86:	9e 83       	std	Y+6, r25	; 0x06
    3d88:	8d 83       	std	Y+5, r24	; 0x05
    3d8a:	0f c0       	rjmp	.+30     	; 0x3daa <login_system+0x86a>
    3d8c:	88 ec       	ldi	r24, 0xC8	; 200
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	9c 83       	std	Y+4, r25	; 0x04
    3d92:	8b 83       	std	Y+3, r24	; 0x03
    3d94:	8b 81       	ldd	r24, Y+3	; 0x03
    3d96:	9c 81       	ldd	r25, Y+4	; 0x04
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	f1 f7       	brne	.-4      	; 0x3d98 <login_system+0x858>
    3d9c:	9c 83       	std	Y+4, r25	; 0x04
    3d9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da0:	8d 81       	ldd	r24, Y+5	; 0x05
    3da2:	9e 81       	ldd	r25, Y+6	; 0x06
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	9e 83       	std	Y+6, r25	; 0x06
    3da8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3daa:	8d 81       	ldd	r24, Y+5	; 0x05
    3dac:	9e 81       	ldd	r25, Y+6	; 0x06
    3dae:	00 97       	sbiw	r24, 0x00	; 0
    3db0:	69 f7       	brne	.-38     	; 0x3d8c <login_system+0x84c>
    3db2:	14 c0       	rjmp	.+40     	; 0x3ddc <login_system+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db4:	6f 81       	ldd	r22, Y+7	; 0x07
    3db6:	78 85       	ldd	r23, Y+8	; 0x08
    3db8:	89 85       	ldd	r24, Y+9	; 0x09
    3dba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	9e 83       	std	Y+6, r25	; 0x06
    3dc6:	8d 83       	std	Y+5, r24	; 0x05
    3dc8:	8d 81       	ldd	r24, Y+5	; 0x05
    3dca:	9e 81       	ldd	r25, Y+6	; 0x06
    3dcc:	9a 83       	std	Y+2, r25	; 0x02
    3dce:	89 83       	std	Y+1, r24	; 0x01
    3dd0:	89 81       	ldd	r24, Y+1	; 0x01
    3dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd4:	01 97       	sbiw	r24, 0x01	; 1
    3dd6:	f1 f7       	brne	.-4      	; 0x3dd4 <login_system+0x894>
    3dd8:	9a 83       	std	Y+2, r25	; 0x02
    3dda:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			LCD_voidWriteString((u8*)"Failed Login ");
    3ddc:	89 ef       	ldi	r24, 0xF9	; 249
    3dde:	90 e0       	ldi	r25, 0x00	; 0
    3de0:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
			*flag = 0;
    3de4:	fe 01       	movw	r30, r28
    3de6:	e9 59       	subi	r30, 0x99	; 153
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	01 90       	ld	r0, Z+
    3dec:	f0 81       	ld	r31, Z
    3dee:	e0 2d       	mov	r30, r0
    3df0:	10 82       	st	Z, r1
			break;
		}
	}
}
    3df2:	c8 59       	subi	r28, 0x98	; 152
    3df4:	df 4f       	sbci	r29, 0xFF	; 255
    3df6:	0f b6       	in	r0, 0x3f	; 63
    3df8:	f8 94       	cli
    3dfa:	de bf       	out	0x3e, r29	; 62
    3dfc:	0f be       	out	0x3f, r0	; 63
    3dfe:	cd bf       	out	0x3d, r28	; 61
    3e00:	cf 91       	pop	r28
    3e02:	df 91       	pop	r29
    3e04:	1f 91       	pop	r17
    3e06:	0f 91       	pop	r16
    3e08:	08 95       	ret

00003e0a <main>:
#include "Login_System.h"
#include "H_Bridge.h"
#include "Dashboard.h"

int main(void)
{
    3e0a:	0f 93       	push	r16
    3e0c:	1f 93       	push	r17
    3e0e:	df 93       	push	r29
    3e10:	cf 93       	push	r28
    3e12:	cd b7       	in	r28, 0x3d	; 61
    3e14:	de b7       	in	r29, 0x3e	; 62
    3e16:	cf 55       	subi	r28, 0x5F	; 95
    3e18:	d0 40       	sbci	r29, 0x00	; 0
    3e1a:	0f b6       	in	r0, 0x3f	; 63
    3e1c:	f8 94       	cli
    3e1e:	de bf       	out	0x3e, r29	; 62
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	cd bf       	out	0x3d, r28	; 61
	u8 const password[] = "1234";
    3e24:	ce 01       	movw	r24, r28
    3e26:	8b 5a       	subi	r24, 0xAB	; 171
    3e28:	9f 4f       	sbci	r25, 0xFF	; 255
    3e2a:	6d 96       	adiw	r28, 0x1d	; 29
    3e2c:	9f af       	std	Y+63, r25	; 0x3f
    3e2e:	8e af       	std	Y+62, r24	; 0x3e
    3e30:	6d 97       	sbiw	r28, 0x1d	; 29
    3e32:	8c e2       	ldi	r24, 0x2C	; 44
    3e34:	91 e0       	ldi	r25, 0x01	; 1
    3e36:	6f 96       	adiw	r28, 0x1f	; 31
    3e38:	9f af       	std	Y+63, r25	; 0x3f
    3e3a:	8e af       	std	Y+62, r24	; 0x3e
    3e3c:	6f 97       	sbiw	r28, 0x1f	; 31
    3e3e:	95 e0       	ldi	r25, 0x05	; 5
    3e40:	a0 96       	adiw	r28, 0x20	; 32
    3e42:	9f af       	std	Y+63, r25	; 0x3f
    3e44:	a0 97       	sbiw	r28, 0x20	; 32
    3e46:	6f 96       	adiw	r28, 0x1f	; 31
    3e48:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e4a:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e4c:	6f 97       	sbiw	r28, 0x1f	; 31
    3e4e:	00 80       	ld	r0, Z
    3e50:	6f 96       	adiw	r28, 0x1f	; 31
    3e52:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e54:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e56:	6f 97       	sbiw	r28, 0x1f	; 31
    3e58:	01 96       	adiw	r24, 0x01	; 1
    3e5a:	6f 96       	adiw	r28, 0x1f	; 31
    3e5c:	9f af       	std	Y+63, r25	; 0x3f
    3e5e:	8e af       	std	Y+62, r24	; 0x3e
    3e60:	6f 97       	sbiw	r28, 0x1f	; 31
    3e62:	6d 96       	adiw	r28, 0x1d	; 29
    3e64:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e66:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e68:	6d 97       	sbiw	r28, 0x1d	; 29
    3e6a:	00 82       	st	Z, r0
    3e6c:	6d 96       	adiw	r28, 0x1d	; 29
    3e6e:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e70:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e72:	6d 97       	sbiw	r28, 0x1d	; 29
    3e74:	01 96       	adiw	r24, 0x01	; 1
    3e76:	6d 96       	adiw	r28, 0x1d	; 29
    3e78:	9f af       	std	Y+63, r25	; 0x3f
    3e7a:	8e af       	std	Y+62, r24	; 0x3e
    3e7c:	6d 97       	sbiw	r28, 0x1d	; 29
    3e7e:	a0 96       	adiw	r28, 0x20	; 32
    3e80:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e82:	a0 97       	sbiw	r28, 0x20	; 32
    3e84:	91 50       	subi	r25, 0x01	; 1
    3e86:	a0 96       	adiw	r28, 0x20	; 32
    3e88:	9f af       	std	Y+63, r25	; 0x3f
    3e8a:	a0 97       	sbiw	r28, 0x20	; 32
    3e8c:	a0 96       	adiw	r28, 0x20	; 32
    3e8e:	ef ad       	ldd	r30, Y+63	; 0x3f
    3e90:	a0 97       	sbiw	r28, 0x20	; 32
    3e92:	ee 23       	and	r30, r30
    3e94:	c1 f6       	brne	.-80     	; 0x3e46 <main+0x3c>
	u8 flag;//To check login correct or wrong
	DIO_voidInit();
    3e96:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	LCD_voidInit();
    3e9a:	0e 94 21 10 	call	0x2042	; 0x2042 <LCD_voidInit>
	while(1)
	{
		login_system(password,&flag);
    3e9e:	ce 01       	movw	r24, r28
    3ea0:	8b 5a       	subi	r24, 0xAB	; 171
    3ea2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea4:	9e 01       	movw	r18, r28
    3ea6:	26 5a       	subi	r18, 0xA6	; 166
    3ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    3eaa:	b9 01       	movw	r22, r18
    3eac:	0e 94 a0 1a 	call	0x3540	; 0x3540 <login_system>
		if(flag)
    3eb0:	fe 01       	movw	r30, r28
    3eb2:	e6 5a       	subi	r30, 0xA6	; 166
    3eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb6:	80 81       	ld	r24, Z
    3eb8:	88 23       	and	r24, r24
    3eba:	09 f4       	brne	.+2      	; 0x3ebe <main+0xb4>
    3ebc:	bb c1       	rjmp	.+886    	; 0x4234 <main+0x42a>
    3ebe:	fe 01       	movw	r30, r28
    3ec0:	ef 5a       	subi	r30, 0xAF	; 175
    3ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec4:	80 e0       	ldi	r24, 0x00	; 0
    3ec6:	90 e0       	ldi	r25, 0x00	; 0
    3ec8:	aa e7       	ldi	r26, 0x7A	; 122
    3eca:	b4 e4       	ldi	r27, 0x44	; 68
    3ecc:	80 83       	st	Z, r24
    3ece:	91 83       	std	Z+1, r25	; 0x01
    3ed0:	a2 83       	std	Z+2, r26	; 0x02
    3ed2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ed4:	8e 01       	movw	r16, r28
    3ed6:	03 5b       	subi	r16, 0xB3	; 179
    3ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eda:	fe 01       	movw	r30, r28
    3edc:	ef 5a       	subi	r30, 0xAF	; 175
    3ede:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee0:	60 81       	ld	r22, Z
    3ee2:	71 81       	ldd	r23, Z+1	; 0x01
    3ee4:	82 81       	ldd	r24, Z+2	; 0x02
    3ee6:	93 81       	ldd	r25, Z+3	; 0x03
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	4a ef       	ldi	r20, 0xFA	; 250
    3eee:	54 e4       	ldi	r21, 0x44	; 68
    3ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ef4:	dc 01       	movw	r26, r24
    3ef6:	cb 01       	movw	r24, r22
    3ef8:	f8 01       	movw	r30, r16
    3efa:	80 83       	st	Z, r24
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	a2 83       	std	Z+2, r26	; 0x02
    3f00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f02:	fe 01       	movw	r30, r28
    3f04:	e3 5b       	subi	r30, 0xB3	; 179
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	60 81       	ld	r22, Z
    3f0a:	71 81       	ldd	r23, Z+1	; 0x01
    3f0c:	82 81       	ldd	r24, Z+2	; 0x02
    3f0e:	93 81       	ldd	r25, Z+3	; 0x03
    3f10:	20 e0       	ldi	r18, 0x00	; 0
    3f12:	30 e0       	ldi	r19, 0x00	; 0
    3f14:	40 e8       	ldi	r20, 0x80	; 128
    3f16:	5f e3       	ldi	r21, 0x3F	; 63
    3f18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f1c:	88 23       	and	r24, r24
    3f1e:	44 f4       	brge	.+16     	; 0x3f30 <main+0x126>
		__ticks = 1;
    3f20:	fe 01       	movw	r30, r28
    3f22:	e5 5b       	subi	r30, 0xB5	; 181
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	90 e0       	ldi	r25, 0x00	; 0
    3f2a:	91 83       	std	Z+1, r25	; 0x01
    3f2c:	80 83       	st	Z, r24
    3f2e:	64 c0       	rjmp	.+200    	; 0x3ff8 <main+0x1ee>
	else if (__tmp > 65535)
    3f30:	fe 01       	movw	r30, r28
    3f32:	e3 5b       	subi	r30, 0xB3	; 179
    3f34:	ff 4f       	sbci	r31, 0xFF	; 255
    3f36:	60 81       	ld	r22, Z
    3f38:	71 81       	ldd	r23, Z+1	; 0x01
    3f3a:	82 81       	ldd	r24, Z+2	; 0x02
    3f3c:	93 81       	ldd	r25, Z+3	; 0x03
    3f3e:	20 e0       	ldi	r18, 0x00	; 0
    3f40:	3f ef       	ldi	r19, 0xFF	; 255
    3f42:	4f e7       	ldi	r20, 0x7F	; 127
    3f44:	57 e4       	ldi	r21, 0x47	; 71
    3f46:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f4a:	18 16       	cp	r1, r24
    3f4c:	0c f0       	brlt	.+2      	; 0x3f50 <main+0x146>
    3f4e:	43 c0       	rjmp	.+134    	; 0x3fd6 <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f50:	fe 01       	movw	r30, r28
    3f52:	ef 5a       	subi	r30, 0xAF	; 175
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	60 81       	ld	r22, Z
    3f58:	71 81       	ldd	r23, Z+1	; 0x01
    3f5a:	82 81       	ldd	r24, Z+2	; 0x02
    3f5c:	93 81       	ldd	r25, Z+3	; 0x03
    3f5e:	20 e0       	ldi	r18, 0x00	; 0
    3f60:	30 e0       	ldi	r19, 0x00	; 0
    3f62:	40 e2       	ldi	r20, 0x20	; 32
    3f64:	51 e4       	ldi	r21, 0x41	; 65
    3f66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	8e 01       	movw	r16, r28
    3f70:	05 5b       	subi	r16, 0xB5	; 181
    3f72:	1f 4f       	sbci	r17, 0xFF	; 255
    3f74:	bc 01       	movw	r22, r24
    3f76:	cd 01       	movw	r24, r26
    3f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f7c:	dc 01       	movw	r26, r24
    3f7e:	cb 01       	movw	r24, r22
    3f80:	f8 01       	movw	r30, r16
    3f82:	91 83       	std	Z+1, r25	; 0x01
    3f84:	80 83       	st	Z, r24
    3f86:	1f c0       	rjmp	.+62     	; 0x3fc6 <main+0x1bc>
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e7 5b       	subi	r30, 0xB7	; 183
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	88 ec       	ldi	r24, 0xC8	; 200
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	91 83       	std	Z+1, r25	; 0x01
    3f94:	80 83       	st	Z, r24
    3f96:	fe 01       	movw	r30, r28
    3f98:	e7 5b       	subi	r30, 0xB7	; 183
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	80 81       	ld	r24, Z
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	01 97       	sbiw	r24, 0x01	; 1
    3fa2:	f1 f7       	brne	.-4      	; 0x3fa0 <main+0x196>
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	e7 5b       	subi	r30, 0xB7	; 183
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	91 83       	std	Z+1, r25	; 0x01
    3fac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fae:	de 01       	movw	r26, r28
    3fb0:	a5 5b       	subi	r26, 0xB5	; 181
    3fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	e5 5b       	subi	r30, 0xB5	; 181
    3fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fba:	80 81       	ld	r24, Z
    3fbc:	91 81       	ldd	r25, Z+1	; 0x01
    3fbe:	01 97       	sbiw	r24, 0x01	; 1
    3fc0:	11 96       	adiw	r26, 0x01	; 1
    3fc2:	9c 93       	st	X, r25
    3fc4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fc6:	fe 01       	movw	r30, r28
    3fc8:	e5 5b       	subi	r30, 0xB5	; 181
    3fca:	ff 4f       	sbci	r31, 0xFF	; 255
    3fcc:	80 81       	ld	r24, Z
    3fce:	91 81       	ldd	r25, Z+1	; 0x01
    3fd0:	00 97       	sbiw	r24, 0x00	; 0
    3fd2:	d1 f6       	brne	.-76     	; 0x3f88 <main+0x17e>
    3fd4:	27 c0       	rjmp	.+78     	; 0x4024 <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fd6:	8e 01       	movw	r16, r28
    3fd8:	05 5b       	subi	r16, 0xB5	; 181
    3fda:	1f 4f       	sbci	r17, 0xFF	; 255
    3fdc:	fe 01       	movw	r30, r28
    3fde:	e3 5b       	subi	r30, 0xB3	; 179
    3fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe2:	60 81       	ld	r22, Z
    3fe4:	71 81       	ldd	r23, Z+1	; 0x01
    3fe6:	82 81       	ldd	r24, Z+2	; 0x02
    3fe8:	93 81       	ldd	r25, Z+3	; 0x03
    3fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fee:	dc 01       	movw	r26, r24
    3ff0:	cb 01       	movw	r24, r22
    3ff2:	f8 01       	movw	r30, r16
    3ff4:	91 83       	std	Z+1, r25	; 0x01
    3ff6:	80 83       	st	Z, r24
    3ff8:	de 01       	movw	r26, r28
    3ffa:	a9 5b       	subi	r26, 0xB9	; 185
    3ffc:	bf 4f       	sbci	r27, 0xFF	; 255
    3ffe:	fe 01       	movw	r30, r28
    4000:	e5 5b       	subi	r30, 0xB5	; 181
    4002:	ff 4f       	sbci	r31, 0xFF	; 255
    4004:	80 81       	ld	r24, Z
    4006:	91 81       	ldd	r25, Z+1	; 0x01
    4008:	8d 93       	st	X+, r24
    400a:	9c 93       	st	X, r25
    400c:	fe 01       	movw	r30, r28
    400e:	e9 5b       	subi	r30, 0xB9	; 185
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	80 81       	ld	r24, Z
    4014:	91 81       	ldd	r25, Z+1	; 0x01
    4016:	01 97       	sbiw	r24, 0x01	; 1
    4018:	f1 f7       	brne	.-4      	; 0x4016 <main+0x20c>
    401a:	fe 01       	movw	r30, r28
    401c:	e9 5b       	subi	r30, 0xB9	; 185
    401e:	ff 4f       	sbci	r31, 0xFF	; 255
    4020:	91 83       	std	Z+1, r25	; 0x01
    4022:	80 83       	st	Z, r24
		{
			_delay_ms(1000);
			LCD_voidClearScreen();
    4024:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    4028:	fe 01       	movw	r30, r28
    402a:	ed 5b       	subi	r30, 0xBD	; 189
    402c:	ff 4f       	sbci	r31, 0xFF	; 255
    402e:	80 e0       	ldi	r24, 0x00	; 0
    4030:	90 e0       	ldi	r25, 0x00	; 0
    4032:	a0 ea       	ldi	r26, 0xA0	; 160
    4034:	b1 e4       	ldi	r27, 0x41	; 65
    4036:	80 83       	st	Z, r24
    4038:	91 83       	std	Z+1, r25	; 0x01
    403a:	a2 83       	std	Z+2, r26	; 0x02
    403c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    403e:	8e 01       	movw	r16, r28
    4040:	01 5c       	subi	r16, 0xC1	; 193
    4042:	1f 4f       	sbci	r17, 0xFF	; 255
    4044:	fe 01       	movw	r30, r28
    4046:	ed 5b       	subi	r30, 0xBD	; 189
    4048:	ff 4f       	sbci	r31, 0xFF	; 255
    404a:	60 81       	ld	r22, Z
    404c:	71 81       	ldd	r23, Z+1	; 0x01
    404e:	82 81       	ldd	r24, Z+2	; 0x02
    4050:	93 81       	ldd	r25, Z+3	; 0x03
    4052:	20 e0       	ldi	r18, 0x00	; 0
    4054:	30 e0       	ldi	r19, 0x00	; 0
    4056:	4a ef       	ldi	r20, 0xFA	; 250
    4058:	54 e4       	ldi	r21, 0x44	; 68
    405a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	f8 01       	movw	r30, r16
    4064:	80 83       	st	Z, r24
    4066:	91 83       	std	Z+1, r25	; 0x01
    4068:	a2 83       	std	Z+2, r26	; 0x02
    406a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    406c:	fe 01       	movw	r30, r28
    406e:	ff 96       	adiw	r30, 0x3f	; 63
    4070:	60 81       	ld	r22, Z
    4072:	71 81       	ldd	r23, Z+1	; 0x01
    4074:	82 81       	ldd	r24, Z+2	; 0x02
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	20 e0       	ldi	r18, 0x00	; 0
    407a:	30 e0       	ldi	r19, 0x00	; 0
    407c:	40 e8       	ldi	r20, 0x80	; 128
    407e:	5f e3       	ldi	r21, 0x3F	; 63
    4080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4084:	88 23       	and	r24, r24
    4086:	2c f4       	brge	.+10     	; 0x4092 <main+0x288>
		__ticks = 1;
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	9e af       	std	Y+62, r25	; 0x3e
    408e:	8d af       	std	Y+61, r24	; 0x3d
    4090:	46 c0       	rjmp	.+140    	; 0x411e <main+0x314>
	else if (__tmp > 65535)
    4092:	fe 01       	movw	r30, r28
    4094:	ff 96       	adiw	r30, 0x3f	; 63
    4096:	60 81       	ld	r22, Z
    4098:	71 81       	ldd	r23, Z+1	; 0x01
    409a:	82 81       	ldd	r24, Z+2	; 0x02
    409c:	93 81       	ldd	r25, Z+3	; 0x03
    409e:	20 e0       	ldi	r18, 0x00	; 0
    40a0:	3f ef       	ldi	r19, 0xFF	; 255
    40a2:	4f e7       	ldi	r20, 0x7F	; 127
    40a4:	57 e4       	ldi	r21, 0x47	; 71
    40a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    40aa:	18 16       	cp	r1, r24
    40ac:	64 f5       	brge	.+88     	; 0x4106 <main+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40ae:	fe 01       	movw	r30, r28
    40b0:	ed 5b       	subi	r30, 0xBD	; 189
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	60 81       	ld	r22, Z
    40b6:	71 81       	ldd	r23, Z+1	; 0x01
    40b8:	82 81       	ldd	r24, Z+2	; 0x02
    40ba:	93 81       	ldd	r25, Z+3	; 0x03
    40bc:	20 e0       	ldi	r18, 0x00	; 0
    40be:	30 e0       	ldi	r19, 0x00	; 0
    40c0:	40 e2       	ldi	r20, 0x20	; 32
    40c2:	51 e4       	ldi	r21, 0x41	; 65
    40c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c8:	dc 01       	movw	r26, r24
    40ca:	cb 01       	movw	r24, r22
    40cc:	bc 01       	movw	r22, r24
    40ce:	cd 01       	movw	r24, r26
    40d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d4:	dc 01       	movw	r26, r24
    40d6:	cb 01       	movw	r24, r22
    40d8:	9e af       	std	Y+62, r25	; 0x3e
    40da:	8d af       	std	Y+61, r24	; 0x3d
    40dc:	0f c0       	rjmp	.+30     	; 0x40fc <main+0x2f2>
    40de:	88 ec       	ldi	r24, 0xC8	; 200
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	9c af       	std	Y+60, r25	; 0x3c
    40e4:	8b af       	std	Y+59, r24	; 0x3b
    40e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    40e8:	9c ad       	ldd	r25, Y+60	; 0x3c
    40ea:	01 97       	sbiw	r24, 0x01	; 1
    40ec:	f1 f7       	brne	.-4      	; 0x40ea <main+0x2e0>
    40ee:	9c af       	std	Y+60, r25	; 0x3c
    40f0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    40f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    40f6:	01 97       	sbiw	r24, 0x01	; 1
    40f8:	9e af       	std	Y+62, r25	; 0x3e
    40fa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    40fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    4100:	00 97       	sbiw	r24, 0x00	; 0
    4102:	69 f7       	brne	.-38     	; 0x40de <main+0x2d4>
    4104:	16 c0       	rjmp	.+44     	; 0x4132 <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4106:	fe 01       	movw	r30, r28
    4108:	ff 96       	adiw	r30, 0x3f	; 63
    410a:	60 81       	ld	r22, Z
    410c:	71 81       	ldd	r23, Z+1	; 0x01
    410e:	82 81       	ldd	r24, Z+2	; 0x02
    4110:	93 81       	ldd	r25, Z+3	; 0x03
    4112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4116:	dc 01       	movw	r26, r24
    4118:	cb 01       	movw	r24, r22
    411a:	9e af       	std	Y+62, r25	; 0x3e
    411c:	8d af       	std	Y+61, r24	; 0x3d
    411e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4120:	9e ad       	ldd	r25, Y+62	; 0x3e
    4122:	9a af       	std	Y+58, r25	; 0x3a
    4124:	89 af       	std	Y+57, r24	; 0x39
    4126:	89 ad       	ldd	r24, Y+57	; 0x39
    4128:	9a ad       	ldd	r25, Y+58	; 0x3a
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	f1 f7       	brne	.-4      	; 0x412a <main+0x320>
    412e:	9a af       	std	Y+58, r25	; 0x3a
    4130:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(20);
			LCD_voidWriteString((u8*)"Welcome To Motor");
    4132:	87 e0       	ldi	r24, 0x07	; 7
    4134:	91 e0       	ldi	r25, 0x01	; 1
    4136:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
			LCD_u8GoToXY(LCD_u8_LINE2,0);
    413a:	82 e0       	ldi	r24, 0x02	; 2
    413c:	60 e0       	ldi	r22, 0x00	; 0
    413e:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <LCD_u8GoToXY>
			LCD_voidWriteString((u8*)"Dashboard");
    4142:	88 e1       	ldi	r24, 0x18	; 24
    4144:	91 e0       	ldi	r25, 0x01	; 1
    4146:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	90 e8       	ldi	r25, 0x80	; 128
    414e:	ab e3       	ldi	r26, 0x3B	; 59
    4150:	b5 e4       	ldi	r27, 0x45	; 69
    4152:	8d ab       	std	Y+53, r24	; 0x35
    4154:	9e ab       	std	Y+54, r25	; 0x36
    4156:	af ab       	std	Y+55, r26	; 0x37
    4158:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    415a:	6d a9       	ldd	r22, Y+53	; 0x35
    415c:	7e a9       	ldd	r23, Y+54	; 0x36
    415e:	8f a9       	ldd	r24, Y+55	; 0x37
    4160:	98 ad       	ldd	r25, Y+56	; 0x38
    4162:	20 e0       	ldi	r18, 0x00	; 0
    4164:	30 e0       	ldi	r19, 0x00	; 0
    4166:	4a ef       	ldi	r20, 0xFA	; 250
    4168:	54 e4       	ldi	r21, 0x44	; 68
    416a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    416e:	dc 01       	movw	r26, r24
    4170:	cb 01       	movw	r24, r22
    4172:	89 ab       	std	Y+49, r24	; 0x31
    4174:	9a ab       	std	Y+50, r25	; 0x32
    4176:	ab ab       	std	Y+51, r26	; 0x33
    4178:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    417a:	69 a9       	ldd	r22, Y+49	; 0x31
    417c:	7a a9       	ldd	r23, Y+50	; 0x32
    417e:	8b a9       	ldd	r24, Y+51	; 0x33
    4180:	9c a9       	ldd	r25, Y+52	; 0x34
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	40 e8       	ldi	r20, 0x80	; 128
    4188:	5f e3       	ldi	r21, 0x3F	; 63
    418a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    418e:	88 23       	and	r24, r24
    4190:	2c f4       	brge	.+10     	; 0x419c <main+0x392>
		__ticks = 1;
    4192:	81 e0       	ldi	r24, 0x01	; 1
    4194:	90 e0       	ldi	r25, 0x00	; 0
    4196:	98 ab       	std	Y+48, r25	; 0x30
    4198:	8f a7       	std	Y+47, r24	; 0x2f
    419a:	3f c0       	rjmp	.+126    	; 0x421a <main+0x410>
	else if (__tmp > 65535)
    419c:	69 a9       	ldd	r22, Y+49	; 0x31
    419e:	7a a9       	ldd	r23, Y+50	; 0x32
    41a0:	8b a9       	ldd	r24, Y+51	; 0x33
    41a2:	9c a9       	ldd	r25, Y+52	; 0x34
    41a4:	20 e0       	ldi	r18, 0x00	; 0
    41a6:	3f ef       	ldi	r19, 0xFF	; 255
    41a8:	4f e7       	ldi	r20, 0x7F	; 127
    41aa:	57 e4       	ldi	r21, 0x47	; 71
    41ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41b0:	18 16       	cp	r1, r24
    41b2:	4c f5       	brge	.+82     	; 0x4206 <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41b4:	6d a9       	ldd	r22, Y+53	; 0x35
    41b6:	7e a9       	ldd	r23, Y+54	; 0x36
    41b8:	8f a9       	ldd	r24, Y+55	; 0x37
    41ba:	98 ad       	ldd	r25, Y+56	; 0x38
    41bc:	20 e0       	ldi	r18, 0x00	; 0
    41be:	30 e0       	ldi	r19, 0x00	; 0
    41c0:	40 e2       	ldi	r20, 0x20	; 32
    41c2:	51 e4       	ldi	r21, 0x41	; 65
    41c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	bc 01       	movw	r22, r24
    41ce:	cd 01       	movw	r24, r26
    41d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41d4:	dc 01       	movw	r26, r24
    41d6:	cb 01       	movw	r24, r22
    41d8:	98 ab       	std	Y+48, r25	; 0x30
    41da:	8f a7       	std	Y+47, r24	; 0x2f
    41dc:	0f c0       	rjmp	.+30     	; 0x41fc <main+0x3f2>
    41de:	88 ec       	ldi	r24, 0xC8	; 200
    41e0:	90 e0       	ldi	r25, 0x00	; 0
    41e2:	9e a7       	std	Y+46, r25	; 0x2e
    41e4:	8d a7       	std	Y+45, r24	; 0x2d
    41e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    41e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    41ea:	01 97       	sbiw	r24, 0x01	; 1
    41ec:	f1 f7       	brne	.-4      	; 0x41ea <main+0x3e0>
    41ee:	9e a7       	std	Y+46, r25	; 0x2e
    41f0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    41f4:	98 a9       	ldd	r25, Y+48	; 0x30
    41f6:	01 97       	sbiw	r24, 0x01	; 1
    41f8:	98 ab       	std	Y+48, r25	; 0x30
    41fa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    41fe:	98 a9       	ldd	r25, Y+48	; 0x30
    4200:	00 97       	sbiw	r24, 0x00	; 0
    4202:	69 f7       	brne	.-38     	; 0x41de <main+0x3d4>
    4204:	14 c0       	rjmp	.+40     	; 0x422e <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4206:	69 a9       	ldd	r22, Y+49	; 0x31
    4208:	7a a9       	ldd	r23, Y+50	; 0x32
    420a:	8b a9       	ldd	r24, Y+51	; 0x33
    420c:	9c a9       	ldd	r25, Y+52	; 0x34
    420e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4212:	dc 01       	movw	r26, r24
    4214:	cb 01       	movw	r24, r22
    4216:	98 ab       	std	Y+48, r25	; 0x30
    4218:	8f a7       	std	Y+47, r24	; 0x2f
    421a:	8f a5       	ldd	r24, Y+47	; 0x2f
    421c:	98 a9       	ldd	r25, Y+48	; 0x30
    421e:	9c a7       	std	Y+44, r25	; 0x2c
    4220:	8b a7       	std	Y+43, r24	; 0x2b
    4222:	8b a5       	ldd	r24, Y+43	; 0x2b
    4224:	9c a5       	ldd	r25, Y+44	; 0x2c
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <main+0x41c>
    422a:	9c a7       	std	Y+44, r25	; 0x2c
    422c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(3000);
			Dashboard_FrameOne();
    422e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <Dashboard_FrameOne>
    4232:	ff cf       	rjmp	.-2      	; 0x4232 <main+0x428>
			while(1)
			{

			}
    4234:	80 e0       	ldi	r24, 0x00	; 0
    4236:	90 e0       	ldi	r25, 0x00	; 0
    4238:	aa e7       	ldi	r26, 0x7A	; 122
    423a:	b4 e4       	ldi	r27, 0x44	; 68
    423c:	8f a3       	std	Y+39, r24	; 0x27
    423e:	98 a7       	std	Y+40, r25	; 0x28
    4240:	a9 a7       	std	Y+41, r26	; 0x29
    4242:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4244:	6f a1       	ldd	r22, Y+39	; 0x27
    4246:	78 a5       	ldd	r23, Y+40	; 0x28
    4248:	89 a5       	ldd	r24, Y+41	; 0x29
    424a:	9a a5       	ldd	r25, Y+42	; 0x2a
    424c:	20 e0       	ldi	r18, 0x00	; 0
    424e:	30 e0       	ldi	r19, 0x00	; 0
    4250:	4a ef       	ldi	r20, 0xFA	; 250
    4252:	54 e4       	ldi	r21, 0x44	; 68
    4254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	8b a3       	std	Y+35, r24	; 0x23
    425e:	9c a3       	std	Y+36, r25	; 0x24
    4260:	ad a3       	std	Y+37, r26	; 0x25
    4262:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4264:	6b a1       	ldd	r22, Y+35	; 0x23
    4266:	7c a1       	ldd	r23, Y+36	; 0x24
    4268:	8d a1       	ldd	r24, Y+37	; 0x25
    426a:	9e a1       	ldd	r25, Y+38	; 0x26
    426c:	20 e0       	ldi	r18, 0x00	; 0
    426e:	30 e0       	ldi	r19, 0x00	; 0
    4270:	40 e8       	ldi	r20, 0x80	; 128
    4272:	5f e3       	ldi	r21, 0x3F	; 63
    4274:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4278:	88 23       	and	r24, r24
    427a:	2c f4       	brge	.+10     	; 0x4286 <main+0x47c>
		__ticks = 1;
    427c:	81 e0       	ldi	r24, 0x01	; 1
    427e:	90 e0       	ldi	r25, 0x00	; 0
    4280:	9a a3       	std	Y+34, r25	; 0x22
    4282:	89 a3       	std	Y+33, r24	; 0x21
    4284:	3f c0       	rjmp	.+126    	; 0x4304 <main+0x4fa>
	else if (__tmp > 65535)
    4286:	6b a1       	ldd	r22, Y+35	; 0x23
    4288:	7c a1       	ldd	r23, Y+36	; 0x24
    428a:	8d a1       	ldd	r24, Y+37	; 0x25
    428c:	9e a1       	ldd	r25, Y+38	; 0x26
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	3f ef       	ldi	r19, 0xFF	; 255
    4292:	4f e7       	ldi	r20, 0x7F	; 127
    4294:	57 e4       	ldi	r21, 0x47	; 71
    4296:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    429a:	18 16       	cp	r1, r24
    429c:	4c f5       	brge	.+82     	; 0x42f0 <main+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    429e:	6f a1       	ldd	r22, Y+39	; 0x27
    42a0:	78 a5       	ldd	r23, Y+40	; 0x28
    42a2:	89 a5       	ldd	r24, Y+41	; 0x29
    42a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	40 e2       	ldi	r20, 0x20	; 32
    42ac:	51 e4       	ldi	r21, 0x41	; 65
    42ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	bc 01       	movw	r22, r24
    42b8:	cd 01       	movw	r24, r26
    42ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42be:	dc 01       	movw	r26, r24
    42c0:	cb 01       	movw	r24, r22
    42c2:	9a a3       	std	Y+34, r25	; 0x22
    42c4:	89 a3       	std	Y+33, r24	; 0x21
    42c6:	0f c0       	rjmp	.+30     	; 0x42e6 <main+0x4dc>
    42c8:	88 ec       	ldi	r24, 0xC8	; 200
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	98 a3       	std	Y+32, r25	; 0x20
    42ce:	8f 8f       	std	Y+31, r24	; 0x1f
    42d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42d2:	98 a1       	ldd	r25, Y+32	; 0x20
    42d4:	01 97       	sbiw	r24, 0x01	; 1
    42d6:	f1 f7       	brne	.-4      	; 0x42d4 <main+0x4ca>
    42d8:	98 a3       	std	Y+32, r25	; 0x20
    42da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42dc:	89 a1       	ldd	r24, Y+33	; 0x21
    42de:	9a a1       	ldd	r25, Y+34	; 0x22
    42e0:	01 97       	sbiw	r24, 0x01	; 1
    42e2:	9a a3       	std	Y+34, r25	; 0x22
    42e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42e6:	89 a1       	ldd	r24, Y+33	; 0x21
    42e8:	9a a1       	ldd	r25, Y+34	; 0x22
    42ea:	00 97       	sbiw	r24, 0x00	; 0
    42ec:	69 f7       	brne	.-38     	; 0x42c8 <main+0x4be>
    42ee:	14 c0       	rjmp	.+40     	; 0x4318 <main+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f0:	6b a1       	ldd	r22, Y+35	; 0x23
    42f2:	7c a1       	ldd	r23, Y+36	; 0x24
    42f4:	8d a1       	ldd	r24, Y+37	; 0x25
    42f6:	9e a1       	ldd	r25, Y+38	; 0x26
    42f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42fc:	dc 01       	movw	r26, r24
    42fe:	cb 01       	movw	r24, r22
    4300:	9a a3       	std	Y+34, r25	; 0x22
    4302:	89 a3       	std	Y+33, r24	; 0x21
    4304:	89 a1       	ldd	r24, Y+33	; 0x21
    4306:	9a a1       	ldd	r25, Y+34	; 0x22
    4308:	9e 8f       	std	Y+30, r25	; 0x1e
    430a:	8d 8f       	std	Y+29, r24	; 0x1d
    430c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    430e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4310:	01 97       	sbiw	r24, 0x01	; 1
    4312:	f1 f7       	brne	.-4      	; 0x4310 <main+0x506>
    4314:	9e 8f       	std	Y+30, r25	; 0x1e
    4316:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else
		{
			_delay_ms(1000);
			LCD_voidClearScreen();
    4318:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <LCD_voidClearScreen>
    431c:	80 e0       	ldi	r24, 0x00	; 0
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	a0 ea       	ldi	r26, 0xA0	; 160
    4322:	b1 e4       	ldi	r27, 0x41	; 65
    4324:	89 8f       	std	Y+25, r24	; 0x19
    4326:	9a 8f       	std	Y+26, r25	; 0x1a
    4328:	ab 8f       	std	Y+27, r26	; 0x1b
    432a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    432c:	69 8d       	ldd	r22, Y+25	; 0x19
    432e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4330:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4332:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4334:	20 e0       	ldi	r18, 0x00	; 0
    4336:	30 e0       	ldi	r19, 0x00	; 0
    4338:	4a ef       	ldi	r20, 0xFA	; 250
    433a:	54 e4       	ldi	r21, 0x44	; 68
    433c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4340:	dc 01       	movw	r26, r24
    4342:	cb 01       	movw	r24, r22
    4344:	8d 8b       	std	Y+21, r24	; 0x15
    4346:	9e 8b       	std	Y+22, r25	; 0x16
    4348:	af 8b       	std	Y+23, r26	; 0x17
    434a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    434c:	6d 89       	ldd	r22, Y+21	; 0x15
    434e:	7e 89       	ldd	r23, Y+22	; 0x16
    4350:	8f 89       	ldd	r24, Y+23	; 0x17
    4352:	98 8d       	ldd	r25, Y+24	; 0x18
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	40 e8       	ldi	r20, 0x80	; 128
    435a:	5f e3       	ldi	r21, 0x3F	; 63
    435c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4360:	88 23       	and	r24, r24
    4362:	2c f4       	brge	.+10     	; 0x436e <main+0x564>
		__ticks = 1;
    4364:	81 e0       	ldi	r24, 0x01	; 1
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	9c 8b       	std	Y+20, r25	; 0x14
    436a:	8b 8b       	std	Y+19, r24	; 0x13
    436c:	3f c0       	rjmp	.+126    	; 0x43ec <main+0x5e2>
	else if (__tmp > 65535)
    436e:	6d 89       	ldd	r22, Y+21	; 0x15
    4370:	7e 89       	ldd	r23, Y+22	; 0x16
    4372:	8f 89       	ldd	r24, Y+23	; 0x17
    4374:	98 8d       	ldd	r25, Y+24	; 0x18
    4376:	20 e0       	ldi	r18, 0x00	; 0
    4378:	3f ef       	ldi	r19, 0xFF	; 255
    437a:	4f e7       	ldi	r20, 0x7F	; 127
    437c:	57 e4       	ldi	r21, 0x47	; 71
    437e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4382:	18 16       	cp	r1, r24
    4384:	4c f5       	brge	.+82     	; 0x43d8 <main+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4386:	69 8d       	ldd	r22, Y+25	; 0x19
    4388:	7a 8d       	ldd	r23, Y+26	; 0x1a
    438a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    438c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	40 e2       	ldi	r20, 0x20	; 32
    4394:	51 e4       	ldi	r21, 0x41	; 65
    4396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	bc 01       	movw	r22, r24
    43a0:	cd 01       	movw	r24, r26
    43a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43a6:	dc 01       	movw	r26, r24
    43a8:	cb 01       	movw	r24, r22
    43aa:	9c 8b       	std	Y+20, r25	; 0x14
    43ac:	8b 8b       	std	Y+19, r24	; 0x13
    43ae:	0f c0       	rjmp	.+30     	; 0x43ce <main+0x5c4>
    43b0:	88 ec       	ldi	r24, 0xC8	; 200
    43b2:	90 e0       	ldi	r25, 0x00	; 0
    43b4:	9a 8b       	std	Y+18, r25	; 0x12
    43b6:	89 8b       	std	Y+17, r24	; 0x11
    43b8:	89 89       	ldd	r24, Y+17	; 0x11
    43ba:	9a 89       	ldd	r25, Y+18	; 0x12
    43bc:	01 97       	sbiw	r24, 0x01	; 1
    43be:	f1 f7       	brne	.-4      	; 0x43bc <main+0x5b2>
    43c0:	9a 8b       	std	Y+18, r25	; 0x12
    43c2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43c4:	8b 89       	ldd	r24, Y+19	; 0x13
    43c6:	9c 89       	ldd	r25, Y+20	; 0x14
    43c8:	01 97       	sbiw	r24, 0x01	; 1
    43ca:	9c 8b       	std	Y+20, r25	; 0x14
    43cc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43ce:	8b 89       	ldd	r24, Y+19	; 0x13
    43d0:	9c 89       	ldd	r25, Y+20	; 0x14
    43d2:	00 97       	sbiw	r24, 0x00	; 0
    43d4:	69 f7       	brne	.-38     	; 0x43b0 <main+0x5a6>
    43d6:	14 c0       	rjmp	.+40     	; 0x4400 <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43d8:	6d 89       	ldd	r22, Y+21	; 0x15
    43da:	7e 89       	ldd	r23, Y+22	; 0x16
    43dc:	8f 89       	ldd	r24, Y+23	; 0x17
    43de:	98 8d       	ldd	r25, Y+24	; 0x18
    43e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e4:	dc 01       	movw	r26, r24
    43e6:	cb 01       	movw	r24, r22
    43e8:	9c 8b       	std	Y+20, r25	; 0x14
    43ea:	8b 8b       	std	Y+19, r24	; 0x13
    43ec:	8b 89       	ldd	r24, Y+19	; 0x13
    43ee:	9c 89       	ldd	r25, Y+20	; 0x14
    43f0:	98 8b       	std	Y+16, r25	; 0x10
    43f2:	8f 87       	std	Y+15, r24	; 0x0f
    43f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    43f6:	98 89       	ldd	r25, Y+16	; 0x10
    43f8:	01 97       	sbiw	r24, 0x01	; 1
    43fa:	f1 f7       	brne	.-4      	; 0x43f8 <main+0x5ee>
    43fc:	98 8b       	std	Y+16, r25	; 0x10
    43fe:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			LCD_voidWriteString((u8*)"GoodLuck!");
    4400:	82 e2       	ldi	r24, 0x22	; 34
    4402:	91 e0       	ldi	r25, 0x01	; 1
    4404:	0e 94 34 16 	call	0x2c68	; 0x2c68 <LCD_voidWriteString>
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	90 e8       	ldi	r25, 0x80	; 128
    440c:	ab e3       	ldi	r26, 0x3B	; 59
    440e:	b5 e4       	ldi	r27, 0x45	; 69
    4410:	8b 87       	std	Y+11, r24	; 0x0b
    4412:	9c 87       	std	Y+12, r25	; 0x0c
    4414:	ad 87       	std	Y+13, r26	; 0x0d
    4416:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4418:	6b 85       	ldd	r22, Y+11	; 0x0b
    441a:	7c 85       	ldd	r23, Y+12	; 0x0c
    441c:	8d 85       	ldd	r24, Y+13	; 0x0d
    441e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	4a ef       	ldi	r20, 0xFA	; 250
    4426:	54 e4       	ldi	r21, 0x44	; 68
    4428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    442c:	dc 01       	movw	r26, r24
    442e:	cb 01       	movw	r24, r22
    4430:	8f 83       	std	Y+7, r24	; 0x07
    4432:	98 87       	std	Y+8, r25	; 0x08
    4434:	a9 87       	std	Y+9, r26	; 0x09
    4436:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4438:	6f 81       	ldd	r22, Y+7	; 0x07
    443a:	78 85       	ldd	r23, Y+8	; 0x08
    443c:	89 85       	ldd	r24, Y+9	; 0x09
    443e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	40 e8       	ldi	r20, 0x80	; 128
    4446:	5f e3       	ldi	r21, 0x3F	; 63
    4448:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    444c:	88 23       	and	r24, r24
    444e:	2c f4       	brge	.+10     	; 0x445a <main+0x650>
		__ticks = 1;
    4450:	81 e0       	ldi	r24, 0x01	; 1
    4452:	90 e0       	ldi	r25, 0x00	; 0
    4454:	9e 83       	std	Y+6, r25	; 0x06
    4456:	8d 83       	std	Y+5, r24	; 0x05
    4458:	3f c0       	rjmp	.+126    	; 0x44d8 <main+0x6ce>
	else if (__tmp > 65535)
    445a:	6f 81       	ldd	r22, Y+7	; 0x07
    445c:	78 85       	ldd	r23, Y+8	; 0x08
    445e:	89 85       	ldd	r24, Y+9	; 0x09
    4460:	9a 85       	ldd	r25, Y+10	; 0x0a
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	3f ef       	ldi	r19, 0xFF	; 255
    4466:	4f e7       	ldi	r20, 0x7F	; 127
    4468:	57 e4       	ldi	r21, 0x47	; 71
    446a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    446e:	18 16       	cp	r1, r24
    4470:	4c f5       	brge	.+82     	; 0x44c4 <main+0x6ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4472:	6b 85       	ldd	r22, Y+11	; 0x0b
    4474:	7c 85       	ldd	r23, Y+12	; 0x0c
    4476:	8d 85       	ldd	r24, Y+13	; 0x0d
    4478:	9e 85       	ldd	r25, Y+14	; 0x0e
    447a:	20 e0       	ldi	r18, 0x00	; 0
    447c:	30 e0       	ldi	r19, 0x00	; 0
    447e:	40 e2       	ldi	r20, 0x20	; 32
    4480:	51 e4       	ldi	r21, 0x41	; 65
    4482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	bc 01       	movw	r22, r24
    448c:	cd 01       	movw	r24, r26
    448e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4492:	dc 01       	movw	r26, r24
    4494:	cb 01       	movw	r24, r22
    4496:	9e 83       	std	Y+6, r25	; 0x06
    4498:	8d 83       	std	Y+5, r24	; 0x05
    449a:	0f c0       	rjmp	.+30     	; 0x44ba <main+0x6b0>
    449c:	88 ec       	ldi	r24, 0xC8	; 200
    449e:	90 e0       	ldi	r25, 0x00	; 0
    44a0:	9c 83       	std	Y+4, r25	; 0x04
    44a2:	8b 83       	std	Y+3, r24	; 0x03
    44a4:	8b 81       	ldd	r24, Y+3	; 0x03
    44a6:	9c 81       	ldd	r25, Y+4	; 0x04
    44a8:	01 97       	sbiw	r24, 0x01	; 1
    44aa:	f1 f7       	brne	.-4      	; 0x44a8 <main+0x69e>
    44ac:	9c 83       	std	Y+4, r25	; 0x04
    44ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44b0:	8d 81       	ldd	r24, Y+5	; 0x05
    44b2:	9e 81       	ldd	r25, Y+6	; 0x06
    44b4:	01 97       	sbiw	r24, 0x01	; 1
    44b6:	9e 83       	std	Y+6, r25	; 0x06
    44b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44ba:	8d 81       	ldd	r24, Y+5	; 0x05
    44bc:	9e 81       	ldd	r25, Y+6	; 0x06
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	69 f7       	brne	.-38     	; 0x449c <main+0x692>
    44c2:	14 c0       	rjmp	.+40     	; 0x44ec <main+0x6e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44c4:	6f 81       	ldd	r22, Y+7	; 0x07
    44c6:	78 85       	ldd	r23, Y+8	; 0x08
    44c8:	89 85       	ldd	r24, Y+9	; 0x09
    44ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    44cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44d0:	dc 01       	movw	r26, r24
    44d2:	cb 01       	movw	r24, r22
    44d4:	9e 83       	std	Y+6, r25	; 0x06
    44d6:	8d 83       	std	Y+5, r24	; 0x05
    44d8:	8d 81       	ldd	r24, Y+5	; 0x05
    44da:	9e 81       	ldd	r25, Y+6	; 0x06
    44dc:	9a 83       	std	Y+2, r25	; 0x02
    44de:	89 83       	std	Y+1, r24	; 0x01
    44e0:	89 81       	ldd	r24, Y+1	; 0x01
    44e2:	9a 81       	ldd	r25, Y+2	; 0x02
    44e4:	01 97       	sbiw	r24, 0x01	; 1
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <main+0x6da>
    44e8:	9a 83       	std	Y+2, r25	; 0x02
    44ea:	89 83       	std	Y+1, r24	; 0x01
    44ec:	ff cf       	rjmp	.-2      	; 0x44ec <main+0x6e2>

000044ee <__udivmodsi4>:
    44ee:	a1 e2       	ldi	r26, 0x21	; 33
    44f0:	1a 2e       	mov	r1, r26
    44f2:	aa 1b       	sub	r26, r26
    44f4:	bb 1b       	sub	r27, r27
    44f6:	fd 01       	movw	r30, r26
    44f8:	0d c0       	rjmp	.+26     	; 0x4514 <__udivmodsi4_ep>

000044fa <__udivmodsi4_loop>:
    44fa:	aa 1f       	adc	r26, r26
    44fc:	bb 1f       	adc	r27, r27
    44fe:	ee 1f       	adc	r30, r30
    4500:	ff 1f       	adc	r31, r31
    4502:	a2 17       	cp	r26, r18
    4504:	b3 07       	cpc	r27, r19
    4506:	e4 07       	cpc	r30, r20
    4508:	f5 07       	cpc	r31, r21
    450a:	20 f0       	brcs	.+8      	; 0x4514 <__udivmodsi4_ep>
    450c:	a2 1b       	sub	r26, r18
    450e:	b3 0b       	sbc	r27, r19
    4510:	e4 0b       	sbc	r30, r20
    4512:	f5 0b       	sbc	r31, r21

00004514 <__udivmodsi4_ep>:
    4514:	66 1f       	adc	r22, r22
    4516:	77 1f       	adc	r23, r23
    4518:	88 1f       	adc	r24, r24
    451a:	99 1f       	adc	r25, r25
    451c:	1a 94       	dec	r1
    451e:	69 f7       	brne	.-38     	; 0x44fa <__udivmodsi4_loop>
    4520:	60 95       	com	r22
    4522:	70 95       	com	r23
    4524:	80 95       	com	r24
    4526:	90 95       	com	r25
    4528:	9b 01       	movw	r18, r22
    452a:	ac 01       	movw	r20, r24
    452c:	bd 01       	movw	r22, r26
    452e:	cf 01       	movw	r24, r30
    4530:	08 95       	ret

00004532 <__prologue_saves__>:
    4532:	2f 92       	push	r2
    4534:	3f 92       	push	r3
    4536:	4f 92       	push	r4
    4538:	5f 92       	push	r5
    453a:	6f 92       	push	r6
    453c:	7f 92       	push	r7
    453e:	8f 92       	push	r8
    4540:	9f 92       	push	r9
    4542:	af 92       	push	r10
    4544:	bf 92       	push	r11
    4546:	cf 92       	push	r12
    4548:	df 92       	push	r13
    454a:	ef 92       	push	r14
    454c:	ff 92       	push	r15
    454e:	0f 93       	push	r16
    4550:	1f 93       	push	r17
    4552:	cf 93       	push	r28
    4554:	df 93       	push	r29
    4556:	cd b7       	in	r28, 0x3d	; 61
    4558:	de b7       	in	r29, 0x3e	; 62
    455a:	ca 1b       	sub	r28, r26
    455c:	db 0b       	sbc	r29, r27
    455e:	0f b6       	in	r0, 0x3f	; 63
    4560:	f8 94       	cli
    4562:	de bf       	out	0x3e, r29	; 62
    4564:	0f be       	out	0x3f, r0	; 63
    4566:	cd bf       	out	0x3d, r28	; 61
    4568:	09 94       	ijmp

0000456a <__epilogue_restores__>:
    456a:	2a 88       	ldd	r2, Y+18	; 0x12
    456c:	39 88       	ldd	r3, Y+17	; 0x11
    456e:	48 88       	ldd	r4, Y+16	; 0x10
    4570:	5f 84       	ldd	r5, Y+15	; 0x0f
    4572:	6e 84       	ldd	r6, Y+14	; 0x0e
    4574:	7d 84       	ldd	r7, Y+13	; 0x0d
    4576:	8c 84       	ldd	r8, Y+12	; 0x0c
    4578:	9b 84       	ldd	r9, Y+11	; 0x0b
    457a:	aa 84       	ldd	r10, Y+10	; 0x0a
    457c:	b9 84       	ldd	r11, Y+9	; 0x09
    457e:	c8 84       	ldd	r12, Y+8	; 0x08
    4580:	df 80       	ldd	r13, Y+7	; 0x07
    4582:	ee 80       	ldd	r14, Y+6	; 0x06
    4584:	fd 80       	ldd	r15, Y+5	; 0x05
    4586:	0c 81       	ldd	r16, Y+4	; 0x04
    4588:	1b 81       	ldd	r17, Y+3	; 0x03
    458a:	aa 81       	ldd	r26, Y+2	; 0x02
    458c:	b9 81       	ldd	r27, Y+1	; 0x01
    458e:	ce 0f       	add	r28, r30
    4590:	d1 1d       	adc	r29, r1
    4592:	0f b6       	in	r0, 0x3f	; 63
    4594:	f8 94       	cli
    4596:	de bf       	out	0x3e, r29	; 62
    4598:	0f be       	out	0x3f, r0	; 63
    459a:	cd bf       	out	0x3d, r28	; 61
    459c:	ed 01       	movw	r28, r26
    459e:	08 95       	ret

000045a0 <_exit>:
    45a0:	f8 94       	cli

000045a2 <__stop_program>:
    45a2:	ff cf       	rjmp	.-2      	; 0x45a2 <__stop_program>
