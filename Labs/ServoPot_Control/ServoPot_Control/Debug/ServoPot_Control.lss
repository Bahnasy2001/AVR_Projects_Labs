
ServoPot_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001466  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001b  00800060  00800060  000014da  2**0
                  ALLOC
  2 .stab         00001cbc  00000000  00000000  000014dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000f92  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__vector_6>
      1c:	0c 94 86 08 	jmp	0x110c	; 0x110c <__vector_7>
      20:	0c 94 3e 08 	jmp	0x107c	; 0x107c <__vector_8>
      24:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <__vector_9>
      28:	0c 94 62 09 	jmp	0x12c4	; 0x12c4 <__vector_10>
      2c:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_16>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 37       	cpi	r26, 0x7B	; 123
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 aa 09 	call	0x1354	; 0x1354 <main>
      74:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:

/* ADC busy Flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	   4- Select CLK/64
	   5- Enable ADC
	    */
	//1- Select Vref = AVCC
#if ADC_u8_VREF_OPTION == ADC_u8_VREF_AVCC
	CLR_BIT(ADC_u8_ADMUX_REG,7);
      84:	a7 e2       	ldi	r26, 0x27	; 39
      86:	b0 e0       	ldi	r27, 0x00	; 0
      88:	e7 e2       	ldi	r30, 0x27	; 39
      8a:	f0 e0       	ldi	r31, 0x00	; 0
      8c:	80 81       	ld	r24, Z
      8e:	8f 77       	andi	r24, 0x7F	; 127
      90:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
      92:	a7 e2       	ldi	r26, 0x27	; 39
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	e7 e2       	ldi	r30, 0x27	; 39
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	80 81       	ld	r24, Z
      9c:	80 64       	ori	r24, 0x40	; 64
      9e:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
#endif

	//2- Right Adjust
#if ADC_u8_ADJUST_OPTION == ADC_u8_RIGHT_ADJUST
	CLR_BIT(ADC_u8_ADMUX_REG,5);
      a0:	a7 e2       	ldi	r26, 0x27	; 39
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	e7 e2       	ldi	r30, 0x27	; 39
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	8f 7d       	andi	r24, 0xDF	; 223
      ac:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,5);
#endif

	//3- Disable AutoTrigger
#if ADC_u8_AUTO_TRIGGER_MODE == ADC_u8_AUTO_TRIGGER_DISABLE
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
      ae:	a6 e2       	ldi	r26, 0x26	; 38
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	e6 e2       	ldi	r30, 0x26	; 38
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	8f 7d       	andi	r24, 0xDF	; 223
      ba:	8c 93       	st	X, r24
	#endif
#endif

	//4- Select CLK/64
#if ADC_u8_PRESCALER == ADC_u8_PRESCALER_64
	SET_BIT(ADC_u8_ADCSRA_REG,2);
      bc:	a6 e2       	ldi	r26, 0x26	; 38
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	e6 e2       	ldi	r30, 0x26	; 38
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	84 60       	ori	r24, 0x04	; 4
      c8:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
      ca:	a6 e2       	ldi	r26, 0x26	; 38
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	e6 e2       	ldi	r30, 0x26	; 38
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	82 60       	ori	r24, 0x02	; 2
      d6:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
      d8:	a6 e2       	ldi	r26, 0x26	; 38
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e6 e2       	ldi	r30, 0x26	; 38
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	8e 7f       	andi	r24, 0xFE	; 254
      e4:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
	SET_BIT(ADC_u8_ADCSRA_REG,0);
#endif

	//5- Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG,7);
      e6:	a6 e2       	ldi	r26, 0x26	; 38
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e6 e2       	ldi	r30, 0x26	; 38
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	80 68       	ori	r24, 0x80	; 128
      f2:	8c 93       	st	X, r24

}
      f4:	cf 91       	pop	r28
      f6:	df 91       	pop	r29
      f8:	08 95       	ret

000000fa <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 *Copy_pu16DigitalValue)
{
      fa:	df 93       	push	r29
      fc:	cf 93       	push	r28
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	28 97       	sbiw	r28, 0x08	; 8
     104:	0f b6       	in	r0, 0x3f	; 63
     106:	f8 94       	cli
     108:	de bf       	out	0x3e, r29	; 62
     10a:	0f be       	out	0x3f, r0	; 63
     10c:	cd bf       	out	0x3d, r28	; 61
     10e:	8e 83       	std	Y+6, r24	; 0x06
     110:	78 87       	std	Y+8, r23	; 0x08
     112:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     118:	19 82       	std	Y+1, r1	; 0x01
     11a:	1a 82       	std	Y+2, r1	; 0x02
     11c:	1b 82       	std	Y+3, r1	; 0x03
     11e:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32)  && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
     120:	8e 81       	ldd	r24, Y+6	; 0x06
     122:	80 32       	cpi	r24, 0x20	; 32
     124:	08 f0       	brcs	.+2      	; 0x128 <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     126:	65 c0       	rjmp	.+202    	; 0x1f2 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     128:	8f 81       	ldd	r24, Y+7	; 0x07
     12a:	98 85       	ldd	r25, Y+8	; 0x08
     12c:	00 97       	sbiw	r24, 0x00	; 0
     12e:	09 f4       	brne	.+2      	; 0x132 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     130:	60 c0       	rjmp	.+192    	; 0x1f2 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     132:	80 91 62 00 	lds	r24, 0x0062
     136:	88 23       	and	r24, r24
     138:	09 f0       	breq	.+2      	; 0x13c <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
     13a:	5b c0       	rjmp	.+182    	; 0x1f2 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 93 62 00 	sts	0x0062, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     142:	a7 e2       	ldi	r26, 0x27	; 39
     144:	b0 e0       	ldi	r27, 0x00	; 0
     146:	e7 e2       	ldi	r30, 0x27	; 39
     148:	f0 e0       	ldi	r31, 0x00	; 0
     14a:	80 81       	ld	r24, Z
     14c:	80 7e       	andi	r24, 0xE0	; 224
     14e:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     150:	a7 e2       	ldi	r26, 0x27	; 39
     152:	b0 e0       	ldi	r27, 0x00	; 0
     154:	e7 e2       	ldi	r30, 0x27	; 39
     156:	f0 e0       	ldi	r31, 0x00	; 0
     158:	90 81       	ld	r25, Z
     15a:	8e 81       	ldd	r24, Y+6	; 0x06
     15c:	89 2b       	or	r24, r25
     15e:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     160:	a6 e2       	ldi	r26, 0x26	; 38
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	e6 e2       	ldi	r30, 0x26	; 38
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	80 64       	ori	r24, 0x40	; 64
     16c:	8c 93       	st	X, r24
     16e:	0b c0       	rjmp	.+22     	; 0x186 <ADC_u8GetDigitalValueSynchNonBlocking+0x8c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
     170:	89 81       	ldd	r24, Y+1	; 0x01
     172:	9a 81       	ldd	r25, Y+2	; 0x02
     174:	ab 81       	ldd	r26, Y+3	; 0x03
     176:	bc 81       	ldd	r27, Y+4	; 0x04
     178:	01 96       	adiw	r24, 0x01	; 1
     17a:	a1 1d       	adc	r26, r1
     17c:	b1 1d       	adc	r27, r1
     17e:	89 83       	std	Y+1, r24	; 0x01
     180:	9a 83       	std	Y+2, r25	; 0x02
     182:	ab 83       	std	Y+3, r26	; 0x03
     184:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     186:	e6 e2       	ldi	r30, 0x26	; 38
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	82 95       	swap	r24
     18e:	8f 70       	andi	r24, 0x0F	; 15
     190:	88 2f       	mov	r24, r24
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	81 70       	andi	r24, 0x01	; 1
     196:	90 70       	andi	r25, 0x00	; 0
     198:	00 97       	sbiw	r24, 0x00	; 0
     19a:	61 f4       	brne	.+24     	; 0x1b4 <ADC_u8GetDigitalValueSynchNonBlocking+0xba>
     19c:	89 81       	ldd	r24, Y+1	; 0x01
     19e:	9a 81       	ldd	r25, Y+2	; 0x02
     1a0:	ab 81       	ldd	r26, Y+3	; 0x03
     1a2:	bc 81       	ldd	r27, Y+4	; 0x04
     1a4:	80 35       	cpi	r24, 0x50	; 80
     1a6:	23 ec       	ldi	r18, 0xC3	; 195
     1a8:	92 07       	cpc	r25, r18
     1aa:	20 e0       	ldi	r18, 0x00	; 0
     1ac:	a2 07       	cpc	r26, r18
     1ae:	20 e0       	ldi	r18, 0x00	; 0
     1b0:	b2 07       	cpc	r27, r18
     1b2:	f0 f2       	brcs	.-68     	; 0x170 <ADC_u8GetDigitalValueSynchNonBlocking+0x76>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
     1b4:	e6 e2       	ldi	r30, 0x26	; 38
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	82 95       	swap	r24
     1bc:	8f 70       	andi	r24, 0x0F	; 15
     1be:	88 2f       	mov	r24, r24
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	81 70       	andi	r24, 0x01	; 1
     1c4:	90 70       	andi	r25, 0x00	; 0
     1c6:	88 23       	and	r24, r24
     1c8:	91 f0       	breq	.+36     	; 0x1ee <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
		{
			/* Clear Flag */
			ADC_u8BusyFlag = 0;
     1ca:	10 92 62 00 	sts	0x0062, r1
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     1ce:	a6 e2       	ldi	r26, 0x26	; 38
     1d0:	b0 e0       	ldi	r27, 0x00	; 0
     1d2:	e6 e2       	ldi	r30, 0x26	; 38
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 61       	ori	r24, 0x10	; 16
     1da:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     1dc:	e4 e2       	ldi	r30, 0x24	; 36
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	80 81       	ld	r24, Z
     1e2:	91 81       	ldd	r25, Z+1	; 0x01
     1e4:	ef 81       	ldd	r30, Y+7	; 0x07
     1e6:	f8 85       	ldd	r31, Y+8	; 0x08
     1e8:	91 83       	std	Z+1, r25	; 0x01
     1ea:	80 83       	st	Z, r24
     1ec:	03 c0       	rjmp	.+6      	; 0x1f4 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     1ee:	1d 82       	std	Y+5, r1	; 0x05
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     1f2:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     1f4:	8d 81       	ldd	r24, Y+5	; 0x05
}
     1f6:	28 96       	adiw	r28, 0x08	; 8
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
     202:	cf 91       	pop	r28
     204:	df 91       	pop	r29
     206:	08 95       	ret

00000208 <ADC_u8GetDigitalValueAsynch>:


u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb, void (*Copy_pfNotification) (u16))
{
     208:	df 93       	push	r29
     20a:	cf 93       	push	r28
     20c:	00 d0       	rcall	.+0      	; 0x20e <ADC_u8GetDigitalValueAsynch+0x6>
     20e:	00 d0       	rcall	.+0      	; 0x210 <ADC_u8GetDigitalValueAsynch+0x8>
     210:	cd b7       	in	r28, 0x3d	; 61
     212:	de b7       	in	r29, 0x3e	; 62
     214:	8a 83       	std	Y+2, r24	; 0x02
     216:	7c 83       	std	Y+4, r23	; 0x04
     218:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32)  && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
     21e:	8a 81       	ldd	r24, Y+2	; 0x02
     220:	80 32       	cpi	r24, 0x20	; 32
     222:	78 f5       	brcc	.+94     	; 0x282 <ADC_u8GetDigitalValueAsynch+0x7a>
     224:	8b 81       	ldd	r24, Y+3	; 0x03
     226:	9c 81       	ldd	r25, Y+4	; 0x04
     228:	00 97       	sbiw	r24, 0x00	; 0
     22a:	59 f1       	breq	.+86     	; 0x282 <ADC_u8GetDigitalValueAsynch+0x7a>
     22c:	80 91 62 00 	lds	r24, 0x0062
     230:	88 23       	and	r24, r24
     232:	39 f5       	brne	.+78     	; 0x282 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	80 93 62 00 	sts	0x0062, r24
		/* Update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
     23a:	8b 81       	ldd	r24, Y+3	; 0x03
     23c:	9c 81       	ldd	r25, Y+4	; 0x04
     23e:	90 93 61 00 	sts	0x0061, r25
     242:	80 93 60 00 	sts	0x0060, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     246:	a6 e2       	ldi	r26, 0x26	; 38
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	e6 e2       	ldi	r30, 0x26	; 38
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 60       	ori	r24, 0x08	; 8
     252:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     254:	a7 e2       	ldi	r26, 0x27	; 39
     256:	b0 e0       	ldi	r27, 0x00	; 0
     258:	e7 e2       	ldi	r30, 0x27	; 39
     25a:	f0 e0       	ldi	r31, 0x00	; 0
     25c:	80 81       	ld	r24, Z
     25e:	80 7e       	andi	r24, 0xE0	; 224
     260:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     262:	a7 e2       	ldi	r26, 0x27	; 39
     264:	b0 e0       	ldi	r27, 0x00	; 0
     266:	e7 e2       	ldi	r30, 0x27	; 39
     268:	f0 e0       	ldi	r31, 0x00	; 0
     26a:	90 81       	ld	r25, Z
     26c:	8a 81       	ldd	r24, Y+2	; 0x02
     26e:	89 2b       	or	r24, r25
     270:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     272:	a6 e2       	ldi	r26, 0x26	; 38
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	e6 e2       	ldi	r30, 0x26	; 38
     278:	f0 e0       	ldi	r31, 0x00	; 0
     27a:	80 81       	ld	r24, Z
     27c:	80 64       	ori	r24, 0x40	; 64
     27e:	8c 93       	st	X, r24
     280:	01 c0       	rjmp	.+2      	; 0x284 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     282:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     284:	89 81       	ldd	r24, Y+1	; 0x01
}
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	0f 90       	pop	r0
     28c:	0f 90       	pop	r0
     28e:	cf 91       	pop	r28
     290:	df 91       	pop	r29
     292:	08 95       	ret

00000294 <ADC_u8GetADCRegValue>:
u8 ADC_u8GetADCRegValue (u16 * Copy_pu16ADCValue)
{
     294:	df 93       	push	r29
     296:	cf 93       	push	r28
     298:	00 d0       	rcall	.+0      	; 0x29a <ADC_u8GetADCRegValue+0x6>
     29a:	0f 92       	push	r0
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	9b 83       	std	Y+3, r25	; 0x03
     2a2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     2a4:	81 e0       	ldi	r24, 0x01	; 1
     2a6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	9b 81       	ldd	r25, Y+3	; 0x03
     2ac:	00 97       	sbiw	r24, 0x00	; 0
     2ae:	49 f0       	breq	.+18     	; 0x2c2 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
     2b0:	e4 e2       	ldi	r30, 0x24	; 36
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	91 81       	ldd	r25, Z+1	; 0x01
     2b8:	ea 81       	ldd	r30, Y+2	; 0x02
     2ba:	fb 81       	ldd	r31, Y+3	; 0x03
     2bc:	91 83       	std	Z+1, r25	; 0x01
     2be:	80 83       	st	Z, r24
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     2c2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
}
     2c6:	0f 90       	pop	r0
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	cf 91       	pop	r28
     2ce:	df 91       	pop	r29
     2d0:	08 95       	ret

000002d2 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     2d2:	1f 92       	push	r1
     2d4:	0f 92       	push	r0
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	0f 92       	push	r0
     2da:	11 24       	eor	r1, r1
     2dc:	2f 93       	push	r18
     2de:	3f 93       	push	r19
     2e0:	4f 93       	push	r20
     2e2:	5f 93       	push	r21
     2e4:	6f 93       	push	r22
     2e6:	7f 93       	push	r23
     2e8:	8f 93       	push	r24
     2ea:	9f 93       	push	r25
     2ec:	af 93       	push	r26
     2ee:	bf 93       	push	r27
     2f0:	ef 93       	push	r30
     2f2:	ff 93       	push	r31
     2f4:	df 93       	push	r29
     2f6:	cf 93       	push	r28
     2f8:	cd b7       	in	r28, 0x3d	; 61
     2fa:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     2fc:	80 91 60 00 	lds	r24, 0x0060
     300:	90 91 61 00 	lds	r25, 0x0061
     304:	00 97       	sbiw	r24, 0x00	; 0
     306:	99 f0       	breq	.+38     	; 0x32e <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
     308:	10 92 62 00 	sts	0x0062, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     30c:	a6 e2       	ldi	r26, 0x26	; 38
     30e:	b0 e0       	ldi	r27, 0x00	; 0
     310:	e6 e2       	ldi	r30, 0x26	; 38
     312:	f0 e0       	ldi	r31, 0x00	; 0
     314:	80 81       	ld	r24, Z
     316:	87 7f       	andi	r24, 0xF7	; 247
     318:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     31a:	20 91 60 00 	lds	r18, 0x0060
     31e:	30 91 61 00 	lds	r19, 0x0061
     322:	e4 e2       	ldi	r30, 0x24	; 36
     324:	f0 e0       	ldi	r31, 0x00	; 0
     326:	80 81       	ld	r24, Z
     328:	91 81       	ldd	r25, Z+1	; 0x01
     32a:	f9 01       	movw	r30, r18
     32c:	09 95       	icall
	}
     32e:	cf 91       	pop	r28
     330:	df 91       	pop	r29
     332:	ff 91       	pop	r31
     334:	ef 91       	pop	r30
     336:	bf 91       	pop	r27
     338:	af 91       	pop	r26
     33a:	9f 91       	pop	r25
     33c:	8f 91       	pop	r24
     33e:	7f 91       	pop	r23
     340:	6f 91       	pop	r22
     342:	5f 91       	pop	r21
     344:	4f 91       	pop	r20
     346:	3f 91       	pop	r19
     348:	2f 91       	pop	r18
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     354:	df 93       	push	r29
     356:	cf 93       	push	r28
     358:	cd b7       	in	r28, 0x3d	; 61
     35a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     35c:	ea e3       	ldi	r30, 0x3A	; 58
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     362:	e7 e3       	ldi	r30, 0x37	; 55
     364:	f0 e0       	ldi	r31, 0x00	; 0
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     36a:	e4 e3       	ldi	r30, 0x34	; 52
     36c:	f0 e0       	ldi	r31, 0x00	; 0
     36e:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     370:	e1 e3       	ldi	r30, 0x31	; 49
     372:	f0 e0       	ldi	r31, 0x00	; 0
     374:	80 e2       	ldi	r24, 0x20	; 32
     376:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     378:	eb e3       	ldi	r30, 0x3B	; 59
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     37e:	e8 e3       	ldi	r30, 0x38	; 56
     380:	f0 e0       	ldi	r31, 0x00	; 0
     382:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     384:	e5 e3       	ldi	r30, 0x35	; 53
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     38a:	e2 e3       	ldi	r30, 0x32	; 50
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	10 82       	st	Z, r1

}
     390:	cf 91       	pop	r28
     392:	df 91       	pop	r29
     394:	08 95       	ret

00000396 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     396:	df 93       	push	r29
     398:	cf 93       	push	r28
     39a:	cd b7       	in	r28, 0x3d	; 61
     39c:	de b7       	in	r29, 0x3e	; 62
     39e:	2e 97       	sbiw	r28, 0x0e	; 14
     3a0:	0f b6       	in	r0, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	0f be       	out	0x3f, r0	; 63
     3a8:	cd bf       	out	0x3d, r28	; 61
     3aa:	8a 83       	std	Y+2, r24	; 0x02
     3ac:	6b 83       	std	Y+3, r22	; 0x03
     3ae:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     3b4:	8a 81       	ldd	r24, Y+2	; 0x02
     3b6:	84 30       	cpi	r24, 0x04	; 4
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <DIO_u8SetPinDirection+0x26>
     3ba:	0d c1       	rjmp	.+538    	; 0x5d6 <DIO_u8SetPinDirection+0x240>
     3bc:	8b 81       	ldd	r24, Y+3	; 0x03
     3be:	88 30       	cpi	r24, 0x08	; 8
     3c0:	08 f0       	brcs	.+2      	; 0x3c4 <DIO_u8SetPinDirection+0x2e>
     3c2:	09 c1       	rjmp	.+530    	; 0x5d6 <DIO_u8SetPinDirection+0x240>
     3c4:	8c 81       	ldd	r24, Y+4	; 0x04
     3c6:	88 23       	and	r24, r24
     3c8:	21 f0       	breq	.+8      	; 0x3d2 <DIO_u8SetPinDirection+0x3c>
     3ca:	8c 81       	ldd	r24, Y+4	; 0x04
     3cc:	81 30       	cpi	r24, 0x01	; 1
     3ce:	09 f0       	breq	.+2      	; 0x3d2 <DIO_u8SetPinDirection+0x3c>
     3d0:	02 c1       	rjmp	.+516    	; 0x5d6 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     3d2:	8a 81       	ldd	r24, Y+2	; 0x02
     3d4:	28 2f       	mov	r18, r24
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	3e 87       	std	Y+14, r19	; 0x0e
     3da:	2d 87       	std	Y+13, r18	; 0x0d
     3dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     3de:	9e 85       	ldd	r25, Y+14	; 0x0e
     3e0:	81 30       	cpi	r24, 0x01	; 1
     3e2:	91 05       	cpc	r25, r1
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <DIO_u8SetPinDirection+0x52>
     3e6:	4f c0       	rjmp	.+158    	; 0x486 <DIO_u8SetPinDirection+0xf0>
     3e8:	2d 85       	ldd	r18, Y+13	; 0x0d
     3ea:	3e 85       	ldd	r19, Y+14	; 0x0e
     3ec:	22 30       	cpi	r18, 0x02	; 2
     3ee:	31 05       	cpc	r19, r1
     3f0:	2c f4       	brge	.+10     	; 0x3fc <DIO_u8SetPinDirection+0x66>
     3f2:	8d 85       	ldd	r24, Y+13	; 0x0d
     3f4:	9e 85       	ldd	r25, Y+14	; 0x0e
     3f6:	00 97       	sbiw	r24, 0x00	; 0
     3f8:	71 f0       	breq	.+28     	; 0x416 <DIO_u8SetPinDirection+0x80>
     3fa:	ee c0       	rjmp	.+476    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
     3fc:	2d 85       	ldd	r18, Y+13	; 0x0d
     3fe:	3e 85       	ldd	r19, Y+14	; 0x0e
     400:	22 30       	cpi	r18, 0x02	; 2
     402:	31 05       	cpc	r19, r1
     404:	09 f4       	brne	.+2      	; 0x408 <DIO_u8SetPinDirection+0x72>
     406:	77 c0       	rjmp	.+238    	; 0x4f6 <DIO_u8SetPinDirection+0x160>
     408:	8d 85       	ldd	r24, Y+13	; 0x0d
     40a:	9e 85       	ldd	r25, Y+14	; 0x0e
     40c:	83 30       	cpi	r24, 0x03	; 3
     40e:	91 05       	cpc	r25, r1
     410:	09 f4       	brne	.+2      	; 0x414 <DIO_u8SetPinDirection+0x7e>
     412:	a9 c0       	rjmp	.+338    	; 0x566 <DIO_u8SetPinDirection+0x1d0>
     414:	e1 c0       	rjmp	.+450    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     416:	8b 81       	ldd	r24, Y+3	; 0x03
     418:	28 2f       	mov	r18, r24
     41a:	30 e0       	ldi	r19, 0x00	; 0
     41c:	3c 87       	std	Y+12, r19	; 0x0c
     41e:	2b 87       	std	Y+11, r18	; 0x0b
     420:	8b 85       	ldd	r24, Y+11	; 0x0b
     422:	9c 85       	ldd	r25, Y+12	; 0x0c
     424:	00 97       	sbiw	r24, 0x00	; 0
     426:	31 f0       	breq	.+12     	; 0x434 <DIO_u8SetPinDirection+0x9e>
     428:	2b 85       	ldd	r18, Y+11	; 0x0b
     42a:	3c 85       	ldd	r19, Y+12	; 0x0c
     42c:	21 30       	cpi	r18, 0x01	; 1
     42e:	31 05       	cpc	r19, r1
     430:	b1 f0       	breq	.+44     	; 0x45e <DIO_u8SetPinDirection+0xc8>
     432:	d2 c0       	rjmp	.+420    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     434:	aa e3       	ldi	r26, 0x3A	; 58
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	ea e3       	ldi	r30, 0x3A	; 58
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	48 2f       	mov	r20, r24
     440:	8b 81       	ldd	r24, Y+3	; 0x03
     442:	28 2f       	mov	r18, r24
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	02 2e       	mov	r0, r18
     44c:	02 c0       	rjmp	.+4      	; 0x452 <DIO_u8SetPinDirection+0xbc>
     44e:	88 0f       	add	r24, r24
     450:	99 1f       	adc	r25, r25
     452:	0a 94       	dec	r0
     454:	e2 f7       	brpl	.-8      	; 0x44e <DIO_u8SetPinDirection+0xb8>
     456:	80 95       	com	r24
     458:	84 23       	and	r24, r20
     45a:	8c 93       	st	X, r24
     45c:	bd c0       	rjmp	.+378    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     45e:	aa e3       	ldi	r26, 0x3A	; 58
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	ea e3       	ldi	r30, 0x3A	; 58
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	48 2f       	mov	r20, r24
     46a:	8b 81       	ldd	r24, Y+3	; 0x03
     46c:	28 2f       	mov	r18, r24
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	02 2e       	mov	r0, r18
     476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_u8SetPinDirection+0xe6>
     478:	88 0f       	add	r24, r24
     47a:	99 1f       	adc	r25, r25
     47c:	0a 94       	dec	r0
     47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_u8SetPinDirection+0xe2>
     480:	84 2b       	or	r24, r20
     482:	8c 93       	st	X, r24
     484:	a9 c0       	rjmp	.+338    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     486:	8b 81       	ldd	r24, Y+3	; 0x03
     488:	28 2f       	mov	r18, r24
     48a:	30 e0       	ldi	r19, 0x00	; 0
     48c:	3a 87       	std	Y+10, r19	; 0x0a
     48e:	29 87       	std	Y+9, r18	; 0x09
     490:	89 85       	ldd	r24, Y+9	; 0x09
     492:	9a 85       	ldd	r25, Y+10	; 0x0a
     494:	00 97       	sbiw	r24, 0x00	; 0
     496:	31 f0       	breq	.+12     	; 0x4a4 <DIO_u8SetPinDirection+0x10e>
     498:	29 85       	ldd	r18, Y+9	; 0x09
     49a:	3a 85       	ldd	r19, Y+10	; 0x0a
     49c:	21 30       	cpi	r18, 0x01	; 1
     49e:	31 05       	cpc	r19, r1
     4a0:	b1 f0       	breq	.+44     	; 0x4ce <DIO_u8SetPinDirection+0x138>
     4a2:	9a c0       	rjmp	.+308    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     4a4:	a7 e3       	ldi	r26, 0x37	; 55
     4a6:	b0 e0       	ldi	r27, 0x00	; 0
     4a8:	e7 e3       	ldi	r30, 0x37	; 55
     4aa:	f0 e0       	ldi	r31, 0x00	; 0
     4ac:	80 81       	ld	r24, Z
     4ae:	48 2f       	mov	r20, r24
     4b0:	8b 81       	ldd	r24, Y+3	; 0x03
     4b2:	28 2f       	mov	r18, r24
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	81 e0       	ldi	r24, 0x01	; 1
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	02 2e       	mov	r0, r18
     4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <DIO_u8SetPinDirection+0x12c>
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	0a 94       	dec	r0
     4c4:	e2 f7       	brpl	.-8      	; 0x4be <DIO_u8SetPinDirection+0x128>
     4c6:	80 95       	com	r24
     4c8:	84 23       	and	r24, r20
     4ca:	8c 93       	st	X, r24
     4cc:	85 c0       	rjmp	.+266    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     4ce:	a7 e3       	ldi	r26, 0x37	; 55
     4d0:	b0 e0       	ldi	r27, 0x00	; 0
     4d2:	e7 e3       	ldi	r30, 0x37	; 55
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	48 2f       	mov	r20, r24
     4da:	8b 81       	ldd	r24, Y+3	; 0x03
     4dc:	28 2f       	mov	r18, r24
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	81 e0       	ldi	r24, 0x01	; 1
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	02 2e       	mov	r0, r18
     4e6:	02 c0       	rjmp	.+4      	; 0x4ec <DIO_u8SetPinDirection+0x156>
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	0a 94       	dec	r0
     4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <DIO_u8SetPinDirection+0x152>
     4f0:	84 2b       	or	r24, r20
     4f2:	8c 93       	st	X, r24
     4f4:	71 c0       	rjmp	.+226    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	28 2f       	mov	r18, r24
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	38 87       	std	Y+8, r19	; 0x08
     4fe:	2f 83       	std	Y+7, r18	; 0x07
     500:	8f 81       	ldd	r24, Y+7	; 0x07
     502:	98 85       	ldd	r25, Y+8	; 0x08
     504:	00 97       	sbiw	r24, 0x00	; 0
     506:	31 f0       	breq	.+12     	; 0x514 <DIO_u8SetPinDirection+0x17e>
     508:	2f 81       	ldd	r18, Y+7	; 0x07
     50a:	38 85       	ldd	r19, Y+8	; 0x08
     50c:	21 30       	cpi	r18, 0x01	; 1
     50e:	31 05       	cpc	r19, r1
     510:	b1 f0       	breq	.+44     	; 0x53e <DIO_u8SetPinDirection+0x1a8>
     512:	62 c0       	rjmp	.+196    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     514:	a4 e3       	ldi	r26, 0x34	; 52
     516:	b0 e0       	ldi	r27, 0x00	; 0
     518:	e4 e3       	ldi	r30, 0x34	; 52
     51a:	f0 e0       	ldi	r31, 0x00	; 0
     51c:	80 81       	ld	r24, Z
     51e:	48 2f       	mov	r20, r24
     520:	8b 81       	ldd	r24, Y+3	; 0x03
     522:	28 2f       	mov	r18, r24
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	02 2e       	mov	r0, r18
     52c:	02 c0       	rjmp	.+4      	; 0x532 <DIO_u8SetPinDirection+0x19c>
     52e:	88 0f       	add	r24, r24
     530:	99 1f       	adc	r25, r25
     532:	0a 94       	dec	r0
     534:	e2 f7       	brpl	.-8      	; 0x52e <DIO_u8SetPinDirection+0x198>
     536:	80 95       	com	r24
     538:	84 23       	and	r24, r20
     53a:	8c 93       	st	X, r24
     53c:	4d c0       	rjmp	.+154    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     53e:	a4 e3       	ldi	r26, 0x34	; 52
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	e4 e3       	ldi	r30, 0x34	; 52
     544:	f0 e0       	ldi	r31, 0x00	; 0
     546:	80 81       	ld	r24, Z
     548:	48 2f       	mov	r20, r24
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	28 2f       	mov	r18, r24
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	81 e0       	ldi	r24, 0x01	; 1
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	02 2e       	mov	r0, r18
     556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_u8SetPinDirection+0x1c6>
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	0a 94       	dec	r0
     55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_u8SetPinDirection+0x1c2>
     560:	84 2b       	or	r24, r20
     562:	8c 93       	st	X, r24
     564:	39 c0       	rjmp	.+114    	; 0x5d8 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	28 2f       	mov	r18, r24
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	3e 83       	std	Y+6, r19	; 0x06
     56e:	2d 83       	std	Y+5, r18	; 0x05
     570:	8d 81       	ldd	r24, Y+5	; 0x05
     572:	9e 81       	ldd	r25, Y+6	; 0x06
     574:	00 97       	sbiw	r24, 0x00	; 0
     576:	31 f0       	breq	.+12     	; 0x584 <DIO_u8SetPinDirection+0x1ee>
     578:	2d 81       	ldd	r18, Y+5	; 0x05
     57a:	3e 81       	ldd	r19, Y+6	; 0x06
     57c:	21 30       	cpi	r18, 0x01	; 1
     57e:	31 05       	cpc	r19, r1
     580:	b1 f0       	breq	.+44     	; 0x5ae <DIO_u8SetPinDirection+0x218>
     582:	2a c0       	rjmp	.+84     	; 0x5d8 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     584:	a1 e3       	ldi	r26, 0x31	; 49
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	e1 e3       	ldi	r30, 0x31	; 49
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	48 2f       	mov	r20, r24
     590:	8b 81       	ldd	r24, Y+3	; 0x03
     592:	28 2f       	mov	r18, r24
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	02 2e       	mov	r0, r18
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_u8SetPinDirection+0x20c>
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	0a 94       	dec	r0
     5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_u8SetPinDirection+0x208>
     5a6:	80 95       	com	r24
     5a8:	84 23       	and	r24, r20
     5aa:	8c 93       	st	X, r24
     5ac:	15 c0       	rjmp	.+42     	; 0x5d8 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     5ae:	a1 e3       	ldi	r26, 0x31	; 49
     5b0:	b0 e0       	ldi	r27, 0x00	; 0
     5b2:	e1 e3       	ldi	r30, 0x31	; 49
     5b4:	f0 e0       	ldi	r31, 0x00	; 0
     5b6:	80 81       	ld	r24, Z
     5b8:	48 2f       	mov	r20, r24
     5ba:	8b 81       	ldd	r24, Y+3	; 0x03
     5bc:	28 2f       	mov	r18, r24
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	02 2e       	mov	r0, r18
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_u8SetPinDirection+0x236>
     5c8:	88 0f       	add	r24, r24
     5ca:	99 1f       	adc	r25, r25
     5cc:	0a 94       	dec	r0
     5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_u8SetPinDirection+0x232>
     5d0:	84 2b       	or	r24, r20
     5d2:	8c 93       	st	X, r24
     5d4:	01 c0       	rjmp	.+2      	; 0x5d8 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     5d6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
}
     5da:	2e 96       	adiw	r28, 0x0e	; 14
     5dc:	0f b6       	in	r0, 0x3f	; 63
     5de:	f8 94       	cli
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	0f be       	out	0x3f, r0	; 63
     5e4:	cd bf       	out	0x3d, r28	; 61
     5e6:	cf 91       	pop	r28
     5e8:	df 91       	pop	r29
     5ea:	08 95       	ret

000005ec <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	cd b7       	in	r28, 0x3d	; 61
     5f2:	de b7       	in	r29, 0x3e	; 62
     5f4:	2e 97       	sbiw	r28, 0x0e	; 14
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	8a 83       	std	Y+2, r24	; 0x02
     602:	6b 83       	std	Y+3, r22	; 0x03
     604:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     60a:	8b 81       	ldd	r24, Y+3	; 0x03
     60c:	88 30       	cpi	r24, 0x08	; 8
     60e:	08 f0       	brcs	.+2      	; 0x612 <DIO_u8SetPinValue+0x26>
     610:	0c c1       	rjmp	.+536    	; 0x82a <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     612:	8a 81       	ldd	r24, Y+2	; 0x02
     614:	28 2f       	mov	r18, r24
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	3e 87       	std	Y+14, r19	; 0x0e
     61a:	2d 87       	std	Y+13, r18	; 0x0d
     61c:	8d 85       	ldd	r24, Y+13	; 0x0d
     61e:	9e 85       	ldd	r25, Y+14	; 0x0e
     620:	81 30       	cpi	r24, 0x01	; 1
     622:	91 05       	cpc	r25, r1
     624:	09 f4       	brne	.+2      	; 0x628 <DIO_u8SetPinValue+0x3c>
     626:	51 c0       	rjmp	.+162    	; 0x6ca <DIO_u8SetPinValue+0xde>
     628:	2d 85       	ldd	r18, Y+13	; 0x0d
     62a:	3e 85       	ldd	r19, Y+14	; 0x0e
     62c:	22 30       	cpi	r18, 0x02	; 2
     62e:	31 05       	cpc	r19, r1
     630:	2c f4       	brge	.+10     	; 0x63c <DIO_u8SetPinValue+0x50>
     632:	8d 85       	ldd	r24, Y+13	; 0x0d
     634:	9e 85       	ldd	r25, Y+14	; 0x0e
     636:	00 97       	sbiw	r24, 0x00	; 0
     638:	71 f0       	breq	.+28     	; 0x656 <DIO_u8SetPinValue+0x6a>
     63a:	f5 c0       	rjmp	.+490    	; 0x826 <DIO_u8SetPinValue+0x23a>
     63c:	2d 85       	ldd	r18, Y+13	; 0x0d
     63e:	3e 85       	ldd	r19, Y+14	; 0x0e
     640:	22 30       	cpi	r18, 0x02	; 2
     642:	31 05       	cpc	r19, r1
     644:	09 f4       	brne	.+2      	; 0x648 <DIO_u8SetPinValue+0x5c>
     646:	7b c0       	rjmp	.+246    	; 0x73e <DIO_u8SetPinValue+0x152>
     648:	8d 85       	ldd	r24, Y+13	; 0x0d
     64a:	9e 85       	ldd	r25, Y+14	; 0x0e
     64c:	83 30       	cpi	r24, 0x03	; 3
     64e:	91 05       	cpc	r25, r1
     650:	09 f4       	brne	.+2      	; 0x654 <DIO_u8SetPinValue+0x68>
     652:	af c0       	rjmp	.+350    	; 0x7b2 <DIO_u8SetPinValue+0x1c6>
     654:	e8 c0       	rjmp	.+464    	; 0x826 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     656:	8c 81       	ldd	r24, Y+4	; 0x04
     658:	28 2f       	mov	r18, r24
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	3c 87       	std	Y+12, r19	; 0x0c
     65e:	2b 87       	std	Y+11, r18	; 0x0b
     660:	8b 85       	ldd	r24, Y+11	; 0x0b
     662:	9c 85       	ldd	r25, Y+12	; 0x0c
     664:	00 97       	sbiw	r24, 0x00	; 0
     666:	31 f0       	breq	.+12     	; 0x674 <DIO_u8SetPinValue+0x88>
     668:	2b 85       	ldd	r18, Y+11	; 0x0b
     66a:	3c 85       	ldd	r19, Y+12	; 0x0c
     66c:	21 30       	cpi	r18, 0x01	; 1
     66e:	31 05       	cpc	r19, r1
     670:	b1 f0       	breq	.+44     	; 0x69e <DIO_u8SetPinValue+0xb2>
     672:	29 c0       	rjmp	.+82     	; 0x6c6 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     674:	ab e3       	ldi	r26, 0x3B	; 59
     676:	b0 e0       	ldi	r27, 0x00	; 0
     678:	eb e3       	ldi	r30, 0x3B	; 59
     67a:	f0 e0       	ldi	r31, 0x00	; 0
     67c:	80 81       	ld	r24, Z
     67e:	48 2f       	mov	r20, r24
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	28 2f       	mov	r18, r24
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	02 2e       	mov	r0, r18
     68c:	02 c0       	rjmp	.+4      	; 0x692 <DIO_u8SetPinValue+0xa6>
     68e:	88 0f       	add	r24, r24
     690:	99 1f       	adc	r25, r25
     692:	0a 94       	dec	r0
     694:	e2 f7       	brpl	.-8      	; 0x68e <DIO_u8SetPinValue+0xa2>
     696:	80 95       	com	r24
     698:	84 23       	and	r24, r20
     69a:	8c 93       	st	X, r24
     69c:	c7 c0       	rjmp	.+398    	; 0x82c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     69e:	ab e3       	ldi	r26, 0x3B	; 59
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	eb e3       	ldi	r30, 0x3B	; 59
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	80 81       	ld	r24, Z
     6a8:	48 2f       	mov	r20, r24
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	28 2f       	mov	r18, r24
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	02 2e       	mov	r0, r18
     6b6:	02 c0       	rjmp	.+4      	; 0x6bc <DIO_u8SetPinValue+0xd0>
     6b8:	88 0f       	add	r24, r24
     6ba:	99 1f       	adc	r25, r25
     6bc:	0a 94       	dec	r0
     6be:	e2 f7       	brpl	.-8      	; 0x6b8 <DIO_u8SetPinValue+0xcc>
     6c0:	84 2b       	or	r24, r20
     6c2:	8c 93       	st	X, r24
     6c4:	b3 c0       	rjmp	.+358    	; 0x82c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     6c6:	19 82       	std	Y+1, r1	; 0x01
     6c8:	b1 c0       	rjmp	.+354    	; 0x82c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
     6ca:	8c 81       	ldd	r24, Y+4	; 0x04
     6cc:	28 2f       	mov	r18, r24
     6ce:	30 e0       	ldi	r19, 0x00	; 0
     6d0:	3a 87       	std	Y+10, r19	; 0x0a
     6d2:	29 87       	std	Y+9, r18	; 0x09
     6d4:	89 85       	ldd	r24, Y+9	; 0x09
     6d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d8:	00 97       	sbiw	r24, 0x00	; 0
     6da:	31 f0       	breq	.+12     	; 0x6e8 <DIO_u8SetPinValue+0xfc>
     6dc:	29 85       	ldd	r18, Y+9	; 0x09
     6de:	3a 85       	ldd	r19, Y+10	; 0x0a
     6e0:	21 30       	cpi	r18, 0x01	; 1
     6e2:	31 05       	cpc	r19, r1
     6e4:	b1 f0       	breq	.+44     	; 0x712 <DIO_u8SetPinValue+0x126>
     6e6:	29 c0       	rjmp	.+82     	; 0x73a <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     6e8:	a8 e3       	ldi	r26, 0x38	; 56
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	e8 e3       	ldi	r30, 0x38	; 56
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	48 2f       	mov	r20, r24
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	28 2f       	mov	r18, r24
     6f8:	30 e0       	ldi	r19, 0x00	; 0
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	02 2e       	mov	r0, r18
     700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_u8SetPinValue+0x11a>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	0a 94       	dec	r0
     708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_u8SetPinValue+0x116>
     70a:	80 95       	com	r24
     70c:	84 23       	and	r24, r20
     70e:	8c 93       	st	X, r24
     710:	8d c0       	rjmp	.+282    	; 0x82c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     712:	a8 e3       	ldi	r26, 0x38	; 56
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	e8 e3       	ldi	r30, 0x38	; 56
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	48 2f       	mov	r20, r24
     71e:	8b 81       	ldd	r24, Y+3	; 0x03
     720:	28 2f       	mov	r18, r24
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	02 2e       	mov	r0, r18
     72a:	02 c0       	rjmp	.+4      	; 0x730 <DIO_u8SetPinValue+0x144>
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	0a 94       	dec	r0
     732:	e2 f7       	brpl	.-8      	; 0x72c <DIO_u8SetPinValue+0x140>
     734:	84 2b       	or	r24, r20
     736:	8c 93       	st	X, r24
     738:	79 c0       	rjmp	.+242    	; 0x82c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     73a:	19 82       	std	Y+1, r1	; 0x01
     73c:	77 c0       	rjmp	.+238    	; 0x82c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
     73e:	8c 81       	ldd	r24, Y+4	; 0x04
     740:	28 2f       	mov	r18, r24
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	38 87       	std	Y+8, r19	; 0x08
     746:	2f 83       	std	Y+7, r18	; 0x07
     748:	8f 81       	ldd	r24, Y+7	; 0x07
     74a:	98 85       	ldd	r25, Y+8	; 0x08
     74c:	00 97       	sbiw	r24, 0x00	; 0
     74e:	31 f0       	breq	.+12     	; 0x75c <DIO_u8SetPinValue+0x170>
     750:	2f 81       	ldd	r18, Y+7	; 0x07
     752:	38 85       	ldd	r19, Y+8	; 0x08
     754:	21 30       	cpi	r18, 0x01	; 1
     756:	31 05       	cpc	r19, r1
     758:	b1 f0       	breq	.+44     	; 0x786 <DIO_u8SetPinValue+0x19a>
     75a:	29 c0       	rjmp	.+82     	; 0x7ae <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     75c:	a5 e3       	ldi	r26, 0x35	; 53
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	e5 e3       	ldi	r30, 0x35	; 53
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	48 2f       	mov	r20, r24
     768:	8b 81       	ldd	r24, Y+3	; 0x03
     76a:	28 2f       	mov	r18, r24
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	02 2e       	mov	r0, r18
     774:	02 c0       	rjmp	.+4      	; 0x77a <DIO_u8SetPinValue+0x18e>
     776:	88 0f       	add	r24, r24
     778:	99 1f       	adc	r25, r25
     77a:	0a 94       	dec	r0
     77c:	e2 f7       	brpl	.-8      	; 0x776 <DIO_u8SetPinValue+0x18a>
     77e:	80 95       	com	r24
     780:	84 23       	and	r24, r20
     782:	8c 93       	st	X, r24
     784:	53 c0       	rjmp	.+166    	; 0x82c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     786:	a5 e3       	ldi	r26, 0x35	; 53
     788:	b0 e0       	ldi	r27, 0x00	; 0
     78a:	e5 e3       	ldi	r30, 0x35	; 53
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	48 2f       	mov	r20, r24
     792:	8b 81       	ldd	r24, Y+3	; 0x03
     794:	28 2f       	mov	r18, r24
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	02 2e       	mov	r0, r18
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <DIO_u8SetPinValue+0x1b8>
     7a0:	88 0f       	add	r24, r24
     7a2:	99 1f       	adc	r25, r25
     7a4:	0a 94       	dec	r0
     7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <DIO_u8SetPinValue+0x1b4>
     7a8:	84 2b       	or	r24, r20
     7aa:	8c 93       	st	X, r24
     7ac:	3f c0       	rjmp	.+126    	; 0x82c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     7ae:	19 82       	std	Y+1, r1	; 0x01
     7b0:	3d c0       	rjmp	.+122    	; 0x82c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
     7b2:	8c 81       	ldd	r24, Y+4	; 0x04
     7b4:	28 2f       	mov	r18, r24
     7b6:	30 e0       	ldi	r19, 0x00	; 0
     7b8:	3e 83       	std	Y+6, r19	; 0x06
     7ba:	2d 83       	std	Y+5, r18	; 0x05
     7bc:	8d 81       	ldd	r24, Y+5	; 0x05
     7be:	9e 81       	ldd	r25, Y+6	; 0x06
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	31 f0       	breq	.+12     	; 0x7d0 <DIO_u8SetPinValue+0x1e4>
     7c4:	2d 81       	ldd	r18, Y+5	; 0x05
     7c6:	3e 81       	ldd	r19, Y+6	; 0x06
     7c8:	21 30       	cpi	r18, 0x01	; 1
     7ca:	31 05       	cpc	r19, r1
     7cc:	b1 f0       	breq	.+44     	; 0x7fa <DIO_u8SetPinValue+0x20e>
     7ce:	29 c0       	rjmp	.+82     	; 0x822 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     7d0:	a2 e3       	ldi	r26, 0x32	; 50
     7d2:	b0 e0       	ldi	r27, 0x00	; 0
     7d4:	e2 e3       	ldi	r30, 0x32	; 50
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 81       	ld	r24, Z
     7da:	48 2f       	mov	r20, r24
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	28 2f       	mov	r18, r24
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	02 2e       	mov	r0, r18
     7e8:	02 c0       	rjmp	.+4      	; 0x7ee <DIO_u8SetPinValue+0x202>
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	0a 94       	dec	r0
     7f0:	e2 f7       	brpl	.-8      	; 0x7ea <DIO_u8SetPinValue+0x1fe>
     7f2:	80 95       	com	r24
     7f4:	84 23       	and	r24, r20
     7f6:	8c 93       	st	X, r24
     7f8:	19 c0       	rjmp	.+50     	; 0x82c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     7fa:	a2 e3       	ldi	r26, 0x32	; 50
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e2 e3       	ldi	r30, 0x32	; 50
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	80 81       	ld	r24, Z
     804:	48 2f       	mov	r20, r24
     806:	8b 81       	ldd	r24, Y+3	; 0x03
     808:	28 2f       	mov	r18, r24
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	02 2e       	mov	r0, r18
     812:	02 c0       	rjmp	.+4      	; 0x818 <DIO_u8SetPinValue+0x22c>
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	0a 94       	dec	r0
     81a:	e2 f7       	brpl	.-8      	; 0x814 <DIO_u8SetPinValue+0x228>
     81c:	84 2b       	or	r24, r20
     81e:	8c 93       	st	X, r24
     820:	05 c0       	rjmp	.+10     	; 0x82c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     822:	19 82       	std	Y+1, r1	; 0x01
     824:	03 c0       	rjmp	.+6      	; 0x82c <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     826:	19 82       	std	Y+1, r1	; 0x01
     828:	01 c0       	rjmp	.+2      	; 0x82c <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     82a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     82c:	89 81       	ldd	r24, Y+1	; 0x01
}
     82e:	2e 96       	adiw	r28, 0x0e	; 14
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	cf 91       	pop	r28
     83c:	df 91       	pop	r29
     83e:	08 95       	ret

00000840 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
     840:	df 93       	push	r29
     842:	cf 93       	push	r28
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	28 97       	sbiw	r28, 0x08	; 8
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	8b 83       	std	Y+3, r24	; 0x03
     856:	6c 83       	std	Y+4, r22	; 0x04
     858:	5e 83       	std	Y+6, r21	; 0x06
     85a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	84 30       	cpi	r24, 0x04	; 4
     864:	08 f0       	brcs	.+2      	; 0x868 <__stack+0x9>
     866:	a1 c0       	rjmp	.+322    	; 0x9aa <__stack+0x14b>
     868:	8c 81       	ldd	r24, Y+4	; 0x04
     86a:	88 30       	cpi	r24, 0x08	; 8
     86c:	08 f0       	brcs	.+2      	; 0x870 <__stack+0x11>
     86e:	9d c0       	rjmp	.+314    	; 0x9aa <__stack+0x14b>
     870:	8d 81       	ldd	r24, Y+5	; 0x05
     872:	9e 81       	ldd	r25, Y+6	; 0x06
     874:	00 97       	sbiw	r24, 0x00	; 0
     876:	09 f4       	brne	.+2      	; 0x87a <__stack+0x1b>
     878:	98 c0       	rjmp	.+304    	; 0x9aa <__stack+0x14b>
	{
		switch(Copy_u8PortId)
     87a:	8b 81       	ldd	r24, Y+3	; 0x03
     87c:	28 2f       	mov	r18, r24
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	38 87       	std	Y+8, r19	; 0x08
     882:	2f 83       	std	Y+7, r18	; 0x07
     884:	4f 81       	ldd	r20, Y+7	; 0x07
     886:	58 85       	ldd	r21, Y+8	; 0x08
     888:	41 30       	cpi	r20, 0x01	; 1
     88a:	51 05       	cpc	r21, r1
     88c:	a9 f1       	breq	.+106    	; 0x8f8 <__stack+0x99>
     88e:	8f 81       	ldd	r24, Y+7	; 0x07
     890:	98 85       	ldd	r25, Y+8	; 0x08
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	91 05       	cpc	r25, r1
     896:	34 f4       	brge	.+12     	; 0x8a4 <__stack+0x45>
     898:	2f 81       	ldd	r18, Y+7	; 0x07
     89a:	38 85       	ldd	r19, Y+8	; 0x08
     89c:	21 15       	cp	r18, r1
     89e:	31 05       	cpc	r19, r1
     8a0:	71 f0       	breq	.+28     	; 0x8be <__stack+0x5f>
     8a2:	81 c0       	rjmp	.+258    	; 0x9a6 <__stack+0x147>
     8a4:	4f 81       	ldd	r20, Y+7	; 0x07
     8a6:	58 85       	ldd	r21, Y+8	; 0x08
     8a8:	42 30       	cpi	r20, 0x02	; 2
     8aa:	51 05       	cpc	r21, r1
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <__stack+0x51>
     8ae:	41 c0       	rjmp	.+130    	; 0x932 <__stack+0xd3>
     8b0:	8f 81       	ldd	r24, Y+7	; 0x07
     8b2:	98 85       	ldd	r25, Y+8	; 0x08
     8b4:	83 30       	cpi	r24, 0x03	; 3
     8b6:	91 05       	cpc	r25, r1
     8b8:	09 f4       	brne	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	58 c0       	rjmp	.+176    	; 0x96c <__stack+0x10d>
     8bc:	74 c0       	rjmp	.+232    	; 0x9a6 <__stack+0x147>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
     8be:	e9 e3       	ldi	r30, 0x39	; 57
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	28 2f       	mov	r18, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ca:	88 2f       	mov	r24, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	a9 01       	movw	r20, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
     8d2:	55 95       	asr	r21
     8d4:	47 95       	ror	r20
     8d6:	8a 95       	dec	r24
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
     8da:	ca 01       	movw	r24, r20
     8dc:	81 70       	andi	r24, 0x01	; 1
     8de:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     8e0:	89 81       	ldd	r24, Y+1	; 0x01
     8e2:	88 23       	and	r24, r24
     8e4:	21 f4       	brne	.+8      	; 0x8ee <__stack+0x8f>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     8e6:	ed 81       	ldd	r30, Y+5	; 0x05
     8e8:	fe 81       	ldd	r31, Y+6	; 0x06
     8ea:	10 82       	st	Z, r1
     8ec:	5f c0       	rjmp	.+190    	; 0x9ac <__stack+0x14d>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     8ee:	ed 81       	ldd	r30, Y+5	; 0x05
     8f0:	fe 81       	ldd	r31, Y+6	; 0x06
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	80 83       	st	Z, r24
     8f6:	5a c0       	rjmp	.+180    	; 0x9ac <__stack+0x14d>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
     8f8:	e6 e3       	ldi	r30, 0x36	; 54
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	28 2f       	mov	r18, r24
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	8c 81       	ldd	r24, Y+4	; 0x04
     904:	88 2f       	mov	r24, r24
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	a9 01       	movw	r20, r18
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0xb1>
     90c:	55 95       	asr	r21
     90e:	47 95       	ror	r20
     910:	8a 95       	dec	r24
     912:	e2 f7       	brpl	.-8      	; 0x90c <__stack+0xad>
     914:	ca 01       	movw	r24, r20
     916:	81 70       	andi	r24, 0x01	; 1
     918:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     91a:	89 81       	ldd	r24, Y+1	; 0x01
     91c:	88 23       	and	r24, r24
     91e:	21 f4       	brne	.+8      	; 0x928 <__stack+0xc9>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     920:	ed 81       	ldd	r30, Y+5	; 0x05
     922:	fe 81       	ldd	r31, Y+6	; 0x06
     924:	10 82       	st	Z, r1
     926:	42 c0       	rjmp	.+132    	; 0x9ac <__stack+0x14d>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     928:	ed 81       	ldd	r30, Y+5	; 0x05
     92a:	fe 81       	ldd	r31, Y+6	; 0x06
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 83       	st	Z, r24
     930:	3d c0       	rjmp	.+122    	; 0x9ac <__stack+0x14d>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
     932:	e3 e3       	ldi	r30, 0x33	; 51
     934:	f0 e0       	ldi	r31, 0x00	; 0
     936:	80 81       	ld	r24, Z
     938:	28 2f       	mov	r18, r24
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	8c 81       	ldd	r24, Y+4	; 0x04
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a9 01       	movw	r20, r18
     944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0xeb>
     946:	55 95       	asr	r21
     948:	47 95       	ror	r20
     94a:	8a 95       	dec	r24
     94c:	e2 f7       	brpl	.-8      	; 0x946 <__stack+0xe7>
     94e:	ca 01       	movw	r24, r20
     950:	81 70       	andi	r24, 0x01	; 1
     952:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     954:	89 81       	ldd	r24, Y+1	; 0x01
     956:	88 23       	and	r24, r24
     958:	21 f4       	brne	.+8      	; 0x962 <__stack+0x103>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     95a:	ed 81       	ldd	r30, Y+5	; 0x05
     95c:	fe 81       	ldd	r31, Y+6	; 0x06
     95e:	10 82       	st	Z, r1
     960:	25 c0       	rjmp	.+74     	; 0x9ac <__stack+0x14d>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     962:	ed 81       	ldd	r30, Y+5	; 0x05
     964:	fe 81       	ldd	r31, Y+6	; 0x06
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	80 83       	st	Z, r24
     96a:	20 c0       	rjmp	.+64     	; 0x9ac <__stack+0x14d>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
     96c:	e0 e3       	ldi	r30, 0x30	; 48
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	80 81       	ld	r24, Z
     972:	28 2f       	mov	r18, r24
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	8c 81       	ldd	r24, Y+4	; 0x04
     978:	88 2f       	mov	r24, r24
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	a9 01       	movw	r20, r18
     97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x125>
     980:	55 95       	asr	r21
     982:	47 95       	ror	r20
     984:	8a 95       	dec	r24
     986:	e2 f7       	brpl	.-8      	; 0x980 <__stack+0x121>
     988:	ca 01       	movw	r24, r20
     98a:	81 70       	andi	r24, 0x01	; 1
     98c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	88 23       	and	r24, r24
     992:	21 f4       	brne	.+8      	; 0x99c <__stack+0x13d>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     994:	ed 81       	ldd	r30, Y+5	; 0x05
     996:	fe 81       	ldd	r31, Y+6	; 0x06
     998:	10 82       	st	Z, r1
     99a:	08 c0       	rjmp	.+16     	; 0x9ac <__stack+0x14d>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     99c:	ed 81       	ldd	r30, Y+5	; 0x05
     99e:	fe 81       	ldd	r31, Y+6	; 0x06
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	80 83       	st	Z, r24
     9a4:	03 c0       	rjmp	.+6      	; 0x9ac <__stack+0x14d>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
     9a6:	1a 82       	std	Y+2, r1	; 0x02
     9a8:	01 c0       	rjmp	.+2      	; 0x9ac <__stack+0x14d>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     9aa:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
     9ac:	8a 81       	ldd	r24, Y+2	; 0x02
}
     9ae:	28 96       	adiw	r28, 0x08	; 8
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	cf 91       	pop	r28
     9bc:	df 91       	pop	r29
     9be:	08 95       	ret

000009c0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
     9c0:	df 93       	push	r29
     9c2:	cf 93       	push	r28
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	2d 97       	sbiw	r28, 0x0d	; 13
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	8a 83       	std	Y+2, r24	; 0x02
     9d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
     9dc:	8b 81       	ldd	r24, Y+3	; 0x03
     9de:	88 23       	and	r24, r24
     9e0:	21 f0       	breq	.+8      	; 0x9ea <DIO_u8SetPortDirection+0x2a>
     9e2:	8b 81       	ldd	r24, Y+3	; 0x03
     9e4:	81 30       	cpi	r24, 0x01	; 1
     9e6:	09 f0       	breq	.+2      	; 0x9ea <DIO_u8SetPortDirection+0x2a>
     9e8:	82 c0       	rjmp	.+260    	; 0xaee <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
     9ea:	8a 81       	ldd	r24, Y+2	; 0x02
     9ec:	28 2f       	mov	r18, r24
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	3d 87       	std	Y+13, r19	; 0x0d
     9f2:	2c 87       	std	Y+12, r18	; 0x0c
     9f4:	8c 85       	ldd	r24, Y+12	; 0x0c
     9f6:	9d 85       	ldd	r25, Y+13	; 0x0d
     9f8:	81 30       	cpi	r24, 0x01	; 1
     9fa:	91 05       	cpc	r25, r1
     9fc:	71 f1       	breq	.+92     	; 0xa5a <DIO_u8SetPortDirection+0x9a>
     9fe:	2c 85       	ldd	r18, Y+12	; 0x0c
     a00:	3d 85       	ldd	r19, Y+13	; 0x0d
     a02:	22 30       	cpi	r18, 0x02	; 2
     a04:	31 05       	cpc	r19, r1
     a06:	2c f4       	brge	.+10     	; 0xa12 <DIO_u8SetPortDirection+0x52>
     a08:	8c 85       	ldd	r24, Y+12	; 0x0c
     a0a:	9d 85       	ldd	r25, Y+13	; 0x0d
     a0c:	00 97       	sbiw	r24, 0x00	; 0
     a0e:	69 f0       	breq	.+26     	; 0xa2a <DIO_u8SetPortDirection+0x6a>
     a10:	6c c0       	rjmp	.+216    	; 0xaea <DIO_u8SetPortDirection+0x12a>
     a12:	2c 85       	ldd	r18, Y+12	; 0x0c
     a14:	3d 85       	ldd	r19, Y+13	; 0x0d
     a16:	22 30       	cpi	r18, 0x02	; 2
     a18:	31 05       	cpc	r19, r1
     a1a:	b9 f1       	breq	.+110    	; 0xa8a <DIO_u8SetPortDirection+0xca>
     a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     a1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     a20:	83 30       	cpi	r24, 0x03	; 3
     a22:	91 05       	cpc	r25, r1
     a24:	09 f4       	brne	.+2      	; 0xa28 <DIO_u8SetPortDirection+0x68>
     a26:	49 c0       	rjmp	.+146    	; 0xaba <DIO_u8SetPortDirection+0xfa>
     a28:	60 c0       	rjmp	.+192    	; 0xaea <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
     a2a:	8b 81       	ldd	r24, Y+3	; 0x03
     a2c:	28 2f       	mov	r18, r24
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	3b 87       	std	Y+11, r19	; 0x0b
     a32:	2a 87       	std	Y+10, r18	; 0x0a
     a34:	8a 85       	ldd	r24, Y+10	; 0x0a
     a36:	9b 85       	ldd	r25, Y+11	; 0x0b
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	31 f0       	breq	.+12     	; 0xa48 <DIO_u8SetPortDirection+0x88>
     a3c:	2a 85       	ldd	r18, Y+10	; 0x0a
     a3e:	3b 85       	ldd	r19, Y+11	; 0x0b
     a40:	21 30       	cpi	r18, 0x01	; 1
     a42:	31 05       	cpc	r19, r1
     a44:	29 f0       	breq	.+10     	; 0xa50 <DIO_u8SetPortDirection+0x90>
     a46:	54 c0       	rjmp	.+168    	; 0xaf0 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
     a48:	ea e3       	ldi	r30, 0x3A	; 58
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	10 82       	st	Z, r1
     a4e:	50 c0       	rjmp	.+160    	; 0xaf0 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
     a50:	ea e3       	ldi	r30, 0x3A	; 58
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	80 83       	st	Z, r24
     a58:	4b c0       	rjmp	.+150    	; 0xaf0 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	39 87       	std	Y+9, r19	; 0x09
     a62:	28 87       	std	Y+8, r18	; 0x08
     a64:	88 85       	ldd	r24, Y+8	; 0x08
     a66:	99 85       	ldd	r25, Y+9	; 0x09
     a68:	00 97       	sbiw	r24, 0x00	; 0
     a6a:	31 f0       	breq	.+12     	; 0xa78 <DIO_u8SetPortDirection+0xb8>
     a6c:	28 85       	ldd	r18, Y+8	; 0x08
     a6e:	39 85       	ldd	r19, Y+9	; 0x09
     a70:	21 30       	cpi	r18, 0x01	; 1
     a72:	31 05       	cpc	r19, r1
     a74:	29 f0       	breq	.+10     	; 0xa80 <DIO_u8SetPortDirection+0xc0>
     a76:	3c c0       	rjmp	.+120    	; 0xaf0 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
     a78:	e7 e3       	ldi	r30, 0x37	; 55
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	10 82       	st	Z, r1
     a7e:	38 c0       	rjmp	.+112    	; 0xaf0 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
     a80:	e7 e3       	ldi	r30, 0x37	; 55
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	8f ef       	ldi	r24, 0xFF	; 255
     a86:	80 83       	st	Z, r24
     a88:	33 c0       	rjmp	.+102    	; 0xaf0 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
     a8a:	8b 81       	ldd	r24, Y+3	; 0x03
     a8c:	28 2f       	mov	r18, r24
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	3f 83       	std	Y+7, r19	; 0x07
     a92:	2e 83       	std	Y+6, r18	; 0x06
     a94:	8e 81       	ldd	r24, Y+6	; 0x06
     a96:	9f 81       	ldd	r25, Y+7	; 0x07
     a98:	00 97       	sbiw	r24, 0x00	; 0
     a9a:	31 f0       	breq	.+12     	; 0xaa8 <DIO_u8SetPortDirection+0xe8>
     a9c:	2e 81       	ldd	r18, Y+6	; 0x06
     a9e:	3f 81       	ldd	r19, Y+7	; 0x07
     aa0:	21 30       	cpi	r18, 0x01	; 1
     aa2:	31 05       	cpc	r19, r1
     aa4:	29 f0       	breq	.+10     	; 0xab0 <DIO_u8SetPortDirection+0xf0>
     aa6:	24 c0       	rjmp	.+72     	; 0xaf0 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
     aa8:	e4 e3       	ldi	r30, 0x34	; 52
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	10 82       	st	Z, r1
     aae:	20 c0       	rjmp	.+64     	; 0xaf0 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
     ab0:	e4 e3       	ldi	r30, 0x34	; 52
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	8f ef       	ldi	r24, 0xFF	; 255
     ab6:	80 83       	st	Z, r24
     ab8:	1b c0       	rjmp	.+54     	; 0xaf0 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
     aba:	8b 81       	ldd	r24, Y+3	; 0x03
     abc:	28 2f       	mov	r18, r24
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	3d 83       	std	Y+5, r19	; 0x05
     ac2:	2c 83       	std	Y+4, r18	; 0x04
     ac4:	8c 81       	ldd	r24, Y+4	; 0x04
     ac6:	9d 81       	ldd	r25, Y+5	; 0x05
     ac8:	00 97       	sbiw	r24, 0x00	; 0
     aca:	31 f0       	breq	.+12     	; 0xad8 <DIO_u8SetPortDirection+0x118>
     acc:	2c 81       	ldd	r18, Y+4	; 0x04
     ace:	3d 81       	ldd	r19, Y+5	; 0x05
     ad0:	21 30       	cpi	r18, 0x01	; 1
     ad2:	31 05       	cpc	r19, r1
     ad4:	29 f0       	breq	.+10     	; 0xae0 <DIO_u8SetPortDirection+0x120>
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
     ad8:	e1 e3       	ldi	r30, 0x31	; 49
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	10 82       	st	Z, r1
     ade:	08 c0       	rjmp	.+16     	; 0xaf0 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
     ae0:	e1 e3       	ldi	r30, 0x31	; 49
     ae2:	f0 e0       	ldi	r31, 0x00	; 0
     ae4:	8f ef       	ldi	r24, 0xFF	; 255
     ae6:	80 83       	st	Z, r24
     ae8:	03 c0       	rjmp	.+6      	; 0xaf0 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
     aea:	19 82       	std	Y+1, r1	; 0x01
     aec:	01 c0       	rjmp	.+2      	; 0xaf0 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     aee:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     af0:	89 81       	ldd	r24, Y+1	; 0x01
}
     af2:	2d 96       	adiw	r28, 0x0d	; 13
     af4:	0f b6       	in	r0, 0x3f	; 63
     af6:	f8 94       	cli
     af8:	de bf       	out	0x3e, r29	; 62
     afa:	0f be       	out	0x3f, r0	; 63
     afc:	cd bf       	out	0x3d, r28	; 61
     afe:	cf 91       	pop	r28
     b00:	df 91       	pop	r29
     b02:	08 95       	ret

00000b04 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
     b04:	df 93       	push	r29
     b06:	cf 93       	push	r28
     b08:	00 d0       	rcall	.+0      	; 0xb0a <DIO_u8SetPortValue+0x6>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <DIO_u8SetPortValue+0x8>
     b0c:	0f 92       	push	r0
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	8a 83       	std	Y+2, r24	; 0x02
     b14:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
     b1a:	8a 81       	ldd	r24, Y+2	; 0x02
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	3d 83       	std	Y+5, r19	; 0x05
     b22:	2c 83       	std	Y+4, r18	; 0x04
     b24:	8c 81       	ldd	r24, Y+4	; 0x04
     b26:	9d 81       	ldd	r25, Y+5	; 0x05
     b28:	81 30       	cpi	r24, 0x01	; 1
     b2a:	91 05       	cpc	r25, r1
     b2c:	d1 f0       	breq	.+52     	; 0xb62 <DIO_u8SetPortValue+0x5e>
     b2e:	2c 81       	ldd	r18, Y+4	; 0x04
     b30:	3d 81       	ldd	r19, Y+5	; 0x05
     b32:	22 30       	cpi	r18, 0x02	; 2
     b34:	31 05       	cpc	r19, r1
     b36:	2c f4       	brge	.+10     	; 0xb42 <DIO_u8SetPortValue+0x3e>
     b38:	8c 81       	ldd	r24, Y+4	; 0x04
     b3a:	9d 81       	ldd	r25, Y+5	; 0x05
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	61 f0       	breq	.+24     	; 0xb58 <DIO_u8SetPortValue+0x54>
     b40:	1f c0       	rjmp	.+62     	; 0xb80 <DIO_u8SetPortValue+0x7c>
     b42:	2c 81       	ldd	r18, Y+4	; 0x04
     b44:	3d 81       	ldd	r19, Y+5	; 0x05
     b46:	22 30       	cpi	r18, 0x02	; 2
     b48:	31 05       	cpc	r19, r1
     b4a:	81 f0       	breq	.+32     	; 0xb6c <DIO_u8SetPortValue+0x68>
     b4c:	8c 81       	ldd	r24, Y+4	; 0x04
     b4e:	9d 81       	ldd	r25, Y+5	; 0x05
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	91 05       	cpc	r25, r1
     b54:	81 f0       	breq	.+32     	; 0xb76 <DIO_u8SetPortValue+0x72>
     b56:	14 c0       	rjmp	.+40     	; 0xb80 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
     b58:	eb e3       	ldi	r30, 0x3B	; 59
     b5a:	f0 e0       	ldi	r31, 0x00	; 0
     b5c:	8b 81       	ldd	r24, Y+3	; 0x03
     b5e:	80 83       	st	Z, r24
     b60:	10 c0       	rjmp	.+32     	; 0xb82 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
     b62:	e8 e3       	ldi	r30, 0x38	; 56
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	80 83       	st	Z, r24
     b6a:	0b c0       	rjmp	.+22     	; 0xb82 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
     b6c:	e5 e3       	ldi	r30, 0x35	; 53
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	80 83       	st	Z, r24
     b74:	06 c0       	rjmp	.+12     	; 0xb82 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
     b76:	e2 e3       	ldi	r30, 0x32	; 50
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	8b 81       	ldd	r24, Y+3	; 0x03
     b7c:	80 83       	st	Z, r24
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
     b80:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     b82:	89 81       	ldd	r24, Y+1	; 0x01
}
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	cf 91       	pop	r28
     b90:	df 91       	pop	r29
     b92:	08 95       	ret

00000b94 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
     b94:	df 93       	push	r29
     b96:	cf 93       	push	r28
     b98:	00 d0       	rcall	.+0      	; 0xb9a <DIO_u8GetPortValue+0x6>
     b9a:	00 d0       	rcall	.+0      	; 0xb9c <DIO_u8GetPortValue+0x8>
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <DIO_u8GetPortValue+0xa>
     b9e:	cd b7       	in	r28, 0x3d	; 61
     ba0:	de b7       	in	r29, 0x3e	; 62
     ba2:	8a 83       	std	Y+2, r24	; 0x02
     ba4:	7c 83       	std	Y+4, r23	; 0x04
     ba6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	9c 81       	ldd	r25, Y+4	; 0x04
     bb0:	00 97       	sbiw	r24, 0x00	; 0
     bb2:	e9 f1       	breq	.+122    	; 0xc2e <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	3e 83       	std	Y+6, r19	; 0x06
     bbc:	2d 83       	std	Y+5, r18	; 0x05
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	9e 81       	ldd	r25, Y+6	; 0x06
     bc2:	81 30       	cpi	r24, 0x01	; 1
     bc4:	91 05       	cpc	r25, r1
     bc6:	e1 f0       	breq	.+56     	; 0xc00 <DIO_u8GetPortValue+0x6c>
     bc8:	2d 81       	ldd	r18, Y+5	; 0x05
     bca:	3e 81       	ldd	r19, Y+6	; 0x06
     bcc:	22 30       	cpi	r18, 0x02	; 2
     bce:	31 05       	cpc	r19, r1
     bd0:	2c f4       	brge	.+10     	; 0xbdc <DIO_u8GetPortValue+0x48>
     bd2:	8d 81       	ldd	r24, Y+5	; 0x05
     bd4:	9e 81       	ldd	r25, Y+6	; 0x06
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	61 f0       	breq	.+24     	; 0xbf2 <DIO_u8GetPortValue+0x5e>
     bda:	27 c0       	rjmp	.+78     	; 0xc2a <DIO_u8GetPortValue+0x96>
     bdc:	2d 81       	ldd	r18, Y+5	; 0x05
     bde:	3e 81       	ldd	r19, Y+6	; 0x06
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	a1 f0       	breq	.+40     	; 0xc0e <DIO_u8GetPortValue+0x7a>
     be6:	8d 81       	ldd	r24, Y+5	; 0x05
     be8:	9e 81       	ldd	r25, Y+6	; 0x06
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	91 05       	cpc	r25, r1
     bee:	b1 f0       	breq	.+44     	; 0xc1c <DIO_u8GetPortValue+0x88>
     bf0:	1c c0       	rjmp	.+56     	; 0xc2a <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
     bf2:	e9 e3       	ldi	r30, 0x39	; 57
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	eb 81       	ldd	r30, Y+3	; 0x03
     bfa:	fc 81       	ldd	r31, Y+4	; 0x04
     bfc:	80 83       	st	Z, r24
     bfe:	18 c0       	rjmp	.+48     	; 0xc30 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
     c00:	e6 e3       	ldi	r30, 0x36	; 54
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	eb 81       	ldd	r30, Y+3	; 0x03
     c08:	fc 81       	ldd	r31, Y+4	; 0x04
     c0a:	80 83       	st	Z, r24
     c0c:	11 c0       	rjmp	.+34     	; 0xc30 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
     c0e:	e3 e3       	ldi	r30, 0x33	; 51
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	eb 81       	ldd	r30, Y+3	; 0x03
     c16:	fc 81       	ldd	r31, Y+4	; 0x04
     c18:	80 83       	st	Z, r24
     c1a:	0a c0       	rjmp	.+20     	; 0xc30 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
     c1c:	e0 e3       	ldi	r30, 0x30	; 48
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	eb 81       	ldd	r30, Y+3	; 0x03
     c24:	fc 81       	ldd	r31, Y+4	; 0x04
     c26:	80 83       	st	Z, r24
     c28:	03 c0       	rjmp	.+6      	; 0xc30 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
     c2a:	19 82       	std	Y+1, r1	; 0x01
     c2c:	01 c0       	rjmp	.+2      	; 0xc30 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     c2e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     c30:	89 81       	ldd	r24, Y+1	; 0x01
     c32:	26 96       	adiw	r28, 0x06	; 6
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	cf 91       	pop	r28
     c40:	df 91       	pop	r29
     c42:	08 95       	ret

00000c44 <GI_voidEnableGI>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidEnableGI(void)
{
     c44:	df 93       	push	r29
     c46:	cf 93       	push	r28
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
     c4c:	af e5       	ldi	r26, 0x5F	; 95
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	ef e5       	ldi	r30, 0x5F	; 95
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	80 68       	ori	r24, 0x80	; 128
     c58:	8c 93       	st	X, r24
}
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <GI_voidDisableGI>:

void GI_voidDisableGI(void)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
     c68:	af e5       	ldi	r26, 0x5F	; 95
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	ef e5       	ldi	r30, 0x5F	; 95
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	8f 77       	andi	r24, 0x7F	; 127
     c74:	8c 93       	st	X, r24
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	08 95       	ret

00000c7c <TIMERS_voidTimer0Init>:
static void (*TIMERS_pfTimer1CTC_COMPA)(void) = NULL;
static void (*TIMERS_pfTimer1CAPT)(void) = NULL;
static void (*TIMERS_pfTimer1CTC_COMPB)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Normal Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Select Mode => CTC Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
     c84:	a3 e5       	ldi	r26, 0x53	; 83
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e3 e5       	ldi	r30, 0x53	; 83
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	8f 7b       	andi	r24, 0xBF	; 191
     c90:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
     c92:	a3 e5       	ldi	r26, 0x53	; 83
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e3 e5       	ldi	r30, 0x53	; 83
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	88 60       	ori	r24, 0x08	; 8
     c9e:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,0);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Enable CTC Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,1);
     ca0:	a9 e5       	ldi	r26, 0x59	; 89
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e9 e5       	ldi	r30, 0x59	; 89
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	82 60       	ori	r24, 0x02	; 2
     cac:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Set Preload Value */
	TIMERS_u8_TCNT0_REG = TIMERS_u8_TIMER0_PRELOAD_VALUE;
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMERS_u8_TIMER0_COMPARE_MATCH_OCR0;
     cae:	ec e5       	ldi	r30, 0x5C	; 92
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	83 e6       	ldi	r24, 0x63	; 99
     cb4:	80 83       	st	Z, r24
#endif

#if TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR0_REG,5);
     cb6:	a3 e5       	ldi	r26, 0x53	; 83
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e3 e5       	ldi	r30, 0x53	; 83
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	8f 7d       	andi	r24, 0xDF	; 223
     cc2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
     cc4:	a3 e5       	ldi	r26, 0x53	; 83
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e3 e5       	ldi	r30, 0x53	; 83
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 7e       	andi	r24, 0xEF	; 239
     cd0:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#elif TIMERS_u8_TIMER0_CLOCK_SOURCE == TIMERS_u8_TIMER0_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
     cd2:	a3 e5       	ldi	r26, 0x53	; 83
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e3 e5       	ldi	r30, 0x53	; 83
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8b 7f       	andi	r24, 0xFB	; 251
     cde:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
     ce0:	a3 e5       	ldi	r26, 0x53	; 83
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e3 e5       	ldi	r30, 0x53	; 83
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
     cee:	a3 e5       	ldi	r26, 0x53	; 83
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e3 e5       	ldi	r30, 0x53	; 83
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	8e 7f       	andi	r24, 0xFE	; 254
     cfa:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,2);
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#endif

}
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
	CLR_BIT(TIMERS_u8_TCCR1A_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_FAST_PWM_ICR1_MODE
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
     d0a:	af e4       	ldi	r26, 0x4F	; 79
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ef e4       	ldi	r30, 0x4F	; 79
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	8e 7f       	andi	r24, 0xFE	; 254
     d16:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
     d18:	af e4       	ldi	r26, 0x4F	; 79
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ef e4       	ldi	r30, 0x4F	; 79
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	82 60       	ori	r24, 0x02	; 2
     d24:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
     d26:	ae e4       	ldi	r26, 0x4E	; 78
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ee e4       	ldi	r30, 0x4E	; 78
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	88 60       	ori	r24, 0x08	; 8
     d32:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
     d34:	ae e4       	ldi	r26, 0x4E	; 78
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ee e4       	ldi	r30, 0x4E	; 78
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	80 61       	ori	r24, 0x10	; 16
     d40:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_CTC_OCR1B_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_FAST_PWM_ICR1_MODE
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = TIMERS_u16_TIMER1_TOP_VALUE_ICR1;
     d42:	e6 e4       	ldi	r30, 0x46	; 70
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	8f e1       	ldi	r24, 0x1F	; 31
     d48:	9e e4       	ldi	r25, 0x4E	; 78
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	80 83       	st	Z, r24
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_CHANNEL == TIMERS_u8_TIMER1_CHANNEL_A
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
     d4e:	ea e4       	ldi	r30, 0x4A	; 74
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	87 ee       	ldi	r24, 0xE7	; 231
     d54:	93 e0       	ldi	r25, 0x03	; 3
     d56:	91 83       	std	Z+1, r25	; 0x01
     d58:	80 83       	st	Z, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#elif TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_SET
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#elif TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_NON_INVERTING
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
     d5a:	af e4       	ldi	r26, 0x4F	; 79
     d5c:	b0 e0       	ldi	r27, 0x00	; 0
     d5e:	ef e4       	ldi	r30, 0x4F	; 79
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	8f 7b       	andi	r24, 0xBF	; 191
     d66:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
     d68:	af e4       	ldi	r26, 0x4F	; 79
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	ef e4       	ldi	r30, 0x4F	; 79
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	80 68       	ori	r24, 0x80	; 128
     d74:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#endif
/* Compare Match Output Mode unit B */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_B == TIMERS_u8_TIMER1_OC1B_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,4);
     d76:	af e4       	ldi	r26, 0x4F	; 79
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ef e4       	ldi	r30, 0x4F	; 79
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	8f 7e       	andi	r24, 0xEF	; 239
     d82:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,5);
     d84:	af e4       	ldi	r26, 0x4F	; 79
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ef e4       	ldi	r30, 0x4F	; 79
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	8f 7d       	andi	r24, 0xDF	; 223
     d90:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
	CLR_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
     d92:	ae e4       	ldi	r26, 0x4E	; 78
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ee e4       	ldi	r30, 0x4E	; 78
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	8b 7f       	andi	r24, 0xFB	; 251
     d9e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
     da0:	ae e4       	ldi	r26, 0x4E	; 78
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	ee e4       	ldi	r30, 0x4E	; 78
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
     dae:	ae e4       	ldi	r26, 0x4E	; 78
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ee e4       	ldi	r30, 0x4E	; 78
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	8e 7f       	andi	r24, 0xFE	; 254
     dba:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_T1_PIN_RISING_EDGE
	SET_BIT(TIMERS_u8_TCCR1B_REG,2);
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#endif
}
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <TIMERS_voidTimer1SetCompareMatchValueUnitA>:
void TIMERS_voidTimer1SetCompareMatchValueUnitA(u16 Copy_u16OCR1AValue)
{
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <TIMERS_voidTimer1SetCompareMatchValueUnitA+0x6>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	9a 83       	std	Y+2, r25	; 0x02
     dce:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u16OCR1AValue;
     dd0:	ea e4       	ldi	r30, 0x4A	; 74
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	91 83       	std	Z+1, r25	; 0x01
     dda:	80 83       	st	Z, r24
}
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	cf 91       	pop	r28
     de2:	df 91       	pop	r29
     de4:	08 95       	ret

00000de6 <TIMERS_voidTimer1SetCompareMatchValueUnitB>:

void TIMERS_voidTimer1SetCompareMatchValueUnitB(u16 Copy_u16OCR1BValue)
{
     de6:	df 93       	push	r29
     de8:	cf 93       	push	r28
     dea:	00 d0       	rcall	.+0      	; 0xdec <TIMERS_voidTimer1SetCompareMatchValueUnitB+0x6>
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	9a 83       	std	Y+2, r25	; 0x02
     df2:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1B_REG = Copy_u16OCR1BValue;
     df4:	e8 e4       	ldi	r30, 0x48	; 72
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	80 83       	st	Z, r24
}
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <TIMERS_u8GetTCNT0Value>:
u8 TIMERS_u8GetTCNT0Value(u8 * Copy_pu8Value)
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <TIMERS_u8GetTCNT0Value+0x6>
     e10:	0f 92       	push	r0
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	9b 83       	std	Y+3, r25	; 0x03
     e18:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL)
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	9b 81       	ldd	r25, Y+3	; 0x03
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	39 f0       	breq	.+14     	; 0xe34 <TIMERS_u8GetTCNT0Value+0x2a>
	{
		*Copy_pu8Value = TIMERS_u8_TCNT0_REG;
     e26:	e2 e5       	ldi	r30, 0x52	; 82
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	ea 81       	ldd	r30, Y+2	; 0x02
     e2e:	fb 81       	ldd	r31, Y+3	; 0x03
     e30:	80 83       	st	Z, r24
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <TIMERS_u8GetTCNT0Value+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e34:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	0f 92       	push	r0
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
     e50:	ec e5       	ldi	r30, 0x5C	; 92
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	80 83       	st	Z, r24
}
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <TIMERS_voidTimer1SetICR1Value>:
void TIMERS_voidTimer1SetICR1Value(u16 Copy_u16ICR1Value)
{
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <TIMERS_voidTimer1SetICR1Value+0x6>
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16ICR1Value;
     e6e:	e6 e4       	ldi	r30, 0x46	; 70
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	91 83       	std	Z+1, r25	; 0x01
     e78:	80 83       	st	Z, r24
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <TIMERS_u8Timer0SetCallBack>:
u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <TIMERS_u8Timer0SetCallBack+0x6>
     e8a:	0f 92       	push	r0
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9b 83       	std	Y+3, r25	; 0x03
     e92:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	9b 81       	ldd	r25, Y+3	; 0x03
     e9c:	00 97       	sbiw	r24, 0x00	; 0
     e9e:	39 f0       	breq	.+14     	; 0xeae <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	9b 81       	ldd	r25, Y+3	; 0x03
     ea4:	90 93 64 00 	sts	0x0064, r25
     ea8:	80 93 63 00 	sts	0x0063, r24
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     eae:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <TIMERS_u8Timer0CTCSetCallBack>:

u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <TIMERS_u8Timer0CTCSetCallBack+0x6>
     ec4:	0f 92       	push	r0
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	9b 83       	std	Y+3, r25	; 0x03
     ecc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     ed2:	8a 81       	ldd	r24, Y+2	; 0x02
     ed4:	9b 81       	ldd	r25, Y+3	; 0x03
     ed6:	00 97       	sbiw	r24, 0x00	; 0
     ed8:	39 f0       	breq	.+14     	; 0xee8 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	9b 81       	ldd	r25, Y+3	; 0x03
     ede:	90 93 66 00 	sts	0x0066, r25
     ee2:	80 93 65 00 	sts	0x0065, r24
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ee8:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
}
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <TIMERS_u8Timer1SetCallBack>:


u8 TIMERS_u8Timer1SetCallBack(void(*Copy_pf)(void))
{
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <TIMERS_u8Timer1SetCallBack+0x6>
     efe:	0f 92       	push	r0
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	9b 83       	std	Y+3, r25	; 0x03
     f06:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	9b 81       	ldd	r25, Y+3	; 0x03
     f10:	00 97       	sbiw	r24, 0x00	; 0
     f12:	39 f0       	breq	.+14     	; 0xf22 <TIMERS_u8Timer1SetCallBack+0x2a>
	{
		TIMERS_pfTimer1OVF = Copy_pf;
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	9b 81       	ldd	r25, Y+3	; 0x03
     f18:	90 93 68 00 	sts	0x0068, r25
     f1c:	80 93 67 00 	sts	0x0067, r24
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <TIMERS_u8Timer1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f22:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f24:	89 81       	ldd	r24, Y+1	; 0x01
}
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <TIMERS_u8Timer1COMPASetCallBack>:

u8 TIMERS_u8Timer1COMPASetCallBack(void(*Copy_pf)(void))
{
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	00 d0       	rcall	.+0      	; 0xf38 <TIMERS_u8Timer1COMPASetCallBack+0x6>
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	9b 83       	std	Y+3, r25	; 0x03
     f40:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	39 f0       	breq	.+14     	; 0xf5c <TIMERS_u8Timer1COMPASetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPA = Copy_pf;
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	9b 81       	ldd	r25, Y+3	; 0x03
     f52:	90 93 6a 00 	sts	0x006A, r25
     f56:	80 93 69 00 	sts	0x0069, r24
     f5a:	01 c0       	rjmp	.+2      	; 0xf5e <TIMERS_u8Timer1COMPASetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f5c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <TIMERS_u8Timer1COMPBSetCallBack>:

u8 TIMERS_u8Timer1COMPBSetCallBack(void(*Copy_pf)(void))
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <TIMERS_u8Timer1COMPBSetCallBack+0x6>
     f72:	0f 92       	push	r0
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	9b 83       	std	Y+3, r25	; 0x03
     f7a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	9b 81       	ldd	r25, Y+3	; 0x03
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	39 f0       	breq	.+14     	; 0xf96 <TIMERS_u8Timer1COMPBSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPB = Copy_pf;
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	9b 81       	ldd	r25, Y+3	; 0x03
     f8c:	90 93 6e 00 	sts	0x006E, r25
     f90:	80 93 6d 00 	sts	0x006D, r24
     f94:	01 c0       	rjmp	.+2      	; 0xf98 <TIMERS_u8Timer1COMPBSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f96:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f98:	89 81       	ldd	r24, Y+1	; 0x01
}
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <TIMERS_u8Timer1CAPTSetCallBack>:

u8 TIMERS_u8Timer1CAPTSetCallBack(void(*Copy_pf)(void))
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	00 d0       	rcall	.+0      	; 0xfac <TIMERS_u8Timer1CAPTSetCallBack+0x6>
     fac:	0f 92       	push	r0
     fae:	cd b7       	in	r28, 0x3d	; 61
     fb0:	de b7       	in	r29, 0x3e	; 62
     fb2:	9b 83       	std	Y+3, r25	; 0x03
     fb4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     fba:	8a 81       	ldd	r24, Y+2	; 0x02
     fbc:	9b 81       	ldd	r25, Y+3	; 0x03
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	39 f0       	breq	.+14     	; 0xfd0 <TIMERS_u8Timer1CAPTSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CAPT = Copy_pf;
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	9b 81       	ldd	r25, Y+3	; 0x03
     fc6:	90 93 6c 00 	sts	0x006C, r25
     fca:	80 93 6b 00 	sts	0x006B, r24
     fce:	01 c0       	rjmp	.+2      	; 0xfd2 <TIMERS_u8Timer1CAPTSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     fd0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
}
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <__vector_9>:

/* Prototype for ISR TIMER1 OVF */
void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
     fe0:	1f 92       	push	r1
     fe2:	0f 92       	push	r0
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	0f 92       	push	r0
     fe8:	11 24       	eor	r1, r1
     fea:	2f 93       	push	r18
     fec:	3f 93       	push	r19
     fee:	4f 93       	push	r20
     ff0:	5f 93       	push	r21
     ff2:	6f 93       	push	r22
     ff4:	7f 93       	push	r23
     ff6:	8f 93       	push	r24
     ff8:	9f 93       	push	r25
     ffa:	af 93       	push	r26
     ffc:	bf 93       	push	r27
     ffe:	ef 93       	push	r30
    1000:	ff 93       	push	r31
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    100a:	80 91 6f 00 	lds	r24, 0x006F
    100e:	90 91 70 00 	lds	r25, 0x0070
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	90 93 70 00 	sts	0x0070, r25
    1018:	80 93 6f 00 	sts	0x006F, r24
	if(Local_u16CounterOVF == 3907)
    101c:	80 91 6f 00 	lds	r24, 0x006F
    1020:	90 91 70 00 	lds	r25, 0x0070
    1024:	2f e0       	ldi	r18, 0x0F	; 15
    1026:	83 34       	cpi	r24, 0x43	; 67
    1028:	92 07       	cpc	r25, r18
    102a:	a9 f4       	brne	.+42     	; 0x1056 <__vector_9+0x76>
	{
		/* Update Preload Value */
		TIMERS_u16_TCNT1_REG = 192;
    102c:	ec e4       	ldi	r30, 0x4C	; 76
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 ec       	ldi	r24, 0xC0	; 192
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	91 83       	std	Z+1, r25	; 0x01
    1036:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    1038:	10 92 70 00 	sts	0x0070, r1
    103c:	10 92 6f 00 	sts	0x006F, r1
		/* Call App Function */
		if(TIMERS_pfTimer1OVF != NULL)
    1040:	80 91 67 00 	lds	r24, 0x0067
    1044:	90 91 68 00 	lds	r25, 0x0068
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	29 f0       	breq	.+10     	; 0x1056 <__vector_9+0x76>
		{
			TIMERS_pfTimer1OVF();
    104c:	e0 91 67 00 	lds	r30, 0x0067
    1050:	f0 91 68 00 	lds	r31, 0x0068
    1054:	09 95       	icall
		}
	}
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <__vector_8>:


/* Prototype for ISR TIMER1 COMPB */
void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    107c:	1f 92       	push	r1
    107e:	0f 92       	push	r0
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	0f 92       	push	r0
    1084:	11 24       	eor	r1, r1
    1086:	2f 93       	push	r18
    1088:	3f 93       	push	r19
    108a:	4f 93       	push	r20
    108c:	5f 93       	push	r21
    108e:	6f 93       	push	r22
    1090:	7f 93       	push	r23
    1092:	8f 93       	push	r24
    1094:	9f 93       	push	r25
    1096:	af 93       	push	r26
    1098:	bf 93       	push	r27
    109a:	ef 93       	push	r30
    109c:	ff 93       	push	r31
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	cd b7       	in	r28, 0x3d	; 61
    10a4:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    10a6:	80 91 71 00 	lds	r24, 0x0071
    10aa:	90 91 72 00 	lds	r25, 0x0072
    10ae:	01 96       	adiw	r24, 0x01	; 1
    10b0:	90 93 72 00 	sts	0x0072, r25
    10b4:	80 93 71 00 	sts	0x0071, r24
	if(Local_u16CounterCTC == 10000)
    10b8:	80 91 71 00 	lds	r24, 0x0071
    10bc:	90 91 72 00 	lds	r25, 0x0072
    10c0:	27 e2       	ldi	r18, 0x27	; 39
    10c2:	80 31       	cpi	r24, 0x10	; 16
    10c4:	92 07       	cpc	r25, r18
    10c6:	79 f4       	brne	.+30     	; 0x10e6 <__vector_8+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    10c8:	10 92 72 00 	sts	0x0072, r1
    10cc:	10 92 71 00 	sts	0x0071, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPB != NULL)
    10d0:	80 91 6d 00 	lds	r24, 0x006D
    10d4:	90 91 6e 00 	lds	r25, 0x006E
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	29 f0       	breq	.+10     	; 0x10e6 <__vector_8+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPB();
    10dc:	e0 91 6d 00 	lds	r30, 0x006D
    10e0:	f0 91 6e 00 	lds	r31, 0x006E
    10e4:	09 95       	icall
		}
	}
}
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	ff 91       	pop	r31
    10ec:	ef 91       	pop	r30
    10ee:	bf 91       	pop	r27
    10f0:	af 91       	pop	r26
    10f2:	9f 91       	pop	r25
    10f4:	8f 91       	pop	r24
    10f6:	7f 91       	pop	r23
    10f8:	6f 91       	pop	r22
    10fa:	5f 91       	pop	r21
    10fc:	4f 91       	pop	r20
    10fe:	3f 91       	pop	r19
    1100:	2f 91       	pop	r18
    1102:	0f 90       	pop	r0
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	0f 90       	pop	r0
    1108:	1f 90       	pop	r1
    110a:	18 95       	reti

0000110c <__vector_7>:

/* Prototype for ISR TIMER1 COMPA */
void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    110c:	1f 92       	push	r1
    110e:	0f 92       	push	r0
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	0f 92       	push	r0
    1114:	11 24       	eor	r1, r1
    1116:	2f 93       	push	r18
    1118:	3f 93       	push	r19
    111a:	4f 93       	push	r20
    111c:	5f 93       	push	r21
    111e:	6f 93       	push	r22
    1120:	7f 93       	push	r23
    1122:	8f 93       	push	r24
    1124:	9f 93       	push	r25
    1126:	af 93       	push	r26
    1128:	bf 93       	push	r27
    112a:	ef 93       	push	r30
    112c:	ff 93       	push	r31
    112e:	df 93       	push	r29
    1130:	cf 93       	push	r28
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    1136:	80 91 73 00 	lds	r24, 0x0073
    113a:	90 91 74 00 	lds	r25, 0x0074
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	90 93 74 00 	sts	0x0074, r25
    1144:	80 93 73 00 	sts	0x0073, r24
	if(Local_u16CounterCTC == 10000)
    1148:	80 91 73 00 	lds	r24, 0x0073
    114c:	90 91 74 00 	lds	r25, 0x0074
    1150:	27 e2       	ldi	r18, 0x27	; 39
    1152:	80 31       	cpi	r24, 0x10	; 16
    1154:	92 07       	cpc	r25, r18
    1156:	79 f4       	brne	.+30     	; 0x1176 <__vector_7+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    1158:	10 92 74 00 	sts	0x0074, r1
    115c:	10 92 73 00 	sts	0x0073, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPA != NULL)
    1160:	80 91 69 00 	lds	r24, 0x0069
    1164:	90 91 6a 00 	lds	r25, 0x006A
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	29 f0       	breq	.+10     	; 0x1176 <__vector_7+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPA();
    116c:	e0 91 69 00 	lds	r30, 0x0069
    1170:	f0 91 6a 00 	lds	r31, 0x006A
    1174:	09 95       	icall
		}
	}
}
    1176:	cf 91       	pop	r28
    1178:	df 91       	pop	r29
    117a:	ff 91       	pop	r31
    117c:	ef 91       	pop	r30
    117e:	bf 91       	pop	r27
    1180:	af 91       	pop	r26
    1182:	9f 91       	pop	r25
    1184:	8f 91       	pop	r24
    1186:	7f 91       	pop	r23
    1188:	6f 91       	pop	r22
    118a:	5f 91       	pop	r21
    118c:	4f 91       	pop	r20
    118e:	3f 91       	pop	r19
    1190:	2f 91       	pop	r18
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <__vector_6>:

/* Prototype for ISR TIMER1 CAPT */
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    119c:	1f 92       	push	r1
    119e:	0f 92       	push	r0
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	0f 92       	push	r0
    11a4:	11 24       	eor	r1, r1
    11a6:	2f 93       	push	r18
    11a8:	3f 93       	push	r19
    11aa:	4f 93       	push	r20
    11ac:	5f 93       	push	r21
    11ae:	6f 93       	push	r22
    11b0:	7f 93       	push	r23
    11b2:	8f 93       	push	r24
    11b4:	9f 93       	push	r25
    11b6:	af 93       	push	r26
    11b8:	bf 93       	push	r27
    11ba:	ef 93       	push	r30
    11bc:	ff 93       	push	r31
    11be:	df 93       	push	r29
    11c0:	cf 93       	push	r28
    11c2:	cd b7       	in	r28, 0x3d	; 61
    11c4:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCAPT = 0;
	Local_u16CounterCAPT++;
    11c6:	80 91 75 00 	lds	r24, 0x0075
    11ca:	90 91 76 00 	lds	r25, 0x0076
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	90 93 76 00 	sts	0x0076, r25
    11d4:	80 93 75 00 	sts	0x0075, r24
	if(Local_u16CounterCAPT == 10000)
    11d8:	80 91 75 00 	lds	r24, 0x0075
    11dc:	90 91 76 00 	lds	r25, 0x0076
    11e0:	27 e2       	ldi	r18, 0x27	; 39
    11e2:	80 31       	cpi	r24, 0x10	; 16
    11e4:	92 07       	cpc	r25, r18
    11e6:	79 f4       	brne	.+30     	; 0x1206 <__vector_6+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCAPT = 0;
    11e8:	10 92 76 00 	sts	0x0076, r1
    11ec:	10 92 75 00 	sts	0x0075, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CAPT != NULL)
    11f0:	80 91 6b 00 	lds	r24, 0x006B
    11f4:	90 91 6c 00 	lds	r25, 0x006C
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	29 f0       	breq	.+10     	; 0x1206 <__vector_6+0x6a>
		{
			TIMERS_pfTimer1CAPT();
    11fc:	e0 91 6b 00 	lds	r30, 0x006B
    1200:	f0 91 6c 00 	lds	r31, 0x006C
    1204:	09 95       	icall
		}
	}
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	ff 91       	pop	r31
    120c:	ef 91       	pop	r30
    120e:	bf 91       	pop	r27
    1210:	af 91       	pop	r26
    1212:	9f 91       	pop	r25
    1214:	8f 91       	pop	r24
    1216:	7f 91       	pop	r23
    1218:	6f 91       	pop	r22
    121a:	5f 91       	pop	r21
    121c:	4f 91       	pop	r20
    121e:	3f 91       	pop	r19
    1220:	2f 91       	pop	r18
    1222:	0f 90       	pop	r0
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	0f 90       	pop	r0
    1228:	1f 90       	pop	r1
    122a:	18 95       	reti

0000122c <__vector_11>:

/* Prototype for ISR TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	2f 93       	push	r18
    1238:	3f 93       	push	r19
    123a:	4f 93       	push	r20
    123c:	5f 93       	push	r21
    123e:	6f 93       	push	r22
    1240:	7f 93       	push	r23
    1242:	8f 93       	push	r24
    1244:	9f 93       	push	r25
    1246:	af 93       	push	r26
    1248:	bf 93       	push	r27
    124a:	ef 93       	push	r30
    124c:	ff 93       	push	r31
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    1256:	80 91 77 00 	lds	r24, 0x0077
    125a:	90 91 78 00 	lds	r25, 0x0078
    125e:	01 96       	adiw	r24, 0x01	; 1
    1260:	90 93 78 00 	sts	0x0078, r25
    1264:	80 93 77 00 	sts	0x0077, r24
	if(Local_u16CounterOVF == 3907)
    1268:	80 91 77 00 	lds	r24, 0x0077
    126c:	90 91 78 00 	lds	r25, 0x0078
    1270:	2f e0       	ldi	r18, 0x0F	; 15
    1272:	83 34       	cpi	r24, 0x43	; 67
    1274:	92 07       	cpc	r25, r18
    1276:	99 f4       	brne	.+38     	; 0x129e <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    1278:	e2 e5       	ldi	r30, 0x52	; 82
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 ec       	ldi	r24, 0xC0	; 192
    127e:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    1280:	10 92 78 00 	sts	0x0078, r1
    1284:	10 92 77 00 	sts	0x0077, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
    1288:	80 91 63 00 	lds	r24, 0x0063
    128c:	90 91 64 00 	lds	r25, 0x0064
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	29 f0       	breq	.+10     	; 0x129e <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    1294:	e0 91 63 00 	lds	r30, 0x0063
    1298:	f0 91 64 00 	lds	r31, 0x0064
    129c:	09 95       	icall
		}
	}
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <__vector_10>:

/* Prototype for ISR TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    12c4:	1f 92       	push	r1
    12c6:	0f 92       	push	r0
    12c8:	0f b6       	in	r0, 0x3f	; 63
    12ca:	0f 92       	push	r0
    12cc:	11 24       	eor	r1, r1
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    12ee:	80 91 79 00 	lds	r24, 0x0079
    12f2:	90 91 7a 00 	lds	r25, 0x007A
    12f6:	01 96       	adiw	r24, 0x01	; 1
    12f8:	90 93 7a 00 	sts	0x007A, r25
    12fc:	80 93 79 00 	sts	0x0079, r24
	if(Local_u16CounterCTC == 10000)
    1300:	80 91 79 00 	lds	r24, 0x0079
    1304:	90 91 7a 00 	lds	r25, 0x007A
    1308:	27 e2       	ldi	r18, 0x27	; 39
    130a:	80 31       	cpi	r24, 0x10	; 16
    130c:	92 07       	cpc	r25, r18
    130e:	79 f4       	brne	.+30     	; 0x132e <__vector_10+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    1310:	10 92 7a 00 	sts	0x007A, r1
    1314:	10 92 79 00 	sts	0x0079, r1
		/* Call App Function */
		if(TIMERS_pfTimer0CTC != NULL)
    1318:	80 91 65 00 	lds	r24, 0x0065
    131c:	90 91 66 00 	lds	r25, 0x0066
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	29 f0       	breq	.+10     	; 0x132e <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
    1324:	e0 91 65 00 	lds	r30, 0x0065
    1328:	f0 91 66 00 	lds	r31, 0x0066
    132c:	09 95       	icall
		}
	}
}
    132e:	cf 91       	pop	r28
    1330:	df 91       	pop	r29
    1332:	ff 91       	pop	r31
    1334:	ef 91       	pop	r30
    1336:	bf 91       	pop	r27
    1338:	af 91       	pop	r26
    133a:	9f 91       	pop	r25
    133c:	8f 91       	pop	r24
    133e:	7f 91       	pop	r23
    1340:	6f 91       	pop	r22
    1342:	5f 91       	pop	r21
    1344:	4f 91       	pop	r20
    1346:	3f 91       	pop	r19
    1348:	2f 91       	pop	r18
    134a:	0f 90       	pop	r0
    134c:	0f be       	out	0x3f, r0	; 63
    134e:	0f 90       	pop	r0
    1350:	1f 90       	pop	r1
    1352:	18 95       	reti

00001354 <main>:
#include "GI_interface.h"
#include "ADC_interface.h"
#include "TIMERS_interface.h"

int main(void)
{
    1354:	df 93       	push	r29
    1356:	cf 93       	push	r28
    1358:	00 d0       	rcall	.+0      	; 0x135a <main+0x6>
    135a:	00 d0       	rcall	.+0      	; 0x135c <main+0x8>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16DigitalValue,Local_u16ServoValue;
	DIO_voidInit();
    1360:	0e 94 aa 01 	call	0x354	; 0x354 <DIO_voidInit>
	TIMERS_voidTimer1Init();
    1364:	0e 94 81 06 	call	0xd02	; 0xd02 <TIMERS_voidTimer1Init>
	ADC_voidInit();
    1368:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_voidInit>

	/* SuperLoop */
	while(1)
	{
		/* Read Pot Value */
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0,&Local_u16DigitalValue);
    136c:	9e 01       	movw	r18, r28
    136e:	2d 5f       	subi	r18, 0xFD	; 253
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	b9 01       	movw	r22, r18
    1376:	0e 94 7d 00 	call	0xfa	; 0xfa <ADC_u8GetDigitalValueSynchNonBlocking>
		Local_u16ServoValue = ((u32)(1000UL * Local_u16DigitalValue) / 1023) + 999;
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	cc 01       	movw	r24, r24
    1380:	a0 e0       	ldi	r26, 0x00	; 0
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	28 ee       	ldi	r18, 0xE8	; 232
    1386:	33 e0       	ldi	r19, 0x03	; 3
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	bc 01       	movw	r22, r24
    138e:	cd 01       	movw	r24, r26
    1390:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <__mulsi3>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	2f ef       	ldi	r18, 0xFF	; 255
    139a:	33 e0       	ldi	r19, 0x03	; 3
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	50 e0       	ldi	r21, 0x00	; 0
    13a0:	bc 01       	movw	r22, r24
    13a2:	cd 01       	movw	r24, r26
    13a4:	0e 94 0f 0a 	call	0x141e	; 0x141e <__udivmodsi4>
    13a8:	da 01       	movw	r26, r20
    13aa:	c9 01       	movw	r24, r18
    13ac:	89 51       	subi	r24, 0x19	; 25
    13ae:	9c 4f       	sbci	r25, 0xFC	; 252
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u16DigitalValue > 512)
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	22 e0       	ldi	r18, 0x02	; 2
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	92 07       	cpc	r25, r18
    13be:	30 f0       	brcs	.+12     	; 0x13cc <main+0x78>
		{
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	60 e0       	ldi	r22, 0x00	; 0
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_u8SetPinValue>
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <main+0x82>
		}
		else
		{
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	0e 94 f6 02 	call	0x5ec	; 0x5ec <DIO_u8SetPinValue>
		}
		/* Update Angle of Servo Motor */
		TIMERS_voidTimer1SetCompareMatchValueUnitA(Local_u16ServoValue);
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	9a 81       	ldd	r25, Y+2	; 0x02
    13da:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <TIMERS_voidTimer1SetCompareMatchValueUnitA>
    13de:	c6 cf       	rjmp	.-116    	; 0x136c <main+0x18>

000013e0 <__mulsi3>:
    13e0:	62 9f       	mul	r22, r18
    13e2:	d0 01       	movw	r26, r0
    13e4:	73 9f       	mul	r23, r19
    13e6:	f0 01       	movw	r30, r0
    13e8:	82 9f       	mul	r24, r18
    13ea:	e0 0d       	add	r30, r0
    13ec:	f1 1d       	adc	r31, r1
    13ee:	64 9f       	mul	r22, r20
    13f0:	e0 0d       	add	r30, r0
    13f2:	f1 1d       	adc	r31, r1
    13f4:	92 9f       	mul	r25, r18
    13f6:	f0 0d       	add	r31, r0
    13f8:	83 9f       	mul	r24, r19
    13fa:	f0 0d       	add	r31, r0
    13fc:	74 9f       	mul	r23, r20
    13fe:	f0 0d       	add	r31, r0
    1400:	65 9f       	mul	r22, r21
    1402:	f0 0d       	add	r31, r0
    1404:	99 27       	eor	r25, r25
    1406:	72 9f       	mul	r23, r18
    1408:	b0 0d       	add	r27, r0
    140a:	e1 1d       	adc	r30, r1
    140c:	f9 1f       	adc	r31, r25
    140e:	63 9f       	mul	r22, r19
    1410:	b0 0d       	add	r27, r0
    1412:	e1 1d       	adc	r30, r1
    1414:	f9 1f       	adc	r31, r25
    1416:	bd 01       	movw	r22, r26
    1418:	cf 01       	movw	r24, r30
    141a:	11 24       	eor	r1, r1
    141c:	08 95       	ret

0000141e <__udivmodsi4>:
    141e:	a1 e2       	ldi	r26, 0x21	; 33
    1420:	1a 2e       	mov	r1, r26
    1422:	aa 1b       	sub	r26, r26
    1424:	bb 1b       	sub	r27, r27
    1426:	fd 01       	movw	r30, r26
    1428:	0d c0       	rjmp	.+26     	; 0x1444 <__udivmodsi4_ep>

0000142a <__udivmodsi4_loop>:
    142a:	aa 1f       	adc	r26, r26
    142c:	bb 1f       	adc	r27, r27
    142e:	ee 1f       	adc	r30, r30
    1430:	ff 1f       	adc	r31, r31
    1432:	a2 17       	cp	r26, r18
    1434:	b3 07       	cpc	r27, r19
    1436:	e4 07       	cpc	r30, r20
    1438:	f5 07       	cpc	r31, r21
    143a:	20 f0       	brcs	.+8      	; 0x1444 <__udivmodsi4_ep>
    143c:	a2 1b       	sub	r26, r18
    143e:	b3 0b       	sbc	r27, r19
    1440:	e4 0b       	sbc	r30, r20
    1442:	f5 0b       	sbc	r31, r21

00001444 <__udivmodsi4_ep>:
    1444:	66 1f       	adc	r22, r22
    1446:	77 1f       	adc	r23, r23
    1448:	88 1f       	adc	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	1a 94       	dec	r1
    144e:	69 f7       	brne	.-38     	; 0x142a <__udivmodsi4_loop>
    1450:	60 95       	com	r22
    1452:	70 95       	com	r23
    1454:	80 95       	com	r24
    1456:	90 95       	com	r25
    1458:	9b 01       	movw	r18, r22
    145a:	ac 01       	movw	r20, r24
    145c:	bd 01       	movw	r22, r26
    145e:	cf 01       	movw	r24, r30
    1460:	08 95       	ret

00001462 <_exit>:
    1462:	f8 94       	cli

00001464 <__stop_program>:
    1464:	ff cf       	rjmp	.-2      	; 0x1464 <__stop_program>
