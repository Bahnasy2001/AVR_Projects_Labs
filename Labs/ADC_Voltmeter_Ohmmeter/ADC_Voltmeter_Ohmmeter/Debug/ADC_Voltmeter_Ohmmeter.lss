
ADC_Voltmeter_Ohmmeter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003928  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000124  00800060  00003928  000039bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800184  00800184  00003ae0  2**0
                  ALLOC
  3 .stab         00002658  00000000  00000000  00003ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012ed  00000000  00000000  00006138  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007425  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  000075c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  000077b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009bc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000af48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c120  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c2e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c5d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cf44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 bf 08 	jmp	0x117e	; 0x117e <__vector_16>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e2       	ldi	r30, 0x28	; 40
     162:	f9 e3       	ldi	r31, 0x39	; 57
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a4 38       	cpi	r26, 0x84	; 132
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a4 e8       	ldi	r26, 0x84	; 132
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a7 38       	cpi	r26, 0x87	; 135
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 04 18 	call	0x3008	; 0x3008 <main>
     184:	0c 94 92 1c 	jmp	0x3924	; 0x3924 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	ac e7       	ldi	r26, 0x7C	; 124
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 00 1a 	jmp	0x3400	; 0x3400 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8c e7       	ldi	r24, 0x7C	; 124
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 1c 1a 	jmp	0x3438	; 0x3438 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	6c e7       	ldi	r22, 0x7C	; 124
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 0c 1a 	jmp	0x3418	; 0x3418 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 28 1a 	jmp	0x3450	; 0x3450 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 10 1a 	jmp	0x3420	; 0x3420 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	ec 57       	subi	r30, 0x7C	; 124
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <ADC_voidInit>:

/* ADC busy Flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
	   4- Select CLK/64
	   5- Enable ADC
	    */
	//1- Select Vref = AVCC
#if ADC_u8_VREF_OPTION == ADC_u8_VREF_AVCC
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     f30:	a7 e2       	ldi	r26, 0x27	; 39
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e7 e2       	ldi	r30, 0x27	; 39
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     f3e:	a7 e2       	ldi	r26, 0x27	; 39
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e7 e2       	ldi	r30, 0x27	; 39
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 64       	ori	r24, 0x40	; 64
     f4a:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
#endif

	//2- Right Adjust
#if ADC_u8_ADJUST_OPTION == ADC_u8_RIGHT_ADJUST
	CLR_BIT(ADC_u8_ADMUX_REG,5);
     f4c:	a7 e2       	ldi	r26, 0x27	; 39
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e7 e2       	ldi	r30, 0x27	; 39
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8f 7d       	andi	r24, 0xDF	; 223
     f58:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,5);
#endif

	//3- Disable AutoTrigger
#if ADC_u8_AUTO_TRIGGER_MODE == ADC_u8_AUTO_TRIGGER_DISABLE
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     f5a:	a6 e2       	ldi	r26, 0x26	; 38
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e6 e2       	ldi	r30, 0x26	; 38
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8f 7d       	andi	r24, 0xDF	; 223
     f66:	8c 93       	st	X, r24
	#endif
#endif

	//4- Select CLK/64
#if ADC_u8_PRESCALER == ADC_u8_PRESCALER_64
	SET_BIT(ADC_u8_ADCSRA_REG,2);
     f68:	a6 e2       	ldi	r26, 0x26	; 38
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e6 e2       	ldi	r30, 0x26	; 38
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	84 60       	ori	r24, 0x04	; 4
     f74:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     f76:	a6 e2       	ldi	r26, 0x26	; 38
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e6 e2       	ldi	r30, 0x26	; 38
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     f84:	a6 e2       	ldi	r26, 0x26	; 38
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e6 e2       	ldi	r30, 0x26	; 38
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8e 7f       	andi	r24, 0xFE	; 254
     f90:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
	SET_BIT(ADC_u8_ADCSRA_REG,0);
#endif

	//5- Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG,7);
     f92:	a6 e2       	ldi	r26, 0x26	; 38
     f94:	b0 e0       	ldi	r27, 0x00	; 0
     f96:	e6 e2       	ldi	r30, 0x26	; 38
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	80 68       	ori	r24, 0x80	; 128
     f9e:	8c 93       	st	X, r24

}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 *Copy_pu16DigitalValue)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	28 97       	sbiw	r28, 0x08	; 8
     fb0:	0f b6       	in	r0, 0x3f	; 63
     fb2:	f8 94       	cli
     fb4:	de bf       	out	0x3e, r29	; 62
     fb6:	0f be       	out	0x3f, r0	; 63
     fb8:	cd bf       	out	0x3d, r28	; 61
     fba:	8e 83       	std	Y+6, r24	; 0x06
     fbc:	78 87       	std	Y+8, r23	; 0x08
     fbe:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     fc4:	19 82       	std	Y+1, r1	; 0x01
     fc6:	1a 82       	std	Y+2, r1	; 0x02
     fc8:	1b 82       	std	Y+3, r1	; 0x03
     fca:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32)  && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
     fcc:	8e 81       	ldd	r24, Y+6	; 0x06
     fce:	80 32       	cpi	r24, 0x20	; 32
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     fd2:	65 c0       	rjmp	.+202    	; 0x109e <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     fd4:	8f 81       	ldd	r24, Y+7	; 0x07
     fd6:	98 85       	ldd	r25, Y+8	; 0x08
     fd8:	00 97       	sbiw	r24, 0x00	; 0
     fda:	09 f4       	brne	.+2      	; 0xfde <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     fdc:	60 c0       	rjmp	.+192    	; 0x109e <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     fde:	80 91 86 01 	lds	r24, 0x0186
     fe2:	88 23       	and	r24, r24
     fe4:	09 f0       	breq	.+2      	; 0xfe8 <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
     fe6:	5b c0       	rjmp	.+182    	; 0x109e <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	80 93 86 01 	sts	0x0186, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     fee:	a7 e2       	ldi	r26, 0x27	; 39
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e7 e2       	ldi	r30, 0x27	; 39
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 7e       	andi	r24, 0xE0	; 224
     ffa:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     ffc:	a7 e2       	ldi	r26, 0x27	; 39
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e7 e2       	ldi	r30, 0x27	; 39
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	90 81       	ld	r25, Z
    1006:	8e 81       	ldd	r24, Y+6	; 0x06
    1008:	89 2b       	or	r24, r25
    100a:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    100c:	a6 e2       	ldi	r26, 0x26	; 38
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e6 e2       	ldi	r30, 0x26	; 38
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	80 64       	ori	r24, 0x40	; 64
    1018:	8c 93       	st	X, r24
    101a:	0b c0       	rjmp	.+22     	; 0x1032 <ADC_u8GetDigitalValueSynchNonBlocking+0x8c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
    101e:	9a 81       	ldd	r25, Y+2	; 0x02
    1020:	ab 81       	ldd	r26, Y+3	; 0x03
    1022:	bc 81       	ldd	r27, Y+4	; 0x04
    1024:	01 96       	adiw	r24, 0x01	; 1
    1026:	a1 1d       	adc	r26, r1
    1028:	b1 1d       	adc	r27, r1
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	ab 83       	std	Y+3, r26	; 0x03
    1030:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
    1032:	e6 e2       	ldi	r30, 0x26	; 38
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	82 95       	swap	r24
    103a:	8f 70       	andi	r24, 0x0F	; 15
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	90 70       	andi	r25, 0x00	; 0
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 f4       	brne	.+24     	; 0x1060 <ADC_u8GetDigitalValueSynchNonBlocking+0xba>
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	9a 81       	ldd	r25, Y+2	; 0x02
    104c:	ab 81       	ldd	r26, Y+3	; 0x03
    104e:	bc 81       	ldd	r27, Y+4	; 0x04
    1050:	80 35       	cpi	r24, 0x50	; 80
    1052:	23 ec       	ldi	r18, 0xC3	; 195
    1054:	92 07       	cpc	r25, r18
    1056:	20 e0       	ldi	r18, 0x00	; 0
    1058:	a2 07       	cpc	r26, r18
    105a:	20 e0       	ldi	r18, 0x00	; 0
    105c:	b2 07       	cpc	r27, r18
    105e:	f0 f2       	brcs	.-68     	; 0x101c <ADC_u8GetDigitalValueSynchNonBlocking+0x76>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
    1060:	e6 e2       	ldi	r30, 0x26	; 38
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	82 95       	swap	r24
    1068:	8f 70       	andi	r24, 0x0F	; 15
    106a:	88 2f       	mov	r24, r24
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	81 70       	andi	r24, 0x01	; 1
    1070:	90 70       	andi	r25, 0x00	; 0
    1072:	88 23       	and	r24, r24
    1074:	91 f0       	breq	.+36     	; 0x109a <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
		{
			/* Clear Flag */
			ADC_u8BusyFlag = 0;
    1076:	10 92 86 01 	sts	0x0186, r1
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
    107a:	a6 e2       	ldi	r26, 0x26	; 38
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	e6 e2       	ldi	r30, 0x26	; 38
    1080:	f0 e0       	ldi	r31, 0x00	; 0
    1082:	80 81       	ld	r24, Z
    1084:	80 61       	ori	r24, 0x10	; 16
    1086:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    1088:	e4 e2       	ldi	r30, 0x24	; 36
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	91 81       	ldd	r25, Z+1	; 0x01
    1090:	ef 81       	ldd	r30, Y+7	; 0x07
    1092:	f8 85       	ldd	r31, Y+8	; 0x08
    1094:	91 83       	std	Z+1, r25	; 0x01
    1096:	80 83       	st	Z, r24
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
    109a:	1d 82       	std	Y+5, r1	; 0x05
    109c:	01 c0       	rjmp	.+2      	; 0x10a0 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    109e:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    10a0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    10a2:	28 96       	adiw	r28, 0x08	; 8
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <ADC_u8GetDigitalValueAsynch>:


u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb, void (*Copy_pfNotification) (u16))
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <ADC_u8GetDigitalValueAsynch+0x6>
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <ADC_u8GetDigitalValueAsynch+0x8>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	8a 83       	std	Y+2, r24	; 0x02
    10c2:	7c 83       	std	Y+4, r23	; 0x04
    10c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32)  && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
    10ca:	8a 81       	ldd	r24, Y+2	; 0x02
    10cc:	80 32       	cpi	r24, 0x20	; 32
    10ce:	78 f5       	brcc	.+94     	; 0x112e <ADC_u8GetDigitalValueAsynch+0x7a>
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	59 f1       	breq	.+86     	; 0x112e <ADC_u8GetDigitalValueAsynch+0x7a>
    10d8:	80 91 86 01 	lds	r24, 0x0186
    10dc:	88 23       	and	r24, r24
    10de:	39 f5       	brne	.+78     	; 0x112e <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	80 93 86 01 	sts	0x0186, r24
		/* Update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	90 93 85 01 	sts	0x0185, r25
    10ee:	80 93 84 01 	sts	0x0184, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
    10f2:	a6 e2       	ldi	r26, 0x26	; 38
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e6 e2       	ldi	r30, 0x26	; 38
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	88 60       	ori	r24, 0x08	; 8
    10fe:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    1100:	a7 e2       	ldi	r26, 0x27	; 39
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e7 e2       	ldi	r30, 0x27	; 39
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	80 7e       	andi	r24, 0xE0	; 224
    110c:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    110e:	a7 e2       	ldi	r26, 0x27	; 39
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e7 e2       	ldi	r30, 0x27	; 39
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	90 81       	ld	r25, Z
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	89 2b       	or	r24, r25
    111c:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    111e:	a6 e2       	ldi	r26, 0x26	; 38
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e6 e2       	ldi	r30, 0x26	; 38
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	80 64       	ori	r24, 0x40	; 64
    112a:	8c 93       	st	X, r24
    112c:	01 c0       	rjmp	.+2      	; 0x1130 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    112e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1130:	89 81       	ldd	r24, Y+1	; 0x01
}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <ADC_u8GetADCRegValue>:
u8 ADC_u8GetADCRegValue (u16 * Copy_pu16ADCValue)
{
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <ADC_u8GetADCRegValue+0x6>
    1146:	0f 92       	push	r0
    1148:	cd b7       	in	r28, 0x3d	; 61
    114a:	de b7       	in	r29, 0x3e	; 62
    114c:	9b 83       	std	Y+3, r25	; 0x03
    114e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	9b 81       	ldd	r25, Y+3	; 0x03
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	49 f0       	breq	.+18     	; 0x116e <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
    115c:	e4 e2       	ldi	r30, 0x24	; 36
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	91 81       	ldd	r25, Z+1	; 0x01
    1164:	ea 81       	ldd	r30, Y+2	; 0x02
    1166:	fb 81       	ldd	r31, Y+3	; 0x03
    1168:	91 83       	std	Z+1, r25	; 0x01
    116a:	80 83       	st	Z, r24
    116c:	01 c0       	rjmp	.+2      	; 0x1170 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    116e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1170:	89 81       	ldd	r24, Y+1	; 0x01
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
    117e:	1f 92       	push	r1
    1180:	0f 92       	push	r0
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	0f 92       	push	r0
    1186:	11 24       	eor	r1, r1
    1188:	2f 93       	push	r18
    118a:	3f 93       	push	r19
    118c:	4f 93       	push	r20
    118e:	5f 93       	push	r21
    1190:	6f 93       	push	r22
    1192:	7f 93       	push	r23
    1194:	8f 93       	push	r24
    1196:	9f 93       	push	r25
    1198:	af 93       	push	r26
    119a:	bf 93       	push	r27
    119c:	ef 93       	push	r30
    119e:	ff 93       	push	r31
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
    11a8:	80 91 84 01 	lds	r24, 0x0184
    11ac:	90 91 85 01 	lds	r25, 0x0185
    11b0:	00 97       	sbiw	r24, 0x00	; 0
    11b2:	99 f0       	breq	.+38     	; 0x11da <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
    11b4:	10 92 86 01 	sts	0x0186, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
    11b8:	a6 e2       	ldi	r26, 0x26	; 38
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	e6 e2       	ldi	r30, 0x26	; 38
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	87 7f       	andi	r24, 0xF7	; 247
    11c4:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
    11c6:	20 91 84 01 	lds	r18, 0x0184
    11ca:	30 91 85 01 	lds	r19, 0x0185
    11ce:	e4 e2       	ldi	r30, 0x24	; 36
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	f9 01       	movw	r30, r18
    11d8:	09 95       	icall
	}
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	ff 91       	pop	r31
    11e0:	ef 91       	pop	r30
    11e2:	bf 91       	pop	r27
    11e4:	af 91       	pop	r26
    11e6:	9f 91       	pop	r25
    11e8:	8f 91       	pop	r24
    11ea:	7f 91       	pop	r23
    11ec:	6f 91       	pop	r22
    11ee:	5f 91       	pop	r21
    11f0:	4f 91       	pop	r20
    11f2:	3f 91       	pop	r19
    11f4:	2f 91       	pop	r18
    11f6:	0f 90       	pop	r0
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	0f 90       	pop	r0
    11fc:	1f 90       	pop	r1
    11fe:	18 95       	reti

00001200 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
    1200:	df 93       	push	r29
    1202:	cf 93       	push	r28
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
    1208:	ea e3       	ldi	r30, 0x3A	; 58
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
    120e:	e7 e3       	ldi	r30, 0x37	; 55
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	87 e0       	ldi	r24, 0x07	; 7
    1214:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
    1216:	e4 e3       	ldi	r30, 0x34	; 52
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
    121c:	e1 e3       	ldi	r30, 0x31	; 49
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8f ef       	ldi	r24, 0xFF	; 255
    1222:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
    1224:	eb e3       	ldi	r30, 0x3B	; 59
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
    122a:	e8 e3       	ldi	r30, 0x38	; 56
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
    1230:	e5 e3       	ldi	r30, 0x35	; 53
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
    1236:	e2 e3       	ldi	r30, 0x32	; 50
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	10 82       	st	Z, r1

}
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	cd b7       	in	r28, 0x3d	; 61
    1248:	de b7       	in	r29, 0x3e	; 62
    124a:	2e 97       	sbiw	r28, 0x0e	; 14
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	8a 83       	std	Y+2, r24	; 0x02
    1258:	6b 83       	std	Y+3, r22	; 0x03
    125a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	84 30       	cpi	r24, 0x04	; 4
    1264:	08 f0       	brcs	.+2      	; 0x1268 <DIO_u8SetPinDirection+0x26>
    1266:	0d c1       	rjmp	.+538    	; 0x1482 <DIO_u8SetPinDirection+0x240>
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	88 30       	cpi	r24, 0x08	; 8
    126c:	08 f0       	brcs	.+2      	; 0x1270 <DIO_u8SetPinDirection+0x2e>
    126e:	09 c1       	rjmp	.+530    	; 0x1482 <DIO_u8SetPinDirection+0x240>
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	88 23       	and	r24, r24
    1274:	21 f0       	breq	.+8      	; 0x127e <DIO_u8SetPinDirection+0x3c>
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	81 30       	cpi	r24, 0x01	; 1
    127a:	09 f0       	breq	.+2      	; 0x127e <DIO_u8SetPinDirection+0x3c>
    127c:	02 c1       	rjmp	.+516    	; 0x1482 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	3e 87       	std	Y+14, r19	; 0x0e
    1286:	2d 87       	std	Y+13, r18	; 0x0d
    1288:	8d 85       	ldd	r24, Y+13	; 0x0d
    128a:	9e 85       	ldd	r25, Y+14	; 0x0e
    128c:	81 30       	cpi	r24, 0x01	; 1
    128e:	91 05       	cpc	r25, r1
    1290:	09 f4       	brne	.+2      	; 0x1294 <DIO_u8SetPinDirection+0x52>
    1292:	4f c0       	rjmp	.+158    	; 0x1332 <DIO_u8SetPinDirection+0xf0>
    1294:	2d 85       	ldd	r18, Y+13	; 0x0d
    1296:	3e 85       	ldd	r19, Y+14	; 0x0e
    1298:	22 30       	cpi	r18, 0x02	; 2
    129a:	31 05       	cpc	r19, r1
    129c:	2c f4       	brge	.+10     	; 0x12a8 <DIO_u8SetPinDirection+0x66>
    129e:	8d 85       	ldd	r24, Y+13	; 0x0d
    12a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	71 f0       	breq	.+28     	; 0x12c2 <DIO_u8SetPinDirection+0x80>
    12a6:	ee c0       	rjmp	.+476    	; 0x1484 <DIO_u8SetPinDirection+0x242>
    12a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    12aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    12ac:	22 30       	cpi	r18, 0x02	; 2
    12ae:	31 05       	cpc	r19, r1
    12b0:	09 f4       	brne	.+2      	; 0x12b4 <DIO_u8SetPinDirection+0x72>
    12b2:	77 c0       	rjmp	.+238    	; 0x13a2 <DIO_u8SetPinDirection+0x160>
    12b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	91 05       	cpc	r25, r1
    12bc:	09 f4       	brne	.+2      	; 0x12c0 <DIO_u8SetPinDirection+0x7e>
    12be:	a9 c0       	rjmp	.+338    	; 0x1412 <DIO_u8SetPinDirection+0x1d0>
    12c0:	e1 c0       	rjmp	.+450    	; 0x1484 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	28 2f       	mov	r18, r24
    12c6:	30 e0       	ldi	r19, 0x00	; 0
    12c8:	3c 87       	std	Y+12, r19	; 0x0c
    12ca:	2b 87       	std	Y+11, r18	; 0x0b
    12cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    12ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	31 f0       	breq	.+12     	; 0x12e0 <DIO_u8SetPinDirection+0x9e>
    12d4:	2b 85       	ldd	r18, Y+11	; 0x0b
    12d6:	3c 85       	ldd	r19, Y+12	; 0x0c
    12d8:	21 30       	cpi	r18, 0x01	; 1
    12da:	31 05       	cpc	r19, r1
    12dc:	b1 f0       	breq	.+44     	; 0x130a <DIO_u8SetPinDirection+0xc8>
    12de:	d2 c0       	rjmp	.+420    	; 0x1484 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    12e0:	aa e3       	ldi	r26, 0x3A	; 58
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	ea e3       	ldi	r30, 0x3A	; 58
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <DIO_u8SetPinDirection+0xbc>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <DIO_u8SetPinDirection+0xb8>
    1302:	80 95       	com	r24
    1304:	84 23       	and	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	bd c0       	rjmp	.+378    	; 0x1484 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    130a:	aa e3       	ldi	r26, 0x3A	; 58
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ea e3       	ldi	r30, 0x3A	; 58
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_u8SetPinDirection+0xe6>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_u8SetPinDirection+0xe2>
    132c:	84 2b       	or	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	a9 c0       	rjmp	.+338    	; 0x1484 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3a 87       	std	Y+10, r19	; 0x0a
    133a:	29 87       	std	Y+9, r18	; 0x09
    133c:	89 85       	ldd	r24, Y+9	; 0x09
    133e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	31 f0       	breq	.+12     	; 0x1350 <DIO_u8SetPinDirection+0x10e>
    1344:	29 85       	ldd	r18, Y+9	; 0x09
    1346:	3a 85       	ldd	r19, Y+10	; 0x0a
    1348:	21 30       	cpi	r18, 0x01	; 1
    134a:	31 05       	cpc	r19, r1
    134c:	b1 f0       	breq	.+44     	; 0x137a <DIO_u8SetPinDirection+0x138>
    134e:	9a c0       	rjmp	.+308    	; 0x1484 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    1350:	a7 e3       	ldi	r26, 0x37	; 55
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e7 e3       	ldi	r30, 0x37	; 55
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <DIO_u8SetPinDirection+0x12c>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <DIO_u8SetPinDirection+0x128>
    1372:	80 95       	com	r24
    1374:	84 23       	and	r24, r20
    1376:	8c 93       	st	X, r24
    1378:	85 c0       	rjmp	.+266    	; 0x1484 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    137a:	a7 e3       	ldi	r26, 0x37	; 55
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e7 e3       	ldi	r30, 0x37	; 55
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <DIO_u8SetPinDirection+0x156>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <DIO_u8SetPinDirection+0x152>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	71 c0       	rjmp	.+226    	; 0x1484 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	28 2f       	mov	r18, r24
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	38 87       	std	Y+8, r19	; 0x08
    13aa:	2f 83       	std	Y+7, r18	; 0x07
    13ac:	8f 81       	ldd	r24, Y+7	; 0x07
    13ae:	98 85       	ldd	r25, Y+8	; 0x08
    13b0:	00 97       	sbiw	r24, 0x00	; 0
    13b2:	31 f0       	breq	.+12     	; 0x13c0 <DIO_u8SetPinDirection+0x17e>
    13b4:	2f 81       	ldd	r18, Y+7	; 0x07
    13b6:	38 85       	ldd	r19, Y+8	; 0x08
    13b8:	21 30       	cpi	r18, 0x01	; 1
    13ba:	31 05       	cpc	r19, r1
    13bc:	b1 f0       	breq	.+44     	; 0x13ea <DIO_u8SetPinDirection+0x1a8>
    13be:	62 c0       	rjmp	.+196    	; 0x1484 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    13c0:	a4 e3       	ldi	r26, 0x34	; 52
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e4 e3       	ldi	r30, 0x34	; 52
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <DIO_u8SetPinDirection+0x19c>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <DIO_u8SetPinDirection+0x198>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	4d c0       	rjmp	.+154    	; 0x1484 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    13ea:	a4 e3       	ldi	r26, 0x34	; 52
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e4 e3       	ldi	r30, 0x34	; 52
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <DIO_u8SetPinDirection+0x1c6>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <DIO_u8SetPinDirection+0x1c2>
    140c:	84 2b       	or	r24, r20
    140e:	8c 93       	st	X, r24
    1410:	39 c0       	rjmp	.+114    	; 0x1484 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
    1412:	8b 81       	ldd	r24, Y+3	; 0x03
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	3e 83       	std	Y+6, r19	; 0x06
    141a:	2d 83       	std	Y+5, r18	; 0x05
    141c:	8d 81       	ldd	r24, Y+5	; 0x05
    141e:	9e 81       	ldd	r25, Y+6	; 0x06
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	31 f0       	breq	.+12     	; 0x1430 <DIO_u8SetPinDirection+0x1ee>
    1424:	2d 81       	ldd	r18, Y+5	; 0x05
    1426:	3e 81       	ldd	r19, Y+6	; 0x06
    1428:	21 30       	cpi	r18, 0x01	; 1
    142a:	31 05       	cpc	r19, r1
    142c:	b1 f0       	breq	.+44     	; 0x145a <DIO_u8SetPinDirection+0x218>
    142e:	2a c0       	rjmp	.+84     	; 0x1484 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    1430:	a1 e3       	ldi	r26, 0x31	; 49
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e1 e3       	ldi	r30, 0x31	; 49
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <DIO_u8SetPinDirection+0x20c>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <DIO_u8SetPinDirection+0x208>
    1452:	80 95       	com	r24
    1454:	84 23       	and	r24, r20
    1456:	8c 93       	st	X, r24
    1458:	15 c0       	rjmp	.+42     	; 0x1484 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    145a:	a1 e3       	ldi	r26, 0x31	; 49
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e1 e3       	ldi	r30, 0x31	; 49
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	48 2f       	mov	r20, r24
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	28 2f       	mov	r18, r24
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	81 e0       	ldi	r24, 0x01	; 1
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 2e       	mov	r0, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_u8SetPinDirection+0x236>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	0a 94       	dec	r0
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_u8SetPinDirection+0x232>
    147c:	84 2b       	or	r24, r20
    147e:	8c 93       	st	X, r24
    1480:	01 c0       	rjmp	.+2      	; 0x1484 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1482:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1484:	89 81       	ldd	r24, Y+1	; 0x01
}
    1486:	2e 96       	adiw	r28, 0x0e	; 14
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	2e 97       	sbiw	r28, 0x0e	; 14
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	f8 94       	cli
    14a6:	de bf       	out	0x3e, r29	; 62
    14a8:	0f be       	out	0x3f, r0	; 63
    14aa:	cd bf       	out	0x3d, r28	; 61
    14ac:	8a 83       	std	Y+2, r24	; 0x02
    14ae:	6b 83       	std	Y+3, r22	; 0x03
    14b0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	88 30       	cpi	r24, 0x08	; 8
    14ba:	08 f0       	brcs	.+2      	; 0x14be <DIO_u8SetPinValue+0x26>
    14bc:	0c c1       	rjmp	.+536    	; 0x16d6 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	28 2f       	mov	r18, r24
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	3e 87       	std	Y+14, r19	; 0x0e
    14c6:	2d 87       	std	Y+13, r18	; 0x0d
    14c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	91 05       	cpc	r25, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <DIO_u8SetPinValue+0x3c>
    14d2:	51 c0       	rjmp	.+162    	; 0x1576 <DIO_u8SetPinValue+0xde>
    14d4:	2d 85       	ldd	r18, Y+13	; 0x0d
    14d6:	3e 85       	ldd	r19, Y+14	; 0x0e
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	2c f4       	brge	.+10     	; 0x14e8 <DIO_u8SetPinValue+0x50>
    14de:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	71 f0       	breq	.+28     	; 0x1502 <DIO_u8SetPinValue+0x6a>
    14e6:	f5 c0       	rjmp	.+490    	; 0x16d2 <DIO_u8SetPinValue+0x23a>
    14e8:	2d 85       	ldd	r18, Y+13	; 0x0d
    14ea:	3e 85       	ldd	r19, Y+14	; 0x0e
    14ec:	22 30       	cpi	r18, 0x02	; 2
    14ee:	31 05       	cpc	r19, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <DIO_u8SetPinValue+0x5c>
    14f2:	7b c0       	rjmp	.+246    	; 0x15ea <DIO_u8SetPinValue+0x152>
    14f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	09 f4       	brne	.+2      	; 0x1500 <DIO_u8SetPinValue+0x68>
    14fe:	af c0       	rjmp	.+350    	; 0x165e <DIO_u8SetPinValue+0x1c6>
    1500:	e8 c0       	rjmp	.+464    	; 0x16d2 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3c 87       	std	Y+12, r19	; 0x0c
    150a:	2b 87       	std	Y+11, r18	; 0x0b
    150c:	8b 85       	ldd	r24, Y+11	; 0x0b
    150e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	31 f0       	breq	.+12     	; 0x1520 <DIO_u8SetPinValue+0x88>
    1514:	2b 85       	ldd	r18, Y+11	; 0x0b
    1516:	3c 85       	ldd	r19, Y+12	; 0x0c
    1518:	21 30       	cpi	r18, 0x01	; 1
    151a:	31 05       	cpc	r19, r1
    151c:	b1 f0       	breq	.+44     	; 0x154a <DIO_u8SetPinValue+0xb2>
    151e:	29 c0       	rjmp	.+82     	; 0x1572 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1520:	ab e3       	ldi	r26, 0x3B	; 59
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	eb e3       	ldi	r30, 0x3B	; 59
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	48 2f       	mov	r20, r24
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	28 2f       	mov	r18, r24
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	02 2e       	mov	r0, r18
    1538:	02 c0       	rjmp	.+4      	; 0x153e <DIO_u8SetPinValue+0xa6>
    153a:	88 0f       	add	r24, r24
    153c:	99 1f       	adc	r25, r25
    153e:	0a 94       	dec	r0
    1540:	e2 f7       	brpl	.-8      	; 0x153a <DIO_u8SetPinValue+0xa2>
    1542:	80 95       	com	r24
    1544:	84 23       	and	r24, r20
    1546:	8c 93       	st	X, r24
    1548:	c7 c0       	rjmp	.+398    	; 0x16d8 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    154a:	ab e3       	ldi	r26, 0x3B	; 59
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	eb e3       	ldi	r30, 0x3B	; 59
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	48 2f       	mov	r20, r24
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	02 2e       	mov	r0, r18
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <DIO_u8SetPinValue+0xd0>
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	0a 94       	dec	r0
    156a:	e2 f7       	brpl	.-8      	; 0x1564 <DIO_u8SetPinValue+0xcc>
    156c:	84 2b       	or	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	b3 c0       	rjmp	.+358    	; 0x16d8 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1572:	19 82       	std	Y+1, r1	; 0x01
    1574:	b1 c0       	rjmp	.+354    	; 0x16d8 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3a 87       	std	Y+10, r19	; 0x0a
    157e:	29 87       	std	Y+9, r18	; 0x09
    1580:	89 85       	ldd	r24, Y+9	; 0x09
    1582:	9a 85       	ldd	r25, Y+10	; 0x0a
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	31 f0       	breq	.+12     	; 0x1594 <DIO_u8SetPinValue+0xfc>
    1588:	29 85       	ldd	r18, Y+9	; 0x09
    158a:	3a 85       	ldd	r19, Y+10	; 0x0a
    158c:	21 30       	cpi	r18, 0x01	; 1
    158e:	31 05       	cpc	r19, r1
    1590:	b1 f0       	breq	.+44     	; 0x15be <DIO_u8SetPinValue+0x126>
    1592:	29 c0       	rjmp	.+82     	; 0x15e6 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1594:	a8 e3       	ldi	r26, 0x38	; 56
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e8 e3       	ldi	r30, 0x38	; 56
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <DIO_u8SetPinValue+0x11a>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <DIO_u8SetPinValue+0x116>
    15b6:	80 95       	com	r24
    15b8:	84 23       	and	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	8d c0       	rjmp	.+282    	; 0x16d8 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    15be:	a8 e3       	ldi	r26, 0x38	; 56
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e8 e3       	ldi	r30, 0x38	; 56
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_u8SetPinValue+0x144>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_u8SetPinValue+0x140>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	79 c0       	rjmp	.+242    	; 0x16d8 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    15e6:	19 82       	std	Y+1, r1	; 0x01
    15e8:	77 c0       	rjmp	.+238    	; 0x16d8 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    15ea:	8c 81       	ldd	r24, Y+4	; 0x04
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	38 87       	std	Y+8, r19	; 0x08
    15f2:	2f 83       	std	Y+7, r18	; 0x07
    15f4:	8f 81       	ldd	r24, Y+7	; 0x07
    15f6:	98 85       	ldd	r25, Y+8	; 0x08
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	31 f0       	breq	.+12     	; 0x1608 <DIO_u8SetPinValue+0x170>
    15fc:	2f 81       	ldd	r18, Y+7	; 0x07
    15fe:	38 85       	ldd	r19, Y+8	; 0x08
    1600:	21 30       	cpi	r18, 0x01	; 1
    1602:	31 05       	cpc	r19, r1
    1604:	b1 f0       	breq	.+44     	; 0x1632 <DIO_u8SetPinValue+0x19a>
    1606:	29 c0       	rjmp	.+82     	; 0x165a <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1608:	a5 e3       	ldi	r26, 0x35	; 53
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e5 e3       	ldi	r30, 0x35	; 53
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_u8SetPinValue+0x18e>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_u8SetPinValue+0x18a>
    162a:	80 95       	com	r24
    162c:	84 23       	and	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	53 c0       	rjmp	.+166    	; 0x16d8 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1632:	a5 e3       	ldi	r26, 0x35	; 53
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	e5 e3       	ldi	r30, 0x35	; 53
    1638:	f0 e0       	ldi	r31, 0x00	; 0
    163a:	80 81       	ld	r24, Z
    163c:	48 2f       	mov	r20, r24
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	02 2e       	mov	r0, r18
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <DIO_u8SetPinValue+0x1b8>
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	0a 94       	dec	r0
    1652:	e2 f7       	brpl	.-8      	; 0x164c <DIO_u8SetPinValue+0x1b4>
    1654:	84 2b       	or	r24, r20
    1656:	8c 93       	st	X, r24
    1658:	3f c0       	rjmp	.+126    	; 0x16d8 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    165a:	19 82       	std	Y+1, r1	; 0x01
    165c:	3d c0       	rjmp	.+122    	; 0x16d8 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    165e:	8c 81       	ldd	r24, Y+4	; 0x04
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3e 83       	std	Y+6, r19	; 0x06
    1666:	2d 83       	std	Y+5, r18	; 0x05
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	31 f0       	breq	.+12     	; 0x167c <DIO_u8SetPinValue+0x1e4>
    1670:	2d 81       	ldd	r18, Y+5	; 0x05
    1672:	3e 81       	ldd	r19, Y+6	; 0x06
    1674:	21 30       	cpi	r18, 0x01	; 1
    1676:	31 05       	cpc	r19, r1
    1678:	b1 f0       	breq	.+44     	; 0x16a6 <DIO_u8SetPinValue+0x20e>
    167a:	29 c0       	rjmp	.+82     	; 0x16ce <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    167c:	a2 e3       	ldi	r26, 0x32	; 50
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e2 e3       	ldi	r30, 0x32	; 50
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <DIO_u8SetPinValue+0x202>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <DIO_u8SetPinValue+0x1fe>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	19 c0       	rjmp	.+50     	; 0x16d8 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    16a6:	a2 e3       	ldi	r26, 0x32	; 50
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e2 e3       	ldi	r30, 0x32	; 50
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_u8SetPinValue+0x22c>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_u8SetPinValue+0x228>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	05 c0       	rjmp	.+10     	; 0x16d8 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    16ce:	19 82       	std	Y+1, r1	; 0x01
    16d0:	03 c0       	rjmp	.+6      	; 0x16d8 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    16d2:	19 82       	std	Y+1, r1	; 0x01
    16d4:	01 c0       	rjmp	.+2      	; 0x16d8 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    16d6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    16da:	2e 96       	adiw	r28, 0x0e	; 14
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	28 97       	sbiw	r28, 0x08	; 8
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	8b 83       	std	Y+3, r24	; 0x03
    1702:	6c 83       	std	Y+4, r22	; 0x04
    1704:	5e 83       	std	Y+6, r21	; 0x06
    1706:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	84 30       	cpi	r24, 0x04	; 4
    1710:	08 f0       	brcs	.+2      	; 0x1714 <DIO_u8GetPinValue+0x28>
    1712:	a1 c0       	rjmp	.+322    	; 0x1856 <DIO_u8GetPinValue+0x16a>
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	88 30       	cpi	r24, 0x08	; 8
    1718:	08 f0       	brcs	.+2      	; 0x171c <DIO_u8GetPinValue+0x30>
    171a:	9d c0       	rjmp	.+314    	; 0x1856 <DIO_u8GetPinValue+0x16a>
    171c:	8d 81       	ldd	r24, Y+5	; 0x05
    171e:	9e 81       	ldd	r25, Y+6	; 0x06
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	09 f4       	brne	.+2      	; 0x1726 <DIO_u8GetPinValue+0x3a>
    1724:	98 c0       	rjmp	.+304    	; 0x1856 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	28 2f       	mov	r18, r24
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	38 87       	std	Y+8, r19	; 0x08
    172e:	2f 83       	std	Y+7, r18	; 0x07
    1730:	4f 81       	ldd	r20, Y+7	; 0x07
    1732:	58 85       	ldd	r21, Y+8	; 0x08
    1734:	41 30       	cpi	r20, 0x01	; 1
    1736:	51 05       	cpc	r21, r1
    1738:	a9 f1       	breq	.+106    	; 0x17a4 <DIO_u8GetPinValue+0xb8>
    173a:	8f 81       	ldd	r24, Y+7	; 0x07
    173c:	98 85       	ldd	r25, Y+8	; 0x08
    173e:	82 30       	cpi	r24, 0x02	; 2
    1740:	91 05       	cpc	r25, r1
    1742:	34 f4       	brge	.+12     	; 0x1750 <DIO_u8GetPinValue+0x64>
    1744:	2f 81       	ldd	r18, Y+7	; 0x07
    1746:	38 85       	ldd	r19, Y+8	; 0x08
    1748:	21 15       	cp	r18, r1
    174a:	31 05       	cpc	r19, r1
    174c:	71 f0       	breq	.+28     	; 0x176a <DIO_u8GetPinValue+0x7e>
    174e:	81 c0       	rjmp	.+258    	; 0x1852 <DIO_u8GetPinValue+0x166>
    1750:	4f 81       	ldd	r20, Y+7	; 0x07
    1752:	58 85       	ldd	r21, Y+8	; 0x08
    1754:	42 30       	cpi	r20, 0x02	; 2
    1756:	51 05       	cpc	r21, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <DIO_u8GetPinValue+0x70>
    175a:	41 c0       	rjmp	.+130    	; 0x17de <DIO_u8GetPinValue+0xf2>
    175c:	8f 81       	ldd	r24, Y+7	; 0x07
    175e:	98 85       	ldd	r25, Y+8	; 0x08
    1760:	83 30       	cpi	r24, 0x03	; 3
    1762:	91 05       	cpc	r25, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <DIO_u8GetPinValue+0x7c>
    1766:	58 c0       	rjmp	.+176    	; 0x1818 <DIO_u8GetPinValue+0x12c>
    1768:	74 c0       	rjmp	.+232    	; 0x1852 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    176a:	e9 e3       	ldi	r30, 0x39	; 57
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	8c 81       	ldd	r24, Y+4	; 0x04
    1776:	88 2f       	mov	r24, r24
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a9 01       	movw	r20, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <DIO_u8GetPinValue+0x96>
    177e:	55 95       	asr	r21
    1780:	47 95       	ror	r20
    1782:	8a 95       	dec	r24
    1784:	e2 f7       	brpl	.-8      	; 0x177e <DIO_u8GetPinValue+0x92>
    1786:	ca 01       	movw	r24, r20
    1788:	81 70       	andi	r24, 0x01	; 1
    178a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	88 23       	and	r24, r24
    1790:	21 f4       	brne	.+8      	; 0x179a <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1792:	ed 81       	ldd	r30, Y+5	; 0x05
    1794:	fe 81       	ldd	r31, Y+6	; 0x06
    1796:	10 82       	st	Z, r1
    1798:	5f c0       	rjmp	.+190    	; 0x1858 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    179a:	ed 81       	ldd	r30, Y+5	; 0x05
    179c:	fe 81       	ldd	r31, Y+6	; 0x06
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	80 83       	st	Z, r24
    17a2:	5a c0       	rjmp	.+180    	; 0x1858 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    17a4:	e6 e3       	ldi	r30, 0x36	; 54
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	80 81       	ld	r24, Z
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	a9 01       	movw	r20, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <DIO_u8GetPinValue+0xd0>
    17b8:	55 95       	asr	r21
    17ba:	47 95       	ror	r20
    17bc:	8a 95       	dec	r24
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <DIO_u8GetPinValue+0xcc>
    17c0:	ca 01       	movw	r24, r20
    17c2:	81 70       	andi	r24, 0x01	; 1
    17c4:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	88 23       	and	r24, r24
    17ca:	21 f4       	brne	.+8      	; 0x17d4 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    17cc:	ed 81       	ldd	r30, Y+5	; 0x05
    17ce:	fe 81       	ldd	r31, Y+6	; 0x06
    17d0:	10 82       	st	Z, r1
    17d2:	42 c0       	rjmp	.+132    	; 0x1858 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    17d4:	ed 81       	ldd	r30, Y+5	; 0x05
    17d6:	fe 81       	ldd	r31, Y+6	; 0x06
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	80 83       	st	Z, r24
    17dc:	3d c0       	rjmp	.+122    	; 0x1858 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    17de:	e3 e3       	ldi	r30, 0x33	; 51
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ea:	88 2f       	mov	r24, r24
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	a9 01       	movw	r20, r18
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <DIO_u8GetPinValue+0x10a>
    17f2:	55 95       	asr	r21
    17f4:	47 95       	ror	r20
    17f6:	8a 95       	dec	r24
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <DIO_u8GetPinValue+0x106>
    17fa:	ca 01       	movw	r24, r20
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1800:	89 81       	ldd	r24, Y+1	; 0x01
    1802:	88 23       	and	r24, r24
    1804:	21 f4       	brne	.+8      	; 0x180e <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1806:	ed 81       	ldd	r30, Y+5	; 0x05
    1808:	fe 81       	ldd	r31, Y+6	; 0x06
    180a:	10 82       	st	Z, r1
    180c:	25 c0       	rjmp	.+74     	; 0x1858 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    180e:	ed 81       	ldd	r30, Y+5	; 0x05
    1810:	fe 81       	ldd	r31, Y+6	; 0x06
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	80 83       	st	Z, r24
    1816:	20 c0       	rjmp	.+64     	; 0x1858 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1818:	e0 e3       	ldi	r30, 0x30	; 48
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	8c 81       	ldd	r24, Y+4	; 0x04
    1824:	88 2f       	mov	r24, r24
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	a9 01       	movw	r20, r18
    182a:	02 c0       	rjmp	.+4      	; 0x1830 <DIO_u8GetPinValue+0x144>
    182c:	55 95       	asr	r21
    182e:	47 95       	ror	r20
    1830:	8a 95       	dec	r24
    1832:	e2 f7       	brpl	.-8      	; 0x182c <DIO_u8GetPinValue+0x140>
    1834:	ca 01       	movw	r24, r20
    1836:	81 70       	andi	r24, 0x01	; 1
    1838:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	88 23       	and	r24, r24
    183e:	21 f4       	brne	.+8      	; 0x1848 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1840:	ed 81       	ldd	r30, Y+5	; 0x05
    1842:	fe 81       	ldd	r31, Y+6	; 0x06
    1844:	10 82       	st	Z, r1
    1846:	08 c0       	rjmp	.+16     	; 0x1858 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1848:	ed 81       	ldd	r30, Y+5	; 0x05
    184a:	fe 81       	ldd	r31, Y+6	; 0x06
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	80 83       	st	Z, r24
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    1852:	1a 82       	std	Y+2, r1	; 0x02
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1856:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
}
    185a:	28 96       	adiw	r28, 0x08	; 8
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	2d 97       	sbiw	r28, 0x0d	; 13
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	88 23       	and	r24, r24
    188c:	21 f0       	breq	.+8      	; 0x1896 <DIO_u8SetPortDirection+0x2a>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	09 f0       	breq	.+2      	; 0x1896 <DIO_u8SetPortDirection+0x2a>
    1894:	82 c0       	rjmp	.+260    	; 0x199a <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	3d 87       	std	Y+13, r19	; 0x0d
    189e:	2c 87       	std	Y+12, r18	; 0x0c
    18a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    18a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    18a4:	81 30       	cpi	r24, 0x01	; 1
    18a6:	91 05       	cpc	r25, r1
    18a8:	71 f1       	breq	.+92     	; 0x1906 <DIO_u8SetPortDirection+0x9a>
    18aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    18ae:	22 30       	cpi	r18, 0x02	; 2
    18b0:	31 05       	cpc	r19, r1
    18b2:	2c f4       	brge	.+10     	; 0x18be <DIO_u8SetPortDirection+0x52>
    18b4:	8c 85       	ldd	r24, Y+12	; 0x0c
    18b6:	9d 85       	ldd	r25, Y+13	; 0x0d
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	69 f0       	breq	.+26     	; 0x18d6 <DIO_u8SetPortDirection+0x6a>
    18bc:	6c c0       	rjmp	.+216    	; 0x1996 <DIO_u8SetPortDirection+0x12a>
    18be:	2c 85       	ldd	r18, Y+12	; 0x0c
    18c0:	3d 85       	ldd	r19, Y+13	; 0x0d
    18c2:	22 30       	cpi	r18, 0x02	; 2
    18c4:	31 05       	cpc	r19, r1
    18c6:	b9 f1       	breq	.+110    	; 0x1936 <DIO_u8SetPortDirection+0xca>
    18c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    18ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    18cc:	83 30       	cpi	r24, 0x03	; 3
    18ce:	91 05       	cpc	r25, r1
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <DIO_u8SetPortDirection+0x68>
    18d2:	49 c0       	rjmp	.+146    	; 0x1966 <DIO_u8SetPortDirection+0xfa>
    18d4:	60 c0       	rjmp	.+192    	; 0x1996 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	3b 87       	std	Y+11, r19	; 0x0b
    18de:	2a 87       	std	Y+10, r18	; 0x0a
    18e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	31 f0       	breq	.+12     	; 0x18f4 <DIO_u8SetPortDirection+0x88>
    18e8:	2a 85       	ldd	r18, Y+10	; 0x0a
    18ea:	3b 85       	ldd	r19, Y+11	; 0x0b
    18ec:	21 30       	cpi	r18, 0x01	; 1
    18ee:	31 05       	cpc	r19, r1
    18f0:	29 f0       	breq	.+10     	; 0x18fc <DIO_u8SetPortDirection+0x90>
    18f2:	54 c0       	rjmp	.+168    	; 0x199c <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    18f4:	ea e3       	ldi	r30, 0x3A	; 58
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	10 82       	st	Z, r1
    18fa:	50 c0       	rjmp	.+160    	; 0x199c <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    18fc:	ea e3       	ldi	r30, 0x3A	; 58
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8f ef       	ldi	r24, 0xFF	; 255
    1902:	80 83       	st	Z, r24
    1904:	4b c0       	rjmp	.+150    	; 0x199c <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    1906:	8b 81       	ldd	r24, Y+3	; 0x03
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	39 87       	std	Y+9, r19	; 0x09
    190e:	28 87       	std	Y+8, r18	; 0x08
    1910:	88 85       	ldd	r24, Y+8	; 0x08
    1912:	99 85       	ldd	r25, Y+9	; 0x09
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	31 f0       	breq	.+12     	; 0x1924 <DIO_u8SetPortDirection+0xb8>
    1918:	28 85       	ldd	r18, Y+8	; 0x08
    191a:	39 85       	ldd	r19, Y+9	; 0x09
    191c:	21 30       	cpi	r18, 0x01	; 1
    191e:	31 05       	cpc	r19, r1
    1920:	29 f0       	breq	.+10     	; 0x192c <DIO_u8SetPortDirection+0xc0>
    1922:	3c c0       	rjmp	.+120    	; 0x199c <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    1924:	e7 e3       	ldi	r30, 0x37	; 55
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	10 82       	st	Z, r1
    192a:	38 c0       	rjmp	.+112    	; 0x199c <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    192c:	e7 e3       	ldi	r30, 0x37	; 55
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8f ef       	ldi	r24, 0xFF	; 255
    1932:	80 83       	st	Z, r24
    1934:	33 c0       	rjmp	.+102    	; 0x199c <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    1936:	8b 81       	ldd	r24, Y+3	; 0x03
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	3f 83       	std	Y+7, r19	; 0x07
    193e:	2e 83       	std	Y+6, r18	; 0x06
    1940:	8e 81       	ldd	r24, Y+6	; 0x06
    1942:	9f 81       	ldd	r25, Y+7	; 0x07
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	31 f0       	breq	.+12     	; 0x1954 <DIO_u8SetPortDirection+0xe8>
    1948:	2e 81       	ldd	r18, Y+6	; 0x06
    194a:	3f 81       	ldd	r19, Y+7	; 0x07
    194c:	21 30       	cpi	r18, 0x01	; 1
    194e:	31 05       	cpc	r19, r1
    1950:	29 f0       	breq	.+10     	; 0x195c <DIO_u8SetPortDirection+0xf0>
    1952:	24 c0       	rjmp	.+72     	; 0x199c <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    1954:	e4 e3       	ldi	r30, 0x34	; 52
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	10 82       	st	Z, r1
    195a:	20 c0       	rjmp	.+64     	; 0x199c <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    195c:	e4 e3       	ldi	r30, 0x34	; 52
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	8f ef       	ldi	r24, 0xFF	; 255
    1962:	80 83       	st	Z, r24
    1964:	1b c0       	rjmp	.+54     	; 0x199c <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	3d 83       	std	Y+5, r19	; 0x05
    196e:	2c 83       	std	Y+4, r18	; 0x04
    1970:	8c 81       	ldd	r24, Y+4	; 0x04
    1972:	9d 81       	ldd	r25, Y+5	; 0x05
    1974:	00 97       	sbiw	r24, 0x00	; 0
    1976:	31 f0       	breq	.+12     	; 0x1984 <DIO_u8SetPortDirection+0x118>
    1978:	2c 81       	ldd	r18, Y+4	; 0x04
    197a:	3d 81       	ldd	r19, Y+5	; 0x05
    197c:	21 30       	cpi	r18, 0x01	; 1
    197e:	31 05       	cpc	r19, r1
    1980:	29 f0       	breq	.+10     	; 0x198c <DIO_u8SetPortDirection+0x120>
    1982:	0c c0       	rjmp	.+24     	; 0x199c <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    1984:	e1 e3       	ldi	r30, 0x31	; 49
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	10 82       	st	Z, r1
    198a:	08 c0       	rjmp	.+16     	; 0x199c <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    198c:	e1 e3       	ldi	r30, 0x31	; 49
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	8f ef       	ldi	r24, 0xFF	; 255
    1992:	80 83       	st	Z, r24
    1994:	03 c0       	rjmp	.+6      	; 0x199c <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1996:	19 82       	std	Y+1, r1	; 0x01
    1998:	01 c0       	rjmp	.+2      	; 0x199c <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    199a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    199c:	89 81       	ldd	r24, Y+1	; 0x01
}
    199e:	2d 96       	adiw	r28, 0x0d	; 13
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	de bf       	out	0x3e, r29	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	cd bf       	out	0x3d, r28	; 61
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <DIO_u8SetPortValue+0x6>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <DIO_u8SetPortValue+0x8>
    19b8:	0f 92       	push	r0
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
    19be:	8a 83       	std	Y+2, r24	; 0x02
    19c0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3d 83       	std	Y+5, r19	; 0x05
    19ce:	2c 83       	std	Y+4, r18	; 0x04
    19d0:	8c 81       	ldd	r24, Y+4	; 0x04
    19d2:	9d 81       	ldd	r25, Y+5	; 0x05
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	91 05       	cpc	r25, r1
    19d8:	d1 f0       	breq	.+52     	; 0x1a0e <DIO_u8SetPortValue+0x5e>
    19da:	2c 81       	ldd	r18, Y+4	; 0x04
    19dc:	3d 81       	ldd	r19, Y+5	; 0x05
    19de:	22 30       	cpi	r18, 0x02	; 2
    19e0:	31 05       	cpc	r19, r1
    19e2:	2c f4       	brge	.+10     	; 0x19ee <DIO_u8SetPortValue+0x3e>
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9d 81       	ldd	r25, Y+5	; 0x05
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	61 f0       	breq	.+24     	; 0x1a04 <DIO_u8SetPortValue+0x54>
    19ec:	1f c0       	rjmp	.+62     	; 0x1a2c <DIO_u8SetPortValue+0x7c>
    19ee:	2c 81       	ldd	r18, Y+4	; 0x04
    19f0:	3d 81       	ldd	r19, Y+5	; 0x05
    19f2:	22 30       	cpi	r18, 0x02	; 2
    19f4:	31 05       	cpc	r19, r1
    19f6:	81 f0       	breq	.+32     	; 0x1a18 <DIO_u8SetPortValue+0x68>
    19f8:	8c 81       	ldd	r24, Y+4	; 0x04
    19fa:	9d 81       	ldd	r25, Y+5	; 0x05
    19fc:	83 30       	cpi	r24, 0x03	; 3
    19fe:	91 05       	cpc	r25, r1
    1a00:	81 f0       	breq	.+32     	; 0x1a22 <DIO_u8SetPortValue+0x72>
    1a02:	14 c0       	rjmp	.+40     	; 0x1a2c <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    1a04:	eb e3       	ldi	r30, 0x3B	; 59
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0a:	80 83       	st	Z, r24
    1a0c:	10 c0       	rjmp	.+32     	; 0x1a2e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    1a0e:	e8 e3       	ldi	r30, 0x38	; 56
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	80 83       	st	Z, r24
    1a16:	0b c0       	rjmp	.+22     	; 0x1a2e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    1a18:	e5 e3       	ldi	r30, 0x35	; 53
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1e:	80 83       	st	Z, r24
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    1a22:	e2 e3       	ldi	r30, 0x32	; 50
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8b 81       	ldd	r24, Y+3	; 0x03
    1a28:	80 83       	st	Z, r24
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <DIO_u8GetPortValue+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <DIO_u8GetPortValue+0x8>
    1a48:	00 d0       	rcall	.+0      	; 0x1a4a <DIO_u8GetPortValue+0xa>
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	8a 83       	std	Y+2, r24	; 0x02
    1a50:	7c 83       	std	Y+4, r23	; 0x04
    1a52:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	e9 f1       	breq	.+122    	; 0x1ada <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	3e 83       	std	Y+6, r19	; 0x06
    1a68:	2d 83       	std	Y+5, r18	; 0x05
    1a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	91 05       	cpc	r25, r1
    1a72:	e1 f0       	breq	.+56     	; 0x1aac <DIO_u8GetPortValue+0x6c>
    1a74:	2d 81       	ldd	r18, Y+5	; 0x05
    1a76:	3e 81       	ldd	r19, Y+6	; 0x06
    1a78:	22 30       	cpi	r18, 0x02	; 2
    1a7a:	31 05       	cpc	r19, r1
    1a7c:	2c f4       	brge	.+10     	; 0x1a88 <DIO_u8GetPortValue+0x48>
    1a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a80:	9e 81       	ldd	r25, Y+6	; 0x06
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	61 f0       	breq	.+24     	; 0x1a9e <DIO_u8GetPortValue+0x5e>
    1a86:	27 c0       	rjmp	.+78     	; 0x1ad6 <DIO_u8GetPortValue+0x96>
    1a88:	2d 81       	ldd	r18, Y+5	; 0x05
    1a8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a8c:	22 30       	cpi	r18, 0x02	; 2
    1a8e:	31 05       	cpc	r19, r1
    1a90:	a1 f0       	breq	.+40     	; 0x1aba <DIO_u8GetPortValue+0x7a>
    1a92:	8d 81       	ldd	r24, Y+5	; 0x05
    1a94:	9e 81       	ldd	r25, Y+6	; 0x06
    1a96:	83 30       	cpi	r24, 0x03	; 3
    1a98:	91 05       	cpc	r25, r1
    1a9a:	b1 f0       	breq	.+44     	; 0x1ac8 <DIO_u8GetPortValue+0x88>
    1a9c:	1c c0       	rjmp	.+56     	; 0x1ad6 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1a9e:	e9 e3       	ldi	r30, 0x39	; 57
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    1aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    1aa8:	80 83       	st	Z, r24
    1aaa:	18 c0       	rjmp	.+48     	; 0x1adc <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1aac:	e6 e3       	ldi	r30, 0x36	; 54
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ab4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ab6:	80 83       	st	Z, r24
    1ab8:	11 c0       	rjmp	.+34     	; 0x1adc <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1aba:	e3 e3       	ldi	r30, 0x33	; 51
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	eb 81       	ldd	r30, Y+3	; 0x03
    1ac2:	fc 81       	ldd	r31, Y+4	; 0x04
    1ac4:	80 83       	st	Z, r24
    1ac6:	0a c0       	rjmp	.+20     	; 0x1adc <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1ac8:	e0 e3       	ldi	r30, 0x30	; 48
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	eb 81       	ldd	r30, Y+3	; 0x03
    1ad0:	fc 81       	ldd	r31, Y+4	; 0x04
    1ad2:	80 83       	st	Z, r24
    1ad4:	03 c0       	rjmp	.+6      	; 0x1adc <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1ad6:	19 82       	std	Y+1, r1	; 0x01
    1ad8:	01 c0       	rjmp	.+2      	; 0x1adc <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1ada:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	26 96       	adiw	r28, 0x06	; 6
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	cf 91       	pop	r28
    1aec:	df 91       	pop	r29
    1aee:	08 95       	ret

00001af0 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	cc 54       	subi	r28, 0x4C	; 76
    1afe:	d0 40       	sbci	r29, 0x00	; 0
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e7 5b       	subi	r30, 0xB7	; 183
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	80 e0       	ldi	r24, 0x00	; 0
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	ac e0       	ldi	r26, 0x0C	; 12
    1b16:	b2 e4       	ldi	r27, 0x42	; 66
    1b18:	80 83       	st	Z, r24
    1b1a:	91 83       	std	Z+1, r25	; 0x01
    1b1c:	a2 83       	std	Z+2, r26	; 0x02
    1b1e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b20:	8e 01       	movw	r16, r28
    1b22:	0b 5b       	subi	r16, 0xBB	; 187
    1b24:	1f 4f       	sbci	r17, 0xFF	; 255
    1b26:	fe 01       	movw	r30, r28
    1b28:	e7 5b       	subi	r30, 0xB7	; 183
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	60 81       	ld	r22, Z
    1b2e:	71 81       	ldd	r23, Z+1	; 0x01
    1b30:	82 81       	ldd	r24, Z+2	; 0x02
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a ef       	ldi	r20, 0xFA	; 250
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	f8 01       	movw	r30, r16
    1b46:	80 83       	st	Z, r24
    1b48:	91 83       	std	Z+1, r25	; 0x01
    1b4a:	a2 83       	std	Z+2, r26	; 0x02
    1b4c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b4e:	fe 01       	movw	r30, r28
    1b50:	eb 5b       	subi	r30, 0xBB	; 187
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	60 81       	ld	r22, Z
    1b56:	71 81       	ldd	r23, Z+1	; 0x01
    1b58:	82 81       	ldd	r24, Z+2	; 0x02
    1b5a:	93 81       	ldd	r25, Z+3	; 0x03
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e8       	ldi	r20, 0x80	; 128
    1b62:	5f e3       	ldi	r21, 0x3F	; 63
    1b64:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1b68:	88 23       	and	r24, r24
    1b6a:	44 f4       	brge	.+16     	; 0x1b7c <LCD_voidInit+0x8c>
		__ticks = 1;
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ed 5b       	subi	r30, 0xBD	; 189
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	64 c0       	rjmp	.+200    	; 0x1c44 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	eb 5b       	subi	r30, 0xBB	; 187
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	3f ef       	ldi	r19, 0xFF	; 255
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	57 e4       	ldi	r21, 0x47	; 71
    1b92:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <LCD_voidInit+0xac>
    1b9a:	43 c0       	rjmp	.+134    	; 0x1c22 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e7 5b       	subi	r30, 0xB7	; 183
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e2       	ldi	r20, 0x20	; 32
    1bb0:	51 e4       	ldi	r21, 0x41	; 65
    1bb2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	8e 01       	movw	r16, r28
    1bbc:	0d 5b       	subi	r16, 0xBD	; 189
    1bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	1f c0       	rjmp	.+62     	; 0x1c12 <LCD_voidInit+0x122>
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	ef 5b       	subi	r30, 0xBF	; 191
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	88 ec       	ldi	r24, 0xC8	; 200
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1be2:	fe 01       	movw	r30, r28
    1be4:	ef 5b       	subi	r30, 0xBF	; 191
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	f1 f7       	brne	.-4      	; 0x1bec <LCD_voidInit+0xfc>
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ef 5b       	subi	r30, 0xBF	; 191
    1bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf6:	91 83       	std	Z+1, r25	; 0x01
    1bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bfa:	de 01       	movw	r26, r28
    1bfc:	ad 5b       	subi	r26, 0xBD	; 189
    1bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    1c00:	fe 01       	movw	r30, r28
    1c02:	ed 5b       	subi	r30, 0xBD	; 189
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	9c 93       	st	X, r25
    1c10:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	fe 01       	movw	r30, r28
    1c14:	ed 5b       	subi	r30, 0xBD	; 189
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	80 81       	ld	r24, Z
    1c1a:	91 81       	ldd	r25, Z+1	; 0x01
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	d1 f6       	brne	.-76     	; 0x1bd4 <LCD_voidInit+0xe4>
    1c20:	24 c0       	rjmp	.+72     	; 0x1c6a <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c22:	8e 01       	movw	r16, r28
    1c24:	0d 5b       	subi	r16, 0xBD	; 189
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	fe 01       	movw	r30, r28
    1c2a:	eb 5b       	subi	r30, 0xBB	; 187
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	60 81       	ld	r22, Z
    1c30:	71 81       	ldd	r23, Z+1	; 0x01
    1c32:	82 81       	ldd	r24, Z+2	; 0x02
    1c34:	93 81       	ldd	r25, Z+3	; 0x03
    1c36:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	f8 01       	movw	r30, r16
    1c40:	91 83       	std	Z+1, r25	; 0x01
    1c42:	80 83       	st	Z, r24
    1c44:	fe 01       	movw	r30, r28
    1c46:	ed 5b       	subi	r30, 0xBD	; 189
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	fe 01       	movw	r30, r28
    1c50:	ff 96       	adiw	r30, 0x3f	; 63
    1c52:	91 83       	std	Z+1, r25	; 0x01
    1c54:	80 83       	st	Z, r24
    1c56:	fe 01       	movw	r30, r28
    1c58:	ff 96       	adiw	r30, 0x3f	; 63
    1c5a:	80 81       	ld	r24, Z
    1c5c:	91 81       	ldd	r25, Z+1	; 0x01
    1c5e:	01 97       	sbiw	r24, 0x01	; 1
    1c60:	f1 f7       	brne	.-4      	; 0x1c5e <LCD_voidInit+0x16e>
    1c62:	fe 01       	movw	r30, r28
    1c64:	ff 96       	adiw	r30, 0x3f	; 63
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    1c6a:	88 e3       	ldi	r24, 0x38	; 56
    1c6c:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	a0 e2       	ldi	r26, 0x20	; 32
    1c76:	b2 e4       	ldi	r27, 0x42	; 66
    1c78:	8b af       	std	Y+59, r24	; 0x3b
    1c7a:	9c af       	std	Y+60, r25	; 0x3c
    1c7c:	ad af       	std	Y+61, r26	; 0x3d
    1c7e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c80:	6b ad       	ldd	r22, Y+59	; 0x3b
    1c82:	7c ad       	ldd	r23, Y+60	; 0x3c
    1c84:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c86:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c88:	2b ea       	ldi	r18, 0xAB	; 171
    1c8a:	3a ea       	ldi	r19, 0xAA	; 170
    1c8c:	4a e2       	ldi	r20, 0x2A	; 42
    1c8e:	50 e4       	ldi	r21, 0x40	; 64
    1c90:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	8f ab       	std	Y+55, r24	; 0x37
    1c9a:	98 af       	std	Y+56, r25	; 0x38
    1c9c:	a9 af       	std	Y+57, r26	; 0x39
    1c9e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1ca0:	6f a9       	ldd	r22, Y+55	; 0x37
    1ca2:	78 ad       	ldd	r23, Y+56	; 0x38
    1ca4:	89 ad       	ldd	r24, Y+57	; 0x39
    1ca6:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	40 e8       	ldi	r20, 0x80	; 128
    1cae:	5f e3       	ldi	r21, 0x3F	; 63
    1cb0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1cb4:	88 23       	and	r24, r24
    1cb6:	1c f4       	brge	.+6      	; 0x1cbe <LCD_voidInit+0x1ce>
		__ticks = 1;
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	8e ab       	std	Y+54, r24	; 0x36
    1cbc:	91 c0       	rjmp	.+290    	; 0x1de0 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1cbe:	6f a9       	ldd	r22, Y+55	; 0x37
    1cc0:	78 ad       	ldd	r23, Y+56	; 0x38
    1cc2:	89 ad       	ldd	r24, Y+57	; 0x39
    1cc4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	53 e4       	ldi	r21, 0x43	; 67
    1cce:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	0c f0       	brlt	.+2      	; 0x1cd8 <LCD_voidInit+0x1e8>
    1cd6:	7b c0       	rjmp	.+246    	; 0x1dce <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1cd8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cda:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cdc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cde:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	4a e7       	ldi	r20, 0x7A	; 122
    1ce6:	54 e4       	ldi	r21, 0x44	; 68
    1ce8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	8a ab       	std	Y+50, r24	; 0x32
    1cf2:	9b ab       	std	Y+51, r25	; 0x33
    1cf4:	ac ab       	std	Y+52, r26	; 0x34
    1cf6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	6a a9       	ldd	r22, Y+50	; 0x32
    1cfa:	7b a9       	ldd	r23, Y+51	; 0x33
    1cfc:	8c a9       	ldd	r24, Y+52	; 0x34
    1cfe:	9d a9       	ldd	r25, Y+53	; 0x35
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	4a ef       	ldi	r20, 0xFA	; 250
    1d06:	54 e4       	ldi	r21, 0x44	; 68
    1d08:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	8e a7       	std	Y+46, r24	; 0x2e
    1d12:	9f a7       	std	Y+47, r25	; 0x2f
    1d14:	a8 ab       	std	Y+48, r26	; 0x30
    1d16:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1d18:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d1a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d1c:	88 a9       	ldd	r24, Y+48	; 0x30
    1d1e:	99 a9       	ldd	r25, Y+49	; 0x31
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <LCD_voidInit+0x24a>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9d a7       	std	Y+45, r25	; 0x2d
    1d36:	8c a7       	std	Y+44, r24	; 0x2c
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1d3a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d3c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d3e:	88 a9       	ldd	r24, Y+48	; 0x30
    1d40:	99 a9       	ldd	r25, Y+49	; 0x31
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	4c f5       	brge	.+82     	; 0x1da4 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	6a a9       	ldd	r22, Y+50	; 0x32
    1d54:	7b a9       	ldd	r23, Y+51	; 0x33
    1d56:	8c a9       	ldd	r24, Y+52	; 0x34
    1d58:	9d a9       	ldd	r25, Y+53	; 0x35
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9d a7       	std	Y+45, r25	; 0x2d
    1d78:	8c a7       	std	Y+44, r24	; 0x2c
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <LCD_voidInit+0x2aa>
    1d7c:	88 ec       	ldi	r24, 0xC8	; 200
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9b a7       	std	Y+43, r25	; 0x2b
    1d82:	8a a7       	std	Y+42, r24	; 0x2a
    1d84:	8a a5       	ldd	r24, Y+42	; 0x2a
    1d86:	9b a5       	ldd	r25, Y+43	; 0x2b
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD_voidInit+0x298>
    1d8c:	9b a7       	std	Y+43, r25	; 0x2b
    1d8e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d92:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	9d a7       	std	Y+45, r25	; 0x2d
    1d98:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d9c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	69 f7       	brne	.-38     	; 0x1d7c <LCD_voidInit+0x28c>
    1da2:	24 c0       	rjmp	.+72     	; 0x1dec <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1da6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1da8:	88 a9       	ldd	r24, Y+48	; 0x30
    1daa:	99 a9       	ldd	r25, Y+49	; 0x31
    1dac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9d a7       	std	Y+45, r25	; 0x2d
    1db6:	8c a7       	std	Y+44, r24	; 0x2c
    1db8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dba:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dbc:	99 a7       	std	Y+41, r25	; 0x29
    1dbe:	88 a7       	std	Y+40, r24	; 0x28
    1dc0:	88 a5       	ldd	r24, Y+40	; 0x28
    1dc2:	99 a5       	ldd	r25, Y+41	; 0x29
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD_voidInit+0x2d4>
    1dc8:	99 a7       	std	Y+41, r25	; 0x29
    1dca:	88 a7       	std	Y+40, r24	; 0x28
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dce:	6f a9       	ldd	r22, Y+55	; 0x37
    1dd0:	78 ad       	ldd	r23, Y+56	; 0x38
    1dd2:	89 ad       	ldd	r24, Y+57	; 0x39
    1dd4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dd6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
    1dde:	8e ab       	std	Y+54, r24	; 0x36
    1de0:	8e a9       	ldd	r24, Y+54	; 0x36
    1de2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1de4:	8f a1       	ldd	r24, Y+39	; 0x27
    1de6:	8a 95       	dec	r24
    1de8:	f1 f7       	brne	.-4      	; 0x1de6 <LCD_voidInit+0x2f6>
    1dea:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    1dec:	8f e0       	ldi	r24, 0x0F	; 15
    1dee:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
    1df2:	80 e0       	ldi	r24, 0x00	; 0
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	a0 e2       	ldi	r26, 0x20	; 32
    1df8:	b2 e4       	ldi	r27, 0x42	; 66
    1dfa:	8b a3       	std	Y+35, r24	; 0x23
    1dfc:	9c a3       	std	Y+36, r25	; 0x24
    1dfe:	ad a3       	std	Y+37, r26	; 0x25
    1e00:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e02:	6b a1       	ldd	r22, Y+35	; 0x23
    1e04:	7c a1       	ldd	r23, Y+36	; 0x24
    1e06:	8d a1       	ldd	r24, Y+37	; 0x25
    1e08:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0a:	2b ea       	ldi	r18, 0xAB	; 171
    1e0c:	3a ea       	ldi	r19, 0xAA	; 170
    1e0e:	4a e2       	ldi	r20, 0x2A	; 42
    1e10:	50 e4       	ldi	r21, 0x40	; 64
    1e12:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	8f 8f       	std	Y+31, r24	; 0x1f
    1e1c:	98 a3       	std	Y+32, r25	; 0x20
    1e1e:	a9 a3       	std	Y+33, r26	; 0x21
    1e20:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e22:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e24:	78 a1       	ldd	r23, Y+32	; 0x20
    1e26:	89 a1       	ldd	r24, Y+33	; 0x21
    1e28:	9a a1       	ldd	r25, Y+34	; 0x22
    1e2a:	20 e0       	ldi	r18, 0x00	; 0
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	40 e8       	ldi	r20, 0x80	; 128
    1e30:	5f e3       	ldi	r21, 0x3F	; 63
    1e32:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e36:	88 23       	and	r24, r24
    1e38:	1c f4       	brge	.+6      	; 0x1e40 <LCD_voidInit+0x350>
		__ticks = 1;
    1e3a:	81 e0       	ldi	r24, 0x01	; 1
    1e3c:	8e 8f       	std	Y+30, r24	; 0x1e
    1e3e:	91 c0       	rjmp	.+290    	; 0x1f62 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1e40:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e42:	78 a1       	ldd	r23, Y+32	; 0x20
    1e44:	89 a1       	ldd	r24, Y+33	; 0x21
    1e46:	9a a1       	ldd	r25, Y+34	; 0x22
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4f e7       	ldi	r20, 0x7F	; 127
    1e4e:	53 e4       	ldi	r21, 0x43	; 67
    1e50:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1e54:	18 16       	cp	r1, r24
    1e56:	0c f0       	brlt	.+2      	; 0x1e5a <LCD_voidInit+0x36a>
    1e58:	7b c0       	rjmp	.+246    	; 0x1f50 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1e5a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e5c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e5e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e60:	9e a1       	ldd	r25, Y+38	; 0x26
    1e62:	20 e0       	ldi	r18, 0x00	; 0
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	4a e7       	ldi	r20, 0x7A	; 122
    1e68:	54 e4       	ldi	r21, 0x44	; 68
    1e6a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1e6e:	dc 01       	movw	r26, r24
    1e70:	cb 01       	movw	r24, r22
    1e72:	8a 8f       	std	Y+26, r24	; 0x1a
    1e74:	9b 8f       	std	Y+27, r25	; 0x1b
    1e76:	ac 8f       	std	Y+28, r26	; 0x1c
    1e78:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1e7c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1e7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e82:	20 e0       	ldi	r18, 0x00	; 0
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	4a ef       	ldi	r20, 0xFA	; 250
    1e88:	54 e4       	ldi	r21, 0x44	; 68
    1e8a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	8e 8b       	std	Y+22, r24	; 0x16
    1e94:	9f 8b       	std	Y+23, r25	; 0x17
    1e96:	a8 8f       	std	Y+24, r26	; 0x18
    1e98:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1e9a:	6e 89       	ldd	r22, Y+22	; 0x16
    1e9c:	7f 89       	ldd	r23, Y+23	; 0x17
    1e9e:	88 8d       	ldd	r24, Y+24	; 0x18
    1ea0:	99 8d       	ldd	r25, Y+25	; 0x19
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e8       	ldi	r20, 0x80	; 128
    1ea8:	5f e3       	ldi	r21, 0x3F	; 63
    1eaa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1eae:	88 23       	and	r24, r24
    1eb0:	2c f4       	brge	.+10     	; 0x1ebc <LCD_voidInit+0x3cc>
		__ticks = 1;
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9d 8b       	std	Y+21, r25	; 0x15
    1eb8:	8c 8b       	std	Y+20, r24	; 0x14
    1eba:	3f c0       	rjmp	.+126    	; 0x1f3a <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1ebc:	6e 89       	ldd	r22, Y+22	; 0x16
    1ebe:	7f 89       	ldd	r23, Y+23	; 0x17
    1ec0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ec2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	3f ef       	ldi	r19, 0xFF	; 255
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	57 e4       	ldi	r21, 0x47	; 71
    1ecc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	4c f5       	brge	.+82     	; 0x1f26 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ed6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ed8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1eda:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e2       	ldi	r20, 0x20	; 32
    1ee2:	51 e4       	ldi	r21, 0x41	; 65
    1ee4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	bc 01       	movw	r22, r24
    1eee:	cd 01       	movw	r24, r26
    1ef0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	9d 8b       	std	Y+21, r25	; 0x15
    1efa:	8c 8b       	std	Y+20, r24	; 0x14
    1efc:	0f c0       	rjmp	.+30     	; 0x1f1c <LCD_voidInit+0x42c>
    1efe:	88 ec       	ldi	r24, 0xC8	; 200
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	9b 8b       	std	Y+19, r25	; 0x13
    1f04:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f06:	8a 89       	ldd	r24, Y+18	; 0x12
    1f08:	9b 89       	ldd	r25, Y+19	; 0x13
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	f1 f7       	brne	.-4      	; 0x1f0a <LCD_voidInit+0x41a>
    1f0e:	9b 8b       	std	Y+19, r25	; 0x13
    1f10:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f12:	8c 89       	ldd	r24, Y+20	; 0x14
    1f14:	9d 89       	ldd	r25, Y+21	; 0x15
    1f16:	01 97       	sbiw	r24, 0x01	; 1
    1f18:	9d 8b       	std	Y+21, r25	; 0x15
    1f1a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1c:	8c 89       	ldd	r24, Y+20	; 0x14
    1f1e:	9d 89       	ldd	r25, Y+21	; 0x15
    1f20:	00 97       	sbiw	r24, 0x00	; 0
    1f22:	69 f7       	brne	.-38     	; 0x1efe <LCD_voidInit+0x40e>
    1f24:	24 c0       	rjmp	.+72     	; 0x1f6e <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f26:	6e 89       	ldd	r22, Y+22	; 0x16
    1f28:	7f 89       	ldd	r23, Y+23	; 0x17
    1f2a:	88 8d       	ldd	r24, Y+24	; 0x18
    1f2c:	99 8d       	ldd	r25, Y+25	; 0x19
    1f2e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	9d 8b       	std	Y+21, r25	; 0x15
    1f38:	8c 8b       	std	Y+20, r24	; 0x14
    1f3a:	8c 89       	ldd	r24, Y+20	; 0x14
    1f3c:	9d 89       	ldd	r25, Y+21	; 0x15
    1f3e:	99 8b       	std	Y+17, r25	; 0x11
    1f40:	88 8b       	std	Y+16, r24	; 0x10
    1f42:	88 89       	ldd	r24, Y+16	; 0x10
    1f44:	99 89       	ldd	r25, Y+17	; 0x11
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_voidInit+0x456>
    1f4a:	99 8b       	std	Y+17, r25	; 0x11
    1f4c:	88 8b       	std	Y+16, r24	; 0x10
    1f4e:	0f c0       	rjmp	.+30     	; 0x1f6e <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f50:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f52:	78 a1       	ldd	r23, Y+32	; 0x20
    1f54:	89 a1       	ldd	r24, Y+33	; 0x21
    1f56:	9a a1       	ldd	r25, Y+34	; 0x22
    1f58:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	8e 8f       	std	Y+30, r24	; 0x1e
    1f62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f64:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f68:	8a 95       	dec	r24
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_voidInit+0x478>
    1f6c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	a0 e0       	ldi	r26, 0x00	; 0
    1f7a:	b0 e4       	ldi	r27, 0x40	; 64
    1f7c:	8b 87       	std	Y+11, r24	; 0x0b
    1f7e:	9c 87       	std	Y+12, r25	; 0x0c
    1f80:	ad 87       	std	Y+13, r26	; 0x0d
    1f82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	4a ef       	ldi	r20, 0xFA	; 250
    1f92:	54 e4       	ldi	r21, 0x44	; 68
    1f94:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	8f 83       	std	Y+7, r24	; 0x07
    1f9e:	98 87       	std	Y+8, r25	; 0x08
    1fa0:	a9 87       	std	Y+9, r26	; 0x09
    1fa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa6:	78 85       	ldd	r23, Y+8	; 0x08
    1fa8:	89 85       	ldd	r24, Y+9	; 0x09
    1faa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	5f e3       	ldi	r21, 0x3F	; 63
    1fb4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1fb8:	88 23       	and	r24, r24
    1fba:	2c f4       	brge	.+10     	; 0x1fc6 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	9e 83       	std	Y+6, r25	; 0x06
    1fc2:	8d 83       	std	Y+5, r24	; 0x05
    1fc4:	3f c0       	rjmp	.+126    	; 0x2044 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc8:	78 85       	ldd	r23, Y+8	; 0x08
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	3f ef       	ldi	r19, 0xFF	; 255
    1fd2:	4f e7       	ldi	r20, 0x7F	; 127
    1fd4:	57 e4       	ldi	r21, 0x47	; 71
    1fd6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1fda:	18 16       	cp	r1, r24
    1fdc:	4c f5       	brge	.+82     	; 0x2030 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fde:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e2       	ldi	r20, 0x20	; 32
    1fec:	51 e4       	ldi	r21, 0x41	; 65
    1fee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ff2:	dc 01       	movw	r26, r24
    1ff4:	cb 01       	movw	r24, r22
    1ff6:	bc 01       	movw	r22, r24
    1ff8:	cd 01       	movw	r24, r26
    1ffa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	9e 83       	std	Y+6, r25	; 0x06
    2004:	8d 83       	std	Y+5, r24	; 0x05
    2006:	0f c0       	rjmp	.+30     	; 0x2026 <LCD_voidInit+0x536>
    2008:	88 ec       	ldi	r24, 0xC8	; 200
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9c 83       	std	Y+4, r25	; 0x04
    200e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	9c 81       	ldd	r25, Y+4	; 0x04
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_voidInit+0x524>
    2018:	9c 83       	std	Y+4, r25	; 0x04
    201a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2026:	8d 81       	ldd	r24, Y+5	; 0x05
    2028:	9e 81       	ldd	r25, Y+6	; 0x06
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	69 f7       	brne	.-38     	; 0x2008 <LCD_voidInit+0x518>
    202e:	14 c0       	rjmp	.+40     	; 0x2058 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2030:	6f 81       	ldd	r22, Y+7	; 0x07
    2032:	78 85       	ldd	r23, Y+8	; 0x08
    2034:	89 85       	ldd	r24, Y+9	; 0x09
    2036:	9a 85       	ldd	r25, Y+10	; 0x0a
    2038:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9e 83       	std	Y+6, r25	; 0x06
    2042:	8d 83       	std	Y+5, r24	; 0x05
    2044:	8d 81       	ldd	r24, Y+5	; 0x05
    2046:	9e 81       	ldd	r25, Y+6	; 0x06
    2048:	9a 83       	std	Y+2, r25	; 0x02
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	89 81       	ldd	r24, Y+1	; 0x01
    204e:	9a 81       	ldd	r25, Y+2	; 0x02
    2050:	01 97       	sbiw	r24, 0x01	; 1
    2052:	f1 f7       	brne	.-4      	; 0x2050 <LCD_voidInit+0x560>
    2054:	9a 83       	std	Y+2, r25	; 0x02
    2056:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    2058:	86 e0       	ldi	r24, 0x06	; 6
    205a:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>


}
    205e:	c4 5b       	subi	r28, 0xB4	; 180
    2060:	df 4f       	sbci	r29, 0xFF	; 255
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	08 95       	ret

00002076 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	e1 97       	sbiw	r28, 0x31	; 49
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    20a0:	83 e0       	ldi	r24, 0x03	; 3
    20a2:	69 a9       	ldd	r22, Y+49	; 0x31
    20a4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	62 e0       	ldi	r22, 0x02	; 2
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	a0 e8       	ldi	r26, 0x80	; 128
    20b8:	bf e3       	ldi	r27, 0x3F	; 63
    20ba:	8d a7       	std	Y+45, r24	; 0x2d
    20bc:	9e a7       	std	Y+46, r25	; 0x2e
    20be:	af a7       	std	Y+47, r26	; 0x2f
    20c0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20c2:	6d a5       	ldd	r22, Y+45	; 0x2d
    20c4:	7e a5       	ldd	r23, Y+46	; 0x2e
    20c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20c8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ca:	2b ea       	ldi	r18, 0xAB	; 171
    20cc:	3a ea       	ldi	r19, 0xAA	; 170
    20ce:	4a e2       	ldi	r20, 0x2A	; 42
    20d0:	50 e4       	ldi	r21, 0x40	; 64
    20d2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	89 a7       	std	Y+41, r24	; 0x29
    20dc:	9a a7       	std	Y+42, r25	; 0x2a
    20de:	ab a7       	std	Y+43, r26	; 0x2b
    20e0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    20e2:	69 a5       	ldd	r22, Y+41	; 0x29
    20e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    20e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    20e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e8       	ldi	r20, 0x80	; 128
    20f0:	5f e3       	ldi	r21, 0x3F	; 63
    20f2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    20f6:	88 23       	and	r24, r24
    20f8:	1c f4       	brge	.+6      	; 0x2100 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    20fa:	81 e0       	ldi	r24, 0x01	; 1
    20fc:	88 a7       	std	Y+40, r24	; 0x28
    20fe:	91 c0       	rjmp	.+290    	; 0x2222 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    2100:	69 a5       	ldd	r22, Y+41	; 0x29
    2102:	7a a5       	ldd	r23, Y+42	; 0x2a
    2104:	8b a5       	ldd	r24, Y+43	; 0x2b
    2106:	9c a5       	ldd	r25, Y+44	; 0x2c
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	53 e4       	ldi	r21, 0x43	; 67
    2110:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	0c f0       	brlt	.+2      	; 0x211a <LCD_voidSendCmnd+0xa4>
    2118:	7b c0       	rjmp	.+246    	; 0x2210 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    211a:	6d a5       	ldd	r22, Y+45	; 0x2d
    211c:	7e a5       	ldd	r23, Y+46	; 0x2e
    211e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2120:	98 a9       	ldd	r25, Y+48	; 0x30
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	4a e7       	ldi	r20, 0x7A	; 122
    2128:	54 e4       	ldi	r21, 0x44	; 68
    212a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	8c a3       	std	Y+36, r24	; 0x24
    2134:	9d a3       	std	Y+37, r25	; 0x25
    2136:	ae a3       	std	Y+38, r26	; 0x26
    2138:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213a:	6c a1       	ldd	r22, Y+36	; 0x24
    213c:	7d a1       	ldd	r23, Y+37	; 0x25
    213e:	8e a1       	ldd	r24, Y+38	; 0x26
    2140:	9f a1       	ldd	r25, Y+39	; 0x27
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	4a ef       	ldi	r20, 0xFA	; 250
    2148:	54 e4       	ldi	r21, 0x44	; 68
    214a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	88 a3       	std	Y+32, r24	; 0x20
    2154:	99 a3       	std	Y+33, r25	; 0x21
    2156:	aa a3       	std	Y+34, r26	; 0x22
    2158:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    215a:	68 a1       	ldd	r22, Y+32	; 0x20
    215c:	79 a1       	ldd	r23, Y+33	; 0x21
    215e:	8a a1       	ldd	r24, Y+34	; 0x22
    2160:	9b a1       	ldd	r25, Y+35	; 0x23
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	40 e8       	ldi	r20, 0x80	; 128
    2168:	5f e3       	ldi	r21, 0x3F	; 63
    216a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    216e:	88 23       	and	r24, r24
    2170:	2c f4       	brge	.+10     	; 0x217c <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	9f 8f       	std	Y+31, r25	; 0x1f
    2178:	8e 8f       	std	Y+30, r24	; 0x1e
    217a:	3f c0       	rjmp	.+126    	; 0x21fa <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    217c:	68 a1       	ldd	r22, Y+32	; 0x20
    217e:	79 a1       	ldd	r23, Y+33	; 0x21
    2180:	8a a1       	ldd	r24, Y+34	; 0x22
    2182:	9b a1       	ldd	r25, Y+35	; 0x23
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	4c f5       	brge	.+82     	; 0x21e6 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2194:	6c a1       	ldd	r22, Y+36	; 0x24
    2196:	7d a1       	ldd	r23, Y+37	; 0x25
    2198:	8e a1       	ldd	r24, Y+38	; 0x26
    219a:	9f a1       	ldd	r25, Y+39	; 0x27
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	40 e2       	ldi	r20, 0x20	; 32
    21a2:	51 e4       	ldi	r21, 0x41	; 65
    21a4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	9f 8f       	std	Y+31, r25	; 0x1f
    21ba:	8e 8f       	std	Y+30, r24	; 0x1e
    21bc:	0f c0       	rjmp	.+30     	; 0x21dc <LCD_voidSendCmnd+0x166>
    21be:	88 ec       	ldi	r24, 0xC8	; 200
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	9d 8f       	std	Y+29, r25	; 0x1d
    21c4:	8c 8f       	std	Y+28, r24	; 0x1c
    21c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	f1 f7       	brne	.-4      	; 0x21ca <LCD_voidSendCmnd+0x154>
    21ce:	9d 8f       	std	Y+29, r25	; 0x1d
    21d0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9f 8f       	std	Y+31, r25	; 0x1f
    21da:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21de:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21e0:	00 97       	sbiw	r24, 0x00	; 0
    21e2:	69 f7       	brne	.-38     	; 0x21be <LCD_voidSendCmnd+0x148>
    21e4:	24 c0       	rjmp	.+72     	; 0x222e <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e6:	68 a1       	ldd	r22, Y+32	; 0x20
    21e8:	79 a1       	ldd	r23, Y+33	; 0x21
    21ea:	8a a1       	ldd	r24, Y+34	; 0x22
    21ec:	9b a1       	ldd	r25, Y+35	; 0x23
    21ee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	9f 8f       	std	Y+31, r25	; 0x1f
    21f8:	8e 8f       	std	Y+30, r24	; 0x1e
    21fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    21fe:	9b 8f       	std	Y+27, r25	; 0x1b
    2200:	8a 8f       	std	Y+26, r24	; 0x1a
    2202:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2204:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	f1 f7       	brne	.-4      	; 0x2206 <LCD_voidSendCmnd+0x190>
    220a:	9b 8f       	std	Y+27, r25	; 0x1b
    220c:	8a 8f       	std	Y+26, r24	; 0x1a
    220e:	0f c0       	rjmp	.+30     	; 0x222e <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2210:	69 a5       	ldd	r22, Y+41	; 0x29
    2212:	7a a5       	ldd	r23, Y+42	; 0x2a
    2214:	8b a5       	ldd	r24, Y+43	; 0x2b
    2216:	9c a5       	ldd	r25, Y+44	; 0x2c
    2218:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    221c:	dc 01       	movw	r26, r24
    221e:	cb 01       	movw	r24, r22
    2220:	88 a7       	std	Y+40, r24	; 0x28
    2222:	88 a5       	ldd	r24, Y+40	; 0x28
    2224:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2226:	89 8d       	ldd	r24, Y+25	; 0x19
    2228:	8a 95       	dec	r24
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_voidSendCmnd+0x1b2>
    222c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	62 e0       	ldi	r22, 0x02	; 2
    2232:	40 e0       	ldi	r20, 0x00	; 0
    2234:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	a0 e8       	ldi	r26, 0x80	; 128
    223e:	bf e3       	ldi	r27, 0x3F	; 63
    2240:	8d 8b       	std	Y+21, r24	; 0x15
    2242:	9e 8b       	std	Y+22, r25	; 0x16
    2244:	af 8b       	std	Y+23, r26	; 0x17
    2246:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2248:	6d 89       	ldd	r22, Y+21	; 0x15
    224a:	7e 89       	ldd	r23, Y+22	; 0x16
    224c:	8f 89       	ldd	r24, Y+23	; 0x17
    224e:	98 8d       	ldd	r25, Y+24	; 0x18
    2250:	2b ea       	ldi	r18, 0xAB	; 171
    2252:	3a ea       	ldi	r19, 0xAA	; 170
    2254:	4a e2       	ldi	r20, 0x2A	; 42
    2256:	50 e4       	ldi	r21, 0x40	; 64
    2258:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	89 8b       	std	Y+17, r24	; 0x11
    2262:	9a 8b       	std	Y+18, r25	; 0x12
    2264:	ab 8b       	std	Y+19, r26	; 0x13
    2266:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2268:	69 89       	ldd	r22, Y+17	; 0x11
    226a:	7a 89       	ldd	r23, Y+18	; 0x12
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	1c f4       	brge	.+6      	; 0x2286 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	88 8b       	std	Y+16, r24	; 0x10
    2284:	91 c0       	rjmp	.+290    	; 0x23a8 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    2286:	69 89       	ldd	r22, Y+17	; 0x11
    2288:	7a 89       	ldd	r23, Y+18	; 0x12
    228a:	8b 89       	ldd	r24, Y+19	; 0x13
    228c:	9c 89       	ldd	r25, Y+20	; 0x14
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4f e7       	ldi	r20, 0x7F	; 127
    2294:	53 e4       	ldi	r21, 0x43	; 67
    2296:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    229a:	18 16       	cp	r1, r24
    229c:	0c f0       	brlt	.+2      	; 0x22a0 <LCD_voidSendCmnd+0x22a>
    229e:	7b c0       	rjmp	.+246    	; 0x2396 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    22a0:	6d 89       	ldd	r22, Y+21	; 0x15
    22a2:	7e 89       	ldd	r23, Y+22	; 0x16
    22a4:	8f 89       	ldd	r24, Y+23	; 0x17
    22a6:	98 8d       	ldd	r25, Y+24	; 0x18
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a e7       	ldi	r20, 0x7A	; 122
    22ae:	54 e4       	ldi	r21, 0x44	; 68
    22b0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8c 87       	std	Y+12, r24	; 0x0c
    22ba:	9d 87       	std	Y+13, r25	; 0x0d
    22bc:	ae 87       	std	Y+14, r26	; 0x0e
    22be:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    22c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    22c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4a ef       	ldi	r20, 0xFA	; 250
    22ce:	54 e4       	ldi	r21, 0x44	; 68
    22d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22d4:	dc 01       	movw	r26, r24
    22d6:	cb 01       	movw	r24, r22
    22d8:	88 87       	std	Y+8, r24	; 0x08
    22da:	99 87       	std	Y+9, r25	; 0x09
    22dc:	aa 87       	std	Y+10, r26	; 0x0a
    22de:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    22e0:	68 85       	ldd	r22, Y+8	; 0x08
    22e2:	79 85       	ldd	r23, Y+9	; 0x09
    22e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 e8       	ldi	r20, 0x80	; 128
    22ee:	5f e3       	ldi	r21, 0x3F	; 63
    22f0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    22f4:	88 23       	and	r24, r24
    22f6:	2c f4       	brge	.+10     	; 0x2302 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    22f8:	81 e0       	ldi	r24, 0x01	; 1
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9f 83       	std	Y+7, r25	; 0x07
    22fe:	8e 83       	std	Y+6, r24	; 0x06
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2302:	68 85       	ldd	r22, Y+8	; 0x08
    2304:	79 85       	ldd	r23, Y+9	; 0x09
    2306:	8a 85       	ldd	r24, Y+10	; 0x0a
    2308:	9b 85       	ldd	r25, Y+11	; 0x0b
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	3f ef       	ldi	r19, 0xFF	; 255
    230e:	4f e7       	ldi	r20, 0x7F	; 127
    2310:	57 e4       	ldi	r21, 0x47	; 71
    2312:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2316:	18 16       	cp	r1, r24
    2318:	4c f5       	brge	.+82     	; 0x236c <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231a:	6c 85       	ldd	r22, Y+12	; 0x0c
    231c:	7d 85       	ldd	r23, Y+13	; 0x0d
    231e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2320:	9f 85       	ldd	r25, Y+15	; 0x0f
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	40 e2       	ldi	r20, 0x20	; 32
    2328:	51 e4       	ldi	r21, 0x41	; 65
    232a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	bc 01       	movw	r22, r24
    2334:	cd 01       	movw	r24, r26
    2336:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    233a:	dc 01       	movw	r26, r24
    233c:	cb 01       	movw	r24, r22
    233e:	9f 83       	std	Y+7, r25	; 0x07
    2340:	8e 83       	std	Y+6, r24	; 0x06
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_voidSendCmnd+0x2ec>
    2344:	88 ec       	ldi	r24, 0xC8	; 200
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9d 83       	std	Y+5, r25	; 0x05
    234a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	9d 81       	ldd	r25, Y+5	; 0x05
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_voidSendCmnd+0x2da>
    2354:	9d 83       	std	Y+5, r25	; 0x05
    2356:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2358:	8e 81       	ldd	r24, Y+6	; 0x06
    235a:	9f 81       	ldd	r25, Y+7	; 0x07
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	9f 83       	std	Y+7, r25	; 0x07
    2360:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2362:	8e 81       	ldd	r24, Y+6	; 0x06
    2364:	9f 81       	ldd	r25, Y+7	; 0x07
    2366:	00 97       	sbiw	r24, 0x00	; 0
    2368:	69 f7       	brne	.-38     	; 0x2344 <LCD_voidSendCmnd+0x2ce>
    236a:	24 c0       	rjmp	.+72     	; 0x23b4 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236c:	68 85       	ldd	r22, Y+8	; 0x08
    236e:	79 85       	ldd	r23, Y+9	; 0x09
    2370:	8a 85       	ldd	r24, Y+10	; 0x0a
    2372:	9b 85       	ldd	r25, Y+11	; 0x0b
    2374:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9f 83       	std	Y+7, r25	; 0x07
    237e:	8e 83       	std	Y+6, r24	; 0x06
    2380:	8e 81       	ldd	r24, Y+6	; 0x06
    2382:	9f 81       	ldd	r25, Y+7	; 0x07
    2384:	9b 83       	std	Y+3, r25	; 0x03
    2386:	8a 83       	std	Y+2, r24	; 0x02
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	9b 81       	ldd	r25, Y+3	; 0x03
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	f1 f7       	brne	.-4      	; 0x238c <LCD_voidSendCmnd+0x316>
    2390:	9b 83       	std	Y+3, r25	; 0x03
    2392:	8a 83       	std	Y+2, r24	; 0x02
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2396:	69 89       	ldd	r22, Y+17	; 0x11
    2398:	7a 89       	ldd	r23, Y+18	; 0x12
    239a:	8b 89       	ldd	r24, Y+19	; 0x13
    239c:	9c 89       	ldd	r25, Y+20	; 0x14
    239e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	88 8b       	std	Y+16, r24	; 0x10
    23a8:	88 89       	ldd	r24, Y+16	; 0x10
    23aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	8a 95       	dec	r24
    23b0:	f1 f7       	brne	.-4      	; 0x23ae <LCD_voidSendCmnd+0x338>
    23b2:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    23b4:	e1 96       	adiw	r28, 0x31	; 49
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	e1 97       	sbiw	r28, 0x31	; 49
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    23f0:	83 e0       	ldi	r24, 0x03	; 3
    23f2:	69 a9       	ldd	r22, Y+49	; 0x31
    23f4:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	62 e0       	ldi	r22, 0x02	; 2
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e8       	ldi	r26, 0x80	; 128
    2408:	bf e3       	ldi	r27, 0x3F	; 63
    240a:	8d a7       	std	Y+45, r24	; 0x2d
    240c:	9e a7       	std	Y+46, r25	; 0x2e
    240e:	af a7       	std	Y+47, r26	; 0x2f
    2410:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2412:	6d a5       	ldd	r22, Y+45	; 0x2d
    2414:	7e a5       	ldd	r23, Y+46	; 0x2e
    2416:	8f a5       	ldd	r24, Y+47	; 0x2f
    2418:	98 a9       	ldd	r25, Y+48	; 0x30
    241a:	2b ea       	ldi	r18, 0xAB	; 171
    241c:	3a ea       	ldi	r19, 0xAA	; 170
    241e:	4a e2       	ldi	r20, 0x2A	; 42
    2420:	50 e4       	ldi	r21, 0x40	; 64
    2422:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	89 a7       	std	Y+41, r24	; 0x29
    242c:	9a a7       	std	Y+42, r25	; 0x2a
    242e:	ab a7       	std	Y+43, r26	; 0x2b
    2430:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2432:	69 a5       	ldd	r22, Y+41	; 0x29
    2434:	7a a5       	ldd	r23, Y+42	; 0x2a
    2436:	8b a5       	ldd	r24, Y+43	; 0x2b
    2438:	9c a5       	ldd	r25, Y+44	; 0x2c
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	1c f4       	brge	.+6      	; 0x2450 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	88 a7       	std	Y+40, r24	; 0x28
    244e:	91 c0       	rjmp	.+290    	; 0x2572 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2450:	69 a5       	ldd	r22, Y+41	; 0x29
    2452:	7a a5       	ldd	r23, Y+42	; 0x2a
    2454:	8b a5       	ldd	r24, Y+43	; 0x2b
    2456:	9c a5       	ldd	r25, Y+44	; 0x2c
    2458:	20 e0       	ldi	r18, 0x00	; 0
    245a:	30 e0       	ldi	r19, 0x00	; 0
    245c:	4f e7       	ldi	r20, 0x7F	; 127
    245e:	53 e4       	ldi	r21, 0x43	; 67
    2460:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2464:	18 16       	cp	r1, r24
    2466:	0c f0       	brlt	.+2      	; 0x246a <LCD_voidSendChar+0xa4>
    2468:	7b c0       	rjmp	.+246    	; 0x2560 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    246a:	6d a5       	ldd	r22, Y+45	; 0x2d
    246c:	7e a5       	ldd	r23, Y+46	; 0x2e
    246e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2470:	98 a9       	ldd	r25, Y+48	; 0x30
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a e7       	ldi	r20, 0x7A	; 122
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8c a3       	std	Y+36, r24	; 0x24
    2484:	9d a3       	std	Y+37, r25	; 0x25
    2486:	ae a3       	std	Y+38, r26	; 0x26
    2488:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248a:	6c a1       	ldd	r22, Y+36	; 0x24
    248c:	7d a1       	ldd	r23, Y+37	; 0x25
    248e:	8e a1       	ldd	r24, Y+38	; 0x26
    2490:	9f a1       	ldd	r25, Y+39	; 0x27
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	4a ef       	ldi	r20, 0xFA	; 250
    2498:	54 e4       	ldi	r21, 0x44	; 68
    249a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    249e:	dc 01       	movw	r26, r24
    24a0:	cb 01       	movw	r24, r22
    24a2:	88 a3       	std	Y+32, r24	; 0x20
    24a4:	99 a3       	std	Y+33, r25	; 0x21
    24a6:	aa a3       	std	Y+34, r26	; 0x22
    24a8:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    24aa:	68 a1       	ldd	r22, Y+32	; 0x20
    24ac:	79 a1       	ldd	r23, Y+33	; 0x21
    24ae:	8a a1       	ldd	r24, Y+34	; 0x22
    24b0:	9b a1       	ldd	r25, Y+35	; 0x23
    24b2:	20 e0       	ldi	r18, 0x00	; 0
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	40 e8       	ldi	r20, 0x80	; 128
    24b8:	5f e3       	ldi	r21, 0x3F	; 63
    24ba:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    24be:	88 23       	and	r24, r24
    24c0:	2c f4       	brge	.+10     	; 0x24cc <LCD_voidSendChar+0x106>
		__ticks = 1;
    24c2:	81 e0       	ldi	r24, 0x01	; 1
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9f 8f       	std	Y+31, r25	; 0x1f
    24c8:	8e 8f       	std	Y+30, r24	; 0x1e
    24ca:	3f c0       	rjmp	.+126    	; 0x254a <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    24cc:	68 a1       	ldd	r22, Y+32	; 0x20
    24ce:	79 a1       	ldd	r23, Y+33	; 0x21
    24d0:	8a a1       	ldd	r24, Y+34	; 0x22
    24d2:	9b a1       	ldd	r25, Y+35	; 0x23
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	3f ef       	ldi	r19, 0xFF	; 255
    24d8:	4f e7       	ldi	r20, 0x7F	; 127
    24da:	57 e4       	ldi	r21, 0x47	; 71
    24dc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	4c f5       	brge	.+82     	; 0x2536 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e4:	6c a1       	ldd	r22, Y+36	; 0x24
    24e6:	7d a1       	ldd	r23, Y+37	; 0x25
    24e8:	8e a1       	ldd	r24, Y+38	; 0x26
    24ea:	9f a1       	ldd	r25, Y+39	; 0x27
    24ec:	20 e0       	ldi	r18, 0x00	; 0
    24ee:	30 e0       	ldi	r19, 0x00	; 0
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	51 e4       	ldi	r21, 0x41	; 65
    24f4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24f8:	dc 01       	movw	r26, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	bc 01       	movw	r22, r24
    24fe:	cd 01       	movw	r24, r26
    2500:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2504:	dc 01       	movw	r26, r24
    2506:	cb 01       	movw	r24, r22
    2508:	9f 8f       	std	Y+31, r25	; 0x1f
    250a:	8e 8f       	std	Y+30, r24	; 0x1e
    250c:	0f c0       	rjmp	.+30     	; 0x252c <LCD_voidSendChar+0x166>
    250e:	88 ec       	ldi	r24, 0xC8	; 200
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	9d 8f       	std	Y+29, r25	; 0x1d
    2514:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2516:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2518:	9d 8d       	ldd	r25, Y+29	; 0x1d
    251a:	01 97       	sbiw	r24, 0x01	; 1
    251c:	f1 f7       	brne	.-4      	; 0x251a <LCD_voidSendChar+0x154>
    251e:	9d 8f       	std	Y+29, r25	; 0x1d
    2520:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2522:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2524:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	9f 8f       	std	Y+31, r25	; 0x1f
    252a:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    252e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2530:	00 97       	sbiw	r24, 0x00	; 0
    2532:	69 f7       	brne	.-38     	; 0x250e <LCD_voidSendChar+0x148>
    2534:	24 c0       	rjmp	.+72     	; 0x257e <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2536:	68 a1       	ldd	r22, Y+32	; 0x20
    2538:	79 a1       	ldd	r23, Y+33	; 0x21
    253a:	8a a1       	ldd	r24, Y+34	; 0x22
    253c:	9b a1       	ldd	r25, Y+35	; 0x23
    253e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9f 8f       	std	Y+31, r25	; 0x1f
    2548:	8e 8f       	std	Y+30, r24	; 0x1e
    254a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    254c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    254e:	9b 8f       	std	Y+27, r25	; 0x1b
    2550:	8a 8f       	std	Y+26, r24	; 0x1a
    2552:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2554:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2556:	01 97       	sbiw	r24, 0x01	; 1
    2558:	f1 f7       	brne	.-4      	; 0x2556 <LCD_voidSendChar+0x190>
    255a:	9b 8f       	std	Y+27, r25	; 0x1b
    255c:	8a 8f       	std	Y+26, r24	; 0x1a
    255e:	0f c0       	rjmp	.+30     	; 0x257e <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2560:	69 a5       	ldd	r22, Y+41	; 0x29
    2562:	7a a5       	ldd	r23, Y+42	; 0x2a
    2564:	8b a5       	ldd	r24, Y+43	; 0x2b
    2566:	9c a5       	ldd	r25, Y+44	; 0x2c
    2568:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	88 a7       	std	Y+40, r24	; 0x28
    2572:	88 a5       	ldd	r24, Y+40	; 0x28
    2574:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2576:	89 8d       	ldd	r24, Y+25	; 0x19
    2578:	8a 95       	dec	r24
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_voidSendChar+0x1b2>
    257c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	62 e0       	ldi	r22, 0x02	; 2
    2582:	40 e0       	ldi	r20, 0x00	; 0
    2584:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	a0 e8       	ldi	r26, 0x80	; 128
    258e:	bf e3       	ldi	r27, 0x3F	; 63
    2590:	8d 8b       	std	Y+21, r24	; 0x15
    2592:	9e 8b       	std	Y+22, r25	; 0x16
    2594:	af 8b       	std	Y+23, r26	; 0x17
    2596:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2598:	6d 89       	ldd	r22, Y+21	; 0x15
    259a:	7e 89       	ldd	r23, Y+22	; 0x16
    259c:	8f 89       	ldd	r24, Y+23	; 0x17
    259e:	98 8d       	ldd	r25, Y+24	; 0x18
    25a0:	2b ea       	ldi	r18, 0xAB	; 171
    25a2:	3a ea       	ldi	r19, 0xAA	; 170
    25a4:	4a e2       	ldi	r20, 0x2A	; 42
    25a6:	50 e4       	ldi	r21, 0x40	; 64
    25a8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25ac:	dc 01       	movw	r26, r24
    25ae:	cb 01       	movw	r24, r22
    25b0:	89 8b       	std	Y+17, r24	; 0x11
    25b2:	9a 8b       	std	Y+18, r25	; 0x12
    25b4:	ab 8b       	std	Y+19, r26	; 0x13
    25b6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    25b8:	69 89       	ldd	r22, Y+17	; 0x11
    25ba:	7a 89       	ldd	r23, Y+18	; 0x12
    25bc:	8b 89       	ldd	r24, Y+19	; 0x13
    25be:	9c 89       	ldd	r25, Y+20	; 0x14
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	40 e8       	ldi	r20, 0x80	; 128
    25c6:	5f e3       	ldi	r21, 0x3F	; 63
    25c8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    25cc:	88 23       	and	r24, r24
    25ce:	1c f4       	brge	.+6      	; 0x25d6 <LCD_voidSendChar+0x210>
		__ticks = 1;
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	88 8b       	std	Y+16, r24	; 0x10
    25d4:	91 c0       	rjmp	.+290    	; 0x26f8 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    25d6:	69 89       	ldd	r22, Y+17	; 0x11
    25d8:	7a 89       	ldd	r23, Y+18	; 0x12
    25da:	8b 89       	ldd	r24, Y+19	; 0x13
    25dc:	9c 89       	ldd	r25, Y+20	; 0x14
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	53 e4       	ldi	r21, 0x43	; 67
    25e6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	0c f0       	brlt	.+2      	; 0x25f0 <LCD_voidSendChar+0x22a>
    25ee:	7b c0       	rjmp	.+246    	; 0x26e6 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    25f0:	6d 89       	ldd	r22, Y+21	; 0x15
    25f2:	7e 89       	ldd	r23, Y+22	; 0x16
    25f4:	8f 89       	ldd	r24, Y+23	; 0x17
    25f6:	98 8d       	ldd	r25, Y+24	; 0x18
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	4a e7       	ldi	r20, 0x7A	; 122
    25fe:	54 e4       	ldi	r21, 0x44	; 68
    2600:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	8c 87       	std	Y+12, r24	; 0x0c
    260a:	9d 87       	std	Y+13, r25	; 0x0d
    260c:	ae 87       	std	Y+14, r26	; 0x0e
    260e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	6c 85       	ldd	r22, Y+12	; 0x0c
    2612:	7d 85       	ldd	r23, Y+13	; 0x0d
    2614:	8e 85       	ldd	r24, Y+14	; 0x0e
    2616:	9f 85       	ldd	r25, Y+15	; 0x0f
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a ef       	ldi	r20, 0xFA	; 250
    261e:	54 e4       	ldi	r21, 0x44	; 68
    2620:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	88 87       	std	Y+8, r24	; 0x08
    262a:	99 87       	std	Y+9, r25	; 0x09
    262c:	aa 87       	std	Y+10, r26	; 0x0a
    262e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2630:	68 85       	ldd	r22, Y+8	; 0x08
    2632:	79 85       	ldd	r23, Y+9	; 0x09
    2634:	8a 85       	ldd	r24, Y+10	; 0x0a
    2636:	9b 85       	ldd	r25, Y+11	; 0x0b
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9f 83       	std	Y+7, r25	; 0x07
    264e:	8e 83       	std	Y+6, r24	; 0x06
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2652:	68 85       	ldd	r22, Y+8	; 0x08
    2654:	79 85       	ldd	r23, Y+9	; 0x09
    2656:	8a 85       	ldd	r24, Y+10	; 0x0a
    2658:	9b 85       	ldd	r25, Y+11	; 0x0b
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	6c 85       	ldd	r22, Y+12	; 0x0c
    266c:	7d 85       	ldd	r23, Y+13	; 0x0d
    266e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2670:	9f 85       	ldd	r25, Y+15	; 0x0f
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9f 83       	std	Y+7, r25	; 0x07
    2690:	8e 83       	std	Y+6, r24	; 0x06
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_voidSendChar+0x2ec>
    2694:	88 ec       	ldi	r24, 0xC8	; 200
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9d 83       	std	Y+5, r25	; 0x05
    269a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    269c:	8c 81       	ldd	r24, Y+4	; 0x04
    269e:	9d 81       	ldd	r25, Y+5	; 0x05
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_voidSendChar+0x2da>
    26a4:	9d 83       	std	Y+5, r25	; 0x05
    26a6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8e 81       	ldd	r24, Y+6	; 0x06
    26aa:	9f 81       	ldd	r25, Y+7	; 0x07
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9f 83       	std	Y+7, r25	; 0x07
    26b0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8e 81       	ldd	r24, Y+6	; 0x06
    26b4:	9f 81       	ldd	r25, Y+7	; 0x07
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_voidSendChar+0x2ce>
    26ba:	24 c0       	rjmp	.+72     	; 0x2704 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	68 85       	ldd	r22, Y+8	; 0x08
    26be:	79 85       	ldd	r23, Y+9	; 0x09
    26c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    26c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    26c4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9f 83       	std	Y+7, r25	; 0x07
    26ce:	8e 83       	std	Y+6, r24	; 0x06
    26d0:	8e 81       	ldd	r24, Y+6	; 0x06
    26d2:	9f 81       	ldd	r25, Y+7	; 0x07
    26d4:	9b 83       	std	Y+3, r25	; 0x03
    26d6:	8a 83       	std	Y+2, r24	; 0x02
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	9b 81       	ldd	r25, Y+3	; 0x03
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_voidSendChar+0x316>
    26e0:	9b 83       	std	Y+3, r25	; 0x03
    26e2:	8a 83       	std	Y+2, r24	; 0x02
    26e4:	0f c0       	rjmp	.+30     	; 0x2704 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26e6:	69 89       	ldd	r22, Y+17	; 0x11
    26e8:	7a 89       	ldd	r23, Y+18	; 0x12
    26ea:	8b 89       	ldd	r24, Y+19	; 0x13
    26ec:	9c 89       	ldd	r25, Y+20	; 0x14
    26ee:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	88 8b       	std	Y+16, r24	; 0x10
    26f8:	88 89       	ldd	r24, Y+16	; 0x10
    26fa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
    26fe:	8a 95       	dec	r24
    2700:	f1 f7       	brne	.-4      	; 0x26fe <LCD_voidSendChar+0x338>
    2702:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    2704:	e1 96       	adiw	r28, 0x31	; 49
    2706:	0f b6       	in	r0, 0x3f	; 63
    2708:	f8 94       	cli
    270a:	de bf       	out	0x3e, r29	; 62
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	cd bf       	out	0x3d, r28	; 61
    2710:	cf 91       	pop	r28
    2712:	df 91       	pop	r29
    2714:	08 95       	ret

00002716 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	00 d0       	rcall	.+0      	; 0x271c <LCD_voidWriteString+0x6>
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	9a 83       	std	Y+2, r25	; 0x02
    2722:	89 83       	std	Y+1, r24	; 0x01
    2724:	0a c0       	rjmp	.+20     	; 0x273a <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    2726:	e9 81       	ldd	r30, Y+1	; 0x01
    2728:	fa 81       	ldd	r31, Y+2	; 0x02
    272a:	80 81       	ld	r24, Z
    272c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	9a 81       	ldd	r25, Y+2	; 0x02
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	9a 83       	std	Y+2, r25	; 0x02
    2738:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    273a:	e9 81       	ldd	r30, Y+1	; 0x01
    273c:	fa 81       	ldd	r31, Y+2	; 0x02
    273e:	80 81       	ld	r24, Z
    2740:	88 23       	and	r24, r24
    2742:	89 f7       	brne	.-30     	; 0x2726 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	08 95       	ret

0000274e <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    274e:	0f 93       	push	r16
    2750:	1f 93       	push	r17
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	cd b7       	in	r28, 0x3d	; 61
    2758:	de b7       	in	r29, 0x3e	; 62
    275a:	65 97       	sbiw	r28, 0x15	; 21
    275c:	0f b6       	in	r0, 0x3f	; 63
    275e:	f8 94       	cli
    2760:	de bf       	out	0x3e, r29	; 62
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	cd bf       	out	0x3d, r28	; 61
    2766:	6a 8b       	std	Y+18, r22	; 0x12
    2768:	7b 8b       	std	Y+19, r23	; 0x13
    276a:	8c 8b       	std	Y+20, r24	; 0x14
    276c:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    276e:	8f ef       	ldi	r24, 0xFF	; 255
    2770:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    2772:	8a 89       	ldd	r24, Y+18	; 0x12
    2774:	9b 89       	ldd	r25, Y+19	; 0x13
    2776:	ac 89       	ldd	r26, Y+20	; 0x14
    2778:	bd 89       	ldd	r27, Y+21	; 0x15
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	a1 05       	cpc	r26, r1
    277e:	b1 05       	cpc	r27, r1
    2780:	99 f5       	brne	.+102    	; 0x27e8 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    2782:	80 e3       	ldi	r24, 0x30	; 48
    2784:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2788:	4e c0       	rjmp	.+156    	; 0x2826 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	8f 5f       	subi	r24, 0xFF	; 255
    278e:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	08 2f       	mov	r16, r24
    2794:	11 27       	eor	r17, r17
    2796:	07 fd       	sbrc	r16, 7
    2798:	10 95       	com	r17
    279a:	8a 89       	ldd	r24, Y+18	; 0x12
    279c:	9b 89       	ldd	r25, Y+19	; 0x13
    279e:	ac 89       	ldd	r26, Y+20	; 0x14
    27a0:	bd 89       	ldd	r27, Y+21	; 0x15
    27a2:	2a e0       	ldi	r18, 0x0A	; 10
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e0       	ldi	r20, 0x00	; 0
    27a8:	50 e0       	ldi	r21, 0x00	; 0
    27aa:	bc 01       	movw	r22, r24
    27ac:	cd 01       	movw	r24, r26
    27ae:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	28 2f       	mov	r18, r24
    27b8:	ce 01       	movw	r24, r28
    27ba:	03 96       	adiw	r24, 0x03	; 3
    27bc:	fc 01       	movw	r30, r24
    27be:	e0 0f       	add	r30, r16
    27c0:	f1 1f       	adc	r31, r17
    27c2:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    27c4:	8a 89       	ldd	r24, Y+18	; 0x12
    27c6:	9b 89       	ldd	r25, Y+19	; 0x13
    27c8:	ac 89       	ldd	r26, Y+20	; 0x14
    27ca:	bd 89       	ldd	r27, Y+21	; 0x15
    27cc:	2a e0       	ldi	r18, 0x0A	; 10
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 de 19 	call	0x33bc	; 0x33bc <__udivmodsi4>
    27dc:	da 01       	movw	r26, r20
    27de:	c9 01       	movw	r24, r18
    27e0:	8a 8b       	std	Y+18, r24	; 0x12
    27e2:	9b 8b       	std	Y+19, r25	; 0x13
    27e4:	ac 8b       	std	Y+20, r26	; 0x14
    27e6:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    27e8:	8a 89       	ldd	r24, Y+18	; 0x12
    27ea:	9b 89       	ldd	r25, Y+19	; 0x13
    27ec:	ac 89       	ldd	r26, Y+20	; 0x14
    27ee:	bd 89       	ldd	r27, Y+21	; 0x15
    27f0:	00 97       	sbiw	r24, 0x00	; 0
    27f2:	a1 05       	cpc	r26, r1
    27f4:	b1 05       	cpc	r27, r1
    27f6:	49 f6       	brne	.-110    	; 0x278a <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	11 c0       	rjmp	.+34     	; 0x2820 <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	28 2f       	mov	r18, r24
    2802:	33 27       	eor	r19, r19
    2804:	27 fd       	sbrc	r18, 7
    2806:	30 95       	com	r19
    2808:	ce 01       	movw	r24, r28
    280a:	03 96       	adiw	r24, 0x03	; 3
    280c:	fc 01       	movw	r30, r24
    280e:	e2 0f       	add	r30, r18
    2810:	f3 1f       	adc	r31, r19
    2812:	80 81       	ld	r24, Z
    2814:	80 5d       	subi	r24, 0xD0	; 208
    2816:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	81 50       	subi	r24, 0x01	; 1
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	88 23       	and	r24, r24
    2824:	64 f7       	brge	.-40     	; 0x27fe <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    2826:	65 96       	adiw	r28, 0x15	; 21
    2828:	0f b6       	in	r0, 0x3f	; 63
    282a:	f8 94       	cli
    282c:	de bf       	out	0x3e, r29	; 62
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	cd bf       	out	0x3d, r28	; 61
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	1f 91       	pop	r17
    2838:	0f 91       	pop	r16
    283a:	08 95       	ret

0000283c <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	00 d0       	rcall	.+0      	; 0x2842 <LCD_u8GoToXY+0x6>
    2842:	00 d0       	rcall	.+0      	; 0x2844 <LCD_u8GoToXY+0x8>
    2844:	0f 92       	push	r0
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	8a 83       	std	Y+2, r24	; 0x02
    284c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    2852:	8b 81       	ldd	r24, Y+3	; 0x03
    2854:	88 32       	cpi	r24, 0x28	; 40
    2856:	d8 f4       	brcc	.+54     	; 0x288e <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2858:	8a 81       	ldd	r24, Y+2	; 0x02
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	3d 83       	std	Y+5, r19	; 0x05
    2860:	2c 83       	std	Y+4, r18	; 0x04
    2862:	8c 81       	ldd	r24, Y+4	; 0x04
    2864:	9d 81       	ldd	r25, Y+5	; 0x05
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	91 05       	cpc	r25, r1
    286a:	31 f0       	breq	.+12     	; 0x2878 <LCD_u8GoToXY+0x3c>
    286c:	2c 81       	ldd	r18, Y+4	; 0x04
    286e:	3d 81       	ldd	r19, Y+5	; 0x05
    2870:	22 30       	cpi	r18, 0x02	; 2
    2872:	31 05       	cpc	r19, r1
    2874:	31 f0       	breq	.+12     	; 0x2882 <LCD_u8GoToXY+0x46>
    2876:	0a c0       	rjmp	.+20     	; 0x288c <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	80 58       	subi	r24, 0x80	; 128
    287c:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
    2880:	06 c0       	rjmp	.+12     	; 0x288e <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    2882:	8b 81       	ldd	r24, Y+3	; 0x03
    2884:	80 54       	subi	r24, 0x40	; 64
    2886:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
    288a:	01 c0       	rjmp	.+2      	; 0x288e <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    288c:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    288e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2890:	0f 90       	pop	r0
    2892:	0f 90       	pop	r0
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	cf 91       	pop	r28
    289c:	df 91       	pop	r29
    289e:	08 95       	ret

000028a0 <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    28a0:	df 93       	push	r29
    28a2:	cf 93       	push	r28
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	2e 97       	sbiw	r28, 0x0e	; 14
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    28b4:	81 e0       	ldi	r24, 0x01	; 1
    28b6:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
    28ba:	80 e0       	ldi	r24, 0x00	; 0
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	a0 ea       	ldi	r26, 0xA0	; 160
    28c0:	b1 e4       	ldi	r27, 0x41	; 65
    28c2:	8b 87       	std	Y+11, r24	; 0x0b
    28c4:	9c 87       	std	Y+12, r25	; 0x0c
    28c6:	ad 87       	std	Y+13, r26	; 0x0d
    28c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    28cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    28d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	4a ef       	ldi	r20, 0xFA	; 250
    28d8:	54 e4       	ldi	r21, 0x44	; 68
    28da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8f 83       	std	Y+7, r24	; 0x07
    28e4:	98 87       	std	Y+8, r25	; 0x08
    28e6:	a9 87       	std	Y+9, r26	; 0x09
    28e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ea:	6f 81       	ldd	r22, Y+7	; 0x07
    28ec:	78 85       	ldd	r23, Y+8	; 0x08
    28ee:	89 85       	ldd	r24, Y+9	; 0x09
    28f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f2:	20 e0       	ldi	r18, 0x00	; 0
    28f4:	30 e0       	ldi	r19, 0x00	; 0
    28f6:	40 e8       	ldi	r20, 0x80	; 128
    28f8:	5f e3       	ldi	r21, 0x3F	; 63
    28fa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    28fe:	88 23       	and	r24, r24
    2900:	2c f4       	brge	.+10     	; 0x290c <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2902:	81 e0       	ldi	r24, 0x01	; 1
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	3f c0       	rjmp	.+126    	; 0x298a <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    290c:	6f 81       	ldd	r22, Y+7	; 0x07
    290e:	78 85       	ldd	r23, Y+8	; 0x08
    2910:	89 85       	ldd	r24, Y+9	; 0x09
    2912:	9a 85       	ldd	r25, Y+10	; 0x0a
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	3f ef       	ldi	r19, 0xFF	; 255
    2918:	4f e7       	ldi	r20, 0x7F	; 127
    291a:	57 e4       	ldi	r21, 0x47	; 71
    291c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2920:	18 16       	cp	r1, r24
    2922:	4c f5       	brge	.+82     	; 0x2976 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2924:	6b 85       	ldd	r22, Y+11	; 0x0b
    2926:	7c 85       	ldd	r23, Y+12	; 0x0c
    2928:	8d 85       	ldd	r24, Y+13	; 0x0d
    292a:	9e 85       	ldd	r25, Y+14	; 0x0e
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e2       	ldi	r20, 0x20	; 32
    2932:	51 e4       	ldi	r21, 0x41	; 65
    2934:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	0f c0       	rjmp	.+30     	; 0x296c <LCD_voidClearScreen+0xcc>
    294e:	88 ec       	ldi	r24, 0xC8	; 200
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	9c 83       	std	Y+4, r25	; 0x04
    2954:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	9c 81       	ldd	r25, Y+4	; 0x04
    295a:	01 97       	sbiw	r24, 0x01	; 1
    295c:	f1 f7       	brne	.-4      	; 0x295a <LCD_voidClearScreen+0xba>
    295e:	9c 83       	std	Y+4, r25	; 0x04
    2960:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2962:	8d 81       	ldd	r24, Y+5	; 0x05
    2964:	9e 81       	ldd	r25, Y+6	; 0x06
    2966:	01 97       	sbiw	r24, 0x01	; 1
    2968:	9e 83       	std	Y+6, r25	; 0x06
    296a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    296c:	8d 81       	ldd	r24, Y+5	; 0x05
    296e:	9e 81       	ldd	r25, Y+6	; 0x06
    2970:	00 97       	sbiw	r24, 0x00	; 0
    2972:	69 f7       	brne	.-38     	; 0x294e <LCD_voidClearScreen+0xae>
    2974:	14 c0       	rjmp	.+40     	; 0x299e <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2976:	6f 81       	ldd	r22, Y+7	; 0x07
    2978:	78 85       	ldd	r23, Y+8	; 0x08
    297a:	89 85       	ldd	r24, Y+9	; 0x09
    297c:	9a 85       	ldd	r25, Y+10	; 0x0a
    297e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9e 83       	std	Y+6, r25	; 0x06
    2988:	8d 83       	std	Y+5, r24	; 0x05
    298a:	8d 81       	ldd	r24, Y+5	; 0x05
    298c:	9e 81       	ldd	r25, Y+6	; 0x06
    298e:	9a 83       	std	Y+2, r25	; 0x02
    2990:	89 83       	std	Y+1, r24	; 0x01
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	9a 81       	ldd	r25, Y+2	; 0x02
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <LCD_voidClearScreen+0xf6>
    299a:	9a 83       	std	Y+2, r25	; 0x02
    299c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    299e:	2e 96       	adiw	r28, 0x0e	; 14
    29a0:	0f b6       	in	r0, 0x3f	; 63
    29a2:	f8 94       	cli
    29a4:	de bf       	out	0x3e, r29	; 62
    29a6:	0f be       	out	0x3f, r0	; 63
    29a8:	cd bf       	out	0x3d, r28	; 61
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	2a 97       	sbiw	r28, 0x0a	; 10
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	8c 83       	std	Y+4, r24	; 0x04
    29c6:	7e 83       	std	Y+6, r23	; 0x06
    29c8:	6d 83       	std	Y+5, r22	; 0x05
    29ca:	4f 83       	std	Y+7, r20	; 0x07
    29cc:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    29ce:	81 e0       	ldi	r24, 0x01	; 1
    29d0:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    29d2:	88 e0       	ldi	r24, 0x08	; 8
    29d4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    29d6:	8c 81       	ldd	r24, Y+4	; 0x04
    29d8:	28 2f       	mov	r18, r24
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	3a 87       	std	Y+10, r19	; 0x0a
    29de:	29 87       	std	Y+9, r18	; 0x09
    29e0:	89 85       	ldd	r24, Y+9	; 0x09
    29e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e4:	83 30       	cpi	r24, 0x03	; 3
    29e6:	91 05       	cpc	r25, r1
    29e8:	09 f4       	brne	.+2      	; 0x29ec <LCD_voidWriteSpecialChar+0x3c>
    29ea:	8c c0       	rjmp	.+280    	; 0x2b04 <LCD_voidWriteSpecialChar+0x154>
    29ec:	29 85       	ldd	r18, Y+9	; 0x09
    29ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    29f0:	24 30       	cpi	r18, 0x04	; 4
    29f2:	31 05       	cpc	r19, r1
    29f4:	8c f4       	brge	.+34     	; 0x2a18 <LCD_voidWriteSpecialChar+0x68>
    29f6:	89 85       	ldd	r24, Y+9	; 0x09
    29f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fa:	81 30       	cpi	r24, 0x01	; 1
    29fc:	91 05       	cpc	r25, r1
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <LCD_voidWriteSpecialChar+0x52>
    2a00:	43 c0       	rjmp	.+134    	; 0x2a88 <LCD_voidWriteSpecialChar+0xd8>
    2a02:	29 85       	ldd	r18, Y+9	; 0x09
    2a04:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a06:	22 30       	cpi	r18, 0x02	; 2
    2a08:	31 05       	cpc	r19, r1
    2a0a:	0c f0       	brlt	.+2      	; 0x2a0e <LCD_voidWriteSpecialChar+0x5e>
    2a0c:	5c c0       	rjmp	.+184    	; 0x2ac6 <LCD_voidWriteSpecialChar+0x116>
    2a0e:	89 85       	ldd	r24, Y+9	; 0x09
    2a10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a12:	00 97       	sbiw	r24, 0x00	; 0
    2a14:	d1 f0       	breq	.+52     	; 0x2a4a <LCD_voidWriteSpecialChar+0x9a>
    2a16:	11 c1       	rjmp	.+546    	; 0x2c3a <LCD_voidWriteSpecialChar+0x28a>
    2a18:	29 85       	ldd	r18, Y+9	; 0x09
    2a1a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a1c:	25 30       	cpi	r18, 0x05	; 5
    2a1e:	31 05       	cpc	r19, r1
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <LCD_voidWriteSpecialChar+0x74>
    2a22:	ae c0       	rjmp	.+348    	; 0x2b80 <LCD_voidWriteSpecialChar+0x1d0>
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	85 30       	cpi	r24, 0x05	; 5
    2a2a:	91 05       	cpc	r25, r1
    2a2c:	0c f4       	brge	.+2      	; 0x2a30 <LCD_voidWriteSpecialChar+0x80>
    2a2e:	89 c0       	rjmp	.+274    	; 0x2b42 <LCD_voidWriteSpecialChar+0x192>
    2a30:	29 85       	ldd	r18, Y+9	; 0x09
    2a32:	3a 85       	ldd	r19, Y+10	; 0x0a
    2a34:	26 30       	cpi	r18, 0x06	; 6
    2a36:	31 05       	cpc	r19, r1
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <LCD_voidWriteSpecialChar+0x8c>
    2a3a:	c1 c0       	rjmp	.+386    	; 0x2bbe <LCD_voidWriteSpecialChar+0x20e>
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a40:	87 30       	cpi	r24, 0x07	; 7
    2a42:	91 05       	cpc	r25, r1
    2a44:	09 f4       	brne	.+2      	; 0x2a48 <LCD_voidWriteSpecialChar+0x98>
    2a46:	da c0       	rjmp	.+436    	; 0x2bfc <LCD_voidWriteSpecialChar+0x24c>
    2a48:	f8 c0       	rjmp	.+496    	; 0x2c3a <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2a4a:	80 e4       	ldi	r24, 0x40	; 64
    2a4c:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2a50:	19 82       	std	Y+1, r1	; 0x01
    2a52:	0e c0       	rjmp	.+28     	; 0x2a70 <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	28 2f       	mov	r18, r24
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5e:	fc 01       	movw	r30, r24
    2a60:	e2 0f       	add	r30, r18
    2a62:	f3 1f       	adc	r31, r19
    2a64:	80 81       	ld	r24, Z
    2a66:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    2a6a:	89 81       	ldd	r24, Y+1	; 0x01
    2a6c:	8f 5f       	subi	r24, 0xFF	; 255
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    2a70:	99 81       	ldd	r25, Y+1	; 0x01
    2a72:	8a 81       	ldd	r24, Y+2	; 0x02
    2a74:	98 17       	cp	r25, r24
    2a76:	70 f3       	brcs	.-36     	; 0x2a54 <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2a78:	8f 81       	ldd	r24, Y+7	; 0x07
    2a7a:	68 85       	ldd	r22, Y+8	; 0x08
    2a7c:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2a80:	8c 81       	ldd	r24, Y+4	; 0x04
    2a82:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2a86:	da c0       	rjmp	.+436    	; 0x2c3c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2a88:	88 e4       	ldi	r24, 0x48	; 72
    2a8a:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2a8e:	19 82       	std	Y+1, r1	; 0x01
    2a90:	0e c0       	rjmp	.+28     	; 0x2aae <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2a92:	89 81       	ldd	r24, Y+1	; 0x01
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	8d 81       	ldd	r24, Y+5	; 0x05
    2a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a9c:	fc 01       	movw	r30, r24
    2a9e:	e2 0f       	add	r30, r18
    2aa0:	f3 1f       	adc	r31, r19
    2aa2:	80 81       	ld	r24, Z
    2aa4:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	8f 5f       	subi	r24, 0xFF	; 255
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	99 81       	ldd	r25, Y+1	; 0x01
    2ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab2:	98 17       	cp	r25, r24
    2ab4:	70 f3       	brcs	.-36     	; 0x2a92 <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ab8:	68 85       	ldd	r22, Y+8	; 0x08
    2aba:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2abe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2ac4:	bb c0       	rjmp	.+374    	; 0x2c3c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    2ac6:	80 e5       	ldi	r24, 0x50	; 80
    2ac8:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2acc:	19 82       	std	Y+1, r1	; 0x01
    2ace:	0e c0       	rjmp	.+28     	; 0x2aec <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ada:	fc 01       	movw	r30, r24
    2adc:	e2 0f       	add	r30, r18
    2ade:	f3 1f       	adc	r31, r19
    2ae0:	80 81       	ld	r24, Z
    2ae2:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	8f 5f       	subi	r24, 0xFF	; 255
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	99 81       	ldd	r25, Y+1	; 0x01
    2aee:	8a 81       	ldd	r24, Y+2	; 0x02
    2af0:	98 17       	cp	r25, r24
    2af2:	70 f3       	brcs	.-36     	; 0x2ad0 <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2af4:	8f 81       	ldd	r24, Y+7	; 0x07
    2af6:	68 85       	ldd	r22, Y+8	; 0x08
    2af8:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2afc:	8c 81       	ldd	r24, Y+4	; 0x04
    2afe:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2b02:	9c c0       	rjmp	.+312    	; 0x2c3c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    2b04:	88 e5       	ldi	r24, 0x58	; 88
    2b06:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2b0a:	19 82       	std	Y+1, r1	; 0x01
    2b0c:	0e c0       	rjmp	.+28     	; 0x2b2a <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	28 2f       	mov	r18, r24
    2b12:	30 e0       	ldi	r19, 0x00	; 0
    2b14:	8d 81       	ldd	r24, Y+5	; 0x05
    2b16:	9e 81       	ldd	r25, Y+6	; 0x06
    2b18:	fc 01       	movw	r30, r24
    2b1a:	e2 0f       	add	r30, r18
    2b1c:	f3 1f       	adc	r31, r19
    2b1e:	80 81       	ld	r24, Z
    2b20:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    2b24:	89 81       	ldd	r24, Y+1	; 0x01
    2b26:	8f 5f       	subi	r24, 0xFF	; 255
    2b28:	89 83       	std	Y+1, r24	; 0x01
    2b2a:	99 81       	ldd	r25, Y+1	; 0x01
    2b2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2e:	98 17       	cp	r25, r24
    2b30:	70 f3       	brcs	.-36     	; 0x2b0e <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2b32:	8f 81       	ldd	r24, Y+7	; 0x07
    2b34:	68 85       	ldd	r22, Y+8	; 0x08
    2b36:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2b40:	7d c0       	rjmp	.+250    	; 0x2c3c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    2b42:	80 e6       	ldi	r24, 0x60	; 96
    2b44:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2b48:	19 82       	std	Y+1, r1	; 0x01
    2b4a:	0e c0       	rjmp	.+28     	; 0x2b68 <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	8d 81       	ldd	r24, Y+5	; 0x05
    2b54:	9e 81       	ldd	r25, Y+6	; 0x06
    2b56:	fc 01       	movw	r30, r24
    2b58:	e2 0f       	add	r30, r18
    2b5a:	f3 1f       	adc	r31, r19
    2b5c:	80 81       	ld	r24, Z
    2b5e:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    2b62:	89 81       	ldd	r24, Y+1	; 0x01
    2b64:	8f 5f       	subi	r24, 0xFF	; 255
    2b66:	89 83       	std	Y+1, r24	; 0x01
    2b68:	99 81       	ldd	r25, Y+1	; 0x01
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	98 17       	cp	r25, r24
    2b6e:	70 f3       	brcs	.-36     	; 0x2b4c <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2b70:	8f 81       	ldd	r24, Y+7	; 0x07
    2b72:	68 85       	ldd	r22, Y+8	; 0x08
    2b74:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2b78:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7a:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2b7e:	5e c0       	rjmp	.+188    	; 0x2c3c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    2b80:	88 e6       	ldi	r24, 0x68	; 104
    2b82:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2b86:	19 82       	std	Y+1, r1	; 0x01
    2b88:	0e c0       	rjmp	.+28     	; 0x2ba6 <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	28 2f       	mov	r18, r24
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	8d 81       	ldd	r24, Y+5	; 0x05
    2b92:	9e 81       	ldd	r25, Y+6	; 0x06
    2b94:	fc 01       	movw	r30, r24
    2b96:	e2 0f       	add	r30, r18
    2b98:	f3 1f       	adc	r31, r19
    2b9a:	80 81       	ld	r24, Z
    2b9c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	8f 5f       	subi	r24, 0xFF	; 255
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	99 81       	ldd	r25, Y+1	; 0x01
    2ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    2baa:	98 17       	cp	r25, r24
    2bac:	70 f3       	brcs	.-36     	; 0x2b8a <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2bae:	8f 81       	ldd	r24, Y+7	; 0x07
    2bb0:	68 85       	ldd	r22, Y+8	; 0x08
    2bb2:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2bb6:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb8:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2bbc:	3f c0       	rjmp	.+126    	; 0x2c3c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    2bbe:	80 e7       	ldi	r24, 0x70	; 112
    2bc0:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2bc4:	19 82       	std	Y+1, r1	; 0x01
    2bc6:	0e c0       	rjmp	.+28     	; 0x2be4 <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e2 0f       	add	r30, r18
    2bd6:	f3 1f       	adc	r31, r19
    2bd8:	80 81       	ld	r24, Z
    2bda:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	8f 5f       	subi	r24, 0xFF	; 255
    2be2:	89 83       	std	Y+1, r24	; 0x01
    2be4:	99 81       	ldd	r25, Y+1	; 0x01
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	98 17       	cp	r25, r24
    2bea:	70 f3       	brcs	.-36     	; 0x2bc8 <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2bec:	8f 81       	ldd	r24, Y+7	; 0x07
    2bee:	68 85       	ldd	r22, Y+8	; 0x08
    2bf0:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2bfa:	20 c0       	rjmp	.+64     	; 0x2c3c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    2bfc:	88 e7       	ldi	r24, 0x78	; 120
    2bfe:	0e 94 3b 10 	call	0x2076	; 0x2076 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2c02:	19 82       	std	Y+1, r1	; 0x01
    2c04:	0e c0       	rjmp	.+28     	; 0x2c22 <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c10:	fc 01       	movw	r30, r24
    2c12:	e2 0f       	add	r30, r18
    2c14:	f3 1f       	adc	r31, r19
    2c16:	80 81       	ld	r24, Z
    2c18:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    2c1c:	89 81       	ldd	r24, Y+1	; 0x01
    2c1e:	8f 5f       	subi	r24, 0xFF	; 255
    2c20:	89 83       	std	Y+1, r24	; 0x01
    2c22:	99 81       	ldd	r25, Y+1	; 0x01
    2c24:	8a 81       	ldd	r24, Y+2	; 0x02
    2c26:	98 17       	cp	r25, r24
    2c28:	70 f3       	brcs	.-36     	; 0x2c06 <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c2c:	68 85       	ldd	r22, Y+8	; 0x08
    2c2e:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2c32:	8c 81       	ldd	r24, Y+4	; 0x04
    2c34:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_voidSendChar>
    2c38:	01 c0       	rjmp	.+2      	; 0x2c3c <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    2c3a:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    2c3c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2c3e:	2a 96       	adiw	r28, 0x0a	; 10
    2c40:	0f b6       	in	r0, 0x3f	; 63
    2c42:	f8 94       	cli
    2c44:	de bf       	out	0x3e, r29	; 62
    2c46:	0f be       	out	0x3f, r0	; 63
    2c48:	cd bf       	out	0x3d, r28	; 61
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	e1 97       	sbiw	r28, 0x31	; 49
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	de bf       	out	0x3e, r29	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	cd bf       	out	0x3d, r28	; 61
    2c64:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	60 e0       	ldi	r22, 0x00	; 0
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	61 e0       	ldi	r22, 0x01	; 1
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    2c7a:	89 a9       	ldd	r24, Y+49	; 0x31
    2c7c:	98 2f       	mov	r25, r24
    2c7e:	92 95       	swap	r25
    2c80:	90 7f       	andi	r25, 0xF0	; 240
    2c82:	83 e0       	ldi	r24, 0x03	; 3
    2c84:	69 2f       	mov	r22, r25
    2c86:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	62 e0       	ldi	r22, 0x02	; 2
    2c8e:	41 e0       	ldi	r20, 0x01	; 1
    2c90:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
    2c94:	80 e0       	ldi	r24, 0x00	; 0
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	a0 e8       	ldi	r26, 0x80	; 128
    2c9a:	bf e3       	ldi	r27, 0x3F	; 63
    2c9c:	8d a7       	std	Y+45, r24	; 0x2d
    2c9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ca0:	af a7       	std	Y+47, r26	; 0x2f
    2ca2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ca4:	6d a5       	ldd	r22, Y+45	; 0x2d
    2ca6:	7e a5       	ldd	r23, Y+46	; 0x2e
    2ca8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2caa:	98 a9       	ldd	r25, Y+48	; 0x30
    2cac:	2b ea       	ldi	r18, 0xAB	; 171
    2cae:	3a ea       	ldi	r19, 0xAA	; 170
    2cb0:	4a e2       	ldi	r20, 0x2A	; 42
    2cb2:	50 e4       	ldi	r21, 0x40	; 64
    2cb4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2cb8:	dc 01       	movw	r26, r24
    2cba:	cb 01       	movw	r24, r22
    2cbc:	89 a7       	std	Y+41, r24	; 0x29
    2cbe:	9a a7       	std	Y+42, r25	; 0x2a
    2cc0:	ab a7       	std	Y+43, r26	; 0x2b
    2cc2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2cc4:	69 a5       	ldd	r22, Y+41	; 0x29
    2cc6:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cca:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e8       	ldi	r20, 0x80	; 128
    2cd2:	5f e3       	ldi	r21, 0x3F	; 63
    2cd4:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2cd8:	88 23       	and	r24, r24
    2cda:	1c f4       	brge	.+6      	; 0x2ce2 <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	88 a7       	std	Y+40, r24	; 0x28
    2ce0:	91 c0       	rjmp	.+290    	; 0x2e04 <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    2ce2:	69 a5       	ldd	r22, Y+41	; 0x29
    2ce4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ce6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ce8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	4f e7       	ldi	r20, 0x7F	; 127
    2cf0:	53 e4       	ldi	r21, 0x43	; 67
    2cf2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2cf6:	18 16       	cp	r1, r24
    2cf8:	0c f0       	brlt	.+2      	; 0x2cfc <LCD_voidSendHalfCmnd+0xac>
    2cfa:	7b c0       	rjmp	.+246    	; 0x2df2 <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    2cfc:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cfe:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d02:	98 a9       	ldd	r25, Y+48	; 0x30
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4a e7       	ldi	r20, 0x7A	; 122
    2d0a:	54 e4       	ldi	r21, 0x44	; 68
    2d0c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	8c a3       	std	Y+36, r24	; 0x24
    2d16:	9d a3       	std	Y+37, r25	; 0x25
    2d18:	ae a3       	std	Y+38, r26	; 0x26
    2d1a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1c:	6c a1       	ldd	r22, Y+36	; 0x24
    2d1e:	7d a1       	ldd	r23, Y+37	; 0x25
    2d20:	8e a1       	ldd	r24, Y+38	; 0x26
    2d22:	9f a1       	ldd	r25, Y+39	; 0x27
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a ef       	ldi	r20, 0xFA	; 250
    2d2a:	54 e4       	ldi	r21, 0x44	; 68
    2d2c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	88 a3       	std	Y+32, r24	; 0x20
    2d36:	99 a3       	std	Y+33, r25	; 0x21
    2d38:	aa a3       	std	Y+34, r26	; 0x22
    2d3a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d3c:	68 a1       	ldd	r22, Y+32	; 0x20
    2d3e:	79 a1       	ldd	r23, Y+33	; 0x21
    2d40:	8a a1       	ldd	r24, Y+34	; 0x22
    2d42:	9b a1       	ldd	r25, Y+35	; 0x23
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9f 8f       	std	Y+31, r25	; 0x1f
    2d5a:	8e 8f       	std	Y+30, r24	; 0x1e
    2d5c:	3f c0       	rjmp	.+126    	; 0x2ddc <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    2d5e:	68 a1       	ldd	r22, Y+32	; 0x20
    2d60:	79 a1       	ldd	r23, Y+33	; 0x21
    2d62:	8a a1       	ldd	r24, Y+34	; 0x22
    2d64:	9b a1       	ldd	r25, Y+35	; 0x23
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	4c f5       	brge	.+82     	; 0x2dc8 <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d76:	6c a1       	ldd	r22, Y+36	; 0x24
    2d78:	7d a1       	ldd	r23, Y+37	; 0x25
    2d7a:	8e a1       	ldd	r24, Y+38	; 0x26
    2d7c:	9f a1       	ldd	r25, Y+39	; 0x27
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9f 8f       	std	Y+31, r25	; 0x1f
    2d9c:	8e 8f       	std	Y+30, r24	; 0x1e
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <LCD_voidSendHalfCmnd+0x16e>
    2da0:	88 ec       	ldi	r24, 0xC8	; 200
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9d 8f       	std	Y+29, r25	; 0x1d
    2da6:	8c 8f       	std	Y+28, r24	; 0x1c
    2da8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2daa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <LCD_voidSendHalfCmnd+0x15c>
    2db0:	9d 8f       	std	Y+29, r25	; 0x1d
    2db2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2db6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9f 8f       	std	Y+31, r25	; 0x1f
    2dbc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dc0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <LCD_voidSendHalfCmnd+0x150>
    2dc6:	24 c0       	rjmp	.+72     	; 0x2e10 <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	68 a1       	ldd	r22, Y+32	; 0x20
    2dca:	79 a1       	ldd	r23, Y+33	; 0x21
    2dcc:	8a a1       	ldd	r24, Y+34	; 0x22
    2dce:	9b a1       	ldd	r25, Y+35	; 0x23
    2dd0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9f 8f       	std	Y+31, r25	; 0x1f
    2dda:	8e 8f       	std	Y+30, r24	; 0x1e
    2ddc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dde:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2de0:	9b 8f       	std	Y+27, r25	; 0x1b
    2de2:	8a 8f       	std	Y+26, r24	; 0x1a
    2de4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2de6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <LCD_voidSendHalfCmnd+0x198>
    2dec:	9b 8f       	std	Y+27, r25	; 0x1b
    2dee:	8a 8f       	std	Y+26, r24	; 0x1a
    2df0:	0f c0       	rjmp	.+30     	; 0x2e10 <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2df2:	69 a5       	ldd	r22, Y+41	; 0x29
    2df4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2df6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2df8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2dfa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	88 a7       	std	Y+40, r24	; 0x28
    2e04:	88 a5       	ldd	r24, Y+40	; 0x28
    2e06:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e08:	89 8d       	ldd	r24, Y+25	; 0x19
    2e0a:	8a 95       	dec	r24
    2e0c:	f1 f7       	brne	.-4      	; 0x2e0a <LCD_voidSendHalfCmnd+0x1ba>
    2e0e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	62 e0       	ldi	r22, 0x02	; 2
    2e14:	40 e0       	ldi	r20, 0x00	; 0
    2e16:	0e 94 4c 0a 	call	0x1498	; 0x1498 <DIO_u8SetPinValue>
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
    2e1c:	90 e0       	ldi	r25, 0x00	; 0
    2e1e:	a0 e8       	ldi	r26, 0x80	; 128
    2e20:	bf e3       	ldi	r27, 0x3F	; 63
    2e22:	8d 8b       	std	Y+21, r24	; 0x15
    2e24:	9e 8b       	std	Y+22, r25	; 0x16
    2e26:	af 8b       	std	Y+23, r26	; 0x17
    2e28:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2e30:	98 8d       	ldd	r25, Y+24	; 0x18
    2e32:	2b ea       	ldi	r18, 0xAB	; 171
    2e34:	3a ea       	ldi	r19, 0xAA	; 170
    2e36:	4a e2       	ldi	r20, 0x2A	; 42
    2e38:	50 e4       	ldi	r21, 0x40	; 64
    2e3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e3e:	dc 01       	movw	r26, r24
    2e40:	cb 01       	movw	r24, r22
    2e42:	89 8b       	std	Y+17, r24	; 0x11
    2e44:	9a 8b       	std	Y+18, r25	; 0x12
    2e46:	ab 8b       	std	Y+19, r26	; 0x13
    2e48:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e4a:	69 89       	ldd	r22, Y+17	; 0x11
    2e4c:	7a 89       	ldd	r23, Y+18	; 0x12
    2e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e50:	9c 89       	ldd	r25, Y+20	; 0x14
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e8       	ldi	r20, 0x80	; 128
    2e58:	5f e3       	ldi	r21, 0x3F	; 63
    2e5a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2e5e:	88 23       	and	r24, r24
    2e60:	1c f4       	brge	.+6      	; 0x2e68 <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    2e62:	81 e0       	ldi	r24, 0x01	; 1
    2e64:	88 8b       	std	Y+16, r24	; 0x10
    2e66:	91 c0       	rjmp	.+290    	; 0x2f8a <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    2e68:	69 89       	ldd	r22, Y+17	; 0x11
    2e6a:	7a 89       	ldd	r23, Y+18	; 0x12
    2e6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4f e7       	ldi	r20, 0x7F	; 127
    2e76:	53 e4       	ldi	r21, 0x43	; 67
    2e78:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2e7c:	18 16       	cp	r1, r24
    2e7e:	0c f0       	brlt	.+2      	; 0x2e82 <LCD_voidSendHalfCmnd+0x232>
    2e80:	7b c0       	rjmp	.+246    	; 0x2f78 <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    2e82:	6d 89       	ldd	r22, Y+21	; 0x15
    2e84:	7e 89       	ldd	r23, Y+22	; 0x16
    2e86:	8f 89       	ldd	r24, Y+23	; 0x17
    2e88:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8a:	20 e0       	ldi	r18, 0x00	; 0
    2e8c:	30 e0       	ldi	r19, 0x00	; 0
    2e8e:	4a e7       	ldi	r20, 0x7A	; 122
    2e90:	54 e4       	ldi	r21, 0x44	; 68
    2e92:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2e96:	dc 01       	movw	r26, r24
    2e98:	cb 01       	movw	r24, r22
    2e9a:	8c 87       	std	Y+12, r24	; 0x0c
    2e9c:	9d 87       	std	Y+13, r25	; 0x0d
    2e9e:	ae 87       	std	Y+14, r26	; 0x0e
    2ea0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ea2:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ea4:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ea6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ea8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	4a ef       	ldi	r20, 0xFA	; 250
    2eb0:	54 e4       	ldi	r21, 0x44	; 68
    2eb2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	88 87       	std	Y+8, r24	; 0x08
    2ebc:	99 87       	std	Y+9, r25	; 0x09
    2ebe:	aa 87       	std	Y+10, r26	; 0x0a
    2ec0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ec2:	68 85       	ldd	r22, Y+8	; 0x08
    2ec4:	79 85       	ldd	r23, Y+9	; 0x09
    2ec6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ec8:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e8       	ldi	r20, 0x80	; 128
    2ed0:	5f e3       	ldi	r21, 0x3F	; 63
    2ed2:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2ed6:	88 23       	and	r24, r24
    2ed8:	2c f4       	brge	.+10     	; 0x2ee4 <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	9f 83       	std	Y+7, r25	; 0x07
    2ee0:	8e 83       	std	Y+6, r24	; 0x06
    2ee2:	3f c0       	rjmp	.+126    	; 0x2f62 <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    2ee4:	68 85       	ldd	r22, Y+8	; 0x08
    2ee6:	79 85       	ldd	r23, Y+9	; 0x09
    2ee8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eea:	9b 85       	ldd	r25, Y+11	; 0x0b
    2eec:	20 e0       	ldi	r18, 0x00	; 0
    2eee:	3f ef       	ldi	r19, 0xFF	; 255
    2ef0:	4f e7       	ldi	r20, 0x7F	; 127
    2ef2:	57 e4       	ldi	r21, 0x47	; 71
    2ef4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2ef8:	18 16       	cp	r1, r24
    2efa:	4c f5       	brge	.+82     	; 0x2f4e <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2efe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f00:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f02:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e2       	ldi	r20, 0x20	; 32
    2f0a:	51 e4       	ldi	r21, 0x41	; 65
    2f0c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	bc 01       	movw	r22, r24
    2f16:	cd 01       	movw	r24, r26
    2f18:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	9f 83       	std	Y+7, r25	; 0x07
    2f22:	8e 83       	std	Y+6, r24	; 0x06
    2f24:	0f c0       	rjmp	.+30     	; 0x2f44 <LCD_voidSendHalfCmnd+0x2f4>
    2f26:	88 ec       	ldi	r24, 0xC8	; 200
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	9d 83       	std	Y+5, r25	; 0x05
    2f2c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f30:	9d 81       	ldd	r25, Y+5	; 0x05
    2f32:	01 97       	sbiw	r24, 0x01	; 1
    2f34:	f1 f7       	brne	.-4      	; 0x2f32 <LCD_voidSendHalfCmnd+0x2e2>
    2f36:	9d 83       	std	Y+5, r25	; 0x05
    2f38:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2f3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	9f 83       	std	Y+7, r25	; 0x07
    2f42:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f44:	8e 81       	ldd	r24, Y+6	; 0x06
    2f46:	9f 81       	ldd	r25, Y+7	; 0x07
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	69 f7       	brne	.-38     	; 0x2f26 <LCD_voidSendHalfCmnd+0x2d6>
    2f4c:	24 c0       	rjmp	.+72     	; 0x2f96 <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f4e:	68 85       	ldd	r22, Y+8	; 0x08
    2f50:	79 85       	ldd	r23, Y+9	; 0x09
    2f52:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f54:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9f 83       	std	Y+7, r25	; 0x07
    2f60:	8e 83       	std	Y+6, r24	; 0x06
    2f62:	8e 81       	ldd	r24, Y+6	; 0x06
    2f64:	9f 81       	ldd	r25, Y+7	; 0x07
    2f66:	9b 83       	std	Y+3, r25	; 0x03
    2f68:	8a 83       	std	Y+2, r24	; 0x02
    2f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	f1 f7       	brne	.-4      	; 0x2f6e <LCD_voidSendHalfCmnd+0x31e>
    2f72:	9b 83       	std	Y+3, r25	; 0x03
    2f74:	8a 83       	std	Y+2, r24	; 0x02
    2f76:	0f c0       	rjmp	.+30     	; 0x2f96 <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f78:	69 89       	ldd	r22, Y+17	; 0x11
    2f7a:	7a 89       	ldd	r23, Y+18	; 0x12
    2f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f80:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	88 8b       	std	Y+16, r24	; 0x10
    2f8a:	88 89       	ldd	r24, Y+16	; 0x10
    2f8c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f8e:	89 81       	ldd	r24, Y+1	; 0x01
    2f90:	8a 95       	dec	r24
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <LCD_voidSendHalfCmnd+0x340>
    2f94:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
}
    2f96:	e1 96       	adiw	r28, 0x31	; 49
    2f98:	0f b6       	in	r0, 0x3f	; 63
    2f9a:	f8 94       	cli
    2f9c:	de bf       	out	0x3e, r29	; 62
    2f9e:	0f be       	out	0x3f, r0	; 63
    2fa0:	cd bf       	out	0x3d, r28	; 61
    2fa2:	cf 91       	pop	r28
    2fa4:	df 91       	pop	r29
    2fa6:	08 95       	ret

00002fa8 <FloatToString>:
#include "DIO_interface.h"
#include "LCD_interface.h"
#include "ADC_interface.h"

void FloatToString(float num, char *buffer, int decimal_places,int width)
{
    2fa8:	0f 93       	push	r16
    2faa:	1f 93       	push	r17
    2fac:	df 93       	push	r29
    2fae:	cf 93       	push	r28
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	2a 97       	sbiw	r28, 0x0a	; 10
    2fb6:	0f b6       	in	r0, 0x3f	; 63
    2fb8:	f8 94       	cli
    2fba:	de bf       	out	0x3e, r29	; 62
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	cd bf       	out	0x3d, r28	; 61
    2fc0:	69 83       	std	Y+1, r22	; 0x01
    2fc2:	7a 83       	std	Y+2, r23	; 0x02
    2fc4:	8b 83       	std	Y+3, r24	; 0x03
    2fc6:	9c 83       	std	Y+4, r25	; 0x04
    2fc8:	5e 83       	std	Y+6, r21	; 0x06
    2fca:	4d 83       	std	Y+5, r20	; 0x05
    2fcc:	38 87       	std	Y+8, r19	; 0x08
    2fce:	2f 83       	std	Y+7, r18	; 0x07
    2fd0:	1a 87       	std	Y+10, r17	; 0x0a
    2fd2:	09 87       	std	Y+9, r16	; 0x09
	dtostrf(num,width,decimal_places,buffer);
    2fd4:	29 85       	ldd	r18, Y+9	; 0x09
    2fd6:	3f 81       	ldd	r19, Y+7	; 0x07
    2fd8:	89 81       	ldd	r24, Y+1	; 0x01
    2fda:	9a 81       	ldd	r25, Y+2	; 0x02
    2fdc:	ab 81       	ldd	r26, Y+3	; 0x03
    2fde:	bc 81       	ldd	r27, Y+4	; 0x04
    2fe0:	ed 81       	ldd	r30, Y+5	; 0x05
    2fe2:	fe 81       	ldd	r31, Y+6	; 0x06
    2fe4:	bc 01       	movw	r22, r24
    2fe6:	cd 01       	movw	r24, r26
    2fe8:	42 2f       	mov	r20, r18
    2fea:	23 2f       	mov	r18, r19
    2fec:	8f 01       	movw	r16, r30
    2fee:	0e 94 37 1a 	call	0x346e	; 0x346e <dtostrf>
}
    2ff2:	2a 96       	adiw	r28, 0x0a	; 10
    2ff4:	0f b6       	in	r0, 0x3f	; 63
    2ff6:	f8 94       	cli
    2ff8:	de bf       	out	0x3e, r29	; 62
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	cd bf       	out	0x3d, r28	; 61
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	08 95       	ret

00003008 <main>:

int main()
{
    3008:	0f 93       	push	r16
    300a:	1f 93       	push	r17
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
    3014:	e6 97       	sbiw	r28, 0x36	; 54
    3016:	0f b6       	in	r0, 0x3f	; 63
    3018:	f8 94       	cli
    301a:	de bf       	out	0x3e, r29	; 62
    301c:	0f be       	out	0x3f, r0	; 63
    301e:	cd bf       	out	0x3d, r28	; 61
	u16 Local_u16DigitalValue,Local_u16AnalogValue;
	f32 Local_f32PreviousVoltmeterValue= 0xFFFF,Local_f32PreviousOhmmeterValue=0xFFFF;
    3020:	80 e0       	ldi	r24, 0x00	; 0
    3022:	9f ef       	ldi	r25, 0xFF	; 255
    3024:	af e7       	ldi	r26, 0x7F	; 127
    3026:	b7 e4       	ldi	r27, 0x47	; 71
    3028:	8b 8f       	std	Y+27, r24	; 0x1b
    302a:	9c 8f       	std	Y+28, r25	; 0x1c
    302c:	ad 8f       	std	Y+29, r26	; 0x1d
    302e:	be 8f       	std	Y+30, r27	; 0x1e
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	9f ef       	ldi	r25, 0xFF	; 255
    3034:	af e7       	ldi	r26, 0x7F	; 127
    3036:	b7 e4       	ldi	r27, 0x47	; 71
    3038:	8f 8b       	std	Y+23, r24	; 0x17
    303a:	98 8f       	std	Y+24, r25	; 0x18
    303c:	a9 8f       	std	Y+25, r26	; 0x19
    303e:	ba 8f       	std	Y+26, r27	; 0x1a
	f32 Local_f32VoltmeterValue,Local_f32OhmmeterValue;
	u8 buffer[20];
	DIO_voidInit();
    3040:	0e 94 00 09 	call	0x1200	; 0x1200 <DIO_voidInit>
	LCD_voidInit();
    3044:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <LCD_voidInit>
	ADC_voidInit();
    3048:	0e 94 94 07 	call	0xf28	; 0xf28 <ADC_voidInit>
	while(1)
	{
		// Read ADC value from Channel 0 (Voltmeter)
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0,&Local_u16DigitalValue);
    304c:	9e 01       	movw	r18, r28
    304e:	2f 5d       	subi	r18, 0xDF	; 223
    3050:	3f 4f       	sbci	r19, 0xFF	; 255
    3052:	80 e0       	ldi	r24, 0x00	; 0
    3054:	b9 01       	movw	r22, r18
    3056:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <ADC_u8GetDigitalValueSynchNonBlocking>
		Local_u16AnalogValue = ((u32)(Local_u16DigitalValue * 5000UL)/1024);
    305a:	89 a1       	ldd	r24, Y+33	; 0x21
    305c:	9a a1       	ldd	r25, Y+34	; 0x22
    305e:	cc 01       	movw	r24, r24
    3060:	a0 e0       	ldi	r26, 0x00	; 0
    3062:	b0 e0       	ldi	r27, 0x00	; 0
    3064:	28 e8       	ldi	r18, 0x88	; 136
    3066:	33 e1       	ldi	r19, 0x13	; 19
    3068:	40 e0       	ldi	r20, 0x00	; 0
    306a:	50 e0       	ldi	r21, 0x00	; 0
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 bf 19 	call	0x337e	; 0x337e <__mulsi3>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	07 2e       	mov	r0, r23
    307a:	7a e0       	ldi	r23, 0x0A	; 10
    307c:	b6 95       	lsr	r27
    307e:	a7 95       	ror	r26
    3080:	97 95       	ror	r25
    3082:	87 95       	ror	r24
    3084:	7a 95       	dec	r23
    3086:	d1 f7       	brne	.-12     	; 0x307c <main+0x74>
    3088:	70 2d       	mov	r23, r0
    308a:	98 a3       	std	Y+32, r25	; 0x20
    308c:	8f 8f       	std	Y+31, r24	; 0x1f
		Local_f32VoltmeterValue = ((Local_u16AnalogValue) / 5000.0) * 25.0;
    308e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3090:	98 a1       	ldd	r25, Y+32	; 0x20
    3092:	cc 01       	movw	r24, r24
    3094:	a0 e0       	ldi	r26, 0x00	; 0
    3096:	b0 e0       	ldi	r27, 0x00	; 0
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	bc 01       	movw	r22, r24
    30a6:	cd 01       	movw	r24, r26
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e4       	ldi	r19, 0x40	; 64
    30ac:	4c e9       	ldi	r20, 0x9C	; 156
    30ae:	55 e4       	ldi	r21, 0x45	; 69
    30b0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	48 ec       	ldi	r20, 0xC8	; 200
    30c2:	51 e4       	ldi	r21, 0x41	; 65
    30c4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	8b 8b       	std	Y+19, r24	; 0x13
    30ce:	9c 8b       	std	Y+20, r25	; 0x14
    30d0:	ad 8b       	std	Y+21, r26	; 0x15
    30d2:	be 8b       	std	Y+22, r27	; 0x16
		// Check if the voltmeter value has changed significantly
		if ((Local_f32VoltmeterValue - Local_f32PreviousVoltmeterValue) > 0.01 || (Local_f32PreviousVoltmeterValue - Local_f32VoltmeterValue) > 0.01)
    30d4:	6b 89       	ldd	r22, Y+19	; 0x13
    30d6:	7c 89       	ldd	r23, Y+20	; 0x14
    30d8:	8d 89       	ldd	r24, Y+21	; 0x15
    30da:	9e 89       	ldd	r25, Y+22	; 0x16
    30dc:	2b 8d       	ldd	r18, Y+27	; 0x1b
    30de:	3c 8d       	ldd	r19, Y+28	; 0x1c
    30e0:	4d 8d       	ldd	r20, Y+29	; 0x1d
    30e2:	5e 8d       	ldd	r21, Y+30	; 0x1e
    30e4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	bc 01       	movw	r22, r24
    30ee:	cd 01       	movw	r24, r26
    30f0:	2a e0       	ldi	r18, 0x0A	; 10
    30f2:	37 ed       	ldi	r19, 0xD7	; 215
    30f4:	43 e2       	ldi	r20, 0x23	; 35
    30f6:	5c e3       	ldi	r21, 0x3C	; 60
    30f8:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	b4 f0       	brlt	.+44     	; 0x312c <main+0x124>
    3100:	6b 8d       	ldd	r22, Y+27	; 0x1b
    3102:	7c 8d       	ldd	r23, Y+28	; 0x1c
    3104:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3106:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3108:	2b 89       	ldd	r18, Y+19	; 0x13
    310a:	3c 89       	ldd	r19, Y+20	; 0x14
    310c:	4d 89       	ldd	r20, Y+21	; 0x15
    310e:	5e 89       	ldd	r21, Y+22	; 0x16
    3110:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	bc 01       	movw	r22, r24
    311a:	cd 01       	movw	r24, r26
    311c:	2a e0       	ldi	r18, 0x0A	; 10
    311e:	37 ed       	ldi	r19, 0xD7	; 215
    3120:	43 e2       	ldi	r20, 0x23	; 35
    3122:	5c e3       	ldi	r21, 0x3C	; 60
    3124:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3128:	18 16       	cp	r1, r24
    312a:	34 f5       	brge	.+76     	; 0x3178 <main+0x170>
		{
			// Update the LCD display with the new voltmeter value
			LCD_voidClearScreen();
    312c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_voidClearScreen>
			FloatToString(Local_f32VoltmeterValue, buffer, 2,4);
    3130:	8b 89       	ldd	r24, Y+19	; 0x13
    3132:	9c 89       	ldd	r25, Y+20	; 0x14
    3134:	ad 89       	ldd	r26, Y+21	; 0x15
    3136:	be 89       	ldd	r27, Y+22	; 0x16
    3138:	9e 01       	movw	r18, r28
    313a:	2d 5d       	subi	r18, 0xDD	; 221
    313c:	3f 4f       	sbci	r19, 0xFF	; 255
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	a9 01       	movw	r20, r18
    3144:	22 e0       	ldi	r18, 0x02	; 2
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	04 e0       	ldi	r16, 0x04	; 4
    314a:	10 e0       	ldi	r17, 0x00	; 0
    314c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <FloatToString>
//			dtostrf(Local_f32VoltmeterValue,4,2,buffer);
			LCD_voidWriteString("Voltmeter:");
    3150:	80 e6       	ldi	r24, 0x60	; 96
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_voidWriteString>
			LCD_voidWriteString(buffer);
    3158:	ce 01       	movw	r24, r28
    315a:	83 96       	adiw	r24, 0x23	; 35
    315c:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_voidWriteString>
			LCD_voidWriteString("V");
    3160:	8b e6       	ldi	r24, 0x6B	; 107
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_voidWriteString>
			Local_f32PreviousVoltmeterValue = Local_f32VoltmeterValue; // Update previous voltmeter value
    3168:	8b 89       	ldd	r24, Y+19	; 0x13
    316a:	9c 89       	ldd	r25, Y+20	; 0x14
    316c:	ad 89       	ldd	r26, Y+21	; 0x15
    316e:	be 89       	ldd	r27, Y+22	; 0x16
    3170:	8b 8f       	std	Y+27, r24	; 0x1b
    3172:	9c 8f       	std	Y+28, r25	; 0x1c
    3174:	ad 8f       	std	Y+29, r26	; 0x1d
    3176:	be 8f       	std	Y+30, r27	; 0x1e
		}
		// Read ADC value from Channel 0 (Ohmmeter)
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0, &Local_u16DigitalValue);
    3178:	9e 01       	movw	r18, r28
    317a:	2f 5d       	subi	r18, 0xDF	; 223
    317c:	3f 4f       	sbci	r19, 0xFF	; 255
    317e:	80 e0       	ldi	r24, 0x00	; 0
    3180:	b9 01       	movw	r22, r18
    3182:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <ADC_u8GetDigitalValueSynchNonBlocking>
		Local_u16AnalogValue = (u16)((Local_u16DigitalValue * 5000UL) / 1024);
    3186:	89 a1       	ldd	r24, Y+33	; 0x21
    3188:	9a a1       	ldd	r25, Y+34	; 0x22
    318a:	cc 01       	movw	r24, r24
    318c:	a0 e0       	ldi	r26, 0x00	; 0
    318e:	b0 e0       	ldi	r27, 0x00	; 0
    3190:	28 e8       	ldi	r18, 0x88	; 136
    3192:	33 e1       	ldi	r19, 0x13	; 19
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	50 e0       	ldi	r21, 0x00	; 0
    3198:	bc 01       	movw	r22, r24
    319a:	cd 01       	movw	r24, r26
    319c:	0e 94 bf 19 	call	0x337e	; 0x337e <__mulsi3>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	07 2e       	mov	r0, r23
    31a6:	7a e0       	ldi	r23, 0x0A	; 10
    31a8:	b6 95       	lsr	r27
    31aa:	a7 95       	ror	r26
    31ac:	97 95       	ror	r25
    31ae:	87 95       	ror	r24
    31b0:	7a 95       	dec	r23
    31b2:	d1 f7       	brne	.-12     	; 0x31a8 <main+0x1a0>
    31b4:	70 2d       	mov	r23, r0
    31b6:	98 a3       	std	Y+32, r25	; 0x20
    31b8:	8f 8f       	std	Y+31, r24	; 0x1f
		Local_f32OhmmeterValue = (Local_u16AnalogValue/5000.0) *1000.0;
    31ba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31bc:	98 a1       	ldd	r25, Y+32	; 0x20
    31be:	cc 01       	movw	r24, r24
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	bc 01       	movw	r22, r24
    31d2:	cd 01       	movw	r24, r26
    31d4:	20 e0       	ldi	r18, 0x00	; 0
    31d6:	30 e4       	ldi	r19, 0x40	; 64
    31d8:	4c e9       	ldi	r20, 0x9C	; 156
    31da:	55 e4       	ldi	r21, 0x45	; 69
    31dc:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    31e0:	dc 01       	movw	r26, r24
    31e2:	cb 01       	movw	r24, r22
    31e4:	bc 01       	movw	r22, r24
    31e6:	cd 01       	movw	r24, r26
    31e8:	20 e0       	ldi	r18, 0x00	; 0
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	4a e7       	ldi	r20, 0x7A	; 122
    31ee:	54 e4       	ldi	r21, 0x44	; 68
    31f0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31f4:	dc 01       	movw	r26, r24
    31f6:	cb 01       	movw	r24, r22
    31f8:	8f 87       	std	Y+15, r24	; 0x0f
    31fa:	98 8b       	std	Y+16, r25	; 0x10
    31fc:	a9 8b       	std	Y+17, r26	; 0x11
    31fe:	ba 8b       	std	Y+18, r27	; 0x12
		// Check if the ohmmeter value has changed significantly
		if ((Local_f32OhmmeterValue - Local_f32PreviousOhmmeterValue) > 1 || (Local_f32PreviousOhmmeterValue - Local_f32OhmmeterValue) > 1)
    3200:	6f 85       	ldd	r22, Y+15	; 0x0f
    3202:	78 89       	ldd	r23, Y+16	; 0x10
    3204:	89 89       	ldd	r24, Y+17	; 0x11
    3206:	9a 89       	ldd	r25, Y+18	; 0x12
    3208:	2f 89       	ldd	r18, Y+23	; 0x17
    320a:	38 8d       	ldd	r19, Y+24	; 0x18
    320c:	49 8d       	ldd	r20, Y+25	; 0x19
    320e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    3210:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	bc 01       	movw	r22, r24
    321a:	cd 01       	movw	r24, r26
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e8       	ldi	r20, 0x80	; 128
    3222:	5f e3       	ldi	r21, 0x3F	; 63
    3224:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3228:	18 16       	cp	r1, r24
    322a:	b4 f0       	brlt	.+44     	; 0x3258 <main+0x250>
    322c:	6f 89       	ldd	r22, Y+23	; 0x17
    322e:	78 8d       	ldd	r23, Y+24	; 0x18
    3230:	89 8d       	ldd	r24, Y+25	; 0x19
    3232:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3234:	2f 85       	ldd	r18, Y+15	; 0x0f
    3236:	38 89       	ldd	r19, Y+16	; 0x10
    3238:	49 89       	ldd	r20, Y+17	; 0x11
    323a:	5a 89       	ldd	r21, Y+18	; 0x12
    323c:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	bc 01       	movw	r22, r24
    3246:	cd 01       	movw	r24, r26
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	40 e8       	ldi	r20, 0x80	; 128
    324e:	5f e3       	ldi	r21, 0x3F	; 63
    3250:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	04 f5       	brge	.+64     	; 0x3298 <main+0x290>
		{
			// Update the LCD display with the new ohmmeter value
			LCD_u8GoToXY(LCD_u8_LINE2, 0);
    3258:	82 e0       	ldi	r24, 0x02	; 2
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	0e 94 1e 14 	call	0x283c	; 0x283c <LCD_u8GoToXY>
			LCD_voidWriteString("Ohmmeter:");
    3260:	8d e6       	ldi	r24, 0x6D	; 109
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_voidWriteString>
			LCD_voidWriteNumber(Local_f32OhmmeterValue);
    3268:	6f 85       	ldd	r22, Y+15	; 0x0f
    326a:	78 89       	ldd	r23, Y+16	; 0x10
    326c:	89 89       	ldd	r24, Y+17	; 0x11
    326e:	9a 89       	ldd	r25, Y+18	; 0x12
    3270:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	bc 01       	movw	r22, r24
    327a:	cd 01       	movw	r24, r26
    327c:	0e 94 a7 13 	call	0x274e	; 0x274e <LCD_voidWriteNumber>
			LCD_voidWriteString(" Ohm");
    3280:	87 e7       	ldi	r24, 0x77	; 119
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	0e 94 8b 13 	call	0x2716	; 0x2716 <LCD_voidWriteString>
			Local_f32PreviousOhmmeterValue = Local_f32OhmmeterValue; // Update previous ohmmeter value
    3288:	8f 85       	ldd	r24, Y+15	; 0x0f
    328a:	98 89       	ldd	r25, Y+16	; 0x10
    328c:	a9 89       	ldd	r26, Y+17	; 0x11
    328e:	ba 89       	ldd	r27, Y+18	; 0x12
    3290:	8f 8b       	std	Y+23, r24	; 0x17
    3292:	98 8f       	std	Y+24, r25	; 0x18
    3294:	a9 8f       	std	Y+25, r26	; 0x19
    3296:	ba 8f       	std	Y+26, r27	; 0x1a
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	aa ef       	ldi	r26, 0xFA	; 250
    329e:	b3 e4       	ldi	r27, 0x43	; 67
    32a0:	8b 87       	std	Y+11, r24	; 0x0b
    32a2:	9c 87       	std	Y+12, r25	; 0x0c
    32a4:	ad 87       	std	Y+13, r26	; 0x0d
    32a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	4a ef       	ldi	r20, 0xFA	; 250
    32b6:	54 e4       	ldi	r21, 0x44	; 68
    32b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	8f 83       	std	Y+7, r24	; 0x07
    32c2:	98 87       	std	Y+8, r25	; 0x08
    32c4:	a9 87       	std	Y+9, r26	; 0x09
    32c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ca:	78 85       	ldd	r23, Y+8	; 0x08
    32cc:	89 85       	ldd	r24, Y+9	; 0x09
    32ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e8       	ldi	r20, 0x80	; 128
    32d6:	5f e3       	ldi	r21, 0x3F	; 63
    32d8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32dc:	88 23       	and	r24, r24
    32de:	2c f4       	brge	.+10     	; 0x32ea <main+0x2e2>
		__ticks = 1;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
    32e8:	3f c0       	rjmp	.+126    	; 0x3368 <main+0x360>
	else if (__tmp > 65535)
    32ea:	6f 81       	ldd	r22, Y+7	; 0x07
    32ec:	78 85       	ldd	r23, Y+8	; 0x08
    32ee:	89 85       	ldd	r24, Y+9	; 0x09
    32f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	3f ef       	ldi	r19, 0xFF	; 255
    32f6:	4f e7       	ldi	r20, 0x7F	; 127
    32f8:	57 e4       	ldi	r21, 0x47	; 71
    32fa:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    32fe:	18 16       	cp	r1, r24
    3300:	4c f5       	brge	.+82     	; 0x3354 <main+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3302:	6b 85       	ldd	r22, Y+11	; 0x0b
    3304:	7c 85       	ldd	r23, Y+12	; 0x0c
    3306:	8d 85       	ldd	r24, Y+13	; 0x0d
    3308:	9e 85       	ldd	r25, Y+14	; 0x0e
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e2       	ldi	r20, 0x20	; 32
    3310:	51 e4       	ldi	r21, 0x41	; 65
    3312:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	bc 01       	movw	r22, r24
    331c:	cd 01       	movw	r24, r26
    331e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	9e 83       	std	Y+6, r25	; 0x06
    3328:	8d 83       	std	Y+5, r24	; 0x05
    332a:	0f c0       	rjmp	.+30     	; 0x334a <main+0x342>
    332c:	88 ec       	ldi	r24, 0xC8	; 200
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	9c 83       	std	Y+4, r25	; 0x04
    3332:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <main+0x330>
    333c:	9c 83       	std	Y+4, r25	; 0x04
    333e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	9e 83       	std	Y+6, r25	; 0x06
    3348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334a:	8d 81       	ldd	r24, Y+5	; 0x05
    334c:	9e 81       	ldd	r25, Y+6	; 0x06
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	69 f7       	brne	.-38     	; 0x332c <main+0x324>
    3352:	7c ce       	rjmp	.-776    	; 0x304c <main+0x44>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3354:	6f 81       	ldd	r22, Y+7	; 0x07
    3356:	78 85       	ldd	r23, Y+8	; 0x08
    3358:	89 85       	ldd	r24, Y+9	; 0x09
    335a:	9a 85       	ldd	r25, Y+10	; 0x0a
    335c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9e 83       	std	Y+6, r25	; 0x06
    3366:	8d 83       	std	Y+5, r24	; 0x05
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	9e 81       	ldd	r25, Y+6	; 0x06
    336c:	9a 83       	std	Y+2, r25	; 0x02
    336e:	89 83       	std	Y+1, r24	; 0x01
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <main+0x36c>
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
    337c:	67 ce       	rjmp	.-818    	; 0x304c <main+0x44>

0000337e <__mulsi3>:
    337e:	62 9f       	mul	r22, r18
    3380:	d0 01       	movw	r26, r0
    3382:	73 9f       	mul	r23, r19
    3384:	f0 01       	movw	r30, r0
    3386:	82 9f       	mul	r24, r18
    3388:	e0 0d       	add	r30, r0
    338a:	f1 1d       	adc	r31, r1
    338c:	64 9f       	mul	r22, r20
    338e:	e0 0d       	add	r30, r0
    3390:	f1 1d       	adc	r31, r1
    3392:	92 9f       	mul	r25, r18
    3394:	f0 0d       	add	r31, r0
    3396:	83 9f       	mul	r24, r19
    3398:	f0 0d       	add	r31, r0
    339a:	74 9f       	mul	r23, r20
    339c:	f0 0d       	add	r31, r0
    339e:	65 9f       	mul	r22, r21
    33a0:	f0 0d       	add	r31, r0
    33a2:	99 27       	eor	r25, r25
    33a4:	72 9f       	mul	r23, r18
    33a6:	b0 0d       	add	r27, r0
    33a8:	e1 1d       	adc	r30, r1
    33aa:	f9 1f       	adc	r31, r25
    33ac:	63 9f       	mul	r22, r19
    33ae:	b0 0d       	add	r27, r0
    33b0:	e1 1d       	adc	r30, r1
    33b2:	f9 1f       	adc	r31, r25
    33b4:	bd 01       	movw	r22, r26
    33b6:	cf 01       	movw	r24, r30
    33b8:	11 24       	eor	r1, r1
    33ba:	08 95       	ret

000033bc <__udivmodsi4>:
    33bc:	a1 e2       	ldi	r26, 0x21	; 33
    33be:	1a 2e       	mov	r1, r26
    33c0:	aa 1b       	sub	r26, r26
    33c2:	bb 1b       	sub	r27, r27
    33c4:	fd 01       	movw	r30, r26
    33c6:	0d c0       	rjmp	.+26     	; 0x33e2 <__udivmodsi4_ep>

000033c8 <__udivmodsi4_loop>:
    33c8:	aa 1f       	adc	r26, r26
    33ca:	bb 1f       	adc	r27, r27
    33cc:	ee 1f       	adc	r30, r30
    33ce:	ff 1f       	adc	r31, r31
    33d0:	a2 17       	cp	r26, r18
    33d2:	b3 07       	cpc	r27, r19
    33d4:	e4 07       	cpc	r30, r20
    33d6:	f5 07       	cpc	r31, r21
    33d8:	20 f0       	brcs	.+8      	; 0x33e2 <__udivmodsi4_ep>
    33da:	a2 1b       	sub	r26, r18
    33dc:	b3 0b       	sbc	r27, r19
    33de:	e4 0b       	sbc	r30, r20
    33e0:	f5 0b       	sbc	r31, r21

000033e2 <__udivmodsi4_ep>:
    33e2:	66 1f       	adc	r22, r22
    33e4:	77 1f       	adc	r23, r23
    33e6:	88 1f       	adc	r24, r24
    33e8:	99 1f       	adc	r25, r25
    33ea:	1a 94       	dec	r1
    33ec:	69 f7       	brne	.-38     	; 0x33c8 <__udivmodsi4_loop>
    33ee:	60 95       	com	r22
    33f0:	70 95       	com	r23
    33f2:	80 95       	com	r24
    33f4:	90 95       	com	r25
    33f6:	9b 01       	movw	r18, r22
    33f8:	ac 01       	movw	r20, r24
    33fa:	bd 01       	movw	r22, r26
    33fc:	cf 01       	movw	r24, r30
    33fe:	08 95       	ret

00003400 <__prologue_saves__>:
    3400:	2f 92       	push	r2
    3402:	3f 92       	push	r3
    3404:	4f 92       	push	r4
    3406:	5f 92       	push	r5
    3408:	6f 92       	push	r6
    340a:	7f 92       	push	r7
    340c:	8f 92       	push	r8
    340e:	9f 92       	push	r9
    3410:	af 92       	push	r10
    3412:	bf 92       	push	r11
    3414:	cf 92       	push	r12
    3416:	df 92       	push	r13
    3418:	ef 92       	push	r14
    341a:	ff 92       	push	r15
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	cf 93       	push	r28
    3422:	df 93       	push	r29
    3424:	cd b7       	in	r28, 0x3d	; 61
    3426:	de b7       	in	r29, 0x3e	; 62
    3428:	ca 1b       	sub	r28, r26
    342a:	db 0b       	sbc	r29, r27
    342c:	0f b6       	in	r0, 0x3f	; 63
    342e:	f8 94       	cli
    3430:	de bf       	out	0x3e, r29	; 62
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	cd bf       	out	0x3d, r28	; 61
    3436:	09 94       	ijmp

00003438 <__epilogue_restores__>:
    3438:	2a 88       	ldd	r2, Y+18	; 0x12
    343a:	39 88       	ldd	r3, Y+17	; 0x11
    343c:	48 88       	ldd	r4, Y+16	; 0x10
    343e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3440:	6e 84       	ldd	r6, Y+14	; 0x0e
    3442:	7d 84       	ldd	r7, Y+13	; 0x0d
    3444:	8c 84       	ldd	r8, Y+12	; 0x0c
    3446:	9b 84       	ldd	r9, Y+11	; 0x0b
    3448:	aa 84       	ldd	r10, Y+10	; 0x0a
    344a:	b9 84       	ldd	r11, Y+9	; 0x09
    344c:	c8 84       	ldd	r12, Y+8	; 0x08
    344e:	df 80       	ldd	r13, Y+7	; 0x07
    3450:	ee 80       	ldd	r14, Y+6	; 0x06
    3452:	fd 80       	ldd	r15, Y+5	; 0x05
    3454:	0c 81       	ldd	r16, Y+4	; 0x04
    3456:	1b 81       	ldd	r17, Y+3	; 0x03
    3458:	aa 81       	ldd	r26, Y+2	; 0x02
    345a:	b9 81       	ldd	r27, Y+1	; 0x01
    345c:	ce 0f       	add	r28, r30
    345e:	d1 1d       	adc	r29, r1
    3460:	0f b6       	in	r0, 0x3f	; 63
    3462:	f8 94       	cli
    3464:	de bf       	out	0x3e, r29	; 62
    3466:	0f be       	out	0x3f, r0	; 63
    3468:	cd bf       	out	0x3d, r28	; 61
    346a:	ed 01       	movw	r28, r26
    346c:	08 95       	ret

0000346e <dtostrf>:
    346e:	ef 92       	push	r14
    3470:	ff 92       	push	r15
    3472:	0f 93       	push	r16
    3474:	1f 93       	push	r17
    3476:	f2 2f       	mov	r31, r18
    3478:	f0 2e       	mov	r15, r16
    347a:	47 fd       	sbrc	r20, 7
    347c:	02 c0       	rjmp	.+4      	; 0x3482 <dtostrf+0x14>
    347e:	e4 e0       	ldi	r30, 0x04	; 4
    3480:	01 c0       	rjmp	.+2      	; 0x3484 <dtostrf+0x16>
    3482:	e4 e1       	ldi	r30, 0x14	; 20
    3484:	24 2f       	mov	r18, r20
    3486:	33 27       	eor	r19, r19
    3488:	27 fd       	sbrc	r18, 7
    348a:	30 95       	com	r19
    348c:	37 ff       	sbrs	r19, 7
    348e:	03 c0       	rjmp	.+6      	; 0x3496 <dtostrf+0x28>
    3490:	30 95       	com	r19
    3492:	21 95       	neg	r18
    3494:	3f 4f       	sbci	r19, 0xFF	; 255
    3496:	4f 2d       	mov	r20, r15
    3498:	51 2f       	mov	r21, r17
    349a:	0f 2f       	mov	r16, r31
    349c:	ee 2e       	mov	r14, r30
    349e:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <dtoa_prf>
    34a2:	8f 2d       	mov	r24, r15
    34a4:	91 2f       	mov	r25, r17
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	ff 90       	pop	r15
    34ac:	ef 90       	pop	r14
    34ae:	08 95       	ret

000034b0 <dtoa_prf>:
    34b0:	a9 e0       	ldi	r26, 0x09	; 9
    34b2:	b0 e0       	ldi	r27, 0x00	; 0
    34b4:	ee e5       	ldi	r30, 0x5E	; 94
    34b6:	fa e1       	ldi	r31, 0x1A	; 26
    34b8:	0c 94 04 1a 	jmp	0x3408	; 0x3408 <__prologue_saves__+0x8>
    34bc:	6a 01       	movw	r12, r20
    34be:	12 2f       	mov	r17, r18
    34c0:	a0 2e       	mov	r10, r16
    34c2:	be 2c       	mov	r11, r14
    34c4:	2b e3       	ldi	r18, 0x3B	; 59
    34c6:	20 17       	cp	r18, r16
    34c8:	18 f4       	brcc	.+6      	; 0x34d0 <dtoa_prf+0x20>
    34ca:	2c e3       	ldi	r18, 0x3C	; 60
    34cc:	92 2e       	mov	r9, r18
    34ce:	02 c0       	rjmp	.+4      	; 0x34d4 <dtoa_prf+0x24>
    34d0:	90 2e       	mov	r9, r16
    34d2:	93 94       	inc	r9
    34d4:	ae 01       	movw	r20, r28
    34d6:	4f 5f       	subi	r20, 0xFF	; 255
    34d8:	5f 4f       	sbci	r21, 0xFF	; 255
    34da:	27 e0       	ldi	r18, 0x07	; 7
    34dc:	09 2d       	mov	r16, r9
    34de:	0e 94 ba 1b 	call	0x3774	; 0x3774 <__ftoa_engine>
    34e2:	bc 01       	movw	r22, r24
    34e4:	89 81       	ldd	r24, Y+1	; 0x01
    34e6:	e8 2e       	mov	r14, r24
    34e8:	ff 24       	eor	r15, r15
    34ea:	c7 01       	movw	r24, r14
    34ec:	89 70       	andi	r24, 0x09	; 9
    34ee:	90 70       	andi	r25, 0x00	; 0
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	11 f4       	brne	.+4      	; 0x34f8 <dtoa_prf+0x48>
    34f4:	ad e2       	ldi	r26, 0x2D	; 45
    34f6:	09 c0       	rjmp	.+18     	; 0x350a <dtoa_prf+0x5a>
    34f8:	b1 fe       	sbrs	r11, 1
    34fa:	02 c0       	rjmp	.+4      	; 0x3500 <dtoa_prf+0x50>
    34fc:	ab e2       	ldi	r26, 0x2B	; 43
    34fe:	05 c0       	rjmp	.+10     	; 0x350a <dtoa_prf+0x5a>
    3500:	b0 fc       	sbrc	r11, 0
    3502:	02 c0       	rjmp	.+4      	; 0x3508 <dtoa_prf+0x58>
    3504:	a0 e0       	ldi	r26, 0x00	; 0
    3506:	01 c0       	rjmp	.+2      	; 0x350a <dtoa_prf+0x5a>
    3508:	a0 e2       	ldi	r26, 0x20	; 32
    350a:	e3 fe       	sbrs	r14, 3
    350c:	3b c0       	rjmp	.+118    	; 0x3584 <dtoa_prf+0xd4>
    350e:	aa 23       	and	r26, r26
    3510:	11 f4       	brne	.+4      	; 0x3516 <dtoa_prf+0x66>
    3512:	23 e0       	ldi	r18, 0x03	; 3
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <dtoa_prf+0x68>
    3516:	24 e0       	ldi	r18, 0x04	; 4
    3518:	21 17       	cp	r18, r17
    351a:	10 f0       	brcs	.+4      	; 0x3520 <dtoa_prf+0x70>
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	02 c0       	rjmp	.+4      	; 0x3524 <dtoa_prf+0x74>
    3520:	12 1b       	sub	r17, r18
    3522:	21 2f       	mov	r18, r17
    3524:	eb 2c       	mov	r14, r11
    3526:	b4 fe       	sbrs	r11, 4
    3528:	02 c0       	rjmp	.+4      	; 0x352e <dtoa_prf+0x7e>
    352a:	32 2f       	mov	r19, r18
    352c:	0a c0       	rjmp	.+20     	; 0x3542 <dtoa_prf+0x92>
    352e:	f6 01       	movw	r30, r12
    3530:	32 2f       	mov	r19, r18
    3532:	80 e2       	ldi	r24, 0x20	; 32
    3534:	02 c0       	rjmp	.+4      	; 0x353a <dtoa_prf+0x8a>
    3536:	81 93       	st	Z+, r24
    3538:	31 50       	subi	r19, 0x01	; 1
    353a:	33 23       	and	r19, r19
    353c:	e1 f7       	brne	.-8      	; 0x3536 <dtoa_prf+0x86>
    353e:	c2 0e       	add	r12, r18
    3540:	d1 1c       	adc	r13, r1
    3542:	aa 23       	and	r26, r26
    3544:	19 f0       	breq	.+6      	; 0x354c <dtoa_prf+0x9c>
    3546:	f6 01       	movw	r30, r12
    3548:	a1 93       	st	Z+, r26
    354a:	6f 01       	movw	r12, r30
    354c:	f6 01       	movw	r30, r12
    354e:	31 96       	adiw	r30, 0x01	; 1
    3550:	e2 fe       	sbrs	r14, 2
    3552:	05 c0       	rjmp	.+10     	; 0x355e <dtoa_prf+0xae>
    3554:	9e e4       	ldi	r25, 0x4E	; 78
    3556:	d6 01       	movw	r26, r12
    3558:	9c 93       	st	X, r25
    355a:	81 e4       	ldi	r24, 0x41	; 65
    355c:	04 c0       	rjmp	.+8      	; 0x3566 <dtoa_prf+0xb6>
    355e:	9e e6       	ldi	r25, 0x6E	; 110
    3560:	d6 01       	movw	r26, r12
    3562:	9c 93       	st	X, r25
    3564:	81 e6       	ldi	r24, 0x61	; 97
    3566:	11 96       	adiw	r26, 0x01	; 1
    3568:	8c 93       	st	X, r24
    356a:	91 83       	std	Z+1, r25	; 0x01
    356c:	32 96       	adiw	r30, 0x02	; 2
    356e:	df 01       	movw	r26, r30
    3570:	83 2f       	mov	r24, r19
    3572:	90 e2       	ldi	r25, 0x20	; 32
    3574:	02 c0       	rjmp	.+4      	; 0x357a <dtoa_prf+0xca>
    3576:	9d 93       	st	X+, r25
    3578:	81 50       	subi	r24, 0x01	; 1
    357a:	88 23       	and	r24, r24
    357c:	e1 f7       	brne	.-8      	; 0x3576 <dtoa_prf+0xc6>
    357e:	e3 0f       	add	r30, r19
    3580:	f1 1d       	adc	r31, r1
    3582:	40 c0       	rjmp	.+128    	; 0x3604 <dtoa_prf+0x154>
    3584:	e2 fe       	sbrs	r14, 2
    3586:	42 c0       	rjmp	.+132    	; 0x360c <dtoa_prf+0x15c>
    3588:	aa 23       	and	r26, r26
    358a:	11 f4       	brne	.+4      	; 0x3590 <dtoa_prf+0xe0>
    358c:	23 e0       	ldi	r18, 0x03	; 3
    358e:	01 c0       	rjmp	.+2      	; 0x3592 <dtoa_prf+0xe2>
    3590:	24 e0       	ldi	r18, 0x04	; 4
    3592:	21 17       	cp	r18, r17
    3594:	10 f0       	brcs	.+4      	; 0x359a <dtoa_prf+0xea>
    3596:	20 e0       	ldi	r18, 0x00	; 0
    3598:	02 c0       	rjmp	.+4      	; 0x359e <dtoa_prf+0xee>
    359a:	12 1b       	sub	r17, r18
    359c:	21 2f       	mov	r18, r17
    359e:	eb 2c       	mov	r14, r11
    35a0:	b4 fe       	sbrs	r11, 4
    35a2:	02 c0       	rjmp	.+4      	; 0x35a8 <dtoa_prf+0xf8>
    35a4:	92 2f       	mov	r25, r18
    35a6:	0a c0       	rjmp	.+20     	; 0x35bc <dtoa_prf+0x10c>
    35a8:	f6 01       	movw	r30, r12
    35aa:	92 2f       	mov	r25, r18
    35ac:	80 e2       	ldi	r24, 0x20	; 32
    35ae:	02 c0       	rjmp	.+4      	; 0x35b4 <dtoa_prf+0x104>
    35b0:	81 93       	st	Z+, r24
    35b2:	91 50       	subi	r25, 0x01	; 1
    35b4:	99 23       	and	r25, r25
    35b6:	e1 f7       	brne	.-8      	; 0x35b0 <dtoa_prf+0x100>
    35b8:	c2 0e       	add	r12, r18
    35ba:	d1 1c       	adc	r13, r1
    35bc:	aa 23       	and	r26, r26
    35be:	19 f0       	breq	.+6      	; 0x35c6 <dtoa_prf+0x116>
    35c0:	f6 01       	movw	r30, r12
    35c2:	a1 93       	st	Z+, r26
    35c4:	6f 01       	movw	r12, r30
    35c6:	f6 01       	movw	r30, r12
    35c8:	31 96       	adiw	r30, 0x01	; 1
    35ca:	e2 fe       	sbrs	r14, 2
    35cc:	08 c0       	rjmp	.+16     	; 0x35de <dtoa_prf+0x12e>
    35ce:	89 e4       	ldi	r24, 0x49	; 73
    35d0:	d6 01       	movw	r26, r12
    35d2:	8c 93       	st	X, r24
    35d4:	8e e4       	ldi	r24, 0x4E	; 78
    35d6:	11 96       	adiw	r26, 0x01	; 1
    35d8:	8c 93       	st	X, r24
    35da:	86 e4       	ldi	r24, 0x46	; 70
    35dc:	07 c0       	rjmp	.+14     	; 0x35ec <dtoa_prf+0x13c>
    35de:	89 e6       	ldi	r24, 0x69	; 105
    35e0:	d6 01       	movw	r26, r12
    35e2:	8c 93       	st	X, r24
    35e4:	8e e6       	ldi	r24, 0x6E	; 110
    35e6:	11 96       	adiw	r26, 0x01	; 1
    35e8:	8c 93       	st	X, r24
    35ea:	86 e6       	ldi	r24, 0x66	; 102
    35ec:	81 83       	std	Z+1, r24	; 0x01
    35ee:	32 96       	adiw	r30, 0x02	; 2
    35f0:	df 01       	movw	r26, r30
    35f2:	89 2f       	mov	r24, r25
    35f4:	20 e2       	ldi	r18, 0x20	; 32
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <dtoa_prf+0x14c>
    35f8:	2d 93       	st	X+, r18
    35fa:	81 50       	subi	r24, 0x01	; 1
    35fc:	88 23       	and	r24, r24
    35fe:	e1 f7       	brne	.-8      	; 0x35f8 <dtoa_prf+0x148>
    3600:	e9 0f       	add	r30, r25
    3602:	f1 1d       	adc	r31, r1
    3604:	10 82       	st	Z, r1
    3606:	2e ef       	ldi	r18, 0xFE	; 254
    3608:	3f ef       	ldi	r19, 0xFF	; 255
    360a:	af c0       	rjmp	.+350    	; 0x376a <dtoa_prf+0x2ba>
    360c:	16 16       	cp	r1, r22
    360e:	17 06       	cpc	r1, r23
    3610:	1c f0       	brlt	.+6      	; 0x3618 <dtoa_prf+0x168>
    3612:	41 e0       	ldi	r20, 0x01	; 1
    3614:	50 e0       	ldi	r21, 0x00	; 0
    3616:	03 c0       	rjmp	.+6      	; 0x361e <dtoa_prf+0x16e>
    3618:	ab 01       	movw	r20, r22
    361a:	4f 5f       	subi	r20, 0xFF	; 255
    361c:	5f 4f       	sbci	r21, 0xFF	; 255
    361e:	aa 20       	and	r10, r10
    3620:	19 f4       	brne	.+6      	; 0x3628 <dtoa_prf+0x178>
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	03 c0       	rjmp	.+6      	; 0x362e <dtoa_prf+0x17e>
    3628:	8a 2d       	mov	r24, r10
    362a:	90 e0       	ldi	r25, 0x00	; 0
    362c:	01 96       	adiw	r24, 0x01	; 1
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	aa 23       	and	r26, r26
    3634:	11 f0       	breq	.+4      	; 0x363a <dtoa_prf+0x18a>
    3636:	21 e0       	ldi	r18, 0x01	; 1
    3638:	30 e0       	ldi	r19, 0x00	; 0
    363a:	24 0f       	add	r18, r20
    363c:	35 1f       	adc	r19, r21
    363e:	28 0f       	add	r18, r24
    3640:	39 1f       	adc	r19, r25
    3642:	81 2f       	mov	r24, r17
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	28 17       	cp	r18, r24
    3648:	39 07       	cpc	r19, r25
    364a:	14 f0       	brlt	.+4      	; 0x3650 <dtoa_prf+0x1a0>
    364c:	20 e0       	ldi	r18, 0x00	; 0
    364e:	02 c0       	rjmp	.+4      	; 0x3654 <dtoa_prf+0x1a4>
    3650:	12 1b       	sub	r17, r18
    3652:	21 2f       	mov	r18, r17
    3654:	4b 2d       	mov	r20, r11
    3656:	50 e0       	ldi	r21, 0x00	; 0
    3658:	ca 01       	movw	r24, r20
    365a:	80 71       	andi	r24, 0x10	; 16
    365c:	90 70       	andi	r25, 0x00	; 0
    365e:	b4 fc       	sbrc	r11, 4
    3660:	0d c0       	rjmp	.+26     	; 0x367c <dtoa_prf+0x1cc>
    3662:	b3 fc       	sbrc	r11, 3
    3664:	0b c0       	rjmp	.+22     	; 0x367c <dtoa_prf+0x1cc>
    3666:	f6 01       	movw	r30, r12
    3668:	32 2f       	mov	r19, r18
    366a:	40 e2       	ldi	r20, 0x20	; 32
    366c:	02 c0       	rjmp	.+4      	; 0x3672 <dtoa_prf+0x1c2>
    366e:	41 93       	st	Z+, r20
    3670:	31 50       	subi	r19, 0x01	; 1
    3672:	33 23       	and	r19, r19
    3674:	e1 f7       	brne	.-8      	; 0x366e <dtoa_prf+0x1be>
    3676:	c2 0e       	add	r12, r18
    3678:	d1 1c       	adc	r13, r1
    367a:	01 c0       	rjmp	.+2      	; 0x367e <dtoa_prf+0x1ce>
    367c:	32 2f       	mov	r19, r18
    367e:	aa 23       	and	r26, r26
    3680:	19 f0       	breq	.+6      	; 0x3688 <dtoa_prf+0x1d8>
    3682:	f6 01       	movw	r30, r12
    3684:	a1 93       	st	Z+, r26
    3686:	6f 01       	movw	r12, r30
    3688:	89 2b       	or	r24, r25
    368a:	11 f0       	breq	.+4      	; 0x3690 <dtoa_prf+0x1e0>
    368c:	13 2f       	mov	r17, r19
    368e:	0a c0       	rjmp	.+20     	; 0x36a4 <dtoa_prf+0x1f4>
    3690:	f6 01       	movw	r30, r12
    3692:	13 2f       	mov	r17, r19
    3694:	80 e3       	ldi	r24, 0x30	; 48
    3696:	02 c0       	rjmp	.+4      	; 0x369c <dtoa_prf+0x1ec>
    3698:	81 93       	st	Z+, r24
    369a:	11 50       	subi	r17, 0x01	; 1
    369c:	11 23       	and	r17, r17
    369e:	e1 f7       	brne	.-8      	; 0x3698 <dtoa_prf+0x1e8>
    36a0:	c3 0e       	add	r12, r19
    36a2:	d1 1c       	adc	r13, r1
    36a4:	09 2d       	mov	r16, r9
    36a6:	06 0f       	add	r16, r22
    36a8:	ba 80       	ldd	r11, Y+2	; 0x02
    36aa:	90 e1       	ldi	r25, 0x10	; 16
    36ac:	89 2e       	mov	r8, r25
    36ae:	91 2c       	mov	r9, r1
    36b0:	8e 20       	and	r8, r14
    36b2:	9f 20       	and	r9, r15
    36b4:	e4 fe       	sbrs	r14, 4
    36b6:	04 c0       	rjmp	.+8      	; 0x36c0 <dtoa_prf+0x210>
    36b8:	f1 e3       	ldi	r31, 0x31	; 49
    36ba:	bf 16       	cp	r11, r31
    36bc:	09 f4       	brne	.+2      	; 0x36c0 <dtoa_prf+0x210>
    36be:	01 50       	subi	r16, 0x01	; 1
    36c0:	10 16       	cp	r1, r16
    36c2:	14 f0       	brlt	.+4      	; 0x36c8 <dtoa_prf+0x218>
    36c4:	01 e0       	ldi	r16, 0x01	; 1
    36c6:	03 c0       	rjmp	.+6      	; 0x36ce <dtoa_prf+0x21e>
    36c8:	09 30       	cpi	r16, 0x09	; 9
    36ca:	08 f0       	brcs	.+2      	; 0x36ce <dtoa_prf+0x21e>
    36cc:	08 e0       	ldi	r16, 0x08	; 8
    36ce:	9b 01       	movw	r18, r22
    36d0:	77 ff       	sbrs	r23, 7
    36d2:	02 c0       	rjmp	.+4      	; 0x36d8 <dtoa_prf+0x228>
    36d4:	20 e0       	ldi	r18, 0x00	; 0
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	cb 01       	movw	r24, r22
    36da:	01 96       	adiw	r24, 0x01	; 1
    36dc:	82 1b       	sub	r24, r18
    36de:	93 0b       	sbc	r25, r19
    36e0:	fe 01       	movw	r30, r28
    36e2:	31 96       	adiw	r30, 0x01	; 1
    36e4:	e8 0f       	add	r30, r24
    36e6:	f9 1f       	adc	r31, r25
    36e8:	8e e2       	ldi	r24, 0x2E	; 46
    36ea:	f8 2e       	mov	r15, r24
    36ec:	3b 01       	movw	r6, r22
    36ee:	60 1a       	sub	r6, r16
    36f0:	71 08       	sbc	r7, r1
    36f2:	8a 2d       	mov	r24, r10
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	44 27       	eor	r20, r20
    36f8:	55 27       	eor	r21, r21
    36fa:	48 1b       	sub	r20, r24
    36fc:	59 0b       	sbc	r21, r25
    36fe:	8f ef       	ldi	r24, 0xFF	; 255
    3700:	2f 3f       	cpi	r18, 0xFF	; 255
    3702:	38 07       	cpc	r19, r24
    3704:	19 f4       	brne	.+6      	; 0x370c <dtoa_prf+0x25c>
    3706:	d6 01       	movw	r26, r12
    3708:	fd 92       	st	X+, r15
    370a:	6d 01       	movw	r12, r26
    370c:	62 17       	cp	r22, r18
    370e:	73 07       	cpc	r23, r19
    3710:	2c f0       	brlt	.+10     	; 0x371c <dtoa_prf+0x26c>
    3712:	62 16       	cp	r6, r18
    3714:	73 06       	cpc	r7, r19
    3716:	14 f4       	brge	.+4      	; 0x371c <dtoa_prf+0x26c>
    3718:	80 81       	ld	r24, Z
    371a:	01 c0       	rjmp	.+2      	; 0x371e <dtoa_prf+0x26e>
    371c:	80 e3       	ldi	r24, 0x30	; 48
    371e:	21 50       	subi	r18, 0x01	; 1
    3720:	30 40       	sbci	r19, 0x00	; 0
    3722:	31 96       	adiw	r30, 0x01	; 1
    3724:	24 17       	cp	r18, r20
    3726:	35 07       	cpc	r19, r21
    3728:	24 f0       	brlt	.+8      	; 0x3732 <dtoa_prf+0x282>
    372a:	d6 01       	movw	r26, r12
    372c:	8d 93       	st	X+, r24
    372e:	6d 01       	movw	r12, r26
    3730:	e6 cf       	rjmp	.-52     	; 0x36fe <dtoa_prf+0x24e>
    3732:	26 17       	cp	r18, r22
    3734:	37 07       	cpc	r19, r23
    3736:	49 f4       	brne	.+18     	; 0x374a <dtoa_prf+0x29a>
    3738:	b5 e3       	ldi	r27, 0x35	; 53
    373a:	bb 15       	cp	r27, r11
    373c:	28 f0       	brcs	.+10     	; 0x3748 <dtoa_prf+0x298>
    373e:	bb 16       	cp	r11, r27
    3740:	21 f4       	brne	.+8      	; 0x374a <dtoa_prf+0x29a>
    3742:	81 14       	cp	r8, r1
    3744:	91 04       	cpc	r9, r1
    3746:	09 f4       	brne	.+2      	; 0x374a <dtoa_prf+0x29a>
    3748:	81 e3       	ldi	r24, 0x31	; 49
    374a:	f6 01       	movw	r30, r12
    374c:	81 93       	st	Z+, r24
    374e:	d6 01       	movw	r26, r12
    3750:	81 2f       	mov	r24, r17
    3752:	90 e2       	ldi	r25, 0x20	; 32
    3754:	02 c0       	rjmp	.+4      	; 0x375a <dtoa_prf+0x2aa>
    3756:	9c 93       	st	X, r25
    3758:	81 50       	subi	r24, 0x01	; 1
    375a:	11 96       	adiw	r26, 0x01	; 1
    375c:	88 23       	and	r24, r24
    375e:	d9 f7       	brne	.-10     	; 0x3756 <dtoa_prf+0x2a6>
    3760:	e1 0f       	add	r30, r17
    3762:	f1 1d       	adc	r31, r1
    3764:	10 82       	st	Z, r1
    3766:	20 e0       	ldi	r18, 0x00	; 0
    3768:	30 e0       	ldi	r19, 0x00	; 0
    376a:	c9 01       	movw	r24, r18
    376c:	29 96       	adiw	r28, 0x09	; 9
    376e:	ee e0       	ldi	r30, 0x0E	; 14
    3770:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__epilogue_restores__+0x8>

00003774 <__ftoa_engine>:
    3774:	28 30       	cpi	r18, 0x08	; 8
    3776:	08 f0       	brcs	.+2      	; 0x377a <__ftoa_engine+0x6>
    3778:	27 e0       	ldi	r18, 0x07	; 7
    377a:	33 27       	eor	r19, r19
    377c:	da 01       	movw	r26, r20
    377e:	99 0f       	add	r25, r25
    3780:	31 1d       	adc	r19, r1
    3782:	87 fd       	sbrc	r24, 7
    3784:	91 60       	ori	r25, 0x01	; 1
    3786:	00 96       	adiw	r24, 0x00	; 0
    3788:	61 05       	cpc	r22, r1
    378a:	71 05       	cpc	r23, r1
    378c:	39 f4       	brne	.+14     	; 0x379c <__ftoa_engine+0x28>
    378e:	32 60       	ori	r19, 0x02	; 2
    3790:	2e 5f       	subi	r18, 0xFE	; 254
    3792:	3d 93       	st	X+, r19
    3794:	30 e3       	ldi	r19, 0x30	; 48
    3796:	2a 95       	dec	r18
    3798:	e1 f7       	brne	.-8      	; 0x3792 <__ftoa_engine+0x1e>
    379a:	08 95       	ret
    379c:	9f 3f       	cpi	r25, 0xFF	; 255
    379e:	30 f0       	brcs	.+12     	; 0x37ac <__ftoa_engine+0x38>
    37a0:	80 38       	cpi	r24, 0x80	; 128
    37a2:	71 05       	cpc	r23, r1
    37a4:	61 05       	cpc	r22, r1
    37a6:	09 f0       	breq	.+2      	; 0x37aa <__ftoa_engine+0x36>
    37a8:	3c 5f       	subi	r19, 0xFC	; 252
    37aa:	3c 5f       	subi	r19, 0xFC	; 252
    37ac:	3d 93       	st	X+, r19
    37ae:	91 30       	cpi	r25, 0x01	; 1
    37b0:	08 f0       	brcs	.+2      	; 0x37b4 <__ftoa_engine+0x40>
    37b2:	80 68       	ori	r24, 0x80	; 128
    37b4:	91 1d       	adc	r25, r1
    37b6:	df 93       	push	r29
    37b8:	cf 93       	push	r28
    37ba:	1f 93       	push	r17
    37bc:	0f 93       	push	r16
    37be:	ff 92       	push	r15
    37c0:	ef 92       	push	r14
    37c2:	19 2f       	mov	r17, r25
    37c4:	98 7f       	andi	r25, 0xF8	; 248
    37c6:	96 95       	lsr	r25
    37c8:	e9 2f       	mov	r30, r25
    37ca:	96 95       	lsr	r25
    37cc:	96 95       	lsr	r25
    37ce:	e9 0f       	add	r30, r25
    37d0:	ff 27       	eor	r31, r31
    37d2:	e2 55       	subi	r30, 0x52	; 82
    37d4:	ff 4f       	sbci	r31, 0xFF	; 255
    37d6:	99 27       	eor	r25, r25
    37d8:	33 27       	eor	r19, r19
    37da:	ee 24       	eor	r14, r14
    37dc:	ff 24       	eor	r15, r15
    37de:	a7 01       	movw	r20, r14
    37e0:	e7 01       	movw	r28, r14
    37e2:	05 90       	lpm	r0, Z+
    37e4:	08 94       	sec
    37e6:	07 94       	ror	r0
    37e8:	28 f4       	brcc	.+10     	; 0x37f4 <__ftoa_engine+0x80>
    37ea:	36 0f       	add	r19, r22
    37ec:	e7 1e       	adc	r14, r23
    37ee:	f8 1e       	adc	r15, r24
    37f0:	49 1f       	adc	r20, r25
    37f2:	51 1d       	adc	r21, r1
    37f4:	66 0f       	add	r22, r22
    37f6:	77 1f       	adc	r23, r23
    37f8:	88 1f       	adc	r24, r24
    37fa:	99 1f       	adc	r25, r25
    37fc:	06 94       	lsr	r0
    37fe:	a1 f7       	brne	.-24     	; 0x37e8 <__ftoa_engine+0x74>
    3800:	05 90       	lpm	r0, Z+
    3802:	07 94       	ror	r0
    3804:	28 f4       	brcc	.+10     	; 0x3810 <__ftoa_engine+0x9c>
    3806:	e7 0e       	add	r14, r23
    3808:	f8 1e       	adc	r15, r24
    380a:	49 1f       	adc	r20, r25
    380c:	56 1f       	adc	r21, r22
    380e:	c1 1d       	adc	r28, r1
    3810:	77 0f       	add	r23, r23
    3812:	88 1f       	adc	r24, r24
    3814:	99 1f       	adc	r25, r25
    3816:	66 1f       	adc	r22, r22
    3818:	06 94       	lsr	r0
    381a:	a1 f7       	brne	.-24     	; 0x3804 <__ftoa_engine+0x90>
    381c:	05 90       	lpm	r0, Z+
    381e:	07 94       	ror	r0
    3820:	28 f4       	brcc	.+10     	; 0x382c <__ftoa_engine+0xb8>
    3822:	f8 0e       	add	r15, r24
    3824:	49 1f       	adc	r20, r25
    3826:	56 1f       	adc	r21, r22
    3828:	c7 1f       	adc	r28, r23
    382a:	d1 1d       	adc	r29, r1
    382c:	88 0f       	add	r24, r24
    382e:	99 1f       	adc	r25, r25
    3830:	66 1f       	adc	r22, r22
    3832:	77 1f       	adc	r23, r23
    3834:	06 94       	lsr	r0
    3836:	a1 f7       	brne	.-24     	; 0x3820 <__ftoa_engine+0xac>
    3838:	05 90       	lpm	r0, Z+
    383a:	07 94       	ror	r0
    383c:	20 f4       	brcc	.+8      	; 0x3846 <__ftoa_engine+0xd2>
    383e:	49 0f       	add	r20, r25
    3840:	56 1f       	adc	r21, r22
    3842:	c7 1f       	adc	r28, r23
    3844:	d8 1f       	adc	r29, r24
    3846:	99 0f       	add	r25, r25
    3848:	66 1f       	adc	r22, r22
    384a:	77 1f       	adc	r23, r23
    384c:	88 1f       	adc	r24, r24
    384e:	06 94       	lsr	r0
    3850:	a9 f7       	brne	.-22     	; 0x383c <__ftoa_engine+0xc8>
    3852:	84 91       	lpm	r24, Z+
    3854:	10 95       	com	r17
    3856:	17 70       	andi	r17, 0x07	; 7
    3858:	41 f0       	breq	.+16     	; 0x386a <__ftoa_engine+0xf6>
    385a:	d6 95       	lsr	r29
    385c:	c7 95       	ror	r28
    385e:	57 95       	ror	r21
    3860:	47 95       	ror	r20
    3862:	f7 94       	ror	r15
    3864:	e7 94       	ror	r14
    3866:	1a 95       	dec	r17
    3868:	c1 f7       	brne	.-16     	; 0x385a <__ftoa_engine+0xe6>
    386a:	e4 e5       	ldi	r30, 0x54	; 84
    386c:	f0 e0       	ldi	r31, 0x00	; 0
    386e:	68 94       	set
    3870:	15 90       	lpm	r1, Z+
    3872:	15 91       	lpm	r17, Z+
    3874:	35 91       	lpm	r19, Z+
    3876:	65 91       	lpm	r22, Z+
    3878:	95 91       	lpm	r25, Z+
    387a:	05 90       	lpm	r0, Z+
    387c:	7f e2       	ldi	r23, 0x2F	; 47
    387e:	73 95       	inc	r23
    3880:	e1 18       	sub	r14, r1
    3882:	f1 0a       	sbc	r15, r17
    3884:	43 0b       	sbc	r20, r19
    3886:	56 0b       	sbc	r21, r22
    3888:	c9 0b       	sbc	r28, r25
    388a:	d0 09       	sbc	r29, r0
    388c:	c0 f7       	brcc	.-16     	; 0x387e <__ftoa_engine+0x10a>
    388e:	e1 0c       	add	r14, r1
    3890:	f1 1e       	adc	r15, r17
    3892:	43 1f       	adc	r20, r19
    3894:	56 1f       	adc	r21, r22
    3896:	c9 1f       	adc	r28, r25
    3898:	d0 1d       	adc	r29, r0
    389a:	7e f4       	brtc	.+30     	; 0x38ba <__ftoa_engine+0x146>
    389c:	70 33       	cpi	r23, 0x30	; 48
    389e:	11 f4       	brne	.+4      	; 0x38a4 <__ftoa_engine+0x130>
    38a0:	8a 95       	dec	r24
    38a2:	e6 cf       	rjmp	.-52     	; 0x3870 <__ftoa_engine+0xfc>
    38a4:	e8 94       	clt
    38a6:	01 50       	subi	r16, 0x01	; 1
    38a8:	30 f0       	brcs	.+12     	; 0x38b6 <__ftoa_engine+0x142>
    38aa:	08 0f       	add	r16, r24
    38ac:	0a f4       	brpl	.+2      	; 0x38b0 <__ftoa_engine+0x13c>
    38ae:	00 27       	eor	r16, r16
    38b0:	02 17       	cp	r16, r18
    38b2:	08 f4       	brcc	.+2      	; 0x38b6 <__ftoa_engine+0x142>
    38b4:	20 2f       	mov	r18, r16
    38b6:	23 95       	inc	r18
    38b8:	02 2f       	mov	r16, r18
    38ba:	7a 33       	cpi	r23, 0x3A	; 58
    38bc:	28 f0       	brcs	.+10     	; 0x38c8 <__ftoa_engine+0x154>
    38be:	79 e3       	ldi	r23, 0x39	; 57
    38c0:	7d 93       	st	X+, r23
    38c2:	2a 95       	dec	r18
    38c4:	e9 f7       	brne	.-6      	; 0x38c0 <__ftoa_engine+0x14c>
    38c6:	10 c0       	rjmp	.+32     	; 0x38e8 <__ftoa_engine+0x174>
    38c8:	7d 93       	st	X+, r23
    38ca:	2a 95       	dec	r18
    38cc:	89 f6       	brne	.-94     	; 0x3870 <__ftoa_engine+0xfc>
    38ce:	06 94       	lsr	r0
    38d0:	97 95       	ror	r25
    38d2:	67 95       	ror	r22
    38d4:	37 95       	ror	r19
    38d6:	17 95       	ror	r17
    38d8:	17 94       	ror	r1
    38da:	e1 18       	sub	r14, r1
    38dc:	f1 0a       	sbc	r15, r17
    38de:	43 0b       	sbc	r20, r19
    38e0:	56 0b       	sbc	r21, r22
    38e2:	c9 0b       	sbc	r28, r25
    38e4:	d0 09       	sbc	r29, r0
    38e6:	98 f0       	brcs	.+38     	; 0x390e <__ftoa_engine+0x19a>
    38e8:	23 95       	inc	r18
    38ea:	7e 91       	ld	r23, -X
    38ec:	73 95       	inc	r23
    38ee:	7a 33       	cpi	r23, 0x3A	; 58
    38f0:	08 f0       	brcs	.+2      	; 0x38f4 <__ftoa_engine+0x180>
    38f2:	70 e3       	ldi	r23, 0x30	; 48
    38f4:	7c 93       	st	X, r23
    38f6:	20 13       	cpse	r18, r16
    38f8:	b8 f7       	brcc	.-18     	; 0x38e8 <__ftoa_engine+0x174>
    38fa:	7e 91       	ld	r23, -X
    38fc:	70 61       	ori	r23, 0x10	; 16
    38fe:	7d 93       	st	X+, r23
    3900:	30 f0       	brcs	.+12     	; 0x390e <__ftoa_engine+0x19a>
    3902:	83 95       	inc	r24
    3904:	71 e3       	ldi	r23, 0x31	; 49
    3906:	7d 93       	st	X+, r23
    3908:	70 e3       	ldi	r23, 0x30	; 48
    390a:	2a 95       	dec	r18
    390c:	e1 f7       	brne	.-8      	; 0x3906 <__ftoa_engine+0x192>
    390e:	11 24       	eor	r1, r1
    3910:	ef 90       	pop	r14
    3912:	ff 90       	pop	r15
    3914:	0f 91       	pop	r16
    3916:	1f 91       	pop	r17
    3918:	cf 91       	pop	r28
    391a:	df 91       	pop	r29
    391c:	99 27       	eor	r25, r25
    391e:	87 fd       	sbrc	r24, 7
    3920:	90 95       	com	r25
    3922:	08 95       	ret

00003924 <_exit>:
    3924:	f8 94       	cli

00003926 <__stop_program>:
    3926:	ff cf       	rjmp	.-2      	; 0x3926 <__stop_program>
