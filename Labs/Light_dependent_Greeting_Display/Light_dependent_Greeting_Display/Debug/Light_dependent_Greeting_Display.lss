
Light_dependent_Greeting_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fa0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00002fa0  00003034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000a8  008000a8  0000307c  2**0
                  ALLOC
  3 .stab         0000243c  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e4c  00000000  00000000  000054b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000065f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008638  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009739  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000aafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b38c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ea       	ldi	r30, 0xA0	; 160
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3a       	cpi	r26, 0xAB	; 171
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8f 16 	call	0x2d1e	; 0x2d1e <main>
      8a:	0c 94 ce 17 	jmp	0x2f9c	; 0x2f9c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e8       	ldi	r22, 0x8F	; 143
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bb 17 	jmp	0x2f76	; 0x2f76 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a3 17 	jmp	0x2f46	; 0x2f46 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:

/* ADC busy Flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	   4- Select CLK/64
	   5- Enable ADC
	    */
	//1- Select Vref = AVCC
#if ADC_u8_VREF_OPTION == ADC_u8_VREF_AVCC
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
#endif

	//2- Right Adjust
#if ADC_u8_ADJUST_OPTION == ADC_u8_RIGHT_ADJUST
	CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,5);
#endif

	//3- Disable AutoTrigger
#if ADC_u8_AUTO_TRIGGER_MODE == ADC_u8_AUTO_TRIGGER_DISABLE
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
	#endif
#endif

	//4- Select CLK/64
#if ADC_u8_PRESCALER == ADC_u8_PRESCALER_64
	SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
	SET_BIT(ADC_u8_ADCSRA_REG,0);
#endif

	//5- Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 *Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32)  && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     d48:	65 c0       	rjmp	.+202    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     d52:	60 c0       	rjmp	.+192    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     d54:	80 91 aa 00 	lds	r24, 0x00AA
     d58:	88 23       	and	r24, r24
     d5a:	09 f0       	breq	.+2      	; 0xd5e <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
     d5c:	5b c0       	rjmp	.+182    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 aa 00 	sts	0x00AA, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d64:	a7 e2       	ldi	r26, 0x27	; 39
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e2       	ldi	r30, 0x27	; 39
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 7e       	andi	r24, 0xE0	; 224
     d70:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     d72:	a7 e2       	ldi	r26, 0x27	; 39
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e2       	ldi	r30, 0x27	; 39
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	90 81       	ld	r25, Z
     d7c:	8e 81       	ldd	r24, Y+6	; 0x06
     d7e:	89 2b       	or	r24, r25
     d80:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d82:	a6 e2       	ldi	r26, 0x26	; 38
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e6 e2       	ldi	r30, 0x26	; 38
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 64       	ori	r24, 0x40	; 64
     d8e:	8c 93       	st	X, r24
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <ADC_u8GetDigitalValueSynchNonBlocking+0x8c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	ab 81       	ldd	r26, Y+3	; 0x03
     d98:	bc 81       	ldd	r27, Y+4	; 0x04
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	a1 1d       	adc	r26, r1
     d9e:	b1 1d       	adc	r27, r1
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	ab 83       	std	Y+3, r26	; 0x03
     da6:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     da8:	e6 e2       	ldi	r30, 0x26	; 38
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	82 95       	swap	r24
     db0:	8f 70       	andi	r24, 0x0F	; 15
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	90 70       	andi	r25, 0x00	; 0
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	61 f4       	brne	.+24     	; 0xdd6 <ADC_u8GetDigitalValueSynchNonBlocking+0xba>
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	ab 81       	ldd	r26, Y+3	; 0x03
     dc4:	bc 81       	ldd	r27, Y+4	; 0x04
     dc6:	80 35       	cpi	r24, 0x50	; 80
     dc8:	23 ec       	ldi	r18, 0xC3	; 195
     dca:	92 07       	cpc	r25, r18
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	a2 07       	cpc	r26, r18
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	b2 07       	cpc	r27, r18
     dd4:	f0 f2       	brcs	.-68     	; 0xd92 <ADC_u8GetDigitalValueSynchNonBlocking+0x76>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 95       	swap	r24
     dde:	8f 70       	andi	r24, 0x0F	; 15
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	91 f0       	breq	.+36     	; 0xe10 <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
		{
			/* Clear Flag */
			ADC_u8BusyFlag = 0;
     dec:	10 92 aa 00 	sts	0x00AA, r1
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     df0:	a6 e2       	ldi	r26, 0x26	; 38
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e6 e2       	ldi	r30, 0x26	; 38
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 61       	ori	r24, 0x10	; 16
     dfc:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     dfe:	e4 e2       	ldi	r30, 0x24	; 36
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	ef 81       	ldd	r30, Y+7	; 0x07
     e08:	f8 85       	ldd	r31, Y+8	; 0x08
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     e10:	1d 82       	std	Y+5, r1	; 0x05
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e14:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e18:	28 96       	adiw	r28, 0x08	; 8
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <ADC_u8GetDigitalValueAsynch>:


u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb, void (*Copy_pfNotification) (u16))
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <ADC_u8GetDigitalValueAsynch+0x6>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <ADC_u8GetDigitalValueAsynch+0x8>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	7c 83       	std	Y+4, r23	; 0x04
     e3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32)  && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	80 32       	cpi	r24, 0x20	; 32
     e44:	78 f5       	brcc	.+94     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	59 f1       	breq	.+86     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
     e4e:	80 91 aa 00 	lds	r24, 0x00AA
     e52:	88 23       	and	r24, r24
     e54:	39 f5       	brne	.+78     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 aa 00 	sts	0x00AA, r24
		/* Update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	90 93 a9 00 	sts	0x00A9, r25
     e64:	80 93 a8 00 	sts	0x00A8, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e68:	a6 e2       	ldi	r26, 0x26	; 38
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e6 e2       	ldi	r30, 0x26	; 38
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	88 60       	ori	r24, 0x08	; 8
     e74:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e76:	a7 e2       	ldi	r26, 0x27	; 39
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e2       	ldi	r30, 0x27	; 39
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 7e       	andi	r24, 0xE0	; 224
     e82:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     e84:	a7 e2       	ldi	r26, 0x27	; 39
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e2       	ldi	r30, 0x27	; 39
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	90 81       	ld	r25, Z
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	89 2b       	or	r24, r25
     e92:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e94:	a6 e2       	ldi	r26, 0x26	; 38
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	8c 93       	st	X, r24
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ea4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <ADC_u8GetADCRegValue>:
u8 ADC_u8GetADCRegValue (u16 * Copy_pu16ADCValue)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <ADC_u8GetADCRegValue+0x6>
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	9b 83       	std	Y+3, r25	; 0x03
     ec4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	9b 81       	ldd	r25, Y+3	; 0x03
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	49 f0       	breq	.+18     	; 0xee4 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
     ed2:	e4 e2       	ldi	r30, 0x24	; 36
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	ea 81       	ldd	r30, Y+2	; 0x02
     edc:	fb 81       	ldd	r31, Y+3	; 0x03
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	2f 93       	push	r18
     f00:	3f 93       	push	r19
     f02:	4f 93       	push	r20
     f04:	5f 93       	push	r21
     f06:	6f 93       	push	r22
     f08:	7f 93       	push	r23
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	af 93       	push	r26
     f10:	bf 93       	push	r27
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     f1e:	80 91 a8 00 	lds	r24, 0x00A8
     f22:	90 91 a9 00 	lds	r25, 0x00A9
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	99 f0       	breq	.+38     	; 0xf50 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
     f2a:	10 92 aa 00 	sts	0x00AA, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     f2e:	a6 e2       	ldi	r26, 0x26	; 38
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 e2       	ldi	r30, 0x26	; 38
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     f3c:	20 91 a8 00 	lds	r18, 0x00A8
     f40:	30 91 a9 00 	lds	r19, 0x00A9
     f44:	e4 e2       	ldi	r30, 0x24	; 36
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	f9 01       	movw	r30, r18
     f4e:	09 95       	icall
	}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     f7e:	ea e3       	ldi	r30, 0x3A	; 58
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	87 e0       	ldi	r24, 0x07	; 7
     f8a:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     f92:	e1 e3       	ldi	r30, 0x31	; 49
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     f9a:	eb e3       	ldi	r30, 0x3B	; 59
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     fa0:	e8 e3       	ldi	r30, 0x38	; 56
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     fa6:	e5 e3       	ldi	r30, 0x35	; 53
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     fac:	e2 e3       	ldi	r30, 0x32	; 50
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	10 82       	st	Z, r1

}
     fb2:	cf 91       	pop	r28
     fb4:	df 91       	pop	r29
     fb6:	08 95       	ret

00000fb8 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     fb8:	df 93       	push	r29
     fba:	cf 93       	push	r28
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	2e 97       	sbiw	r28, 0x0e	; 14
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	8a 83       	std	Y+2, r24	; 0x02
     fce:	6b 83       	std	Y+3, r22	; 0x03
     fd0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	84 30       	cpi	r24, 0x04	; 4
     fda:	08 f0       	brcs	.+2      	; 0xfde <DIO_u8SetPinDirection+0x26>
     fdc:	0d c1       	rjmp	.+538    	; 0x11f8 <DIO_u8SetPinDirection+0x240>
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	88 30       	cpi	r24, 0x08	; 8
     fe2:	08 f0       	brcs	.+2      	; 0xfe6 <DIO_u8SetPinDirection+0x2e>
     fe4:	09 c1       	rjmp	.+530    	; 0x11f8 <DIO_u8SetPinDirection+0x240>
     fe6:	8c 81       	ldd	r24, Y+4	; 0x04
     fe8:	88 23       	and	r24, r24
     fea:	21 f0       	breq	.+8      	; 0xff4 <DIO_u8SetPinDirection+0x3c>
     fec:	8c 81       	ldd	r24, Y+4	; 0x04
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <DIO_u8SetPinDirection+0x3c>
     ff2:	02 c1       	rjmp	.+516    	; 0x11f8 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3e 87       	std	Y+14, r19	; 0x0e
     ffc:	2d 87       	std	Y+13, r18	; 0x0d
     ffe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1000:	9e 85       	ldd	r25, Y+14	; 0x0e
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	91 05       	cpc	r25, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <DIO_u8SetPinDirection+0x52>
    1008:	4f c0       	rjmp	.+158    	; 0x10a8 <DIO_u8SetPinDirection+0xf0>
    100a:	2d 85       	ldd	r18, Y+13	; 0x0d
    100c:	3e 85       	ldd	r19, Y+14	; 0x0e
    100e:	22 30       	cpi	r18, 0x02	; 2
    1010:	31 05       	cpc	r19, r1
    1012:	2c f4       	brge	.+10     	; 0x101e <DIO_u8SetPinDirection+0x66>
    1014:	8d 85       	ldd	r24, Y+13	; 0x0d
    1016:	9e 85       	ldd	r25, Y+14	; 0x0e
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	71 f0       	breq	.+28     	; 0x1038 <DIO_u8SetPinDirection+0x80>
    101c:	ee c0       	rjmp	.+476    	; 0x11fa <DIO_u8SetPinDirection+0x242>
    101e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1020:	3e 85       	ldd	r19, Y+14	; 0x0e
    1022:	22 30       	cpi	r18, 0x02	; 2
    1024:	31 05       	cpc	r19, r1
    1026:	09 f4       	brne	.+2      	; 0x102a <DIO_u8SetPinDirection+0x72>
    1028:	77 c0       	rjmp	.+238    	; 0x1118 <DIO_u8SetPinDirection+0x160>
    102a:	8d 85       	ldd	r24, Y+13	; 0x0d
    102c:	9e 85       	ldd	r25, Y+14	; 0x0e
    102e:	83 30       	cpi	r24, 0x03	; 3
    1030:	91 05       	cpc	r25, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <DIO_u8SetPinDirection+0x7e>
    1034:	a9 c0       	rjmp	.+338    	; 0x1188 <DIO_u8SetPinDirection+0x1d0>
    1036:	e1 c0       	rjmp	.+450    	; 0x11fa <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	3c 87       	std	Y+12, r19	; 0x0c
    1040:	2b 87       	std	Y+11, r18	; 0x0b
    1042:	8b 85       	ldd	r24, Y+11	; 0x0b
    1044:	9c 85       	ldd	r25, Y+12	; 0x0c
    1046:	00 97       	sbiw	r24, 0x00	; 0
    1048:	31 f0       	breq	.+12     	; 0x1056 <DIO_u8SetPinDirection+0x9e>
    104a:	2b 85       	ldd	r18, Y+11	; 0x0b
    104c:	3c 85       	ldd	r19, Y+12	; 0x0c
    104e:	21 30       	cpi	r18, 0x01	; 1
    1050:	31 05       	cpc	r19, r1
    1052:	b1 f0       	breq	.+44     	; 0x1080 <DIO_u8SetPinDirection+0xc8>
    1054:	d2 c0       	rjmp	.+420    	; 0x11fa <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    1056:	aa e3       	ldi	r26, 0x3A	; 58
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	ea e3       	ldi	r30, 0x3A	; 58
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	48 2f       	mov	r20, r24
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	28 2f       	mov	r18, r24
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	02 2e       	mov	r0, r18
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_u8SetPinDirection+0xbc>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	0a 94       	dec	r0
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_u8SetPinDirection+0xb8>
    1078:	80 95       	com	r24
    107a:	84 23       	and	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	bd c0       	rjmp	.+378    	; 0x11fa <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    1080:	aa e3       	ldi	r26, 0x3A	; 58
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	48 2f       	mov	r20, r24
    108c:	8b 81       	ldd	r24, Y+3	; 0x03
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_u8SetPinDirection+0xe6>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_u8SetPinDirection+0xe2>
    10a2:	84 2b       	or	r24, r20
    10a4:	8c 93       	st	X, r24
    10a6:	a9 c0       	rjmp	.+338    	; 0x11fa <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	3a 87       	std	Y+10, r19	; 0x0a
    10b0:	29 87       	std	Y+9, r18	; 0x09
    10b2:	89 85       	ldd	r24, Y+9	; 0x09
    10b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b6:	00 97       	sbiw	r24, 0x00	; 0
    10b8:	31 f0       	breq	.+12     	; 0x10c6 <DIO_u8SetPinDirection+0x10e>
    10ba:	29 85       	ldd	r18, Y+9	; 0x09
    10bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    10be:	21 30       	cpi	r18, 0x01	; 1
    10c0:	31 05       	cpc	r19, r1
    10c2:	b1 f0       	breq	.+44     	; 0x10f0 <DIO_u8SetPinDirection+0x138>
    10c4:	9a c0       	rjmp	.+308    	; 0x11fa <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10c6:	a7 e3       	ldi	r26, 0x37	; 55
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e7 e3       	ldi	r30, 0x37	; 55
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_u8SetPinDirection+0x12c>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_u8SetPinDirection+0x128>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	85 c0       	rjmp	.+266    	; 0x11fa <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10f0:	a7 e3       	ldi	r26, 0x37	; 55
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e7 e3       	ldi	r30, 0x37	; 55
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_u8SetPinDirection+0x156>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_u8SetPinDirection+0x152>
    1112:	84 2b       	or	r24, r20
    1114:	8c 93       	st	X, r24
    1116:	71 c0       	rjmp	.+226    	; 0x11fa <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	38 87       	std	Y+8, r19	; 0x08
    1120:	2f 83       	std	Y+7, r18	; 0x07
    1122:	8f 81       	ldd	r24, Y+7	; 0x07
    1124:	98 85       	ldd	r25, Y+8	; 0x08
    1126:	00 97       	sbiw	r24, 0x00	; 0
    1128:	31 f0       	breq	.+12     	; 0x1136 <DIO_u8SetPinDirection+0x17e>
    112a:	2f 81       	ldd	r18, Y+7	; 0x07
    112c:	38 85       	ldd	r19, Y+8	; 0x08
    112e:	21 30       	cpi	r18, 0x01	; 1
    1130:	31 05       	cpc	r19, r1
    1132:	b1 f0       	breq	.+44     	; 0x1160 <DIO_u8SetPinDirection+0x1a8>
    1134:	62 c0       	rjmp	.+196    	; 0x11fa <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    1136:	a4 e3       	ldi	r26, 0x34	; 52
    1138:	b0 e0       	ldi	r27, 0x00	; 0
    113a:	e4 e3       	ldi	r30, 0x34	; 52
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	48 2f       	mov	r20, r24
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	02 2e       	mov	r0, r18
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <DIO_u8SetPinDirection+0x19c>
    1150:	88 0f       	add	r24, r24
    1152:	99 1f       	adc	r25, r25
    1154:	0a 94       	dec	r0
    1156:	e2 f7       	brpl	.-8      	; 0x1150 <DIO_u8SetPinDirection+0x198>
    1158:	80 95       	com	r24
    115a:	84 23       	and	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	4d c0       	rjmp	.+154    	; 0x11fa <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    1160:	a4 e3       	ldi	r26, 0x34	; 52
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e4 e3       	ldi	r30, 0x34	; 52
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <DIO_u8SetPinDirection+0x1c6>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <DIO_u8SetPinDirection+0x1c2>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	39 c0       	rjmp	.+114    	; 0x11fa <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3e 83       	std	Y+6, r19	; 0x06
    1190:	2d 83       	std	Y+5, r18	; 0x05
    1192:	8d 81       	ldd	r24, Y+5	; 0x05
    1194:	9e 81       	ldd	r25, Y+6	; 0x06
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	31 f0       	breq	.+12     	; 0x11a6 <DIO_u8SetPinDirection+0x1ee>
    119a:	2d 81       	ldd	r18, Y+5	; 0x05
    119c:	3e 81       	ldd	r19, Y+6	; 0x06
    119e:	21 30       	cpi	r18, 0x01	; 1
    11a0:	31 05       	cpc	r19, r1
    11a2:	b1 f0       	breq	.+44     	; 0x11d0 <DIO_u8SetPinDirection+0x218>
    11a4:	2a c0       	rjmp	.+84     	; 0x11fa <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    11a6:	a1 e3       	ldi	r26, 0x31	; 49
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e1 e3       	ldi	r30, 0x31	; 49
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8b 81       	ldd	r24, Y+3	; 0x03
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_u8SetPinDirection+0x20c>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_u8SetPinDirection+0x208>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	15 c0       	rjmp	.+42     	; 0x11fa <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    11d0:	a1 e3       	ldi	r26, 0x31	; 49
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	e1 e3       	ldi	r30, 0x31	; 49
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	48 2f       	mov	r20, r24
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	02 2e       	mov	r0, r18
    11e8:	02 c0       	rjmp	.+4      	; 0x11ee <DIO_u8SetPinDirection+0x236>
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	0a 94       	dec	r0
    11f0:	e2 f7       	brpl	.-8      	; 0x11ea <DIO_u8SetPinDirection+0x232>
    11f2:	84 2b       	or	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	01 c0       	rjmp	.+2      	; 0x11fa <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    11f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fc:	2e 96       	adiw	r28, 0x0e	; 14
    11fe:	0f b6       	in	r0, 0x3f	; 63
    1200:	f8 94       	cli
    1202:	de bf       	out	0x3e, r29	; 62
    1204:	0f be       	out	0x3f, r0	; 63
    1206:	cd bf       	out	0x3d, r28	; 61
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	2e 97       	sbiw	r28, 0x0e	; 14
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	de bf       	out	0x3e, r29	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	cd bf       	out	0x3d, r28	; 61
    1222:	8a 83       	std	Y+2, r24	; 0x02
    1224:	6b 83       	std	Y+3, r22	; 0x03
    1226:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	88 30       	cpi	r24, 0x08	; 8
    1230:	08 f0       	brcs	.+2      	; 0x1234 <DIO_u8SetPinValue+0x26>
    1232:	0c c1       	rjmp	.+536    	; 0x144c <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
    1234:	8a 81       	ldd	r24, Y+2	; 0x02
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	3e 87       	std	Y+14, r19	; 0x0e
    123c:	2d 87       	std	Y+13, r18	; 0x0d
    123e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1240:	9e 85       	ldd	r25, Y+14	; 0x0e
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	09 f4       	brne	.+2      	; 0x124a <DIO_u8SetPinValue+0x3c>
    1248:	51 c0       	rjmp	.+162    	; 0x12ec <DIO_u8SetPinValue+0xde>
    124a:	2d 85       	ldd	r18, Y+13	; 0x0d
    124c:	3e 85       	ldd	r19, Y+14	; 0x0e
    124e:	22 30       	cpi	r18, 0x02	; 2
    1250:	31 05       	cpc	r19, r1
    1252:	2c f4       	brge	.+10     	; 0x125e <DIO_u8SetPinValue+0x50>
    1254:	8d 85       	ldd	r24, Y+13	; 0x0d
    1256:	9e 85       	ldd	r25, Y+14	; 0x0e
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	71 f0       	breq	.+28     	; 0x1278 <DIO_u8SetPinValue+0x6a>
    125c:	f5 c0       	rjmp	.+490    	; 0x1448 <DIO_u8SetPinValue+0x23a>
    125e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1260:	3e 85       	ldd	r19, Y+14	; 0x0e
    1262:	22 30       	cpi	r18, 0x02	; 2
    1264:	31 05       	cpc	r19, r1
    1266:	09 f4       	brne	.+2      	; 0x126a <DIO_u8SetPinValue+0x5c>
    1268:	7b c0       	rjmp	.+246    	; 0x1360 <DIO_u8SetPinValue+0x152>
    126a:	8d 85       	ldd	r24, Y+13	; 0x0d
    126c:	9e 85       	ldd	r25, Y+14	; 0x0e
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <DIO_u8SetPinValue+0x68>
    1274:	af c0       	rjmp	.+350    	; 0x13d4 <DIO_u8SetPinValue+0x1c6>
    1276:	e8 c0       	rjmp	.+464    	; 0x1448 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3c 87       	std	Y+12, r19	; 0x0c
    1280:	2b 87       	std	Y+11, r18	; 0x0b
    1282:	8b 85       	ldd	r24, Y+11	; 0x0b
    1284:	9c 85       	ldd	r25, Y+12	; 0x0c
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	31 f0       	breq	.+12     	; 0x1296 <DIO_u8SetPinValue+0x88>
    128a:	2b 85       	ldd	r18, Y+11	; 0x0b
    128c:	3c 85       	ldd	r19, Y+12	; 0x0c
    128e:	21 30       	cpi	r18, 0x01	; 1
    1290:	31 05       	cpc	r19, r1
    1292:	b1 f0       	breq	.+44     	; 0x12c0 <DIO_u8SetPinValue+0xb2>
    1294:	29 c0       	rjmp	.+82     	; 0x12e8 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1296:	ab e3       	ldi	r26, 0x3B	; 59
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	eb e3       	ldi	r30, 0x3B	; 59
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	28 2f       	mov	r18, r24
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 2e       	mov	r0, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_u8SetPinValue+0xa6>
    12b0:	88 0f       	add	r24, r24
    12b2:	99 1f       	adc	r25, r25
    12b4:	0a 94       	dec	r0
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_u8SetPinValue+0xa2>
    12b8:	80 95       	com	r24
    12ba:	84 23       	and	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	c7 c0       	rjmp	.+398    	; 0x144e <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    12c0:	ab e3       	ldi	r26, 0x3B	; 59
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	eb e3       	ldi	r30, 0x3B	; 59
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <DIO_u8SetPinValue+0xd0>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <DIO_u8SetPinValue+0xcc>
    12e2:	84 2b       	or	r24, r20
    12e4:	8c 93       	st	X, r24
    12e6:	b3 c0       	rjmp	.+358    	; 0x144e <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    12e8:	19 82       	std	Y+1, r1	; 0x01
    12ea:	b1 c0       	rjmp	.+354    	; 0x144e <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    12ec:	8c 81       	ldd	r24, Y+4	; 0x04
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3a 87       	std	Y+10, r19	; 0x0a
    12f4:	29 87       	std	Y+9, r18	; 0x09
    12f6:	89 85       	ldd	r24, Y+9	; 0x09
    12f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	31 f0       	breq	.+12     	; 0x130a <DIO_u8SetPinValue+0xfc>
    12fe:	29 85       	ldd	r18, Y+9	; 0x09
    1300:	3a 85       	ldd	r19, Y+10	; 0x0a
    1302:	21 30       	cpi	r18, 0x01	; 1
    1304:	31 05       	cpc	r19, r1
    1306:	b1 f0       	breq	.+44     	; 0x1334 <DIO_u8SetPinValue+0x126>
    1308:	29 c0       	rjmp	.+82     	; 0x135c <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    130a:	a8 e3       	ldi	r26, 0x38	; 56
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e8 e3       	ldi	r30, 0x38	; 56
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	02 2e       	mov	r0, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <DIO_u8SetPinValue+0x11a>
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <DIO_u8SetPinValue+0x116>
    132c:	80 95       	com	r24
    132e:	84 23       	and	r24, r20
    1330:	8c 93       	st	X, r24
    1332:	8d c0       	rjmp	.+282    	; 0x144e <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1334:	a8 e3       	ldi	r26, 0x38	; 56
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e8 e3       	ldi	r30, 0x38	; 56
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	48 2f       	mov	r20, r24
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 2e       	mov	r0, r18
    134c:	02 c0       	rjmp	.+4      	; 0x1352 <DIO_u8SetPinValue+0x144>
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	0a 94       	dec	r0
    1354:	e2 f7       	brpl	.-8      	; 0x134e <DIO_u8SetPinValue+0x140>
    1356:	84 2b       	or	r24, r20
    1358:	8c 93       	st	X, r24
    135a:	79 c0       	rjmp	.+242    	; 0x144e <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    135c:	19 82       	std	Y+1, r1	; 0x01
    135e:	77 c0       	rjmp	.+238    	; 0x144e <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	28 2f       	mov	r18, r24
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	38 87       	std	Y+8, r19	; 0x08
    1368:	2f 83       	std	Y+7, r18	; 0x07
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	98 85       	ldd	r25, Y+8	; 0x08
    136e:	00 97       	sbiw	r24, 0x00	; 0
    1370:	31 f0       	breq	.+12     	; 0x137e <DIO_u8SetPinValue+0x170>
    1372:	2f 81       	ldd	r18, Y+7	; 0x07
    1374:	38 85       	ldd	r19, Y+8	; 0x08
    1376:	21 30       	cpi	r18, 0x01	; 1
    1378:	31 05       	cpc	r19, r1
    137a:	b1 f0       	breq	.+44     	; 0x13a8 <DIO_u8SetPinValue+0x19a>
    137c:	29 c0       	rjmp	.+82     	; 0x13d0 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    137e:	a5 e3       	ldi	r26, 0x35	; 53
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e5 e3       	ldi	r30, 0x35	; 53
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 2e       	mov	r0, r18
    1396:	02 c0       	rjmp	.+4      	; 0x139c <DIO_u8SetPinValue+0x18e>
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	0a 94       	dec	r0
    139e:	e2 f7       	brpl	.-8      	; 0x1398 <DIO_u8SetPinValue+0x18a>
    13a0:	80 95       	com	r24
    13a2:	84 23       	and	r24, r20
    13a4:	8c 93       	st	X, r24
    13a6:	53 c0       	rjmp	.+166    	; 0x144e <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    13a8:	a5 e3       	ldi	r26, 0x35	; 53
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e5 e3       	ldi	r30, 0x35	; 53
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_u8SetPinValue+0x1b8>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_u8SetPinValue+0x1b4>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	3f c0       	rjmp	.+126    	; 0x144e <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    13d0:	19 82       	std	Y+1, r1	; 0x01
    13d2:	3d c0       	rjmp	.+122    	; 0x144e <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    13d4:	8c 81       	ldd	r24, Y+4	; 0x04
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3e 83       	std	Y+6, r19	; 0x06
    13dc:	2d 83       	std	Y+5, r18	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	9e 81       	ldd	r25, Y+6	; 0x06
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	31 f0       	breq	.+12     	; 0x13f2 <DIO_u8SetPinValue+0x1e4>
    13e6:	2d 81       	ldd	r18, Y+5	; 0x05
    13e8:	3e 81       	ldd	r19, Y+6	; 0x06
    13ea:	21 30       	cpi	r18, 0x01	; 1
    13ec:	31 05       	cpc	r19, r1
    13ee:	b1 f0       	breq	.+44     	; 0x141c <DIO_u8SetPinValue+0x20e>
    13f0:	29 c0       	rjmp	.+82     	; 0x1444 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    13f2:	a2 e3       	ldi	r26, 0x32	; 50
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e2 e3       	ldi	r30, 0x32	; 50
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <DIO_u8SetPinValue+0x202>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <DIO_u8SetPinValue+0x1fe>
    1414:	80 95       	com	r24
    1416:	84 23       	and	r24, r20
    1418:	8c 93       	st	X, r24
    141a:	19 c0       	rjmp	.+50     	; 0x144e <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    141c:	a2 e3       	ldi	r26, 0x32	; 50
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e2 e3       	ldi	r30, 0x32	; 50
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <DIO_u8SetPinValue+0x22c>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <DIO_u8SetPinValue+0x228>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	05 c0       	rjmp	.+10     	; 0x144e <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1444:	19 82       	std	Y+1, r1	; 0x01
    1446:	03 c0       	rjmp	.+6      	; 0x144e <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1448:	19 82       	std	Y+1, r1	; 0x01
    144a:	01 c0       	rjmp	.+2      	; 0x144e <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    144c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    144e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1450:	2e 96       	adiw	r28, 0x0e	; 14
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	08 95       	ret

00001462 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1462:	df 93       	push	r29
    1464:	cf 93       	push	r28
    1466:	cd b7       	in	r28, 0x3d	; 61
    1468:	de b7       	in	r29, 0x3e	; 62
    146a:	28 97       	sbiw	r28, 0x08	; 8
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	6c 83       	std	Y+4, r22	; 0x04
    147a:	5e 83       	std	Y+6, r21	; 0x06
    147c:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	08 f0       	brcs	.+2      	; 0x148a <DIO_u8GetPinValue+0x28>
    1488:	a1 c0       	rjmp	.+322    	; 0x15cc <DIO_u8GetPinValue+0x16a>
    148a:	8c 81       	ldd	r24, Y+4	; 0x04
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	08 f0       	brcs	.+2      	; 0x1492 <DIO_u8GetPinValue+0x30>
    1490:	9d c0       	rjmp	.+314    	; 0x15cc <DIO_u8GetPinValue+0x16a>
    1492:	8d 81       	ldd	r24, Y+5	; 0x05
    1494:	9e 81       	ldd	r25, Y+6	; 0x06
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	09 f4       	brne	.+2      	; 0x149c <DIO_u8GetPinValue+0x3a>
    149a:	98 c0       	rjmp	.+304    	; 0x15cc <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	38 87       	std	Y+8, r19	; 0x08
    14a4:	2f 83       	std	Y+7, r18	; 0x07
    14a6:	4f 81       	ldd	r20, Y+7	; 0x07
    14a8:	58 85       	ldd	r21, Y+8	; 0x08
    14aa:	41 30       	cpi	r20, 0x01	; 1
    14ac:	51 05       	cpc	r21, r1
    14ae:	a9 f1       	breq	.+106    	; 0x151a <DIO_u8GetPinValue+0xb8>
    14b0:	8f 81       	ldd	r24, Y+7	; 0x07
    14b2:	98 85       	ldd	r25, Y+8	; 0x08
    14b4:	82 30       	cpi	r24, 0x02	; 2
    14b6:	91 05       	cpc	r25, r1
    14b8:	34 f4       	brge	.+12     	; 0x14c6 <DIO_u8GetPinValue+0x64>
    14ba:	2f 81       	ldd	r18, Y+7	; 0x07
    14bc:	38 85       	ldd	r19, Y+8	; 0x08
    14be:	21 15       	cp	r18, r1
    14c0:	31 05       	cpc	r19, r1
    14c2:	71 f0       	breq	.+28     	; 0x14e0 <DIO_u8GetPinValue+0x7e>
    14c4:	81 c0       	rjmp	.+258    	; 0x15c8 <DIO_u8GetPinValue+0x166>
    14c6:	4f 81       	ldd	r20, Y+7	; 0x07
    14c8:	58 85       	ldd	r21, Y+8	; 0x08
    14ca:	42 30       	cpi	r20, 0x02	; 2
    14cc:	51 05       	cpc	r21, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <DIO_u8GetPinValue+0x70>
    14d0:	41 c0       	rjmp	.+130    	; 0x1554 <DIO_u8GetPinValue+0xf2>
    14d2:	8f 81       	ldd	r24, Y+7	; 0x07
    14d4:	98 85       	ldd	r25, Y+8	; 0x08
    14d6:	83 30       	cpi	r24, 0x03	; 3
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <DIO_u8GetPinValue+0x7c>
    14dc:	58 c0       	rjmp	.+176    	; 0x158e <DIO_u8GetPinValue+0x12c>
    14de:	74 c0       	rjmp	.+232    	; 0x15c8 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    14e0:	e9 e3       	ldi	r30, 0x39	; 57
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <DIO_u8GetPinValue+0x96>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <DIO_u8GetPinValue+0x92>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	88 23       	and	r24, r24
    1506:	21 f4       	brne	.+8      	; 0x1510 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1508:	ed 81       	ldd	r30, Y+5	; 0x05
    150a:	fe 81       	ldd	r31, Y+6	; 0x06
    150c:	10 82       	st	Z, r1
    150e:	5f c0       	rjmp	.+190    	; 0x15ce <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1510:	ed 81       	ldd	r30, Y+5	; 0x05
    1512:	fe 81       	ldd	r31, Y+6	; 0x06
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	80 83       	st	Z, r24
    1518:	5a c0       	rjmp	.+180    	; 0x15ce <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    151a:	e6 e3       	ldi	r30, 0x36	; 54
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	8c 81       	ldd	r24, Y+4	; 0x04
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a9 01       	movw	r20, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_u8GetPinValue+0xd0>
    152e:	55 95       	asr	r21
    1530:	47 95       	ror	r20
    1532:	8a 95       	dec	r24
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_u8GetPinValue+0xcc>
    1536:	ca 01       	movw	r24, r20
    1538:	81 70       	andi	r24, 0x01	; 1
    153a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	88 23       	and	r24, r24
    1540:	21 f4       	brne	.+8      	; 0x154a <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1542:	ed 81       	ldd	r30, Y+5	; 0x05
    1544:	fe 81       	ldd	r31, Y+6	; 0x06
    1546:	10 82       	st	Z, r1
    1548:	42 c0       	rjmp	.+132    	; 0x15ce <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    154a:	ed 81       	ldd	r30, Y+5	; 0x05
    154c:	fe 81       	ldd	r31, Y+6	; 0x06
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	80 83       	st	Z, r24
    1552:	3d c0       	rjmp	.+122    	; 0x15ce <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1554:	e3 e3       	ldi	r30, 0x33	; 51
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8c 81       	ldd	r24, Y+4	; 0x04
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a9 01       	movw	r20, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <DIO_u8GetPinValue+0x10a>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	8a 95       	dec	r24
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <DIO_u8GetPinValue+0x106>
    1570:	ca 01       	movw	r24, r20
    1572:	81 70       	andi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	88 23       	and	r24, r24
    157a:	21 f4       	brne	.+8      	; 0x1584 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    157c:	ed 81       	ldd	r30, Y+5	; 0x05
    157e:	fe 81       	ldd	r31, Y+6	; 0x06
    1580:	10 82       	st	Z, r1
    1582:	25 c0       	rjmp	.+74     	; 0x15ce <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1584:	ed 81       	ldd	r30, Y+5	; 0x05
    1586:	fe 81       	ldd	r31, Y+6	; 0x06
    1588:	81 e0       	ldi	r24, 0x01	; 1
    158a:	80 83       	st	Z, r24
    158c:	20 c0       	rjmp	.+64     	; 0x15ce <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    158e:	e0 e3       	ldi	r30, 0x30	; 48
    1590:	f0 e0       	ldi	r31, 0x00	; 0
    1592:	80 81       	ld	r24, Z
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	8c 81       	ldd	r24, Y+4	; 0x04
    159a:	88 2f       	mov	r24, r24
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	a9 01       	movw	r20, r18
    15a0:	02 c0       	rjmp	.+4      	; 0x15a6 <DIO_u8GetPinValue+0x144>
    15a2:	55 95       	asr	r21
    15a4:	47 95       	ror	r20
    15a6:	8a 95       	dec	r24
    15a8:	e2 f7       	brpl	.-8      	; 0x15a2 <DIO_u8GetPinValue+0x140>
    15aa:	ca 01       	movw	r24, r20
    15ac:	81 70       	andi	r24, 0x01	; 1
    15ae:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	88 23       	and	r24, r24
    15b4:	21 f4       	brne	.+8      	; 0x15be <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15b6:	ed 81       	ldd	r30, Y+5	; 0x05
    15b8:	fe 81       	ldd	r31, Y+6	; 0x06
    15ba:	10 82       	st	Z, r1
    15bc:	08 c0       	rjmp	.+16     	; 0x15ce <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    15be:	ed 81       	ldd	r30, Y+5	; 0x05
    15c0:	fe 81       	ldd	r31, Y+6	; 0x06
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	80 83       	st	Z, r24
    15c6:	03 c0       	rjmp	.+6      	; 0x15ce <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    15c8:	1a 82       	std	Y+2, r1	; 0x02
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    15cc:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15d0:	28 96       	adiw	r28, 0x08	; 8
    15d2:	0f b6       	in	r0, 0x3f	; 63
    15d4:	f8 94       	cli
    15d6:	de bf       	out	0x3e, r29	; 62
    15d8:	0f be       	out	0x3f, r0	; 63
    15da:	cd bf       	out	0x3d, r28	; 61
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	2d 97       	sbiw	r28, 0x0d	; 13
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    15fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1600:	88 23       	and	r24, r24
    1602:	21 f0       	breq	.+8      	; 0x160c <DIO_u8SetPortDirection+0x2a>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	81 30       	cpi	r24, 0x01	; 1
    1608:	09 f0       	breq	.+2      	; 0x160c <DIO_u8SetPortDirection+0x2a>
    160a:	82 c0       	rjmp	.+260    	; 0x1710 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	3d 87       	std	Y+13, r19	; 0x0d
    1614:	2c 87       	std	Y+12, r18	; 0x0c
    1616:	8c 85       	ldd	r24, Y+12	; 0x0c
    1618:	9d 85       	ldd	r25, Y+13	; 0x0d
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	91 05       	cpc	r25, r1
    161e:	71 f1       	breq	.+92     	; 0x167c <DIO_u8SetPortDirection+0x9a>
    1620:	2c 85       	ldd	r18, Y+12	; 0x0c
    1622:	3d 85       	ldd	r19, Y+13	; 0x0d
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	2c f4       	brge	.+10     	; 0x1634 <DIO_u8SetPortDirection+0x52>
    162a:	8c 85       	ldd	r24, Y+12	; 0x0c
    162c:	9d 85       	ldd	r25, Y+13	; 0x0d
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	69 f0       	breq	.+26     	; 0x164c <DIO_u8SetPortDirection+0x6a>
    1632:	6c c0       	rjmp	.+216    	; 0x170c <DIO_u8SetPortDirection+0x12a>
    1634:	2c 85       	ldd	r18, Y+12	; 0x0c
    1636:	3d 85       	ldd	r19, Y+13	; 0x0d
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	b9 f1       	breq	.+110    	; 0x16ac <DIO_u8SetPortDirection+0xca>
    163e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1640:	9d 85       	ldd	r25, Y+13	; 0x0d
    1642:	83 30       	cpi	r24, 0x03	; 3
    1644:	91 05       	cpc	r25, r1
    1646:	09 f4       	brne	.+2      	; 0x164a <DIO_u8SetPortDirection+0x68>
    1648:	49 c0       	rjmp	.+146    	; 0x16dc <DIO_u8SetPortDirection+0xfa>
    164a:	60 c0       	rjmp	.+192    	; 0x170c <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	3b 87       	std	Y+11, r19	; 0x0b
    1654:	2a 87       	std	Y+10, r18	; 0x0a
    1656:	8a 85       	ldd	r24, Y+10	; 0x0a
    1658:	9b 85       	ldd	r25, Y+11	; 0x0b
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	31 f0       	breq	.+12     	; 0x166a <DIO_u8SetPortDirection+0x88>
    165e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1660:	3b 85       	ldd	r19, Y+11	; 0x0b
    1662:	21 30       	cpi	r18, 0x01	; 1
    1664:	31 05       	cpc	r19, r1
    1666:	29 f0       	breq	.+10     	; 0x1672 <DIO_u8SetPortDirection+0x90>
    1668:	54 c0       	rjmp	.+168    	; 0x1712 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    166a:	ea e3       	ldi	r30, 0x3A	; 58
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	10 82       	st	Z, r1
    1670:	50 c0       	rjmp	.+160    	; 0x1712 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    1672:	ea e3       	ldi	r30, 0x3A	; 58
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	80 83       	st	Z, r24
    167a:	4b c0       	rjmp	.+150    	; 0x1712 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	39 87       	std	Y+9, r19	; 0x09
    1684:	28 87       	std	Y+8, r18	; 0x08
    1686:	88 85       	ldd	r24, Y+8	; 0x08
    1688:	99 85       	ldd	r25, Y+9	; 0x09
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	31 f0       	breq	.+12     	; 0x169a <DIO_u8SetPortDirection+0xb8>
    168e:	28 85       	ldd	r18, Y+8	; 0x08
    1690:	39 85       	ldd	r19, Y+9	; 0x09
    1692:	21 30       	cpi	r18, 0x01	; 1
    1694:	31 05       	cpc	r19, r1
    1696:	29 f0       	breq	.+10     	; 0x16a2 <DIO_u8SetPortDirection+0xc0>
    1698:	3c c0       	rjmp	.+120    	; 0x1712 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    169a:	e7 e3       	ldi	r30, 0x37	; 55
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	10 82       	st	Z, r1
    16a0:	38 c0       	rjmp	.+112    	; 0x1712 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    16a2:	e7 e3       	ldi	r30, 0x37	; 55
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	80 83       	st	Z, r24
    16aa:	33 c0       	rjmp	.+102    	; 0x1712 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    16ac:	8b 81       	ldd	r24, Y+3	; 0x03
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3f 83       	std	Y+7, r19	; 0x07
    16b4:	2e 83       	std	Y+6, r18	; 0x06
    16b6:	8e 81       	ldd	r24, Y+6	; 0x06
    16b8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	31 f0       	breq	.+12     	; 0x16ca <DIO_u8SetPortDirection+0xe8>
    16be:	2e 81       	ldd	r18, Y+6	; 0x06
    16c0:	3f 81       	ldd	r19, Y+7	; 0x07
    16c2:	21 30       	cpi	r18, 0x01	; 1
    16c4:	31 05       	cpc	r19, r1
    16c6:	29 f0       	breq	.+10     	; 0x16d2 <DIO_u8SetPortDirection+0xf0>
    16c8:	24 c0       	rjmp	.+72     	; 0x1712 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    16ca:	e4 e3       	ldi	r30, 0x34	; 52
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	10 82       	st	Z, r1
    16d0:	20 c0       	rjmp	.+64     	; 0x1712 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    16d2:	e4 e3       	ldi	r30, 0x34	; 52
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	8f ef       	ldi	r24, 0xFF	; 255
    16d8:	80 83       	st	Z, r24
    16da:	1b c0       	rjmp	.+54     	; 0x1712 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	3d 83       	std	Y+5, r19	; 0x05
    16e4:	2c 83       	std	Y+4, r18	; 0x04
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	9d 81       	ldd	r25, Y+5	; 0x05
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	31 f0       	breq	.+12     	; 0x16fa <DIO_u8SetPortDirection+0x118>
    16ee:	2c 81       	ldd	r18, Y+4	; 0x04
    16f0:	3d 81       	ldd	r19, Y+5	; 0x05
    16f2:	21 30       	cpi	r18, 0x01	; 1
    16f4:	31 05       	cpc	r19, r1
    16f6:	29 f0       	breq	.+10     	; 0x1702 <DIO_u8SetPortDirection+0x120>
    16f8:	0c c0       	rjmp	.+24     	; 0x1712 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    16fa:	e1 e3       	ldi	r30, 0x31	; 49
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	10 82       	st	Z, r1
    1700:	08 c0       	rjmp	.+16     	; 0x1712 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    1702:	e1 e3       	ldi	r30, 0x31	; 49
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	8f ef       	ldi	r24, 0xFF	; 255
    1708:	80 83       	st	Z, r24
    170a:	03 c0       	rjmp	.+6      	; 0x1712 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    170c:	19 82       	std	Y+1, r1	; 0x01
    170e:	01 c0       	rjmp	.+2      	; 0x1712 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1710:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1712:	89 81       	ldd	r24, Y+1	; 0x01
}
    1714:	2d 96       	adiw	r28, 0x0d	; 13
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	00 d0       	rcall	.+0      	; 0x172c <DIO_u8SetPortValue+0x6>
    172c:	00 d0       	rcall	.+0      	; 0x172e <DIO_u8SetPortValue+0x8>
    172e:	0f 92       	push	r0
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	8a 83       	std	Y+2, r24	; 0x02
    1736:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3d 83       	std	Y+5, r19	; 0x05
    1744:	2c 83       	std	Y+4, r18	; 0x04
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	d1 f0       	breq	.+52     	; 0x1784 <DIO_u8SetPortValue+0x5e>
    1750:	2c 81       	ldd	r18, Y+4	; 0x04
    1752:	3d 81       	ldd	r19, Y+5	; 0x05
    1754:	22 30       	cpi	r18, 0x02	; 2
    1756:	31 05       	cpc	r19, r1
    1758:	2c f4       	brge	.+10     	; 0x1764 <DIO_u8SetPortValue+0x3e>
    175a:	8c 81       	ldd	r24, Y+4	; 0x04
    175c:	9d 81       	ldd	r25, Y+5	; 0x05
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	61 f0       	breq	.+24     	; 0x177a <DIO_u8SetPortValue+0x54>
    1762:	1f c0       	rjmp	.+62     	; 0x17a2 <DIO_u8SetPortValue+0x7c>
    1764:	2c 81       	ldd	r18, Y+4	; 0x04
    1766:	3d 81       	ldd	r19, Y+5	; 0x05
    1768:	22 30       	cpi	r18, 0x02	; 2
    176a:	31 05       	cpc	r19, r1
    176c:	81 f0       	breq	.+32     	; 0x178e <DIO_u8SetPortValue+0x68>
    176e:	8c 81       	ldd	r24, Y+4	; 0x04
    1770:	9d 81       	ldd	r25, Y+5	; 0x05
    1772:	83 30       	cpi	r24, 0x03	; 3
    1774:	91 05       	cpc	r25, r1
    1776:	81 f0       	breq	.+32     	; 0x1798 <DIO_u8SetPortValue+0x72>
    1778:	14 c0       	rjmp	.+40     	; 0x17a2 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    177a:	eb e3       	ldi	r30, 0x3B	; 59
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	80 83       	st	Z, r24
    1782:	10 c0       	rjmp	.+32     	; 0x17a4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    1784:	e8 e3       	ldi	r30, 0x38	; 56
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	80 83       	st	Z, r24
    178c:	0b c0       	rjmp	.+22     	; 0x17a4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    178e:	e5 e3       	ldi	r30, 0x35	; 53
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	8b 81       	ldd	r24, Y+3	; 0x03
    1794:	80 83       	st	Z, r24
    1796:	06 c0       	rjmp	.+12     	; 0x17a4 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    1798:	e2 e3       	ldi	r30, 0x32	; 50
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	80 83       	st	Z, r24
    17a0:	01 c0       	rjmp	.+2      	; 0x17a4 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    17a2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <DIO_u8GetPortValue+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <DIO_u8GetPortValue+0x8>
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <DIO_u8GetPortValue+0xa>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	8a 83       	std	Y+2, r24	; 0x02
    17c6:	7c 83       	std	Y+4, r23	; 0x04
    17c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	00 97       	sbiw	r24, 0x00	; 0
    17d4:	e9 f1       	breq	.+122    	; 0x1850 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	28 2f       	mov	r18, r24
    17da:	30 e0       	ldi	r19, 0x00	; 0
    17dc:	3e 83       	std	Y+6, r19	; 0x06
    17de:	2d 83       	std	Y+5, r18	; 0x05
    17e0:	8d 81       	ldd	r24, Y+5	; 0x05
    17e2:	9e 81       	ldd	r25, Y+6	; 0x06
    17e4:	81 30       	cpi	r24, 0x01	; 1
    17e6:	91 05       	cpc	r25, r1
    17e8:	e1 f0       	breq	.+56     	; 0x1822 <DIO_u8GetPortValue+0x6c>
    17ea:	2d 81       	ldd	r18, Y+5	; 0x05
    17ec:	3e 81       	ldd	r19, Y+6	; 0x06
    17ee:	22 30       	cpi	r18, 0x02	; 2
    17f0:	31 05       	cpc	r19, r1
    17f2:	2c f4       	brge	.+10     	; 0x17fe <DIO_u8GetPortValue+0x48>
    17f4:	8d 81       	ldd	r24, Y+5	; 0x05
    17f6:	9e 81       	ldd	r25, Y+6	; 0x06
    17f8:	00 97       	sbiw	r24, 0x00	; 0
    17fa:	61 f0       	breq	.+24     	; 0x1814 <DIO_u8GetPortValue+0x5e>
    17fc:	27 c0       	rjmp	.+78     	; 0x184c <DIO_u8GetPortValue+0x96>
    17fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1800:	3e 81       	ldd	r19, Y+6	; 0x06
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	31 05       	cpc	r19, r1
    1806:	a1 f0       	breq	.+40     	; 0x1830 <DIO_u8GetPortValue+0x7a>
    1808:	8d 81       	ldd	r24, Y+5	; 0x05
    180a:	9e 81       	ldd	r25, Y+6	; 0x06
    180c:	83 30       	cpi	r24, 0x03	; 3
    180e:	91 05       	cpc	r25, r1
    1810:	b1 f0       	breq	.+44     	; 0x183e <DIO_u8GetPortValue+0x88>
    1812:	1c c0       	rjmp	.+56     	; 0x184c <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1814:	e9 e3       	ldi	r30, 0x39	; 57
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	eb 81       	ldd	r30, Y+3	; 0x03
    181c:	fc 81       	ldd	r31, Y+4	; 0x04
    181e:	80 83       	st	Z, r24
    1820:	18 c0       	rjmp	.+48     	; 0x1852 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1822:	e6 e3       	ldi	r30, 0x36	; 54
    1824:	f0 e0       	ldi	r31, 0x00	; 0
    1826:	80 81       	ld	r24, Z
    1828:	eb 81       	ldd	r30, Y+3	; 0x03
    182a:	fc 81       	ldd	r31, Y+4	; 0x04
    182c:	80 83       	st	Z, r24
    182e:	11 c0       	rjmp	.+34     	; 0x1852 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1830:	e3 e3       	ldi	r30, 0x33	; 51
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	eb 81       	ldd	r30, Y+3	; 0x03
    1838:	fc 81       	ldd	r31, Y+4	; 0x04
    183a:	80 83       	st	Z, r24
    183c:	0a c0       	rjmp	.+20     	; 0x1852 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    183e:	e0 e3       	ldi	r30, 0x30	; 48
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	eb 81       	ldd	r30, Y+3	; 0x03
    1846:	fc 81       	ldd	r31, Y+4	; 0x04
    1848:	80 83       	st	Z, r24
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    184c:	19 82       	std	Y+1, r1	; 0x01
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1850:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1852:	89 81       	ldd	r24, Y+1	; 0x01
    1854:	26 96       	adiw	r28, 0x06	; 6
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	f8 94       	cli
    185a:	de bf       	out	0x3e, r29	; 62
    185c:	0f be       	out	0x3f, r0	; 63
    185e:	cd bf       	out	0x3d, r28	; 61
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	cc 54       	subi	r28, 0x4C	; 76
    1874:	d0 40       	sbci	r29, 0x00	; 0
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	fe 01       	movw	r30, r28
    1882:	e7 5b       	subi	r30, 0xB7	; 183
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	ac e0       	ldi	r26, 0x0C	; 12
    188c:	b2 e4       	ldi	r27, 0x42	; 66
    188e:	80 83       	st	Z, r24
    1890:	91 83       	std	Z+1, r25	; 0x01
    1892:	a2 83       	std	Z+2, r26	; 0x02
    1894:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1896:	8e 01       	movw	r16, r28
    1898:	0b 5b       	subi	r16, 0xBB	; 187
    189a:	1f 4f       	sbci	r17, 0xFF	; 255
    189c:	fe 01       	movw	r30, r28
    189e:	e7 5b       	subi	r30, 0xB7	; 183
    18a0:	ff 4f       	sbci	r31, 0xFF	; 255
    18a2:	60 81       	ld	r22, Z
    18a4:	71 81       	ldd	r23, Z+1	; 0x01
    18a6:	82 81       	ldd	r24, Z+2	; 0x02
    18a8:	93 81       	ldd	r25, Z+3	; 0x03
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a ef       	ldi	r20, 0xFA	; 250
    18b0:	54 e4       	ldi	r21, 0x44	; 68
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	f8 01       	movw	r30, r16
    18bc:	80 83       	st	Z, r24
    18be:	91 83       	std	Z+1, r25	; 0x01
    18c0:	a2 83       	std	Z+2, r26	; 0x02
    18c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18c4:	fe 01       	movw	r30, r28
    18c6:	eb 5b       	subi	r30, 0xBB	; 187
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	60 81       	ld	r22, Z
    18cc:	71 81       	ldd	r23, Z+1	; 0x01
    18ce:	82 81       	ldd	r24, Z+2	; 0x02
    18d0:	93 81       	ldd	r25, Z+3	; 0x03
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	44 f4       	brge	.+16     	; 0x18f2 <LCD_voidInit+0x8c>
		__ticks = 1;
    18e2:	fe 01       	movw	r30, r28
    18e4:	ed 5b       	subi	r30, 0xBD	; 189
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
    18f0:	64 c0       	rjmp	.+200    	; 0x19ba <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    18f2:	fe 01       	movw	r30, r28
    18f4:	eb 5b       	subi	r30, 0xBB	; 187
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	0c f0       	brlt	.+2      	; 0x1912 <LCD_voidInit+0xac>
    1910:	43 c0       	rjmp	.+134    	; 0x1998 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1912:	fe 01       	movw	r30, r28
    1914:	e7 5b       	subi	r30, 0xB7	; 183
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	40 e2       	ldi	r20, 0x20	; 32
    1926:	51 e4       	ldi	r21, 0x41	; 65
    1928:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	8e 01       	movw	r16, r28
    1932:	0d 5b       	subi	r16, 0xBD	; 189
    1934:	1f 4f       	sbci	r17, 0xFF	; 255
    1936:	bc 01       	movw	r22, r24
    1938:	cd 01       	movw	r24, r26
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	f8 01       	movw	r30, r16
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	1f c0       	rjmp	.+62     	; 0x1988 <LCD_voidInit+0x122>
    194a:	fe 01       	movw	r30, r28
    194c:	ef 5b       	subi	r30, 0xBF	; 191
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	88 ec       	ldi	r24, 0xC8	; 200
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	91 83       	std	Z+1, r25	; 0x01
    1956:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1958:	fe 01       	movw	r30, r28
    195a:	ef 5b       	subi	r30, 0xBF	; 191
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <LCD_voidInit+0xfc>
    1966:	fe 01       	movw	r30, r28
    1968:	ef 5b       	subi	r30, 0xBF	; 191
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1970:	de 01       	movw	r26, r28
    1972:	ad 5b       	subi	r26, 0xBD	; 189
    1974:	bf 4f       	sbci	r27, 0xFF	; 255
    1976:	fe 01       	movw	r30, r28
    1978:	ed 5b       	subi	r30, 0xBD	; 189
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	91 81       	ldd	r25, Z+1	; 0x01
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	11 96       	adiw	r26, 0x01	; 1
    1984:	9c 93       	st	X, r25
    1986:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1988:	fe 01       	movw	r30, r28
    198a:	ed 5b       	subi	r30, 0xBD	; 189
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 81       	ld	r24, Z
    1990:	91 81       	ldd	r25, Z+1	; 0x01
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	d1 f6       	brne	.-76     	; 0x194a <LCD_voidInit+0xe4>
    1996:	24 c0       	rjmp	.+72     	; 0x19e0 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1998:	8e 01       	movw	r16, r28
    199a:	0d 5b       	subi	r16, 0xBD	; 189
    199c:	1f 4f       	sbci	r17, 0xFF	; 255
    199e:	fe 01       	movw	r30, r28
    19a0:	eb 5b       	subi	r30, 0xBB	; 187
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	60 81       	ld	r22, Z
    19a6:	71 81       	ldd	r23, Z+1	; 0x01
    19a8:	82 81       	ldd	r24, Z+2	; 0x02
    19aa:	93 81       	ldd	r25, Z+3	; 0x03
    19ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	f8 01       	movw	r30, r16
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24
    19ba:	fe 01       	movw	r30, r28
    19bc:	ed 5b       	subi	r30, 0xBD	; 189
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	80 81       	ld	r24, Z
    19c2:	91 81       	ldd	r25, Z+1	; 0x01
    19c4:	fe 01       	movw	r30, r28
    19c6:	ff 96       	adiw	r30, 0x3f	; 63
    19c8:	91 83       	std	Z+1, r25	; 0x01
    19ca:	80 83       	st	Z, r24
    19cc:	fe 01       	movw	r30, r28
    19ce:	ff 96       	adiw	r30, 0x3f	; 63
    19d0:	80 81       	ld	r24, Z
    19d2:	91 81       	ldd	r25, Z+1	; 0x01
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_voidInit+0x16e>
    19d8:	fe 01       	movw	r30, r28
    19da:	ff 96       	adiw	r30, 0x3f	; 63
    19dc:	91 83       	std	Z+1, r25	; 0x01
    19de:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    19e0:	88 e3       	ldi	r24, 0x38	; 56
    19e2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a0 e2       	ldi	r26, 0x20	; 32
    19ec:	b2 e4       	ldi	r27, 0x42	; 66
    19ee:	8b af       	std	Y+59, r24	; 0x3b
    19f0:	9c af       	std	Y+60, r25	; 0x3c
    19f2:	ad af       	std	Y+61, r26	; 0x3d
    19f4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19f6:	6b ad       	ldd	r22, Y+59	; 0x3b
    19f8:	7c ad       	ldd	r23, Y+60	; 0x3c
    19fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    19fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    19fe:	2b ea       	ldi	r18, 0xAB	; 171
    1a00:	3a ea       	ldi	r19, 0xAA	; 170
    1a02:	4a e2       	ldi	r20, 0x2A	; 42
    1a04:	50 e4       	ldi	r21, 0x40	; 64
    1a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	8f ab       	std	Y+55, r24	; 0x37
    1a10:	98 af       	std	Y+56, r25	; 0x38
    1a12:	a9 af       	std	Y+57, r26	; 0x39
    1a14:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a16:	6f a9       	ldd	r22, Y+55	; 0x37
    1a18:	78 ad       	ldd	r23, Y+56	; 0x38
    1a1a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a1c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e8       	ldi	r20, 0x80	; 128
    1a24:	5f e3       	ldi	r21, 0x3F	; 63
    1a26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	1c f4       	brge	.+6      	; 0x1a34 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	8e ab       	std	Y+54, r24	; 0x36
    1a32:	91 c0       	rjmp	.+290    	; 0x1b56 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1a34:	6f a9       	ldd	r22, Y+55	; 0x37
    1a36:	78 ad       	ldd	r23, Y+56	; 0x38
    1a38:	89 ad       	ldd	r24, Y+57	; 0x39
    1a3a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	53 e4       	ldi	r21, 0x43	; 67
    1a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	0c f0       	brlt	.+2      	; 0x1a4e <LCD_voidInit+0x1e8>
    1a4c:	7b c0       	rjmp	.+246    	; 0x1b44 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1a4e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a50:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	4a e7       	ldi	r20, 0x7A	; 122
    1a5c:	54 e4       	ldi	r21, 0x44	; 68
    1a5e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a62:	dc 01       	movw	r26, r24
    1a64:	cb 01       	movw	r24, r22
    1a66:	8a ab       	std	Y+50, r24	; 0x32
    1a68:	9b ab       	std	Y+51, r25	; 0x33
    1a6a:	ac ab       	std	Y+52, r26	; 0x34
    1a6c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6e:	6a a9       	ldd	r22, Y+50	; 0x32
    1a70:	7b a9       	ldd	r23, Y+51	; 0x33
    1a72:	8c a9       	ldd	r24, Y+52	; 0x34
    1a74:	9d a9       	ldd	r25, Y+53	; 0x35
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a ef       	ldi	r20, 0xFA	; 250
    1a7c:	54 e4       	ldi	r21, 0x44	; 68
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	8e a7       	std	Y+46, r24	; 0x2e
    1a88:	9f a7       	std	Y+47, r25	; 0x2f
    1a8a:	a8 ab       	std	Y+48, r26	; 0x30
    1a8c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a8e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a90:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a92:	88 a9       	ldd	r24, Y+48	; 0x30
    1a94:	99 a9       	ldd	r25, Y+49	; 0x31
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	40 e8       	ldi	r20, 0x80	; 128
    1a9c:	5f e3       	ldi	r21, 0x3F	; 63
    1a9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aa2:	88 23       	and	r24, r24
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <LCD_voidInit+0x24a>
		__ticks = 1;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	9d a7       	std	Y+45, r25	; 0x2d
    1aac:	8c a7       	std	Y+44, r24	; 0x2c
    1aae:	3f c0       	rjmp	.+126    	; 0x1b2e <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1ab0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ab2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ab4:	88 a9       	ldd	r24, Y+48	; 0x30
    1ab6:	99 a9       	ldd	r25, Y+49	; 0x31
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	3f ef       	ldi	r19, 0xFF	; 255
    1abc:	4f e7       	ldi	r20, 0x7F	; 127
    1abe:	57 e4       	ldi	r21, 0x47	; 71
    1ac0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac4:	18 16       	cp	r1, r24
    1ac6:	4c f5       	brge	.+82     	; 0x1b1a <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac8:	6a a9       	ldd	r22, Y+50	; 0x32
    1aca:	7b a9       	ldd	r23, Y+51	; 0x33
    1acc:	8c a9       	ldd	r24, Y+52	; 0x34
    1ace:	9d a9       	ldd	r25, Y+53	; 0x35
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e2       	ldi	r20, 0x20	; 32
    1ad6:	51 e4       	ldi	r21, 0x41	; 65
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	bc 01       	movw	r22, r24
    1ae2:	cd 01       	movw	r24, r26
    1ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	9d a7       	std	Y+45, r25	; 0x2d
    1aee:	8c a7       	std	Y+44, r24	; 0x2c
    1af0:	0f c0       	rjmp	.+30     	; 0x1b10 <LCD_voidInit+0x2aa>
    1af2:	88 ec       	ldi	r24, 0xC8	; 200
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	9b a7       	std	Y+43, r25	; 0x2b
    1af8:	8a a7       	std	Y+42, r24	; 0x2a
    1afa:	8a a5       	ldd	r24, Y+42	; 0x2a
    1afc:	9b a5       	ldd	r25, Y+43	; 0x2b
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <LCD_voidInit+0x298>
    1b02:	9b a7       	std	Y+43, r25	; 0x2b
    1b04:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b06:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b08:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	9d a7       	std	Y+45, r25	; 0x2d
    1b0e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b10:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b12:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	69 f7       	brne	.-38     	; 0x1af2 <LCD_voidInit+0x28c>
    1b18:	24 c0       	rjmp	.+72     	; 0x1b62 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b1a:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b1c:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b1e:	88 a9       	ldd	r24, Y+48	; 0x30
    1b20:	99 a9       	ldd	r25, Y+49	; 0x31
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	9d a7       	std	Y+45, r25	; 0x2d
    1b2c:	8c a7       	std	Y+44, r24	; 0x2c
    1b2e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b30:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b32:	99 a7       	std	Y+41, r25	; 0x29
    1b34:	88 a7       	std	Y+40, r24	; 0x28
    1b36:	88 a5       	ldd	r24, Y+40	; 0x28
    1b38:	99 a5       	ldd	r25, Y+41	; 0x29
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	f1 f7       	brne	.-4      	; 0x1b3a <LCD_voidInit+0x2d4>
    1b3e:	99 a7       	std	Y+41, r25	; 0x29
    1b40:	88 a7       	std	Y+40, r24	; 0x28
    1b42:	0f c0       	rjmp	.+30     	; 0x1b62 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b44:	6f a9       	ldd	r22, Y+55	; 0x37
    1b46:	78 ad       	ldd	r23, Y+56	; 0x38
    1b48:	89 ad       	ldd	r24, Y+57	; 0x39
    1b4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8e ab       	std	Y+54, r24	; 0x36
    1b56:	8e a9       	ldd	r24, Y+54	; 0x36
    1b58:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b5a:	8f a1       	ldd	r24, Y+39	; 0x27
    1b5c:	8a 95       	dec	r24
    1b5e:	f1 f7       	brne	.-4      	; 0x1b5c <LCD_voidInit+0x2f6>
    1b60:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    1b62:	8f e0       	ldi	r24, 0x0F	; 15
    1b64:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	a0 e2       	ldi	r26, 0x20	; 32
    1b6e:	b2 e4       	ldi	r27, 0x42	; 66
    1b70:	8b a3       	std	Y+35, r24	; 0x23
    1b72:	9c a3       	std	Y+36, r25	; 0x24
    1b74:	ad a3       	std	Y+37, r26	; 0x25
    1b76:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b78:	6b a1       	ldd	r22, Y+35	; 0x23
    1b7a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b7c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b7e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b80:	2b ea       	ldi	r18, 0xAB	; 171
    1b82:	3a ea       	ldi	r19, 0xAA	; 170
    1b84:	4a e2       	ldi	r20, 0x2A	; 42
    1b86:	50 e4       	ldi	r21, 0x40	; 64
    1b88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	cb 01       	movw	r24, r22
    1b90:	8f 8f       	std	Y+31, r24	; 0x1f
    1b92:	98 a3       	std	Y+32, r25	; 0x20
    1b94:	a9 a3       	std	Y+33, r26	; 0x21
    1b96:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b98:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b9a:	78 a1       	ldd	r23, Y+32	; 0x20
    1b9c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b9e:	9a a1       	ldd	r25, Y+34	; 0x22
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	1c f4       	brge	.+6      	; 0x1bb6 <LCD_voidInit+0x350>
		__ticks = 1;
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb4:	91 c0       	rjmp	.+290    	; 0x1cd8 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1bb6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bb8:	78 a1       	ldd	r23, Y+32	; 0x20
    1bba:	89 a1       	ldd	r24, Y+33	; 0x21
    1bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	53 e4       	ldi	r21, 0x43	; 67
    1bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	0c f0       	brlt	.+2      	; 0x1bd0 <LCD_voidInit+0x36a>
    1bce:	7b c0       	rjmp	.+246    	; 0x1cc6 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a e7       	ldi	r20, 0x7A	; 122
    1bde:	54 e4       	ldi	r21, 0x44	; 68
    1be0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8a 8f       	std	Y+26, r24	; 0x1a
    1bea:	9b 8f       	std	Y+27, r25	; 0x1b
    1bec:	ac 8f       	std	Y+28, r26	; 0x1c
    1bee:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bf0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bf2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bf4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bf6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	4a ef       	ldi	r20, 0xFA	; 250
    1bfe:	54 e4       	ldi	r21, 0x44	; 68
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	8e 8b       	std	Y+22, r24	; 0x16
    1c0a:	9f 8b       	std	Y+23, r25	; 0x17
    1c0c:	a8 8f       	std	Y+24, r26	; 0x18
    1c0e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c10:	6e 89       	ldd	r22, Y+22	; 0x16
    1c12:	7f 89       	ldd	r23, Y+23	; 0x17
    1c14:	88 8d       	ldd	r24, Y+24	; 0x18
    1c16:	99 8d       	ldd	r25, Y+25	; 0x19
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e8       	ldi	r20, 0x80	; 128
    1c1e:	5f e3       	ldi	r21, 0x3F	; 63
    1c20:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c24:	88 23       	and	r24, r24
    1c26:	2c f4       	brge	.+10     	; 0x1c32 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	9d 8b       	std	Y+21, r25	; 0x15
    1c2e:	8c 8b       	std	Y+20, r24	; 0x14
    1c30:	3f c0       	rjmp	.+126    	; 0x1cb0 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1c32:	6e 89       	ldd	r22, Y+22	; 0x16
    1c34:	7f 89       	ldd	r23, Y+23	; 0x17
    1c36:	88 8d       	ldd	r24, Y+24	; 0x18
    1c38:	99 8d       	ldd	r25, Y+25	; 0x19
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	4c f5       	brge	.+82     	; 0x1c9c <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c4c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c4e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c50:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e2       	ldi	r20, 0x20	; 32
    1c58:	51 e4       	ldi	r21, 0x41	; 65
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9d 8b       	std	Y+21, r25	; 0x15
    1c70:	8c 8b       	std	Y+20, r24	; 0x14
    1c72:	0f c0       	rjmp	.+30     	; 0x1c92 <LCD_voidInit+0x42c>
    1c74:	88 ec       	ldi	r24, 0xC8	; 200
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9b 8b       	std	Y+19, r25	; 0x13
    1c7a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c7c:	8a 89       	ldd	r24, Y+18	; 0x12
    1c7e:	9b 89       	ldd	r25, Y+19	; 0x13
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	f1 f7       	brne	.-4      	; 0x1c80 <LCD_voidInit+0x41a>
    1c84:	9b 8b       	std	Y+19, r25	; 0x13
    1c86:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c88:	8c 89       	ldd	r24, Y+20	; 0x14
    1c8a:	9d 89       	ldd	r25, Y+21	; 0x15
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	9d 8b       	std	Y+21, r25	; 0x15
    1c90:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c92:	8c 89       	ldd	r24, Y+20	; 0x14
    1c94:	9d 89       	ldd	r25, Y+21	; 0x15
    1c96:	00 97       	sbiw	r24, 0x00	; 0
    1c98:	69 f7       	brne	.-38     	; 0x1c74 <LCD_voidInit+0x40e>
    1c9a:	24 c0       	rjmp	.+72     	; 0x1ce4 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c9c:	6e 89       	ldd	r22, Y+22	; 0x16
    1c9e:	7f 89       	ldd	r23, Y+23	; 0x17
    1ca0:	88 8d       	ldd	r24, Y+24	; 0x18
    1ca2:	99 8d       	ldd	r25, Y+25	; 0x19
    1ca4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	9d 8b       	std	Y+21, r25	; 0x15
    1cae:	8c 8b       	std	Y+20, r24	; 0x14
    1cb0:	8c 89       	ldd	r24, Y+20	; 0x14
    1cb2:	9d 89       	ldd	r25, Y+21	; 0x15
    1cb4:	99 8b       	std	Y+17, r25	; 0x11
    1cb6:	88 8b       	std	Y+16, r24	; 0x10
    1cb8:	88 89       	ldd	r24, Y+16	; 0x10
    1cba:	99 89       	ldd	r25, Y+17	; 0x11
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_voidInit+0x456>
    1cc0:	99 8b       	std	Y+17, r25	; 0x11
    1cc2:	88 8b       	std	Y+16, r24	; 0x10
    1cc4:	0f c0       	rjmp	.+30     	; 0x1ce4 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cc6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1cc8:	78 a1       	ldd	r23, Y+32	; 0x20
    1cca:	89 a1       	ldd	r24, Y+33	; 0x21
    1ccc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	8e 8f       	std	Y+30, r24	; 0x1e
    1cd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cda:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cde:	8a 95       	dec	r24
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_voidInit+0x478>
    1ce2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
    1cea:	80 e0       	ldi	r24, 0x00	; 0
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	a0 e0       	ldi	r26, 0x00	; 0
    1cf0:	b0 e4       	ldi	r27, 0x40	; 64
    1cf2:	8b 87       	std	Y+11, r24	; 0x0b
    1cf4:	9c 87       	std	Y+12, r25	; 0x0c
    1cf6:	ad 87       	std	Y+13, r26	; 0x0d
    1cf8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	4a ef       	ldi	r20, 0xFA	; 250
    1d08:	54 e4       	ldi	r21, 0x44	; 68
    1d0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	8f 83       	std	Y+7, r24	; 0x07
    1d14:	98 87       	std	Y+8, r25	; 0x08
    1d16:	a9 87       	std	Y+9, r26	; 0x09
    1d18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1c:	78 85       	ldd	r23, Y+8	; 0x08
    1d1e:	89 85       	ldd	r24, Y+9	; 0x09
    1d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d2e:	88 23       	and	r24, r24
    1d30:	2c f4       	brge	.+10     	; 0x1d3c <LCD_voidInit+0x4d6>
		__ticks = 1;
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	90 e0       	ldi	r25, 0x00	; 0
    1d36:	9e 83       	std	Y+6, r25	; 0x06
    1d38:	8d 83       	std	Y+5, r24	; 0x05
    1d3a:	3f c0       	rjmp	.+126    	; 0x1dba <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1d3e:	78 85       	ldd	r23, Y+8	; 0x08
    1d40:	89 85       	ldd	r24, Y+9	; 0x09
    1d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	3f ef       	ldi	r19, 0xFF	; 255
    1d48:	4f e7       	ldi	r20, 0x7F	; 127
    1d4a:	57 e4       	ldi	r21, 0x47	; 71
    1d4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d50:	18 16       	cp	r1, r24
    1d52:	4c f5       	brge	.+82     	; 0x1da6 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e2       	ldi	r20, 0x20	; 32
    1d62:	51 e4       	ldi	r21, 0x41	; 65
    1d64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	bc 01       	movw	r22, r24
    1d6e:	cd 01       	movw	r24, r26
    1d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d74:	dc 01       	movw	r26, r24
    1d76:	cb 01       	movw	r24, r22
    1d78:	9e 83       	std	Y+6, r25	; 0x06
    1d7a:	8d 83       	std	Y+5, r24	; 0x05
    1d7c:	0f c0       	rjmp	.+30     	; 0x1d9c <LCD_voidInit+0x536>
    1d7e:	88 ec       	ldi	r24, 0xC8	; 200
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d86:	8b 81       	ldd	r24, Y+3	; 0x03
    1d88:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	f1 f7       	brne	.-4      	; 0x1d8a <LCD_voidInit+0x524>
    1d8e:	9c 83       	std	Y+4, r25	; 0x04
    1d90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	01 97       	sbiw	r24, 0x01	; 1
    1d98:	9e 83       	std	Y+6, r25	; 0x06
    1d9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	69 f7       	brne	.-38     	; 0x1d7e <LCD_voidInit+0x518>
    1da4:	14 c0       	rjmp	.+40     	; 0x1dce <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da6:	6f 81       	ldd	r22, Y+7	; 0x07
    1da8:	78 85       	ldd	r23, Y+8	; 0x08
    1daa:	89 85       	ldd	r24, Y+9	; 0x09
    1dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db2:	dc 01       	movw	r26, r24
    1db4:	cb 01       	movw	r24, r22
    1db6:	9e 83       	std	Y+6, r25	; 0x06
    1db8:	8d 83       	std	Y+5, r24	; 0x05
    1dba:	8d 81       	ldd	r24, Y+5	; 0x05
    1dbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbe:	9a 83       	std	Y+2, r25	; 0x02
    1dc0:	89 83       	std	Y+1, r24	; 0x01
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc6:	01 97       	sbiw	r24, 0x01	; 1
    1dc8:	f1 f7       	brne	.-4      	; 0x1dc6 <LCD_voidInit+0x560>
    1dca:	9a 83       	std	Y+2, r25	; 0x02
    1dcc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    1dce:	86 e0       	ldi	r24, 0x06	; 6
    1dd0:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>


}
    1dd4:	c4 5b       	subi	r28, 0xB4	; 180
    1dd6:	df 4f       	sbci	r29, 0xFF	; 255
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	de bf       	out	0x3e, r29	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	cd bf       	out	0x3d, r28	; 61
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	08 95       	ret

00001dec <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1dec:	df 93       	push	r29
    1dee:	cf 93       	push	r28
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	e1 97       	sbiw	r28, 0x31	; 49
    1df6:	0f b6       	in	r0, 0x3f	; 63
    1df8:	f8 94       	cli
    1dfa:	de bf       	out	0x3e, r29	; 62
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	cd bf       	out	0x3d, r28	; 61
    1e00:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	60 e0       	ldi	r22, 0x00	; 0
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	40 e0       	ldi	r20, 0x00	; 0
    1e12:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1e16:	83 e0       	ldi	r24, 0x03	; 3
    1e18:	69 a9       	ldd	r22, Y+49	; 0x31
    1e1a:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	62 e0       	ldi	r22, 0x02	; 2
    1e22:	41 e0       	ldi	r20, 0x01	; 1
    1e24:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	a0 e8       	ldi	r26, 0x80	; 128
    1e2e:	bf e3       	ldi	r27, 0x3F	; 63
    1e30:	8d a7       	std	Y+45, r24	; 0x2d
    1e32:	9e a7       	std	Y+46, r25	; 0x2e
    1e34:	af a7       	std	Y+47, r26	; 0x2f
    1e36:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e38:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e3a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e3e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e40:	2b ea       	ldi	r18, 0xAB	; 171
    1e42:	3a ea       	ldi	r19, 0xAA	; 170
    1e44:	4a e2       	ldi	r20, 0x2A	; 42
    1e46:	50 e4       	ldi	r21, 0x40	; 64
    1e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	89 a7       	std	Y+41, r24	; 0x29
    1e52:	9a a7       	std	Y+42, r25	; 0x2a
    1e54:	ab a7       	std	Y+43, r26	; 0x2b
    1e56:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e58:	69 a5       	ldd	r22, Y+41	; 0x29
    1e5a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	40 e8       	ldi	r20, 0x80	; 128
    1e66:	5f e3       	ldi	r21, 0x3F	; 63
    1e68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e6c:	88 23       	and	r24, r24
    1e6e:	1c f4       	brge	.+6      	; 0x1e76 <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	88 a7       	std	Y+40, r24	; 0x28
    1e74:	91 c0       	rjmp	.+290    	; 0x1f98 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1e76:	69 a5       	ldd	r22, Y+41	; 0x29
    1e78:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	53 e4       	ldi	r21, 0x43	; 67
    1e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	0c f0       	brlt	.+2      	; 0x1e90 <LCD_voidSendCmnd+0xa4>
    1e8e:	7b c0       	rjmp	.+246    	; 0x1f86 <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e90:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e92:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e96:	98 a9       	ldd	r25, Y+48	; 0x30
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	4a e7       	ldi	r20, 0x7A	; 122
    1e9e:	54 e4       	ldi	r21, 0x44	; 68
    1ea0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	8c a3       	std	Y+36, r24	; 0x24
    1eaa:	9d a3       	std	Y+37, r25	; 0x25
    1eac:	ae a3       	std	Y+38, r26	; 0x26
    1eae:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb0:	6c a1       	ldd	r22, Y+36	; 0x24
    1eb2:	7d a1       	ldd	r23, Y+37	; 0x25
    1eb4:	8e a1       	ldd	r24, Y+38	; 0x26
    1eb6:	9f a1       	ldd	r25, Y+39	; 0x27
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	4a ef       	ldi	r20, 0xFA	; 250
    1ebe:	54 e4       	ldi	r21, 0x44	; 68
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	88 a3       	std	Y+32, r24	; 0x20
    1eca:	99 a3       	std	Y+33, r25	; 0x21
    1ecc:	aa a3       	std	Y+34, r26	; 0x22
    1ece:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ed0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ed2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ed4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ed6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e8       	ldi	r20, 0x80	; 128
    1ede:	5f e3       	ldi	r21, 0x3F	; 63
    1ee0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee4:	88 23       	and	r24, r24
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	9f 8f       	std	Y+31, r25	; 0x1f
    1eee:	8e 8f       	std	Y+30, r24	; 0x1e
    1ef0:	3f c0       	rjmp	.+126    	; 0x1f70 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1ef2:	68 a1       	ldd	r22, Y+32	; 0x20
    1ef4:	79 a1       	ldd	r23, Y+33	; 0x21
    1ef6:	8a a1       	ldd	r24, Y+34	; 0x22
    1ef8:	9b a1       	ldd	r25, Y+35	; 0x23
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	3f ef       	ldi	r19, 0xFF	; 255
    1efe:	4f e7       	ldi	r20, 0x7F	; 127
    1f00:	57 e4       	ldi	r21, 0x47	; 71
    1f02:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f06:	18 16       	cp	r1, r24
    1f08:	4c f5       	brge	.+82     	; 0x1f5c <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f0c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f0e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f10:	9f a1       	ldd	r25, Y+39	; 0x27
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f30:	8e 8f       	std	Y+30, r24	; 0x1e
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <LCD_voidSendCmnd+0x166>
    1f34:	88 ec       	ldi	r24, 0xC8	; 200
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9d 8f       	std	Y+29, r25	; 0x1d
    1f3a:	8c 8f       	std	Y+28, r24	; 0x1c
    1f3c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f3e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_voidSendCmnd+0x154>
    1f44:	9d 8f       	std	Y+29, r25	; 0x1d
    1f46:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f4a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f50:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f54:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	69 f7       	brne	.-38     	; 0x1f34 <LCD_voidSendCmnd+0x148>
    1f5a:	24 c0       	rjmp	.+72     	; 0x1fa4 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f5e:	79 a1       	ldd	r23, Y+33	; 0x21
    1f60:	8a a1       	ldd	r24, Y+34	; 0x22
    1f62:	9b a1       	ldd	r25, Y+35	; 0x23
    1f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f6e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f70:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f72:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f74:	9b 8f       	std	Y+27, r25	; 0x1b
    1f76:	8a 8f       	std	Y+26, r24	; 0x1a
    1f78:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f7a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_voidSendCmnd+0x190>
    1f80:	9b 8f       	std	Y+27, r25	; 0x1b
    1f82:	8a 8f       	std	Y+26, r24	; 0x1a
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f86:	69 a5       	ldd	r22, Y+41	; 0x29
    1f88:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	88 a7       	std	Y+40, r24	; 0x28
    1f98:	88 a5       	ldd	r24, Y+40	; 0x28
    1f9a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f9c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f9e:	8a 95       	dec	r24
    1fa0:	f1 f7       	brne	.-4      	; 0x1f9e <LCD_voidSendCmnd+0x1b2>
    1fa2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	62 e0       	ldi	r22, 0x02	; 2
    1fa8:	40 e0       	ldi	r20, 0x00	; 0
    1faa:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e8       	ldi	r26, 0x80	; 128
    1fb4:	bf e3       	ldi	r27, 0x3F	; 63
    1fb6:	8d 8b       	std	Y+21, r24	; 0x15
    1fb8:	9e 8b       	std	Y+22, r25	; 0x16
    1fba:	af 8b       	std	Y+23, r26	; 0x17
    1fbc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc6:	2b ea       	ldi	r18, 0xAB	; 171
    1fc8:	3a ea       	ldi	r19, 0xAA	; 170
    1fca:	4a e2       	ldi	r20, 0x2A	; 42
    1fcc:	50 e4       	ldi	r21, 0x40	; 64
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	89 8b       	std	Y+17, r24	; 0x11
    1fd8:	9a 8b       	std	Y+18, r25	; 0x12
    1fda:	ab 8b       	std	Y+19, r26	; 0x13
    1fdc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fde:	69 89       	ldd	r22, Y+17	; 0x11
    1fe0:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fe6:	20 e0       	ldi	r18, 0x00	; 0
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	40 e8       	ldi	r20, 0x80	; 128
    1fec:	5f e3       	ldi	r21, 0x3F	; 63
    1fee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff2:	88 23       	and	r24, r24
    1ff4:	1c f4       	brge	.+6      	; 0x1ffc <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	88 8b       	std	Y+16, r24	; 0x10
    1ffa:	91 c0       	rjmp	.+290    	; 0x211e <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    1ffc:	69 89       	ldd	r22, Y+17	; 0x11
    1ffe:	7a 89       	ldd	r23, Y+18	; 0x12
    2000:	8b 89       	ldd	r24, Y+19	; 0x13
    2002:	9c 89       	ldd	r25, Y+20	; 0x14
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	53 e4       	ldi	r21, 0x43	; 67
    200c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	0c f0       	brlt	.+2      	; 0x2016 <LCD_voidSendCmnd+0x22a>
    2014:	7b c0       	rjmp	.+246    	; 0x210c <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    2016:	6d 89       	ldd	r22, Y+21	; 0x15
    2018:	7e 89       	ldd	r23, Y+22	; 0x16
    201a:	8f 89       	ldd	r24, Y+23	; 0x17
    201c:	98 8d       	ldd	r25, Y+24	; 0x18
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a e7       	ldi	r20, 0x7A	; 122
    2024:	54 e4       	ldi	r21, 0x44	; 68
    2026:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	8c 87       	std	Y+12, r24	; 0x0c
    2030:	9d 87       	std	Y+13, r25	; 0x0d
    2032:	ae 87       	std	Y+14, r26	; 0x0e
    2034:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2036:	6c 85       	ldd	r22, Y+12	; 0x0c
    2038:	7d 85       	ldd	r23, Y+13	; 0x0d
    203a:	8e 85       	ldd	r24, Y+14	; 0x0e
    203c:	9f 85       	ldd	r25, Y+15	; 0x0f
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	4a ef       	ldi	r20, 0xFA	; 250
    2044:	54 e4       	ldi	r21, 0x44	; 68
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	88 87       	std	Y+8, r24	; 0x08
    2050:	99 87       	std	Y+9, r25	; 0x09
    2052:	aa 87       	std	Y+10, r26	; 0x0a
    2054:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2056:	68 85       	ldd	r22, Y+8	; 0x08
    2058:	79 85       	ldd	r23, Y+9	; 0x09
    205a:	8a 85       	ldd	r24, Y+10	; 0x0a
    205c:	9b 85       	ldd	r25, Y+11	; 0x0b
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	2c f4       	brge	.+10     	; 0x2078 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	9f 83       	std	Y+7, r25	; 0x07
    2074:	8e 83       	std	Y+6, r24	; 0x06
    2076:	3f c0       	rjmp	.+126    	; 0x20f6 <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2078:	68 85       	ldd	r22, Y+8	; 0x08
    207a:	79 85       	ldd	r23, Y+9	; 0x09
    207c:	8a 85       	ldd	r24, Y+10	; 0x0a
    207e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	3f ef       	ldi	r19, 0xFF	; 255
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	57 e4       	ldi	r21, 0x47	; 71
    2088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	4c f5       	brge	.+82     	; 0x20e2 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	6c 85       	ldd	r22, Y+12	; 0x0c
    2092:	7d 85       	ldd	r23, Y+13	; 0x0d
    2094:	8e 85       	ldd	r24, Y+14	; 0x0e
    2096:	9f 85       	ldd	r25, Y+15	; 0x0f
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e2       	ldi	r20, 0x20	; 32
    209e:	51 e4       	ldi	r21, 0x41	; 65
    20a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	bc 01       	movw	r22, r24
    20aa:	cd 01       	movw	r24, r26
    20ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	9f 83       	std	Y+7, r25	; 0x07
    20b6:	8e 83       	std	Y+6, r24	; 0x06
    20b8:	0f c0       	rjmp	.+30     	; 0x20d8 <LCD_voidSendCmnd+0x2ec>
    20ba:	88 ec       	ldi	r24, 0xC8	; 200
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	9d 83       	std	Y+5, r25	; 0x05
    20c0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c2:	8c 81       	ldd	r24, Y+4	; 0x04
    20c4:	9d 81       	ldd	r25, Y+5	; 0x05
    20c6:	01 97       	sbiw	r24, 0x01	; 1
    20c8:	f1 f7       	brne	.-4      	; 0x20c6 <LCD_voidSendCmnd+0x2da>
    20ca:	9d 83       	std	Y+5, r25	; 0x05
    20cc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ce:	8e 81       	ldd	r24, Y+6	; 0x06
    20d0:	9f 81       	ldd	r25, Y+7	; 0x07
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	9f 83       	std	Y+7, r25	; 0x07
    20d6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d8:	8e 81       	ldd	r24, Y+6	; 0x06
    20da:	9f 81       	ldd	r25, Y+7	; 0x07
    20dc:	00 97       	sbiw	r24, 0x00	; 0
    20de:	69 f7       	brne	.-38     	; 0x20ba <LCD_voidSendCmnd+0x2ce>
    20e0:	24 c0       	rjmp	.+72     	; 0x212a <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e2:	68 85       	ldd	r22, Y+8	; 0x08
    20e4:	79 85       	ldd	r23, Y+9	; 0x09
    20e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	9f 83       	std	Y+7, r25	; 0x07
    20f4:	8e 83       	std	Y+6, r24	; 0x06
    20f6:	8e 81       	ldd	r24, Y+6	; 0x06
    20f8:	9f 81       	ldd	r25, Y+7	; 0x07
    20fa:	9b 83       	std	Y+3, r25	; 0x03
    20fc:	8a 83       	std	Y+2, r24	; 0x02
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_voidSendCmnd+0x316>
    2106:	9b 83       	std	Y+3, r25	; 0x03
    2108:	8a 83       	std	Y+2, r24	; 0x02
    210a:	0f c0       	rjmp	.+30     	; 0x212a <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    210c:	69 89       	ldd	r22, Y+17	; 0x11
    210e:	7a 89       	ldd	r23, Y+18	; 0x12
    2110:	8b 89       	ldd	r24, Y+19	; 0x13
    2112:	9c 89       	ldd	r25, Y+20	; 0x14
    2114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	88 8b       	std	Y+16, r24	; 0x10
    211e:	88 89       	ldd	r24, Y+16	; 0x10
    2120:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	8a 95       	dec	r24
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_voidSendCmnd+0x338>
    2128:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    212a:	e1 96       	adiw	r28, 0x31	; 49
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	e1 97       	sbiw	r28, 0x31	; 49
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	61 e0       	ldi	r22, 0x01	; 1
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    2166:	83 e0       	ldi	r24, 0x03	; 3
    2168:	69 a9       	ldd	r22, Y+49	; 0x31
    216a:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	62 e0       	ldi	r22, 0x02	; 2
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a0 e8       	ldi	r26, 0x80	; 128
    217e:	bf e3       	ldi	r27, 0x3F	; 63
    2180:	8d a7       	std	Y+45, r24	; 0x2d
    2182:	9e a7       	std	Y+46, r25	; 0x2e
    2184:	af a7       	std	Y+47, r26	; 0x2f
    2186:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2188:	6d a5       	ldd	r22, Y+45	; 0x2d
    218a:	7e a5       	ldd	r23, Y+46	; 0x2e
    218c:	8f a5       	ldd	r24, Y+47	; 0x2f
    218e:	98 a9       	ldd	r25, Y+48	; 0x30
    2190:	2b ea       	ldi	r18, 0xAB	; 171
    2192:	3a ea       	ldi	r19, 0xAA	; 170
    2194:	4a e2       	ldi	r20, 0x2A	; 42
    2196:	50 e4       	ldi	r21, 0x40	; 64
    2198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	89 a7       	std	Y+41, r24	; 0x29
    21a2:	9a a7       	std	Y+42, r25	; 0x2a
    21a4:	ab a7       	std	Y+43, r26	; 0x2b
    21a6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    21a8:	69 a5       	ldd	r22, Y+41	; 0x29
    21aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    21ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    21ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5f e3       	ldi	r21, 0x3F	; 63
    21b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21bc:	88 23       	and	r24, r24
    21be:	1c f4       	brge	.+6      	; 0x21c6 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	88 a7       	std	Y+40, r24	; 0x28
    21c4:	91 c0       	rjmp	.+290    	; 0x22e8 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    21c6:	69 a5       	ldd	r22, Y+41	; 0x29
    21c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    21ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    21cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	53 e4       	ldi	r21, 0x43	; 67
    21d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	0c f0       	brlt	.+2      	; 0x21e0 <LCD_voidSendChar+0xa4>
    21de:	7b c0       	rjmp	.+246    	; 0x22d6 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    21e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    21e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    21e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e6:	98 a9       	ldd	r25, Y+48	; 0x30
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	4a e7       	ldi	r20, 0x7A	; 122
    21ee:	54 e4       	ldi	r21, 0x44	; 68
    21f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
    21f8:	8c a3       	std	Y+36, r24	; 0x24
    21fa:	9d a3       	std	Y+37, r25	; 0x25
    21fc:	ae a3       	std	Y+38, r26	; 0x26
    21fe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2200:	6c a1       	ldd	r22, Y+36	; 0x24
    2202:	7d a1       	ldd	r23, Y+37	; 0x25
    2204:	8e a1       	ldd	r24, Y+38	; 0x26
    2206:	9f a1       	ldd	r25, Y+39	; 0x27
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	4a ef       	ldi	r20, 0xFA	; 250
    220e:	54 e4       	ldi	r21, 0x44	; 68
    2210:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2214:	dc 01       	movw	r26, r24
    2216:	cb 01       	movw	r24, r22
    2218:	88 a3       	std	Y+32, r24	; 0x20
    221a:	99 a3       	std	Y+33, r25	; 0x21
    221c:	aa a3       	std	Y+34, r26	; 0x22
    221e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2220:	68 a1       	ldd	r22, Y+32	; 0x20
    2222:	79 a1       	ldd	r23, Y+33	; 0x21
    2224:	8a a1       	ldd	r24, Y+34	; 0x22
    2226:	9b a1       	ldd	r25, Y+35	; 0x23
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	2c f4       	brge	.+10     	; 0x2242 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	9f 8f       	std	Y+31, r25	; 0x1f
    223e:	8e 8f       	std	Y+30, r24	; 0x1e
    2240:	3f c0       	rjmp	.+126    	; 0x22c0 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2242:	68 a1       	ldd	r22, Y+32	; 0x20
    2244:	79 a1       	ldd	r23, Y+33	; 0x21
    2246:	8a a1       	ldd	r24, Y+34	; 0x22
    2248:	9b a1       	ldd	r25, Y+35	; 0x23
    224a:	20 e0       	ldi	r18, 0x00	; 0
    224c:	3f ef       	ldi	r19, 0xFF	; 255
    224e:	4f e7       	ldi	r20, 0x7F	; 127
    2250:	57 e4       	ldi	r21, 0x47	; 71
    2252:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2256:	18 16       	cp	r1, r24
    2258:	4c f5       	brge	.+82     	; 0x22ac <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225a:	6c a1       	ldd	r22, Y+36	; 0x24
    225c:	7d a1       	ldd	r23, Y+37	; 0x25
    225e:	8e a1       	ldd	r24, Y+38	; 0x26
    2260:	9f a1       	ldd	r25, Y+39	; 0x27
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	bc 01       	movw	r22, r24
    2274:	cd 01       	movw	r24, r26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9f 8f       	std	Y+31, r25	; 0x1f
    2280:	8e 8f       	std	Y+30, r24	; 0x1e
    2282:	0f c0       	rjmp	.+30     	; 0x22a2 <LCD_voidSendChar+0x166>
    2284:	88 ec       	ldi	r24, 0xC8	; 200
    2286:	90 e0       	ldi	r25, 0x00	; 0
    2288:	9d 8f       	std	Y+29, r25	; 0x1d
    228a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    228c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    228e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2290:	01 97       	sbiw	r24, 0x01	; 1
    2292:	f1 f7       	brne	.-4      	; 0x2290 <LCD_voidSendChar+0x154>
    2294:	9d 8f       	std	Y+29, r25	; 0x1d
    2296:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2298:	8e 8d       	ldd	r24, Y+30	; 0x1e
    229a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	9f 8f       	std	Y+31, r25	; 0x1f
    22a0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f7       	brne	.-38     	; 0x2284 <LCD_voidSendChar+0x148>
    22aa:	24 c0       	rjmp	.+72     	; 0x22f4 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ac:	68 a1       	ldd	r22, Y+32	; 0x20
    22ae:	79 a1       	ldd	r23, Y+33	; 0x21
    22b0:	8a a1       	ldd	r24, Y+34	; 0x22
    22b2:	9b a1       	ldd	r25, Y+35	; 0x23
    22b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	9f 8f       	std	Y+31, r25	; 0x1f
    22be:	8e 8f       	std	Y+30, r24	; 0x1e
    22c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22c4:	9b 8f       	std	Y+27, r25	; 0x1b
    22c6:	8a 8f       	std	Y+26, r24	; 0x1a
    22c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    22ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <LCD_voidSendChar+0x190>
    22d0:	9b 8f       	std	Y+27, r25	; 0x1b
    22d2:	8a 8f       	std	Y+26, r24	; 0x1a
    22d4:	0f c0       	rjmp	.+30     	; 0x22f4 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22d6:	69 a5       	ldd	r22, Y+41	; 0x29
    22d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    22da:	8b a5       	ldd	r24, Y+43	; 0x2b
    22dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    22de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	88 a7       	std	Y+40, r24	; 0x28
    22e8:	88 a5       	ldd	r24, Y+40	; 0x28
    22ea:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22ec:	89 8d       	ldd	r24, Y+25	; 0x19
    22ee:	8a 95       	dec	r24
    22f0:	f1 f7       	brne	.-4      	; 0x22ee <LCD_voidSendChar+0x1b2>
    22f2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	62 e0       	ldi	r22, 0x02	; 2
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 e8       	ldi	r26, 0x80	; 128
    2304:	bf e3       	ldi	r27, 0x3F	; 63
    2306:	8d 8b       	std	Y+21, r24	; 0x15
    2308:	9e 8b       	std	Y+22, r25	; 0x16
    230a:	af 8b       	std	Y+23, r26	; 0x17
    230c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	2b ea       	ldi	r18, 0xAB	; 171
    2318:	3a ea       	ldi	r19, 0xAA	; 170
    231a:	4a e2       	ldi	r20, 0x2A	; 42
    231c:	50 e4       	ldi	r21, 0x40	; 64
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	9a 8b       	std	Y+18, r25	; 0x12
    232a:	ab 8b       	std	Y+19, r26	; 0x13
    232c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    232e:	69 89       	ldd	r22, Y+17	; 0x11
    2330:	7a 89       	ldd	r23, Y+18	; 0x12
    2332:	8b 89       	ldd	r24, Y+19	; 0x13
    2334:	9c 89       	ldd	r25, Y+20	; 0x14
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2342:	88 23       	and	r24, r24
    2344:	1c f4       	brge	.+6      	; 0x234c <LCD_voidSendChar+0x210>
		__ticks = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	88 8b       	std	Y+16, r24	; 0x10
    234a:	91 c0       	rjmp	.+290    	; 0x246e <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    234c:	69 89       	ldd	r22, Y+17	; 0x11
    234e:	7a 89       	ldd	r23, Y+18	; 0x12
    2350:	8b 89       	ldd	r24, Y+19	; 0x13
    2352:	9c 89       	ldd	r25, Y+20	; 0x14
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	30 e0       	ldi	r19, 0x00	; 0
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	53 e4       	ldi	r21, 0x43	; 67
    235c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	0c f0       	brlt	.+2      	; 0x2366 <LCD_voidSendChar+0x22a>
    2364:	7b c0       	rjmp	.+246    	; 0x245c <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2366:	6d 89       	ldd	r22, Y+21	; 0x15
    2368:	7e 89       	ldd	r23, Y+22	; 0x16
    236a:	8f 89       	ldd	r24, Y+23	; 0x17
    236c:	98 8d       	ldd	r25, Y+24	; 0x18
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a e7       	ldi	r20, 0x7A	; 122
    2374:	54 e4       	ldi	r21, 0x44	; 68
    2376:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	8c 87       	std	Y+12, r24	; 0x0c
    2380:	9d 87       	std	Y+13, r25	; 0x0d
    2382:	ae 87       	std	Y+14, r26	; 0x0e
    2384:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2386:	6c 85       	ldd	r22, Y+12	; 0x0c
    2388:	7d 85       	ldd	r23, Y+13	; 0x0d
    238a:	8e 85       	ldd	r24, Y+14	; 0x0e
    238c:	9f 85       	ldd	r25, Y+15	; 0x0f
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	30 e0       	ldi	r19, 0x00	; 0
    2392:	4a ef       	ldi	r20, 0xFA	; 250
    2394:	54 e4       	ldi	r21, 0x44	; 68
    2396:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239a:	dc 01       	movw	r26, r24
    239c:	cb 01       	movw	r24, r22
    239e:	88 87       	std	Y+8, r24	; 0x08
    23a0:	99 87       	std	Y+9, r25	; 0x09
    23a2:	aa 87       	std	Y+10, r26	; 0x0a
    23a4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23a6:	68 85       	ldd	r22, Y+8	; 0x08
    23a8:	79 85       	ldd	r23, Y+9	; 0x09
    23aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ac:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	40 e8       	ldi	r20, 0x80	; 128
    23b4:	5f e3       	ldi	r21, 0x3F	; 63
    23b6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ba:	88 23       	and	r24, r24
    23bc:	2c f4       	brge	.+10     	; 0x23c8 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	9f 83       	std	Y+7, r25	; 0x07
    23c4:	8e 83       	std	Y+6, r24	; 0x06
    23c6:	3f c0       	rjmp	.+126    	; 0x2446 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    23c8:	68 85       	ldd	r22, Y+8	; 0x08
    23ca:	79 85       	ldd	r23, Y+9	; 0x09
    23cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    23d0:	20 e0       	ldi	r18, 0x00	; 0
    23d2:	3f ef       	ldi	r19, 0xFF	; 255
    23d4:	4f e7       	ldi	r20, 0x7F	; 127
    23d6:	57 e4       	ldi	r21, 0x47	; 71
    23d8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23dc:	18 16       	cp	r1, r24
    23de:	4c f5       	brge	.+82     	; 0x2432 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e0:	6c 85       	ldd	r22, Y+12	; 0x0c
    23e2:	7d 85       	ldd	r23, Y+13	; 0x0d
    23e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    23e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e2       	ldi	r20, 0x20	; 32
    23ee:	51 e4       	ldi	r21, 0x41	; 65
    23f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f4:	dc 01       	movw	r26, r24
    23f6:	cb 01       	movw	r24, r22
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9f 83       	std	Y+7, r25	; 0x07
    2406:	8e 83       	std	Y+6, r24	; 0x06
    2408:	0f c0       	rjmp	.+30     	; 0x2428 <LCD_voidSendChar+0x2ec>
    240a:	88 ec       	ldi	r24, 0xC8	; 200
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	9d 83       	std	Y+5, r25	; 0x05
    2410:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	01 97       	sbiw	r24, 0x01	; 1
    2418:	f1 f7       	brne	.-4      	; 0x2416 <LCD_voidSendChar+0x2da>
    241a:	9d 83       	std	Y+5, r25	; 0x05
    241c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241e:	8e 81       	ldd	r24, Y+6	; 0x06
    2420:	9f 81       	ldd	r25, Y+7	; 0x07
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	9f 83       	std	Y+7, r25	; 0x07
    2426:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2428:	8e 81       	ldd	r24, Y+6	; 0x06
    242a:	9f 81       	ldd	r25, Y+7	; 0x07
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	69 f7       	brne	.-38     	; 0x240a <LCD_voidSendChar+0x2ce>
    2430:	24 c0       	rjmp	.+72     	; 0x247a <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2432:	68 85       	ldd	r22, Y+8	; 0x08
    2434:	79 85       	ldd	r23, Y+9	; 0x09
    2436:	8a 85       	ldd	r24, Y+10	; 0x0a
    2438:	9b 85       	ldd	r25, Y+11	; 0x0b
    243a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	9f 83       	std	Y+7, r25	; 0x07
    2444:	8e 83       	std	Y+6, r24	; 0x06
    2446:	8e 81       	ldd	r24, Y+6	; 0x06
    2448:	9f 81       	ldd	r25, Y+7	; 0x07
    244a:	9b 83       	std	Y+3, r25	; 0x03
    244c:	8a 83       	std	Y+2, r24	; 0x02
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	9b 81       	ldd	r25, Y+3	; 0x03
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	f1 f7       	brne	.-4      	; 0x2452 <LCD_voidSendChar+0x316>
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	8a 83       	std	Y+2, r24	; 0x02
    245a:	0f c0       	rjmp	.+30     	; 0x247a <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    245c:	69 89       	ldd	r22, Y+17	; 0x11
    245e:	7a 89       	ldd	r23, Y+18	; 0x12
    2460:	8b 89       	ldd	r24, Y+19	; 0x13
    2462:	9c 89       	ldd	r25, Y+20	; 0x14
    2464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2468:	dc 01       	movw	r26, r24
    246a:	cb 01       	movw	r24, r22
    246c:	88 8b       	std	Y+16, r24	; 0x10
    246e:	88 89       	ldd	r24, Y+16	; 0x10
    2470:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2472:	89 81       	ldd	r24, Y+1	; 0x01
    2474:	8a 95       	dec	r24
    2476:	f1 f7       	brne	.-4      	; 0x2474 <LCD_voidSendChar+0x338>
    2478:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    247a:	e1 96       	adiw	r28, 0x31	; 49
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	00 d0       	rcall	.+0      	; 0x2492 <LCD_voidWriteString+0x6>
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	9a 83       	std	Y+2, r25	; 0x02
    2498:	89 83       	std	Y+1, r24	; 0x01
    249a:	0a c0       	rjmp	.+20     	; 0x24b0 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    249c:	e9 81       	ldd	r30, Y+1	; 0x01
    249e:	fa 81       	ldd	r31, Y+2	; 0x02
    24a0:	80 81       	ld	r24, Z
    24a2:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	9a 81       	ldd	r25, Y+2	; 0x02
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	9a 83       	std	Y+2, r25	; 0x02
    24ae:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    24b0:	e9 81       	ldd	r30, Y+1	; 0x01
    24b2:	fa 81       	ldd	r31, Y+2	; 0x02
    24b4:	80 81       	ld	r24, Z
    24b6:	88 23       	and	r24, r24
    24b8:	89 f7       	brne	.-30     	; 0x249c <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    24c4:	0f 93       	push	r16
    24c6:	1f 93       	push	r17
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	65 97       	sbiw	r28, 0x15	; 21
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	6a 8b       	std	Y+18, r22	; 0x12
    24de:	7b 8b       	std	Y+19, r23	; 0x13
    24e0:	8c 8b       	std	Y+20, r24	; 0x14
    24e2:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    24e4:	8f ef       	ldi	r24, 0xFF	; 255
    24e6:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    24e8:	8a 89       	ldd	r24, Y+18	; 0x12
    24ea:	9b 89       	ldd	r25, Y+19	; 0x13
    24ec:	ac 89       	ldd	r26, Y+20	; 0x14
    24ee:	bd 89       	ldd	r27, Y+21	; 0x15
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	a1 05       	cpc	r26, r1
    24f4:	b1 05       	cpc	r27, r1
    24f6:	99 f5       	brne	.+102    	; 0x255e <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    24f8:	80 e3       	ldi	r24, 0x30	; 48
    24fa:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    24fe:	4e c0       	rjmp	.+156    	; 0x259c <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2500:	8a 81       	ldd	r24, Y+2	; 0x02
    2502:	8f 5f       	subi	r24, 0xFF	; 255
    2504:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	08 2f       	mov	r16, r24
    250a:	11 27       	eor	r17, r17
    250c:	07 fd       	sbrc	r16, 7
    250e:	10 95       	com	r17
    2510:	8a 89       	ldd	r24, Y+18	; 0x12
    2512:	9b 89       	ldd	r25, Y+19	; 0x13
    2514:	ac 89       	ldd	r26, Y+20	; 0x14
    2516:	bd 89       	ldd	r27, Y+21	; 0x15
    2518:	2a e0       	ldi	r18, 0x0A	; 10
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e0       	ldi	r20, 0x00	; 0
    251e:	50 e0       	ldi	r21, 0x00	; 0
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 75 17 	call	0x2eea	; 0x2eea <__udivmodsi4>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	28 2f       	mov	r18, r24
    252e:	ce 01       	movw	r24, r28
    2530:	03 96       	adiw	r24, 0x03	; 3
    2532:	fc 01       	movw	r30, r24
    2534:	e0 0f       	add	r30, r16
    2536:	f1 1f       	adc	r31, r17
    2538:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    253a:	8a 89       	ldd	r24, Y+18	; 0x12
    253c:	9b 89       	ldd	r25, Y+19	; 0x13
    253e:	ac 89       	ldd	r26, Y+20	; 0x14
    2540:	bd 89       	ldd	r27, Y+21	; 0x15
    2542:	2a e0       	ldi	r18, 0x0A	; 10
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	50 e0       	ldi	r21, 0x00	; 0
    254a:	bc 01       	movw	r22, r24
    254c:	cd 01       	movw	r24, r26
    254e:	0e 94 75 17 	call	0x2eea	; 0x2eea <__udivmodsi4>
    2552:	da 01       	movw	r26, r20
    2554:	c9 01       	movw	r24, r18
    2556:	8a 8b       	std	Y+18, r24	; 0x12
    2558:	9b 8b       	std	Y+19, r25	; 0x13
    255a:	ac 8b       	std	Y+20, r26	; 0x14
    255c:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    255e:	8a 89       	ldd	r24, Y+18	; 0x12
    2560:	9b 89       	ldd	r25, Y+19	; 0x13
    2562:	ac 89       	ldd	r26, Y+20	; 0x14
    2564:	bd 89       	ldd	r27, Y+21	; 0x15
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	a1 05       	cpc	r26, r1
    256a:	b1 05       	cpc	r27, r1
    256c:	49 f6       	brne	.-110    	; 0x2500 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    256e:	8a 81       	ldd	r24, Y+2	; 0x02
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	11 c0       	rjmp	.+34     	; 0x2596 <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	28 2f       	mov	r18, r24
    2578:	33 27       	eor	r19, r19
    257a:	27 fd       	sbrc	r18, 7
    257c:	30 95       	com	r19
    257e:	ce 01       	movw	r24, r28
    2580:	03 96       	adiw	r24, 0x03	; 3
    2582:	fc 01       	movw	r30, r24
    2584:	e2 0f       	add	r30, r18
    2586:	f3 1f       	adc	r31, r19
    2588:	80 81       	ld	r24, Z
    258a:	80 5d       	subi	r24, 0xD0	; 208
    258c:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	81 50       	subi	r24, 0x01	; 1
    2594:	89 83       	std	Y+1, r24	; 0x01
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	64 f7       	brge	.-40     	; 0x2574 <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    259c:	65 96       	adiw	r28, 0x15	; 21
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	08 95       	ret

000025b2 <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <LCD_u8GoToXY+0x6>
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <LCD_u8GoToXY+0x8>
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	8a 83       	std	Y+2, r24	; 0x02
    25c2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    25c8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ca:	88 32       	cpi	r24, 0x28	; 40
    25cc:	d8 f4       	brcc	.+54     	; 0x2604 <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	3d 83       	std	Y+5, r19	; 0x05
    25d6:	2c 83       	std	Y+4, r18	; 0x04
    25d8:	8c 81       	ldd	r24, Y+4	; 0x04
    25da:	9d 81       	ldd	r25, Y+5	; 0x05
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	91 05       	cpc	r25, r1
    25e0:	31 f0       	breq	.+12     	; 0x25ee <LCD_u8GoToXY+0x3c>
    25e2:	2c 81       	ldd	r18, Y+4	; 0x04
    25e4:	3d 81       	ldd	r19, Y+5	; 0x05
    25e6:	22 30       	cpi	r18, 0x02	; 2
    25e8:	31 05       	cpc	r19, r1
    25ea:	31 f0       	breq	.+12     	; 0x25f8 <LCD_u8GoToXY+0x46>
    25ec:	0a c0       	rjmp	.+20     	; 0x2602 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	80 58       	subi	r24, 0x80	; 128
    25f2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
    25f6:	06 c0       	rjmp	.+12     	; 0x2604 <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    25f8:	8b 81       	ldd	r24, Y+3	; 0x03
    25fa:	80 54       	subi	r24, 0x40	; 64
    25fc:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
    2600:	01 c0       	rjmp	.+2      	; 0x2604 <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2602:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2604:	89 81       	ldd	r24, Y+1	; 0x01
}
    2606:	0f 90       	pop	r0
    2608:	0f 90       	pop	r0
    260a:	0f 90       	pop	r0
    260c:	0f 90       	pop	r0
    260e:	0f 90       	pop	r0
    2610:	cf 91       	pop	r28
    2612:	df 91       	pop	r29
    2614:	08 95       	ret

00002616 <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    2616:	df 93       	push	r29
    2618:	cf 93       	push	r28
    261a:	cd b7       	in	r28, 0x3d	; 61
    261c:	de b7       	in	r29, 0x3e	; 62
    261e:	2e 97       	sbiw	r28, 0x0e	; 14
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	90 e0       	ldi	r25, 0x00	; 0
    2634:	a0 ea       	ldi	r26, 0xA0	; 160
    2636:	b1 e4       	ldi	r27, 0x41	; 65
    2638:	8b 87       	std	Y+11, r24	; 0x0b
    263a:	9c 87       	std	Y+12, r25	; 0x0c
    263c:	ad 87       	std	Y+13, r26	; 0x0d
    263e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2640:	6b 85       	ldd	r22, Y+11	; 0x0b
    2642:	7c 85       	ldd	r23, Y+12	; 0x0c
    2644:	8d 85       	ldd	r24, Y+13	; 0x0d
    2646:	9e 85       	ldd	r25, Y+14	; 0x0e
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4a ef       	ldi	r20, 0xFA	; 250
    264e:	54 e4       	ldi	r21, 0x44	; 68
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	8f 83       	std	Y+7, r24	; 0x07
    265a:	98 87       	std	Y+8, r25	; 0x08
    265c:	a9 87       	std	Y+9, r26	; 0x09
    265e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2660:	6f 81       	ldd	r22, Y+7	; 0x07
    2662:	78 85       	ldd	r23, Y+8	; 0x08
    2664:	89 85       	ldd	r24, Y+9	; 0x09
    2666:	9a 85       	ldd	r25, Y+10	; 0x0a
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e8       	ldi	r20, 0x80	; 128
    266e:	5f e3       	ldi	r21, 0x3F	; 63
    2670:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2674:	88 23       	and	r24, r24
    2676:	2c f4       	brge	.+10     	; 0x2682 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	9e 83       	std	Y+6, r25	; 0x06
    267e:	8d 83       	std	Y+5, r24	; 0x05
    2680:	3f c0       	rjmp	.+126    	; 0x2700 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2682:	6f 81       	ldd	r22, Y+7	; 0x07
    2684:	78 85       	ldd	r23, Y+8	; 0x08
    2686:	89 85       	ldd	r24, Y+9	; 0x09
    2688:	9a 85       	ldd	r25, Y+10	; 0x0a
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	3f ef       	ldi	r19, 0xFF	; 255
    268e:	4f e7       	ldi	r20, 0x7F	; 127
    2690:	57 e4       	ldi	r21, 0x47	; 71
    2692:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2696:	18 16       	cp	r1, r24
    2698:	4c f5       	brge	.+82     	; 0x26ec <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269a:	6b 85       	ldd	r22, Y+11	; 0x0b
    269c:	7c 85       	ldd	r23, Y+12	; 0x0c
    269e:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e2       	ldi	r20, 0x20	; 32
    26a8:	51 e4       	ldi	r21, 0x41	; 65
    26aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ae:	dc 01       	movw	r26, r24
    26b0:	cb 01       	movw	r24, r22
    26b2:	bc 01       	movw	r22, r24
    26b4:	cd 01       	movw	r24, r26
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	9e 83       	std	Y+6, r25	; 0x06
    26c0:	8d 83       	std	Y+5, r24	; 0x05
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <LCD_voidClearScreen+0xcc>
    26c4:	88 ec       	ldi	r24, 0xC8	; 200
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	9c 83       	std	Y+4, r25	; 0x04
    26ca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26cc:	8b 81       	ldd	r24, Y+3	; 0x03
    26ce:	9c 81       	ldd	r25, Y+4	; 0x04
    26d0:	01 97       	sbiw	r24, 0x01	; 1
    26d2:	f1 f7       	brne	.-4      	; 0x26d0 <LCD_voidClearScreen+0xba>
    26d4:	9c 83       	std	Y+4, r25	; 0x04
    26d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26d8:	8d 81       	ldd	r24, Y+5	; 0x05
    26da:	9e 81       	ldd	r25, Y+6	; 0x06
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	9e 83       	std	Y+6, r25	; 0x06
    26e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e2:	8d 81       	ldd	r24, Y+5	; 0x05
    26e4:	9e 81       	ldd	r25, Y+6	; 0x06
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	69 f7       	brne	.-38     	; 0x26c4 <LCD_voidClearScreen+0xae>
    26ea:	14 c0       	rjmp	.+40     	; 0x2714 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26ec:	6f 81       	ldd	r22, Y+7	; 0x07
    26ee:	78 85       	ldd	r23, Y+8	; 0x08
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9e 83       	std	Y+6, r25	; 0x06
    26fe:	8d 83       	std	Y+5, r24	; 0x05
    2700:	8d 81       	ldd	r24, Y+5	; 0x05
    2702:	9e 81       	ldd	r25, Y+6	; 0x06
    2704:	9a 83       	std	Y+2, r25	; 0x02
    2706:	89 83       	std	Y+1, r24	; 0x01
    2708:	89 81       	ldd	r24, Y+1	; 0x01
    270a:	9a 81       	ldd	r25, Y+2	; 0x02
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	f1 f7       	brne	.-4      	; 0x270c <LCD_voidClearScreen+0xf6>
    2710:	9a 83       	std	Y+2, r25	; 0x02
    2712:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2714:	2e 96       	adiw	r28, 0x0e	; 14
    2716:	0f b6       	in	r0, 0x3f	; 63
    2718:	f8 94       	cli
    271a:	de bf       	out	0x3e, r29	; 62
    271c:	0f be       	out	0x3f, r0	; 63
    271e:	cd bf       	out	0x3d, r28	; 61
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	2a 97       	sbiw	r28, 0x0a	; 10
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	8c 83       	std	Y+4, r24	; 0x04
    273c:	7e 83       	std	Y+6, r23	; 0x06
    273e:	6d 83       	std	Y+5, r22	; 0x05
    2740:	4f 83       	std	Y+7, r20	; 0x07
    2742:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    2748:	88 e0       	ldi	r24, 0x08	; 8
    274a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    274c:	8c 81       	ldd	r24, Y+4	; 0x04
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	3a 87       	std	Y+10, r19	; 0x0a
    2754:	29 87       	std	Y+9, r18	; 0x09
    2756:	89 85       	ldd	r24, Y+9	; 0x09
    2758:	9a 85       	ldd	r25, Y+10	; 0x0a
    275a:	83 30       	cpi	r24, 0x03	; 3
    275c:	91 05       	cpc	r25, r1
    275e:	09 f4       	brne	.+2      	; 0x2762 <LCD_voidWriteSpecialChar+0x3c>
    2760:	8c c0       	rjmp	.+280    	; 0x287a <LCD_voidWriteSpecialChar+0x154>
    2762:	29 85       	ldd	r18, Y+9	; 0x09
    2764:	3a 85       	ldd	r19, Y+10	; 0x0a
    2766:	24 30       	cpi	r18, 0x04	; 4
    2768:	31 05       	cpc	r19, r1
    276a:	8c f4       	brge	.+34     	; 0x278e <LCD_voidWriteSpecialChar+0x68>
    276c:	89 85       	ldd	r24, Y+9	; 0x09
    276e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2770:	81 30       	cpi	r24, 0x01	; 1
    2772:	91 05       	cpc	r25, r1
    2774:	09 f4       	brne	.+2      	; 0x2778 <LCD_voidWriteSpecialChar+0x52>
    2776:	43 c0       	rjmp	.+134    	; 0x27fe <LCD_voidWriteSpecialChar+0xd8>
    2778:	29 85       	ldd	r18, Y+9	; 0x09
    277a:	3a 85       	ldd	r19, Y+10	; 0x0a
    277c:	22 30       	cpi	r18, 0x02	; 2
    277e:	31 05       	cpc	r19, r1
    2780:	0c f0       	brlt	.+2      	; 0x2784 <LCD_voidWriteSpecialChar+0x5e>
    2782:	5c c0       	rjmp	.+184    	; 0x283c <LCD_voidWriteSpecialChar+0x116>
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	d1 f0       	breq	.+52     	; 0x27c0 <LCD_voidWriteSpecialChar+0x9a>
    278c:	11 c1       	rjmp	.+546    	; 0x29b0 <LCD_voidWriteSpecialChar+0x28a>
    278e:	29 85       	ldd	r18, Y+9	; 0x09
    2790:	3a 85       	ldd	r19, Y+10	; 0x0a
    2792:	25 30       	cpi	r18, 0x05	; 5
    2794:	31 05       	cpc	r19, r1
    2796:	09 f4       	brne	.+2      	; 0x279a <LCD_voidWriteSpecialChar+0x74>
    2798:	ae c0       	rjmp	.+348    	; 0x28f6 <LCD_voidWriteSpecialChar+0x1d0>
    279a:	89 85       	ldd	r24, Y+9	; 0x09
    279c:	9a 85       	ldd	r25, Y+10	; 0x0a
    279e:	85 30       	cpi	r24, 0x05	; 5
    27a0:	91 05       	cpc	r25, r1
    27a2:	0c f4       	brge	.+2      	; 0x27a6 <LCD_voidWriteSpecialChar+0x80>
    27a4:	89 c0       	rjmp	.+274    	; 0x28b8 <LCD_voidWriteSpecialChar+0x192>
    27a6:	29 85       	ldd	r18, Y+9	; 0x09
    27a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    27aa:	26 30       	cpi	r18, 0x06	; 6
    27ac:	31 05       	cpc	r19, r1
    27ae:	09 f4       	brne	.+2      	; 0x27b2 <LCD_voidWriteSpecialChar+0x8c>
    27b0:	c1 c0       	rjmp	.+386    	; 0x2934 <LCD_voidWriteSpecialChar+0x20e>
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b6:	87 30       	cpi	r24, 0x07	; 7
    27b8:	91 05       	cpc	r25, r1
    27ba:	09 f4       	brne	.+2      	; 0x27be <LCD_voidWriteSpecialChar+0x98>
    27bc:	da c0       	rjmp	.+436    	; 0x2972 <LCD_voidWriteSpecialChar+0x24c>
    27be:	f8 c0       	rjmp	.+496    	; 0x29b0 <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    27c0:	80 e4       	ldi	r24, 0x40	; 64
    27c2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    27c6:	19 82       	std	Y+1, r1	; 0x01
    27c8:	0e c0       	rjmp	.+28     	; 0x27e6 <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	fc 01       	movw	r30, r24
    27d6:	e2 0f       	add	r30, r18
    27d8:	f3 1f       	adc	r31, r19
    27da:	80 81       	ld	r24, Z
    27dc:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	8f 5f       	subi	r24, 0xFF	; 255
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	99 81       	ldd	r25, Y+1	; 0x01
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	98 17       	cp	r25, r24
    27ec:	70 f3       	brcs	.-36     	; 0x27ca <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    27ee:	8f 81       	ldd	r24, Y+7	; 0x07
    27f0:	68 85       	ldd	r22, Y+8	; 0x08
    27f2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    27f6:	8c 81       	ldd	r24, Y+4	; 0x04
    27f8:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    27fc:	da c0       	rjmp	.+436    	; 0x29b2 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    27fe:	88 e4       	ldi	r24, 0x48	; 72
    2800:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2804:	19 82       	std	Y+1, r1	; 0x01
    2806:	0e c0       	rjmp	.+28     	; 0x2824 <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	fc 01       	movw	r30, r24
    2814:	e2 0f       	add	r30, r18
    2816:	f3 1f       	adc	r31, r19
    2818:	80 81       	ld	r24, Z
    281a:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	8f 5f       	subi	r24, 0xFF	; 255
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	99 81       	ldd	r25, Y+1	; 0x01
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	98 17       	cp	r25, r24
    282a:	70 f3       	brcs	.-36     	; 0x2808 <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    282c:	8f 81       	ldd	r24, Y+7	; 0x07
    282e:	68 85       	ldd	r22, Y+8	; 0x08
    2830:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    283a:	bb c0       	rjmp	.+374    	; 0x29b2 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    283c:	80 e5       	ldi	r24, 0x50	; 80
    283e:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2842:	19 82       	std	Y+1, r1	; 0x01
    2844:	0e c0       	rjmp	.+28     	; 0x2862 <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	fc 01       	movw	r30, r24
    2852:	e2 0f       	add	r30, r18
    2854:	f3 1f       	adc	r31, r19
    2856:	80 81       	ld	r24, Z
    2858:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	99 81       	ldd	r25, Y+1	; 0x01
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	98 17       	cp	r25, r24
    2868:	70 f3       	brcs	.-36     	; 0x2846 <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    286a:	8f 81       	ldd	r24, Y+7	; 0x07
    286c:	68 85       	ldd	r22, Y+8	; 0x08
    286e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    2878:	9c c0       	rjmp	.+312    	; 0x29b2 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    287a:	88 e5       	ldi	r24, 0x58	; 88
    287c:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2880:	19 82       	std	Y+1, r1	; 0x01
    2882:	0e c0       	rjmp	.+28     	; 0x28a0 <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	fc 01       	movw	r30, r24
    2890:	e2 0f       	add	r30, r18
    2892:	f3 1f       	adc	r31, r19
    2894:	80 81       	ld	r24, Z
    2896:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	99 81       	ldd	r25, Y+1	; 0x01
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	98 17       	cp	r25, r24
    28a6:	70 f3       	brcs	.-36     	; 0x2884 <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    28a8:	8f 81       	ldd	r24, Y+7	; 0x07
    28aa:	68 85       	ldd	r22, Y+8	; 0x08
    28ac:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    28b6:	7d c0       	rjmp	.+250    	; 0x29b2 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    28b8:	80 e6       	ldi	r24, 0x60	; 96
    28ba:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    28be:	19 82       	std	Y+1, r1	; 0x01
    28c0:	0e c0       	rjmp	.+28     	; 0x28de <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	fc 01       	movw	r30, r24
    28ce:	e2 0f       	add	r30, r18
    28d0:	f3 1f       	adc	r31, r19
    28d2:	80 81       	ld	r24, Z
    28d4:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	89 83       	std	Y+1, r24	; 0x01
    28de:	99 81       	ldd	r25, Y+1	; 0x01
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	98 17       	cp	r25, r24
    28e4:	70 f3       	brcs	.-36     	; 0x28c2 <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    28e6:	8f 81       	ldd	r24, Y+7	; 0x07
    28e8:	68 85       	ldd	r22, Y+8	; 0x08
    28ea:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    28ee:	8c 81       	ldd	r24, Y+4	; 0x04
    28f0:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    28f4:	5e c0       	rjmp	.+188    	; 0x29b2 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    28f6:	88 e6       	ldi	r24, 0x68	; 104
    28f8:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    28fc:	19 82       	std	Y+1, r1	; 0x01
    28fe:	0e c0       	rjmp	.+28     	; 0x291c <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	fc 01       	movw	r30, r24
    290c:	e2 0f       	add	r30, r18
    290e:	f3 1f       	adc	r31, r19
    2910:	80 81       	ld	r24, Z
    2912:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	8f 5f       	subi	r24, 0xFF	; 255
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	99 81       	ldd	r25, Y+1	; 0x01
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	98 17       	cp	r25, r24
    2922:	70 f3       	brcs	.-36     	; 0x2900 <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2924:	8f 81       	ldd	r24, Y+7	; 0x07
    2926:	68 85       	ldd	r22, Y+8	; 0x08
    2928:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    292c:	8c 81       	ldd	r24, Y+4	; 0x04
    292e:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    2932:	3f c0       	rjmp	.+126    	; 0x29b2 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    2934:	80 e7       	ldi	r24, 0x70	; 112
    2936:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    293a:	19 82       	std	Y+1, r1	; 0x01
    293c:	0e c0       	rjmp	.+28     	; 0x295a <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	28 2f       	mov	r18, r24
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	8d 81       	ldd	r24, Y+5	; 0x05
    2946:	9e 81       	ldd	r25, Y+6	; 0x06
    2948:	fc 01       	movw	r30, r24
    294a:	e2 0f       	add	r30, r18
    294c:	f3 1f       	adc	r31, r19
    294e:	80 81       	ld	r24, Z
    2950:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	8f 5f       	subi	r24, 0xFF	; 255
    2958:	89 83       	std	Y+1, r24	; 0x01
    295a:	99 81       	ldd	r25, Y+1	; 0x01
    295c:	8a 81       	ldd	r24, Y+2	; 0x02
    295e:	98 17       	cp	r25, r24
    2960:	70 f3       	brcs	.-36     	; 0x293e <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2962:	8f 81       	ldd	r24, Y+7	; 0x07
    2964:	68 85       	ldd	r22, Y+8	; 0x08
    2966:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    296a:	8c 81       	ldd	r24, Y+4	; 0x04
    296c:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    2970:	20 c0       	rjmp	.+64     	; 0x29b2 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    2972:	88 e7       	ldi	r24, 0x78	; 120
    2974:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2978:	19 82       	std	Y+1, r1	; 0x01
    297a:	0e c0       	rjmp	.+28     	; 0x2998 <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    297c:	89 81       	ldd	r24, Y+1	; 0x01
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	fc 01       	movw	r30, r24
    2988:	e2 0f       	add	r30, r18
    298a:	f3 1f       	adc	r31, r19
    298c:	80 81       	ld	r24, Z
    298e:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    2992:	89 81       	ldd	r24, Y+1	; 0x01
    2994:	8f 5f       	subi	r24, 0xFF	; 255
    2996:	89 83       	std	Y+1, r24	; 0x01
    2998:	99 81       	ldd	r25, Y+1	; 0x01
    299a:	8a 81       	ldd	r24, Y+2	; 0x02
    299c:	98 17       	cp	r25, r24
    299e:	70 f3       	brcs	.-36     	; 0x297c <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    29a0:	8f 81       	ldd	r24, Y+7	; 0x07
    29a2:	68 85       	ldd	r22, Y+8	; 0x08
    29a4:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    29a8:	8c 81       	ldd	r24, Y+4	; 0x04
    29aa:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_voidSendChar>
    29ae:	01 c0       	rjmp	.+2      	; 0x29b2 <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    29b0:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
}
    29b4:	2a 96       	adiw	r28, 0x0a	; 10
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	e1 97       	sbiw	r28, 0x31	; 49
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	60 e0       	ldi	r22, 0x00	; 0
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	61 e0       	ldi	r22, 0x01	; 1
    29ea:	40 e0       	ldi	r20, 0x00	; 0
    29ec:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    29f0:	89 a9       	ldd	r24, Y+49	; 0x31
    29f2:	98 2f       	mov	r25, r24
    29f4:	92 95       	swap	r25
    29f6:	90 7f       	andi	r25, 0xF0	; 240
    29f8:	83 e0       	ldi	r24, 0x03	; 3
    29fa:	69 2f       	mov	r22, r25
    29fc:	0e 94 93 0b 	call	0x1726	; 0x1726 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	62 e0       	ldi	r22, 0x02	; 2
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	a0 e8       	ldi	r26, 0x80	; 128
    2a10:	bf e3       	ldi	r27, 0x3F	; 63
    2a12:	8d a7       	std	Y+45, r24	; 0x2d
    2a14:	9e a7       	std	Y+46, r25	; 0x2e
    2a16:	af a7       	std	Y+47, r26	; 0x2f
    2a18:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a1a:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a1c:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a20:	98 a9       	ldd	r25, Y+48	; 0x30
    2a22:	2b ea       	ldi	r18, 0xAB	; 171
    2a24:	3a ea       	ldi	r19, 0xAA	; 170
    2a26:	4a e2       	ldi	r20, 0x2A	; 42
    2a28:	50 e4       	ldi	r21, 0x40	; 64
    2a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2e:	dc 01       	movw	r26, r24
    2a30:	cb 01       	movw	r24, r22
    2a32:	89 a7       	std	Y+41, r24	; 0x29
    2a34:	9a a7       	std	Y+42, r25	; 0x2a
    2a36:	ab a7       	std	Y+43, r26	; 0x2b
    2a38:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2a3a:	69 a5       	ldd	r22, Y+41	; 0x29
    2a3c:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a3e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a40:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	5f e3       	ldi	r21, 0x3F	; 63
    2a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a4e:	88 23       	and	r24, r24
    2a50:	1c f4       	brge	.+6      	; 0x2a58 <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	88 a7       	std	Y+40, r24	; 0x28
    2a56:	91 c0       	rjmp	.+290    	; 0x2b7a <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    2a58:	69 a5       	ldd	r22, Y+41	; 0x29
    2a5a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2a5c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a5e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	4f e7       	ldi	r20, 0x7F	; 127
    2a66:	53 e4       	ldi	r21, 0x43	; 67
    2a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a6c:	18 16       	cp	r1, r24
    2a6e:	0c f0       	brlt	.+2      	; 0x2a72 <LCD_voidSendHalfCmnd+0xac>
    2a70:	7b c0       	rjmp	.+246    	; 0x2b68 <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    2a72:	6d a5       	ldd	r22, Y+45	; 0x2d
    2a74:	7e a5       	ldd	r23, Y+46	; 0x2e
    2a76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a78:	98 a9       	ldd	r25, Y+48	; 0x30
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	4a e7       	ldi	r20, 0x7A	; 122
    2a80:	54 e4       	ldi	r21, 0x44	; 68
    2a82:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	8c a3       	std	Y+36, r24	; 0x24
    2a8c:	9d a3       	std	Y+37, r25	; 0x25
    2a8e:	ae a3       	std	Y+38, r26	; 0x26
    2a90:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a92:	6c a1       	ldd	r22, Y+36	; 0x24
    2a94:	7d a1       	ldd	r23, Y+37	; 0x25
    2a96:	8e a1       	ldd	r24, Y+38	; 0x26
    2a98:	9f a1       	ldd	r25, Y+39	; 0x27
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	4a ef       	ldi	r20, 0xFA	; 250
    2aa0:	54 e4       	ldi	r21, 0x44	; 68
    2aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	88 a3       	std	Y+32, r24	; 0x20
    2aac:	99 a3       	std	Y+33, r25	; 0x21
    2aae:	aa a3       	std	Y+34, r26	; 0x22
    2ab0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2ab2:	68 a1       	ldd	r22, Y+32	; 0x20
    2ab4:	79 a1       	ldd	r23, Y+33	; 0x21
    2ab6:	8a a1       	ldd	r24, Y+34	; 0x22
    2ab8:	9b a1       	ldd	r25, Y+35	; 0x23
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e8       	ldi	r20, 0x80	; 128
    2ac0:	5f e3       	ldi	r21, 0x3F	; 63
    2ac2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ac6:	88 23       	and	r24, r24
    2ac8:	2c f4       	brge	.+10     	; 0x2ad4 <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	9f 8f       	std	Y+31, r25	; 0x1f
    2ad0:	8e 8f       	std	Y+30, r24	; 0x1e
    2ad2:	3f c0       	rjmp	.+126    	; 0x2b52 <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    2ad4:	68 a1       	ldd	r22, Y+32	; 0x20
    2ad6:	79 a1       	ldd	r23, Y+33	; 0x21
    2ad8:	8a a1       	ldd	r24, Y+34	; 0x22
    2ada:	9b a1       	ldd	r25, Y+35	; 0x23
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	4c f5       	brge	.+82     	; 0x2b3e <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aec:	6c a1       	ldd	r22, Y+36	; 0x24
    2aee:	7d a1       	ldd	r23, Y+37	; 0x25
    2af0:	8e a1       	ldd	r24, Y+38	; 0x26
    2af2:	9f a1       	ldd	r25, Y+39	; 0x27
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e2       	ldi	r20, 0x20	; 32
    2afa:	51 e4       	ldi	r21, 0x41	; 65
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	9f 8f       	std	Y+31, r25	; 0x1f
    2b12:	8e 8f       	std	Y+30, r24	; 0x1e
    2b14:	0f c0       	rjmp	.+30     	; 0x2b34 <LCD_voidSendHalfCmnd+0x16e>
    2b16:	88 ec       	ldi	r24, 0xC8	; 200
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9d 8f       	std	Y+29, r25	; 0x1d
    2b1c:	8c 8f       	std	Y+28, r24	; 0x1c
    2b1e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2b20:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	f1 f7       	brne	.-4      	; 0x2b22 <LCD_voidSendHalfCmnd+0x15c>
    2b26:	9d 8f       	std	Y+29, r25	; 0x1d
    2b28:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b2c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	9f 8f       	std	Y+31, r25	; 0x1f
    2b32:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b36:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	69 f7       	brne	.-38     	; 0x2b16 <LCD_voidSendHalfCmnd+0x150>
    2b3c:	24 c0       	rjmp	.+72     	; 0x2b86 <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3e:	68 a1       	ldd	r22, Y+32	; 0x20
    2b40:	79 a1       	ldd	r23, Y+33	; 0x21
    2b42:	8a a1       	ldd	r24, Y+34	; 0x22
    2b44:	9b a1       	ldd	r25, Y+35	; 0x23
    2b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	9f 8f       	std	Y+31, r25	; 0x1f
    2b50:	8e 8f       	std	Y+30, r24	; 0x1e
    2b52:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b54:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2b56:	9b 8f       	std	Y+27, r25	; 0x1b
    2b58:	8a 8f       	std	Y+26, r24	; 0x1a
    2b5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2b5c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <LCD_voidSendHalfCmnd+0x198>
    2b62:	9b 8f       	std	Y+27, r25	; 0x1b
    2b64:	8a 8f       	std	Y+26, r24	; 0x1a
    2b66:	0f c0       	rjmp	.+30     	; 0x2b86 <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2b68:	69 a5       	ldd	r22, Y+41	; 0x29
    2b6a:	7a a5       	ldd	r23, Y+42	; 0x2a
    2b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b74:	dc 01       	movw	r26, r24
    2b76:	cb 01       	movw	r24, r22
    2b78:	88 a7       	std	Y+40, r24	; 0x28
    2b7a:	88 a5       	ldd	r24, Y+40	; 0x28
    2b7c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b7e:	89 8d       	ldd	r24, Y+25	; 0x19
    2b80:	8a 95       	dec	r24
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <LCD_voidSendHalfCmnd+0x1ba>
    2b84:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	62 e0       	ldi	r22, 0x02	; 2
    2b8a:	40 e0       	ldi	r20, 0x00	; 0
    2b8c:	0e 94 07 09 	call	0x120e	; 0x120e <DIO_u8SetPinValue>
    2b90:	80 e0       	ldi	r24, 0x00	; 0
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	a0 e8       	ldi	r26, 0x80	; 128
    2b96:	bf e3       	ldi	r27, 0x3F	; 63
    2b98:	8d 8b       	std	Y+21, r24	; 0x15
    2b9a:	9e 8b       	std	Y+22, r25	; 0x16
    2b9c:	af 8b       	std	Y+23, r26	; 0x17
    2b9e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba8:	2b ea       	ldi	r18, 0xAB	; 171
    2baa:	3a ea       	ldi	r19, 0xAA	; 170
    2bac:	4a e2       	ldi	r20, 0x2A	; 42
    2bae:	50 e4       	ldi	r21, 0x40	; 64
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	89 8b       	std	Y+17, r24	; 0x11
    2bba:	9a 8b       	std	Y+18, r25	; 0x12
    2bbc:	ab 8b       	std	Y+19, r26	; 0x13
    2bbe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2bc0:	69 89       	ldd	r22, Y+17	; 0x11
    2bc2:	7a 89       	ldd	r23, Y+18	; 0x12
    2bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e8       	ldi	r20, 0x80	; 128
    2bce:	5f e3       	ldi	r21, 0x3F	; 63
    2bd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd4:	88 23       	and	r24, r24
    2bd6:	1c f4       	brge	.+6      	; 0x2bde <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	88 8b       	std	Y+16, r24	; 0x10
    2bdc:	91 c0       	rjmp	.+290    	; 0x2d00 <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    2bde:	69 89       	ldd	r22, Y+17	; 0x11
    2be0:	7a 89       	ldd	r23, Y+18	; 0x12
    2be2:	8b 89       	ldd	r24, Y+19	; 0x13
    2be4:	9c 89       	ldd	r25, Y+20	; 0x14
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	4f e7       	ldi	r20, 0x7F	; 127
    2bec:	53 e4       	ldi	r21, 0x43	; 67
    2bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf2:	18 16       	cp	r1, r24
    2bf4:	0c f0       	brlt	.+2      	; 0x2bf8 <LCD_voidSendHalfCmnd+0x232>
    2bf6:	7b c0       	rjmp	.+246    	; 0x2cee <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    2bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    2bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	4a e7       	ldi	r20, 0x7A	; 122
    2c06:	54 e4       	ldi	r21, 0x44	; 68
    2c08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	8c 87       	std	Y+12, r24	; 0x0c
    2c12:	9d 87       	std	Y+13, r25	; 0x0d
    2c14:	ae 87       	std	Y+14, r26	; 0x0e
    2c16:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c18:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c1a:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	4a ef       	ldi	r20, 0xFA	; 250
    2c26:	54 e4       	ldi	r21, 0x44	; 68
    2c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	88 87       	std	Y+8, r24	; 0x08
    2c32:	99 87       	std	Y+9, r25	; 0x09
    2c34:	aa 87       	std	Y+10, r26	; 0x0a
    2c36:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c38:	68 85       	ldd	r22, Y+8	; 0x08
    2c3a:	79 85       	ldd	r23, Y+9	; 0x09
    2c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e8       	ldi	r20, 0x80	; 128
    2c46:	5f e3       	ldi	r21, 0x3F	; 63
    2c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c4c:	88 23       	and	r24, r24
    2c4e:	2c f4       	brge	.+10     	; 0x2c5a <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	9f 83       	std	Y+7, r25	; 0x07
    2c56:	8e 83       	std	Y+6, r24	; 0x06
    2c58:	3f c0       	rjmp	.+126    	; 0x2cd8 <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    2c5a:	68 85       	ldd	r22, Y+8	; 0x08
    2c5c:	79 85       	ldd	r23, Y+9	; 0x09
    2c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	3f ef       	ldi	r19, 0xFF	; 255
    2c66:	4f e7       	ldi	r20, 0x7F	; 127
    2c68:	57 e4       	ldi	r21, 0x47	; 71
    2c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c6e:	18 16       	cp	r1, r24
    2c70:	4c f5       	brge	.+82     	; 0x2cc4 <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c72:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c74:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c76:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c78:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	40 e2       	ldi	r20, 0x20	; 32
    2c80:	51 e4       	ldi	r21, 0x41	; 65
    2c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c86:	dc 01       	movw	r26, r24
    2c88:	cb 01       	movw	r24, r22
    2c8a:	bc 01       	movw	r22, r24
    2c8c:	cd 01       	movw	r24, r26
    2c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	9f 83       	std	Y+7, r25	; 0x07
    2c98:	8e 83       	std	Y+6, r24	; 0x06
    2c9a:	0f c0       	rjmp	.+30     	; 0x2cba <LCD_voidSendHalfCmnd+0x2f4>
    2c9c:	88 ec       	ldi	r24, 0xC8	; 200
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9d 83       	std	Y+5, r25	; 0x05
    2ca2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ca8:	01 97       	sbiw	r24, 0x01	; 1
    2caa:	f1 f7       	brne	.-4      	; 0x2ca8 <LCD_voidSendHalfCmnd+0x2e2>
    2cac:	9d 83       	std	Y+5, r25	; 0x05
    2cae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb4:	01 97       	sbiw	r24, 0x01	; 1
    2cb6:	9f 83       	std	Y+7, r25	; 0x07
    2cb8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cba:	8e 81       	ldd	r24, Y+6	; 0x06
    2cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cbe:	00 97       	sbiw	r24, 0x00	; 0
    2cc0:	69 f7       	brne	.-38     	; 0x2c9c <LCD_voidSendHalfCmnd+0x2d6>
    2cc2:	24 c0       	rjmp	.+72     	; 0x2d0c <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cc4:	68 85       	ldd	r22, Y+8	; 0x08
    2cc6:	79 85       	ldd	r23, Y+9	; 0x09
    2cc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cca:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cd0:	dc 01       	movw	r26, r24
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	9f 83       	std	Y+7, r25	; 0x07
    2cd6:	8e 83       	std	Y+6, r24	; 0x06
    2cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cda:	9f 81       	ldd	r25, Y+7	; 0x07
    2cdc:	9b 83       	std	Y+3, r25	; 0x03
    2cde:	8a 83       	std	Y+2, r24	; 0x02
    2ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	f1 f7       	brne	.-4      	; 0x2ce4 <LCD_voidSendHalfCmnd+0x31e>
    2ce8:	9b 83       	std	Y+3, r25	; 0x03
    2cea:	8a 83       	std	Y+2, r24	; 0x02
    2cec:	0f c0       	rjmp	.+30     	; 0x2d0c <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cee:	69 89       	ldd	r22, Y+17	; 0x11
    2cf0:	7a 89       	ldd	r23, Y+18	; 0x12
    2cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	88 8b       	std	Y+16, r24	; 0x10
    2d00:	88 89       	ldd	r24, Y+16	; 0x10
    2d02:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	8a 95       	dec	r24
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <LCD_voidSendHalfCmnd+0x340>
    2d0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
}
    2d0c:	e1 96       	adiw	r28, 0x31	; 49
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	cf 91       	pop	r28
    2d1a:	df 91       	pop	r29
    2d1c:	08 95       	ret

00002d1e <main>:




int main()
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	cd b7       	in	r28, 0x3d	; 61
    2d24:	de b7       	in	r29, 0x3e	; 62
    2d26:	a0 97       	sbiw	r28, 0x20	; 32
    2d28:	0f b6       	in	r0, 0x3f	; 63
    2d2a:	f8 94       	cli
    2d2c:	de bf       	out	0x3e, r29	; 62
    2d2e:	0f be       	out	0x3f, r0	; 63
    2d30:	cd bf       	out	0x3d, r28	; 61
	//Initialization
	DIO_voidInit();
    2d32:	0e 94 bb 07 	call	0xf76	; 0xf76 <DIO_voidInit>
	LCD_voidInit();
    2d36:	0e 94 33 0c 	call	0x1866	; 0x1866 <LCD_voidInit>
	ADC_voidInit();
    2d3a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	u16 Local_u16DigitalValue,Local_u16AnalogValue,Local_u16PreviousAnalogValue = 0xFFFF;
    2d3e:	8f ef       	ldi	r24, 0xFF	; 255
    2d40:	9f ef       	ldi	r25, 0xFF	; 255
    2d42:	9a 83       	std	Y+2, r25	; 0x02
    2d44:	89 83       	std	Y+1, r24	; 0x01
			0b01010,
			0b00100,
			0b00100,
			0b01010,
			0b10001
	};
    2d46:	ae 01       	movw	r20, r28
    2d48:	49 5f       	subi	r20, 0xF9	; 249
    2d4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d4c:	58 8f       	std	Y+24, r21	; 0x18
    2d4e:	4f 8b       	std	Y+23, r20	; 0x17
    2d50:	8f e9       	ldi	r24, 0x9F	; 159
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	9a 8f       	std	Y+26, r25	; 0x1a
    2d56:	89 8f       	std	Y+25, r24	; 0x19
    2d58:	98 e0       	ldi	r25, 0x08	; 8
    2d5a:	9b 8f       	std	Y+27, r25	; 0x1b
    2d5c:	e9 8d       	ldd	r30, Y+25	; 0x19
    2d5e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2d60:	00 80       	ld	r0, Z
    2d62:	49 8d       	ldd	r20, Y+25	; 0x19
    2d64:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2d66:	4f 5f       	subi	r20, 0xFF	; 255
    2d68:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6a:	5a 8f       	std	Y+26, r21	; 0x1a
    2d6c:	49 8f       	std	Y+25, r20	; 0x19
    2d6e:	ef 89       	ldd	r30, Y+23	; 0x17
    2d70:	f8 8d       	ldd	r31, Y+24	; 0x18
    2d72:	00 82       	st	Z, r0
    2d74:	4f 89       	ldd	r20, Y+23	; 0x17
    2d76:	58 8d       	ldd	r21, Y+24	; 0x18
    2d78:	4f 5f       	subi	r20, 0xFF	; 255
    2d7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d7c:	58 8f       	std	Y+24, r21	; 0x18
    2d7e:	4f 8b       	std	Y+23, r20	; 0x17
    2d80:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2d82:	51 50       	subi	r21, 0x01	; 1
    2d84:	5b 8f       	std	Y+27, r21	; 0x1b
    2d86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d88:	88 23       	and	r24, r24
    2d8a:	41 f7       	brne	.-48     	; 0x2d5c <main+0x3e>
			0b10010,
			0b01101,
			0b10010,
			0b00000,
			0b00000
	};
    2d8c:	fe 01       	movw	r30, r28
    2d8e:	3f 96       	adiw	r30, 0x0f	; 15
    2d90:	fd 8f       	std	Y+29, r31	; 0x1d
    2d92:	ec 8f       	std	Y+28, r30	; 0x1c
    2d94:	47 e9       	ldi	r20, 0x97	; 151
    2d96:	50 e0       	ldi	r21, 0x00	; 0
    2d98:	5f 8f       	std	Y+31, r21	; 0x1f
    2d9a:	4e 8f       	std	Y+30, r20	; 0x1e
    2d9c:	58 e0       	ldi	r21, 0x08	; 8
    2d9e:	58 a3       	std	Y+32, r21	; 0x20
    2da0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    2da2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2da4:	00 80       	ld	r0, Z
    2da6:	4e 8d       	ldd	r20, Y+30	; 0x1e
    2da8:	5f 8d       	ldd	r21, Y+31	; 0x1f
    2daa:	4f 5f       	subi	r20, 0xFF	; 255
    2dac:	5f 4f       	sbci	r21, 0xFF	; 255
    2dae:	5f 8f       	std	Y+31, r21	; 0x1f
    2db0:	4e 8f       	std	Y+30, r20	; 0x1e
    2db2:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2db4:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2db6:	00 82       	st	Z, r0
    2db8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2dba:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2dbc:	4f 5f       	subi	r20, 0xFF	; 255
    2dbe:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc0:	5d 8f       	std	Y+29, r21	; 0x1d
    2dc2:	4c 8f       	std	Y+28, r20	; 0x1c
    2dc4:	58 a1       	ldd	r21, Y+32	; 0x20
    2dc6:	51 50       	subi	r21, 0x01	; 1
    2dc8:	58 a3       	std	Y+32, r21	; 0x20
    2dca:	88 a1       	ldd	r24, Y+32	; 0x20
    2dcc:	88 23       	and	r24, r24
    2dce:	41 f7       	brne	.-48     	; 0x2da0 <main+0x82>
	while(1)
	{
		/* Get ADC Value*/
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0,&Local_u16DigitalValue);
    2dd0:	9e 01       	movw	r18, r28
    2dd2:	2b 5f       	subi	r18, 0xFB	; 251
    2dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	b9 01       	movw	r22, r18
    2dda:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValueSynchNonBlocking>
		Local_u16AnalogValue = (u16)((Local_u16DigitalValue * 5000UL)/1024);
    2dde:	8d 81       	ldd	r24, Y+5	; 0x05
    2de0:	9e 81       	ldd	r25, Y+6	; 0x06
    2de2:	cc 01       	movw	r24, r24
    2de4:	a0 e0       	ldi	r26, 0x00	; 0
    2de6:	b0 e0       	ldi	r27, 0x00	; 0
    2de8:	28 e8       	ldi	r18, 0x88	; 136
    2dea:	33 e1       	ldi	r19, 0x13	; 19
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	50 e0       	ldi	r21, 0x00	; 0
    2df0:	bc 01       	movw	r22, r24
    2df2:	cd 01       	movw	r24, r26
    2df4:	0e 94 56 17 	call	0x2eac	; 0x2eac <__mulsi3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	07 2e       	mov	r0, r23
    2dfe:	7a e0       	ldi	r23, 0x0A	; 10
    2e00:	b6 95       	lsr	r27
    2e02:	a7 95       	ror	r26
    2e04:	97 95       	ror	r25
    2e06:	87 95       	ror	r24
    2e08:	7a 95       	dec	r23
    2e0a:	d1 f7       	brne	.-12     	; 0x2e00 <main+0xe2>
    2e0c:	70 2d       	mov	r23, r0
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
		//Check if the ADC Value is Changed
		if((s16)(Local_u16AnalogValue - Local_u16PreviousAnalogValue) > 0 || (s16)(Local_u16AnalogValue - Local_u16PreviousAnalogValue) < 0 )
    2e12:	2b 81       	ldd	r18, Y+3	; 0x03
    2e14:	3c 81       	ldd	r19, Y+4	; 0x04
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	e8 1b       	sub	r30, r24
    2e1e:	f9 0b       	sbc	r31, r25
    2e20:	cf 01       	movw	r24, r30
    2e22:	18 16       	cp	r1, r24
    2e24:	19 06       	cpc	r1, r25
    2e26:	54 f0       	brlt	.+20     	; 0x2e3c <main+0x11e>
    2e28:	2b 81       	ldd	r18, Y+3	; 0x03
    2e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2e2c:	89 81       	ldd	r24, Y+1	; 0x01
    2e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e30:	a9 01       	movw	r20, r18
    2e32:	48 1b       	sub	r20, r24
    2e34:	59 0b       	sbc	r21, r25
    2e36:	ca 01       	movw	r24, r20
    2e38:	99 23       	and	r25, r25
    2e3a:	54 f6       	brge	.-108    	; 0x2dd0 <main+0xb2>
		{
			LCD_voidClearScreen();
    2e3c:	0e 94 0b 13 	call	0x2616	; 0x2616 <LCD_voidClearScreen>
			//if the Light ON
			if(Local_u16AnalogValue > 2500)
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	9c 81       	ldd	r25, Y+4	; 0x04
    2e44:	59 e0       	ldi	r21, 0x09	; 9
    2e46:	85 3c       	cpi	r24, 0xC5	; 197
    2e48:	95 07       	cpc	r25, r21
    2e4a:	b0 f0       	brcs	.+44     	; 0x2e78 <main+0x15a>
			{
				LCD_voidWriteString((u8*)"Good Morning");
    2e4c:	80 e6       	ldi	r24, 0x60	; 96
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 46 12 	call	0x248c	; 0x248c <LCD_voidWriteString>
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,customCharOne,LCD_u8_LINE1,13);
    2e54:	9e 01       	movw	r18, r28
    2e56:	29 5f       	subi	r18, 0xF9	; 249
    2e58:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	b9 01       	movw	r22, r18
    2e5e:	41 e0       	ldi	r20, 0x01	; 1
    2e60:	2d e0       	ldi	r18, 0x0D	; 13
    2e62:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_voidWriteSpecialChar>
				LCD_u8GoToXY(LCD_u8_LINE2,0);
    2e66:	82 e0       	ldi	r24, 0x02	; 2
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
				LCD_voidWriteString((u8*)"Light ON!");
    2e6e:	8d e6       	ldi	r24, 0x6D	; 109
    2e70:	90 e0       	ldi	r25, 0x00	; 0
    2e72:	0e 94 46 12 	call	0x248c	; 0x248c <LCD_voidWriteString>
    2e76:	15 c0       	rjmp	.+42     	; 0x2ea2 <main+0x184>
			}
			else //if the Light OFF
			{
				LCD_voidWriteString((u8*)"Good Evening");
    2e78:	87 e7       	ldi	r24, 0x77	; 119
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 46 12 	call	0x248c	; 0x248c <LCD_voidWriteString>
				LCD_voidWriteSpecialChar(LCD_u8_CHAR1,customCharTwo,LCD_u8_LINE1,13);
    2e80:	9e 01       	movw	r18, r28
    2e82:	21 5f       	subi	r18, 0xF1	; 241
    2e84:	3f 4f       	sbci	r19, 0xFF	; 255
    2e86:	81 e0       	ldi	r24, 0x01	; 1
    2e88:	b9 01       	movw	r22, r18
    2e8a:	41 e0       	ldi	r20, 0x01	; 1
    2e8c:	2d e0       	ldi	r18, 0x0D	; 13
    2e8e:	0e 94 93 13 	call	0x2726	; 0x2726 <LCD_voidWriteSpecialChar>
				LCD_u8GoToXY(LCD_u8_LINE2,0);
    2e92:	82 e0       	ldi	r24, 0x02	; 2
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_u8GoToXY>
				LCD_voidWriteString((u8*)"Light OFF!");
    2e9a:	84 e8       	ldi	r24, 0x84	; 132
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	0e 94 46 12 	call	0x248c	; 0x248c <LCD_voidWriteString>
			}
			//Save the Previous Value
			Local_u16PreviousAnalogValue = Local_u16AnalogValue;
    2ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    2ea6:	9a 83       	std	Y+2, r25	; 0x02
    2ea8:	89 83       	std	Y+1, r24	; 0x01
    2eaa:	92 cf       	rjmp	.-220    	; 0x2dd0 <main+0xb2>

00002eac <__mulsi3>:
    2eac:	62 9f       	mul	r22, r18
    2eae:	d0 01       	movw	r26, r0
    2eb0:	73 9f       	mul	r23, r19
    2eb2:	f0 01       	movw	r30, r0
    2eb4:	82 9f       	mul	r24, r18
    2eb6:	e0 0d       	add	r30, r0
    2eb8:	f1 1d       	adc	r31, r1
    2eba:	64 9f       	mul	r22, r20
    2ebc:	e0 0d       	add	r30, r0
    2ebe:	f1 1d       	adc	r31, r1
    2ec0:	92 9f       	mul	r25, r18
    2ec2:	f0 0d       	add	r31, r0
    2ec4:	83 9f       	mul	r24, r19
    2ec6:	f0 0d       	add	r31, r0
    2ec8:	74 9f       	mul	r23, r20
    2eca:	f0 0d       	add	r31, r0
    2ecc:	65 9f       	mul	r22, r21
    2ece:	f0 0d       	add	r31, r0
    2ed0:	99 27       	eor	r25, r25
    2ed2:	72 9f       	mul	r23, r18
    2ed4:	b0 0d       	add	r27, r0
    2ed6:	e1 1d       	adc	r30, r1
    2ed8:	f9 1f       	adc	r31, r25
    2eda:	63 9f       	mul	r22, r19
    2edc:	b0 0d       	add	r27, r0
    2ede:	e1 1d       	adc	r30, r1
    2ee0:	f9 1f       	adc	r31, r25
    2ee2:	bd 01       	movw	r22, r26
    2ee4:	cf 01       	movw	r24, r30
    2ee6:	11 24       	eor	r1, r1
    2ee8:	08 95       	ret

00002eea <__udivmodsi4>:
    2eea:	a1 e2       	ldi	r26, 0x21	; 33
    2eec:	1a 2e       	mov	r1, r26
    2eee:	aa 1b       	sub	r26, r26
    2ef0:	bb 1b       	sub	r27, r27
    2ef2:	fd 01       	movw	r30, r26
    2ef4:	0d c0       	rjmp	.+26     	; 0x2f10 <__udivmodsi4_ep>

00002ef6 <__udivmodsi4_loop>:
    2ef6:	aa 1f       	adc	r26, r26
    2ef8:	bb 1f       	adc	r27, r27
    2efa:	ee 1f       	adc	r30, r30
    2efc:	ff 1f       	adc	r31, r31
    2efe:	a2 17       	cp	r26, r18
    2f00:	b3 07       	cpc	r27, r19
    2f02:	e4 07       	cpc	r30, r20
    2f04:	f5 07       	cpc	r31, r21
    2f06:	20 f0       	brcs	.+8      	; 0x2f10 <__udivmodsi4_ep>
    2f08:	a2 1b       	sub	r26, r18
    2f0a:	b3 0b       	sbc	r27, r19
    2f0c:	e4 0b       	sbc	r30, r20
    2f0e:	f5 0b       	sbc	r31, r21

00002f10 <__udivmodsi4_ep>:
    2f10:	66 1f       	adc	r22, r22
    2f12:	77 1f       	adc	r23, r23
    2f14:	88 1f       	adc	r24, r24
    2f16:	99 1f       	adc	r25, r25
    2f18:	1a 94       	dec	r1
    2f1a:	69 f7       	brne	.-38     	; 0x2ef6 <__udivmodsi4_loop>
    2f1c:	60 95       	com	r22
    2f1e:	70 95       	com	r23
    2f20:	80 95       	com	r24
    2f22:	90 95       	com	r25
    2f24:	9b 01       	movw	r18, r22
    2f26:	ac 01       	movw	r20, r24
    2f28:	bd 01       	movw	r22, r26
    2f2a:	cf 01       	movw	r24, r30
    2f2c:	08 95       	ret

00002f2e <__prologue_saves__>:
    2f2e:	2f 92       	push	r2
    2f30:	3f 92       	push	r3
    2f32:	4f 92       	push	r4
    2f34:	5f 92       	push	r5
    2f36:	6f 92       	push	r6
    2f38:	7f 92       	push	r7
    2f3a:	8f 92       	push	r8
    2f3c:	9f 92       	push	r9
    2f3e:	af 92       	push	r10
    2f40:	bf 92       	push	r11
    2f42:	cf 92       	push	r12
    2f44:	df 92       	push	r13
    2f46:	ef 92       	push	r14
    2f48:	ff 92       	push	r15
    2f4a:	0f 93       	push	r16
    2f4c:	1f 93       	push	r17
    2f4e:	cf 93       	push	r28
    2f50:	df 93       	push	r29
    2f52:	cd b7       	in	r28, 0x3d	; 61
    2f54:	de b7       	in	r29, 0x3e	; 62
    2f56:	ca 1b       	sub	r28, r26
    2f58:	db 0b       	sbc	r29, r27
    2f5a:	0f b6       	in	r0, 0x3f	; 63
    2f5c:	f8 94       	cli
    2f5e:	de bf       	out	0x3e, r29	; 62
    2f60:	0f be       	out	0x3f, r0	; 63
    2f62:	cd bf       	out	0x3d, r28	; 61
    2f64:	09 94       	ijmp

00002f66 <__epilogue_restores__>:
    2f66:	2a 88       	ldd	r2, Y+18	; 0x12
    2f68:	39 88       	ldd	r3, Y+17	; 0x11
    2f6a:	48 88       	ldd	r4, Y+16	; 0x10
    2f6c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f6e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f70:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f72:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f74:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f76:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f78:	b9 84       	ldd	r11, Y+9	; 0x09
    2f7a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f7c:	df 80       	ldd	r13, Y+7	; 0x07
    2f7e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f80:	fd 80       	ldd	r15, Y+5	; 0x05
    2f82:	0c 81       	ldd	r16, Y+4	; 0x04
    2f84:	1b 81       	ldd	r17, Y+3	; 0x03
    2f86:	aa 81       	ldd	r26, Y+2	; 0x02
    2f88:	b9 81       	ldd	r27, Y+1	; 0x01
    2f8a:	ce 0f       	add	r28, r30
    2f8c:	d1 1d       	adc	r29, r1
    2f8e:	0f b6       	in	r0, 0x3f	; 63
    2f90:	f8 94       	cli
    2f92:	de bf       	out	0x3e, r29	; 62
    2f94:	0f be       	out	0x3f, r0	; 63
    2f96:	cd bf       	out	0x3d, r28	; 61
    2f98:	ed 01       	movw	r28, r26
    2f9a:	08 95       	ret

00002f9c <_exit>:
    2f9c:	f8 94       	cli

00002f9e <__stop_program>:
    2f9e:	ff cf       	rjmp	.-2      	; 0x2f9e <__stop_program>
