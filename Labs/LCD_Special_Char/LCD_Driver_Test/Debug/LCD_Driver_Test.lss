
LCD_Driver_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003354  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003354  000033c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002328  00000000  00000000  000033e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c76  00000000  00000000  00005708  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000637e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000064de  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000666d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000086b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000097b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a738  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000ab7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b408  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 ee 18 	call	0x31dc	; 0x31dc <main>
      7a:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 71 19 	jmp	0x32e2	; 0x32e2 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 79 19 	jmp	0x32f2	; 0x32f2 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 95 19 	jmp	0x332a	; 0x332a <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 7d 19 	jmp	0x32fa	; 0x32fa <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 99 19 	jmp	0x3332	; 0x3332 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	10 82       	st	Z, r1

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     ca4:	e4 e3       	ldi	r30, 0x34	; 52
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     caa:	e1 e3       	ldi	r30, 0x31	; 49
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     cb2:	eb e3       	ldi	r30, 0x3B	; 59
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     cb8:	e8 e3       	ldi	r30, 0x38	; 56
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     cbe:	e5 e3       	ldi	r30, 0x35	; 53
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     cc4:	e2 e3       	ldi	r30, 0x32	; 50
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1

}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	2e 97       	sbiw	r28, 0x0e	; 14
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	6b 83       	std	Y+3, r22	; 0x03
     ce8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <DIO_u8SetPinDirection+0x26>
     cf4:	0d c1       	rjmp	.+538    	; 0xf10 <DIO_u8SetPinDirection+0x240>
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 30       	cpi	r24, 0x08	; 8
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <DIO_u8SetPinDirection+0x2e>
     cfc:	09 c1       	rjmp	.+530    	; 0xf10 <DIO_u8SetPinDirection+0x240>
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	88 23       	and	r24, r24
     d02:	21 f0       	breq	.+8      	; 0xd0c <DIO_u8SetPinDirection+0x3c>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	09 f0       	breq	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x3c>
     d0a:	02 c1       	rjmp	.+516    	; 0xf10 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3e 87       	std	Y+14, r19	; 0x0e
     d14:	2d 87       	std	Y+13, r18	; 0x0d
     d16:	8d 85       	ldd	r24, Y+13	; 0x0d
     d18:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	09 f4       	brne	.+2      	; 0xd22 <DIO_u8SetPinDirection+0x52>
     d20:	4f c0       	rjmp	.+158    	; 0xdc0 <DIO_u8SetPinDirection+0xf0>
     d22:	2d 85       	ldd	r18, Y+13	; 0x0d
     d24:	3e 85       	ldd	r19, Y+14	; 0x0e
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	2c f4       	brge	.+10     	; 0xd36 <DIO_u8SetPinDirection+0x66>
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	71 f0       	breq	.+28     	; 0xd50 <DIO_u8SetPinDirection+0x80>
     d34:	ee c0       	rjmp	.+476    	; 0xf12 <DIO_u8SetPinDirection+0x242>
     d36:	2d 85       	ldd	r18, Y+13	; 0x0d
     d38:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <DIO_u8SetPinDirection+0x72>
     d40:	77 c0       	rjmp	.+238    	; 0xe30 <DIO_u8SetPinDirection+0x160>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <DIO_u8SetPinDirection+0x7e>
     d4c:	a9 c0       	rjmp	.+338    	; 0xea0 <DIO_u8SetPinDirection+0x1d0>
     d4e:	e1 c0       	rjmp	.+450    	; 0xf12 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	3c 87       	std	Y+12, r19	; 0x0c
     d58:	2b 87       	std	Y+11, r18	; 0x0b
     d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	31 f0       	breq	.+12     	; 0xd6e <DIO_u8SetPinDirection+0x9e>
     d62:	2b 85       	ldd	r18, Y+11	; 0x0b
     d64:	3c 85       	ldd	r19, Y+12	; 0x0c
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	31 05       	cpc	r19, r1
     d6a:	b1 f0       	breq	.+44     	; 0xd98 <DIO_u8SetPinDirection+0xc8>
     d6c:	d2 c0       	rjmp	.+420    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d6e:	aa e3       	ldi	r26, 0x3A	; 58
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ea e3       	ldi	r30, 0x3A	; 58
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_u8SetPinDirection+0xbc>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_u8SetPinDirection+0xb8>
     d90:	80 95       	com	r24
     d92:	84 23       	and	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	bd c0       	rjmp	.+378    	; 0xf12 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d98:	aa e3       	ldi	r26, 0x3A	; 58
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	ea e3       	ldi	r30, 0x3A	; 58
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_u8SetPinDirection+0xe6>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_u8SetPinDirection+0xe2>
     dba:	84 2b       	or	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	a9 c0       	rjmp	.+338    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3a 87       	std	Y+10, r19	; 0x0a
     dc8:	29 87       	std	Y+9, r18	; 0x09
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	31 f0       	breq	.+12     	; 0xdde <DIO_u8SetPinDirection+0x10e>
     dd2:	29 85       	ldd	r18, Y+9	; 0x09
     dd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     dd6:	21 30       	cpi	r18, 0x01	; 1
     dd8:	31 05       	cpc	r19, r1
     dda:	b1 f0       	breq	.+44     	; 0xe08 <DIO_u8SetPinDirection+0x138>
     ddc:	9a c0       	rjmp	.+308    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     dde:	a7 e3       	ldi	r26, 0x37	; 55
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e3       	ldi	r30, 0x37	; 55
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_u8SetPinDirection+0x12c>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_u8SetPinDirection+0x128>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	85 c0       	rjmp	.+266    	; 0xf12 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e08:	a7 e3       	ldi	r26, 0x37	; 55
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e7 e3       	ldi	r30, 0x37	; 55
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_u8SetPinDirection+0x156>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_u8SetPinDirection+0x152>
     e2a:	84 2b       	or	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	71 c0       	rjmp	.+226    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	38 87       	std	Y+8, r19	; 0x08
     e38:	2f 83       	std	Y+7, r18	; 0x07
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	31 f0       	breq	.+12     	; 0xe4e <DIO_u8SetPinDirection+0x17e>
     e42:	2f 81       	ldd	r18, Y+7	; 0x07
     e44:	38 85       	ldd	r19, Y+8	; 0x08
     e46:	21 30       	cpi	r18, 0x01	; 1
     e48:	31 05       	cpc	r19, r1
     e4a:	b1 f0       	breq	.+44     	; 0xe78 <DIO_u8SetPinDirection+0x1a8>
     e4c:	62 c0       	rjmp	.+196    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e4e:	a4 e3       	ldi	r26, 0x34	; 52
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e4 e3       	ldi	r30, 0x34	; 52
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_u8SetPinDirection+0x19c>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_u8SetPinDirection+0x198>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	4d c0       	rjmp	.+154    	; 0xf12 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e78:	a4 e3       	ldi	r26, 0x34	; 52
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e4 e3       	ldi	r30, 0x34	; 52
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_u8SetPinDirection+0x1c6>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_u8SetPinDirection+0x1c2>
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	39 c0       	rjmp	.+114    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3e 83       	std	Y+6, r19	; 0x06
     ea8:	2d 83       	std	Y+5, r18	; 0x05
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	31 f0       	breq	.+12     	; 0xebe <DIO_u8SetPinDirection+0x1ee>
     eb2:	2d 81       	ldd	r18, Y+5	; 0x05
     eb4:	3e 81       	ldd	r19, Y+6	; 0x06
     eb6:	21 30       	cpi	r18, 0x01	; 1
     eb8:	31 05       	cpc	r19, r1
     eba:	b1 f0       	breq	.+44     	; 0xee8 <DIO_u8SetPinDirection+0x218>
     ebc:	2a c0       	rjmp	.+84     	; 0xf12 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ebe:	a1 e3       	ldi	r26, 0x31	; 49
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e1 e3       	ldi	r30, 0x31	; 49
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_u8SetPinDirection+0x20c>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_u8SetPinDirection+0x208>
     ee0:	80 95       	com	r24
     ee2:	84 23       	and	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	15 c0       	rjmp	.+42     	; 0xf12 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ee8:	a1 e3       	ldi	r26, 0x31	; 49
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e1 e3       	ldi	r30, 0x31	; 49
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_u8SetPinDirection+0x236>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_u8SetPinDirection+0x232>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f10:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	2e 96       	adiw	r28, 0x0e	; 14
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	2e 97       	sbiw	r28, 0x0e	; 14
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	6b 83       	std	Y+3, r22	; 0x03
     f3e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	88 30       	cpi	r24, 0x08	; 8
     f48:	08 f0       	brcs	.+2      	; 0xf4c <DIO_u8SetPinValue+0x26>
     f4a:	0c c1       	rjmp	.+536    	; 0x1164 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3e 87       	std	Y+14, r19	; 0x0e
     f54:	2d 87       	std	Y+13, r18	; 0x0d
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <DIO_u8SetPinValue+0x3c>
     f60:	51 c0       	rjmp	.+162    	; 0x1004 <DIO_u8SetPinValue+0xde>
     f62:	2d 85       	ldd	r18, Y+13	; 0x0d
     f64:	3e 85       	ldd	r19, Y+14	; 0x0e
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	2c f4       	brge	.+10     	; 0xf76 <DIO_u8SetPinValue+0x50>
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	71 f0       	breq	.+28     	; 0xf90 <DIO_u8SetPinValue+0x6a>
     f74:	f5 c0       	rjmp	.+490    	; 0x1160 <DIO_u8SetPinValue+0x23a>
     f76:	2d 85       	ldd	r18, Y+13	; 0x0d
     f78:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <DIO_u8SetPinValue+0x5c>
     f80:	7b c0       	rjmp	.+246    	; 0x1078 <DIO_u8SetPinValue+0x152>
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	91 05       	cpc	r25, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <DIO_u8SetPinValue+0x68>
     f8c:	af c0       	rjmp	.+350    	; 0x10ec <DIO_u8SetPinValue+0x1c6>
     f8e:	e8 c0       	rjmp	.+464    	; 0x1160 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3c 87       	std	Y+12, r19	; 0x0c
     f98:	2b 87       	std	Y+11, r18	; 0x0b
     f9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	31 f0       	breq	.+12     	; 0xfae <DIO_u8SetPinValue+0x88>
     fa2:	2b 85       	ldd	r18, Y+11	; 0x0b
     fa4:	3c 85       	ldd	r19, Y+12	; 0x0c
     fa6:	21 30       	cpi	r18, 0x01	; 1
     fa8:	31 05       	cpc	r19, r1
     faa:	b1 f0       	breq	.+44     	; 0xfd8 <DIO_u8SetPinValue+0xb2>
     fac:	29 c0       	rjmp	.+82     	; 0x1000 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fae:	ab e3       	ldi	r26, 0x3B	; 59
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e3       	ldi	r30, 0x3B	; 59
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_u8SetPinValue+0xa6>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_u8SetPinValue+0xa2>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	c7 c0       	rjmp	.+398    	; 0x1166 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPinValue+0xd0>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_u8SetPinValue+0xcc>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	b3 c0       	rjmp	.+358    	; 0x1166 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1000:	19 82       	std	Y+1, r1	; 0x01
    1002:	b1 c0       	rjmp	.+354    	; 0x1166 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3a 87       	std	Y+10, r19	; 0x0a
    100c:	29 87       	std	Y+9, r18	; 0x09
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	31 f0       	breq	.+12     	; 0x1022 <DIO_u8SetPinValue+0xfc>
    1016:	29 85       	ldd	r18, Y+9	; 0x09
    1018:	3a 85       	ldd	r19, Y+10	; 0x0a
    101a:	21 30       	cpi	r18, 0x01	; 1
    101c:	31 05       	cpc	r19, r1
    101e:	b1 f0       	breq	.+44     	; 0x104c <DIO_u8SetPinValue+0x126>
    1020:	29 c0       	rjmp	.+82     	; 0x1074 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1022:	a8 e3       	ldi	r26, 0x38	; 56
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_u8SetPinValue+0x11a>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_u8SetPinValue+0x116>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	8d c0       	rjmp	.+282    	; 0x1166 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    104c:	a8 e3       	ldi	r26, 0x38	; 56
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinValue+0x144>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinValue+0x140>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	79 c0       	rjmp	.+242    	; 0x1166 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1074:	19 82       	std	Y+1, r1	; 0x01
    1076:	77 c0       	rjmp	.+238    	; 0x1166 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	38 87       	std	Y+8, r19	; 0x08
    1080:	2f 83       	std	Y+7, r18	; 0x07
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	31 f0       	breq	.+12     	; 0x1096 <DIO_u8SetPinValue+0x170>
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	38 85       	ldd	r19, Y+8	; 0x08
    108e:	21 30       	cpi	r18, 0x01	; 1
    1090:	31 05       	cpc	r19, r1
    1092:	b1 f0       	breq	.+44     	; 0x10c0 <DIO_u8SetPinValue+0x19a>
    1094:	29 c0       	rjmp	.+82     	; 0x10e8 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1096:	a5 e3       	ldi	r26, 0x35	; 53
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e3       	ldi	r30, 0x35	; 53
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_u8SetPinValue+0x18e>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_u8SetPinValue+0x18a>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	53 c0       	rjmp	.+166    	; 0x1166 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10c0:	a5 e3       	ldi	r26, 0x35	; 53
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e3       	ldi	r30, 0x35	; 53
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_u8SetPinValue+0x1b8>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_u8SetPinValue+0x1b4>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	3f c0       	rjmp	.+126    	; 0x1166 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	3d c0       	rjmp	.+122    	; 0x1166 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	3e 83       	std	Y+6, r19	; 0x06
    10f4:	2d 83       	std	Y+5, r18	; 0x05
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	31 f0       	breq	.+12     	; 0x110a <DIO_u8SetPinValue+0x1e4>
    10fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1100:	3e 81       	ldd	r19, Y+6	; 0x06
    1102:	21 30       	cpi	r18, 0x01	; 1
    1104:	31 05       	cpc	r19, r1
    1106:	b1 f0       	breq	.+44     	; 0x1134 <DIO_u8SetPinValue+0x20e>
    1108:	29 c0       	rjmp	.+82     	; 0x115c <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    110a:	a2 e3       	ldi	r26, 0x32	; 50
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e2 e3       	ldi	r30, 0x32	; 50
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_u8SetPinValue+0x202>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_u8SetPinValue+0x1fe>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	19 c0       	rjmp	.+50     	; 0x1166 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_u8SetPinValue+0x22c>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_u8SetPinValue+0x228>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1164:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
}
    1168:	2e 96       	adiw	r28, 0x0e	; 14
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	28 97       	sbiw	r28, 0x08	; 8
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	6c 83       	std	Y+4, r22	; 0x04
    1192:	5e 83       	std	Y+6, r21	; 0x06
    1194:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <DIO_u8GetPinValue+0x28>
    11a0:	a1 c0       	rjmp	.+322    	; 0x12e4 <DIO_u8GetPinValue+0x16a>
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <DIO_u8GetPinValue+0x30>
    11a8:	9d c0       	rjmp	.+314    	; 0x12e4 <DIO_u8GetPinValue+0x16a>
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <DIO_u8GetPinValue+0x3a>
    11b2:	98 c0       	rjmp	.+304    	; 0x12e4 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	38 87       	std	Y+8, r19	; 0x08
    11bc:	2f 83       	std	Y+7, r18	; 0x07
    11be:	4f 81       	ldd	r20, Y+7	; 0x07
    11c0:	58 85       	ldd	r21, Y+8	; 0x08
    11c2:	41 30       	cpi	r20, 0x01	; 1
    11c4:	51 05       	cpc	r21, r1
    11c6:	a9 f1       	breq	.+106    	; 0x1232 <DIO_u8GetPinValue+0xb8>
    11c8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ca:	98 85       	ldd	r25, Y+8	; 0x08
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	91 05       	cpc	r25, r1
    11d0:	34 f4       	brge	.+12     	; 0x11de <DIO_u8GetPinValue+0x64>
    11d2:	2f 81       	ldd	r18, Y+7	; 0x07
    11d4:	38 85       	ldd	r19, Y+8	; 0x08
    11d6:	21 15       	cp	r18, r1
    11d8:	31 05       	cpc	r19, r1
    11da:	71 f0       	breq	.+28     	; 0x11f8 <DIO_u8GetPinValue+0x7e>
    11dc:	81 c0       	rjmp	.+258    	; 0x12e0 <DIO_u8GetPinValue+0x166>
    11de:	4f 81       	ldd	r20, Y+7	; 0x07
    11e0:	58 85       	ldd	r21, Y+8	; 0x08
    11e2:	42 30       	cpi	r20, 0x02	; 2
    11e4:	51 05       	cpc	r21, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_u8GetPinValue+0x70>
    11e8:	41 c0       	rjmp	.+130    	; 0x126c <DIO_u8GetPinValue+0xf2>
    11ea:	8f 81       	ldd	r24, Y+7	; 0x07
    11ec:	98 85       	ldd	r25, Y+8	; 0x08
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <DIO_u8GetPinValue+0x7c>
    11f4:	58 c0       	rjmp	.+176    	; 0x12a6 <DIO_u8GetPinValue+0x12c>
    11f6:	74 c0       	rjmp	.+232    	; 0x12e0 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    11f8:	e9 e3       	ldi	r30, 0x39	; 57
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_u8GetPinValue+0x96>
    120c:	55 95       	asr	r21
    120e:	47 95       	ror	r20
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_u8GetPinValue+0x92>
    1214:	ca 01       	movw	r24, r20
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	88 23       	and	r24, r24
    121e:	21 f4       	brne	.+8      	; 0x1228 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1220:	ed 81       	ldd	r30, Y+5	; 0x05
    1222:	fe 81       	ldd	r31, Y+6	; 0x06
    1224:	10 82       	st	Z, r1
    1226:	5f c0       	rjmp	.+190    	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1228:	ed 81       	ldd	r30, Y+5	; 0x05
    122a:	fe 81       	ldd	r31, Y+6	; 0x06
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 83       	st	Z, r24
    1230:	5a c0       	rjmp	.+180    	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1232:	e6 e3       	ldi	r30, 0x36	; 54
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_u8GetPinValue+0xd0>
    1246:	55 95       	asr	r21
    1248:	47 95       	ror	r20
    124a:	8a 95       	dec	r24
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_u8GetPinValue+0xcc>
    124e:	ca 01       	movw	r24, r20
    1250:	81 70       	andi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	88 23       	and	r24, r24
    1258:	21 f4       	brne	.+8      	; 0x1262 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    125a:	ed 81       	ldd	r30, Y+5	; 0x05
    125c:	fe 81       	ldd	r31, Y+6	; 0x06
    125e:	10 82       	st	Z, r1
    1260:	42 c0       	rjmp	.+132    	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1262:	ed 81       	ldd	r30, Y+5	; 0x05
    1264:	fe 81       	ldd	r31, Y+6	; 0x06
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    126a:	3d c0       	rjmp	.+122    	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    126c:	e3 e3       	ldi	r30, 0x33	; 51
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_u8GetPinValue+0x10a>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_u8GetPinValue+0x106>
    1288:	ca 01       	movw	r24, r20
    128a:	81 70       	andi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	88 23       	and	r24, r24
    1292:	21 f4       	brne	.+8      	; 0x129c <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1294:	ed 81       	ldd	r30, Y+5	; 0x05
    1296:	fe 81       	ldd	r31, Y+6	; 0x06
    1298:	10 82       	st	Z, r1
    129a:	25 c0       	rjmp	.+74     	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    129c:	ed 81       	ldd	r30, Y+5	; 0x05
    129e:	fe 81       	ldd	r31, Y+6	; 0x06
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 83       	st	Z, r24
    12a4:	20 c0       	rjmp	.+64     	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12a6:	e0 e3       	ldi	r30, 0x30	; 48
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8GetPinValue+0x144>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8GetPinValue+0x140>
    12c2:	ca 01       	movw	r24, r20
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	88 23       	and	r24, r24
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12ce:	ed 81       	ldd	r30, Y+5	; 0x05
    12d0:	fe 81       	ldd	r31, Y+6	; 0x06
    12d2:	10 82       	st	Z, r1
    12d4:	08 c0       	rjmp	.+16     	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12d6:	ed 81       	ldd	r30, Y+5	; 0x05
    12d8:	fe 81       	ldd	r31, Y+6	; 0x06
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	80 83       	st	Z, r24
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    12e0:	1a 82       	std	Y+2, r1	; 0x02
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12e4:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12e8:	28 96       	adiw	r28, 0x08	; 8
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	2d 97       	sbiw	r28, 0x0d	; 13
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	88 23       	and	r24, r24
    131a:	21 f0       	breq	.+8      	; 0x1324 <DIO_u8SetPortDirection+0x2a>
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	09 f0       	breq	.+2      	; 0x1324 <DIO_u8SetPortDirection+0x2a>
    1322:	82 c0       	rjmp	.+260    	; 0x1428 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	3d 87       	std	Y+13, r19	; 0x0d
    132c:	2c 87       	std	Y+12, r18	; 0x0c
    132e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1330:	9d 85       	ldd	r25, Y+13	; 0x0d
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	71 f1       	breq	.+92     	; 0x1394 <DIO_u8SetPortDirection+0x9a>
    1338:	2c 85       	ldd	r18, Y+12	; 0x0c
    133a:	3d 85       	ldd	r19, Y+13	; 0x0d
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	2c f4       	brge	.+10     	; 0x134c <DIO_u8SetPortDirection+0x52>
    1342:	8c 85       	ldd	r24, Y+12	; 0x0c
    1344:	9d 85       	ldd	r25, Y+13	; 0x0d
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f0       	breq	.+26     	; 0x1364 <DIO_u8SetPortDirection+0x6a>
    134a:	6c c0       	rjmp	.+216    	; 0x1424 <DIO_u8SetPortDirection+0x12a>
    134c:	2c 85       	ldd	r18, Y+12	; 0x0c
    134e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	b9 f1       	breq	.+110    	; 0x13c4 <DIO_u8SetPortDirection+0xca>
    1356:	8c 85       	ldd	r24, Y+12	; 0x0c
    1358:	9d 85       	ldd	r25, Y+13	; 0x0d
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <DIO_u8SetPortDirection+0x68>
    1360:	49 c0       	rjmp	.+146    	; 0x13f4 <DIO_u8SetPortDirection+0xfa>
    1362:	60 c0       	rjmp	.+192    	; 0x1424 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3b 87       	std	Y+11, r19	; 0x0b
    136c:	2a 87       	std	Y+10, r18	; 0x0a
    136e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1370:	9b 85       	ldd	r25, Y+11	; 0x0b
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	31 f0       	breq	.+12     	; 0x1382 <DIO_u8SetPortDirection+0x88>
    1376:	2a 85       	ldd	r18, Y+10	; 0x0a
    1378:	3b 85       	ldd	r19, Y+11	; 0x0b
    137a:	21 30       	cpi	r18, 0x01	; 1
    137c:	31 05       	cpc	r19, r1
    137e:	29 f0       	breq	.+10     	; 0x138a <DIO_u8SetPortDirection+0x90>
    1380:	54 c0       	rjmp	.+168    	; 0x142a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1382:	ea e3       	ldi	r30, 0x3A	; 58
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	10 82       	st	Z, r1
    1388:	50 c0       	rjmp	.+160    	; 0x142a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    138a:	ea e3       	ldi	r30, 0x3A	; 58
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	80 83       	st	Z, r24
    1392:	4b c0       	rjmp	.+150    	; 0x142a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	39 87       	std	Y+9, r19	; 0x09
    139c:	28 87       	std	Y+8, r18	; 0x08
    139e:	88 85       	ldd	r24, Y+8	; 0x08
    13a0:	99 85       	ldd	r25, Y+9	; 0x09
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <DIO_u8SetPortDirection+0xb8>
    13a6:	28 85       	ldd	r18, Y+8	; 0x08
    13a8:	39 85       	ldd	r19, Y+9	; 0x09
    13aa:	21 30       	cpi	r18, 0x01	; 1
    13ac:	31 05       	cpc	r19, r1
    13ae:	29 f0       	breq	.+10     	; 0x13ba <DIO_u8SetPortDirection+0xc0>
    13b0:	3c c0       	rjmp	.+120    	; 0x142a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	10 82       	st	Z, r1
    13b8:	38 c0       	rjmp	.+112    	; 0x142a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    13ba:	e7 e3       	ldi	r30, 0x37	; 55
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
    13c2:	33 c0       	rjmp	.+102    	; 0x142a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3f 83       	std	Y+7, r19	; 0x07
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	8e 81       	ldd	r24, Y+6	; 0x06
    13d0:	9f 81       	ldd	r25, Y+7	; 0x07
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <DIO_u8SetPortDirection+0xe8>
    13d6:	2e 81       	ldd	r18, Y+6	; 0x06
    13d8:	3f 81       	ldd	r19, Y+7	; 0x07
    13da:	21 30       	cpi	r18, 0x01	; 1
    13dc:	31 05       	cpc	r19, r1
    13de:	29 f0       	breq	.+10     	; 0x13ea <DIO_u8SetPortDirection+0xf0>
    13e0:	24 c0       	rjmp	.+72     	; 0x142a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    13e2:	e4 e3       	ldi	r30, 0x34	; 52
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	10 82       	st	Z, r1
    13e8:	20 c0       	rjmp	.+64     	; 0x142a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    13ea:	e4 e3       	ldi	r30, 0x34	; 52
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	80 83       	st	Z, r24
    13f2:	1b c0       	rjmp	.+54     	; 0x142a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3d 83       	std	Y+5, r19	; 0x05
    13fc:	2c 83       	std	Y+4, r18	; 0x04
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	31 f0       	breq	.+12     	; 0x1412 <DIO_u8SetPortDirection+0x118>
    1406:	2c 81       	ldd	r18, Y+4	; 0x04
    1408:	3d 81       	ldd	r19, Y+5	; 0x05
    140a:	21 30       	cpi	r18, 0x01	; 1
    140c:	31 05       	cpc	r19, r1
    140e:	29 f0       	breq	.+10     	; 0x141a <DIO_u8SetPortDirection+0x120>
    1410:	0c c0       	rjmp	.+24     	; 0x142a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    1412:	e1 e3       	ldi	r30, 0x31	; 49
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	10 82       	st	Z, r1
    1418:	08 c0       	rjmp	.+16     	; 0x142a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    141a:	e1 e3       	ldi	r30, 0x31	; 49
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	80 83       	st	Z, r24
    1422:	03 c0       	rjmp	.+6      	; 0x142a <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	01 c0       	rjmp	.+2      	; 0x142a <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1428:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
}
    142c:	2d 96       	adiw	r28, 0x0d	; 13
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_u8SetPortValue+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIO_u8SetPortValue+0x8>
    1446:	0f 92       	push	r0
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	3d 83       	std	Y+5, r19	; 0x05
    145c:	2c 83       	std	Y+4, r18	; 0x04
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	91 05       	cpc	r25, r1
    1466:	d1 f0       	breq	.+52     	; 0x149c <DIO_u8SetPortValue+0x5e>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	2c f4       	brge	.+10     	; 0x147c <DIO_u8SetPortValue+0x3e>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	61 f0       	breq	.+24     	; 0x1492 <DIO_u8SetPortValue+0x54>
    147a:	1f c0       	rjmp	.+62     	; 0x14ba <DIO_u8SetPortValue+0x7c>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	81 f0       	breq	.+32     	; 0x14a6 <DIO_u8SetPortValue+0x68>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	91 05       	cpc	r25, r1
    148e:	81 f0       	breq	.+32     	; 0x14b0 <DIO_u8SetPortValue+0x72>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    1492:	eb e3       	ldi	r30, 0x3B	; 59
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
    149a:	10 c0       	rjmp	.+32     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	0b c0       	rjmp	.+22     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    14a6:	e5 e3       	ldi	r30, 0x35	; 53
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	80 83       	st	Z, r24
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    14b0:	e2 e3       	ldi	r30, 0x32	; 50
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	80 83       	st	Z, r24
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    14ba:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_u8GetPortValue+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_u8GetPortValue+0x8>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_u8GetPortValue+0xa>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	7c 83       	std	Y+4, r23	; 0x04
    14e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	e9 f1       	breq	.+122    	; 0x1568 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	3e 83       	std	Y+6, r19	; 0x06
    14f6:	2d 83       	std	Y+5, r18	; 0x05
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	e1 f0       	breq	.+56     	; 0x153a <DIO_u8GetPortValue+0x6c>
    1502:	2d 81       	ldd	r18, Y+5	; 0x05
    1504:	3e 81       	ldd	r19, Y+6	; 0x06
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	2c f4       	brge	.+10     	; 0x1516 <DIO_u8GetPortValue+0x48>
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	61 f0       	breq	.+24     	; 0x152c <DIO_u8GetPortValue+0x5e>
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <DIO_u8GetPortValue+0x96>
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	a1 f0       	breq	.+40     	; 0x1548 <DIO_u8GetPortValue+0x7a>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	b1 f0       	breq	.+44     	; 0x1556 <DIO_u8GetPortValue+0x88>
    152a:	1c c0       	rjmp	.+56     	; 0x1564 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    152c:	e9 e3       	ldi	r30, 0x39	; 57
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	80 83       	st	Z, r24
    1538:	18 c0       	rjmp	.+48     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    153a:	e6 e3       	ldi	r30, 0x36	; 54
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	eb 81       	ldd	r30, Y+3	; 0x03
    1542:	fc 81       	ldd	r31, Y+4	; 0x04
    1544:	80 83       	st	Z, r24
    1546:	11 c0       	rjmp	.+34     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1548:	e3 e3       	ldi	r30, 0x33	; 51
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	80 83       	st	Z, r24
    1554:	0a c0       	rjmp	.+20     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	80 83       	st	Z, r24
    1562:	03 c0       	rjmp	.+6      	; 0x156a <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1564:	19 82       	std	Y+1, r1	; 0x01
    1566:	01 c0       	rjmp	.+2      	; 0x156a <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1568:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	26 96       	adiw	r28, 0x06	; 6
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	cc 54       	subi	r28, 0x4C	; 76
    158c:	d0 40       	sbci	r29, 0x00	; 0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	fe 01       	movw	r30, r28
    159a:	e7 5b       	subi	r30, 0xB7	; 183
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	ac e0       	ldi	r26, 0x0C	; 12
    15a4:	b2 e4       	ldi	r27, 0x42	; 66
    15a6:	80 83       	st	Z, r24
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	a2 83       	std	Z+2, r26	; 0x02
    15ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ae:	8e 01       	movw	r16, r28
    15b0:	0b 5b       	subi	r16, 0xBB	; 187
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	fe 01       	movw	r30, r28
    15b6:	e7 5b       	subi	r30, 0xB7	; 183
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	4a ef       	ldi	r20, 0xFA	; 250
    15c8:	54 e4       	ldi	r21, 0x44	; 68
    15ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	f8 01       	movw	r30, r16
    15d4:	80 83       	st	Z, r24
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	a2 83       	std	Z+2, r26	; 0x02
    15da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15dc:	fe 01       	movw	r30, r28
    15de:	eb 5b       	subi	r30, 0xBB	; 187
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	44 f4       	brge	.+16     	; 0x160a <LCD_voidInit+0x8c>
		__ticks = 1;
    15fa:	fe 01       	movw	r30, r28
    15fc:	ed 5b       	subi	r30, 0xBD	; 189
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
    1608:	64 c0       	rjmp	.+200    	; 0x16d2 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    160a:	fe 01       	movw	r30, r28
    160c:	eb 5b       	subi	r30, 0xBB	; 187
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	4f e7       	ldi	r20, 0x7F	; 127
    161e:	57 e4       	ldi	r21, 0x47	; 71
    1620:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1624:	18 16       	cp	r1, r24
    1626:	0c f0       	brlt	.+2      	; 0x162a <LCD_voidInit+0xac>
    1628:	43 c0       	rjmp	.+134    	; 0x16b0 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	fe 01       	movw	r30, r28
    162c:	e7 5b       	subi	r30, 0xB7	; 183
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e2       	ldi	r20, 0x20	; 32
    163e:	51 e4       	ldi	r21, 0x41	; 65
    1640:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	8e 01       	movw	r16, r28
    164a:	0d 5b       	subi	r16, 0xBD	; 189
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	f8 01       	movw	r30, r16
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
    1660:	1f c0       	rjmp	.+62     	; 0x16a0 <LCD_voidInit+0x122>
    1662:	fe 01       	movw	r30, r28
    1664:	ef 5b       	subi	r30, 0xBF	; 191
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	88 ec       	ldi	r24, 0xC8	; 200
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1670:	fe 01       	movw	r30, r28
    1672:	ef 5b       	subi	r30, 0xBF	; 191
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <LCD_voidInit+0xfc>
    167e:	fe 01       	movw	r30, r28
    1680:	ef 5b       	subi	r30, 0xBF	; 191
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	de 01       	movw	r26, r28
    168a:	ad 5b       	subi	r26, 0xBD	; 189
    168c:	bf 4f       	sbci	r27, 0xFF	; 255
    168e:	fe 01       	movw	r30, r28
    1690:	ed 5b       	subi	r30, 0xBD	; 189
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	11 96       	adiw	r26, 0x01	; 1
    169c:	9c 93       	st	X, r25
    169e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	fe 01       	movw	r30, r28
    16a2:	ed 5b       	subi	r30, 0xBD	; 189
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	d1 f6       	brne	.-76     	; 0x1662 <LCD_voidInit+0xe4>
    16ae:	24 c0       	rjmp	.+72     	; 0x16f8 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b0:	8e 01       	movw	r16, r28
    16b2:	0d 5b       	subi	r16, 0xBD	; 189
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	fe 01       	movw	r30, r28
    16b8:	eb 5b       	subi	r30, 0xBB	; 187
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	f8 01       	movw	r30, r16
    16ce:	91 83       	std	Z+1, r25	; 0x01
    16d0:	80 83       	st	Z, r24
    16d2:	fe 01       	movw	r30, r28
    16d4:	ed 5b       	subi	r30, 0xBD	; 189
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	fe 01       	movw	r30, r28
    16de:	ff 96       	adiw	r30, 0x3f	; 63
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	fe 01       	movw	r30, r28
    16e6:	ff 96       	adiw	r30, 0x3f	; 63
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_voidInit+0x16e>
    16f0:	fe 01       	movw	r30, r28
    16f2:	ff 96       	adiw	r30, 0x3f	; 63
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	LCD_voidSendHalfCmnd(0b0010);
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	0e 94 42 17 	call	0x2e84	; 0x2e84 <LCD_voidSendHalfCmnd>
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    16fe:	88 e2       	ldi	r24, 0x28	; 40
    1700:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	a0 e2       	ldi	r26, 0x20	; 32
    170a:	b2 e4       	ldi	r27, 0x42	; 66
    170c:	8b af       	std	Y+59, r24	; 0x3b
    170e:	9c af       	std	Y+60, r25	; 0x3c
    1710:	ad af       	std	Y+61, r26	; 0x3d
    1712:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1714:	6b ad       	ldd	r22, Y+59	; 0x3b
    1716:	7c ad       	ldd	r23, Y+60	; 0x3c
    1718:	8d ad       	ldd	r24, Y+61	; 0x3d
    171a:	9e ad       	ldd	r25, Y+62	; 0x3e
    171c:	2b ea       	ldi	r18, 0xAB	; 171
    171e:	3a ea       	ldi	r19, 0xAA	; 170
    1720:	4a e2       	ldi	r20, 0x2A	; 42
    1722:	50 e4       	ldi	r21, 0x40	; 64
    1724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	8f ab       	std	Y+55, r24	; 0x37
    172e:	98 af       	std	Y+56, r25	; 0x38
    1730:	a9 af       	std	Y+57, r26	; 0x39
    1732:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1734:	6f a9       	ldd	r22, Y+55	; 0x37
    1736:	78 ad       	ldd	r23, Y+56	; 0x38
    1738:	89 ad       	ldd	r24, Y+57	; 0x39
    173a:	9a ad       	ldd	r25, Y+58	; 0x3a
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	40 e8       	ldi	r20, 0x80	; 128
    1742:	5f e3       	ldi	r21, 0x3F	; 63
    1744:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1748:	88 23       	and	r24, r24
    174a:	1c f4       	brge	.+6      	; 0x1752 <LCD_voidInit+0x1d4>
		__ticks = 1;
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	8e ab       	std	Y+54, r24	; 0x36
    1750:	91 c0       	rjmp	.+290    	; 0x1874 <LCD_voidInit+0x2f6>
	else if (__tmp > 255)
    1752:	6f a9       	ldd	r22, Y+55	; 0x37
    1754:	78 ad       	ldd	r23, Y+56	; 0x38
    1756:	89 ad       	ldd	r24, Y+57	; 0x39
    1758:	9a ad       	ldd	r25, Y+58	; 0x3a
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4f e7       	ldi	r20, 0x7F	; 127
    1760:	53 e4       	ldi	r21, 0x43	; 67
    1762:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1766:	18 16       	cp	r1, r24
    1768:	0c f0       	brlt	.+2      	; 0x176c <LCD_voidInit+0x1ee>
    176a:	7b c0       	rjmp	.+246    	; 0x1862 <LCD_voidInit+0x2e4>
	{
		_delay_ms(__us / 1000.0);
    176c:	6b ad       	ldd	r22, Y+59	; 0x3b
    176e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1770:	8d ad       	ldd	r24, Y+61	; 0x3d
    1772:	9e ad       	ldd	r25, Y+62	; 0x3e
    1774:	20 e0       	ldi	r18, 0x00	; 0
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	4a e7       	ldi	r20, 0x7A	; 122
    177a:	54 e4       	ldi	r21, 0x44	; 68
    177c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1780:	dc 01       	movw	r26, r24
    1782:	cb 01       	movw	r24, r22
    1784:	8a ab       	std	Y+50, r24	; 0x32
    1786:	9b ab       	std	Y+51, r25	; 0x33
    1788:	ac ab       	std	Y+52, r26	; 0x34
    178a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	6a a9       	ldd	r22, Y+50	; 0x32
    178e:	7b a9       	ldd	r23, Y+51	; 0x33
    1790:	8c a9       	ldd	r24, Y+52	; 0x34
    1792:	9d a9       	ldd	r25, Y+53	; 0x35
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a ef       	ldi	r20, 0xFA	; 250
    179a:	54 e4       	ldi	r21, 0x44	; 68
    179c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8e a7       	std	Y+46, r24	; 0x2e
    17a6:	9f a7       	std	Y+47, r25	; 0x2f
    17a8:	a8 ab       	std	Y+48, r26	; 0x30
    17aa:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    17ac:	6e a5       	ldd	r22, Y+46	; 0x2e
    17ae:	7f a5       	ldd	r23, Y+47	; 0x2f
    17b0:	88 a9       	ldd	r24, Y+48	; 0x30
    17b2:	99 a9       	ldd	r25, Y+49	; 0x31
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <LCD_voidInit+0x250>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9d a7       	std	Y+45, r25	; 0x2d
    17ca:	8c a7       	std	Y+44, r24	; 0x2c
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <LCD_voidInit+0x2ce>
	else if (__tmp > 65535)
    17ce:	6e a5       	ldd	r22, Y+46	; 0x2e
    17d0:	7f a5       	ldd	r23, Y+47	; 0x2f
    17d2:	88 a9       	ldd	r24, Y+48	; 0x30
    17d4:	99 a9       	ldd	r25, Y+49	; 0x31
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	4c f5       	brge	.+82     	; 0x1838 <LCD_voidInit+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6a a9       	ldd	r22, Y+50	; 0x32
    17e8:	7b a9       	ldd	r23, Y+51	; 0x33
    17ea:	8c a9       	ldd	r24, Y+52	; 0x34
    17ec:	9d a9       	ldd	r25, Y+53	; 0x35
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9d a7       	std	Y+45, r25	; 0x2d
    180c:	8c a7       	std	Y+44, r24	; 0x2c
    180e:	0f c0       	rjmp	.+30     	; 0x182e <LCD_voidInit+0x2b0>
    1810:	88 ec       	ldi	r24, 0xC8	; 200
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	9b a7       	std	Y+43, r25	; 0x2b
    1816:	8a a7       	std	Y+42, r24	; 0x2a
    1818:	8a a5       	ldd	r24, Y+42	; 0x2a
    181a:	9b a5       	ldd	r25, Y+43	; 0x2b
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_voidInit+0x29e>
    1820:	9b a7       	std	Y+43, r25	; 0x2b
    1822:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	8c a5       	ldd	r24, Y+44	; 0x2c
    1826:	9d a5       	ldd	r25, Y+45	; 0x2d
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9d a7       	std	Y+45, r25	; 0x2d
    182c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1830:	9d a5       	ldd	r25, Y+45	; 0x2d
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f7       	brne	.-38     	; 0x1810 <LCD_voidInit+0x292>
    1836:	24 c0       	rjmp	.+72     	; 0x1880 <LCD_voidInit+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1838:	6e a5       	ldd	r22, Y+46	; 0x2e
    183a:	7f a5       	ldd	r23, Y+47	; 0x2f
    183c:	88 a9       	ldd	r24, Y+48	; 0x30
    183e:	99 a9       	ldd	r25, Y+49	; 0x31
    1840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9d a7       	std	Y+45, r25	; 0x2d
    184a:	8c a7       	std	Y+44, r24	; 0x2c
    184c:	8c a5       	ldd	r24, Y+44	; 0x2c
    184e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1850:	99 a7       	std	Y+41, r25	; 0x29
    1852:	88 a7       	std	Y+40, r24	; 0x28
    1854:	88 a5       	ldd	r24, Y+40	; 0x28
    1856:	99 a5       	ldd	r25, Y+41	; 0x29
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD_voidInit+0x2da>
    185c:	99 a7       	std	Y+41, r25	; 0x29
    185e:	88 a7       	std	Y+40, r24	; 0x28
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <LCD_voidInit+0x302>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1862:	6f a9       	ldd	r22, Y+55	; 0x37
    1864:	78 ad       	ldd	r23, Y+56	; 0x38
    1866:	89 ad       	ldd	r24, Y+57	; 0x39
    1868:	9a ad       	ldd	r25, Y+58	; 0x3a
    186a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    186e:	dc 01       	movw	r26, r24
    1870:	cb 01       	movw	r24, r22
    1872:	8e ab       	std	Y+54, r24	; 0x36
    1874:	8e a9       	ldd	r24, Y+54	; 0x36
    1876:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1878:	8f a1       	ldd	r24, Y+39	; 0x27
    187a:	8a 95       	dec	r24
    187c:	f1 f7       	brne	.-4      	; 0x187a <LCD_voidInit+0x2fc>
    187e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    1880:	8f e0       	ldi	r24, 0x0F	; 15
    1882:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	a0 e2       	ldi	r26, 0x20	; 32
    188c:	b2 e4       	ldi	r27, 0x42	; 66
    188e:	8b a3       	std	Y+35, r24	; 0x23
    1890:	9c a3       	std	Y+36, r25	; 0x24
    1892:	ad a3       	std	Y+37, r26	; 0x25
    1894:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1896:	6b a1       	ldd	r22, Y+35	; 0x23
    1898:	7c a1       	ldd	r23, Y+36	; 0x24
    189a:	8d a1       	ldd	r24, Y+37	; 0x25
    189c:	9e a1       	ldd	r25, Y+38	; 0x26
    189e:	2b ea       	ldi	r18, 0xAB	; 171
    18a0:	3a ea       	ldi	r19, 0xAA	; 170
    18a2:	4a e2       	ldi	r20, 0x2A	; 42
    18a4:	50 e4       	ldi	r21, 0x40	; 64
    18a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8f 8f       	std	Y+31, r24	; 0x1f
    18b0:	98 a3       	std	Y+32, r25	; 0x20
    18b2:	a9 a3       	std	Y+33, r26	; 0x21
    18b4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18b6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18b8:	78 a1       	ldd	r23, Y+32	; 0x20
    18ba:	89 a1       	ldd	r24, Y+33	; 0x21
    18bc:	9a a1       	ldd	r25, Y+34	; 0x22
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18ca:	88 23       	and	r24, r24
    18cc:	1c f4       	brge	.+6      	; 0x18d4 <LCD_voidInit+0x356>
		__ticks = 1;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	8e 8f       	std	Y+30, r24	; 0x1e
    18d2:	91 c0       	rjmp	.+290    	; 0x19f6 <LCD_voidInit+0x478>
	else if (__tmp > 255)
    18d4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18d6:	78 a1       	ldd	r23, Y+32	; 0x20
    18d8:	89 a1       	ldd	r24, Y+33	; 0x21
    18da:	9a a1       	ldd	r25, Y+34	; 0x22
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	53 e4       	ldi	r21, 0x43	; 67
    18e4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	0c f0       	brlt	.+2      	; 0x18ee <LCD_voidInit+0x370>
    18ec:	7b c0       	rjmp	.+246    	; 0x19e4 <LCD_voidInit+0x466>
	{
		_delay_ms(__us / 1000.0);
    18ee:	6b a1       	ldd	r22, Y+35	; 0x23
    18f0:	7c a1       	ldd	r23, Y+36	; 0x24
    18f2:	8d a1       	ldd	r24, Y+37	; 0x25
    18f4:	9e a1       	ldd	r25, Y+38	; 0x26
    18f6:	20 e0       	ldi	r18, 0x00	; 0
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	4a e7       	ldi	r20, 0x7A	; 122
    18fc:	54 e4       	ldi	r21, 0x44	; 68
    18fe:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1902:	dc 01       	movw	r26, r24
    1904:	cb 01       	movw	r24, r22
    1906:	8a 8f       	std	Y+26, r24	; 0x1a
    1908:	9b 8f       	std	Y+27, r25	; 0x1b
    190a:	ac 8f       	std	Y+28, r26	; 0x1c
    190c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    190e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1910:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1912:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1914:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	4a ef       	ldi	r20, 0xFA	; 250
    191c:	54 e4       	ldi	r21, 0x44	; 68
    191e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	8e 8b       	std	Y+22, r24	; 0x16
    1928:	9f 8b       	std	Y+23, r25	; 0x17
    192a:	a8 8f       	std	Y+24, r26	; 0x18
    192c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    192e:	6e 89       	ldd	r22, Y+22	; 0x16
    1930:	7f 89       	ldd	r23, Y+23	; 0x17
    1932:	88 8d       	ldd	r24, Y+24	; 0x18
    1934:	99 8d       	ldd	r25, Y+25	; 0x19
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e8       	ldi	r20, 0x80	; 128
    193c:	5f e3       	ldi	r21, 0x3F	; 63
    193e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1942:	88 23       	and	r24, r24
    1944:	2c f4       	brge	.+10     	; 0x1950 <LCD_voidInit+0x3d2>
		__ticks = 1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	9d 8b       	std	Y+21, r25	; 0x15
    194c:	8c 8b       	std	Y+20, r24	; 0x14
    194e:	3f c0       	rjmp	.+126    	; 0x19ce <LCD_voidInit+0x450>
	else if (__tmp > 65535)
    1950:	6e 89       	ldd	r22, Y+22	; 0x16
    1952:	7f 89       	ldd	r23, Y+23	; 0x17
    1954:	88 8d       	ldd	r24, Y+24	; 0x18
    1956:	99 8d       	ldd	r25, Y+25	; 0x19
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	3f ef       	ldi	r19, 0xFF	; 255
    195c:	4f e7       	ldi	r20, 0x7F	; 127
    195e:	57 e4       	ldi	r21, 0x47	; 71
    1960:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1964:	18 16       	cp	r1, r24
    1966:	4c f5       	brge	.+82     	; 0x19ba <LCD_voidInit+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1968:	6a 8d       	ldd	r22, Y+26	; 0x1a
    196a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    196c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    196e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e2       	ldi	r20, 0x20	; 32
    1976:	51 e4       	ldi	r21, 0x41	; 65
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	9d 8b       	std	Y+21, r25	; 0x15
    198e:	8c 8b       	std	Y+20, r24	; 0x14
    1990:	0f c0       	rjmp	.+30     	; 0x19b0 <LCD_voidInit+0x432>
    1992:	88 ec       	ldi	r24, 0xC8	; 200
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9b 8b       	std	Y+19, r25	; 0x13
    1998:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    199a:	8a 89       	ldd	r24, Y+18	; 0x12
    199c:	9b 89       	ldd	r25, Y+19	; 0x13
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <LCD_voidInit+0x420>
    19a2:	9b 8b       	std	Y+19, r25	; 0x13
    19a4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a6:	8c 89       	ldd	r24, Y+20	; 0x14
    19a8:	9d 89       	ldd	r25, Y+21	; 0x15
    19aa:	01 97       	sbiw	r24, 0x01	; 1
    19ac:	9d 8b       	std	Y+21, r25	; 0x15
    19ae:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19b0:	8c 89       	ldd	r24, Y+20	; 0x14
    19b2:	9d 89       	ldd	r25, Y+21	; 0x15
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	69 f7       	brne	.-38     	; 0x1992 <LCD_voidInit+0x414>
    19b8:	24 c0       	rjmp	.+72     	; 0x1a02 <LCD_voidInit+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ba:	6e 89       	ldd	r22, Y+22	; 0x16
    19bc:	7f 89       	ldd	r23, Y+23	; 0x17
    19be:	88 8d       	ldd	r24, Y+24	; 0x18
    19c0:	99 8d       	ldd	r25, Y+25	; 0x19
    19c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9d 8b       	std	Y+21, r25	; 0x15
    19cc:	8c 8b       	std	Y+20, r24	; 0x14
    19ce:	8c 89       	ldd	r24, Y+20	; 0x14
    19d0:	9d 89       	ldd	r25, Y+21	; 0x15
    19d2:	99 8b       	std	Y+17, r25	; 0x11
    19d4:	88 8b       	std	Y+16, r24	; 0x10
    19d6:	88 89       	ldd	r24, Y+16	; 0x10
    19d8:	99 89       	ldd	r25, Y+17	; 0x11
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	f1 f7       	brne	.-4      	; 0x19da <LCD_voidInit+0x45c>
    19de:	99 8b       	std	Y+17, r25	; 0x11
    19e0:	88 8b       	std	Y+16, r24	; 0x10
    19e2:	0f c0       	rjmp	.+30     	; 0x1a02 <LCD_voidInit+0x484>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19e4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19e6:	78 a1       	ldd	r23, Y+32	; 0x20
    19e8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ea:	9a a1       	ldd	r25, Y+34	; 0x22
    19ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	8e 8f       	std	Y+30, r24	; 0x1e
    19f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19f8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	8a 95       	dec	r24
    19fe:	f1 f7       	brne	.-4      	; 0x19fc <LCD_voidInit+0x47e>
    1a00:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	a0 e0       	ldi	r26, 0x00	; 0
    1a0e:	b0 e4       	ldi	r27, 0x40	; 64
    1a10:	8b 87       	std	Y+11, r24	; 0x0b
    1a12:	9c 87       	std	Y+12, r25	; 0x0c
    1a14:	ad 87       	std	Y+13, r26	; 0x0d
    1a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	4a ef       	ldi	r20, 0xFA	; 250
    1a26:	54 e4       	ldi	r21, 0x44	; 68
    1a28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	8f 83       	std	Y+7, r24	; 0x07
    1a32:	98 87       	std	Y+8, r25	; 0x08
    1a34:	a9 87       	std	Y+9, r26	; 0x09
    1a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a38:	6f 81       	ldd	r22, Y+7	; 0x07
    1a3a:	78 85       	ldd	r23, Y+8	; 0x08
    1a3c:	89 85       	ldd	r24, Y+9	; 0x09
    1a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	40 e8       	ldi	r20, 0x80	; 128
    1a46:	5f e3       	ldi	r21, 0x3F	; 63
    1a48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a4c:	88 23       	and	r24, r24
    1a4e:	2c f4       	brge	.+10     	; 0x1a5a <LCD_voidInit+0x4dc>
		__ticks = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	9e 83       	std	Y+6, r25	; 0x06
    1a56:	8d 83       	std	Y+5, r24	; 0x05
    1a58:	3f c0       	rjmp	.+126    	; 0x1ad8 <LCD_voidInit+0x55a>
	else if (__tmp > 65535)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	3f ef       	ldi	r19, 0xFF	; 255
    1a66:	4f e7       	ldi	r20, 0x7F	; 127
    1a68:	57 e4       	ldi	r21, 0x47	; 71
    1a6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a6e:	18 16       	cp	r1, r24
    1a70:	4c f5       	brge	.+82     	; 0x1ac4 <LCD_voidInit+0x546>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a7a:	20 e0       	ldi	r18, 0x00	; 0
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	40 e2       	ldi	r20, 0x20	; 32
    1a80:	51 e4       	ldi	r21, 0x41	; 65
    1a82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	bc 01       	movw	r22, r24
    1a8c:	cd 01       	movw	r24, r26
    1a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	9e 83       	std	Y+6, r25	; 0x06
    1a98:	8d 83       	std	Y+5, r24	; 0x05
    1a9a:	0f c0       	rjmp	.+30     	; 0x1aba <LCD_voidInit+0x53c>
    1a9c:	88 ec       	ldi	r24, 0xC8	; 200
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	f1 f7       	brne	.-4      	; 0x1aa8 <LCD_voidInit+0x52a>
    1aac:	9c 83       	std	Y+4, r25	; 0x04
    1aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab4:	01 97       	sbiw	r24, 0x01	; 1
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aba:	8d 81       	ldd	r24, Y+5	; 0x05
    1abc:	9e 81       	ldd	r25, Y+6	; 0x06
    1abe:	00 97       	sbiw	r24, 0x00	; 0
    1ac0:	69 f7       	brne	.-38     	; 0x1a9c <LCD_voidInit+0x51e>
    1ac2:	14 c0       	rjmp	.+40     	; 0x1aec <LCD_voidInit+0x56e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	9e 83       	std	Y+6, r25	; 0x06
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
    1ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    1ada:	9e 81       	ldd	r25, Y+6	; 0x06
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	f1 f7       	brne	.-4      	; 0x1ae4 <LCD_voidInit+0x566>
    1ae8:	9a 83       	std	Y+2, r25	; 0x02
    1aea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    1aec:	86 e0       	ldi	r24, 0x06	; 6
    1aee:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>


}
    1af2:	c4 5b       	subi	r28, 0xB4	; 180
    1af4:	df 4f       	sbci	r29, 0xFF	; 255
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	cf 91       	pop	r28
    1b02:	df 91       	pop	r29
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	08 95       	ret

00001b0a <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
    1b16:	c1 56       	subi	r28, 0x61	; 97
    1b18:	d0 40       	sbci	r29, 0x00	; 0
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	de bf       	out	0x3e, r29	; 62
    1b20:	0f be       	out	0x3f, r0	; 63
    1b22:	cd bf       	out	0x3d, r28	; 61
    1b24:	fe 01       	movw	r30, r28
    1b26:	ef 59       	subi	r30, 0x9F	; 159
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	80 83       	st	Z, r24
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Code to Send a Command at 4 bit mode*/
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	40 e0       	ldi	r20, 0x00	; 0
    1b32:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	40 e0       	ldi	r20, 0x00	; 0
    1b3c:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1b40:	fe 01       	movw	r30, r28
    1b42:	ef 59       	subi	r30, 0x9F	; 159
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	83 e0       	ldi	r24, 0x03	; 3
    1b48:	60 81       	ld	r22, Z
    1b4a:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	62 e0       	ldi	r22, 0x02	; 2
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    1b58:	fe 01       	movw	r30, r28
    1b5a:	e3 5a       	subi	r30, 0xA3	; 163
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	a0 e8       	ldi	r26, 0x80	; 128
    1b64:	bf e3       	ldi	r27, 0x3F	; 63
    1b66:	80 83       	st	Z, r24
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	a2 83       	std	Z+2, r26	; 0x02
    1b6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b6e:	8e 01       	movw	r16, r28
    1b70:	07 5a       	subi	r16, 0xA7	; 167
    1b72:	1f 4f       	sbci	r17, 0xFF	; 255
    1b74:	fe 01       	movw	r30, r28
    1b76:	e3 5a       	subi	r30, 0xA3	; 163
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	60 81       	ld	r22, Z
    1b7c:	71 81       	ldd	r23, Z+1	; 0x01
    1b7e:	82 81       	ldd	r24, Z+2	; 0x02
    1b80:	93 81       	ldd	r25, Z+3	; 0x03
    1b82:	2b ea       	ldi	r18, 0xAB	; 171
    1b84:	3a ea       	ldi	r19, 0xAA	; 170
    1b86:	4a e2       	ldi	r20, 0x2A	; 42
    1b88:	50 e4       	ldi	r21, 0x40	; 64
    1b8a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	f8 01       	movw	r30, r16
    1b94:	80 83       	st	Z, r24
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	a2 83       	std	Z+2, r26	; 0x02
    1b9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e7 5a       	subi	r30, 0xA7	; 167
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	60 81       	ld	r22, Z
    1ba4:	71 81       	ldd	r23, Z+1	; 0x01
    1ba6:	82 81       	ldd	r24, Z+2	; 0x02
    1ba8:	93 81       	ldd	r25, Z+3	; 0x03
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e8       	ldi	r20, 0x80	; 128
    1bb0:	5f e3       	ldi	r21, 0x3F	; 63
    1bb2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bb6:	88 23       	and	r24, r24
    1bb8:	34 f4       	brge	.+12     	; 0x1bc6 <LCD_voidSendCmnd+0xbc>
		__ticks = 1;
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e8 5a       	subi	r30, 0xA8	; 168
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	80 83       	st	Z, r24
    1bc4:	e0 c0       	rjmp	.+448    	; 0x1d86 <LCD_voidSendCmnd+0x27c>
	else if (__tmp > 255)
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	e7 5a       	subi	r30, 0xA7	; 167
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	60 81       	ld	r22, Z
    1bce:	71 81       	ldd	r23, Z+1	; 0x01
    1bd0:	82 81       	ldd	r24, Z+2	; 0x02
    1bd2:	93 81       	ldd	r25, Z+3	; 0x03
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	53 e4       	ldi	r21, 0x43	; 67
    1bdc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	0c f0       	brlt	.+2      	; 0x1be6 <LCD_voidSendCmnd+0xdc>
    1be4:	c0 c0       	rjmp	.+384    	; 0x1d66 <LCD_voidSendCmnd+0x25c>
	{
		_delay_ms(__us / 1000.0);
    1be6:	fe 01       	movw	r30, r28
    1be8:	e3 5a       	subi	r30, 0xA3	; 163
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	4a e7       	ldi	r20, 0x7A	; 122
    1bfa:	54 e4       	ldi	r21, 0x44	; 68
    1bfc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	fe 01       	movw	r30, r28
    1c06:	ec 5a       	subi	r30, 0xAC	; 172
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 83       	st	Z, r24
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	a2 83       	std	Z+2, r26	; 0x02
    1c10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c12:	8e 01       	movw	r16, r28
    1c14:	00 5b       	subi	r16, 0xB0	; 176
    1c16:	1f 4f       	sbci	r17, 0xFF	; 255
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ec 5a       	subi	r30, 0xAC	; 172
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	60 81       	ld	r22, Z
    1c20:	71 81       	ldd	r23, Z+1	; 0x01
    1c22:	82 81       	ldd	r24, Z+2	; 0x02
    1c24:	93 81       	ldd	r25, Z+3	; 0x03
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	4a ef       	ldi	r20, 0xFA	; 250
    1c2c:	54 e4       	ldi	r21, 0x44	; 68
    1c2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	f8 01       	movw	r30, r16
    1c38:	80 83       	st	Z, r24
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	a2 83       	std	Z+2, r26	; 0x02
    1c3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c40:	fe 01       	movw	r30, r28
    1c42:	e0 5b       	subi	r30, 0xB0	; 176
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	60 81       	ld	r22, Z
    1c48:	71 81       	ldd	r23, Z+1	; 0x01
    1c4a:	82 81       	ldd	r24, Z+2	; 0x02
    1c4c:	93 81       	ldd	r25, Z+3	; 0x03
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c5a:	88 23       	and	r24, r24
    1c5c:	44 f4       	brge	.+16     	; 0x1c6e <LCD_voidSendCmnd+0x164>
		__ticks = 1;
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e2 5b       	subi	r30, 0xB2	; 178
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	64 c0       	rjmp	.+200    	; 0x1d36 <LCD_voidSendCmnd+0x22c>
	else if (__tmp > 65535)
    1c6e:	fe 01       	movw	r30, r28
    1c70:	e0 5b       	subi	r30, 0xB0	; 176
    1c72:	ff 4f       	sbci	r31, 0xFF	; 255
    1c74:	60 81       	ld	r22, Z
    1c76:	71 81       	ldd	r23, Z+1	; 0x01
    1c78:	82 81       	ldd	r24, Z+2	; 0x02
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	3f ef       	ldi	r19, 0xFF	; 255
    1c80:	4f e7       	ldi	r20, 0x7F	; 127
    1c82:	57 e4       	ldi	r21, 0x47	; 71
    1c84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c88:	18 16       	cp	r1, r24
    1c8a:	0c f0       	brlt	.+2      	; 0x1c8e <LCD_voidSendCmnd+0x184>
    1c8c:	43 c0       	rjmp	.+134    	; 0x1d14 <LCD_voidSendCmnd+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c8e:	fe 01       	movw	r30, r28
    1c90:	ec 5a       	subi	r30, 0xAC	; 172
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	60 81       	ld	r22, Z
    1c96:	71 81       	ldd	r23, Z+1	; 0x01
    1c98:	82 81       	ldd	r24, Z+2	; 0x02
    1c9a:	93 81       	ldd	r25, Z+3	; 0x03
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	40 e2       	ldi	r20, 0x20	; 32
    1ca2:	51 e4       	ldi	r21, 0x41	; 65
    1ca4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8e 01       	movw	r16, r28
    1cae:	02 5b       	subi	r16, 0xB2	; 178
    1cb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb2:	bc 01       	movw	r22, r24
    1cb4:	cd 01       	movw	r24, r26
    1cb6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cba:	dc 01       	movw	r26, r24
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	80 83       	st	Z, r24
    1cc4:	1f c0       	rjmp	.+62     	; 0x1d04 <LCD_voidSendCmnd+0x1fa>
    1cc6:	fe 01       	movw	r30, r28
    1cc8:	e4 5b       	subi	r30, 0xB4	; 180
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	88 ec       	ldi	r24, 0xC8	; 200
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	e4 5b       	subi	r30, 0xB4	; 180
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 81       	ld	r24, Z
    1cdc:	91 81       	ldd	r25, Z+1	; 0x01
    1cde:	01 97       	sbiw	r24, 0x01	; 1
    1ce0:	f1 f7       	brne	.-4      	; 0x1cde <LCD_voidSendCmnd+0x1d4>
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e4 5b       	subi	r30, 0xB4	; 180
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	91 83       	std	Z+1, r25	; 0x01
    1cea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cec:	de 01       	movw	r26, r28
    1cee:	a2 5b       	subi	r26, 0xB2	; 178
    1cf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1cf2:	fe 01       	movw	r30, r28
    1cf4:	e2 5b       	subi	r30, 0xB2	; 178
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	91 81       	ldd	r25, Z+1	; 0x01
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	11 96       	adiw	r26, 0x01	; 1
    1d00:	9c 93       	st	X, r25
    1d02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d04:	fe 01       	movw	r30, r28
    1d06:	e2 5b       	subi	r30, 0xB2	; 178
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	d1 f6       	brne	.-76     	; 0x1cc6 <LCD_voidSendCmnd+0x1bc>
    1d12:	4b c0       	rjmp	.+150    	; 0x1daa <LCD_voidSendCmnd+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d14:	8e 01       	movw	r16, r28
    1d16:	02 5b       	subi	r16, 0xB2	; 178
    1d18:	1f 4f       	sbci	r17, 0xFF	; 255
    1d1a:	fe 01       	movw	r30, r28
    1d1c:	e0 5b       	subi	r30, 0xB0	; 176
    1d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d20:	60 81       	ld	r22, Z
    1d22:	71 81       	ldd	r23, Z+1	; 0x01
    1d24:	82 81       	ldd	r24, Z+2	; 0x02
    1d26:	93 81       	ldd	r25, Z+3	; 0x03
    1d28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2c:	dc 01       	movw	r26, r24
    1d2e:	cb 01       	movw	r24, r22
    1d30:	f8 01       	movw	r30, r16
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	de 01       	movw	r26, r28
    1d38:	a6 5b       	subi	r26, 0xB6	; 182
    1d3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e2 5b       	subi	r30, 0xB2	; 178
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	80 81       	ld	r24, Z
    1d44:	91 81       	ldd	r25, Z+1	; 0x01
    1d46:	11 96       	adiw	r26, 0x01	; 1
    1d48:	9c 93       	st	X, r25
    1d4a:	8e 93       	st	-X, r24
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e6 5b       	subi	r30, 0xB6	; 182
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	80 81       	ld	r24, Z
    1d54:	91 81       	ldd	r25, Z+1	; 0x01
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_voidSendCmnd+0x24c>
    1d5a:	fe 01       	movw	r30, r28
    1d5c:	e6 5b       	subi	r30, 0xB6	; 182
    1d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d60:	91 83       	std	Z+1, r25	; 0x01
    1d62:	80 83       	st	Z, r24
    1d64:	22 c0       	rjmp	.+68     	; 0x1daa <LCD_voidSendCmnd+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d66:	8e 01       	movw	r16, r28
    1d68:	08 5a       	subi	r16, 0xA8	; 168
    1d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e7 5a       	subi	r30, 0xA7	; 167
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	f8 01       	movw	r30, r16
    1d84:	80 83       	st	Z, r24
    1d86:	de 01       	movw	r26, r28
    1d88:	a7 5b       	subi	r26, 0xB7	; 183
    1d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e8 5a       	subi	r30, 0xA8	; 168
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	80 81       	ld	r24, Z
    1d94:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d96:	fe 01       	movw	r30, r28
    1d98:	e7 5b       	subi	r30, 0xB7	; 183
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8a 95       	dec	r24
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_voidSendCmnd+0x294>
    1da2:	fe 01       	movw	r30, r28
    1da4:	e7 5b       	subi	r30, 0xB7	; 183
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 83       	st	Z, r24
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	62 e0       	ldi	r22, 0x02	; 2
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    1db4:	fe 01       	movw	r30, r28
    1db6:	eb 5b       	subi	r30, 0xBB	; 187
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	a0 e8       	ldi	r26, 0x80	; 128
    1dc0:	bf e3       	ldi	r27, 0x3F	; 63
    1dc2:	80 83       	st	Z, r24
    1dc4:	91 83       	std	Z+1, r25	; 0x01
    1dc6:	a2 83       	std	Z+2, r26	; 0x02
    1dc8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dca:	8e 01       	movw	r16, r28
    1dcc:	0f 5b       	subi	r16, 0xBF	; 191
    1dce:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	eb 5b       	subi	r30, 0xBB	; 187
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	60 81       	ld	r22, Z
    1dd8:	71 81       	ldd	r23, Z+1	; 0x01
    1dda:	82 81       	ldd	r24, Z+2	; 0x02
    1ddc:	93 81       	ldd	r25, Z+3	; 0x03
    1dde:	2b ea       	ldi	r18, 0xAB	; 171
    1de0:	3a ea       	ldi	r19, 0xAA	; 170
    1de2:	4a e2       	ldi	r20, 0x2A	; 42
    1de4:	50 e4       	ldi	r21, 0x40	; 64
    1de6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	f8 01       	movw	r30, r16
    1df0:	80 83       	st	Z, r24
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	a2 83       	std	Z+2, r26	; 0x02
    1df6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ef 5b       	subi	r30, 0xBF	; 191
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	40 e8       	ldi	r20, 0x80	; 128
    1e0c:	5f e3       	ldi	r21, 0x3F	; 63
    1e0e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e12:	88 23       	and	r24, r24
    1e14:	34 f4       	brge	.+12     	; 0x1e22 <LCD_voidSendCmnd+0x318>
		__ticks = 1;
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e0 5c       	subi	r30, 0xC0	; 192
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 83       	st	Z, r24
    1e20:	9d c0       	rjmp	.+314    	; 0x1f5c <LCD_voidSendCmnd+0x452>
	else if (__tmp > 255)
    1e22:	fe 01       	movw	r30, r28
    1e24:	ef 5b       	subi	r30, 0xBF	; 191
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	53 e4       	ldi	r21, 0x43	; 67
    1e38:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	0c f0       	brlt	.+2      	; 0x1e42 <LCD_voidSendCmnd+0x338>
    1e40:	7e c0       	rjmp	.+252    	; 0x1f3e <LCD_voidSendCmnd+0x434>
	{
		_delay_ms(__us / 1000.0);
    1e42:	fe 01       	movw	r30, r28
    1e44:	eb 5b       	subi	r30, 0xBB	; 187
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a e7       	ldi	r20, 0x7A	; 122
    1e56:	54 e4       	ldi	r21, 0x44	; 68
    1e58:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8c af       	std	Y+60, r24	; 0x3c
    1e62:	9d af       	std	Y+61, r25	; 0x3d
    1e64:	ae af       	std	Y+62, r26	; 0x3e
    1e66:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e68:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e6a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	4a ef       	ldi	r20, 0xFA	; 250
    1e76:	54 e4       	ldi	r21, 0x44	; 68
    1e78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	88 af       	std	Y+56, r24	; 0x38
    1e82:	99 af       	std	Y+57, r25	; 0x39
    1e84:	aa af       	std	Y+58, r26	; 0x3a
    1e86:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1e88:	68 ad       	ldd	r22, Y+56	; 0x38
    1e8a:	79 ad       	ldd	r23, Y+57	; 0x39
    1e8c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e8e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e8       	ldi	r20, 0x80	; 128
    1e96:	5f e3       	ldi	r21, 0x3F	; 63
    1e98:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e9c:	88 23       	and	r24, r24
    1e9e:	2c f4       	brge	.+10     	; 0x1eaa <LCD_voidSendCmnd+0x3a0>
		__ticks = 1;
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	9f ab       	std	Y+55, r25	; 0x37
    1ea6:	8e ab       	std	Y+54, r24	; 0x36
    1ea8:	3f c0       	rjmp	.+126    	; 0x1f28 <LCD_voidSendCmnd+0x41e>
	else if (__tmp > 65535)
    1eaa:	68 ad       	ldd	r22, Y+56	; 0x38
    1eac:	79 ad       	ldd	r23, Y+57	; 0x39
    1eae:	8a ad       	ldd	r24, Y+58	; 0x3a
    1eb0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	3f ef       	ldi	r19, 0xFF	; 255
    1eb6:	4f e7       	ldi	r20, 0x7F	; 127
    1eb8:	57 e4       	ldi	r21, 0x47	; 71
    1eba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ebe:	18 16       	cp	r1, r24
    1ec0:	4c f5       	brge	.+82     	; 0x1f14 <LCD_voidSendCmnd+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ec4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ec6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ec8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e2       	ldi	r20, 0x20	; 32
    1ed0:	51 e4       	ldi	r21, 0x41	; 65
    1ed2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	9f ab       	std	Y+55, r25	; 0x37
    1ee8:	8e ab       	std	Y+54, r24	; 0x36
    1eea:	0f c0       	rjmp	.+30     	; 0x1f0a <LCD_voidSendCmnd+0x400>
    1eec:	88 ec       	ldi	r24, 0xC8	; 200
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9d ab       	std	Y+53, r25	; 0x35
    1ef2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef4:	8c a9       	ldd	r24, Y+52	; 0x34
    1ef6:	9d a9       	ldd	r25, Y+53	; 0x35
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	f1 f7       	brne	.-4      	; 0x1ef8 <LCD_voidSendCmnd+0x3ee>
    1efc:	9d ab       	std	Y+53, r25	; 0x35
    1efe:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f00:	8e a9       	ldd	r24, Y+54	; 0x36
    1f02:	9f a9       	ldd	r25, Y+55	; 0x37
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	9f ab       	std	Y+55, r25	; 0x37
    1f08:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0a:	8e a9       	ldd	r24, Y+54	; 0x36
    1f0c:	9f a9       	ldd	r25, Y+55	; 0x37
    1f0e:	00 97       	sbiw	r24, 0x00	; 0
    1f10:	69 f7       	brne	.-38     	; 0x1eec <LCD_voidSendCmnd+0x3e2>
    1f12:	2d c0       	rjmp	.+90     	; 0x1f6e <LCD_voidSendCmnd+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f14:	68 ad       	ldd	r22, Y+56	; 0x38
    1f16:	79 ad       	ldd	r23, Y+57	; 0x39
    1f18:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f1a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	9f ab       	std	Y+55, r25	; 0x37
    1f26:	8e ab       	std	Y+54, r24	; 0x36
    1f28:	8e a9       	ldd	r24, Y+54	; 0x36
    1f2a:	9f a9       	ldd	r25, Y+55	; 0x37
    1f2c:	9b ab       	std	Y+51, r25	; 0x33
    1f2e:	8a ab       	std	Y+50, r24	; 0x32
    1f30:	8a a9       	ldd	r24, Y+50	; 0x32
    1f32:	9b a9       	ldd	r25, Y+51	; 0x33
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_voidSendCmnd+0x42a>
    1f38:	9b ab       	std	Y+51, r25	; 0x33
    1f3a:	8a ab       	std	Y+50, r24	; 0x32
    1f3c:	18 c0       	rjmp	.+48     	; 0x1f6e <LCD_voidSendCmnd+0x464>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f3e:	fe 01       	movw	r30, r28
    1f40:	ef 5b       	subi	r30, 0xBF	; 191
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	60 81       	ld	r22, Z
    1f46:	71 81       	ldd	r23, Z+1	; 0x01
    1f48:	82 81       	ldd	r24, Z+2	; 0x02
    1f4a:	93 81       	ldd	r25, Z+3	; 0x03
    1f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	fe 01       	movw	r30, r28
    1f56:	e0 5c       	subi	r30, 0xC0	; 192
    1f58:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5a:	80 83       	st	Z, r24
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e0 5c       	subi	r30, 0xC0	; 192
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f66:	89 a9       	ldd	r24, Y+49	; 0x31
    1f68:	8a 95       	dec	r24
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <LCD_voidSendCmnd+0x45e>
    1f6c:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
	/* Step 6: Write Command << 4 */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd<<4);
    1f6e:	fe 01       	movw	r30, r28
    1f70:	ef 59       	subi	r30, 0x9F	; 159
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	98 2f       	mov	r25, r24
    1f78:	92 95       	swap	r25
    1f7a:	90 7f       	andi	r25, 0xF0	; 240
    1f7c:	83 e0       	ldi	r24, 0x03	; 3
    1f7e:	69 2f       	mov	r22, r25
    1f80:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* Step 7: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	62 e0       	ldi	r22, 0x02	; 2
    1f88:	41 e0       	ldi	r20, 0x01	; 1
    1f8a:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	a0 e8       	ldi	r26, 0x80	; 128
    1f94:	bf e3       	ldi	r27, 0x3F	; 63
    1f96:	8d a7       	std	Y+45, r24	; 0x2d
    1f98:	9e a7       	std	Y+46, r25	; 0x2e
    1f9a:	af a7       	std	Y+47, r26	; 0x2f
    1f9c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f9e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1fa0:	7e a5       	ldd	r23, Y+46	; 0x2e
    1fa2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa4:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa6:	2b ea       	ldi	r18, 0xAB	; 171
    1fa8:	3a ea       	ldi	r19, 0xAA	; 170
    1faa:	4a e2       	ldi	r20, 0x2A	; 42
    1fac:	50 e4       	ldi	r21, 0x40	; 64
    1fae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	89 a7       	std	Y+41, r24	; 0x29
    1fb8:	9a a7       	std	Y+42, r25	; 0x2a
    1fba:	ab a7       	std	Y+43, r26	; 0x2b
    1fbc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1fbe:	69 a5       	ldd	r22, Y+41	; 0x29
    1fc0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fc2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fc4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e8       	ldi	r20, 0x80	; 128
    1fcc:	5f e3       	ldi	r21, 0x3F	; 63
    1fce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1fd2:	88 23       	and	r24, r24
    1fd4:	1c f4       	brge	.+6      	; 0x1fdc <LCD_voidSendCmnd+0x4d2>
		__ticks = 1;
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	88 a7       	std	Y+40, r24	; 0x28
    1fda:	91 c0       	rjmp	.+290    	; 0x20fe <LCD_voidSendCmnd+0x5f4>
	else if (__tmp > 255)
    1fdc:	69 a5       	ldd	r22, Y+41	; 0x29
    1fde:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fe0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fe2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4f e7       	ldi	r20, 0x7F	; 127
    1fea:	53 e4       	ldi	r21, 0x43	; 67
    1fec:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ff0:	18 16       	cp	r1, r24
    1ff2:	0c f0       	brlt	.+2      	; 0x1ff6 <LCD_voidSendCmnd+0x4ec>
    1ff4:	7b c0       	rjmp	.+246    	; 0x20ec <LCD_voidSendCmnd+0x5e2>
	{
		_delay_ms(__us / 1000.0);
    1ff6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ff8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	4a e7       	ldi	r20, 0x7A	; 122
    2004:	54 e4       	ldi	r21, 0x44	; 68
    2006:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	8c a3       	std	Y+36, r24	; 0x24
    2010:	9d a3       	std	Y+37, r25	; 0x25
    2012:	ae a3       	std	Y+38, r26	; 0x26
    2014:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2016:	6c a1       	ldd	r22, Y+36	; 0x24
    2018:	7d a1       	ldd	r23, Y+37	; 0x25
    201a:	8e a1       	ldd	r24, Y+38	; 0x26
    201c:	9f a1       	ldd	r25, Y+39	; 0x27
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	4a ef       	ldi	r20, 0xFA	; 250
    2024:	54 e4       	ldi	r21, 0x44	; 68
    2026:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    202a:	dc 01       	movw	r26, r24
    202c:	cb 01       	movw	r24, r22
    202e:	88 a3       	std	Y+32, r24	; 0x20
    2030:	99 a3       	std	Y+33, r25	; 0x21
    2032:	aa a3       	std	Y+34, r26	; 0x22
    2034:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2036:	68 a1       	ldd	r22, Y+32	; 0x20
    2038:	79 a1       	ldd	r23, Y+33	; 0x21
    203a:	8a a1       	ldd	r24, Y+34	; 0x22
    203c:	9b a1       	ldd	r25, Y+35	; 0x23
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e8       	ldi	r20, 0x80	; 128
    2044:	5f e3       	ldi	r21, 0x3F	; 63
    2046:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    204a:	88 23       	and	r24, r24
    204c:	2c f4       	brge	.+10     	; 0x2058 <LCD_voidSendCmnd+0x54e>
		__ticks = 1;
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	9f 8f       	std	Y+31, r25	; 0x1f
    2054:	8e 8f       	std	Y+30, r24	; 0x1e
    2056:	3f c0       	rjmp	.+126    	; 0x20d6 <LCD_voidSendCmnd+0x5cc>
	else if (__tmp > 65535)
    2058:	68 a1       	ldd	r22, Y+32	; 0x20
    205a:	79 a1       	ldd	r23, Y+33	; 0x21
    205c:	8a a1       	ldd	r24, Y+34	; 0x22
    205e:	9b a1       	ldd	r25, Y+35	; 0x23
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	3f ef       	ldi	r19, 0xFF	; 255
    2064:	4f e7       	ldi	r20, 0x7F	; 127
    2066:	57 e4       	ldi	r21, 0x47	; 71
    2068:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    206c:	18 16       	cp	r1, r24
    206e:	4c f5       	brge	.+82     	; 0x20c2 <LCD_voidSendCmnd+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2070:	6c a1       	ldd	r22, Y+36	; 0x24
    2072:	7d a1       	ldd	r23, Y+37	; 0x25
    2074:	8e a1       	ldd	r24, Y+38	; 0x26
    2076:	9f a1       	ldd	r25, Y+39	; 0x27
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e2       	ldi	r20, 0x20	; 32
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2084:	dc 01       	movw	r26, r24
    2086:	cb 01       	movw	r24, r22
    2088:	bc 01       	movw	r22, r24
    208a:	cd 01       	movw	r24, r26
    208c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	9f 8f       	std	Y+31, r25	; 0x1f
    2096:	8e 8f       	std	Y+30, r24	; 0x1e
    2098:	0f c0       	rjmp	.+30     	; 0x20b8 <LCD_voidSendCmnd+0x5ae>
    209a:	88 ec       	ldi	r24, 0xC8	; 200
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	9d 8f       	std	Y+29, r25	; 0x1d
    20a0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20a6:	01 97       	sbiw	r24, 0x01	; 1
    20a8:	f1 f7       	brne	.-4      	; 0x20a6 <LCD_voidSendCmnd+0x59c>
    20aa:	9d 8f       	std	Y+29, r25	; 0x1d
    20ac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20b2:	01 97       	sbiw	r24, 0x01	; 1
    20b4:	9f 8f       	std	Y+31, r25	; 0x1f
    20b6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20ba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20bc:	00 97       	sbiw	r24, 0x00	; 0
    20be:	69 f7       	brne	.-38     	; 0x209a <LCD_voidSendCmnd+0x590>
    20c0:	24 c0       	rjmp	.+72     	; 0x210a <LCD_voidSendCmnd+0x600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c2:	68 a1       	ldd	r22, Y+32	; 0x20
    20c4:	79 a1       	ldd	r23, Y+33	; 0x21
    20c6:	8a a1       	ldd	r24, Y+34	; 0x22
    20c8:	9b a1       	ldd	r25, Y+35	; 0x23
    20ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	9f 8f       	std	Y+31, r25	; 0x1f
    20d4:	8e 8f       	std	Y+30, r24	; 0x1e
    20d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20d8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    20da:	9b 8f       	std	Y+27, r25	; 0x1b
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	f1 f7       	brne	.-4      	; 0x20e2 <LCD_voidSendCmnd+0x5d8>
    20e6:	9b 8f       	std	Y+27, r25	; 0x1b
    20e8:	8a 8f       	std	Y+26, r24	; 0x1a
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_voidSendCmnd+0x600>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ec:	69 a5       	ldd	r22, Y+41	; 0x29
    20ee:	7a a5       	ldd	r23, Y+42	; 0x2a
    20f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    20f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    20f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	88 a7       	std	Y+40, r24	; 0x28
    20fe:	88 a5       	ldd	r24, Y+40	; 0x28
    2100:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2102:	89 8d       	ldd	r24, Y+25	; 0x19
    2104:	8a 95       	dec	r24
    2106:	f1 f7       	brne	.-4      	; 0x2104 <LCD_voidSendCmnd+0x5fa>
    2108:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	62 e0       	ldi	r22, 0x02	; 2
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	a0 e8       	ldi	r26, 0x80	; 128
    211a:	bf e3       	ldi	r27, 0x3F	; 63
    211c:	8d 8b       	std	Y+21, r24	; 0x15
    211e:	9e 8b       	std	Y+22, r25	; 0x16
    2120:	af 8b       	std	Y+23, r26	; 0x17
    2122:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2124:	6d 89       	ldd	r22, Y+21	; 0x15
    2126:	7e 89       	ldd	r23, Y+22	; 0x16
    2128:	8f 89       	ldd	r24, Y+23	; 0x17
    212a:	98 8d       	ldd	r25, Y+24	; 0x18
    212c:	2b ea       	ldi	r18, 0xAB	; 171
    212e:	3a ea       	ldi	r19, 0xAA	; 170
    2130:	4a e2       	ldi	r20, 0x2A	; 42
    2132:	50 e4       	ldi	r21, 0x40	; 64
    2134:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	89 8b       	std	Y+17, r24	; 0x11
    213e:	9a 8b       	std	Y+18, r25	; 0x12
    2140:	ab 8b       	std	Y+19, r26	; 0x13
    2142:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2144:	69 89       	ldd	r22, Y+17	; 0x11
    2146:	7a 89       	ldd	r23, Y+18	; 0x12
    2148:	8b 89       	ldd	r24, Y+19	; 0x13
    214a:	9c 89       	ldd	r25, Y+20	; 0x14
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	1c f4       	brge	.+6      	; 0x2162 <LCD_voidSendCmnd+0x658>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	88 8b       	std	Y+16, r24	; 0x10
    2160:	91 c0       	rjmp	.+290    	; 0x2284 <LCD_voidSendCmnd+0x77a>
	else if (__tmp > 255)
    2162:	69 89       	ldd	r22, Y+17	; 0x11
    2164:	7a 89       	ldd	r23, Y+18	; 0x12
    2166:	8b 89       	ldd	r24, Y+19	; 0x13
    2168:	9c 89       	ldd	r25, Y+20	; 0x14
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	53 e4       	ldi	r21, 0x43	; 67
    2172:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	0c f0       	brlt	.+2      	; 0x217c <LCD_voidSendCmnd+0x672>
    217a:	7b c0       	rjmp	.+246    	; 0x2272 <LCD_voidSendCmnd+0x768>
	{
		_delay_ms(__us / 1000.0);
    217c:	6d 89       	ldd	r22, Y+21	; 0x15
    217e:	7e 89       	ldd	r23, Y+22	; 0x16
    2180:	8f 89       	ldd	r24, Y+23	; 0x17
    2182:	98 8d       	ldd	r25, Y+24	; 0x18
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	4a e7       	ldi	r20, 0x7A	; 122
    218a:	54 e4       	ldi	r21, 0x44	; 68
    218c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	8c 87       	std	Y+12, r24	; 0x0c
    2196:	9d 87       	std	Y+13, r25	; 0x0d
    2198:	ae 87       	std	Y+14, r26	; 0x0e
    219a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6c 85       	ldd	r22, Y+12	; 0x0c
    219e:	7d 85       	ldd	r23, Y+13	; 0x0d
    21a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    21a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a ef       	ldi	r20, 0xFA	; 250
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	88 87       	std	Y+8, r24	; 0x08
    21b6:	99 87       	std	Y+9, r25	; 0x09
    21b8:	aa 87       	std	Y+10, r26	; 0x0a
    21ba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    21bc:	68 85       	ldd	r22, Y+8	; 0x08
    21be:	79 85       	ldd	r23, Y+9	; 0x09
    21c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <LCD_voidSendCmnd+0x6d4>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9f 83       	std	Y+7, r25	; 0x07
    21da:	8e 83       	std	Y+6, r24	; 0x06
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <LCD_voidSendCmnd+0x752>
	else if (__tmp > 65535)
    21de:	68 85       	ldd	r22, Y+8	; 0x08
    21e0:	79 85       	ldd	r23, Y+9	; 0x09
    21e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <LCD_voidSendCmnd+0x73e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6c 85       	ldd	r22, Y+12	; 0x0c
    21f8:	7d 85       	ldd	r23, Y+13	; 0x0d
    21fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    21fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9f 83       	std	Y+7, r25	; 0x07
    221c:	8e 83       	std	Y+6, r24	; 0x06
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_voidSendCmnd+0x734>
    2220:	88 ec       	ldi	r24, 0xC8	; 200
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9d 83       	std	Y+5, r25	; 0x05
    2226:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2228:	8c 81       	ldd	r24, Y+4	; 0x04
    222a:	9d 81       	ldd	r25, Y+5	; 0x05
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_voidSendCmnd+0x722>
    2230:	9d 83       	std	Y+5, r25	; 0x05
    2232:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8e 81       	ldd	r24, Y+6	; 0x06
    2236:	9f 81       	ldd	r25, Y+7	; 0x07
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9f 83       	std	Y+7, r25	; 0x07
    223c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8e 81       	ldd	r24, Y+6	; 0x06
    2240:	9f 81       	ldd	r25, Y+7	; 0x07
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_voidSendCmnd+0x716>
    2246:	24 c0       	rjmp	.+72     	; 0x2290 <LCD_voidSendCmnd+0x786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	68 85       	ldd	r22, Y+8	; 0x08
    224a:	79 85       	ldd	r23, Y+9	; 0x09
    224c:	8a 85       	ldd	r24, Y+10	; 0x0a
    224e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2250:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9f 83       	std	Y+7, r25	; 0x07
    225a:	8e 83       	std	Y+6, r24	; 0x06
    225c:	8e 81       	ldd	r24, Y+6	; 0x06
    225e:	9f 81       	ldd	r25, Y+7	; 0x07
    2260:	9b 83       	std	Y+3, r25	; 0x03
    2262:	8a 83       	std	Y+2, r24	; 0x02
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	9b 81       	ldd	r25, Y+3	; 0x03
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_voidSendCmnd+0x75e>
    226c:	9b 83       	std	Y+3, r25	; 0x03
    226e:	8a 83       	std	Y+2, r24	; 0x02
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <LCD_voidSendCmnd+0x786>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2272:	69 89       	ldd	r22, Y+17	; 0x11
    2274:	7a 89       	ldd	r23, Y+18	; 0x12
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	88 8b       	std	Y+16, r24	; 0x10
    2284:	88 89       	ldd	r24, Y+16	; 0x10
    2286:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	8a 95       	dec	r24
    228c:	f1 f7       	brne	.-4      	; 0x228a <LCD_voidSendCmnd+0x780>
    228e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    2290:	cf 59       	subi	r28, 0x9F	; 159
    2292:	df 4f       	sbci	r29, 0xFF	; 255
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	08 95       	ret

000022a8 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    22a8:	0f 93       	push	r16
    22aa:	1f 93       	push	r17
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
    22b4:	c1 56       	subi	r28, 0x61	; 97
    22b6:	d0 40       	sbci	r29, 0x00	; 0
    22b8:	0f b6       	in	r0, 0x3f	; 63
    22ba:	f8 94       	cli
    22bc:	de bf       	out	0x3e, r29	; 62
    22be:	0f be       	out	0x3f, r0	; 63
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	fe 01       	movw	r30, r28
    22c4:	ef 59       	subi	r30, 0x9F	; 159
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 83       	st	Z, r24
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
#elif LCD_u8_MODE == LCD_u8_MODE_4_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    22de:	fe 01       	movw	r30, r28
    22e0:	ef 59       	subi	r30, 0x9F	; 159
    22e2:	ff 4f       	sbci	r31, 0xFF	; 255
    22e4:	83 e0       	ldi	r24, 0x03	; 3
    22e6:	60 81       	ld	r22, Z
    22e8:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	62 e0       	ldi	r22, 0x02	; 2
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    22f6:	fe 01       	movw	r30, r28
    22f8:	e3 5a       	subi	r30, 0xA3	; 163
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 e8       	ldi	r26, 0x80	; 128
    2302:	bf e3       	ldi	r27, 0x3F	; 63
    2304:	80 83       	st	Z, r24
    2306:	91 83       	std	Z+1, r25	; 0x01
    2308:	a2 83       	std	Z+2, r26	; 0x02
    230a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    230c:	8e 01       	movw	r16, r28
    230e:	07 5a       	subi	r16, 0xA7	; 167
    2310:	1f 4f       	sbci	r17, 0xFF	; 255
    2312:	fe 01       	movw	r30, r28
    2314:	e3 5a       	subi	r30, 0xA3	; 163
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	60 81       	ld	r22, Z
    231a:	71 81       	ldd	r23, Z+1	; 0x01
    231c:	82 81       	ldd	r24, Z+2	; 0x02
    231e:	93 81       	ldd	r25, Z+3	; 0x03
    2320:	2b ea       	ldi	r18, 0xAB	; 171
    2322:	3a ea       	ldi	r19, 0xAA	; 170
    2324:	4a e2       	ldi	r20, 0x2A	; 42
    2326:	50 e4       	ldi	r21, 0x40	; 64
    2328:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	f8 01       	movw	r30, r16
    2332:	80 83       	st	Z, r24
    2334:	91 83       	std	Z+1, r25	; 0x01
    2336:	a2 83       	std	Z+2, r26	; 0x02
    2338:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233a:	fe 01       	movw	r30, r28
    233c:	e7 5a       	subi	r30, 0xA7	; 167
    233e:	ff 4f       	sbci	r31, 0xFF	; 255
    2340:	60 81       	ld	r22, Z
    2342:	71 81       	ldd	r23, Z+1	; 0x01
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	93 81       	ldd	r25, Z+3	; 0x03
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	34 f4       	brge	.+12     	; 0x2364 <LCD_voidSendChar+0xbc>
		__ticks = 1;
    2358:	fe 01       	movw	r30, r28
    235a:	e8 5a       	subi	r30, 0xA8	; 168
    235c:	ff 4f       	sbci	r31, 0xFF	; 255
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	80 83       	st	Z, r24
    2362:	e0 c0       	rjmp	.+448    	; 0x2524 <LCD_voidSendChar+0x27c>
	else if (__tmp > 255)
    2364:	fe 01       	movw	r30, r28
    2366:	e7 5a       	subi	r30, 0xA7	; 167
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	60 81       	ld	r22, Z
    236c:	71 81       	ldd	r23, Z+1	; 0x01
    236e:	82 81       	ldd	r24, Z+2	; 0x02
    2370:	93 81       	ldd	r25, Z+3	; 0x03
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	30 e0       	ldi	r19, 0x00	; 0
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	53 e4       	ldi	r21, 0x43	; 67
    237a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	0c f0       	brlt	.+2      	; 0x2384 <LCD_voidSendChar+0xdc>
    2382:	c0 c0       	rjmp	.+384    	; 0x2504 <LCD_voidSendChar+0x25c>
	{
		_delay_ms(__us / 1000.0);
    2384:	fe 01       	movw	r30, r28
    2386:	e3 5a       	subi	r30, 0xA3	; 163
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a e7       	ldi	r20, 0x7A	; 122
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	fe 01       	movw	r30, r28
    23a4:	ec 5a       	subi	r30, 0xAC	; 172
    23a6:	ff 4f       	sbci	r31, 0xFF	; 255
    23a8:	80 83       	st	Z, r24
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	a2 83       	std	Z+2, r26	; 0x02
    23ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b0:	8e 01       	movw	r16, r28
    23b2:	00 5b       	subi	r16, 0xB0	; 176
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	fe 01       	movw	r30, r28
    23b8:	ec 5a       	subi	r30, 0xAC	; 172
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	4a ef       	ldi	r20, 0xFA	; 250
    23ca:	54 e4       	ldi	r21, 0x44	; 68
    23cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23d0:	dc 01       	movw	r26, r24
    23d2:	cb 01       	movw	r24, r22
    23d4:	f8 01       	movw	r30, r16
    23d6:	80 83       	st	Z, r24
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	a2 83       	std	Z+2, r26	; 0x02
    23dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23de:	fe 01       	movw	r30, r28
    23e0:	e0 5b       	subi	r30, 0xB0	; 176
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	60 81       	ld	r22, Z
    23e6:	71 81       	ldd	r23, Z+1	; 0x01
    23e8:	82 81       	ldd	r24, Z+2	; 0x02
    23ea:	93 81       	ldd	r25, Z+3	; 0x03
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e8       	ldi	r20, 0x80	; 128
    23f2:	5f e3       	ldi	r21, 0x3F	; 63
    23f4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23f8:	88 23       	and	r24, r24
    23fa:	44 f4       	brge	.+16     	; 0x240c <LCD_voidSendChar+0x164>
		__ticks = 1;
    23fc:	fe 01       	movw	r30, r28
    23fe:	e2 5b       	subi	r30, 0xB2	; 178
    2400:	ff 4f       	sbci	r31, 0xFF	; 255
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	91 83       	std	Z+1, r25	; 0x01
    2408:	80 83       	st	Z, r24
    240a:	64 c0       	rjmp	.+200    	; 0x24d4 <LCD_voidSendChar+0x22c>
	else if (__tmp > 65535)
    240c:	fe 01       	movw	r30, r28
    240e:	e0 5b       	subi	r30, 0xB0	; 176
    2410:	ff 4f       	sbci	r31, 0xFF	; 255
    2412:	60 81       	ld	r22, Z
    2414:	71 81       	ldd	r23, Z+1	; 0x01
    2416:	82 81       	ldd	r24, Z+2	; 0x02
    2418:	93 81       	ldd	r25, Z+3	; 0x03
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	0c f0       	brlt	.+2      	; 0x242c <LCD_voidSendChar+0x184>
    242a:	43 c0       	rjmp	.+134    	; 0x24b2 <LCD_voidSendChar+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242c:	fe 01       	movw	r30, r28
    242e:	ec 5a       	subi	r30, 0xAC	; 172
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	8e 01       	movw	r16, r28
    244c:	02 5b       	subi	r16, 0xB2	; 178
    244e:	1f 4f       	sbci	r17, 0xFF	; 255
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	f8 01       	movw	r30, r16
    245e:	91 83       	std	Z+1, r25	; 0x01
    2460:	80 83       	st	Z, r24
    2462:	1f c0       	rjmp	.+62     	; 0x24a2 <LCD_voidSendChar+0x1fa>
    2464:	fe 01       	movw	r30, r28
    2466:	e4 5b       	subi	r30, 0xB4	; 180
    2468:	ff 4f       	sbci	r31, 0xFF	; 255
    246a:	88 ec       	ldi	r24, 0xC8	; 200
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	91 83       	std	Z+1, r25	; 0x01
    2470:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2472:	fe 01       	movw	r30, r28
    2474:	e4 5b       	subi	r30, 0xB4	; 180
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	80 81       	ld	r24, Z
    247a:	91 81       	ldd	r25, Z+1	; 0x01
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <LCD_voidSendChar+0x1d4>
    2480:	fe 01       	movw	r30, r28
    2482:	e4 5b       	subi	r30, 0xB4	; 180
    2484:	ff 4f       	sbci	r31, 0xFF	; 255
    2486:	91 83       	std	Z+1, r25	; 0x01
    2488:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248a:	de 01       	movw	r26, r28
    248c:	a2 5b       	subi	r26, 0xB2	; 178
    248e:	bf 4f       	sbci	r27, 0xFF	; 255
    2490:	fe 01       	movw	r30, r28
    2492:	e2 5b       	subi	r30, 0xB2	; 178
    2494:	ff 4f       	sbci	r31, 0xFF	; 255
    2496:	80 81       	ld	r24, Z
    2498:	91 81       	ldd	r25, Z+1	; 0x01
    249a:	01 97       	sbiw	r24, 0x01	; 1
    249c:	11 96       	adiw	r26, 0x01	; 1
    249e:	9c 93       	st	X, r25
    24a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a2:	fe 01       	movw	r30, r28
    24a4:	e2 5b       	subi	r30, 0xB2	; 178
    24a6:	ff 4f       	sbci	r31, 0xFF	; 255
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	d1 f6       	brne	.-76     	; 0x2464 <LCD_voidSendChar+0x1bc>
    24b0:	4b c0       	rjmp	.+150    	; 0x2548 <LCD_voidSendChar+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	8e 01       	movw	r16, r28
    24b4:	02 5b       	subi	r16, 0xB2	; 178
    24b6:	1f 4f       	sbci	r17, 0xFF	; 255
    24b8:	fe 01       	movw	r30, r28
    24ba:	e0 5b       	subi	r30, 0xB0	; 176
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	60 81       	ld	r22, Z
    24c0:	71 81       	ldd	r23, Z+1	; 0x01
    24c2:	82 81       	ldd	r24, Z+2	; 0x02
    24c4:	93 81       	ldd	r25, Z+3	; 0x03
    24c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	f8 01       	movw	r30, r16
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
    24d4:	de 01       	movw	r26, r28
    24d6:	a6 5b       	subi	r26, 0xB6	; 182
    24d8:	bf 4f       	sbci	r27, 0xFF	; 255
    24da:	fe 01       	movw	r30, r28
    24dc:	e2 5b       	subi	r30, 0xB2	; 178
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 81       	ld	r24, Z
    24e2:	91 81       	ldd	r25, Z+1	; 0x01
    24e4:	11 96       	adiw	r26, 0x01	; 1
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	fe 01       	movw	r30, r28
    24ec:	e6 5b       	subi	r30, 0xB6	; 182
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_voidSendChar+0x24c>
    24f8:	fe 01       	movw	r30, r28
    24fa:	e6 5b       	subi	r30, 0xB6	; 182
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
    2502:	22 c0       	rjmp	.+68     	; 0x2548 <LCD_voidSendChar+0x2a0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2504:	8e 01       	movw	r16, r28
    2506:	08 5a       	subi	r16, 0xA8	; 168
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	fe 01       	movw	r30, r28
    250c:	e7 5a       	subi	r30, 0xA7	; 167
    250e:	ff 4f       	sbci	r31, 0xFF	; 255
    2510:	60 81       	ld	r22, Z
    2512:	71 81       	ldd	r23, Z+1	; 0x01
    2514:	82 81       	ldd	r24, Z+2	; 0x02
    2516:	93 81       	ldd	r25, Z+3	; 0x03
    2518:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	f8 01       	movw	r30, r16
    2522:	80 83       	st	Z, r24
    2524:	de 01       	movw	r26, r28
    2526:	a7 5b       	subi	r26, 0xB7	; 183
    2528:	bf 4f       	sbci	r27, 0xFF	; 255
    252a:	fe 01       	movw	r30, r28
    252c:	e8 5a       	subi	r30, 0xA8	; 168
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2534:	fe 01       	movw	r30, r28
    2536:	e7 5b       	subi	r30, 0xB7	; 183
    2538:	ff 4f       	sbci	r31, 0xFF	; 255
    253a:	80 81       	ld	r24, Z
    253c:	8a 95       	dec	r24
    253e:	f1 f7       	brne	.-4      	; 0x253c <LCD_voidSendChar+0x294>
    2540:	fe 01       	movw	r30, r28
    2542:	e7 5b       	subi	r30, 0xB7	; 183
    2544:	ff 4f       	sbci	r31, 0xFF	; 255
    2546:	80 83       	st	Z, r24
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	62 e0       	ldi	r22, 0x02	; 2
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    2552:	fe 01       	movw	r30, r28
    2554:	eb 5b       	subi	r30, 0xBB	; 187
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	80 e0       	ldi	r24, 0x00	; 0
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	a0 e8       	ldi	r26, 0x80	; 128
    255e:	bf e3       	ldi	r27, 0x3F	; 63
    2560:	80 83       	st	Z, r24
    2562:	91 83       	std	Z+1, r25	; 0x01
    2564:	a2 83       	std	Z+2, r26	; 0x02
    2566:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2568:	8e 01       	movw	r16, r28
    256a:	0f 5b       	subi	r16, 0xBF	; 191
    256c:	1f 4f       	sbci	r17, 0xFF	; 255
    256e:	fe 01       	movw	r30, r28
    2570:	eb 5b       	subi	r30, 0xBB	; 187
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	60 81       	ld	r22, Z
    2576:	71 81       	ldd	r23, Z+1	; 0x01
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	2b ea       	ldi	r18, 0xAB	; 171
    257e:	3a ea       	ldi	r19, 0xAA	; 170
    2580:	4a e2       	ldi	r20, 0x2A	; 42
    2582:	50 e4       	ldi	r21, 0x40	; 64
    2584:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	f8 01       	movw	r30, r16
    258e:	80 83       	st	Z, r24
    2590:	91 83       	std	Z+1, r25	; 0x01
    2592:	a2 83       	std	Z+2, r26	; 0x02
    2594:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2596:	fe 01       	movw	r30, r28
    2598:	ef 5b       	subi	r30, 0xBF	; 191
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	60 81       	ld	r22, Z
    259e:	71 81       	ldd	r23, Z+1	; 0x01
    25a0:	82 81       	ldd	r24, Z+2	; 0x02
    25a2:	93 81       	ldd	r25, Z+3	; 0x03
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	34 f4       	brge	.+12     	; 0x25c0 <LCD_voidSendChar+0x318>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	fe 01       	movw	r30, r28
    25b8:	e0 5c       	subi	r30, 0xC0	; 192
    25ba:	ff 4f       	sbci	r31, 0xFF	; 255
    25bc:	80 83       	st	Z, r24
    25be:	9d c0       	rjmp	.+314    	; 0x26fa <LCD_voidSendChar+0x452>
	else if (__tmp > 255)
    25c0:	fe 01       	movw	r30, r28
    25c2:	ef 5b       	subi	r30, 0xBF	; 191
    25c4:	ff 4f       	sbci	r31, 0xFF	; 255
    25c6:	60 81       	ld	r22, Z
    25c8:	71 81       	ldd	r23, Z+1	; 0x01
    25ca:	82 81       	ldd	r24, Z+2	; 0x02
    25cc:	93 81       	ldd	r25, Z+3	; 0x03
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4f e7       	ldi	r20, 0x7F	; 127
    25d4:	53 e4       	ldi	r21, 0x43	; 67
    25d6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25da:	18 16       	cp	r1, r24
    25dc:	0c f0       	brlt	.+2      	; 0x25e0 <LCD_voidSendChar+0x338>
    25de:	7e c0       	rjmp	.+252    	; 0x26dc <LCD_voidSendChar+0x434>
	{
		_delay_ms(__us / 1000.0);
    25e0:	fe 01       	movw	r30, r28
    25e2:	eb 5b       	subi	r30, 0xBB	; 187
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	60 81       	ld	r22, Z
    25e8:	71 81       	ldd	r23, Z+1	; 0x01
    25ea:	82 81       	ldd	r24, Z+2	; 0x02
    25ec:	93 81       	ldd	r25, Z+3	; 0x03
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a e7       	ldi	r20, 0x7A	; 122
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8c af       	std	Y+60, r24	; 0x3c
    2600:	9d af       	std	Y+61, r25	; 0x3d
    2602:	ae af       	std	Y+62, r26	; 0x3e
    2604:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2606:	6c ad       	ldd	r22, Y+60	; 0x3c
    2608:	7d ad       	ldd	r23, Y+61	; 0x3d
    260a:	8e ad       	ldd	r24, Y+62	; 0x3e
    260c:	9f ad       	ldd	r25, Y+63	; 0x3f
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	4a ef       	ldi	r20, 0xFA	; 250
    2614:	54 e4       	ldi	r21, 0x44	; 68
    2616:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	88 af       	std	Y+56, r24	; 0x38
    2620:	99 af       	std	Y+57, r25	; 0x39
    2622:	aa af       	std	Y+58, r26	; 0x3a
    2624:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    2626:	68 ad       	ldd	r22, Y+56	; 0x38
    2628:	79 ad       	ldd	r23, Y+57	; 0x39
    262a:	8a ad       	ldd	r24, Y+58	; 0x3a
    262c:	9b ad       	ldd	r25, Y+59	; 0x3b
    262e:	20 e0       	ldi	r18, 0x00	; 0
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	40 e8       	ldi	r20, 0x80	; 128
    2634:	5f e3       	ldi	r21, 0x3F	; 63
    2636:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    263a:	88 23       	and	r24, r24
    263c:	2c f4       	brge	.+10     	; 0x2648 <LCD_voidSendChar+0x3a0>
		__ticks = 1;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	9f ab       	std	Y+55, r25	; 0x37
    2644:	8e ab       	std	Y+54, r24	; 0x36
    2646:	3f c0       	rjmp	.+126    	; 0x26c6 <LCD_voidSendChar+0x41e>
	else if (__tmp > 65535)
    2648:	68 ad       	ldd	r22, Y+56	; 0x38
    264a:	79 ad       	ldd	r23, Y+57	; 0x39
    264c:	8a ad       	ldd	r24, Y+58	; 0x3a
    264e:	9b ad       	ldd	r25, Y+59	; 0x3b
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	3f ef       	ldi	r19, 0xFF	; 255
    2654:	4f e7       	ldi	r20, 0x7F	; 127
    2656:	57 e4       	ldi	r21, 0x47	; 71
    2658:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    265c:	18 16       	cp	r1, r24
    265e:	4c f5       	brge	.+82     	; 0x26b2 <LCD_voidSendChar+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2660:	6c ad       	ldd	r22, Y+60	; 0x3c
    2662:	7d ad       	ldd	r23, Y+61	; 0x3d
    2664:	8e ad       	ldd	r24, Y+62	; 0x3e
    2666:	9f ad       	ldd	r25, Y+63	; 0x3f
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e2       	ldi	r20, 0x20	; 32
    266e:	51 e4       	ldi	r21, 0x41	; 65
    2670:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9f ab       	std	Y+55, r25	; 0x37
    2686:	8e ab       	std	Y+54, r24	; 0x36
    2688:	0f c0       	rjmp	.+30     	; 0x26a8 <LCD_voidSendChar+0x400>
    268a:	88 ec       	ldi	r24, 0xC8	; 200
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	9d ab       	std	Y+53, r25	; 0x35
    2690:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2692:	8c a9       	ldd	r24, Y+52	; 0x34
    2694:	9d a9       	ldd	r25, Y+53	; 0x35
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	f1 f7       	brne	.-4      	; 0x2696 <LCD_voidSendChar+0x3ee>
    269a:	9d ab       	std	Y+53, r25	; 0x35
    269c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    269e:	8e a9       	ldd	r24, Y+54	; 0x36
    26a0:	9f a9       	ldd	r25, Y+55	; 0x37
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	9f ab       	std	Y+55, r25	; 0x37
    26a6:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a8:	8e a9       	ldd	r24, Y+54	; 0x36
    26aa:	9f a9       	ldd	r25, Y+55	; 0x37
    26ac:	00 97       	sbiw	r24, 0x00	; 0
    26ae:	69 f7       	brne	.-38     	; 0x268a <LCD_voidSendChar+0x3e2>
    26b0:	2d c0       	rjmp	.+90     	; 0x270c <LCD_voidSendChar+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b2:	68 ad       	ldd	r22, Y+56	; 0x38
    26b4:	79 ad       	ldd	r23, Y+57	; 0x39
    26b6:	8a ad       	ldd	r24, Y+58	; 0x3a
    26b8:	9b ad       	ldd	r25, Y+59	; 0x3b
    26ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9f ab       	std	Y+55, r25	; 0x37
    26c4:	8e ab       	std	Y+54, r24	; 0x36
    26c6:	8e a9       	ldd	r24, Y+54	; 0x36
    26c8:	9f a9       	ldd	r25, Y+55	; 0x37
    26ca:	9b ab       	std	Y+51, r25	; 0x33
    26cc:	8a ab       	std	Y+50, r24	; 0x32
    26ce:	8a a9       	ldd	r24, Y+50	; 0x32
    26d0:	9b a9       	ldd	r25, Y+51	; 0x33
    26d2:	01 97       	sbiw	r24, 0x01	; 1
    26d4:	f1 f7       	brne	.-4      	; 0x26d2 <LCD_voidSendChar+0x42a>
    26d6:	9b ab       	std	Y+51, r25	; 0x33
    26d8:	8a ab       	std	Y+50, r24	; 0x32
    26da:	18 c0       	rjmp	.+48     	; 0x270c <LCD_voidSendChar+0x464>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26dc:	fe 01       	movw	r30, r28
    26de:	ef 5b       	subi	r30, 0xBF	; 191
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	60 81       	ld	r22, Z
    26e4:	71 81       	ldd	r23, Z+1	; 0x01
    26e6:	82 81       	ldd	r24, Z+2	; 0x02
    26e8:	93 81       	ldd	r25, Z+3	; 0x03
    26ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	fe 01       	movw	r30, r28
    26f4:	e0 5c       	subi	r30, 0xC0	; 192
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	80 83       	st	Z, r24
    26fa:	fe 01       	movw	r30, r28
    26fc:	e0 5c       	subi	r30, 0xC0	; 192
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2704:	89 a9       	ldd	r24, Y+49	; 0x31
    2706:	8a 95       	dec	r24
    2708:	f1 f7       	brne	.-4      	; 0x2706 <LCD_voidSendChar+0x45e>
    270a:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
	/* Step 6: Write Char <<4 */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char<<4);
    270c:	fe 01       	movw	r30, r28
    270e:	ef 59       	subi	r30, 0x9F	; 159
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	80 81       	ld	r24, Z
    2714:	98 2f       	mov	r25, r24
    2716:	92 95       	swap	r25
    2718:	90 7f       	andi	r25, 0xF0	; 240
    271a:	83 e0       	ldi	r24, 0x03	; 3
    271c:	69 2f       	mov	r22, r25
    271e:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* Step 7: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	a0 e8       	ldi	r26, 0x80	; 128
    2732:	bf e3       	ldi	r27, 0x3F	; 63
    2734:	8d a7       	std	Y+45, r24	; 0x2d
    2736:	9e a7       	std	Y+46, r25	; 0x2e
    2738:	af a7       	std	Y+47, r26	; 0x2f
    273a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    273c:	6d a5       	ldd	r22, Y+45	; 0x2d
    273e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2740:	8f a5       	ldd	r24, Y+47	; 0x2f
    2742:	98 a9       	ldd	r25, Y+48	; 0x30
    2744:	2b ea       	ldi	r18, 0xAB	; 171
    2746:	3a ea       	ldi	r19, 0xAA	; 170
    2748:	4a e2       	ldi	r20, 0x2A	; 42
    274a:	50 e4       	ldi	r21, 0x40	; 64
    274c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	89 a7       	std	Y+41, r24	; 0x29
    2756:	9a a7       	std	Y+42, r25	; 0x2a
    2758:	ab a7       	std	Y+43, r26	; 0x2b
    275a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    275c:	69 a5       	ldd	r22, Y+41	; 0x29
    275e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2760:	8b a5       	ldd	r24, Y+43	; 0x2b
    2762:	9c a5       	ldd	r25, Y+44	; 0x2c
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	1c f4       	brge	.+6      	; 0x277a <LCD_voidSendChar+0x4d2>
		__ticks = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	88 a7       	std	Y+40, r24	; 0x28
    2778:	91 c0       	rjmp	.+290    	; 0x289c <LCD_voidSendChar+0x5f4>
	else if (__tmp > 255)
    277a:	69 a5       	ldd	r22, Y+41	; 0x29
    277c:	7a a5       	ldd	r23, Y+42	; 0x2a
    277e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2780:	9c a5       	ldd	r25, Y+44	; 0x2c
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	4f e7       	ldi	r20, 0x7F	; 127
    2788:	53 e4       	ldi	r21, 0x43	; 67
    278a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    278e:	18 16       	cp	r1, r24
    2790:	0c f0       	brlt	.+2      	; 0x2794 <LCD_voidSendChar+0x4ec>
    2792:	7b c0       	rjmp	.+246    	; 0x288a <LCD_voidSendChar+0x5e2>
	{
		_delay_ms(__us / 1000.0);
    2794:	6d a5       	ldd	r22, Y+45	; 0x2d
    2796:	7e a5       	ldd	r23, Y+46	; 0x2e
    2798:	8f a5       	ldd	r24, Y+47	; 0x2f
    279a:	98 a9       	ldd	r25, Y+48	; 0x30
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a e7       	ldi	r20, 0x7A	; 122
    27a2:	54 e4       	ldi	r21, 0x44	; 68
    27a4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8c a3       	std	Y+36, r24	; 0x24
    27ae:	9d a3       	std	Y+37, r25	; 0x25
    27b0:	ae a3       	std	Y+38, r26	; 0x26
    27b2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	6c a1       	ldd	r22, Y+36	; 0x24
    27b6:	7d a1       	ldd	r23, Y+37	; 0x25
    27b8:	8e a1       	ldd	r24, Y+38	; 0x26
    27ba:	9f a1       	ldd	r25, Y+39	; 0x27
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	4a ef       	ldi	r20, 0xFA	; 250
    27c2:	54 e4       	ldi	r21, 0x44	; 68
    27c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	88 a3       	std	Y+32, r24	; 0x20
    27ce:	99 a3       	std	Y+33, r25	; 0x21
    27d0:	aa a3       	std	Y+34, r26	; 0x22
    27d2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    27d4:	68 a1       	ldd	r22, Y+32	; 0x20
    27d6:	79 a1       	ldd	r23, Y+33	; 0x21
    27d8:	8a a1       	ldd	r24, Y+34	; 0x22
    27da:	9b a1       	ldd	r25, Y+35	; 0x23
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e8       	ldi	r20, 0x80	; 128
    27e2:	5f e3       	ldi	r21, 0x3F	; 63
    27e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27e8:	88 23       	and	r24, r24
    27ea:	2c f4       	brge	.+10     	; 0x27f6 <LCD_voidSendChar+0x54e>
		__ticks = 1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9f 8f       	std	Y+31, r25	; 0x1f
    27f2:	8e 8f       	std	Y+30, r24	; 0x1e
    27f4:	3f c0       	rjmp	.+126    	; 0x2874 <LCD_voidSendChar+0x5cc>
	else if (__tmp > 65535)
    27f6:	68 a1       	ldd	r22, Y+32	; 0x20
    27f8:	79 a1       	ldd	r23, Y+33	; 0x21
    27fa:	8a a1       	ldd	r24, Y+34	; 0x22
    27fc:	9b a1       	ldd	r25, Y+35	; 0x23
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	3f ef       	ldi	r19, 0xFF	; 255
    2802:	4f e7       	ldi	r20, 0x7F	; 127
    2804:	57 e4       	ldi	r21, 0x47	; 71
    2806:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    280a:	18 16       	cp	r1, r24
    280c:	4c f5       	brge	.+82     	; 0x2860 <LCD_voidSendChar+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280e:	6c a1       	ldd	r22, Y+36	; 0x24
    2810:	7d a1       	ldd	r23, Y+37	; 0x25
    2812:	8e a1       	ldd	r24, Y+38	; 0x26
    2814:	9f a1       	ldd	r25, Y+39	; 0x27
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e2       	ldi	r20, 0x20	; 32
    281c:	51 e4       	ldi	r21, 0x41	; 65
    281e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9f 8f       	std	Y+31, r25	; 0x1f
    2834:	8e 8f       	std	Y+30, r24	; 0x1e
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <LCD_voidSendChar+0x5ae>
    2838:	88 ec       	ldi	r24, 0xC8	; 200
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9d 8f       	std	Y+29, r25	; 0x1d
    283e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2840:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2842:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_voidSendChar+0x59c>
    2848:	9d 8f       	std	Y+29, r25	; 0x1d
    284a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    284e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	9f 8f       	std	Y+31, r25	; 0x1f
    2854:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2858:	9f 8d       	ldd	r25, Y+31	; 0x1f
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	69 f7       	brne	.-38     	; 0x2838 <LCD_voidSendChar+0x590>
    285e:	24 c0       	rjmp	.+72     	; 0x28a8 <LCD_voidSendChar+0x600>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2860:	68 a1       	ldd	r22, Y+32	; 0x20
    2862:	79 a1       	ldd	r23, Y+33	; 0x21
    2864:	8a a1       	ldd	r24, Y+34	; 0x22
    2866:	9b a1       	ldd	r25, Y+35	; 0x23
    2868:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9f 8f       	std	Y+31, r25	; 0x1f
    2872:	8e 8f       	std	Y+30, r24	; 0x1e
    2874:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2876:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2878:	9b 8f       	std	Y+27, r25	; 0x1b
    287a:	8a 8f       	std	Y+26, r24	; 0x1a
    287c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    287e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_voidSendChar+0x5d8>
    2884:	9b 8f       	std	Y+27, r25	; 0x1b
    2886:	8a 8f       	std	Y+26, r24	; 0x1a
    2888:	0f c0       	rjmp	.+30     	; 0x28a8 <LCD_voidSendChar+0x600>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    288a:	69 a5       	ldd	r22, Y+41	; 0x29
    288c:	7a a5       	ldd	r23, Y+42	; 0x2a
    288e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2890:	9c a5       	ldd	r25, Y+44	; 0x2c
    2892:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	88 a7       	std	Y+40, r24	; 0x28
    289c:	88 a5       	ldd	r24, Y+40	; 0x28
    289e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28a0:	89 8d       	ldd	r24, Y+25	; 0x19
    28a2:	8a 95       	dec	r24
    28a4:	f1 f7       	brne	.-4      	; 0x28a2 <LCD_voidSendChar+0x5fa>
    28a6:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	62 e0       	ldi	r22, 0x02	; 2
    28ac:	40 e0       	ldi	r20, 0x00	; 0
    28ae:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e8       	ldi	r26, 0x80	; 128
    28b8:	bf e3       	ldi	r27, 0x3F	; 63
    28ba:	8d 8b       	std	Y+21, r24	; 0x15
    28bc:	9e 8b       	std	Y+22, r25	; 0x16
    28be:	af 8b       	std	Y+23, r26	; 0x17
    28c0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28c2:	6d 89       	ldd	r22, Y+21	; 0x15
    28c4:	7e 89       	ldd	r23, Y+22	; 0x16
    28c6:	8f 89       	ldd	r24, Y+23	; 0x17
    28c8:	98 8d       	ldd	r25, Y+24	; 0x18
    28ca:	2b ea       	ldi	r18, 0xAB	; 171
    28cc:	3a ea       	ldi	r19, 0xAA	; 170
    28ce:	4a e2       	ldi	r20, 0x2A	; 42
    28d0:	50 e4       	ldi	r21, 0x40	; 64
    28d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28d6:	dc 01       	movw	r26, r24
    28d8:	cb 01       	movw	r24, r22
    28da:	89 8b       	std	Y+17, r24	; 0x11
    28dc:	9a 8b       	std	Y+18, r25	; 0x12
    28de:	ab 8b       	std	Y+19, r26	; 0x13
    28e0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28e2:	69 89       	ldd	r22, Y+17	; 0x11
    28e4:	7a 89       	ldd	r23, Y+18	; 0x12
    28e6:	8b 89       	ldd	r24, Y+19	; 0x13
    28e8:	9c 89       	ldd	r25, Y+20	; 0x14
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    28f6:	88 23       	and	r24, r24
    28f8:	1c f4       	brge	.+6      	; 0x2900 <LCD_voidSendChar+0x658>
		__ticks = 1;
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	88 8b       	std	Y+16, r24	; 0x10
    28fe:	91 c0       	rjmp	.+290    	; 0x2a22 <LCD_voidSendChar+0x77a>
	else if (__tmp > 255)
    2900:	69 89       	ldd	r22, Y+17	; 0x11
    2902:	7a 89       	ldd	r23, Y+18	; 0x12
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	20 e0       	ldi	r18, 0x00	; 0
    290a:	30 e0       	ldi	r19, 0x00	; 0
    290c:	4f e7       	ldi	r20, 0x7F	; 127
    290e:	53 e4       	ldi	r21, 0x43	; 67
    2910:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2914:	18 16       	cp	r1, r24
    2916:	0c f0       	brlt	.+2      	; 0x291a <LCD_voidSendChar+0x672>
    2918:	7b c0       	rjmp	.+246    	; 0x2a10 <LCD_voidSendChar+0x768>
	{
		_delay_ms(__us / 1000.0);
    291a:	6d 89       	ldd	r22, Y+21	; 0x15
    291c:	7e 89       	ldd	r23, Y+22	; 0x16
    291e:	8f 89       	ldd	r24, Y+23	; 0x17
    2920:	98 8d       	ldd	r25, Y+24	; 0x18
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	30 e0       	ldi	r19, 0x00	; 0
    2926:	4a e7       	ldi	r20, 0x7A	; 122
    2928:	54 e4       	ldi	r21, 0x44	; 68
    292a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    292e:	dc 01       	movw	r26, r24
    2930:	cb 01       	movw	r24, r22
    2932:	8c 87       	std	Y+12, r24	; 0x0c
    2934:	9d 87       	std	Y+13, r25	; 0x0d
    2936:	ae 87       	std	Y+14, r26	; 0x0e
    2938:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    293a:	6c 85       	ldd	r22, Y+12	; 0x0c
    293c:	7d 85       	ldd	r23, Y+13	; 0x0d
    293e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2940:	9f 85       	ldd	r25, Y+15	; 0x0f
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	4a ef       	ldi	r20, 0xFA	; 250
    2948:	54 e4       	ldi	r21, 0x44	; 68
    294a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    294e:	dc 01       	movw	r26, r24
    2950:	cb 01       	movw	r24, r22
    2952:	88 87       	std	Y+8, r24	; 0x08
    2954:	99 87       	std	Y+9, r25	; 0x09
    2956:	aa 87       	std	Y+10, r26	; 0x0a
    2958:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    295a:	68 85       	ldd	r22, Y+8	; 0x08
    295c:	79 85       	ldd	r23, Y+9	; 0x09
    295e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2960:	9b 85       	ldd	r25, Y+11	; 0x0b
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	2c f4       	brge	.+10     	; 0x297c <LCD_voidSendChar+0x6d4>
		__ticks = 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9f 83       	std	Y+7, r25	; 0x07
    2978:	8e 83       	std	Y+6, r24	; 0x06
    297a:	3f c0       	rjmp	.+126    	; 0x29fa <LCD_voidSendChar+0x752>
	else if (__tmp > 65535)
    297c:	68 85       	ldd	r22, Y+8	; 0x08
    297e:	79 85       	ldd	r23, Y+9	; 0x09
    2980:	8a 85       	ldd	r24, Y+10	; 0x0a
    2982:	9b 85       	ldd	r25, Y+11	; 0x0b
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	3f ef       	ldi	r19, 0xFF	; 255
    2988:	4f e7       	ldi	r20, 0x7F	; 127
    298a:	57 e4       	ldi	r21, 0x47	; 71
    298c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2990:	18 16       	cp	r1, r24
    2992:	4c f5       	brge	.+82     	; 0x29e6 <LCD_voidSendChar+0x73e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	6c 85       	ldd	r22, Y+12	; 0x0c
    2996:	7d 85       	ldd	r23, Y+13	; 0x0d
    2998:	8e 85       	ldd	r24, Y+14	; 0x0e
    299a:	9f 85       	ldd	r25, Y+15	; 0x0f
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e2       	ldi	r20, 0x20	; 32
    29a2:	51 e4       	ldi	r21, 0x41	; 65
    29a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	bc 01       	movw	r22, r24
    29ae:	cd 01       	movw	r24, r26
    29b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29b4:	dc 01       	movw	r26, r24
    29b6:	cb 01       	movw	r24, r22
    29b8:	9f 83       	std	Y+7, r25	; 0x07
    29ba:	8e 83       	std	Y+6, r24	; 0x06
    29bc:	0f c0       	rjmp	.+30     	; 0x29dc <LCD_voidSendChar+0x734>
    29be:	88 ec       	ldi	r24, 0xC8	; 200
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	9d 83       	std	Y+5, r25	; 0x05
    29c4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29c6:	8c 81       	ldd	r24, Y+4	; 0x04
    29c8:	9d 81       	ldd	r25, Y+5	; 0x05
    29ca:	01 97       	sbiw	r24, 0x01	; 1
    29cc:	f1 f7       	brne	.-4      	; 0x29ca <LCD_voidSendChar+0x722>
    29ce:	9d 83       	std	Y+5, r25	; 0x05
    29d0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29d2:	8e 81       	ldd	r24, Y+6	; 0x06
    29d4:	9f 81       	ldd	r25, Y+7	; 0x07
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	9f 83       	std	Y+7, r25	; 0x07
    29da:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29dc:	8e 81       	ldd	r24, Y+6	; 0x06
    29de:	9f 81       	ldd	r25, Y+7	; 0x07
    29e0:	00 97       	sbiw	r24, 0x00	; 0
    29e2:	69 f7       	brne	.-38     	; 0x29be <LCD_voidSendChar+0x716>
    29e4:	24 c0       	rjmp	.+72     	; 0x2a2e <LCD_voidSendChar+0x786>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e6:	68 85       	ldd	r22, Y+8	; 0x08
    29e8:	79 85       	ldd	r23, Y+9	; 0x09
    29ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    29ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    29ee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29f2:	dc 01       	movw	r26, r24
    29f4:	cb 01       	movw	r24, r22
    29f6:	9f 83       	std	Y+7, r25	; 0x07
    29f8:	8e 83       	std	Y+6, r24	; 0x06
    29fa:	8e 81       	ldd	r24, Y+6	; 0x06
    29fc:	9f 81       	ldd	r25, Y+7	; 0x07
    29fe:	9b 83       	std	Y+3, r25	; 0x03
    2a00:	8a 83       	std	Y+2, r24	; 0x02
    2a02:	8a 81       	ldd	r24, Y+2	; 0x02
    2a04:	9b 81       	ldd	r25, Y+3	; 0x03
    2a06:	01 97       	sbiw	r24, 0x01	; 1
    2a08:	f1 f7       	brne	.-4      	; 0x2a06 <LCD_voidSendChar+0x75e>
    2a0a:	9b 83       	std	Y+3, r25	; 0x03
    2a0c:	8a 83       	std	Y+2, r24	; 0x02
    2a0e:	0f c0       	rjmp	.+30     	; 0x2a2e <LCD_voidSendChar+0x786>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a10:	69 89       	ldd	r22, Y+17	; 0x11
    2a12:	7a 89       	ldd	r23, Y+18	; 0x12
    2a14:	8b 89       	ldd	r24, Y+19	; 0x13
    2a16:	9c 89       	ldd	r25, Y+20	; 0x14
    2a18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2a1c:	dc 01       	movw	r26, r24
    2a1e:	cb 01       	movw	r24, r22
    2a20:	88 8b       	std	Y+16, r24	; 0x10
    2a22:	88 89       	ldd	r24, Y+16	; 0x10
    2a24:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	8a 95       	dec	r24
    2a2a:	f1 f7       	brne	.-4      	; 0x2a28 <LCD_voidSendChar+0x780>
    2a2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    2a2e:	cf 59       	subi	r28, 0x9F	; 159
    2a30:	df 4f       	sbci	r29, 0xFF	; 255
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	de bf       	out	0x3e, r29	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	cd bf       	out	0x3d, r28	; 61
    2a3c:	cf 91       	pop	r28
    2a3e:	df 91       	pop	r29
    2a40:	1f 91       	pop	r17
    2a42:	0f 91       	pop	r16
    2a44:	08 95       	ret

00002a46 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <LCD_voidWriteString+0x6>
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	0a c0       	rjmp	.+20     	; 0x2a6a <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    2a56:	e9 81       	ldd	r30, Y+1	; 0x01
    2a58:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5a:	80 81       	ld	r24, Z
    2a5c:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	01 96       	adiw	r24, 0x01	; 1
    2a66:	9a 83       	std	Y+2, r25	; 0x02
    2a68:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    2a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6e:	80 81       	ld	r24, Z
    2a70:	88 23       	and	r24, r24
    2a72:	89 f7       	brne	.-30     	; 0x2a56 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    2a74:	0f 90       	pop	r0
    2a76:	0f 90       	pop	r0
    2a78:	cf 91       	pop	r28
    2a7a:	df 91       	pop	r29
    2a7c:	08 95       	ret

00002a7e <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    2a7e:	0f 93       	push	r16
    2a80:	1f 93       	push	r17
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	cd b7       	in	r28, 0x3d	; 61
    2a88:	de b7       	in	r29, 0x3e	; 62
    2a8a:	65 97       	sbiw	r28, 0x15	; 21
    2a8c:	0f b6       	in	r0, 0x3f	; 63
    2a8e:	f8 94       	cli
    2a90:	de bf       	out	0x3e, r29	; 62
    2a92:	0f be       	out	0x3f, r0	; 63
    2a94:	cd bf       	out	0x3d, r28	; 61
    2a96:	6a 8b       	std	Y+18, r22	; 0x12
    2a98:	7b 8b       	std	Y+19, r23	; 0x13
    2a9a:	8c 8b       	std	Y+20, r24	; 0x14
    2a9c:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    2a9e:	8f ef       	ldi	r24, 0xFF	; 255
    2aa0:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    2aa2:	8a 89       	ldd	r24, Y+18	; 0x12
    2aa4:	9b 89       	ldd	r25, Y+19	; 0x13
    2aa6:	ac 89       	ldd	r26, Y+20	; 0x14
    2aa8:	bd 89       	ldd	r27, Y+21	; 0x15
    2aaa:	00 97       	sbiw	r24, 0x00	; 0
    2aac:	a1 05       	cpc	r26, r1
    2aae:	b1 05       	cpc	r27, r1
    2ab0:	99 f5       	brne	.+102    	; 0x2b18 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    2ab2:	80 e3       	ldi	r24, 0x30	; 48
    2ab4:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2ab8:	4e c0       	rjmp	.+156    	; 0x2b56 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    2ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac2:	08 2f       	mov	r16, r24
    2ac4:	11 27       	eor	r17, r17
    2ac6:	07 fd       	sbrc	r16, 7
    2ac8:	10 95       	com	r17
    2aca:	8a 89       	ldd	r24, Y+18	; 0x12
    2acc:	9b 89       	ldd	r25, Y+19	; 0x13
    2ace:	ac 89       	ldd	r26, Y+20	; 0x14
    2ad0:	bd 89       	ldd	r27, Y+21	; 0x15
    2ad2:	2a e0       	ldi	r18, 0x0A	; 10
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	0e 94 4f 19 	call	0x329e	; 0x329e <__udivmodsi4>
    2ae2:	dc 01       	movw	r26, r24
    2ae4:	cb 01       	movw	r24, r22
    2ae6:	28 2f       	mov	r18, r24
    2ae8:	ce 01       	movw	r24, r28
    2aea:	03 96       	adiw	r24, 0x03	; 3
    2aec:	fc 01       	movw	r30, r24
    2aee:	e0 0f       	add	r30, r16
    2af0:	f1 1f       	adc	r31, r17
    2af2:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    2af4:	8a 89       	ldd	r24, Y+18	; 0x12
    2af6:	9b 89       	ldd	r25, Y+19	; 0x13
    2af8:	ac 89       	ldd	r26, Y+20	; 0x14
    2afa:	bd 89       	ldd	r27, Y+21	; 0x15
    2afc:	2a e0       	ldi	r18, 0x0A	; 10
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	50 e0       	ldi	r21, 0x00	; 0
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 4f 19 	call	0x329e	; 0x329e <__udivmodsi4>
    2b0c:	da 01       	movw	r26, r20
    2b0e:	c9 01       	movw	r24, r18
    2b10:	8a 8b       	std	Y+18, r24	; 0x12
    2b12:	9b 8b       	std	Y+19, r25	; 0x13
    2b14:	ac 8b       	std	Y+20, r26	; 0x14
    2b16:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    2b18:	8a 89       	ldd	r24, Y+18	; 0x12
    2b1a:	9b 89       	ldd	r25, Y+19	; 0x13
    2b1c:	ac 89       	ldd	r26, Y+20	; 0x14
    2b1e:	bd 89       	ldd	r27, Y+21	; 0x15
    2b20:	00 97       	sbiw	r24, 0x00	; 0
    2b22:	a1 05       	cpc	r26, r1
    2b24:	b1 05       	cpc	r27, r1
    2b26:	49 f6       	brne	.-110    	; 0x2aba <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2b28:	8a 81       	ldd	r24, Y+2	; 0x02
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    2b2c:	11 c0       	rjmp	.+34     	; 0x2b50 <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	28 2f       	mov	r18, r24
    2b32:	33 27       	eor	r19, r19
    2b34:	27 fd       	sbrc	r18, 7
    2b36:	30 95       	com	r19
    2b38:	ce 01       	movw	r24, r28
    2b3a:	03 96       	adiw	r24, 0x03	; 3
    2b3c:	fc 01       	movw	r30, r24
    2b3e:	e2 0f       	add	r30, r18
    2b40:	f3 1f       	adc	r31, r19
    2b42:	80 81       	ld	r24, Z
    2b44:	80 5d       	subi	r24, 0xD0	; 208
    2b46:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	81 50       	subi	r24, 0x01	; 1
    2b4e:	89 83       	std	Y+1, r24	; 0x01
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	88 23       	and	r24, r24
    2b54:	64 f7       	brge	.-40     	; 0x2b2e <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    2b56:	65 96       	adiw	r28, 0x15	; 21
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	1f 91       	pop	r17
    2b68:	0f 91       	pop	r16
    2b6a:	08 95       	ret

00002b6c <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	00 d0       	rcall	.+0      	; 0x2b72 <LCD_u8GoToXY+0x6>
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <LCD_u8GoToXY+0x8>
    2b74:	0f 92       	push	r0
    2b76:	cd b7       	in	r28, 0x3d	; 61
    2b78:	de b7       	in	r29, 0x3e	; 62
    2b7a:	8a 83       	std	Y+2, r24	; 0x02
    2b7c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    2b82:	8b 81       	ldd	r24, Y+3	; 0x03
    2b84:	88 32       	cpi	r24, 0x28	; 40
    2b86:	d8 f4       	brcc	.+54     	; 0x2bbe <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	3d 83       	std	Y+5, r19	; 0x05
    2b90:	2c 83       	std	Y+4, r18	; 0x04
    2b92:	8c 81       	ldd	r24, Y+4	; 0x04
    2b94:	9d 81       	ldd	r25, Y+5	; 0x05
    2b96:	81 30       	cpi	r24, 0x01	; 1
    2b98:	91 05       	cpc	r25, r1
    2b9a:	31 f0       	breq	.+12     	; 0x2ba8 <LCD_u8GoToXY+0x3c>
    2b9c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b9e:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba0:	22 30       	cpi	r18, 0x02	; 2
    2ba2:	31 05       	cpc	r19, r1
    2ba4:	31 f0       	breq	.+12     	; 0x2bb2 <LCD_u8GoToXY+0x46>
    2ba6:	0a c0       	rjmp	.+20     	; 0x2bbc <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    2baa:	80 58       	subi	r24, 0x80	; 128
    2bac:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
    2bb0:	06 c0       	rjmp	.+12     	; 0x2bbe <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    2bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb4:	80 54       	subi	r24, 0x40	; 64
    2bb6:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
    2bba:	01 c0       	rjmp	.+2      	; 0x2bbe <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2bbc:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2bbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	0f 90       	pop	r0
    2bc8:	0f 90       	pop	r0
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	08 95       	ret

00002bd0 <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    2bd0:	df 93       	push	r29
    2bd2:	cf 93       	push	r28
    2bd4:	cd b7       	in	r28, 0x3d	; 61
    2bd6:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
}
    2bde:	cf 91       	pop	r28
    2be0:	df 91       	pop	r29
    2be2:	08 95       	ret

00002be4 <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2be4:	df 93       	push	r29
    2be6:	cf 93       	push	r28
    2be8:	cd b7       	in	r28, 0x3d	; 61
    2bea:	de b7       	in	r29, 0x3e	; 62
    2bec:	2a 97       	sbiw	r28, 0x0a	; 10
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	8c 83       	std	Y+4, r24	; 0x04
    2bfa:	7e 83       	std	Y+6, r23	; 0x06
    2bfc:	6d 83       	std	Y+5, r22	; 0x05
    2bfe:	4f 83       	std	Y+7, r20	; 0x07
    2c00:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    2c06:	88 e0       	ldi	r24, 0x08	; 8
    2c08:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    2c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c0c:	28 2f       	mov	r18, r24
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	3a 87       	std	Y+10, r19	; 0x0a
    2c12:	29 87       	std	Y+9, r18	; 0x09
    2c14:	89 85       	ldd	r24, Y+9	; 0x09
    2c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c18:	83 30       	cpi	r24, 0x03	; 3
    2c1a:	91 05       	cpc	r25, r1
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <LCD_voidWriteSpecialChar+0x3c>
    2c1e:	8c c0       	rjmp	.+280    	; 0x2d38 <LCD_voidWriteSpecialChar+0x154>
    2c20:	29 85       	ldd	r18, Y+9	; 0x09
    2c22:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c24:	24 30       	cpi	r18, 0x04	; 4
    2c26:	31 05       	cpc	r19, r1
    2c28:	8c f4       	brge	.+34     	; 0x2c4c <LCD_voidWriteSpecialChar+0x68>
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2e:	81 30       	cpi	r24, 0x01	; 1
    2c30:	91 05       	cpc	r25, r1
    2c32:	09 f4       	brne	.+2      	; 0x2c36 <LCD_voidWriteSpecialChar+0x52>
    2c34:	43 c0       	rjmp	.+134    	; 0x2cbc <LCD_voidWriteSpecialChar+0xd8>
    2c36:	29 85       	ldd	r18, Y+9	; 0x09
    2c38:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c3a:	22 30       	cpi	r18, 0x02	; 2
    2c3c:	31 05       	cpc	r19, r1
    2c3e:	0c f0       	brlt	.+2      	; 0x2c42 <LCD_voidWriteSpecialChar+0x5e>
    2c40:	5c c0       	rjmp	.+184    	; 0x2cfa <LCD_voidWriteSpecialChar+0x116>
    2c42:	89 85       	ldd	r24, Y+9	; 0x09
    2c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c46:	00 97       	sbiw	r24, 0x00	; 0
    2c48:	d1 f0       	breq	.+52     	; 0x2c7e <LCD_voidWriteSpecialChar+0x9a>
    2c4a:	11 c1       	rjmp	.+546    	; 0x2e6e <LCD_voidWriteSpecialChar+0x28a>
    2c4c:	29 85       	ldd	r18, Y+9	; 0x09
    2c4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c50:	25 30       	cpi	r18, 0x05	; 5
    2c52:	31 05       	cpc	r19, r1
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <LCD_voidWriteSpecialChar+0x74>
    2c56:	ae c0       	rjmp	.+348    	; 0x2db4 <LCD_voidWriteSpecialChar+0x1d0>
    2c58:	89 85       	ldd	r24, Y+9	; 0x09
    2c5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c5c:	85 30       	cpi	r24, 0x05	; 5
    2c5e:	91 05       	cpc	r25, r1
    2c60:	0c f4       	brge	.+2      	; 0x2c64 <LCD_voidWriteSpecialChar+0x80>
    2c62:	89 c0       	rjmp	.+274    	; 0x2d76 <LCD_voidWriteSpecialChar+0x192>
    2c64:	29 85       	ldd	r18, Y+9	; 0x09
    2c66:	3a 85       	ldd	r19, Y+10	; 0x0a
    2c68:	26 30       	cpi	r18, 0x06	; 6
    2c6a:	31 05       	cpc	r19, r1
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <LCD_voidWriteSpecialChar+0x8c>
    2c6e:	c1 c0       	rjmp	.+386    	; 0x2df2 <LCD_voidWriteSpecialChar+0x20e>
    2c70:	89 85       	ldd	r24, Y+9	; 0x09
    2c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c74:	87 30       	cpi	r24, 0x07	; 7
    2c76:	91 05       	cpc	r25, r1
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <LCD_voidWriteSpecialChar+0x98>
    2c7a:	da c0       	rjmp	.+436    	; 0x2e30 <LCD_voidWriteSpecialChar+0x24c>
    2c7c:	f8 c0       	rjmp	.+496    	; 0x2e6e <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2c7e:	80 e4       	ldi	r24, 0x40	; 64
    2c80:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2c84:	19 82       	std	Y+1, r1	; 0x01
    2c86:	0e c0       	rjmp	.+28     	; 0x2ca4 <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	28 2f       	mov	r18, r24
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c90:	9e 81       	ldd	r25, Y+6	; 0x06
    2c92:	fc 01       	movw	r30, r24
    2c94:	e2 0f       	add	r30, r18
    2c96:	f3 1f       	adc	r31, r19
    2c98:	80 81       	ld	r24, Z
    2c9a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	8f 5f       	subi	r24, 0xFF	; 255
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	99 81       	ldd	r25, Y+1	; 0x01
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	98 17       	cp	r25, r24
    2caa:	70 f3       	brcs	.-36     	; 0x2c88 <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2cac:	8f 81       	ldd	r24, Y+7	; 0x07
    2cae:	68 85       	ldd	r22, Y+8	; 0x08
    2cb0:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cb6:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2cba:	da c0       	rjmp	.+436    	; 0x2e70 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2cbc:	88 e4       	ldi	r24, 0x48	; 72
    2cbe:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2cc2:	19 82       	std	Y+1, r1	; 0x01
    2cc4:	0e c0       	rjmp	.+28     	; 0x2ce2 <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2cc6:	89 81       	ldd	r24, Y+1	; 0x01
    2cc8:	28 2f       	mov	r18, r24
    2cca:	30 e0       	ldi	r19, 0x00	; 0
    2ccc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cce:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e2 0f       	add	r30, r18
    2cd4:	f3 1f       	adc	r31, r19
    2cd6:	80 81       	ld	r24, Z
    2cd8:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    2cdc:	89 81       	ldd	r24, Y+1	; 0x01
    2cde:	8f 5f       	subi	r24, 0xFF	; 255
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	99 81       	ldd	r25, Y+1	; 0x01
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	98 17       	cp	r25, r24
    2ce8:	70 f3       	brcs	.-36     	; 0x2cc6 <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2cea:	8f 81       	ldd	r24, Y+7	; 0x07
    2cec:	68 85       	ldd	r22, Y+8	; 0x08
    2cee:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf4:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2cf8:	bb c0       	rjmp	.+374    	; 0x2e70 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    2cfa:	80 e5       	ldi	r24, 0x50	; 80
    2cfc:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2d00:	19 82       	std	Y+1, r1	; 0x01
    2d02:	0e c0       	rjmp	.+28     	; 0x2d20 <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	28 2f       	mov	r18, r24
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0e:	fc 01       	movw	r30, r24
    2d10:	e2 0f       	add	r30, r18
    2d12:	f3 1f       	adc	r31, r19
    2d14:	80 81       	ld	r24, Z
    2d16:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	8f 5f       	subi	r24, 0xFF	; 255
    2d1e:	89 83       	std	Y+1, r24	; 0x01
    2d20:	99 81       	ldd	r25, Y+1	; 0x01
    2d22:	8a 81       	ldd	r24, Y+2	; 0x02
    2d24:	98 17       	cp	r25, r24
    2d26:	70 f3       	brcs	.-36     	; 0x2d04 <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2d28:	8f 81       	ldd	r24, Y+7	; 0x07
    2d2a:	68 85       	ldd	r22, Y+8	; 0x08
    2d2c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2d30:	8c 81       	ldd	r24, Y+4	; 0x04
    2d32:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2d36:	9c c0       	rjmp	.+312    	; 0x2e70 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    2d38:	88 e5       	ldi	r24, 0x58	; 88
    2d3a:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2d3e:	19 82       	std	Y+1, r1	; 0x01
    2d40:	0e c0       	rjmp	.+28     	; 0x2d5e <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2d42:	89 81       	ldd	r24, Y+1	; 0x01
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	e2 0f       	add	r30, r18
    2d50:	f3 1f       	adc	r31, r19
    2d52:	80 81       	ld	r24, Z
    2d54:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    2d58:	89 81       	ldd	r24, Y+1	; 0x01
    2d5a:	8f 5f       	subi	r24, 0xFF	; 255
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	99 81       	ldd	r25, Y+1	; 0x01
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	98 17       	cp	r25, r24
    2d64:	70 f3       	brcs	.-36     	; 0x2d42 <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2d66:	8f 81       	ldd	r24, Y+7	; 0x07
    2d68:	68 85       	ldd	r22, Y+8	; 0x08
    2d6a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2d6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d70:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2d74:	7d c0       	rjmp	.+250    	; 0x2e70 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    2d76:	80 e6       	ldi	r24, 0x60	; 96
    2d78:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2d7c:	19 82       	std	Y+1, r1	; 0x01
    2d7e:	0e c0       	rjmp	.+28     	; 0x2d9c <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	e2 0f       	add	r30, r18
    2d8e:	f3 1f       	adc	r31, r19
    2d90:	80 81       	ld	r24, Z
    2d92:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	8f 5f       	subi	r24, 0xFF	; 255
    2d9a:	89 83       	std	Y+1, r24	; 0x01
    2d9c:	99 81       	ldd	r25, Y+1	; 0x01
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	98 17       	cp	r25, r24
    2da2:	70 f3       	brcs	.-36     	; 0x2d80 <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2da4:	8f 81       	ldd	r24, Y+7	; 0x07
    2da6:	68 85       	ldd	r22, Y+8	; 0x08
    2da8:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2dac:	8c 81       	ldd	r24, Y+4	; 0x04
    2dae:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2db2:	5e c0       	rjmp	.+188    	; 0x2e70 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    2db4:	88 e6       	ldi	r24, 0x68	; 104
    2db6:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2dba:	19 82       	std	Y+1, r1	; 0x01
    2dbc:	0e c0       	rjmp	.+28     	; 0x2dda <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2dbe:	89 81       	ldd	r24, Y+1	; 0x01
    2dc0:	28 2f       	mov	r18, r24
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc8:	fc 01       	movw	r30, r24
    2dca:	e2 0f       	add	r30, r18
    2dcc:	f3 1f       	adc	r31, r19
    2dce:	80 81       	ld	r24, Z
    2dd0:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	8f 5f       	subi	r24, 0xFF	; 255
    2dd8:	89 83       	std	Y+1, r24	; 0x01
    2dda:	99 81       	ldd	r25, Y+1	; 0x01
    2ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dde:	98 17       	cp	r25, r24
    2de0:	70 f3       	brcs	.-36     	; 0x2dbe <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2de2:	8f 81       	ldd	r24, Y+7	; 0x07
    2de4:	68 85       	ldd	r22, Y+8	; 0x08
    2de6:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2dea:	8c 81       	ldd	r24, Y+4	; 0x04
    2dec:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2df0:	3f c0       	rjmp	.+126    	; 0x2e70 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    2df2:	80 e7       	ldi	r24, 0x70	; 112
    2df4:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2df8:	19 82       	std	Y+1, r1	; 0x01
    2dfa:	0e c0       	rjmp	.+28     	; 0x2e18 <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	28 2f       	mov	r18, r24
    2e00:	30 e0       	ldi	r19, 0x00	; 0
    2e02:	8d 81       	ldd	r24, Y+5	; 0x05
    2e04:	9e 81       	ldd	r25, Y+6	; 0x06
    2e06:	fc 01       	movw	r30, r24
    2e08:	e2 0f       	add	r30, r18
    2e0a:	f3 1f       	adc	r31, r19
    2e0c:	80 81       	ld	r24, Z
    2e0e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	8f 5f       	subi	r24, 0xFF	; 255
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	99 81       	ldd	r25, Y+1	; 0x01
    2e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1c:	98 17       	cp	r25, r24
    2e1e:	70 f3       	brcs	.-36     	; 0x2dfc <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2e20:	8f 81       	ldd	r24, Y+7	; 0x07
    2e22:	68 85       	ldd	r22, Y+8	; 0x08
    2e24:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2e28:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2a:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2e2e:	20 c0       	rjmp	.+64     	; 0x2e70 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    2e30:	88 e7       	ldi	r24, 0x78	; 120
    2e32:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2e36:	19 82       	std	Y+1, r1	; 0x01
    2e38:	0e c0       	rjmp	.+28     	; 0x2e56 <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	28 2f       	mov	r18, r24
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	8d 81       	ldd	r24, Y+5	; 0x05
    2e42:	9e 81       	ldd	r25, Y+6	; 0x06
    2e44:	fc 01       	movw	r30, r24
    2e46:	e2 0f       	add	r30, r18
    2e48:	f3 1f       	adc	r31, r19
    2e4a:	80 81       	ld	r24, Z
    2e4c:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	8f 5f       	subi	r24, 0xFF	; 255
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	99 81       	ldd	r25, Y+1	; 0x01
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	98 17       	cp	r25, r24
    2e5c:	70 f3       	brcs	.-36     	; 0x2e3a <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2e5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e60:	68 85       	ldd	r22, Y+8	; 0x08
    2e62:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2e66:	8c 81       	ldd	r24, Y+4	; 0x04
    2e68:	0e 94 54 11 	call	0x22a8	; 0x22a8 <LCD_voidSendChar>
    2e6c:	01 c0       	rjmp	.+2      	; 0x2e70 <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    2e6e:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    2e70:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2e72:	2a 96       	adiw	r28, 0x0a	; 10
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	de bf       	out	0x3e, r29	; 62
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	cd bf       	out	0x3d, r28	; 61
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	08 95       	ret

00002e84 <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    2e84:	df 93       	push	r29
    2e86:	cf 93       	push	r28
    2e88:	cd b7       	in	r28, 0x3d	; 61
    2e8a:	de b7       	in	r29, 0x3e	; 62
    2e8c:	e1 97       	sbiw	r28, 0x31	; 49
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	de bf       	out	0x3e, r29	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	cd bf       	out	0x3d, r28	; 61
    2e98:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2e9a:	80 e0       	ldi	r24, 0x00	; 0
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	40 e0       	ldi	r20, 0x00	; 0
    2ea0:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	61 e0       	ldi	r22, 0x01	; 1
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    2eae:	89 a9       	ldd	r24, Y+49	; 0x31
    2eb0:	98 2f       	mov	r25, r24
    2eb2:	92 95       	swap	r25
    2eb4:	90 7f       	andi	r25, 0xF0	; 240
    2eb6:	83 e0       	ldi	r24, 0x03	; 3
    2eb8:	69 2f       	mov	r22, r25
    2eba:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	62 e0       	ldi	r22, 0x02	; 2
    2ec2:	41 e0       	ldi	r20, 0x01	; 1
    2ec4:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    2ec8:	80 e0       	ldi	r24, 0x00	; 0
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	a0 e8       	ldi	r26, 0x80	; 128
    2ece:	bf e3       	ldi	r27, 0x3F	; 63
    2ed0:	8d a7       	std	Y+45, r24	; 0x2d
    2ed2:	9e a7       	std	Y+46, r25	; 0x2e
    2ed4:	af a7       	std	Y+47, r26	; 0x2f
    2ed6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ed8:	6d a5       	ldd	r22, Y+45	; 0x2d
    2eda:	7e a5       	ldd	r23, Y+46	; 0x2e
    2edc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ede:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee0:	2b ea       	ldi	r18, 0xAB	; 171
    2ee2:	3a ea       	ldi	r19, 0xAA	; 170
    2ee4:	4a e2       	ldi	r20, 0x2A	; 42
    2ee6:	50 e4       	ldi	r21, 0x40	; 64
    2ee8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2eec:	dc 01       	movw	r26, r24
    2eee:	cb 01       	movw	r24, r22
    2ef0:	89 a7       	std	Y+41, r24	; 0x29
    2ef2:	9a a7       	std	Y+42, r25	; 0x2a
    2ef4:	ab a7       	std	Y+43, r26	; 0x2b
    2ef6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2ef8:	69 a5       	ldd	r22, Y+41	; 0x29
    2efa:	7a a5       	ldd	r23, Y+42	; 0x2a
    2efc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2efe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	40 e8       	ldi	r20, 0x80	; 128
    2f06:	5f e3       	ldi	r21, 0x3F	; 63
    2f08:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f0c:	88 23       	and	r24, r24
    2f0e:	1c f4       	brge	.+6      	; 0x2f16 <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	88 a7       	std	Y+40, r24	; 0x28
    2f14:	91 c0       	rjmp	.+290    	; 0x3038 <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    2f16:	69 a5       	ldd	r22, Y+41	; 0x29
    2f18:	7a a5       	ldd	r23, Y+42	; 0x2a
    2f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	53 e4       	ldi	r21, 0x43	; 67
    2f26:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	0c f0       	brlt	.+2      	; 0x2f30 <LCD_voidSendHalfCmnd+0xac>
    2f2e:	7b c0       	rjmp	.+246    	; 0x3026 <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    2f30:	6d a5       	ldd	r22, Y+45	; 0x2d
    2f32:	7e a5       	ldd	r23, Y+46	; 0x2e
    2f34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f36:	98 a9       	ldd	r25, Y+48	; 0x30
    2f38:	20 e0       	ldi	r18, 0x00	; 0
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	4a e7       	ldi	r20, 0x7A	; 122
    2f3e:	54 e4       	ldi	r21, 0x44	; 68
    2f40:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	8c a3       	std	Y+36, r24	; 0x24
    2f4a:	9d a3       	std	Y+37, r25	; 0x25
    2f4c:	ae a3       	std	Y+38, r26	; 0x26
    2f4e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f50:	6c a1       	ldd	r22, Y+36	; 0x24
    2f52:	7d a1       	ldd	r23, Y+37	; 0x25
    2f54:	8e a1       	ldd	r24, Y+38	; 0x26
    2f56:	9f a1       	ldd	r25, Y+39	; 0x27
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	30 e0       	ldi	r19, 0x00	; 0
    2f5c:	4a ef       	ldi	r20, 0xFA	; 250
    2f5e:	54 e4       	ldi	r21, 0x44	; 68
    2f60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	88 a3       	std	Y+32, r24	; 0x20
    2f6a:	99 a3       	std	Y+33, r25	; 0x21
    2f6c:	aa a3       	std	Y+34, r26	; 0x22
    2f6e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2f70:	68 a1       	ldd	r22, Y+32	; 0x20
    2f72:	79 a1       	ldd	r23, Y+33	; 0x21
    2f74:	8a a1       	ldd	r24, Y+34	; 0x22
    2f76:	9b a1       	ldd	r25, Y+35	; 0x23
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	40 e8       	ldi	r20, 0x80	; 128
    2f7e:	5f e3       	ldi	r21, 0x3F	; 63
    2f80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2f84:	88 23       	and	r24, r24
    2f86:	2c f4       	brge	.+10     	; 0x2f92 <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	90 e0       	ldi	r25, 0x00	; 0
    2f8c:	9f 8f       	std	Y+31, r25	; 0x1f
    2f8e:	8e 8f       	std	Y+30, r24	; 0x1e
    2f90:	3f c0       	rjmp	.+126    	; 0x3010 <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    2f92:	68 a1       	ldd	r22, Y+32	; 0x20
    2f94:	79 a1       	ldd	r23, Y+33	; 0x21
    2f96:	8a a1       	ldd	r24, Y+34	; 0x22
    2f98:	9b a1       	ldd	r25, Y+35	; 0x23
    2f9a:	20 e0       	ldi	r18, 0x00	; 0
    2f9c:	3f ef       	ldi	r19, 0xFF	; 255
    2f9e:	4f e7       	ldi	r20, 0x7F	; 127
    2fa0:	57 e4       	ldi	r21, 0x47	; 71
    2fa2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2fa6:	18 16       	cp	r1, r24
    2fa8:	4c f5       	brge	.+82     	; 0x2ffc <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2faa:	6c a1       	ldd	r22, Y+36	; 0x24
    2fac:	7d a1       	ldd	r23, Y+37	; 0x25
    2fae:	8e a1       	ldd	r24, Y+38	; 0x26
    2fb0:	9f a1       	ldd	r25, Y+39	; 0x27
    2fb2:	20 e0       	ldi	r18, 0x00	; 0
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	40 e2       	ldi	r20, 0x20	; 32
    2fb8:	51 e4       	ldi	r21, 0x41	; 65
    2fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2fbe:	dc 01       	movw	r26, r24
    2fc0:	cb 01       	movw	r24, r22
    2fc2:	bc 01       	movw	r22, r24
    2fc4:	cd 01       	movw	r24, r26
    2fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	9f 8f       	std	Y+31, r25	; 0x1f
    2fd0:	8e 8f       	std	Y+30, r24	; 0x1e
    2fd2:	0f c0       	rjmp	.+30     	; 0x2ff2 <LCD_voidSendHalfCmnd+0x16e>
    2fd4:	88 ec       	ldi	r24, 0xC8	; 200
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	9d 8f       	std	Y+29, r25	; 0x1d
    2fda:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2fdc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2fde:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2fe0:	01 97       	sbiw	r24, 0x01	; 1
    2fe2:	f1 f7       	brne	.-4      	; 0x2fe0 <LCD_voidSendHalfCmnd+0x15c>
    2fe4:	9d 8f       	std	Y+29, r25	; 0x1d
    2fe6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fe8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	9f 8f       	std	Y+31, r25	; 0x1f
    2ff0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ff2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ff4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ff6:	00 97       	sbiw	r24, 0x00	; 0
    2ff8:	69 f7       	brne	.-38     	; 0x2fd4 <LCD_voidSendHalfCmnd+0x150>
    2ffa:	24 c0       	rjmp	.+72     	; 0x3044 <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffc:	68 a1       	ldd	r22, Y+32	; 0x20
    2ffe:	79 a1       	ldd	r23, Y+33	; 0x21
    3000:	8a a1       	ldd	r24, Y+34	; 0x22
    3002:	9b a1       	ldd	r25, Y+35	; 0x23
    3004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	9f 8f       	std	Y+31, r25	; 0x1f
    300e:	8e 8f       	std	Y+30, r24	; 0x1e
    3010:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3012:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3014:	9b 8f       	std	Y+27, r25	; 0x1b
    3016:	8a 8f       	std	Y+26, r24	; 0x1a
    3018:	8a 8d       	ldd	r24, Y+26	; 0x1a
    301a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    301c:	01 97       	sbiw	r24, 0x01	; 1
    301e:	f1 f7       	brne	.-4      	; 0x301c <LCD_voidSendHalfCmnd+0x198>
    3020:	9b 8f       	std	Y+27, r25	; 0x1b
    3022:	8a 8f       	std	Y+26, r24	; 0x1a
    3024:	0f c0       	rjmp	.+30     	; 0x3044 <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3026:	69 a5       	ldd	r22, Y+41	; 0x29
    3028:	7a a5       	ldd	r23, Y+42	; 0x2a
    302a:	8b a5       	ldd	r24, Y+43	; 0x2b
    302c:	9c a5       	ldd	r25, Y+44	; 0x2c
    302e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3032:	dc 01       	movw	r26, r24
    3034:	cb 01       	movw	r24, r22
    3036:	88 a7       	std	Y+40, r24	; 0x28
    3038:	88 a5       	ldd	r24, Y+40	; 0x28
    303a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    303c:	89 8d       	ldd	r24, Y+25	; 0x19
    303e:	8a 95       	dec	r24
    3040:	f1 f7       	brne	.-4      	; 0x303e <LCD_voidSendHalfCmnd+0x1ba>
    3042:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	62 e0       	ldi	r22, 0x02	; 2
    3048:	40 e0       	ldi	r20, 0x00	; 0
    304a:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    304e:	80 e0       	ldi	r24, 0x00	; 0
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	a0 e8       	ldi	r26, 0x80	; 128
    3054:	bf e3       	ldi	r27, 0x3F	; 63
    3056:	8d 8b       	std	Y+21, r24	; 0x15
    3058:	9e 8b       	std	Y+22, r25	; 0x16
    305a:	af 8b       	std	Y+23, r26	; 0x17
    305c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    305e:	6d 89       	ldd	r22, Y+21	; 0x15
    3060:	7e 89       	ldd	r23, Y+22	; 0x16
    3062:	8f 89       	ldd	r24, Y+23	; 0x17
    3064:	98 8d       	ldd	r25, Y+24	; 0x18
    3066:	2b ea       	ldi	r18, 0xAB	; 171
    3068:	3a ea       	ldi	r19, 0xAA	; 170
    306a:	4a e2       	ldi	r20, 0x2A	; 42
    306c:	50 e4       	ldi	r21, 0x40	; 64
    306e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	89 8b       	std	Y+17, r24	; 0x11
    3078:	9a 8b       	std	Y+18, r25	; 0x12
    307a:	ab 8b       	std	Y+19, r26	; 0x13
    307c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    307e:	69 89       	ldd	r22, Y+17	; 0x11
    3080:	7a 89       	ldd	r23, Y+18	; 0x12
    3082:	8b 89       	ldd	r24, Y+19	; 0x13
    3084:	9c 89       	ldd	r25, Y+20	; 0x14
    3086:	20 e0       	ldi	r18, 0x00	; 0
    3088:	30 e0       	ldi	r19, 0x00	; 0
    308a:	40 e8       	ldi	r20, 0x80	; 128
    308c:	5f e3       	ldi	r21, 0x3F	; 63
    308e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    3092:	88 23       	and	r24, r24
    3094:	1c f4       	brge	.+6      	; 0x309c <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    3096:	81 e0       	ldi	r24, 0x01	; 1
    3098:	88 8b       	std	Y+16, r24	; 0x10
    309a:	91 c0       	rjmp	.+290    	; 0x31be <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    309c:	69 89       	ldd	r22, Y+17	; 0x11
    309e:	7a 89       	ldd	r23, Y+18	; 0x12
    30a0:	8b 89       	ldd	r24, Y+19	; 0x13
    30a2:	9c 89       	ldd	r25, Y+20	; 0x14
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	4f e7       	ldi	r20, 0x7F	; 127
    30aa:	53 e4       	ldi	r21, 0x43	; 67
    30ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    30b0:	18 16       	cp	r1, r24
    30b2:	0c f0       	brlt	.+2      	; 0x30b6 <LCD_voidSendHalfCmnd+0x232>
    30b4:	7b c0       	rjmp	.+246    	; 0x31ac <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    30b6:	6d 89       	ldd	r22, Y+21	; 0x15
    30b8:	7e 89       	ldd	r23, Y+22	; 0x16
    30ba:	8f 89       	ldd	r24, Y+23	; 0x17
    30bc:	98 8d       	ldd	r25, Y+24	; 0x18
    30be:	20 e0       	ldi	r18, 0x00	; 0
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	4a e7       	ldi	r20, 0x7A	; 122
    30c4:	54 e4       	ldi	r21, 0x44	; 68
    30c6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    30ca:	dc 01       	movw	r26, r24
    30cc:	cb 01       	movw	r24, r22
    30ce:	8c 87       	std	Y+12, r24	; 0x0c
    30d0:	9d 87       	std	Y+13, r25	; 0x0d
    30d2:	ae 87       	std	Y+14, r26	; 0x0e
    30d4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    30d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    30da:	8e 85       	ldd	r24, Y+14	; 0x0e
    30dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4a ef       	ldi	r20, 0xFA	; 250
    30e4:	54 e4       	ldi	r21, 0x44	; 68
    30e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    30ea:	dc 01       	movw	r26, r24
    30ec:	cb 01       	movw	r24, r22
    30ee:	88 87       	std	Y+8, r24	; 0x08
    30f0:	99 87       	std	Y+9, r25	; 0x09
    30f2:	aa 87       	std	Y+10, r26	; 0x0a
    30f4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    30f6:	68 85       	ldd	r22, Y+8	; 0x08
    30f8:	79 85       	ldd	r23, Y+9	; 0x09
    30fa:	8a 85       	ldd	r24, Y+10	; 0x0a
    30fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	40 e8       	ldi	r20, 0x80	; 128
    3104:	5f e3       	ldi	r21, 0x3F	; 63
    3106:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    310a:	88 23       	and	r24, r24
    310c:	2c f4       	brge	.+10     	; 0x3118 <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	9f 83       	std	Y+7, r25	; 0x07
    3114:	8e 83       	std	Y+6, r24	; 0x06
    3116:	3f c0       	rjmp	.+126    	; 0x3196 <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    3118:	68 85       	ldd	r22, Y+8	; 0x08
    311a:	79 85       	ldd	r23, Y+9	; 0x09
    311c:	8a 85       	ldd	r24, Y+10	; 0x0a
    311e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	3f ef       	ldi	r19, 0xFF	; 255
    3124:	4f e7       	ldi	r20, 0x7F	; 127
    3126:	57 e4       	ldi	r21, 0x47	; 71
    3128:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    312c:	18 16       	cp	r1, r24
    312e:	4c f5       	brge	.+82     	; 0x3182 <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3130:	6c 85       	ldd	r22, Y+12	; 0x0c
    3132:	7d 85       	ldd	r23, Y+13	; 0x0d
    3134:	8e 85       	ldd	r24, Y+14	; 0x0e
    3136:	9f 85       	ldd	r25, Y+15	; 0x0f
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e2       	ldi	r20, 0x20	; 32
    313e:	51 e4       	ldi	r21, 0x41	; 65
    3140:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    3144:	dc 01       	movw	r26, r24
    3146:	cb 01       	movw	r24, r22
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	9f 83       	std	Y+7, r25	; 0x07
    3156:	8e 83       	std	Y+6, r24	; 0x06
    3158:	0f c0       	rjmp	.+30     	; 0x3178 <LCD_voidSendHalfCmnd+0x2f4>
    315a:	88 ec       	ldi	r24, 0xC8	; 200
    315c:	90 e0       	ldi	r25, 0x00	; 0
    315e:	9d 83       	std	Y+5, r25	; 0x05
    3160:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3162:	8c 81       	ldd	r24, Y+4	; 0x04
    3164:	9d 81       	ldd	r25, Y+5	; 0x05
    3166:	01 97       	sbiw	r24, 0x01	; 1
    3168:	f1 f7       	brne	.-4      	; 0x3166 <LCD_voidSendHalfCmnd+0x2e2>
    316a:	9d 83       	std	Y+5, r25	; 0x05
    316c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316e:	8e 81       	ldd	r24, Y+6	; 0x06
    3170:	9f 81       	ldd	r25, Y+7	; 0x07
    3172:	01 97       	sbiw	r24, 0x01	; 1
    3174:	9f 83       	std	Y+7, r25	; 0x07
    3176:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3178:	8e 81       	ldd	r24, Y+6	; 0x06
    317a:	9f 81       	ldd	r25, Y+7	; 0x07
    317c:	00 97       	sbiw	r24, 0x00	; 0
    317e:	69 f7       	brne	.-38     	; 0x315a <LCD_voidSendHalfCmnd+0x2d6>
    3180:	24 c0       	rjmp	.+72     	; 0x31ca <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3182:	68 85       	ldd	r22, Y+8	; 0x08
    3184:	79 85       	ldd	r23, Y+9	; 0x09
    3186:	8a 85       	ldd	r24, Y+10	; 0x0a
    3188:	9b 85       	ldd	r25, Y+11	; 0x0b
    318a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    318e:	dc 01       	movw	r26, r24
    3190:	cb 01       	movw	r24, r22
    3192:	9f 83       	std	Y+7, r25	; 0x07
    3194:	8e 83       	std	Y+6, r24	; 0x06
    3196:	8e 81       	ldd	r24, Y+6	; 0x06
    3198:	9f 81       	ldd	r25, Y+7	; 0x07
    319a:	9b 83       	std	Y+3, r25	; 0x03
    319c:	8a 83       	std	Y+2, r24	; 0x02
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <LCD_voidSendHalfCmnd+0x31e>
    31a6:	9b 83       	std	Y+3, r25	; 0x03
    31a8:	8a 83       	std	Y+2, r24	; 0x02
    31aa:	0f c0       	rjmp	.+30     	; 0x31ca <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31ac:	69 89       	ldd	r22, Y+17	; 0x11
    31ae:	7a 89       	ldd	r23, Y+18	; 0x12
    31b0:	8b 89       	ldd	r24, Y+19	; 0x13
    31b2:	9c 89       	ldd	r25, Y+20	; 0x14
    31b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	88 8b       	std	Y+16, r24	; 0x10
    31be:	88 89       	ldd	r24, Y+16	; 0x10
    31c0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31c2:	89 81       	ldd	r24, Y+1	; 0x01
    31c4:	8a 95       	dec	r24
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <LCD_voidSendHalfCmnd+0x340>
    31c8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
}
    31ca:	e1 96       	adiw	r28, 0x31	; 49
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	08 95       	ret

000031dc <main>:

/* HAL Layer */
#include "LCD_interface.h"

int main(void)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
    31e4:	6a 97       	sbiw	r28, 0x1a	; 26
    31e6:	0f b6       	in	r0, 0x3f	; 63
    31e8:	f8 94       	cli
    31ea:	de bf       	out	0x3e, r29	; 62
    31ec:	0f be       	out	0x3f, r0	; 63
    31ee:	cd bf       	out	0x3d, r28	; 61
	/*Initialization*/
	DIO_voidInit();
    31f0:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	LCD_voidInit();
    31f4:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_voidInit>
			0b00001110,
			0b00001110,
			0b00001110,
			0b00001110,
			0b00001110
	};
    31f8:	ce 01       	movw	r24, r28
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	9a 8b       	std	Y+18, r25	; 0x12
    31fe:	89 8b       	std	Y+17, r24	; 0x11
    3200:	e0 e7       	ldi	r30, 0x70	; 112
    3202:	f0 e0       	ldi	r31, 0x00	; 0
    3204:	fc 8b       	std	Y+20, r31	; 0x14
    3206:	eb 8b       	std	Y+19, r30	; 0x13
    3208:	f8 e0       	ldi	r31, 0x08	; 8
    320a:	fd 8b       	std	Y+21, r31	; 0x15
    320c:	eb 89       	ldd	r30, Y+19	; 0x13
    320e:	fc 89       	ldd	r31, Y+20	; 0x14
    3210:	00 80       	ld	r0, Z
    3212:	8b 89       	ldd	r24, Y+19	; 0x13
    3214:	9c 89       	ldd	r25, Y+20	; 0x14
    3216:	01 96       	adiw	r24, 0x01	; 1
    3218:	9c 8b       	std	Y+20, r25	; 0x14
    321a:	8b 8b       	std	Y+19, r24	; 0x13
    321c:	e9 89       	ldd	r30, Y+17	; 0x11
    321e:	fa 89       	ldd	r31, Y+18	; 0x12
    3220:	00 82       	st	Z, r0
    3222:	89 89       	ldd	r24, Y+17	; 0x11
    3224:	9a 89       	ldd	r25, Y+18	; 0x12
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	9a 8b       	std	Y+18, r25	; 0x12
    322a:	89 8b       	std	Y+17, r24	; 0x11
    322c:	9d 89       	ldd	r25, Y+21	; 0x15
    322e:	91 50       	subi	r25, 0x01	; 1
    3230:	9d 8b       	std	Y+21, r25	; 0x15
    3232:	ed 89       	ldd	r30, Y+21	; 0x15
    3234:	ee 23       	and	r30, r30
    3236:	51 f7       	brne	.-44     	; 0x320c <main+0x30>
	LCD_voidWriteSpecialChar(LCD_u8_CHAR0,customChar0,LCD_u8_LINE2,6);
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	9e 01       	movw	r18, r28
    323c:	2f 5f       	subi	r18, 0xFF	; 255
    323e:	3f 4f       	sbci	r19, 0xFF	; 255
    3240:	b9 01       	movw	r22, r18
    3242:	42 e0       	ldi	r20, 0x02	; 2
    3244:	26 e0       	ldi	r18, 0x06	; 6
    3246:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <LCD_voidWriteSpecialChar>
			0b00001000,
			0b00000111,
			0b00000010,
			0b00011100,
			0b00000000
	};
    324a:	ce 01       	movw	r24, r28
    324c:	09 96       	adiw	r24, 0x09	; 9
    324e:	9f 8b       	std	Y+23, r25	; 0x17
    3250:	8e 8b       	std	Y+22, r24	; 0x16
    3252:	e8 e6       	ldi	r30, 0x68	; 104
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	f9 8f       	std	Y+25, r31	; 0x19
    3258:	e8 8f       	std	Y+24, r30	; 0x18
    325a:	f8 e0       	ldi	r31, 0x08	; 8
    325c:	fa 8f       	std	Y+26, r31	; 0x1a
    325e:	e8 8d       	ldd	r30, Y+24	; 0x18
    3260:	f9 8d       	ldd	r31, Y+25	; 0x19
    3262:	00 80       	ld	r0, Z
    3264:	88 8d       	ldd	r24, Y+24	; 0x18
    3266:	99 8d       	ldd	r25, Y+25	; 0x19
    3268:	01 96       	adiw	r24, 0x01	; 1
    326a:	99 8f       	std	Y+25, r25	; 0x19
    326c:	88 8f       	std	Y+24, r24	; 0x18
    326e:	ee 89       	ldd	r30, Y+22	; 0x16
    3270:	ff 89       	ldd	r31, Y+23	; 0x17
    3272:	00 82       	st	Z, r0
    3274:	8e 89       	ldd	r24, Y+22	; 0x16
    3276:	9f 89       	ldd	r25, Y+23	; 0x17
    3278:	01 96       	adiw	r24, 0x01	; 1
    327a:	9f 8b       	std	Y+23, r25	; 0x17
    327c:	8e 8b       	std	Y+22, r24	; 0x16
    327e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3280:	91 50       	subi	r25, 0x01	; 1
    3282:	9a 8f       	std	Y+26, r25	; 0x1a
    3284:	ea 8d       	ldd	r30, Y+26	; 0x1a
    3286:	ee 23       	and	r30, r30
    3288:	51 f7       	brne	.-44     	; 0x325e <main+0x82>
	LCD_voidWriteSpecialChar(LCD_u8_CHAR1,customChar1,LCD_u8_LINE1,6);
    328a:	9e 01       	movw	r18, r28
    328c:	27 5f       	subi	r18, 0xF7	; 247
    328e:	3f 4f       	sbci	r19, 0xFF	; 255
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	b9 01       	movw	r22, r18
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	26 e0       	ldi	r18, 0x06	; 6
    3298:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <LCD_voidWriteSpecialChar>
    329c:	ff cf       	rjmp	.-2      	; 0x329c <main+0xc0>

0000329e <__udivmodsi4>:
    329e:	a1 e2       	ldi	r26, 0x21	; 33
    32a0:	1a 2e       	mov	r1, r26
    32a2:	aa 1b       	sub	r26, r26
    32a4:	bb 1b       	sub	r27, r27
    32a6:	fd 01       	movw	r30, r26
    32a8:	0d c0       	rjmp	.+26     	; 0x32c4 <__udivmodsi4_ep>

000032aa <__udivmodsi4_loop>:
    32aa:	aa 1f       	adc	r26, r26
    32ac:	bb 1f       	adc	r27, r27
    32ae:	ee 1f       	adc	r30, r30
    32b0:	ff 1f       	adc	r31, r31
    32b2:	a2 17       	cp	r26, r18
    32b4:	b3 07       	cpc	r27, r19
    32b6:	e4 07       	cpc	r30, r20
    32b8:	f5 07       	cpc	r31, r21
    32ba:	20 f0       	brcs	.+8      	; 0x32c4 <__udivmodsi4_ep>
    32bc:	a2 1b       	sub	r26, r18
    32be:	b3 0b       	sbc	r27, r19
    32c0:	e4 0b       	sbc	r30, r20
    32c2:	f5 0b       	sbc	r31, r21

000032c4 <__udivmodsi4_ep>:
    32c4:	66 1f       	adc	r22, r22
    32c6:	77 1f       	adc	r23, r23
    32c8:	88 1f       	adc	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	1a 94       	dec	r1
    32ce:	69 f7       	brne	.-38     	; 0x32aa <__udivmodsi4_loop>
    32d0:	60 95       	com	r22
    32d2:	70 95       	com	r23
    32d4:	80 95       	com	r24
    32d6:	90 95       	com	r25
    32d8:	9b 01       	movw	r18, r22
    32da:	ac 01       	movw	r20, r24
    32dc:	bd 01       	movw	r22, r26
    32de:	cf 01       	movw	r24, r30
    32e0:	08 95       	ret

000032e2 <__prologue_saves__>:
    32e2:	2f 92       	push	r2
    32e4:	3f 92       	push	r3
    32e6:	4f 92       	push	r4
    32e8:	5f 92       	push	r5
    32ea:	6f 92       	push	r6
    32ec:	7f 92       	push	r7
    32ee:	8f 92       	push	r8
    32f0:	9f 92       	push	r9
    32f2:	af 92       	push	r10
    32f4:	bf 92       	push	r11
    32f6:	cf 92       	push	r12
    32f8:	df 92       	push	r13
    32fa:	ef 92       	push	r14
    32fc:	ff 92       	push	r15
    32fe:	0f 93       	push	r16
    3300:	1f 93       	push	r17
    3302:	cf 93       	push	r28
    3304:	df 93       	push	r29
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	ca 1b       	sub	r28, r26
    330c:	db 0b       	sbc	r29, r27
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	de bf       	out	0x3e, r29	; 62
    3314:	0f be       	out	0x3f, r0	; 63
    3316:	cd bf       	out	0x3d, r28	; 61
    3318:	09 94       	ijmp

0000331a <__epilogue_restores__>:
    331a:	2a 88       	ldd	r2, Y+18	; 0x12
    331c:	39 88       	ldd	r3, Y+17	; 0x11
    331e:	48 88       	ldd	r4, Y+16	; 0x10
    3320:	5f 84       	ldd	r5, Y+15	; 0x0f
    3322:	6e 84       	ldd	r6, Y+14	; 0x0e
    3324:	7d 84       	ldd	r7, Y+13	; 0x0d
    3326:	8c 84       	ldd	r8, Y+12	; 0x0c
    3328:	9b 84       	ldd	r9, Y+11	; 0x0b
    332a:	aa 84       	ldd	r10, Y+10	; 0x0a
    332c:	b9 84       	ldd	r11, Y+9	; 0x09
    332e:	c8 84       	ldd	r12, Y+8	; 0x08
    3330:	df 80       	ldd	r13, Y+7	; 0x07
    3332:	ee 80       	ldd	r14, Y+6	; 0x06
    3334:	fd 80       	ldd	r15, Y+5	; 0x05
    3336:	0c 81       	ldd	r16, Y+4	; 0x04
    3338:	1b 81       	ldd	r17, Y+3	; 0x03
    333a:	aa 81       	ldd	r26, Y+2	; 0x02
    333c:	b9 81       	ldd	r27, Y+1	; 0x01
    333e:	ce 0f       	add	r28, r30
    3340:	d1 1d       	adc	r29, r1
    3342:	0f b6       	in	r0, 0x3f	; 63
    3344:	f8 94       	cli
    3346:	de bf       	out	0x3e, r29	; 62
    3348:	0f be       	out	0x3f, r0	; 63
    334a:	cd bf       	out	0x3d, r28	; 61
    334c:	ed 01       	movw	r28, r26
    334e:	08 95       	ret

00003350 <_exit>:
    3350:	f8 94       	cli

00003352 <__stop_program>:
    3352:	ff cf       	rjmp	.-2      	; 0x3352 <__stop_program>
