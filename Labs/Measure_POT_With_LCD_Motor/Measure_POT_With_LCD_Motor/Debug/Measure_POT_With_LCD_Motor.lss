
Measure_POT_With_LCD_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004792  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00004792  00004826  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800070  00800070  00004836  2**0
                  ALLOC
  3 .stab         0000333c  00000000  00000000  00004838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e72  00000000  00000000  00007b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000089e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00008b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000ad1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000be1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000cda0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000cf20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000d1e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000da70  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e7       	ldi	r26, 0x70	; 112
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 37       	cpi	r26, 0x73	; 115
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 34 16 	call	0x2c68	; 0x2c68 <main>
      8a:	0c 94 c7 23 	jmp	0x478e	; 0x478e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 90 23 	jmp	0x4720	; 0x4720 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 90 23 	jmp	0x4720	; 0x4720 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ac 23 	jmp	0x4758	; 0x4758 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 98 23 	jmp	0x4730	; 0x4730 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 b4 23 	jmp	0x4768	; 0x4768 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 9c 23 	jmp	0x4738	; 0x4738 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b8 23 	jmp	0x4770	; 0x4770 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a0 23 	jmp	0x4740	; 0x4740 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 bc 23 	jmp	0x4778	; 0x4778 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:

/* ADC busy Flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	   4- Select CLK/64
	   5- Enable ADC
	    */
	//1- Select Vref = AVCC
#if ADC_u8_VREF_OPTION == ADC_u8_VREF_AVCC
	CLR_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8f 77       	andi	r24, 0x7F	; 127
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
#endif

	//2- Right Adjust
#if ADC_u8_ADJUST_OPTION == ADC_u8_RIGHT_ADJUST
	CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,5);
#endif

	//3- Disable AutoTrigger
#if ADC_u8_AUTO_TRIGGER_MODE == ADC_u8_AUTO_TRIGGER_DISABLE
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
	#endif
#endif

	//4- Select CLK/64
#if ADC_u8_PRESCALER == ADC_u8_PRESCALER_64
	SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
	SET_BIT(ADC_u8_ADCSRA_REG,0);
#endif

	//5- Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 *Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32)  && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     d48:	65 c0       	rjmp	.+202    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     d52:	60 c0       	rjmp	.+192    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     d54:	80 91 72 00 	lds	r24, 0x0072
     d58:	88 23       	and	r24, r24
     d5a:	09 f0       	breq	.+2      	; 0xd5e <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
     d5c:	5b c0       	rjmp	.+182    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 72 00 	sts	0x0072, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d64:	a7 e2       	ldi	r26, 0x27	; 39
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e2       	ldi	r30, 0x27	; 39
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 7e       	andi	r24, 0xE0	; 224
     d70:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     d72:	a7 e2       	ldi	r26, 0x27	; 39
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e2       	ldi	r30, 0x27	; 39
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	90 81       	ld	r25, Z
     d7c:	8e 81       	ldd	r24, Y+6	; 0x06
     d7e:	89 2b       	or	r24, r25
     d80:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d82:	a6 e2       	ldi	r26, 0x26	; 38
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e6 e2       	ldi	r30, 0x26	; 38
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 64       	ori	r24, 0x40	; 64
     d8e:	8c 93       	st	X, r24
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <ADC_u8GetDigitalValueSynchNonBlocking+0x8c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	ab 81       	ldd	r26, Y+3	; 0x03
     d98:	bc 81       	ldd	r27, Y+4	; 0x04
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	a1 1d       	adc	r26, r1
     d9e:	b1 1d       	adc	r27, r1
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	ab 83       	std	Y+3, r26	; 0x03
     da6:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     da8:	e6 e2       	ldi	r30, 0x26	; 38
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	82 95       	swap	r24
     db0:	8f 70       	andi	r24, 0x0F	; 15
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	90 70       	andi	r25, 0x00	; 0
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	61 f4       	brne	.+24     	; 0xdd6 <ADC_u8GetDigitalValueSynchNonBlocking+0xba>
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	ab 81       	ldd	r26, Y+3	; 0x03
     dc4:	bc 81       	ldd	r27, Y+4	; 0x04
     dc6:	80 35       	cpi	r24, 0x50	; 80
     dc8:	23 ec       	ldi	r18, 0xC3	; 195
     dca:	92 07       	cpc	r25, r18
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	a2 07       	cpc	r26, r18
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	b2 07       	cpc	r27, r18
     dd4:	f0 f2       	brcs	.-68     	; 0xd92 <ADC_u8GetDigitalValueSynchNonBlocking+0x76>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 95       	swap	r24
     dde:	8f 70       	andi	r24, 0x0F	; 15
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	91 f0       	breq	.+36     	; 0xe10 <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
		{
			/* Clear Flag */
			ADC_u8BusyFlag = 0;
     dec:	10 92 72 00 	sts	0x0072, r1
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     df0:	a6 e2       	ldi	r26, 0x26	; 38
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e6 e2       	ldi	r30, 0x26	; 38
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 61       	ori	r24, 0x10	; 16
     dfc:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     dfe:	e4 e2       	ldi	r30, 0x24	; 36
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	ef 81       	ldd	r30, Y+7	; 0x07
     e08:	f8 85       	ldd	r31, Y+8	; 0x08
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     e10:	1d 82       	std	Y+5, r1	; 0x05
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e14:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e18:	28 96       	adiw	r28, 0x08	; 8
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <ADC_u8GetDigitalValueAsynch>:


u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb, void (*Copy_pfNotification) (u16))
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <ADC_u8GetDigitalValueAsynch+0x6>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <ADC_u8GetDigitalValueAsynch+0x8>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	7c 83       	std	Y+4, r23	; 0x04
     e3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32)  && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	80 32       	cpi	r24, 0x20	; 32
     e44:	78 f5       	brcc	.+94     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	59 f1       	breq	.+86     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
     e4e:	80 91 72 00 	lds	r24, 0x0072
     e52:	88 23       	and	r24, r24
     e54:	39 f5       	brne	.+78     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 72 00 	sts	0x0072, r24
		/* Update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	90 93 71 00 	sts	0x0071, r25
     e64:	80 93 70 00 	sts	0x0070, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e68:	a6 e2       	ldi	r26, 0x26	; 38
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e6 e2       	ldi	r30, 0x26	; 38
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	88 60       	ori	r24, 0x08	; 8
     e74:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e76:	a7 e2       	ldi	r26, 0x27	; 39
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e2       	ldi	r30, 0x27	; 39
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 7e       	andi	r24, 0xE0	; 224
     e82:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     e84:	a7 e2       	ldi	r26, 0x27	; 39
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e2       	ldi	r30, 0x27	; 39
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	90 81       	ld	r25, Z
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	89 2b       	or	r24, r25
     e92:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e94:	a6 e2       	ldi	r26, 0x26	; 38
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	8c 93       	st	X, r24
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ea4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <ADC_u8GetADCRegValue>:
u8 ADC_u8GetADCRegValue (u16 * Copy_pu16ADCValue)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <ADC_u8GetADCRegValue+0x6>
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	9b 83       	std	Y+3, r25	; 0x03
     ec4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	9b 81       	ldd	r25, Y+3	; 0x03
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	49 f0       	breq	.+18     	; 0xee4 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
     ed2:	e4 e2       	ldi	r30, 0x24	; 36
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	ea 81       	ldd	r30, Y+2	; 0x02
     edc:	fb 81       	ldd	r31, Y+3	; 0x03
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	2f 93       	push	r18
     f00:	3f 93       	push	r19
     f02:	4f 93       	push	r20
     f04:	5f 93       	push	r21
     f06:	6f 93       	push	r22
     f08:	7f 93       	push	r23
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	af 93       	push	r26
     f10:	bf 93       	push	r27
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     f1e:	80 91 70 00 	lds	r24, 0x0070
     f22:	90 91 71 00 	lds	r25, 0x0071
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	99 f0       	breq	.+38     	; 0xf50 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
     f2a:	10 92 72 00 	sts	0x0072, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     f2e:	a6 e2       	ldi	r26, 0x26	; 38
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 e2       	ldi	r30, 0x26	; 38
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     f3c:	20 91 70 00 	lds	r18, 0x0070
     f40:	30 91 71 00 	lds	r19, 0x0071
     f44:	e4 e2       	ldi	r30, 0x24	; 36
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	f9 01       	movw	r30, r18
     f4e:	09 95       	icall
	}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     f7e:	ea e3       	ldi	r30, 0x3A	; 58
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	83 e0       	ldi	r24, 0x03	; 3
     f8a:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	87 e0       	ldi	r24, 0x07	; 7
     f92:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     f94:	e1 e3       	ldi	r30, 0x31	; 49
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     f9c:	eb e3       	ldi	r30, 0x3B	; 59
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     fa8:	e5 e3       	ldi	r30, 0x35	; 53
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     fae:	e2 e3       	ldi	r30, 0x32	; 50
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	10 82       	st	Z, r1

}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
     fc2:	2e 97       	sbiw	r28, 0x0e	; 14
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	de bf       	out	0x3e, r29	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	cd bf       	out	0x3d, r28	; 61
     fce:	8a 83       	std	Y+2, r24	; 0x02
     fd0:	6b 83       	std	Y+3, r22	; 0x03
     fd2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	84 30       	cpi	r24, 0x04	; 4
     fdc:	08 f0       	brcs	.+2      	; 0xfe0 <DIO_u8SetPinDirection+0x26>
     fde:	0d c1       	rjmp	.+538    	; 0x11fa <DIO_u8SetPinDirection+0x240>
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	88 30       	cpi	r24, 0x08	; 8
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <DIO_u8SetPinDirection+0x2e>
     fe6:	09 c1       	rjmp	.+530    	; 0x11fa <DIO_u8SetPinDirection+0x240>
     fe8:	8c 81       	ldd	r24, Y+4	; 0x04
     fea:	88 23       	and	r24, r24
     fec:	21 f0       	breq	.+8      	; 0xff6 <DIO_u8SetPinDirection+0x3c>
     fee:	8c 81       	ldd	r24, Y+4	; 0x04
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <DIO_u8SetPinDirection+0x3c>
     ff4:	02 c1       	rjmp	.+516    	; 0x11fa <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     ff6:	8a 81       	ldd	r24, Y+2	; 0x02
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	3e 87       	std	Y+14, r19	; 0x0e
     ffe:	2d 87       	std	Y+13, r18	; 0x0d
    1000:	8d 85       	ldd	r24, Y+13	; 0x0d
    1002:	9e 85       	ldd	r25, Y+14	; 0x0e
    1004:	81 30       	cpi	r24, 0x01	; 1
    1006:	91 05       	cpc	r25, r1
    1008:	09 f4       	brne	.+2      	; 0x100c <DIO_u8SetPinDirection+0x52>
    100a:	4f c0       	rjmp	.+158    	; 0x10aa <DIO_u8SetPinDirection+0xf0>
    100c:	2d 85       	ldd	r18, Y+13	; 0x0d
    100e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	2c f4       	brge	.+10     	; 0x1020 <DIO_u8SetPinDirection+0x66>
    1016:	8d 85       	ldd	r24, Y+13	; 0x0d
    1018:	9e 85       	ldd	r25, Y+14	; 0x0e
    101a:	00 97       	sbiw	r24, 0x00	; 0
    101c:	71 f0       	breq	.+28     	; 0x103a <DIO_u8SetPinDirection+0x80>
    101e:	ee c0       	rjmp	.+476    	; 0x11fc <DIO_u8SetPinDirection+0x242>
    1020:	2d 85       	ldd	r18, Y+13	; 0x0d
    1022:	3e 85       	ldd	r19, Y+14	; 0x0e
    1024:	22 30       	cpi	r18, 0x02	; 2
    1026:	31 05       	cpc	r19, r1
    1028:	09 f4       	brne	.+2      	; 0x102c <DIO_u8SetPinDirection+0x72>
    102a:	77 c0       	rjmp	.+238    	; 0x111a <DIO_u8SetPinDirection+0x160>
    102c:	8d 85       	ldd	r24, Y+13	; 0x0d
    102e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1030:	83 30       	cpi	r24, 0x03	; 3
    1032:	91 05       	cpc	r25, r1
    1034:	09 f4       	brne	.+2      	; 0x1038 <DIO_u8SetPinDirection+0x7e>
    1036:	a9 c0       	rjmp	.+338    	; 0x118a <DIO_u8SetPinDirection+0x1d0>
    1038:	e1 c0       	rjmp	.+450    	; 0x11fc <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	3c 87       	std	Y+12, r19	; 0x0c
    1042:	2b 87       	std	Y+11, r18	; 0x0b
    1044:	8b 85       	ldd	r24, Y+11	; 0x0b
    1046:	9c 85       	ldd	r25, Y+12	; 0x0c
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	31 f0       	breq	.+12     	; 0x1058 <DIO_u8SetPinDirection+0x9e>
    104c:	2b 85       	ldd	r18, Y+11	; 0x0b
    104e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1050:	21 30       	cpi	r18, 0x01	; 1
    1052:	31 05       	cpc	r19, r1
    1054:	b1 f0       	breq	.+44     	; 0x1082 <DIO_u8SetPinDirection+0xc8>
    1056:	d2 c0       	rjmp	.+420    	; 0x11fc <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    1058:	aa e3       	ldi	r26, 0x3A	; 58
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ea e3       	ldi	r30, 0x3A	; 58
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_u8SetPinDirection+0xbc>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_u8SetPinDirection+0xb8>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	bd c0       	rjmp	.+378    	; 0x11fc <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    1082:	aa e3       	ldi	r26, 0x3A	; 58
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ea e3       	ldi	r30, 0x3A	; 58
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <DIO_u8SetPinDirection+0xe6>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <DIO_u8SetPinDirection+0xe2>
    10a4:	84 2b       	or	r24, r20
    10a6:	8c 93       	st	X, r24
    10a8:	a9 c0       	rjmp	.+338    	; 0x11fc <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	3a 87       	std	Y+10, r19	; 0x0a
    10b2:	29 87       	std	Y+9, r18	; 0x09
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	31 f0       	breq	.+12     	; 0x10c8 <DIO_u8SetPinDirection+0x10e>
    10bc:	29 85       	ldd	r18, Y+9	; 0x09
    10be:	3a 85       	ldd	r19, Y+10	; 0x0a
    10c0:	21 30       	cpi	r18, 0x01	; 1
    10c2:	31 05       	cpc	r19, r1
    10c4:	b1 f0       	breq	.+44     	; 0x10f2 <DIO_u8SetPinDirection+0x138>
    10c6:	9a c0       	rjmp	.+308    	; 0x11fc <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10c8:	a7 e3       	ldi	r26, 0x37	; 55
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e7 e3       	ldi	r30, 0x37	; 55
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	48 2f       	mov	r20, r24
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	02 2e       	mov	r0, r18
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <DIO_u8SetPinDirection+0x12c>
    10e2:	88 0f       	add	r24, r24
    10e4:	99 1f       	adc	r25, r25
    10e6:	0a 94       	dec	r0
    10e8:	e2 f7       	brpl	.-8      	; 0x10e2 <DIO_u8SetPinDirection+0x128>
    10ea:	80 95       	com	r24
    10ec:	84 23       	and	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	85 c0       	rjmp	.+266    	; 0x11fc <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10f2:	a7 e3       	ldi	r26, 0x37	; 55
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e7 e3       	ldi	r30, 0x37	; 55
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	02 2e       	mov	r0, r18
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <DIO_u8SetPinDirection+0x156>
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	0a 94       	dec	r0
    1112:	e2 f7       	brpl	.-8      	; 0x110c <DIO_u8SetPinDirection+0x152>
    1114:	84 2b       	or	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	71 c0       	rjmp	.+226    	; 0x11fc <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	28 2f       	mov	r18, r24
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	38 87       	std	Y+8, r19	; 0x08
    1122:	2f 83       	std	Y+7, r18	; 0x07
    1124:	8f 81       	ldd	r24, Y+7	; 0x07
    1126:	98 85       	ldd	r25, Y+8	; 0x08
    1128:	00 97       	sbiw	r24, 0x00	; 0
    112a:	31 f0       	breq	.+12     	; 0x1138 <DIO_u8SetPinDirection+0x17e>
    112c:	2f 81       	ldd	r18, Y+7	; 0x07
    112e:	38 85       	ldd	r19, Y+8	; 0x08
    1130:	21 30       	cpi	r18, 0x01	; 1
    1132:	31 05       	cpc	r19, r1
    1134:	b1 f0       	breq	.+44     	; 0x1162 <DIO_u8SetPinDirection+0x1a8>
    1136:	62 c0       	rjmp	.+196    	; 0x11fc <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    1138:	a4 e3       	ldi	r26, 0x34	; 52
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e4 e3       	ldi	r30, 0x34	; 52
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <DIO_u8SetPinDirection+0x19c>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <DIO_u8SetPinDirection+0x198>
    115a:	80 95       	com	r24
    115c:	84 23       	and	r24, r20
    115e:	8c 93       	st	X, r24
    1160:	4d c0       	rjmp	.+154    	; 0x11fc <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    1162:	a4 e3       	ldi	r26, 0x34	; 52
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e4 e3       	ldi	r30, 0x34	; 52
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <DIO_u8SetPinDirection+0x1c6>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <DIO_u8SetPinDirection+0x1c2>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	39 c0       	rjmp	.+114    	; 0x11fc <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	3e 83       	std	Y+6, r19	; 0x06
    1192:	2d 83       	std	Y+5, r18	; 0x05
    1194:	8d 81       	ldd	r24, Y+5	; 0x05
    1196:	9e 81       	ldd	r25, Y+6	; 0x06
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	31 f0       	breq	.+12     	; 0x11a8 <DIO_u8SetPinDirection+0x1ee>
    119c:	2d 81       	ldd	r18, Y+5	; 0x05
    119e:	3e 81       	ldd	r19, Y+6	; 0x06
    11a0:	21 30       	cpi	r18, 0x01	; 1
    11a2:	31 05       	cpc	r19, r1
    11a4:	b1 f0       	breq	.+44     	; 0x11d2 <DIO_u8SetPinDirection+0x218>
    11a6:	2a c0       	rjmp	.+84     	; 0x11fc <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    11a8:	a1 e3       	ldi	r26, 0x31	; 49
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e1 e3       	ldi	r30, 0x31	; 49
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_u8SetPinDirection+0x20c>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_u8SetPinDirection+0x208>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	15 c0       	rjmp	.+42     	; 0x11fc <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    11d2:	a1 e3       	ldi	r26, 0x31	; 49
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e1 e3       	ldi	r30, 0x31	; 49
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	02 2e       	mov	r0, r18
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <DIO_u8SetPinDirection+0x236>
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	0a 94       	dec	r0
    11f2:	e2 f7       	brpl	.-8      	; 0x11ec <DIO_u8SetPinDirection+0x232>
    11f4:	84 2b       	or	r24, r20
    11f6:	8c 93       	st	X, r24
    11f8:	01 c0       	rjmp	.+2      	; 0x11fc <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    11fa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    11fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    11fe:	2e 96       	adiw	r28, 0x0e	; 14
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	f8 94       	cli
    1204:	de bf       	out	0x3e, r29	; 62
    1206:	0f be       	out	0x3f, r0	; 63
    1208:	cd bf       	out	0x3d, r28	; 61
    120a:	cf 91       	pop	r28
    120c:	df 91       	pop	r29
    120e:	08 95       	ret

00001210 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	2e 97       	sbiw	r28, 0x0e	; 14
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	de bf       	out	0x3e, r29	; 62
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	cd bf       	out	0x3d, r28	; 61
    1224:	8a 83       	std	Y+2, r24	; 0x02
    1226:	6b 83       	std	Y+3, r22	; 0x03
    1228:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 30       	cpi	r24, 0x08	; 8
    1232:	08 f0       	brcs	.+2      	; 0x1236 <DIO_u8SetPinValue+0x26>
    1234:	0c c1       	rjmp	.+536    	; 0x144e <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3e 87       	std	Y+14, r19	; 0x0e
    123e:	2d 87       	std	Y+13, r18	; 0x0d
    1240:	8d 85       	ldd	r24, Y+13	; 0x0d
    1242:	9e 85       	ldd	r25, Y+14	; 0x0e
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <DIO_u8SetPinValue+0x3c>
    124a:	51 c0       	rjmp	.+162    	; 0x12ee <DIO_u8SetPinValue+0xde>
    124c:	2d 85       	ldd	r18, Y+13	; 0x0d
    124e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <DIO_u8SetPinValue+0x50>
    1256:	8d 85       	ldd	r24, Y+13	; 0x0d
    1258:	9e 85       	ldd	r25, Y+14	; 0x0e
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	71 f0       	breq	.+28     	; 0x127a <DIO_u8SetPinValue+0x6a>
    125e:	f5 c0       	rjmp	.+490    	; 0x144a <DIO_u8SetPinValue+0x23a>
    1260:	2d 85       	ldd	r18, Y+13	; 0x0d
    1262:	3e 85       	ldd	r19, Y+14	; 0x0e
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	09 f4       	brne	.+2      	; 0x126c <DIO_u8SetPinValue+0x5c>
    126a:	7b c0       	rjmp	.+246    	; 0x1362 <DIO_u8SetPinValue+0x152>
    126c:	8d 85       	ldd	r24, Y+13	; 0x0d
    126e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <DIO_u8SetPinValue+0x68>
    1276:	af c0       	rjmp	.+350    	; 0x13d6 <DIO_u8SetPinValue+0x1c6>
    1278:	e8 c0       	rjmp	.+464    	; 0x144a <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    127a:	8c 81       	ldd	r24, Y+4	; 0x04
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3c 87       	std	Y+12, r19	; 0x0c
    1282:	2b 87       	std	Y+11, r18	; 0x0b
    1284:	8b 85       	ldd	r24, Y+11	; 0x0b
    1286:	9c 85       	ldd	r25, Y+12	; 0x0c
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	31 f0       	breq	.+12     	; 0x1298 <DIO_u8SetPinValue+0x88>
    128c:	2b 85       	ldd	r18, Y+11	; 0x0b
    128e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1290:	21 30       	cpi	r18, 0x01	; 1
    1292:	31 05       	cpc	r19, r1
    1294:	b1 f0       	breq	.+44     	; 0x12c2 <DIO_u8SetPinValue+0xb2>
    1296:	29 c0       	rjmp	.+82     	; 0x12ea <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1298:	ab e3       	ldi	r26, 0x3B	; 59
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	eb e3       	ldi	r30, 0x3B	; 59
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <DIO_u8SetPinValue+0xa6>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <DIO_u8SetPinValue+0xa2>
    12ba:	80 95       	com	r24
    12bc:	84 23       	and	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	c7 c0       	rjmp	.+398    	; 0x1450 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    12c2:	ab e3       	ldi	r26, 0x3B	; 59
    12c4:	b0 e0       	ldi	r27, 0x00	; 0
    12c6:	eb e3       	ldi	r30, 0x3B	; 59
    12c8:	f0 e0       	ldi	r31, 0x00	; 0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 2e       	mov	r0, r18
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <DIO_u8SetPinValue+0xd0>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	0a 94       	dec	r0
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <DIO_u8SetPinValue+0xcc>
    12e4:	84 2b       	or	r24, r20
    12e6:	8c 93       	st	X, r24
    12e8:	b3 c0       	rjmp	.+358    	; 0x1450 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    12ea:	19 82       	std	Y+1, r1	; 0x01
    12ec:	b1 c0       	rjmp	.+354    	; 0x1450 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	3a 87       	std	Y+10, r19	; 0x0a
    12f6:	29 87       	std	Y+9, r18	; 0x09
    12f8:	89 85       	ldd	r24, Y+9	; 0x09
    12fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	31 f0       	breq	.+12     	; 0x130c <DIO_u8SetPinValue+0xfc>
    1300:	29 85       	ldd	r18, Y+9	; 0x09
    1302:	3a 85       	ldd	r19, Y+10	; 0x0a
    1304:	21 30       	cpi	r18, 0x01	; 1
    1306:	31 05       	cpc	r19, r1
    1308:	b1 f0       	breq	.+44     	; 0x1336 <DIO_u8SetPinValue+0x126>
    130a:	29 c0       	rjmp	.+82     	; 0x135e <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    130c:	a8 e3       	ldi	r26, 0x38	; 56
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	e8 e3       	ldi	r30, 0x38	; 56
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	48 2f       	mov	r20, r24
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	02 2e       	mov	r0, r18
    1324:	02 c0       	rjmp	.+4      	; 0x132a <DIO_u8SetPinValue+0x11a>
    1326:	88 0f       	add	r24, r24
    1328:	99 1f       	adc	r25, r25
    132a:	0a 94       	dec	r0
    132c:	e2 f7       	brpl	.-8      	; 0x1326 <DIO_u8SetPinValue+0x116>
    132e:	80 95       	com	r24
    1330:	84 23       	and	r24, r20
    1332:	8c 93       	st	X, r24
    1334:	8d c0       	rjmp	.+282    	; 0x1450 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1336:	a8 e3       	ldi	r26, 0x38	; 56
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	e8 e3       	ldi	r30, 0x38	; 56
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	48 2f       	mov	r20, r24
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	28 2f       	mov	r18, r24
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	02 2e       	mov	r0, r18
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <DIO_u8SetPinValue+0x144>
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	0a 94       	dec	r0
    1356:	e2 f7       	brpl	.-8      	; 0x1350 <DIO_u8SetPinValue+0x140>
    1358:	84 2b       	or	r24, r20
    135a:	8c 93       	st	X, r24
    135c:	79 c0       	rjmp	.+242    	; 0x1450 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    135e:	19 82       	std	Y+1, r1	; 0x01
    1360:	77 c0       	rjmp	.+238    	; 0x1450 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	38 87       	std	Y+8, r19	; 0x08
    136a:	2f 83       	std	Y+7, r18	; 0x07
    136c:	8f 81       	ldd	r24, Y+7	; 0x07
    136e:	98 85       	ldd	r25, Y+8	; 0x08
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	31 f0       	breq	.+12     	; 0x1380 <DIO_u8SetPinValue+0x170>
    1374:	2f 81       	ldd	r18, Y+7	; 0x07
    1376:	38 85       	ldd	r19, Y+8	; 0x08
    1378:	21 30       	cpi	r18, 0x01	; 1
    137a:	31 05       	cpc	r19, r1
    137c:	b1 f0       	breq	.+44     	; 0x13aa <DIO_u8SetPinValue+0x19a>
    137e:	29 c0       	rjmp	.+82     	; 0x13d2 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1380:	a5 e3       	ldi	r26, 0x35	; 53
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e5 e3       	ldi	r30, 0x35	; 53
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	02 2e       	mov	r0, r18
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_u8SetPinValue+0x18e>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	0a 94       	dec	r0
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_u8SetPinValue+0x18a>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
    13a8:	53 c0       	rjmp	.+166    	; 0x1450 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    13aa:	a5 e3       	ldi	r26, 0x35	; 53
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e5 e3       	ldi	r30, 0x35	; 53
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	48 2f       	mov	r20, r24
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	02 2e       	mov	r0, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_u8SetPinValue+0x1b8>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	0a 94       	dec	r0
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_u8SetPinValue+0x1b4>
    13cc:	84 2b       	or	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    13d2:	19 82       	std	Y+1, r1	; 0x01
    13d4:	3d c0       	rjmp	.+122    	; 0x1450 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    13d6:	8c 81       	ldd	r24, Y+4	; 0x04
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3e 83       	std	Y+6, r19	; 0x06
    13de:	2d 83       	std	Y+5, r18	; 0x05
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	9e 81       	ldd	r25, Y+6	; 0x06
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	31 f0       	breq	.+12     	; 0x13f4 <DIO_u8SetPinValue+0x1e4>
    13e8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ea:	3e 81       	ldd	r19, Y+6	; 0x06
    13ec:	21 30       	cpi	r18, 0x01	; 1
    13ee:	31 05       	cpc	r19, r1
    13f0:	b1 f0       	breq	.+44     	; 0x141e <DIO_u8SetPinValue+0x20e>
    13f2:	29 c0       	rjmp	.+82     	; 0x1446 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    13f4:	a2 e3       	ldi	r26, 0x32	; 50
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e2 e3       	ldi	r30, 0x32	; 50
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_u8SetPinValue+0x202>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_u8SetPinValue+0x1fe>
    1416:	80 95       	com	r24
    1418:	84 23       	and	r24, r20
    141a:	8c 93       	st	X, r24
    141c:	19 c0       	rjmp	.+50     	; 0x1450 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    141e:	a2 e3       	ldi	r26, 0x32	; 50
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	e2 e3       	ldi	r30, 0x32	; 50
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <DIO_u8SetPinValue+0x22c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <DIO_u8SetPinValue+0x228>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	05 c0       	rjmp	.+10     	; 0x1450 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1446:	19 82       	std	Y+1, r1	; 0x01
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    144a:	19 82       	std	Y+1, r1	; 0x01
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    144e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1450:	89 81       	ldd	r24, Y+1	; 0x01
}
    1452:	2e 96       	adiw	r28, 0x0e	; 14
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	28 97       	sbiw	r28, 0x08	; 8
    146e:	0f b6       	in	r0, 0x3f	; 63
    1470:	f8 94       	cli
    1472:	de bf       	out	0x3e, r29	; 62
    1474:	0f be       	out	0x3f, r0	; 63
    1476:	cd bf       	out	0x3d, r28	; 61
    1478:	8b 83       	std	Y+3, r24	; 0x03
    147a:	6c 83       	std	Y+4, r22	; 0x04
    147c:	5e 83       	std	Y+6, r21	; 0x06
    147e:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	84 30       	cpi	r24, 0x04	; 4
    1488:	08 f0       	brcs	.+2      	; 0x148c <DIO_u8GetPinValue+0x28>
    148a:	a1 c0       	rjmp	.+322    	; 0x15ce <DIO_u8GetPinValue+0x16a>
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	88 30       	cpi	r24, 0x08	; 8
    1490:	08 f0       	brcs	.+2      	; 0x1494 <DIO_u8GetPinValue+0x30>
    1492:	9d c0       	rjmp	.+314    	; 0x15ce <DIO_u8GetPinValue+0x16a>
    1494:	8d 81       	ldd	r24, Y+5	; 0x05
    1496:	9e 81       	ldd	r25, Y+6	; 0x06
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	09 f4       	brne	.+2      	; 0x149e <DIO_u8GetPinValue+0x3a>
    149c:	98 c0       	rjmp	.+304    	; 0x15ce <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	38 87       	std	Y+8, r19	; 0x08
    14a6:	2f 83       	std	Y+7, r18	; 0x07
    14a8:	4f 81       	ldd	r20, Y+7	; 0x07
    14aa:	58 85       	ldd	r21, Y+8	; 0x08
    14ac:	41 30       	cpi	r20, 0x01	; 1
    14ae:	51 05       	cpc	r21, r1
    14b0:	a9 f1       	breq	.+106    	; 0x151c <DIO_u8GetPinValue+0xb8>
    14b2:	8f 81       	ldd	r24, Y+7	; 0x07
    14b4:	98 85       	ldd	r25, Y+8	; 0x08
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	91 05       	cpc	r25, r1
    14ba:	34 f4       	brge	.+12     	; 0x14c8 <DIO_u8GetPinValue+0x64>
    14bc:	2f 81       	ldd	r18, Y+7	; 0x07
    14be:	38 85       	ldd	r19, Y+8	; 0x08
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <DIO_u8GetPinValue+0x7e>
    14c6:	81 c0       	rjmp	.+258    	; 0x15ca <DIO_u8GetPinValue+0x166>
    14c8:	4f 81       	ldd	r20, Y+7	; 0x07
    14ca:	58 85       	ldd	r21, Y+8	; 0x08
    14cc:	42 30       	cpi	r20, 0x02	; 2
    14ce:	51 05       	cpc	r21, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <DIO_u8GetPinValue+0x70>
    14d2:	41 c0       	rjmp	.+130    	; 0x1556 <DIO_u8GetPinValue+0xf2>
    14d4:	8f 81       	ldd	r24, Y+7	; 0x07
    14d6:	98 85       	ldd	r25, Y+8	; 0x08
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <DIO_u8GetPinValue+0x7c>
    14de:	58 c0       	rjmp	.+176    	; 0x1590 <DIO_u8GetPinValue+0x12c>
    14e0:	74 c0       	rjmp	.+232    	; 0x15ca <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    14e2:	e9 e3       	ldi	r30, 0x39	; 57
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	8c 81       	ldd	r24, Y+4	; 0x04
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <DIO_u8GetPinValue+0x96>
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <DIO_u8GetPinValue+0x92>
    14fe:	ca 01       	movw	r24, r20
    1500:	81 70       	andi	r24, 0x01	; 1
    1502:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	88 23       	and	r24, r24
    1508:	21 f4       	brne	.+8      	; 0x1512 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    150a:	ed 81       	ldd	r30, Y+5	; 0x05
    150c:	fe 81       	ldd	r31, Y+6	; 0x06
    150e:	10 82       	st	Z, r1
    1510:	5f c0       	rjmp	.+190    	; 0x15d0 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1512:	ed 81       	ldd	r30, Y+5	; 0x05
    1514:	fe 81       	ldd	r31, Y+6	; 0x06
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	80 83       	st	Z, r24
    151a:	5a c0       	rjmp	.+180    	; 0x15d0 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    151c:	e6 e3       	ldi	r30, 0x36	; 54
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <DIO_u8GetPinValue+0xd0>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <DIO_u8GetPinValue+0xcc>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	88 23       	and	r24, r24
    1542:	21 f4       	brne	.+8      	; 0x154c <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1544:	ed 81       	ldd	r30, Y+5	; 0x05
    1546:	fe 81       	ldd	r31, Y+6	; 0x06
    1548:	10 82       	st	Z, r1
    154a:	42 c0       	rjmp	.+132    	; 0x15d0 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    154c:	ed 81       	ldd	r30, Y+5	; 0x05
    154e:	fe 81       	ldd	r31, Y+6	; 0x06
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	80 83       	st	Z, r24
    1554:	3d c0       	rjmp	.+122    	; 0x15d0 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1556:	e3 e3       	ldi	r30, 0x33	; 51
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	8c 81       	ldd	r24, Y+4	; 0x04
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a9 01       	movw	r20, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <DIO_u8GetPinValue+0x10a>
    156a:	55 95       	asr	r21
    156c:	47 95       	ror	r20
    156e:	8a 95       	dec	r24
    1570:	e2 f7       	brpl	.-8      	; 0x156a <DIO_u8GetPinValue+0x106>
    1572:	ca 01       	movw	r24, r20
    1574:	81 70       	andi	r24, 0x01	; 1
    1576:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 23       	and	r24, r24
    157c:	21 f4       	brne	.+8      	; 0x1586 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    157e:	ed 81       	ldd	r30, Y+5	; 0x05
    1580:	fe 81       	ldd	r31, Y+6	; 0x06
    1582:	10 82       	st	Z, r1
    1584:	25 c0       	rjmp	.+74     	; 0x15d0 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1586:	ed 81       	ldd	r30, Y+5	; 0x05
    1588:	fe 81       	ldd	r31, Y+6	; 0x06
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	80 83       	st	Z, r24
    158e:	20 c0       	rjmp	.+64     	; 0x15d0 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1590:	e0 e3       	ldi	r30, 0x30	; 48
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	88 2f       	mov	r24, r24
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a9 01       	movw	r20, r18
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <DIO_u8GetPinValue+0x144>
    15a4:	55 95       	asr	r21
    15a6:	47 95       	ror	r20
    15a8:	8a 95       	dec	r24
    15aa:	e2 f7       	brpl	.-8      	; 0x15a4 <DIO_u8GetPinValue+0x140>
    15ac:	ca 01       	movw	r24, r20
    15ae:	81 70       	andi	r24, 0x01	; 1
    15b0:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	88 23       	and	r24, r24
    15b6:	21 f4       	brne	.+8      	; 0x15c0 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15b8:	ed 81       	ldd	r30, Y+5	; 0x05
    15ba:	fe 81       	ldd	r31, Y+6	; 0x06
    15bc:	10 82       	st	Z, r1
    15be:	08 c0       	rjmp	.+16     	; 0x15d0 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    15c0:	ed 81       	ldd	r30, Y+5	; 0x05
    15c2:	fe 81       	ldd	r31, Y+6	; 0x06
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	80 83       	st	Z, r24
    15c8:	03 c0       	rjmp	.+6      	; 0x15d0 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    15ca:	1a 82       	std	Y+2, r1	; 0x02
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    15ce:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15d2:	28 96       	adiw	r28, 0x08	; 8
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
    15ec:	2d 97       	sbiw	r28, 0x0d	; 13
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    15fa:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	88 23       	and	r24, r24
    1604:	21 f0       	breq	.+8      	; 0x160e <DIO_u8SetPortDirection+0x2a>
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	09 f0       	breq	.+2      	; 0x160e <DIO_u8SetPortDirection+0x2a>
    160c:	82 c0       	rjmp	.+260    	; 0x1712 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	28 2f       	mov	r18, r24
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	3d 87       	std	Y+13, r19	; 0x0d
    1616:	2c 87       	std	Y+12, r18	; 0x0c
    1618:	8c 85       	ldd	r24, Y+12	; 0x0c
    161a:	9d 85       	ldd	r25, Y+13	; 0x0d
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	91 05       	cpc	r25, r1
    1620:	71 f1       	breq	.+92     	; 0x167e <DIO_u8SetPortDirection+0x9a>
    1622:	2c 85       	ldd	r18, Y+12	; 0x0c
    1624:	3d 85       	ldd	r19, Y+13	; 0x0d
    1626:	22 30       	cpi	r18, 0x02	; 2
    1628:	31 05       	cpc	r19, r1
    162a:	2c f4       	brge	.+10     	; 0x1636 <DIO_u8SetPortDirection+0x52>
    162c:	8c 85       	ldd	r24, Y+12	; 0x0c
    162e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1630:	00 97       	sbiw	r24, 0x00	; 0
    1632:	69 f0       	breq	.+26     	; 0x164e <DIO_u8SetPortDirection+0x6a>
    1634:	6c c0       	rjmp	.+216    	; 0x170e <DIO_u8SetPortDirection+0x12a>
    1636:	2c 85       	ldd	r18, Y+12	; 0x0c
    1638:	3d 85       	ldd	r19, Y+13	; 0x0d
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	b9 f1       	breq	.+110    	; 0x16ae <DIO_u8SetPortDirection+0xca>
    1640:	8c 85       	ldd	r24, Y+12	; 0x0c
    1642:	9d 85       	ldd	r25, Y+13	; 0x0d
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <DIO_u8SetPortDirection+0x68>
    164a:	49 c0       	rjmp	.+146    	; 0x16de <DIO_u8SetPortDirection+0xfa>
    164c:	60 c0       	rjmp	.+192    	; 0x170e <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	3b 87       	std	Y+11, r19	; 0x0b
    1656:	2a 87       	std	Y+10, r18	; 0x0a
    1658:	8a 85       	ldd	r24, Y+10	; 0x0a
    165a:	9b 85       	ldd	r25, Y+11	; 0x0b
    165c:	00 97       	sbiw	r24, 0x00	; 0
    165e:	31 f0       	breq	.+12     	; 0x166c <DIO_u8SetPortDirection+0x88>
    1660:	2a 85       	ldd	r18, Y+10	; 0x0a
    1662:	3b 85       	ldd	r19, Y+11	; 0x0b
    1664:	21 30       	cpi	r18, 0x01	; 1
    1666:	31 05       	cpc	r19, r1
    1668:	29 f0       	breq	.+10     	; 0x1674 <DIO_u8SetPortDirection+0x90>
    166a:	54 c0       	rjmp	.+168    	; 0x1714 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    166c:	ea e3       	ldi	r30, 0x3A	; 58
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	10 82       	st	Z, r1
    1672:	50 c0       	rjmp	.+160    	; 0x1714 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    1674:	ea e3       	ldi	r30, 0x3A	; 58
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	8f ef       	ldi	r24, 0xFF	; 255
    167a:	80 83       	st	Z, r24
    167c:	4b c0       	rjmp	.+150    	; 0x1714 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	39 87       	std	Y+9, r19	; 0x09
    1686:	28 87       	std	Y+8, r18	; 0x08
    1688:	88 85       	ldd	r24, Y+8	; 0x08
    168a:	99 85       	ldd	r25, Y+9	; 0x09
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	31 f0       	breq	.+12     	; 0x169c <DIO_u8SetPortDirection+0xb8>
    1690:	28 85       	ldd	r18, Y+8	; 0x08
    1692:	39 85       	ldd	r19, Y+9	; 0x09
    1694:	21 30       	cpi	r18, 0x01	; 1
    1696:	31 05       	cpc	r19, r1
    1698:	29 f0       	breq	.+10     	; 0x16a4 <DIO_u8SetPortDirection+0xc0>
    169a:	3c c0       	rjmp	.+120    	; 0x1714 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    169c:	e7 e3       	ldi	r30, 0x37	; 55
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	10 82       	st	Z, r1
    16a2:	38 c0       	rjmp	.+112    	; 0x1714 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    16a4:	e7 e3       	ldi	r30, 0x37	; 55
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	80 83       	st	Z, r24
    16ac:	33 c0       	rjmp	.+102    	; 0x1714 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	28 2f       	mov	r18, r24
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	3f 83       	std	Y+7, r19	; 0x07
    16b6:	2e 83       	std	Y+6, r18	; 0x06
    16b8:	8e 81       	ldd	r24, Y+6	; 0x06
    16ba:	9f 81       	ldd	r25, Y+7	; 0x07
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	31 f0       	breq	.+12     	; 0x16cc <DIO_u8SetPortDirection+0xe8>
    16c0:	2e 81       	ldd	r18, Y+6	; 0x06
    16c2:	3f 81       	ldd	r19, Y+7	; 0x07
    16c4:	21 30       	cpi	r18, 0x01	; 1
    16c6:	31 05       	cpc	r19, r1
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <DIO_u8SetPortDirection+0xf0>
    16ca:	24 c0       	rjmp	.+72     	; 0x1714 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    16cc:	e4 e3       	ldi	r30, 0x34	; 52
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	10 82       	st	Z, r1
    16d2:	20 c0       	rjmp	.+64     	; 0x1714 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    16d4:	e4 e3       	ldi	r30, 0x34	; 52
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	80 83       	st	Z, r24
    16dc:	1b c0       	rjmp	.+54     	; 0x1714 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	28 2f       	mov	r18, r24
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	3d 83       	std	Y+5, r19	; 0x05
    16e6:	2c 83       	std	Y+4, r18	; 0x04
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	00 97       	sbiw	r24, 0x00	; 0
    16ee:	31 f0       	breq	.+12     	; 0x16fc <DIO_u8SetPortDirection+0x118>
    16f0:	2c 81       	ldd	r18, Y+4	; 0x04
    16f2:	3d 81       	ldd	r19, Y+5	; 0x05
    16f4:	21 30       	cpi	r18, 0x01	; 1
    16f6:	31 05       	cpc	r19, r1
    16f8:	29 f0       	breq	.+10     	; 0x1704 <DIO_u8SetPortDirection+0x120>
    16fa:	0c c0       	rjmp	.+24     	; 0x1714 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    16fc:	e1 e3       	ldi	r30, 0x31	; 49
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	10 82       	st	Z, r1
    1702:	08 c0       	rjmp	.+16     	; 0x1714 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    1704:	e1 e3       	ldi	r30, 0x31	; 49
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	8f ef       	ldi	r24, 0xFF	; 255
    170a:	80 83       	st	Z, r24
    170c:	03 c0       	rjmp	.+6      	; 0x1714 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    170e:	19 82       	std	Y+1, r1	; 0x01
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1712:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1714:	89 81       	ldd	r24, Y+1	; 0x01
}
    1716:	2d 96       	adiw	r28, 0x0d	; 13
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	00 d0       	rcall	.+0      	; 0x172e <DIO_u8SetPortValue+0x6>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <DIO_u8SetPortValue+0x8>
    1730:	0f 92       	push	r0
    1732:	cd b7       	in	r28, 0x3d	; 61
    1734:	de b7       	in	r29, 0x3e	; 62
    1736:	8a 83       	std	Y+2, r24	; 0x02
    1738:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3d 83       	std	Y+5, r19	; 0x05
    1746:	2c 83       	std	Y+4, r18	; 0x04
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	d1 f0       	breq	.+52     	; 0x1786 <DIO_u8SetPortValue+0x5e>
    1752:	2c 81       	ldd	r18, Y+4	; 0x04
    1754:	3d 81       	ldd	r19, Y+5	; 0x05
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	2c f4       	brge	.+10     	; 0x1766 <DIO_u8SetPortValue+0x3e>
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	9d 81       	ldd	r25, Y+5	; 0x05
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	61 f0       	breq	.+24     	; 0x177c <DIO_u8SetPortValue+0x54>
    1764:	1f c0       	rjmp	.+62     	; 0x17a4 <DIO_u8SetPortValue+0x7c>
    1766:	2c 81       	ldd	r18, Y+4	; 0x04
    1768:	3d 81       	ldd	r19, Y+5	; 0x05
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	81 f0       	breq	.+32     	; 0x1790 <DIO_u8SetPortValue+0x68>
    1770:	8c 81       	ldd	r24, Y+4	; 0x04
    1772:	9d 81       	ldd	r25, Y+5	; 0x05
    1774:	83 30       	cpi	r24, 0x03	; 3
    1776:	91 05       	cpc	r25, r1
    1778:	81 f0       	breq	.+32     	; 0x179a <DIO_u8SetPortValue+0x72>
    177a:	14 c0       	rjmp	.+40     	; 0x17a4 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    177c:	eb e3       	ldi	r30, 0x3B	; 59
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	80 83       	st	Z, r24
    1784:	10 c0       	rjmp	.+32     	; 0x17a6 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    1786:	e8 e3       	ldi	r30, 0x38	; 56
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	80 83       	st	Z, r24
    178e:	0b c0       	rjmp	.+22     	; 0x17a6 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    1790:	e5 e3       	ldi	r30, 0x35	; 53
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	80 83       	st	Z, r24
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    179a:	e2 e3       	ldi	r30, 0x32	; 50
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	80 83       	st	Z, r24
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    17a4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret

000017b8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    17b8:	df 93       	push	r29
    17ba:	cf 93       	push	r28
    17bc:	00 d0       	rcall	.+0      	; 0x17be <DIO_u8GetPortValue+0x6>
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <DIO_u8GetPortValue+0x8>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <DIO_u8GetPortValue+0xa>
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	8a 83       	std	Y+2, r24	; 0x02
    17c8:	7c 83       	std	Y+4, r23	; 0x04
    17ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	e9 f1       	breq	.+122    	; 0x1852 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3e 83       	std	Y+6, r19	; 0x06
    17e0:	2d 83       	std	Y+5, r18	; 0x05
    17e2:	8d 81       	ldd	r24, Y+5	; 0x05
    17e4:	9e 81       	ldd	r25, Y+6	; 0x06
    17e6:	81 30       	cpi	r24, 0x01	; 1
    17e8:	91 05       	cpc	r25, r1
    17ea:	e1 f0       	breq	.+56     	; 0x1824 <DIO_u8GetPortValue+0x6c>
    17ec:	2d 81       	ldd	r18, Y+5	; 0x05
    17ee:	3e 81       	ldd	r19, Y+6	; 0x06
    17f0:	22 30       	cpi	r18, 0x02	; 2
    17f2:	31 05       	cpc	r19, r1
    17f4:	2c f4       	brge	.+10     	; 0x1800 <DIO_u8GetPortValue+0x48>
    17f6:	8d 81       	ldd	r24, Y+5	; 0x05
    17f8:	9e 81       	ldd	r25, Y+6	; 0x06
    17fa:	00 97       	sbiw	r24, 0x00	; 0
    17fc:	61 f0       	breq	.+24     	; 0x1816 <DIO_u8GetPortValue+0x5e>
    17fe:	27 c0       	rjmp	.+78     	; 0x184e <DIO_u8GetPortValue+0x96>
    1800:	2d 81       	ldd	r18, Y+5	; 0x05
    1802:	3e 81       	ldd	r19, Y+6	; 0x06
    1804:	22 30       	cpi	r18, 0x02	; 2
    1806:	31 05       	cpc	r19, r1
    1808:	a1 f0       	breq	.+40     	; 0x1832 <DIO_u8GetPortValue+0x7a>
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	83 30       	cpi	r24, 0x03	; 3
    1810:	91 05       	cpc	r25, r1
    1812:	b1 f0       	breq	.+44     	; 0x1840 <DIO_u8GetPortValue+0x88>
    1814:	1c c0       	rjmp	.+56     	; 0x184e <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1816:	e9 e3       	ldi	r30, 0x39	; 57
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	eb 81       	ldd	r30, Y+3	; 0x03
    181e:	fc 81       	ldd	r31, Y+4	; 0x04
    1820:	80 83       	st	Z, r24
    1822:	18 c0       	rjmp	.+48     	; 0x1854 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1824:	e6 e3       	ldi	r30, 0x36	; 54
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	eb 81       	ldd	r30, Y+3	; 0x03
    182c:	fc 81       	ldd	r31, Y+4	; 0x04
    182e:	80 83       	st	Z, r24
    1830:	11 c0       	rjmp	.+34     	; 0x1854 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1832:	e3 e3       	ldi	r30, 0x33	; 51
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	eb 81       	ldd	r30, Y+3	; 0x03
    183a:	fc 81       	ldd	r31, Y+4	; 0x04
    183c:	80 83       	st	Z, r24
    183e:	0a c0       	rjmp	.+20     	; 0x1854 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1840:	e0 e3       	ldi	r30, 0x30	; 48
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	eb 81       	ldd	r30, Y+3	; 0x03
    1848:	fc 81       	ldd	r31, Y+4	; 0x04
    184a:	80 83       	st	Z, r24
    184c:	03 c0       	rjmp	.+6      	; 0x1854 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    184e:	19 82       	std	Y+1, r1	; 0x01
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1852:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1854:	89 81       	ldd	r24, Y+1	; 0x01
    1856:	26 96       	adiw	r28, 0x06	; 6
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <H_BRIDGE_voidRotateCW>:

#include "H_Bridge.h"


void H_BRIDGE_voidRotateCW(void)
{
    1868:	df 93       	push	r29
    186a:	cf 93       	push	r28
    186c:	cd b7       	in	r28, 0x3d	; 61
    186e:	de b7       	in	r29, 0x3e	; 62
	{
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_LOW);
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_HIGH);
	}
#elif H_BRIDGE_MODE == WITHOUT_LOOP
	DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_LOW);
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	40 e0       	ldi	r20, 0x00	; 0
    1876:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_HIGH);
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	61 e0       	ldi	r22, 0x01	; 1
    187e:	41 e0       	ldi	r20, 0x01	; 1
    1880:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
#endif
}
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <H_BRIDGE_voidRotateCCW>:
void H_BRIDGE_voidRotateCCW(void)
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_LOW);
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_HIGH);

	}
#elif H_BRIDGE_MODE == WITHOUT_LOOP
	DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_LOW);
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_HIGH);
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	60 e0       	ldi	r22, 0x00	; 0
    18a0:	41 e0       	ldi	r20, 0x01	; 1
    18a2:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
#endif
}
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    18ac:	0f 93       	push	r16
    18ae:	1f 93       	push	r17
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
    18b8:	cc 54       	subi	r28, 0x4C	; 76
    18ba:	d0 40       	sbci	r29, 0x00	; 0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	fe 01       	movw	r30, r28
    18c8:	e7 5b       	subi	r30, 0xB7	; 183
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	ac e0       	ldi	r26, 0x0C	; 12
    18d2:	b2 e4       	ldi	r27, 0x42	; 66
    18d4:	80 83       	st	Z, r24
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	a2 83       	std	Z+2, r26	; 0x02
    18da:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18dc:	8e 01       	movw	r16, r28
    18de:	0b 5b       	subi	r16, 0xBB	; 187
    18e0:	1f 4f       	sbci	r17, 0xFF	; 255
    18e2:	fe 01       	movw	r30, r28
    18e4:	e7 5b       	subi	r30, 0xB7	; 183
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	60 81       	ld	r22, Z
    18ea:	71 81       	ldd	r23, Z+1	; 0x01
    18ec:	82 81       	ldd	r24, Z+2	; 0x02
    18ee:	93 81       	ldd	r25, Z+3	; 0x03
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a ef       	ldi	r20, 0xFA	; 250
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	f8 01       	movw	r30, r16
    1902:	80 83       	st	Z, r24
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	a2 83       	std	Z+2, r26	; 0x02
    1908:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190a:	fe 01       	movw	r30, r28
    190c:	eb 5b       	subi	r30, 0xBB	; 187
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1924:	88 23       	and	r24, r24
    1926:	44 f4       	brge	.+16     	; 0x1938 <LCD_voidInit+0x8c>
		__ticks = 1;
    1928:	fe 01       	movw	r30, r28
    192a:	ed 5b       	subi	r30, 0xBD	; 189
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	91 83       	std	Z+1, r25	; 0x01
    1934:	80 83       	st	Z, r24
    1936:	64 c0       	rjmp	.+200    	; 0x1a00 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1938:	fe 01       	movw	r30, r28
    193a:	eb 5b       	subi	r30, 0xBB	; 187
    193c:	ff 4f       	sbci	r31, 0xFF	; 255
    193e:	60 81       	ld	r22, Z
    1940:	71 81       	ldd	r23, Z+1	; 0x01
    1942:	82 81       	ldd	r24, Z+2	; 0x02
    1944:	93 81       	ldd	r25, Z+3	; 0x03
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	3f ef       	ldi	r19, 0xFF	; 255
    194a:	4f e7       	ldi	r20, 0x7F	; 127
    194c:	57 e4       	ldi	r21, 0x47	; 71
    194e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1952:	18 16       	cp	r1, r24
    1954:	0c f0       	brlt	.+2      	; 0x1958 <LCD_voidInit+0xac>
    1956:	43 c0       	rjmp	.+134    	; 0x19de <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1958:	fe 01       	movw	r30, r28
    195a:	e7 5b       	subi	r30, 0xB7	; 183
    195c:	ff 4f       	sbci	r31, 0xFF	; 255
    195e:	60 81       	ld	r22, Z
    1960:	71 81       	ldd	r23, Z+1	; 0x01
    1962:	82 81       	ldd	r24, Z+2	; 0x02
    1964:	93 81       	ldd	r25, Z+3	; 0x03
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e2       	ldi	r20, 0x20	; 32
    196c:	51 e4       	ldi	r21, 0x41	; 65
    196e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1972:	dc 01       	movw	r26, r24
    1974:	cb 01       	movw	r24, r22
    1976:	8e 01       	movw	r16, r28
    1978:	0d 5b       	subi	r16, 0xBD	; 189
    197a:	1f 4f       	sbci	r17, 0xFF	; 255
    197c:	bc 01       	movw	r22, r24
    197e:	cd 01       	movw	r24, r26
    1980:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1984:	dc 01       	movw	r26, r24
    1986:	cb 01       	movw	r24, r22
    1988:	f8 01       	movw	r30, r16
    198a:	91 83       	std	Z+1, r25	; 0x01
    198c:	80 83       	st	Z, r24
    198e:	1f c0       	rjmp	.+62     	; 0x19ce <LCD_voidInit+0x122>
    1990:	fe 01       	movw	r30, r28
    1992:	ef 5b       	subi	r30, 0xBF	; 191
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	88 ec       	ldi	r24, 0xC8	; 200
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    199e:	fe 01       	movw	r30, r28
    19a0:	ef 5b       	subi	r30, 0xBF	; 191
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	80 81       	ld	r24, Z
    19a6:	91 81       	ldd	r25, Z+1	; 0x01
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	f1 f7       	brne	.-4      	; 0x19a8 <LCD_voidInit+0xfc>
    19ac:	fe 01       	movw	r30, r28
    19ae:	ef 5b       	subi	r30, 0xBF	; 191
    19b0:	ff 4f       	sbci	r31, 0xFF	; 255
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19b6:	de 01       	movw	r26, r28
    19b8:	ad 5b       	subi	r26, 0xBD	; 189
    19ba:	bf 4f       	sbci	r27, 0xFF	; 255
    19bc:	fe 01       	movw	r30, r28
    19be:	ed 5b       	subi	r30, 0xBD	; 189
    19c0:	ff 4f       	sbci	r31, 0xFF	; 255
    19c2:	80 81       	ld	r24, Z
    19c4:	91 81       	ldd	r25, Z+1	; 0x01
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	11 96       	adiw	r26, 0x01	; 1
    19ca:	9c 93       	st	X, r25
    19cc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ce:	fe 01       	movw	r30, r28
    19d0:	ed 5b       	subi	r30, 0xBD	; 189
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 81       	ld	r24, Z
    19d6:	91 81       	ldd	r25, Z+1	; 0x01
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	d1 f6       	brne	.-76     	; 0x1990 <LCD_voidInit+0xe4>
    19dc:	24 c0       	rjmp	.+72     	; 0x1a26 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19de:	8e 01       	movw	r16, r28
    19e0:	0d 5b       	subi	r16, 0xBD	; 189
    19e2:	1f 4f       	sbci	r17, 0xFF	; 255
    19e4:	fe 01       	movw	r30, r28
    19e6:	eb 5b       	subi	r30, 0xBB	; 187
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	60 81       	ld	r22, Z
    19ec:	71 81       	ldd	r23, Z+1	; 0x01
    19ee:	82 81       	ldd	r24, Z+2	; 0x02
    19f0:	93 81       	ldd	r25, Z+3	; 0x03
    19f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f6:	dc 01       	movw	r26, r24
    19f8:	cb 01       	movw	r24, r22
    19fa:	f8 01       	movw	r30, r16
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	fe 01       	movw	r30, r28
    1a02:	ed 5b       	subi	r30, 0xBD	; 189
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	ff 96       	adiw	r30, 0x3f	; 63
    1a0e:	91 83       	std	Z+1, r25	; 0x01
    1a10:	80 83       	st	Z, r24
    1a12:	fe 01       	movw	r30, r28
    1a14:	ff 96       	adiw	r30, 0x3f	; 63
    1a16:	80 81       	ld	r24, Z
    1a18:	91 81       	ldd	r25, Z+1	; 0x01
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_voidInit+0x16e>
    1a1e:	fe 01       	movw	r30, r28
    1a20:	ff 96       	adiw	r30, 0x3f	; 63
    1a22:	91 83       	std	Z+1, r25	; 0x01
    1a24:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    1a26:	88 e3       	ldi	r24, 0x38	; 56
    1a28:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e2       	ldi	r26, 0x20	; 32
    1a32:	b2 e4       	ldi	r27, 0x42	; 66
    1a34:	8b af       	std	Y+59, r24	; 0x3b
    1a36:	9c af       	std	Y+60, r25	; 0x3c
    1a38:	ad af       	std	Y+61, r26	; 0x3d
    1a3a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a3c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a3e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a40:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a42:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a44:	2b ea       	ldi	r18, 0xAB	; 171
    1a46:	3a ea       	ldi	r19, 0xAA	; 170
    1a48:	4a e2       	ldi	r20, 0x2A	; 42
    1a4a:	50 e4       	ldi	r21, 0x40	; 64
    1a4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8f ab       	std	Y+55, r24	; 0x37
    1a56:	98 af       	std	Y+56, r25	; 0x38
    1a58:	a9 af       	std	Y+57, r26	; 0x39
    1a5a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a5c:	6f a9       	ldd	r22, Y+55	; 0x37
    1a5e:	78 ad       	ldd	r23, Y+56	; 0x38
    1a60:	89 ad       	ldd	r24, Y+57	; 0x39
    1a62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	1c f4       	brge	.+6      	; 0x1a7a <LCD_voidInit+0x1ce>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	8e ab       	std	Y+54, r24	; 0x36
    1a78:	91 c0       	rjmp	.+290    	; 0x1b9c <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1a7a:	6f a9       	ldd	r22, Y+55	; 0x37
    1a7c:	78 ad       	ldd	r23, Y+56	; 0x38
    1a7e:	89 ad       	ldd	r24, Y+57	; 0x39
    1a80:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4f e7       	ldi	r20, 0x7F	; 127
    1a88:	53 e4       	ldi	r21, 0x43	; 67
    1a8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a8e:	18 16       	cp	r1, r24
    1a90:	0c f0       	brlt	.+2      	; 0x1a94 <LCD_voidInit+0x1e8>
    1a92:	7b c0       	rjmp	.+246    	; 0x1b8a <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1a94:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a96:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a98:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a e7       	ldi	r20, 0x7A	; 122
    1aa2:	54 e4       	ldi	r21, 0x44	; 68
    1aa4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8a ab       	std	Y+50, r24	; 0x32
    1aae:	9b ab       	std	Y+51, r25	; 0x33
    1ab0:	ac ab       	std	Y+52, r26	; 0x34
    1ab2:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	6a a9       	ldd	r22, Y+50	; 0x32
    1ab6:	7b a9       	ldd	r23, Y+51	; 0x33
    1ab8:	8c a9       	ldd	r24, Y+52	; 0x34
    1aba:	9d a9       	ldd	r25, Y+53	; 0x35
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a ef       	ldi	r20, 0xFA	; 250
    1ac2:	54 e4       	ldi	r21, 0x44	; 68
    1ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8e a7       	std	Y+46, r24	; 0x2e
    1ace:	9f a7       	std	Y+47, r25	; 0x2f
    1ad0:	a8 ab       	std	Y+48, r26	; 0x30
    1ad2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ad4:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ad6:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ad8:	88 a9       	ldd	r24, Y+48	; 0x30
    1ada:	99 a9       	ldd	r25, Y+49	; 0x31
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <LCD_voidInit+0x24a>
		__ticks = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9d a7       	std	Y+45, r25	; 0x2d
    1af2:	8c a7       	std	Y+44, r24	; 0x2c
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1af6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1af8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1afa:	88 a9       	ldd	r24, Y+48	; 0x30
    1afc:	99 a9       	ldd	r25, Y+49	; 0x31
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	4c f5       	brge	.+82     	; 0x1b60 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	6a a9       	ldd	r22, Y+50	; 0x32
    1b10:	7b a9       	ldd	r23, Y+51	; 0x33
    1b12:	8c a9       	ldd	r24, Y+52	; 0x34
    1b14:	9d a9       	ldd	r25, Y+53	; 0x35
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9d a7       	std	Y+45, r25	; 0x2d
    1b34:	8c a7       	std	Y+44, r24	; 0x2c
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <LCD_voidInit+0x2aa>
    1b38:	88 ec       	ldi	r24, 0xC8	; 200
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9b a7       	std	Y+43, r25	; 0x2b
    1b3e:	8a a7       	std	Y+42, r24	; 0x2a
    1b40:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b42:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_voidInit+0x298>
    1b48:	9b a7       	std	Y+43, r25	; 0x2b
    1b4a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b4e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9d a7       	std	Y+45, r25	; 0x2d
    1b54:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b58:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <LCD_voidInit+0x28c>
    1b5e:	24 c0       	rjmp	.+72     	; 0x1ba8 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b62:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b64:	88 a9       	ldd	r24, Y+48	; 0x30
    1b66:	99 a9       	ldd	r25, Y+49	; 0x31
    1b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9d a7       	std	Y+45, r25	; 0x2d
    1b72:	8c a7       	std	Y+44, r24	; 0x2c
    1b74:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b76:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b78:	99 a7       	std	Y+41, r25	; 0x29
    1b7a:	88 a7       	std	Y+40, r24	; 0x28
    1b7c:	88 a5       	ldd	r24, Y+40	; 0x28
    1b7e:	99 a5       	ldd	r25, Y+41	; 0x29
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_voidInit+0x2d4>
    1b84:	99 a7       	std	Y+41, r25	; 0x29
    1b86:	88 a7       	std	Y+40, r24	; 0x28
    1b88:	0f c0       	rjmp	.+30     	; 0x1ba8 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b8a:	6f a9       	ldd	r22, Y+55	; 0x37
    1b8c:	78 ad       	ldd	r23, Y+56	; 0x38
    1b8e:	89 ad       	ldd	r24, Y+57	; 0x39
    1b90:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	8e ab       	std	Y+54, r24	; 0x36
    1b9c:	8e a9       	ldd	r24, Y+54	; 0x36
    1b9e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ba0:	8f a1       	ldd	r24, Y+39	; 0x27
    1ba2:	8a 95       	dec	r24
    1ba4:	f1 f7       	brne	.-4      	; 0x1ba2 <LCD_voidInit+0x2f6>
    1ba6:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    1ba8:	8e e0       	ldi	r24, 0x0E	; 14
    1baa:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	a0 e2       	ldi	r26, 0x20	; 32
    1bb4:	b2 e4       	ldi	r27, 0x42	; 66
    1bb6:	8b a3       	std	Y+35, r24	; 0x23
    1bb8:	9c a3       	std	Y+36, r25	; 0x24
    1bba:	ad a3       	std	Y+37, r26	; 0x25
    1bbc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bbe:	6b a1       	ldd	r22, Y+35	; 0x23
    1bc0:	7c a1       	ldd	r23, Y+36	; 0x24
    1bc2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bc4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bc6:	2b ea       	ldi	r18, 0xAB	; 171
    1bc8:	3a ea       	ldi	r19, 0xAA	; 170
    1bca:	4a e2       	ldi	r20, 0x2A	; 42
    1bcc:	50 e4       	ldi	r21, 0x40	; 64
    1bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8f 8f       	std	Y+31, r24	; 0x1f
    1bd8:	98 a3       	std	Y+32, r25	; 0x20
    1bda:	a9 a3       	std	Y+33, r26	; 0x21
    1bdc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bde:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1be0:	78 a1       	ldd	r23, Y+32	; 0x20
    1be2:	89 a1       	ldd	r24, Y+33	; 0x21
    1be4:	9a a1       	ldd	r25, Y+34	; 0x22
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	40 e8       	ldi	r20, 0x80	; 128
    1bec:	5f e3       	ldi	r21, 0x3F	; 63
    1bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf2:	88 23       	and	r24, r24
    1bf4:	1c f4       	brge	.+6      	; 0x1bfc <LCD_voidInit+0x350>
		__ticks = 1;
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	8e 8f       	std	Y+30, r24	; 0x1e
    1bfa:	91 c0       	rjmp	.+290    	; 0x1d1e <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1bfc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bfe:	78 a1       	ldd	r23, Y+32	; 0x20
    1c00:	89 a1       	ldd	r24, Y+33	; 0x21
    1c02:	9a a1       	ldd	r25, Y+34	; 0x22
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	4f e7       	ldi	r20, 0x7F	; 127
    1c0a:	53 e4       	ldi	r21, 0x43	; 67
    1c0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	0c f0       	brlt	.+2      	; 0x1c16 <LCD_voidInit+0x36a>
    1c14:	7b c0       	rjmp	.+246    	; 0x1d0c <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1c16:	6b a1       	ldd	r22, Y+35	; 0x23
    1c18:	7c a1       	ldd	r23, Y+36	; 0x24
    1c1a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c1c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	4a e7       	ldi	r20, 0x7A	; 122
    1c24:	54 e4       	ldi	r21, 0x44	; 68
    1c26:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	8a 8f       	std	Y+26, r24	; 0x1a
    1c30:	9b 8f       	std	Y+27, r25	; 0x1b
    1c32:	ac 8f       	std	Y+28, r26	; 0x1c
    1c34:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c38:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c3a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c3c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a ef       	ldi	r20, 0xFA	; 250
    1c44:	54 e4       	ldi	r21, 0x44	; 68
    1c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	8e 8b       	std	Y+22, r24	; 0x16
    1c50:	9f 8b       	std	Y+23, r25	; 0x17
    1c52:	a8 8f       	std	Y+24, r26	; 0x18
    1c54:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c56:	6e 89       	ldd	r22, Y+22	; 0x16
    1c58:	7f 89       	ldd	r23, Y+23	; 0x17
    1c5a:	88 8d       	ldd	r24, Y+24	; 0x18
    1c5c:	99 8d       	ldd	r25, Y+25	; 0x19
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	9d 8b       	std	Y+21, r25	; 0x15
    1c74:	8c 8b       	std	Y+20, r24	; 0x14
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1c78:	6e 89       	ldd	r22, Y+22	; 0x16
    1c7a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c7c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c7e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c92:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c94:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c96:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	9d 8b       	std	Y+21, r25	; 0x15
    1cb6:	8c 8b       	std	Y+20, r24	; 0x14
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <LCD_voidInit+0x42c>
    1cba:	88 ec       	ldi	r24, 0xC8	; 200
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9b 8b       	std	Y+19, r25	; 0x13
    1cc0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cc2:	8a 89       	ldd	r24, Y+18	; 0x12
    1cc4:	9b 89       	ldd	r25, Y+19	; 0x13
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_voidInit+0x41a>
    1cca:	9b 8b       	std	Y+19, r25	; 0x13
    1ccc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8c 89       	ldd	r24, Y+20	; 0x14
    1cd0:	9d 89       	ldd	r25, Y+21	; 0x15
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	9d 8b       	std	Y+21, r25	; 0x15
    1cd6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cda:	9d 89       	ldd	r25, Y+21	; 0x15
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <LCD_voidInit+0x40e>
    1ce0:	24 c0       	rjmp	.+72     	; 0x1d2a <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	6e 89       	ldd	r22, Y+22	; 0x16
    1ce4:	7f 89       	ldd	r23, Y+23	; 0x17
    1ce6:	88 8d       	ldd	r24, Y+24	; 0x18
    1ce8:	99 8d       	ldd	r25, Y+25	; 0x19
    1cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	9d 8b       	std	Y+21, r25	; 0x15
    1cf4:	8c 8b       	std	Y+20, r24	; 0x14
    1cf6:	8c 89       	ldd	r24, Y+20	; 0x14
    1cf8:	9d 89       	ldd	r25, Y+21	; 0x15
    1cfa:	99 8b       	std	Y+17, r25	; 0x11
    1cfc:	88 8b       	std	Y+16, r24	; 0x10
    1cfe:	88 89       	ldd	r24, Y+16	; 0x10
    1d00:	99 89       	ldd	r25, Y+17	; 0x11
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_voidInit+0x456>
    1d06:	99 8b       	std	Y+17, r25	; 0x11
    1d08:	88 8b       	std	Y+16, r24	; 0x10
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d0c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d0e:	78 a1       	ldd	r23, Y+32	; 0x20
    1d10:	89 a1       	ldd	r24, Y+33	; 0x21
    1d12:	9a a1       	ldd	r25, Y+34	; 0x22
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	8e 8f       	std	Y+30, r24	; 0x1e
    1d1e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d20:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d24:	8a 95       	dec	r24
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_voidInit+0x478>
    1d28:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a0 e0       	ldi	r26, 0x00	; 0
    1d36:	b0 e4       	ldi	r27, 0x40	; 64
    1d38:	8b 87       	std	Y+11, r24	; 0x0b
    1d3a:	9c 87       	std	Y+12, r25	; 0x0c
    1d3c:	ad 87       	std	Y+13, r26	; 0x0d
    1d3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	4a ef       	ldi	r20, 0xFA	; 250
    1d4e:	54 e4       	ldi	r21, 0x44	; 68
    1d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	8f 83       	std	Y+7, r24	; 0x07
    1d5a:	98 87       	std	Y+8, r25	; 0x08
    1d5c:	a9 87       	std	Y+9, r26	; 0x09
    1d5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d60:	6f 81       	ldd	r22, Y+7	; 0x07
    1d62:	78 85       	ldd	r23, Y+8	; 0x08
    1d64:	89 85       	ldd	r24, Y+9	; 0x09
    1d66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	40 e8       	ldi	r20, 0x80	; 128
    1d6e:	5f e3       	ldi	r21, 0x3F	; 63
    1d70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d74:	88 23       	and	r24, r24
    1d76:	2c f4       	brge	.+10     	; 0x1d82 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	3f c0       	rjmp	.+126    	; 0x1e00 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1d82:	6f 81       	ldd	r22, Y+7	; 0x07
    1d84:	78 85       	ldd	r23, Y+8	; 0x08
    1d86:	89 85       	ldd	r24, Y+9	; 0x09
    1d88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	3f ef       	ldi	r19, 0xFF	; 255
    1d8e:	4f e7       	ldi	r20, 0x7F	; 127
    1d90:	57 e4       	ldi	r21, 0x47	; 71
    1d92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d96:	18 16       	cp	r1, r24
    1d98:	4c f5       	brge	.+82     	; 0x1dec <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1da0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	51 e4       	ldi	r21, 0x41	; 65
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	9e 83       	std	Y+6, r25	; 0x06
    1dc0:	8d 83       	std	Y+5, r24	; 0x05
    1dc2:	0f c0       	rjmp	.+30     	; 0x1de2 <LCD_voidInit+0x536>
    1dc4:	88 ec       	ldi	r24, 0xC8	; 200
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	9c 83       	std	Y+4, r25	; 0x04
    1dca:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	f1 f7       	brne	.-4      	; 0x1dd0 <LCD_voidInit+0x524>
    1dd4:	9c 83       	std	Y+4, r25	; 0x04
    1dd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9e 83       	std	Y+6, r25	; 0x06
    1de0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	8d 81       	ldd	r24, Y+5	; 0x05
    1de4:	9e 81       	ldd	r25, Y+6	; 0x06
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	69 f7       	brne	.-38     	; 0x1dc4 <LCD_voidInit+0x518>
    1dea:	14 c0       	rjmp	.+40     	; 0x1e14 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	6f 81       	ldd	r22, Y+7	; 0x07
    1dee:	78 85       	ldd	r23, Y+8	; 0x08
    1df0:	89 85       	ldd	r24, Y+9	; 0x09
    1df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	9e 83       	std	Y+6, r25	; 0x06
    1dfe:	8d 83       	std	Y+5, r24	; 0x05
    1e00:	8d 81       	ldd	r24, Y+5	; 0x05
    1e02:	9e 81       	ldd	r25, Y+6	; 0x06
    1e04:	9a 83       	std	Y+2, r25	; 0x02
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	89 81       	ldd	r24, Y+1	; 0x01
    1e0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e0c:	01 97       	sbiw	r24, 0x01	; 1
    1e0e:	f1 f7       	brne	.-4      	; 0x1e0c <LCD_voidInit+0x560>
    1e10:	9a 83       	std	Y+2, r25	; 0x02
    1e12:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    1e14:	86 e0       	ldi	r24, 0x06	; 6
    1e16:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>


}
    1e1a:	c4 5b       	subi	r28, 0xB4	; 180
    1e1c:	df 4f       	sbci	r29, 0xFF	; 255
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	08 95       	ret

00001e32 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	e1 97       	sbiw	r28, 0x31	; 49
    1e3c:	0f b6       	in	r0, 0x3f	; 63
    1e3e:	f8 94       	cli
    1e40:	de bf       	out	0x3e, r29	; 62
    1e42:	0f be       	out	0x3f, r0	; 63
    1e44:	cd bf       	out	0x3d, r28	; 61
    1e46:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1e52:	82 e0       	ldi	r24, 0x02	; 2
    1e54:	61 e0       	ldi	r22, 0x01	; 1
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1e5c:	83 e0       	ldi	r24, 0x03	; 3
    1e5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e60:	0e 94 94 0b 	call	0x1728	; 0x1728 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 e8       	ldi	r26, 0x80	; 128
    1e74:	bf e3       	ldi	r27, 0x3F	; 63
    1e76:	8d a7       	std	Y+45, r24	; 0x2d
    1e78:	9e a7       	std	Y+46, r25	; 0x2e
    1e7a:	af a7       	std	Y+47, r26	; 0x2f
    1e7c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e80:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e84:	98 a9       	ldd	r25, Y+48	; 0x30
    1e86:	2b ea       	ldi	r18, 0xAB	; 171
    1e88:	3a ea       	ldi	r19, 0xAA	; 170
    1e8a:	4a e2       	ldi	r20, 0x2A	; 42
    1e8c:	50 e4       	ldi	r21, 0x40	; 64
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	89 a7       	std	Y+41, r24	; 0x29
    1e98:	9a a7       	std	Y+42, r25	; 0x2a
    1e9a:	ab a7       	std	Y+43, r26	; 0x2b
    1e9c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e9e:	69 a5       	ldd	r22, Y+41	; 0x29
    1ea0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ea2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ea4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	1c f4       	brge	.+6      	; 0x1ebc <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	88 a7       	std	Y+40, r24	; 0x28
    1eba:	91 c0       	rjmp	.+290    	; 0x1fde <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1ebc:	69 a5       	ldd	r22, Y+41	; 0x29
    1ebe:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ec0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4f e7       	ldi	r20, 0x7F	; 127
    1eca:	53 e4       	ldi	r21, 0x43	; 67
    1ecc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ed0:	18 16       	cp	r1, r24
    1ed2:	0c f0       	brlt	.+2      	; 0x1ed6 <LCD_voidSendCmnd+0xa4>
    1ed4:	7b c0       	rjmp	.+246    	; 0x1fcc <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ed6:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ed8:	7e a5       	ldd	r23, Y+46	; 0x2e
    1eda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1edc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a e7       	ldi	r20, 0x7A	; 122
    1ee4:	54 e4       	ldi	r21, 0x44	; 68
    1ee6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8c a3       	std	Y+36, r24	; 0x24
    1ef0:	9d a3       	std	Y+37, r25	; 0x25
    1ef2:	ae a3       	std	Y+38, r26	; 0x26
    1ef4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	6c a1       	ldd	r22, Y+36	; 0x24
    1ef8:	7d a1       	ldd	r23, Y+37	; 0x25
    1efa:	8e a1       	ldd	r24, Y+38	; 0x26
    1efc:	9f a1       	ldd	r25, Y+39	; 0x27
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4a ef       	ldi	r20, 0xFA	; 250
    1f04:	54 e4       	ldi	r21, 0x44	; 68
    1f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	88 a3       	std	Y+32, r24	; 0x20
    1f10:	99 a3       	std	Y+33, r25	; 0x21
    1f12:	aa a3       	std	Y+34, r26	; 0x22
    1f14:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f16:	68 a1       	ldd	r22, Y+32	; 0x20
    1f18:	79 a1       	ldd	r23, Y+33	; 0x21
    1f1a:	8a a1       	ldd	r24, Y+34	; 0x22
    1f1c:	9b a1       	ldd	r25, Y+35	; 0x23
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9f 8f       	std	Y+31, r25	; 0x1f
    1f34:	8e 8f       	std	Y+30, r24	; 0x1e
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1f38:	68 a1       	ldd	r22, Y+32	; 0x20
    1f3a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f3c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f3e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	6c a1       	ldd	r22, Y+36	; 0x24
    1f52:	7d a1       	ldd	r23, Y+37	; 0x25
    1f54:	8e a1       	ldd	r24, Y+38	; 0x26
    1f56:	9f a1       	ldd	r25, Y+39	; 0x27
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9f 8f       	std	Y+31, r25	; 0x1f
    1f76:	8e 8f       	std	Y+30, r24	; 0x1e
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_voidSendCmnd+0x166>
    1f7a:	88 ec       	ldi	r24, 0xC8	; 200
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	9d 8f       	std	Y+29, r25	; 0x1d
    1f80:	8c 8f       	std	Y+28, r24	; 0x1c
    1f82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_voidSendCmnd+0x154>
    1f8a:	9d 8f       	std	Y+29, r25	; 0x1d
    1f8c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f90:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9f 8f       	std	Y+31, r25	; 0x1f
    1f96:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f9a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_voidSendCmnd+0x148>
    1fa0:	24 c0       	rjmp	.+72     	; 0x1fea <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	68 a1       	ldd	r22, Y+32	; 0x20
    1fa4:	79 a1       	ldd	r23, Y+33	; 0x21
    1fa6:	8a a1       	ldd	r24, Y+34	; 0x22
    1fa8:	9b a1       	ldd	r25, Y+35	; 0x23
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb4:	8e 8f       	std	Y+30, r24	; 0x1e
    1fb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fba:	9b 8f       	std	Y+27, r25	; 0x1b
    1fbc:	8a 8f       	std	Y+26, r24	; 0x1a
    1fbe:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fc0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_voidSendCmnd+0x190>
    1fc6:	9b 8f       	std	Y+27, r25	; 0x1b
    1fc8:	8a 8f       	std	Y+26, r24	; 0x1a
    1fca:	0f c0       	rjmp	.+30     	; 0x1fea <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fcc:	69 a5       	ldd	r22, Y+41	; 0x29
    1fce:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fd0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	88 a7       	std	Y+40, r24	; 0x28
    1fde:	88 a5       	ldd	r24, Y+40	; 0x28
    1fe0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fe2:	89 8d       	ldd	r24, Y+25	; 0x19
    1fe4:	8a 95       	dec	r24
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_voidSendCmnd+0x1b2>
    1fe8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	62 e0       	ldi	r22, 0x02	; 2
    1fee:	40 e0       	ldi	r20, 0x00	; 0
    1ff0:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	a0 e8       	ldi	r26, 0x80	; 128
    1ffa:	bf e3       	ldi	r27, 0x3F	; 63
    1ffc:	8d 8b       	std	Y+21, r24	; 0x15
    1ffe:	9e 8b       	std	Y+22, r25	; 0x16
    2000:	af 8b       	std	Y+23, r26	; 0x17
    2002:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2004:	6d 89       	ldd	r22, Y+21	; 0x15
    2006:	7e 89       	ldd	r23, Y+22	; 0x16
    2008:	8f 89       	ldd	r24, Y+23	; 0x17
    200a:	98 8d       	ldd	r25, Y+24	; 0x18
    200c:	2b ea       	ldi	r18, 0xAB	; 171
    200e:	3a ea       	ldi	r19, 0xAA	; 170
    2010:	4a e2       	ldi	r20, 0x2A	; 42
    2012:	50 e4       	ldi	r21, 0x40	; 64
    2014:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	89 8b       	std	Y+17, r24	; 0x11
    201e:	9a 8b       	std	Y+18, r25	; 0x12
    2020:	ab 8b       	std	Y+19, r26	; 0x13
    2022:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2024:	69 89       	ldd	r22, Y+17	; 0x11
    2026:	7a 89       	ldd	r23, Y+18	; 0x12
    2028:	8b 89       	ldd	r24, Y+19	; 0x13
    202a:	9c 89       	ldd	r25, Y+20	; 0x14
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	5f e3       	ldi	r21, 0x3F	; 63
    2034:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2038:	88 23       	and	r24, r24
    203a:	1c f4       	brge	.+6      	; 0x2042 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	88 8b       	std	Y+16, r24	; 0x10
    2040:	91 c0       	rjmp	.+290    	; 0x2164 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    2042:	69 89       	ldd	r22, Y+17	; 0x11
    2044:	7a 89       	ldd	r23, Y+18	; 0x12
    2046:	8b 89       	ldd	r24, Y+19	; 0x13
    2048:	9c 89       	ldd	r25, Y+20	; 0x14
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4f e7       	ldi	r20, 0x7F	; 127
    2050:	53 e4       	ldi	r21, 0x43	; 67
    2052:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2056:	18 16       	cp	r1, r24
    2058:	0c f0       	brlt	.+2      	; 0x205c <LCD_voidSendCmnd+0x22a>
    205a:	7b c0       	rjmp	.+246    	; 0x2152 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    205c:	6d 89       	ldd	r22, Y+21	; 0x15
    205e:	7e 89       	ldd	r23, Y+22	; 0x16
    2060:	8f 89       	ldd	r24, Y+23	; 0x17
    2062:	98 8d       	ldd	r25, Y+24	; 0x18
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	4a e7       	ldi	r20, 0x7A	; 122
    206a:	54 e4       	ldi	r21, 0x44	; 68
    206c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	8c 87       	std	Y+12, r24	; 0x0c
    2076:	9d 87       	std	Y+13, r25	; 0x0d
    2078:	ae 87       	std	Y+14, r26	; 0x0e
    207a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6c 85       	ldd	r22, Y+12	; 0x0c
    207e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2080:	8e 85       	ldd	r24, Y+14	; 0x0e
    2082:	9f 85       	ldd	r25, Y+15	; 0x0f
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a ef       	ldi	r20, 0xFA	; 250
    208a:	54 e4       	ldi	r21, 0x44	; 68
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	88 87       	std	Y+8, r24	; 0x08
    2096:	99 87       	std	Y+9, r25	; 0x09
    2098:	aa 87       	std	Y+10, r26	; 0x0a
    209a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    209c:	68 85       	ldd	r22, Y+8	; 0x08
    209e:	79 85       	ldd	r23, Y+9	; 0x09
    20a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9f 83       	std	Y+7, r25	; 0x07
    20ba:	8e 83       	std	Y+6, r24	; 0x06
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    20be:	68 85       	ldd	r22, Y+8	; 0x08
    20c0:	79 85       	ldd	r23, Y+9	; 0x09
    20c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    20d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    20da:	8e 85       	ldd	r24, Y+14	; 0x0e
    20dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9f 83       	std	Y+7, r25	; 0x07
    20fc:	8e 83       	std	Y+6, r24	; 0x06
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_voidSendCmnd+0x2ec>
    2100:	88 ec       	ldi	r24, 0xC8	; 200
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9d 83       	std	Y+5, r25	; 0x05
    2106:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2108:	8c 81       	ldd	r24, Y+4	; 0x04
    210a:	9d 81       	ldd	r25, Y+5	; 0x05
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_voidSendCmnd+0x2da>
    2110:	9d 83       	std	Y+5, r25	; 0x05
    2112:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8e 81       	ldd	r24, Y+6	; 0x06
    2116:	9f 81       	ldd	r25, Y+7	; 0x07
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9f 83       	std	Y+7, r25	; 0x07
    211c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8e 81       	ldd	r24, Y+6	; 0x06
    2120:	9f 81       	ldd	r25, Y+7	; 0x07
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_voidSendCmnd+0x2ce>
    2126:	24 c0       	rjmp	.+72     	; 0x2170 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	68 85       	ldd	r22, Y+8	; 0x08
    212a:	79 85       	ldd	r23, Y+9	; 0x09
    212c:	8a 85       	ldd	r24, Y+10	; 0x0a
    212e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9f 83       	std	Y+7, r25	; 0x07
    213a:	8e 83       	std	Y+6, r24	; 0x06
    213c:	8e 81       	ldd	r24, Y+6	; 0x06
    213e:	9f 81       	ldd	r25, Y+7	; 0x07
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_voidSendCmnd+0x316>
    214c:	9b 83       	std	Y+3, r25	; 0x03
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2152:	69 89       	ldd	r22, Y+17	; 0x11
    2154:	7a 89       	ldd	r23, Y+18	; 0x12
    2156:	8b 89       	ldd	r24, Y+19	; 0x13
    2158:	9c 89       	ldd	r25, Y+20	; 0x14
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	88 8b       	std	Y+16, r24	; 0x10
    2164:	88 89       	ldd	r24, Y+16	; 0x10
    2166:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	8a 95       	dec	r24
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_voidSendCmnd+0x338>
    216e:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    2170:	e1 96       	adiw	r28, 0x31	; 49
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
    218a:	e1 97       	sbiw	r28, 0x31	; 49
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	de bf       	out	0x3e, r29	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	cd bf       	out	0x3d, r28	; 61
    2196:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2198:	82 e0       	ldi	r24, 0x02	; 2
    219a:	60 e0       	ldi	r22, 0x00	; 0
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    21a2:	82 e0       	ldi	r24, 0x02	; 2
    21a4:	61 e0       	ldi	r22, 0x01	; 1
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    21ac:	83 e0       	ldi	r24, 0x03	; 3
    21ae:	69 a9       	ldd	r22, Y+49	; 0x31
    21b0:	0e 94 94 0b 	call	0x1728	; 0x1728 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    21b4:	82 e0       	ldi	r24, 0x02	; 2
    21b6:	62 e0       	ldi	r22, 0x02	; 2
    21b8:	41 e0       	ldi	r20, 0x01	; 1
    21ba:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
    21be:	80 e0       	ldi	r24, 0x00	; 0
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	a0 e8       	ldi	r26, 0x80	; 128
    21c4:	bf e3       	ldi	r27, 0x3F	; 63
    21c6:	8d a7       	std	Y+45, r24	; 0x2d
    21c8:	9e a7       	std	Y+46, r25	; 0x2e
    21ca:	af a7       	std	Y+47, r26	; 0x2f
    21cc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    21d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    21d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d4:	98 a9       	ldd	r25, Y+48	; 0x30
    21d6:	2b ea       	ldi	r18, 0xAB	; 171
    21d8:	3a ea       	ldi	r19, 0xAA	; 170
    21da:	4a e2       	ldi	r20, 0x2A	; 42
    21dc:	50 e4       	ldi	r21, 0x40	; 64
    21de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	89 a7       	std	Y+41, r24	; 0x29
    21e8:	9a a7       	std	Y+42, r25	; 0x2a
    21ea:	ab a7       	std	Y+43, r26	; 0x2b
    21ec:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    21ee:	69 a5       	ldd	r22, Y+41	; 0x29
    21f0:	7a a5       	ldd	r23, Y+42	; 0x2a
    21f2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21f4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	40 e8       	ldi	r20, 0x80	; 128
    21fc:	5f e3       	ldi	r21, 0x3F	; 63
    21fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2202:	88 23       	and	r24, r24
    2204:	1c f4       	brge	.+6      	; 0x220c <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	88 a7       	std	Y+40, r24	; 0x28
    220a:	91 c0       	rjmp	.+290    	; 0x232e <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    220c:	69 a5       	ldd	r22, Y+41	; 0x29
    220e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2210:	8b a5       	ldd	r24, Y+43	; 0x2b
    2212:	9c a5       	ldd	r25, Y+44	; 0x2c
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	4f e7       	ldi	r20, 0x7F	; 127
    221a:	53 e4       	ldi	r21, 0x43	; 67
    221c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2220:	18 16       	cp	r1, r24
    2222:	0c f0       	brlt	.+2      	; 0x2226 <LCD_voidSendChar+0xa4>
    2224:	7b c0       	rjmp	.+246    	; 0x231c <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2226:	6d a5       	ldd	r22, Y+45	; 0x2d
    2228:	7e a5       	ldd	r23, Y+46	; 0x2e
    222a:	8f a5       	ldd	r24, Y+47	; 0x2f
    222c:	98 a9       	ldd	r25, Y+48	; 0x30
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	4a e7       	ldi	r20, 0x7A	; 122
    2234:	54 e4       	ldi	r21, 0x44	; 68
    2236:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	8c a3       	std	Y+36, r24	; 0x24
    2240:	9d a3       	std	Y+37, r25	; 0x25
    2242:	ae a3       	std	Y+38, r26	; 0x26
    2244:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	6c a1       	ldd	r22, Y+36	; 0x24
    2248:	7d a1       	ldd	r23, Y+37	; 0x25
    224a:	8e a1       	ldd	r24, Y+38	; 0x26
    224c:	9f a1       	ldd	r25, Y+39	; 0x27
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a ef       	ldi	r20, 0xFA	; 250
    2254:	54 e4       	ldi	r21, 0x44	; 68
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	88 a3       	std	Y+32, r24	; 0x20
    2260:	99 a3       	std	Y+33, r25	; 0x21
    2262:	aa a3       	std	Y+34, r26	; 0x22
    2264:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2266:	68 a1       	ldd	r22, Y+32	; 0x20
    2268:	79 a1       	ldd	r23, Y+33	; 0x21
    226a:	8a a1       	ldd	r24, Y+34	; 0x22
    226c:	9b a1       	ldd	r25, Y+35	; 0x23
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227a:	88 23       	and	r24, r24
    227c:	2c f4       	brge	.+10     	; 0x2288 <LCD_voidSendChar+0x106>
		__ticks = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	9f 8f       	std	Y+31, r25	; 0x1f
    2284:	8e 8f       	std	Y+30, r24	; 0x1e
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2288:	68 a1       	ldd	r22, Y+32	; 0x20
    228a:	79 a1       	ldd	r23, Y+33	; 0x21
    228c:	8a a1       	ldd	r24, Y+34	; 0x22
    228e:	9b a1       	ldd	r25, Y+35	; 0x23
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	3f ef       	ldi	r19, 0xFF	; 255
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	57 e4       	ldi	r21, 0x47	; 71
    2298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229c:	18 16       	cp	r1, r24
    229e:	4c f5       	brge	.+82     	; 0x22f2 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a0:	6c a1       	ldd	r22, Y+36	; 0x24
    22a2:	7d a1       	ldd	r23, Y+37	; 0x25
    22a4:	8e a1       	ldd	r24, Y+38	; 0x26
    22a6:	9f a1       	ldd	r25, Y+39	; 0x27
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	51 e4       	ldi	r21, 0x41	; 65
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9f 8f       	std	Y+31, r25	; 0x1f
    22c6:	8e 8f       	std	Y+30, r24	; 0x1e
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <LCD_voidSendChar+0x166>
    22ca:	88 ec       	ldi	r24, 0xC8	; 200
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9d 8f       	std	Y+29, r25	; 0x1d
    22d0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22d4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <LCD_voidSendChar+0x154>
    22da:	9d 8f       	std	Y+29, r25	; 0x1d
    22dc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22e0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	9f 8f       	std	Y+31, r25	; 0x1f
    22e6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22ea:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	69 f7       	brne	.-38     	; 0x22ca <LCD_voidSendChar+0x148>
    22f0:	24 c0       	rjmp	.+72     	; 0x233a <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f2:	68 a1       	ldd	r22, Y+32	; 0x20
    22f4:	79 a1       	ldd	r23, Y+33	; 0x21
    22f6:	8a a1       	ldd	r24, Y+34	; 0x22
    22f8:	9b a1       	ldd	r25, Y+35	; 0x23
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9f 8f       	std	Y+31, r25	; 0x1f
    2304:	8e 8f       	std	Y+30, r24	; 0x1e
    2306:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2308:	9f 8d       	ldd	r25, Y+31	; 0x1f
    230a:	9b 8f       	std	Y+27, r25	; 0x1b
    230c:	8a 8f       	std	Y+26, r24	; 0x1a
    230e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2310:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <LCD_voidSendChar+0x190>
    2316:	9b 8f       	std	Y+27, r25	; 0x1b
    2318:	8a 8f       	std	Y+26, r24	; 0x1a
    231a:	0f c0       	rjmp	.+30     	; 0x233a <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    231c:	69 a5       	ldd	r22, Y+41	; 0x29
    231e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2320:	8b a5       	ldd	r24, Y+43	; 0x2b
    2322:	9c a5       	ldd	r25, Y+44	; 0x2c
    2324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2328:	dc 01       	movw	r26, r24
    232a:	cb 01       	movw	r24, r22
    232c:	88 a7       	std	Y+40, r24	; 0x28
    232e:	88 a5       	ldd	r24, Y+40	; 0x28
    2330:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2332:	89 8d       	ldd	r24, Y+25	; 0x19
    2334:	8a 95       	dec	r24
    2336:	f1 f7       	brne	.-4      	; 0x2334 <LCD_voidSendChar+0x1b2>
    2338:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    233a:	82 e0       	ldi	r24, 0x02	; 2
    233c:	62 e0       	ldi	r22, 0x02	; 2
    233e:	40 e0       	ldi	r20, 0x00	; 0
    2340:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	a0 e8       	ldi	r26, 0x80	; 128
    234a:	bf e3       	ldi	r27, 0x3F	; 63
    234c:	8d 8b       	std	Y+21, r24	; 0x15
    234e:	9e 8b       	std	Y+22, r25	; 0x16
    2350:	af 8b       	std	Y+23, r26	; 0x17
    2352:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	2b ea       	ldi	r18, 0xAB	; 171
    235e:	3a ea       	ldi	r19, 0xAA	; 170
    2360:	4a e2       	ldi	r20, 0x2A	; 42
    2362:	50 e4       	ldi	r21, 0x40	; 64
    2364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	89 8b       	std	Y+17, r24	; 0x11
    236e:	9a 8b       	std	Y+18, r25	; 0x12
    2370:	ab 8b       	std	Y+19, r26	; 0x13
    2372:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2374:	69 89       	ldd	r22, Y+17	; 0x11
    2376:	7a 89       	ldd	r23, Y+18	; 0x12
    2378:	8b 89       	ldd	r24, Y+19	; 0x13
    237a:	9c 89       	ldd	r25, Y+20	; 0x14
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	40 e8       	ldi	r20, 0x80	; 128
    2382:	5f e3       	ldi	r21, 0x3F	; 63
    2384:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2388:	88 23       	and	r24, r24
    238a:	1c f4       	brge	.+6      	; 0x2392 <LCD_voidSendChar+0x210>
		__ticks = 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	88 8b       	std	Y+16, r24	; 0x10
    2390:	91 c0       	rjmp	.+290    	; 0x24b4 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    2392:	69 89       	ldd	r22, Y+17	; 0x11
    2394:	7a 89       	ldd	r23, Y+18	; 0x12
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4f e7       	ldi	r20, 0x7F	; 127
    23a0:	53 e4       	ldi	r21, 0x43	; 67
    23a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23a6:	18 16       	cp	r1, r24
    23a8:	0c f0       	brlt	.+2      	; 0x23ac <LCD_voidSendChar+0x22a>
    23aa:	7b c0       	rjmp	.+246    	; 0x24a2 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    23ac:	6d 89       	ldd	r22, Y+21	; 0x15
    23ae:	7e 89       	ldd	r23, Y+22	; 0x16
    23b0:	8f 89       	ldd	r24, Y+23	; 0x17
    23b2:	98 8d       	ldd	r25, Y+24	; 0x18
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a e7       	ldi	r20, 0x7A	; 122
    23ba:	54 e4       	ldi	r21, 0x44	; 68
    23bc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8c 87       	std	Y+12, r24	; 0x0c
    23c6:	9d 87       	std	Y+13, r25	; 0x0d
    23c8:	ae 87       	std	Y+14, r26	; 0x0e
    23ca:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    23ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    23d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    23d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	4a ef       	ldi	r20, 0xFA	; 250
    23da:	54 e4       	ldi	r21, 0x44	; 68
    23dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	88 87       	std	Y+8, r24	; 0x08
    23e6:	99 87       	std	Y+9, r25	; 0x09
    23e8:	aa 87       	std	Y+10, r26	; 0x0a
    23ea:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23ec:	68 85       	ldd	r22, Y+8	; 0x08
    23ee:	79 85       	ldd	r23, Y+9	; 0x09
    23f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e8       	ldi	r20, 0x80	; 128
    23fa:	5f e3       	ldi	r21, 0x3F	; 63
    23fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2400:	88 23       	and	r24, r24
    2402:	2c f4       	brge	.+10     	; 0x240e <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9f 83       	std	Y+7, r25	; 0x07
    240a:	8e 83       	std	Y+6, r24	; 0x06
    240c:	3f c0       	rjmp	.+126    	; 0x248c <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    240e:	68 85       	ldd	r22, Y+8	; 0x08
    2410:	79 85       	ldd	r23, Y+9	; 0x09
    2412:	8a 85       	ldd	r24, Y+10	; 0x0a
    2414:	9b 85       	ldd	r25, Y+11	; 0x0b
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	3f ef       	ldi	r19, 0xFF	; 255
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	57 e4       	ldi	r21, 0x47	; 71
    241e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	4c f5       	brge	.+82     	; 0x2478 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2426:	6c 85       	ldd	r22, Y+12	; 0x0c
    2428:	7d 85       	ldd	r23, Y+13	; 0x0d
    242a:	8e 85       	ldd	r24, Y+14	; 0x0e
    242c:	9f 85       	ldd	r25, Y+15	; 0x0f
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	bc 01       	movw	r22, r24
    2440:	cd 01       	movw	r24, r26
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9f 83       	std	Y+7, r25	; 0x07
    244c:	8e 83       	std	Y+6, r24	; 0x06
    244e:	0f c0       	rjmp	.+30     	; 0x246e <LCD_voidSendChar+0x2ec>
    2450:	88 ec       	ldi	r24, 0xC8	; 200
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	9d 83       	std	Y+5, r25	; 0x05
    2456:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2458:	8c 81       	ldd	r24, Y+4	; 0x04
    245a:	9d 81       	ldd	r25, Y+5	; 0x05
    245c:	01 97       	sbiw	r24, 0x01	; 1
    245e:	f1 f7       	brne	.-4      	; 0x245c <LCD_voidSendChar+0x2da>
    2460:	9d 83       	std	Y+5, r25	; 0x05
    2462:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2464:	8e 81       	ldd	r24, Y+6	; 0x06
    2466:	9f 81       	ldd	r25, Y+7	; 0x07
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	9f 83       	std	Y+7, r25	; 0x07
    246c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246e:	8e 81       	ldd	r24, Y+6	; 0x06
    2470:	9f 81       	ldd	r25, Y+7	; 0x07
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	69 f7       	brne	.-38     	; 0x2450 <LCD_voidSendChar+0x2ce>
    2476:	24 c0       	rjmp	.+72     	; 0x24c0 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2478:	68 85       	ldd	r22, Y+8	; 0x08
    247a:	79 85       	ldd	r23, Y+9	; 0x09
    247c:	8a 85       	ldd	r24, Y+10	; 0x0a
    247e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	9f 83       	std	Y+7, r25	; 0x07
    248a:	8e 83       	std	Y+6, r24	; 0x06
    248c:	8e 81       	ldd	r24, Y+6	; 0x06
    248e:	9f 81       	ldd	r25, Y+7	; 0x07
    2490:	9b 83       	std	Y+3, r25	; 0x03
    2492:	8a 83       	std	Y+2, r24	; 0x02
    2494:	8a 81       	ldd	r24, Y+2	; 0x02
    2496:	9b 81       	ldd	r25, Y+3	; 0x03
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	f1 f7       	brne	.-4      	; 0x2498 <LCD_voidSendChar+0x316>
    249c:	9b 83       	std	Y+3, r25	; 0x03
    249e:	8a 83       	std	Y+2, r24	; 0x02
    24a0:	0f c0       	rjmp	.+30     	; 0x24c0 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24a2:	69 89       	ldd	r22, Y+17	; 0x11
    24a4:	7a 89       	ldd	r23, Y+18	; 0x12
    24a6:	8b 89       	ldd	r24, Y+19	; 0x13
    24a8:	9c 89       	ldd	r25, Y+20	; 0x14
    24aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	88 8b       	std	Y+16, r24	; 0x10
    24b4:	88 89       	ldd	r24, Y+16	; 0x10
    24b6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24b8:	89 81       	ldd	r24, Y+1	; 0x01
    24ba:	8a 95       	dec	r24
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <LCD_voidSendChar+0x338>
    24be:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    24c0:	e1 96       	adiw	r28, 0x31	; 49
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <LCD_voidWriteString+0x6>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	0a c0       	rjmp	.+20     	; 0x24f6 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    24e2:	e9 81       	ldd	r30, Y+1	; 0x01
    24e4:	fa 81       	ldd	r31, Y+2	; 0x02
    24e6:	80 81       	ld	r24, Z
    24e8:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	01 96       	adiw	r24, 0x01	; 1
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    24f6:	e9 81       	ldd	r30, Y+1	; 0x01
    24f8:	fa 81       	ldd	r31, Y+2	; 0x02
    24fa:	80 81       	ld	r24, Z
    24fc:	88 23       	and	r24, r24
    24fe:	89 f7       	brne	.-30     	; 0x24e2 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	cf 91       	pop	r28
    2506:	df 91       	pop	r29
    2508:	08 95       	ret

0000250a <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    250a:	0f 93       	push	r16
    250c:	1f 93       	push	r17
    250e:	df 93       	push	r29
    2510:	cf 93       	push	r28
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	65 97       	sbiw	r28, 0x15	; 21
    2518:	0f b6       	in	r0, 0x3f	; 63
    251a:	f8 94       	cli
    251c:	de bf       	out	0x3e, r29	; 62
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	cd bf       	out	0x3d, r28	; 61
    2522:	6a 8b       	std	Y+18, r22	; 0x12
    2524:	7b 8b       	std	Y+19, r23	; 0x13
    2526:	8c 8b       	std	Y+20, r24	; 0x14
    2528:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    252e:	8a 89       	ldd	r24, Y+18	; 0x12
    2530:	9b 89       	ldd	r25, Y+19	; 0x13
    2532:	ac 89       	ldd	r26, Y+20	; 0x14
    2534:	bd 89       	ldd	r27, Y+21	; 0x15
    2536:	00 97       	sbiw	r24, 0x00	; 0
    2538:	a1 05       	cpc	r26, r1
    253a:	b1 05       	cpc	r27, r1
    253c:	99 f5       	brne	.+102    	; 0x25a4 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    253e:	80 e3       	ldi	r24, 0x30	; 48
    2540:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    2544:	4e c0       	rjmp	.+156    	; 0x25e2 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2546:	8a 81       	ldd	r24, Y+2	; 0x02
    2548:	8f 5f       	subi	r24, 0xFF	; 255
    254a:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	08 2f       	mov	r16, r24
    2550:	11 27       	eor	r17, r17
    2552:	07 fd       	sbrc	r16, 7
    2554:	10 95       	com	r17
    2556:	8a 89       	ldd	r24, Y+18	; 0x12
    2558:	9b 89       	ldd	r25, Y+19	; 0x13
    255a:	ac 89       	ldd	r26, Y+20	; 0x14
    255c:	bd 89       	ldd	r27, Y+21	; 0x15
    255e:	2a e0       	ldi	r18, 0x0A	; 10
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__udivmodsi4>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	28 2f       	mov	r18, r24
    2574:	ce 01       	movw	r24, r28
    2576:	03 96       	adiw	r24, 0x03	; 3
    2578:	fc 01       	movw	r30, r24
    257a:	e0 0f       	add	r30, r16
    257c:	f1 1f       	adc	r31, r17
    257e:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    2580:	8a 89       	ldd	r24, Y+18	; 0x12
    2582:	9b 89       	ldd	r25, Y+19	; 0x13
    2584:	ac 89       	ldd	r26, Y+20	; 0x14
    2586:	bd 89       	ldd	r27, Y+21	; 0x15
    2588:	2a e0       	ldi	r18, 0x0A	; 10
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	bc 01       	movw	r22, r24
    2592:	cd 01       	movw	r24, r26
    2594:	0e 94 6e 23 	call	0x46dc	; 0x46dc <__udivmodsi4>
    2598:	da 01       	movw	r26, r20
    259a:	c9 01       	movw	r24, r18
    259c:	8a 8b       	std	Y+18, r24	; 0x12
    259e:	9b 8b       	std	Y+19, r25	; 0x13
    25a0:	ac 8b       	std	Y+20, r26	; 0x14
    25a2:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    25a4:	8a 89       	ldd	r24, Y+18	; 0x12
    25a6:	9b 89       	ldd	r25, Y+19	; 0x13
    25a8:	ac 89       	ldd	r26, Y+20	; 0x14
    25aa:	bd 89       	ldd	r27, Y+21	; 0x15
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	a1 05       	cpc	r26, r1
    25b0:	b1 05       	cpc	r27, r1
    25b2:	49 f6       	brne	.-110    	; 0x2546 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    25b4:	8a 81       	ldd	r24, Y+2	; 0x02
    25b6:	89 83       	std	Y+1, r24	; 0x01
    25b8:	11 c0       	rjmp	.+34     	; 0x25dc <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	28 2f       	mov	r18, r24
    25be:	33 27       	eor	r19, r19
    25c0:	27 fd       	sbrc	r18, 7
    25c2:	30 95       	com	r19
    25c4:	ce 01       	movw	r24, r28
    25c6:	03 96       	adiw	r24, 0x03	; 3
    25c8:	fc 01       	movw	r30, r24
    25ca:	e2 0f       	add	r30, r18
    25cc:	f3 1f       	adc	r31, r19
    25ce:	80 81       	ld	r24, Z
    25d0:	80 5d       	subi	r24, 0xD0	; 208
    25d2:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	81 50       	subi	r24, 0x01	; 1
    25da:	89 83       	std	Y+1, r24	; 0x01
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	88 23       	and	r24, r24
    25e0:	64 f7       	brge	.-40     	; 0x25ba <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    25e2:	65 96       	adiw	r28, 0x15	; 21
    25e4:	0f b6       	in	r0, 0x3f	; 63
    25e6:	f8 94       	cli
    25e8:	de bf       	out	0x3e, r29	; 62
    25ea:	0f be       	out	0x3f, r0	; 63
    25ec:	cd bf       	out	0x3d, r28	; 61
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	1f 91       	pop	r17
    25f4:	0f 91       	pop	r16
    25f6:	08 95       	ret

000025f8 <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <LCD_u8GoToXY+0x6>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <LCD_u8GoToXY+0x8>
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	8a 83       	std	Y+2, r24	; 0x02
    2608:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    260a:	81 e0       	ldi	r24, 0x01	; 1
    260c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	88 32       	cpi	r24, 0x28	; 40
    2612:	d8 f4       	brcc	.+54     	; 0x264a <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	28 2f       	mov	r18, r24
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	3d 83       	std	Y+5, r19	; 0x05
    261c:	2c 83       	std	Y+4, r18	; 0x04
    261e:	8c 81       	ldd	r24, Y+4	; 0x04
    2620:	9d 81       	ldd	r25, Y+5	; 0x05
    2622:	81 30       	cpi	r24, 0x01	; 1
    2624:	91 05       	cpc	r25, r1
    2626:	31 f0       	breq	.+12     	; 0x2634 <LCD_u8GoToXY+0x3c>
    2628:	2c 81       	ldd	r18, Y+4	; 0x04
    262a:	3d 81       	ldd	r19, Y+5	; 0x05
    262c:	22 30       	cpi	r18, 0x02	; 2
    262e:	31 05       	cpc	r19, r1
    2630:	31 f0       	breq	.+12     	; 0x263e <LCD_u8GoToXY+0x46>
    2632:	0a c0       	rjmp	.+20     	; 0x2648 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	80 58       	subi	r24, 0x80	; 128
    2638:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
    263c:	06 c0       	rjmp	.+12     	; 0x264a <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    263e:	8b 81       	ldd	r24, Y+3	; 0x03
    2640:	80 54       	subi	r24, 0x40	; 64
    2642:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
    2646:	01 c0       	rjmp	.+2      	; 0x264a <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2648:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    264a:	89 81       	ldd	r24, Y+1	; 0x01
}
    264c:	0f 90       	pop	r0
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
}
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	2a 97       	sbiw	r28, 0x0a	; 10
    267a:	0f b6       	in	r0, 0x3f	; 63
    267c:	f8 94       	cli
    267e:	de bf       	out	0x3e, r29	; 62
    2680:	0f be       	out	0x3f, r0	; 63
    2682:	cd bf       	out	0x3d, r28	; 61
    2684:	8c 83       	std	Y+4, r24	; 0x04
    2686:	7e 83       	std	Y+6, r23	; 0x06
    2688:	6d 83       	std	Y+5, r22	; 0x05
    268a:	4f 83       	std	Y+7, r20	; 0x07
    268c:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    2692:	88 e0       	ldi	r24, 0x08	; 8
    2694:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    2696:	8c 81       	ldd	r24, Y+4	; 0x04
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	3a 87       	std	Y+10, r19	; 0x0a
    269e:	29 87       	std	Y+9, r18	; 0x09
    26a0:	89 85       	ldd	r24, Y+9	; 0x09
    26a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a4:	83 30       	cpi	r24, 0x03	; 3
    26a6:	91 05       	cpc	r25, r1
    26a8:	09 f4       	brne	.+2      	; 0x26ac <LCD_voidWriteSpecialChar+0x3c>
    26aa:	8c c0       	rjmp	.+280    	; 0x27c4 <LCD_voidWriteSpecialChar+0x154>
    26ac:	29 85       	ldd	r18, Y+9	; 0x09
    26ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    26b0:	24 30       	cpi	r18, 0x04	; 4
    26b2:	31 05       	cpc	r19, r1
    26b4:	8c f4       	brge	.+34     	; 0x26d8 <LCD_voidWriteSpecialChar+0x68>
    26b6:	89 85       	ldd	r24, Y+9	; 0x09
    26b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	91 05       	cpc	r25, r1
    26be:	09 f4       	brne	.+2      	; 0x26c2 <LCD_voidWriteSpecialChar+0x52>
    26c0:	43 c0       	rjmp	.+134    	; 0x2748 <LCD_voidWriteSpecialChar+0xd8>
    26c2:	29 85       	ldd	r18, Y+9	; 0x09
    26c4:	3a 85       	ldd	r19, Y+10	; 0x0a
    26c6:	22 30       	cpi	r18, 0x02	; 2
    26c8:	31 05       	cpc	r19, r1
    26ca:	0c f0       	brlt	.+2      	; 0x26ce <LCD_voidWriteSpecialChar+0x5e>
    26cc:	5c c0       	rjmp	.+184    	; 0x2786 <LCD_voidWriteSpecialChar+0x116>
    26ce:	89 85       	ldd	r24, Y+9	; 0x09
    26d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	d1 f0       	breq	.+52     	; 0x270a <LCD_voidWriteSpecialChar+0x9a>
    26d6:	11 c1       	rjmp	.+546    	; 0x28fa <LCD_voidWriteSpecialChar+0x28a>
    26d8:	29 85       	ldd	r18, Y+9	; 0x09
    26da:	3a 85       	ldd	r19, Y+10	; 0x0a
    26dc:	25 30       	cpi	r18, 0x05	; 5
    26de:	31 05       	cpc	r19, r1
    26e0:	09 f4       	brne	.+2      	; 0x26e4 <LCD_voidWriteSpecialChar+0x74>
    26e2:	ae c0       	rjmp	.+348    	; 0x2840 <LCD_voidWriteSpecialChar+0x1d0>
    26e4:	89 85       	ldd	r24, Y+9	; 0x09
    26e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e8:	85 30       	cpi	r24, 0x05	; 5
    26ea:	91 05       	cpc	r25, r1
    26ec:	0c f4       	brge	.+2      	; 0x26f0 <LCD_voidWriteSpecialChar+0x80>
    26ee:	89 c0       	rjmp	.+274    	; 0x2802 <LCD_voidWriteSpecialChar+0x192>
    26f0:	29 85       	ldd	r18, Y+9	; 0x09
    26f2:	3a 85       	ldd	r19, Y+10	; 0x0a
    26f4:	26 30       	cpi	r18, 0x06	; 6
    26f6:	31 05       	cpc	r19, r1
    26f8:	09 f4       	brne	.+2      	; 0x26fc <LCD_voidWriteSpecialChar+0x8c>
    26fa:	c1 c0       	rjmp	.+386    	; 0x287e <LCD_voidWriteSpecialChar+0x20e>
    26fc:	89 85       	ldd	r24, Y+9	; 0x09
    26fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2700:	87 30       	cpi	r24, 0x07	; 7
    2702:	91 05       	cpc	r25, r1
    2704:	09 f4       	brne	.+2      	; 0x2708 <LCD_voidWriteSpecialChar+0x98>
    2706:	da c0       	rjmp	.+436    	; 0x28bc <LCD_voidWriteSpecialChar+0x24c>
    2708:	f8 c0       	rjmp	.+496    	; 0x28fa <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    270a:	80 e4       	ldi	r24, 0x40	; 64
    270c:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2710:	19 82       	std	Y+1, r1	; 0x01
    2712:	0e c0       	rjmp	.+28     	; 0x2730 <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	fc 01       	movw	r30, r24
    2720:	e2 0f       	add	r30, r18
    2722:	f3 1f       	adc	r31, r19
    2724:	80 81       	ld	r24, Z
    2726:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	8f 5f       	subi	r24, 0xFF	; 255
    272e:	89 83       	std	Y+1, r24	; 0x01
    2730:	99 81       	ldd	r25, Y+1	; 0x01
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	98 17       	cp	r25, r24
    2736:	70 f3       	brcs	.-36     	; 0x2714 <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2738:	8f 81       	ldd	r24, Y+7	; 0x07
    273a:	68 85       	ldd	r22, Y+8	; 0x08
    273c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2740:	8c 81       	ldd	r24, Y+4	; 0x04
    2742:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    2746:	da c0       	rjmp	.+436    	; 0x28fc <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2748:	88 e4       	ldi	r24, 0x48	; 72
    274a:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    274e:	19 82       	std	Y+1, r1	; 0x01
    2750:	0e c0       	rjmp	.+28     	; 0x276e <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8d 81       	ldd	r24, Y+5	; 0x05
    275a:	9e 81       	ldd	r25, Y+6	; 0x06
    275c:	fc 01       	movw	r30, r24
    275e:	e2 0f       	add	r30, r18
    2760:	f3 1f       	adc	r31, r19
    2762:	80 81       	ld	r24, Z
    2764:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	99 81       	ldd	r25, Y+1	; 0x01
    2770:	8a 81       	ldd	r24, Y+2	; 0x02
    2772:	98 17       	cp	r25, r24
    2774:	70 f3       	brcs	.-36     	; 0x2752 <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2776:	8f 81       	ldd	r24, Y+7	; 0x07
    2778:	68 85       	ldd	r22, Y+8	; 0x08
    277a:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    277e:	8c 81       	ldd	r24, Y+4	; 0x04
    2780:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    2784:	bb c0       	rjmp	.+374    	; 0x28fc <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    2786:	80 e5       	ldi	r24, 0x50	; 80
    2788:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    278c:	19 82       	std	Y+1, r1	; 0x01
    278e:	0e c0       	rjmp	.+28     	; 0x27ac <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	28 2f       	mov	r18, r24
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	fc 01       	movw	r30, r24
    279c:	e2 0f       	add	r30, r18
    279e:	f3 1f       	adc	r31, r19
    27a0:	80 81       	ld	r24, Z
    27a2:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	8f 5f       	subi	r24, 0xFF	; 255
    27aa:	89 83       	std	Y+1, r24	; 0x01
    27ac:	99 81       	ldd	r25, Y+1	; 0x01
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	98 17       	cp	r25, r24
    27b2:	70 f3       	brcs	.-36     	; 0x2790 <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    27b4:	8f 81       	ldd	r24, Y+7	; 0x07
    27b6:	68 85       	ldd	r22, Y+8	; 0x08
    27b8:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    27bc:	8c 81       	ldd	r24, Y+4	; 0x04
    27be:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    27c2:	9c c0       	rjmp	.+312    	; 0x28fc <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    27c4:	88 e5       	ldi	r24, 0x58	; 88
    27c6:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    27ca:	19 82       	std	Y+1, r1	; 0x01
    27cc:	0e c0       	rjmp	.+28     	; 0x27ea <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	28 2f       	mov	r18, r24
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	8d 81       	ldd	r24, Y+5	; 0x05
    27d6:	9e 81       	ldd	r25, Y+6	; 0x06
    27d8:	fc 01       	movw	r30, r24
    27da:	e2 0f       	add	r30, r18
    27dc:	f3 1f       	adc	r31, r19
    27de:	80 81       	ld	r24, Z
    27e0:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	8f 5f       	subi	r24, 0xFF	; 255
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	99 81       	ldd	r25, Y+1	; 0x01
    27ec:	8a 81       	ldd	r24, Y+2	; 0x02
    27ee:	98 17       	cp	r25, r24
    27f0:	70 f3       	brcs	.-36     	; 0x27ce <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    27f2:	8f 81       	ldd	r24, Y+7	; 0x07
    27f4:	68 85       	ldd	r22, Y+8	; 0x08
    27f6:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    27fa:	8c 81       	ldd	r24, Y+4	; 0x04
    27fc:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    2800:	7d c0       	rjmp	.+250    	; 0x28fc <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    2802:	80 e6       	ldi	r24, 0x60	; 96
    2804:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2808:	19 82       	std	Y+1, r1	; 0x01
    280a:	0e c0       	rjmp	.+28     	; 0x2828 <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	28 2f       	mov	r18, r24
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	8d 81       	ldd	r24, Y+5	; 0x05
    2814:	9e 81       	ldd	r25, Y+6	; 0x06
    2816:	fc 01       	movw	r30, r24
    2818:	e2 0f       	add	r30, r18
    281a:	f3 1f       	adc	r31, r19
    281c:	80 81       	ld	r24, Z
    281e:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	8f 5f       	subi	r24, 0xFF	; 255
    2826:	89 83       	std	Y+1, r24	; 0x01
    2828:	99 81       	ldd	r25, Y+1	; 0x01
    282a:	8a 81       	ldd	r24, Y+2	; 0x02
    282c:	98 17       	cp	r25, r24
    282e:	70 f3       	brcs	.-36     	; 0x280c <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2830:	8f 81       	ldd	r24, Y+7	; 0x07
    2832:	68 85       	ldd	r22, Y+8	; 0x08
    2834:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2838:	8c 81       	ldd	r24, Y+4	; 0x04
    283a:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    283e:	5e c0       	rjmp	.+188    	; 0x28fc <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    2840:	88 e6       	ldi	r24, 0x68	; 104
    2842:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2846:	19 82       	std	Y+1, r1	; 0x01
    2848:	0e c0       	rjmp	.+28     	; 0x2866 <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	28 2f       	mov	r18, r24
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	8d 81       	ldd	r24, Y+5	; 0x05
    2852:	9e 81       	ldd	r25, Y+6	; 0x06
    2854:	fc 01       	movw	r30, r24
    2856:	e2 0f       	add	r30, r18
    2858:	f3 1f       	adc	r31, r19
    285a:	80 81       	ld	r24, Z
    285c:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	8f 5f       	subi	r24, 0xFF	; 255
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	99 81       	ldd	r25, Y+1	; 0x01
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	98 17       	cp	r25, r24
    286c:	70 f3       	brcs	.-36     	; 0x284a <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    286e:	8f 81       	ldd	r24, Y+7	; 0x07
    2870:	68 85       	ldd	r22, Y+8	; 0x08
    2872:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2876:	8c 81       	ldd	r24, Y+4	; 0x04
    2878:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    287c:	3f c0       	rjmp	.+126    	; 0x28fc <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    287e:	80 e7       	ldi	r24, 0x70	; 112
    2880:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2884:	19 82       	std	Y+1, r1	; 0x01
    2886:	0e c0       	rjmp	.+28     	; 0x28a4 <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	8d 81       	ldd	r24, Y+5	; 0x05
    2890:	9e 81       	ldd	r25, Y+6	; 0x06
    2892:	fc 01       	movw	r30, r24
    2894:	e2 0f       	add	r30, r18
    2896:	f3 1f       	adc	r31, r19
    2898:	80 81       	ld	r24, Z
    289a:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	8f 5f       	subi	r24, 0xFF	; 255
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	99 81       	ldd	r25, Y+1	; 0x01
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	98 17       	cp	r25, r24
    28aa:	70 f3       	brcs	.-36     	; 0x2888 <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    28ac:	8f 81       	ldd	r24, Y+7	; 0x07
    28ae:	68 85       	ldd	r22, Y+8	; 0x08
    28b0:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    28b4:	8c 81       	ldd	r24, Y+4	; 0x04
    28b6:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    28ba:	20 c0       	rjmp	.+64     	; 0x28fc <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    28bc:	88 e7       	ldi	r24, 0x78	; 120
    28be:	0e 94 19 0f 	call	0x1e32	; 0x1e32 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    28c2:	19 82       	std	Y+1, r1	; 0x01
    28c4:	0e c0       	rjmp	.+28     	; 0x28e2 <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	28 2f       	mov	r18, r24
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	fc 01       	movw	r30, r24
    28d2:	e2 0f       	add	r30, r18
    28d4:	f3 1f       	adc	r31, r19
    28d6:	80 81       	ld	r24, Z
    28d8:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	8f 5f       	subi	r24, 0xFF	; 255
    28e0:	89 83       	std	Y+1, r24	; 0x01
    28e2:	99 81       	ldd	r25, Y+1	; 0x01
    28e4:	8a 81       	ldd	r24, Y+2	; 0x02
    28e6:	98 17       	cp	r25, r24
    28e8:	70 f3       	brcs	.-36     	; 0x28c6 <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    28ea:	8f 81       	ldd	r24, Y+7	; 0x07
    28ec:	68 85       	ldd	r22, Y+8	; 0x08
    28ee:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	0e 94 c1 10 	call	0x2182	; 0x2182 <LCD_voidSendChar>
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    28fa:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    28fc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    28fe:	2a 96       	adiw	r28, 0x0a	; 10
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	cf 91       	pop	r28
    290c:	df 91       	pop	r29
    290e:	08 95       	ret

00002910 <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    2910:	df 93       	push	r29
    2912:	cf 93       	push	r28
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	e1 97       	sbiw	r28, 0x31	; 49
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	61 e0       	ldi	r22, 0x01	; 1
    2934:	40 e0       	ldi	r20, 0x00	; 0
    2936:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    293a:	89 a9       	ldd	r24, Y+49	; 0x31
    293c:	98 2f       	mov	r25, r24
    293e:	92 95       	swap	r25
    2940:	90 7f       	andi	r25, 0xF0	; 240
    2942:	83 e0       	ldi	r24, 0x03	; 3
    2944:	69 2f       	mov	r22, r25
    2946:	0e 94 94 0b 	call	0x1728	; 0x1728 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    294a:	82 e0       	ldi	r24, 0x02	; 2
    294c:	62 e0       	ldi	r22, 0x02	; 2
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	a0 e8       	ldi	r26, 0x80	; 128
    295a:	bf e3       	ldi	r27, 0x3F	; 63
    295c:	8d a7       	std	Y+45, r24	; 0x2d
    295e:	9e a7       	std	Y+46, r25	; 0x2e
    2960:	af a7       	std	Y+47, r26	; 0x2f
    2962:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2964:	6d a5       	ldd	r22, Y+45	; 0x2d
    2966:	7e a5       	ldd	r23, Y+46	; 0x2e
    2968:	8f a5       	ldd	r24, Y+47	; 0x2f
    296a:	98 a9       	ldd	r25, Y+48	; 0x30
    296c:	2b ea       	ldi	r18, 0xAB	; 171
    296e:	3a ea       	ldi	r19, 0xAA	; 170
    2970:	4a e2       	ldi	r20, 0x2A	; 42
    2972:	50 e4       	ldi	r21, 0x40	; 64
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	89 a7       	std	Y+41, r24	; 0x29
    297e:	9a a7       	std	Y+42, r25	; 0x2a
    2980:	ab a7       	std	Y+43, r26	; 0x2b
    2982:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2984:	69 a5       	ldd	r22, Y+41	; 0x29
    2986:	7a a5       	ldd	r23, Y+42	; 0x2a
    2988:	8b a5       	ldd	r24, Y+43	; 0x2b
    298a:	9c a5       	ldd	r25, Y+44	; 0x2c
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	30 e0       	ldi	r19, 0x00	; 0
    2990:	40 e8       	ldi	r20, 0x80	; 128
    2992:	5f e3       	ldi	r21, 0x3F	; 63
    2994:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2998:	88 23       	and	r24, r24
    299a:	1c f4       	brge	.+6      	; 0x29a2 <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	88 a7       	std	Y+40, r24	; 0x28
    29a0:	91 c0       	rjmp	.+290    	; 0x2ac4 <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    29a2:	69 a5       	ldd	r22, Y+41	; 0x29
    29a4:	7a a5       	ldd	r23, Y+42	; 0x2a
    29a6:	8b a5       	ldd	r24, Y+43	; 0x2b
    29a8:	9c a5       	ldd	r25, Y+44	; 0x2c
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	4f e7       	ldi	r20, 0x7F	; 127
    29b0:	53 e4       	ldi	r21, 0x43	; 67
    29b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29b6:	18 16       	cp	r1, r24
    29b8:	0c f0       	brlt	.+2      	; 0x29bc <LCD_voidSendHalfCmnd+0xac>
    29ba:	7b c0       	rjmp	.+246    	; 0x2ab2 <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    29bc:	6d a5       	ldd	r22, Y+45	; 0x2d
    29be:	7e a5       	ldd	r23, Y+46	; 0x2e
    29c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c2:	98 a9       	ldd	r25, Y+48	; 0x30
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	4a e7       	ldi	r20, 0x7A	; 122
    29ca:	54 e4       	ldi	r21, 0x44	; 68
    29cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29d0:	dc 01       	movw	r26, r24
    29d2:	cb 01       	movw	r24, r22
    29d4:	8c a3       	std	Y+36, r24	; 0x24
    29d6:	9d a3       	std	Y+37, r25	; 0x25
    29d8:	ae a3       	std	Y+38, r26	; 0x26
    29da:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29dc:	6c a1       	ldd	r22, Y+36	; 0x24
    29de:	7d a1       	ldd	r23, Y+37	; 0x25
    29e0:	8e a1       	ldd	r24, Y+38	; 0x26
    29e2:	9f a1       	ldd	r25, Y+39	; 0x27
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4a ef       	ldi	r20, 0xFA	; 250
    29ea:	54 e4       	ldi	r21, 0x44	; 68
    29ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	88 a3       	std	Y+32, r24	; 0x20
    29f6:	99 a3       	std	Y+33, r25	; 0x21
    29f8:	aa a3       	std	Y+34, r26	; 0x22
    29fa:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29fc:	68 a1       	ldd	r22, Y+32	; 0x20
    29fe:	79 a1       	ldd	r23, Y+33	; 0x21
    2a00:	8a a1       	ldd	r24, Y+34	; 0x22
    2a02:	9b a1       	ldd	r25, Y+35	; 0x23
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e8       	ldi	r20, 0x80	; 128
    2a0a:	5f e3       	ldi	r21, 0x3F	; 63
    2a0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a10:	88 23       	and	r24, r24
    2a12:	2c f4       	brge	.+10     	; 0x2a1e <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	9f 8f       	std	Y+31, r25	; 0x1f
    2a1a:	8e 8f       	std	Y+30, r24	; 0x1e
    2a1c:	3f c0       	rjmp	.+126    	; 0x2a9c <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    2a1e:	68 a1       	ldd	r22, Y+32	; 0x20
    2a20:	79 a1       	ldd	r23, Y+33	; 0x21
    2a22:	8a a1       	ldd	r24, Y+34	; 0x22
    2a24:	9b a1       	ldd	r25, Y+35	; 0x23
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	3f ef       	ldi	r19, 0xFF	; 255
    2a2a:	4f e7       	ldi	r20, 0x7F	; 127
    2a2c:	57 e4       	ldi	r21, 0x47	; 71
    2a2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a32:	18 16       	cp	r1, r24
    2a34:	4c f5       	brge	.+82     	; 0x2a88 <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a36:	6c a1       	ldd	r22, Y+36	; 0x24
    2a38:	7d a1       	ldd	r23, Y+37	; 0x25
    2a3a:	8e a1       	ldd	r24, Y+38	; 0x26
    2a3c:	9f a1       	ldd	r25, Y+39	; 0x27
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e2       	ldi	r20, 0x20	; 32
    2a44:	51 e4       	ldi	r21, 0x41	; 65
    2a46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4a:	dc 01       	movw	r26, r24
    2a4c:	cb 01       	movw	r24, r22
    2a4e:	bc 01       	movw	r22, r24
    2a50:	cd 01       	movw	r24, r26
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a5c:	8e 8f       	std	Y+30, r24	; 0x1e
    2a5e:	0f c0       	rjmp	.+30     	; 0x2a7e <LCD_voidSendHalfCmnd+0x16e>
    2a60:	88 ec       	ldi	r24, 0xC8	; 200
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9d 8f       	std	Y+29, r25	; 0x1d
    2a66:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a68:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a6a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a6c:	01 97       	sbiw	r24, 0x01	; 1
    2a6e:	f1 f7       	brne	.-4      	; 0x2a6c <LCD_voidSendHalfCmnd+0x15c>
    2a70:	9d 8f       	std	Y+29, r25	; 0x1d
    2a72:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a74:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a76:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a78:	01 97       	sbiw	r24, 0x01	; 1
    2a7a:	9f 8f       	std	Y+31, r25	; 0x1f
    2a7c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a7e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a80:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a82:	00 97       	sbiw	r24, 0x00	; 0
    2a84:	69 f7       	brne	.-38     	; 0x2a60 <LCD_voidSendHalfCmnd+0x150>
    2a86:	24 c0       	rjmp	.+72     	; 0x2ad0 <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a88:	68 a1       	ldd	r22, Y+32	; 0x20
    2a8a:	79 a1       	ldd	r23, Y+33	; 0x21
    2a8c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a8e:	9b a1       	ldd	r25, Y+35	; 0x23
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	9f 8f       	std	Y+31, r25	; 0x1f
    2a9a:	8e 8f       	std	Y+30, r24	; 0x1e
    2a9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aa0:	9b 8f       	std	Y+27, r25	; 0x1b
    2aa2:	8a 8f       	std	Y+26, r24	; 0x1a
    2aa4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aa6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2aa8:	01 97       	sbiw	r24, 0x01	; 1
    2aaa:	f1 f7       	brne	.-4      	; 0x2aa8 <LCD_voidSendHalfCmnd+0x198>
    2aac:	9b 8f       	std	Y+27, r25	; 0x1b
    2aae:	8a 8f       	std	Y+26, r24	; 0x1a
    2ab0:	0f c0       	rjmp	.+30     	; 0x2ad0 <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ab2:	69 a5       	ldd	r22, Y+41	; 0x29
    2ab4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ab6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ab8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	88 a7       	std	Y+40, r24	; 0x28
    2ac4:	88 a5       	ldd	r24, Y+40	; 0x28
    2ac6:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ac8:	89 8d       	ldd	r24, Y+25	; 0x19
    2aca:	8a 95       	dec	r24
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <LCD_voidSendHalfCmnd+0x1ba>
    2ace:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2ad0:	82 e0       	ldi	r24, 0x02	; 2
    2ad2:	62 e0       	ldi	r22, 0x02	; 2
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	0e 94 08 09 	call	0x1210	; 0x1210 <DIO_u8SetPinValue>
    2ada:	80 e0       	ldi	r24, 0x00	; 0
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	a0 e8       	ldi	r26, 0x80	; 128
    2ae0:	bf e3       	ldi	r27, 0x3F	; 63
    2ae2:	8d 8b       	std	Y+21, r24	; 0x15
    2ae4:	9e 8b       	std	Y+22, r25	; 0x16
    2ae6:	af 8b       	std	Y+23, r26	; 0x17
    2ae8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aea:	6d 89       	ldd	r22, Y+21	; 0x15
    2aec:	7e 89       	ldd	r23, Y+22	; 0x16
    2aee:	8f 89       	ldd	r24, Y+23	; 0x17
    2af0:	98 8d       	ldd	r25, Y+24	; 0x18
    2af2:	2b ea       	ldi	r18, 0xAB	; 171
    2af4:	3a ea       	ldi	r19, 0xAA	; 170
    2af6:	4a e2       	ldi	r20, 0x2A	; 42
    2af8:	50 e4       	ldi	r21, 0x40	; 64
    2afa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afe:	dc 01       	movw	r26, r24
    2b00:	cb 01       	movw	r24, r22
    2b02:	89 8b       	std	Y+17, r24	; 0x11
    2b04:	9a 8b       	std	Y+18, r25	; 0x12
    2b06:	ab 8b       	std	Y+19, r26	; 0x13
    2b08:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b0a:	69 89       	ldd	r22, Y+17	; 0x11
    2b0c:	7a 89       	ldd	r23, Y+18	; 0x12
    2b0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b10:	9c 89       	ldd	r25, Y+20	; 0x14
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e8       	ldi	r20, 0x80	; 128
    2b18:	5f e3       	ldi	r21, 0x3F	; 63
    2b1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b1e:	88 23       	and	r24, r24
    2b20:	1c f4       	brge	.+6      	; 0x2b28 <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	88 8b       	std	Y+16, r24	; 0x10
    2b26:	91 c0       	rjmp	.+290    	; 0x2c4a <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    2b28:	69 89       	ldd	r22, Y+17	; 0x11
    2b2a:	7a 89       	ldd	r23, Y+18	; 0x12
    2b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	4f e7       	ldi	r20, 0x7F	; 127
    2b36:	53 e4       	ldi	r21, 0x43	; 67
    2b38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b3c:	18 16       	cp	r1, r24
    2b3e:	0c f0       	brlt	.+2      	; 0x2b42 <LCD_voidSendHalfCmnd+0x232>
    2b40:	7b c0       	rjmp	.+246    	; 0x2c38 <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    2b42:	6d 89       	ldd	r22, Y+21	; 0x15
    2b44:	7e 89       	ldd	r23, Y+22	; 0x16
    2b46:	8f 89       	ldd	r24, Y+23	; 0x17
    2b48:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a e7       	ldi	r20, 0x7A	; 122
    2b50:	54 e4       	ldi	r21, 0x44	; 68
    2b52:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8c 87       	std	Y+12, r24	; 0x0c
    2b5c:	9d 87       	std	Y+13, r25	; 0x0d
    2b5e:	ae 87       	std	Y+14, r26	; 0x0e
    2b60:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b62:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b64:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b66:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b68:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4a ef       	ldi	r20, 0xFA	; 250
    2b70:	54 e4       	ldi	r21, 0x44	; 68
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	88 87       	std	Y+8, r24	; 0x08
    2b7c:	99 87       	std	Y+9, r25	; 0x09
    2b7e:	aa 87       	std	Y+10, r26	; 0x0a
    2b80:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b82:	68 85       	ldd	r22, Y+8	; 0x08
    2b84:	79 85       	ldd	r23, Y+9	; 0x09
    2b86:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b88:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b8a:	20 e0       	ldi	r18, 0x00	; 0
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	40 e8       	ldi	r20, 0x80	; 128
    2b90:	5f e3       	ldi	r21, 0x3F	; 63
    2b92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b96:	88 23       	and	r24, r24
    2b98:	2c f4       	brge	.+10     	; 0x2ba4 <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	9f 83       	std	Y+7, r25	; 0x07
    2ba0:	8e 83       	std	Y+6, r24	; 0x06
    2ba2:	3f c0       	rjmp	.+126    	; 0x2c22 <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    2ba4:	68 85       	ldd	r22, Y+8	; 0x08
    2ba6:	79 85       	ldd	r23, Y+9	; 0x09
    2ba8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2baa:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	3f ef       	ldi	r19, 0xFF	; 255
    2bb0:	4f e7       	ldi	r20, 0x7F	; 127
    2bb2:	57 e4       	ldi	r21, 0x47	; 71
    2bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bb8:	18 16       	cp	r1, r24
    2bba:	4c f5       	brge	.+82     	; 0x2c0e <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bbc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bbe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bc0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e2       	ldi	r20, 0x20	; 32
    2bca:	51 e4       	ldi	r21, 0x41	; 65
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	bc 01       	movw	r22, r24
    2bd6:	cd 01       	movw	r24, r26
    2bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bdc:	dc 01       	movw	r26, r24
    2bde:	cb 01       	movw	r24, r22
    2be0:	9f 83       	std	Y+7, r25	; 0x07
    2be2:	8e 83       	std	Y+6, r24	; 0x06
    2be4:	0f c0       	rjmp	.+30     	; 0x2c04 <LCD_voidSendHalfCmnd+0x2f4>
    2be6:	88 ec       	ldi	r24, 0xC8	; 200
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	9d 83       	std	Y+5, r25	; 0x05
    2bec:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bee:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <LCD_voidSendHalfCmnd+0x2e2>
    2bf6:	9d 83       	std	Y+5, r25	; 0x05
    2bf8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bfc:	9f 81       	ldd	r25, Y+7	; 0x07
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	9f 83       	std	Y+7, r25	; 0x07
    2c02:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c04:	8e 81       	ldd	r24, Y+6	; 0x06
    2c06:	9f 81       	ldd	r25, Y+7	; 0x07
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	69 f7       	brne	.-38     	; 0x2be6 <LCD_voidSendHalfCmnd+0x2d6>
    2c0c:	24 c0       	rjmp	.+72     	; 0x2c56 <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c0e:	68 85       	ldd	r22, Y+8	; 0x08
    2c10:	79 85       	ldd	r23, Y+9	; 0x09
    2c12:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c14:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	9f 83       	std	Y+7, r25	; 0x07
    2c20:	8e 83       	std	Y+6, r24	; 0x06
    2c22:	8e 81       	ldd	r24, Y+6	; 0x06
    2c24:	9f 81       	ldd	r25, Y+7	; 0x07
    2c26:	9b 83       	std	Y+3, r25	; 0x03
    2c28:	8a 83       	std	Y+2, r24	; 0x02
    2c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_voidSendHalfCmnd+0x31e>
    2c32:	9b 83       	std	Y+3, r25	; 0x03
    2c34:	8a 83       	std	Y+2, r24	; 0x02
    2c36:	0f c0       	rjmp	.+30     	; 0x2c56 <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c38:	69 89       	ldd	r22, Y+17	; 0x11
    2c3a:	7a 89       	ldd	r23, Y+18	; 0x12
    2c3c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c3e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	88 8b       	std	Y+16, r24	; 0x10
    2c4a:	88 89       	ldd	r24, Y+16	; 0x10
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	8a 95       	dec	r24
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <LCD_voidSendHalfCmnd+0x340>
    2c54:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
    2c56:	e1 96       	adiw	r28, 0x31	; 49
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	de bf       	out	0x3e, r29	; 62
    2c5e:	0f be       	out	0x3f, r0	; 63
    2c60:	cd bf       	out	0x3d, r28	; 61
    2c62:	cf 91       	pop	r28
    2c64:	df 91       	pop	r29
    2c66:	08 95       	ret

00002c68 <main>:
#include "LCD_interface.h"
#include "H_Bridge.h"
#include "ADC_interface.h"

int main(void)
{
    2c68:	0f 93       	push	r16
    2c6a:	1f 93       	push	r17
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	c0 50       	subi	r28, 0x00	; 0
    2c76:	d1 40       	sbci	r29, 0x01	; 1
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	de bf       	out	0x3e, r29	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	cd bf       	out	0x3d, r28	; 61
			0b11111,
			0b01010,
			0b10001
	};
	u16 Local_u16DigitalValue,Local_u16AnalogValue;
	DIO_voidInit();
    2c82:	0e 94 bb 07 	call	0xf76	; 0xf76 <DIO_voidInit>
	LCD_voidInit();
    2c86:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_voidInit>
	ADC_voidInit();
    2c8a:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,7);
    2c8e:	28 e6       	ldi	r18, 0x68	; 104
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	b9 01       	movw	r22, r18
    2c96:	41 e0       	ldi	r20, 0x01	; 1
    2c98:	27 e0       	ldi	r18, 0x07	; 7
    2c9a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
	while(1)
	{
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0,&Local_u16DigitalValue);
    2c9e:	9e 01       	movw	r18, r28
    2ca0:	21 50       	subi	r18, 0x01	; 1
    2ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	b9 01       	movw	r22, r18
    2ca8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValueSynchNonBlocking>
		Local_u16AnalogValue = (u16)((Local_u16DigitalValue * 5000UL) / 1024);
    2cac:	fe 01       	movw	r30, r28
    2cae:	e1 50       	subi	r30, 0x01	; 1
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	80 81       	ld	r24, Z
    2cb4:	91 81       	ldd	r25, Z+1	; 0x01
    2cb6:	cc 01       	movw	r24, r24
    2cb8:	a0 e0       	ldi	r26, 0x00	; 0
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	28 e8       	ldi	r18, 0x88	; 136
    2cbe:	33 e1       	ldi	r19, 0x13	; 19
    2cc0:	40 e0       	ldi	r20, 0x00	; 0
    2cc2:	50 e0       	ldi	r21, 0x00	; 0
    2cc4:	bc 01       	movw	r22, r24
    2cc6:	cd 01       	movw	r24, r26
    2cc8:	0e 94 4f 23 	call	0x469e	; 0x469e <__mulsi3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	07 2e       	mov	r0, r23
    2cd2:	7a e0       	ldi	r23, 0x0A	; 10
    2cd4:	b6 95       	lsr	r27
    2cd6:	a7 95       	ror	r26
    2cd8:	97 95       	ror	r25
    2cda:	87 95       	ror	r24
    2cdc:	7a 95       	dec	r23
    2cde:	d1 f7       	brne	.-12     	; 0x2cd4 <main+0x6c>
    2ce0:	70 2d       	mov	r23, r0
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	e3 50       	subi	r30, 0x03	; 3
    2ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ce8:	91 83       	std	Z+1, r25	; 0x01
    2cea:	80 83       	st	Z, r24
		if(Local_u16AnalogValue <= 2500)
    2cec:	fe 01       	movw	r30, r28
    2cee:	e3 50       	subi	r30, 0x03	; 3
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 81       	ld	r24, Z
    2cf4:	91 81       	ldd	r25, Z+1	; 0x01
    2cf6:	29 e0       	ldi	r18, 0x09	; 9
    2cf8:	85 3c       	cpi	r24, 0xC5	; 197
    2cfa:	92 07       	cpc	r25, r18
    2cfc:	08 f0       	brcs	.+2      	; 0x2d00 <main+0x98>
    2cfe:	f6 c6       	rjmp	.+3564   	; 0x3aec <main+0xe84>
		{
			if(Local_u16AnalogValue > 2200)
    2d00:	fe 01       	movw	r30, r28
    2d02:	e3 50       	subi	r30, 0x03	; 3
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	80 81       	ld	r24, Z
    2d08:	91 81       	ldd	r25, Z+1	; 0x01
    2d0a:	e8 e0       	ldi	r30, 0x08	; 8
    2d0c:	89 39       	cpi	r24, 0x99	; 153
    2d0e:	9e 07       	cpc	r25, r30
    2d10:	08 f4       	brcc	.+2      	; 0x2d14 <main+0xac>
    2d12:	be c0       	rjmp	.+380    	; 0x2e90 <main+0x228>
			{
				LCD_voidClearScreen();
    2d14:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e7 50       	subi	r30, 0x07	; 7
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	a0 ea       	ldi	r26, 0xA0	; 160
    2d24:	b1 e4       	ldi	r27, 0x41	; 65
    2d26:	80 83       	st	Z, r24
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	a2 83       	std	Z+2, r26	; 0x02
    2d2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2e:	8e 01       	movw	r16, r28
    2d30:	0b 50       	subi	r16, 0x0B	; 11
    2d32:	1f 4f       	sbci	r17, 0xFF	; 255
    2d34:	fe 01       	movw	r30, r28
    2d36:	e7 50       	subi	r30, 0x07	; 7
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	60 81       	ld	r22, Z
    2d3c:	71 81       	ldd	r23, Z+1	; 0x01
    2d3e:	82 81       	ldd	r24, Z+2	; 0x02
    2d40:	93 81       	ldd	r25, Z+3	; 0x03
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	4a ef       	ldi	r20, 0xFA	; 250
    2d48:	54 e4       	ldi	r21, 0x44	; 68
    2d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	f8 01       	movw	r30, r16
    2d54:	80 83       	st	Z, r24
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	a2 83       	std	Z+2, r26	; 0x02
    2d5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	eb 50       	subi	r30, 0x0B	; 11
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e8       	ldi	r20, 0x80	; 128
    2d70:	5f e3       	ldi	r21, 0x3F	; 63
    2d72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	44 f4       	brge	.+16     	; 0x2d8a <main+0x122>
		__ticks = 1;
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ed 50       	subi	r30, 0x0D	; 13
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	91 83       	std	Z+1, r25	; 0x01
    2d86:	80 83       	st	Z, r24
    2d88:	64 c0       	rjmp	.+200    	; 0x2e52 <main+0x1ea>
	else if (__tmp > 65535)
    2d8a:	fe 01       	movw	r30, r28
    2d8c:	eb 50       	subi	r30, 0x0B	; 11
    2d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d90:	60 81       	ld	r22, Z
    2d92:	71 81       	ldd	r23, Z+1	; 0x01
    2d94:	82 81       	ldd	r24, Z+2	; 0x02
    2d96:	93 81       	ldd	r25, Z+3	; 0x03
    2d98:	20 e0       	ldi	r18, 0x00	; 0
    2d9a:	3f ef       	ldi	r19, 0xFF	; 255
    2d9c:	4f e7       	ldi	r20, 0x7F	; 127
    2d9e:	57 e4       	ldi	r21, 0x47	; 71
    2da0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2da4:	18 16       	cp	r1, r24
    2da6:	0c f0       	brlt	.+2      	; 0x2daa <main+0x142>
    2da8:	43 c0       	rjmp	.+134    	; 0x2e30 <main+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2daa:	fe 01       	movw	r30, r28
    2dac:	e7 50       	subi	r30, 0x07	; 7
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	40 e2       	ldi	r20, 0x20	; 32
    2dbe:	51 e4       	ldi	r21, 0x41	; 65
    2dc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc4:	dc 01       	movw	r26, r24
    2dc6:	cb 01       	movw	r24, r22
    2dc8:	8e 01       	movw	r16, r28
    2dca:	0d 50       	subi	r16, 0x0D	; 13
    2dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dce:	bc 01       	movw	r22, r24
    2dd0:	cd 01       	movw	r24, r26
    2dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	f8 01       	movw	r30, r16
    2ddc:	91 83       	std	Z+1, r25	; 0x01
    2dde:	80 83       	st	Z, r24
    2de0:	1f c0       	rjmp	.+62     	; 0x2e20 <main+0x1b8>
    2de2:	fe 01       	movw	r30, r28
    2de4:	ef 50       	subi	r30, 0x0F	; 15
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	88 ec       	ldi	r24, 0xC8	; 200
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	91 83       	std	Z+1, r25	; 0x01
    2dee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2df0:	fe 01       	movw	r30, r28
    2df2:	ef 50       	subi	r30, 0x0F	; 15
    2df4:	ff 4f       	sbci	r31, 0xFF	; 255
    2df6:	80 81       	ld	r24, Z
    2df8:	91 81       	ldd	r25, Z+1	; 0x01
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <main+0x192>
    2dfe:	fe 01       	movw	r30, r28
    2e00:	ef 50       	subi	r30, 0x0F	; 15
    2e02:	ff 4f       	sbci	r31, 0xFF	; 255
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e08:	de 01       	movw	r26, r28
    2e0a:	ad 50       	subi	r26, 0x0D	; 13
    2e0c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e0e:	fe 01       	movw	r30, r28
    2e10:	ed 50       	subi	r30, 0x0D	; 13
    2e12:	ff 4f       	sbci	r31, 0xFF	; 255
    2e14:	80 81       	ld	r24, Z
    2e16:	91 81       	ldd	r25, Z+1	; 0x01
    2e18:	01 97       	sbiw	r24, 0x01	; 1
    2e1a:	11 96       	adiw	r26, 0x01	; 1
    2e1c:	9c 93       	st	X, r25
    2e1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e20:	fe 01       	movw	r30, r28
    2e22:	ed 50       	subi	r30, 0x0D	; 13
    2e24:	ff 4f       	sbci	r31, 0xFF	; 255
    2e26:	80 81       	ld	r24, Z
    2e28:	91 81       	ldd	r25, Z+1	; 0x01
    2e2a:	00 97       	sbiw	r24, 0x00	; 0
    2e2c:	d1 f6       	brne	.-76     	; 0x2de2 <main+0x17a>
    2e2e:	27 c0       	rjmp	.+78     	; 0x2e7e <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e30:	8e 01       	movw	r16, r28
    2e32:	0d 50       	subi	r16, 0x0D	; 13
    2e34:	1f 4f       	sbci	r17, 0xFF	; 255
    2e36:	fe 01       	movw	r30, r28
    2e38:	eb 50       	subi	r30, 0x0B	; 11
    2e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3c:	60 81       	ld	r22, Z
    2e3e:	71 81       	ldd	r23, Z+1	; 0x01
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	f8 01       	movw	r30, r16
    2e4e:	91 83       	std	Z+1, r25	; 0x01
    2e50:	80 83       	st	Z, r24
    2e52:	de 01       	movw	r26, r28
    2e54:	a1 51       	subi	r26, 0x11	; 17
    2e56:	bf 4f       	sbci	r27, 0xFF	; 255
    2e58:	fe 01       	movw	r30, r28
    2e5a:	ed 50       	subi	r30, 0x0D	; 13
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	80 81       	ld	r24, Z
    2e60:	91 81       	ldd	r25, Z+1	; 0x01
    2e62:	8d 93       	st	X+, r24
    2e64:	9c 93       	st	X, r25
    2e66:	fe 01       	movw	r30, r28
    2e68:	e1 51       	subi	r30, 0x11	; 17
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	80 81       	ld	r24, Z
    2e6e:	91 81       	ldd	r25, Z+1	; 0x01
    2e70:	01 97       	sbiw	r24, 0x01	; 1
    2e72:	f1 f7       	brne	.-4      	; 0x2e70 <main+0x208>
    2e74:	fe 01       	movw	r30, r28
    2e76:	e1 51       	subi	r30, 0x11	; 17
    2e78:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,7);
    2e7e:	28 e6       	ldi	r18, 0x68	; 104
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	80 e0       	ldi	r24, 0x00	; 0
    2e84:	b9 01       	movw	r22, r18
    2e86:	41 e0       	ldi	r20, 0x01	; 1
    2e88:	27 e0       	ldi	r18, 0x07	; 7
    2e8a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    2e8e:	77 c5       	rjmp	.+2798   	; 0x397e <main+0xd16>
			}
			else if(Local_u16AnalogValue > 1900)
    2e90:	fe 01       	movw	r30, r28
    2e92:	e3 50       	subi	r30, 0x03	; 3
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	f7 e0       	ldi	r31, 0x07	; 7
    2e9c:	8d 36       	cpi	r24, 0x6D	; 109
    2e9e:	9f 07       	cpc	r25, r31
    2ea0:	08 f4       	brcc	.+2      	; 0x2ea4 <main+0x23c>
    2ea2:	be c0       	rjmp	.+380    	; 0x3020 <main+0x3b8>
			{
				LCD_voidClearScreen();
    2ea4:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	e5 51       	subi	r30, 0x15	; 21
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	a0 ea       	ldi	r26, 0xA0	; 160
    2eb4:	b1 e4       	ldi	r27, 0x41	; 65
    2eb6:	80 83       	st	Z, r24
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	a2 83       	std	Z+2, r26	; 0x02
    2ebc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ebe:	8e 01       	movw	r16, r28
    2ec0:	09 51       	subi	r16, 0x19	; 25
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	e5 51       	subi	r30, 0x15	; 21
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a ef       	ldi	r20, 0xFA	; 250
    2ed8:	54 e4       	ldi	r21, 0x44	; 68
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	80 83       	st	Z, r24
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	a2 83       	std	Z+2, r26	; 0x02
    2eea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eec:	fe 01       	movw	r30, r28
    2eee:	e9 51       	subi	r30, 0x19	; 25
    2ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef2:	60 81       	ld	r22, Z
    2ef4:	71 81       	ldd	r23, Z+1	; 0x01
    2ef6:	82 81       	ldd	r24, Z+2	; 0x02
    2ef8:	93 81       	ldd	r25, Z+3	; 0x03
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	5f e3       	ldi	r21, 0x3F	; 63
    2f02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f06:	88 23       	and	r24, r24
    2f08:	44 f4       	brge	.+16     	; 0x2f1a <main+0x2b2>
		__ticks = 1;
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	eb 51       	subi	r30, 0x1B	; 27
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	80 83       	st	Z, r24
    2f18:	64 c0       	rjmp	.+200    	; 0x2fe2 <main+0x37a>
	else if (__tmp > 65535)
    2f1a:	fe 01       	movw	r30, r28
    2f1c:	e9 51       	subi	r30, 0x19	; 25
    2f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f20:	60 81       	ld	r22, Z
    2f22:	71 81       	ldd	r23, Z+1	; 0x01
    2f24:	82 81       	ldd	r24, Z+2	; 0x02
    2f26:	93 81       	ldd	r25, Z+3	; 0x03
    2f28:	20 e0       	ldi	r18, 0x00	; 0
    2f2a:	3f ef       	ldi	r19, 0xFF	; 255
    2f2c:	4f e7       	ldi	r20, 0x7F	; 127
    2f2e:	57 e4       	ldi	r21, 0x47	; 71
    2f30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f34:	18 16       	cp	r1, r24
    2f36:	0c f0       	brlt	.+2      	; 0x2f3a <main+0x2d2>
    2f38:	43 c0       	rjmp	.+134    	; 0x2fc0 <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e5 51       	subi	r30, 0x15	; 21
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	60 81       	ld	r22, Z
    2f42:	71 81       	ldd	r23, Z+1	; 0x01
    2f44:	82 81       	ldd	r24, Z+2	; 0x02
    2f46:	93 81       	ldd	r25, Z+3	; 0x03
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	40 e2       	ldi	r20, 0x20	; 32
    2f4e:	51 e4       	ldi	r21, 0x41	; 65
    2f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	8e 01       	movw	r16, r28
    2f5a:	0b 51       	subi	r16, 0x1B	; 27
    2f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5e:	bc 01       	movw	r22, r24
    2f60:	cd 01       	movw	r24, r26
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	f8 01       	movw	r30, r16
    2f6c:	91 83       	std	Z+1, r25	; 0x01
    2f6e:	80 83       	st	Z, r24
    2f70:	1f c0       	rjmp	.+62     	; 0x2fb0 <main+0x348>
    2f72:	fe 01       	movw	r30, r28
    2f74:	ed 51       	subi	r30, 0x1D	; 29
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	88 ec       	ldi	r24, 0xC8	; 200
    2f7a:	90 e0       	ldi	r25, 0x00	; 0
    2f7c:	91 83       	std	Z+1, r25	; 0x01
    2f7e:	80 83       	st	Z, r24
    2f80:	fe 01       	movw	r30, r28
    2f82:	ed 51       	subi	r30, 0x1D	; 29
    2f84:	ff 4f       	sbci	r31, 0xFF	; 255
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	f1 f7       	brne	.-4      	; 0x2f8a <main+0x322>
    2f8e:	fe 01       	movw	r30, r28
    2f90:	ed 51       	subi	r30, 0x1D	; 29
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	91 83       	std	Z+1, r25	; 0x01
    2f96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f98:	de 01       	movw	r26, r28
    2f9a:	ab 51       	subi	r26, 0x1B	; 27
    2f9c:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9e:	fe 01       	movw	r30, r28
    2fa0:	eb 51       	subi	r30, 0x1B	; 27
    2fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa4:	80 81       	ld	r24, Z
    2fa6:	91 81       	ldd	r25, Z+1	; 0x01
    2fa8:	01 97       	sbiw	r24, 0x01	; 1
    2faa:	11 96       	adiw	r26, 0x01	; 1
    2fac:	9c 93       	st	X, r25
    2fae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fb0:	fe 01       	movw	r30, r28
    2fb2:	eb 51       	subi	r30, 0x1B	; 27
    2fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb6:	80 81       	ld	r24, Z
    2fb8:	91 81       	ldd	r25, Z+1	; 0x01
    2fba:	00 97       	sbiw	r24, 0x00	; 0
    2fbc:	d1 f6       	brne	.-76     	; 0x2f72 <main+0x30a>
    2fbe:	27 c0       	rjmp	.+78     	; 0x300e <main+0x3a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fc0:	8e 01       	movw	r16, r28
    2fc2:	0b 51       	subi	r16, 0x1B	; 27
    2fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e9 51       	subi	r30, 0x19	; 25
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	60 81       	ld	r22, Z
    2fce:	71 81       	ldd	r23, Z+1	; 0x01
    2fd0:	82 81       	ldd	r24, Z+2	; 0x02
    2fd2:	93 81       	ldd	r25, Z+3	; 0x03
    2fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd8:	dc 01       	movw	r26, r24
    2fda:	cb 01       	movw	r24, r22
    2fdc:	f8 01       	movw	r30, r16
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	80 83       	st	Z, r24
    2fe2:	de 01       	movw	r26, r28
    2fe4:	af 51       	subi	r26, 0x1F	; 31
    2fe6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fe8:	fe 01       	movw	r30, r28
    2fea:	eb 51       	subi	r30, 0x1B	; 27
    2fec:	ff 4f       	sbci	r31, 0xFF	; 255
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	8d 93       	st	X+, r24
    2ff4:	9c 93       	st	X, r25
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	ef 51       	subi	r30, 0x1F	; 31
    2ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffc:	80 81       	ld	r24, Z
    2ffe:	91 81       	ldd	r25, Z+1	; 0x01
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <main+0x398>
    3004:	fe 01       	movw	r30, r28
    3006:	ef 51       	subi	r30, 0x1F	; 31
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	91 83       	std	Z+1, r25	; 0x01
    300c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,6);
    300e:	28 e6       	ldi	r18, 0x68	; 104
    3010:	30 e0       	ldi	r19, 0x00	; 0
    3012:	80 e0       	ldi	r24, 0x00	; 0
    3014:	b9 01       	movw	r22, r18
    3016:	41 e0       	ldi	r20, 0x01	; 1
    3018:	26 e0       	ldi	r18, 0x06	; 6
    301a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    301e:	af c4       	rjmp	.+2398   	; 0x397e <main+0xd16>
			}
			else if(Local_u16AnalogValue > 1600)
    3020:	fe 01       	movw	r30, r28
    3022:	e3 50       	subi	r30, 0x03	; 3
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	80 81       	ld	r24, Z
    3028:	91 81       	ldd	r25, Z+1	; 0x01
    302a:	f6 e0       	ldi	r31, 0x06	; 6
    302c:	81 34       	cpi	r24, 0x41	; 65
    302e:	9f 07       	cpc	r25, r31
    3030:	08 f4       	brcc	.+2      	; 0x3034 <main+0x3cc>
    3032:	be c0       	rjmp	.+380    	; 0x31b0 <main+0x548>
			{
				LCD_voidClearScreen();
    3034:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    3038:	fe 01       	movw	r30, r28
    303a:	e3 52       	subi	r30, 0x23	; 35
    303c:	ff 4f       	sbci	r31, 0xFF	; 255
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	a0 ea       	ldi	r26, 0xA0	; 160
    3044:	b1 e4       	ldi	r27, 0x41	; 65
    3046:	80 83       	st	Z, r24
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	a2 83       	std	Z+2, r26	; 0x02
    304c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	8e 01       	movw	r16, r28
    3050:	07 52       	subi	r16, 0x27	; 39
    3052:	1f 4f       	sbci	r17, 0xFF	; 255
    3054:	fe 01       	movw	r30, r28
    3056:	e3 52       	subi	r30, 0x23	; 35
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	60 81       	ld	r22, Z
    305c:	71 81       	ldd	r23, Z+1	; 0x01
    305e:	82 81       	ldd	r24, Z+2	; 0x02
    3060:	93 81       	ldd	r25, Z+3	; 0x03
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4a ef       	ldi	r20, 0xFA	; 250
    3068:	54 e4       	ldi	r21, 0x44	; 68
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	f8 01       	movw	r30, r16
    3074:	80 83       	st	Z, r24
    3076:	91 83       	std	Z+1, r25	; 0x01
    3078:	a2 83       	std	Z+2, r26	; 0x02
    307a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    307c:	fe 01       	movw	r30, r28
    307e:	e7 52       	subi	r30, 0x27	; 39
    3080:	ff 4f       	sbci	r31, 0xFF	; 255
    3082:	60 81       	ld	r22, Z
    3084:	71 81       	ldd	r23, Z+1	; 0x01
    3086:	82 81       	ldd	r24, Z+2	; 0x02
    3088:	93 81       	ldd	r25, Z+3	; 0x03
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3096:	88 23       	and	r24, r24
    3098:	44 f4       	brge	.+16     	; 0x30aa <main+0x442>
		__ticks = 1;
    309a:	fe 01       	movw	r30, r28
    309c:	e9 52       	subi	r30, 0x29	; 41
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	91 83       	std	Z+1, r25	; 0x01
    30a6:	80 83       	st	Z, r24
    30a8:	64 c0       	rjmp	.+200    	; 0x3172 <main+0x50a>
	else if (__tmp > 65535)
    30aa:	fe 01       	movw	r30, r28
    30ac:	e7 52       	subi	r30, 0x27	; 39
    30ae:	ff 4f       	sbci	r31, 0xFF	; 255
    30b0:	60 81       	ld	r22, Z
    30b2:	71 81       	ldd	r23, Z+1	; 0x01
    30b4:	82 81       	ldd	r24, Z+2	; 0x02
    30b6:	93 81       	ldd	r25, Z+3	; 0x03
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	3f ef       	ldi	r19, 0xFF	; 255
    30bc:	4f e7       	ldi	r20, 0x7F	; 127
    30be:	57 e4       	ldi	r21, 0x47	; 71
    30c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30c4:	18 16       	cp	r1, r24
    30c6:	0c f0       	brlt	.+2      	; 0x30ca <main+0x462>
    30c8:	43 c0       	rjmp	.+134    	; 0x3150 <main+0x4e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ca:	fe 01       	movw	r30, r28
    30cc:	e3 52       	subi	r30, 0x23	; 35
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	40 e2       	ldi	r20, 0x20	; 32
    30de:	51 e4       	ldi	r21, 0x41	; 65
    30e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	8e 01       	movw	r16, r28
    30ea:	09 52       	subi	r16, 0x29	; 41
    30ec:	1f 4f       	sbci	r17, 0xFF	; 255
    30ee:	bc 01       	movw	r22, r24
    30f0:	cd 01       	movw	r24, r26
    30f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f6:	dc 01       	movw	r26, r24
    30f8:	cb 01       	movw	r24, r22
    30fa:	f8 01       	movw	r30, r16
    30fc:	91 83       	std	Z+1, r25	; 0x01
    30fe:	80 83       	st	Z, r24
    3100:	1f c0       	rjmp	.+62     	; 0x3140 <main+0x4d8>
    3102:	fe 01       	movw	r30, r28
    3104:	eb 52       	subi	r30, 0x2B	; 43
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	88 ec       	ldi	r24, 0xC8	; 200
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	91 83       	std	Z+1, r25	; 0x01
    310e:	80 83       	st	Z, r24
    3110:	fe 01       	movw	r30, r28
    3112:	eb 52       	subi	r30, 0x2B	; 43
    3114:	ff 4f       	sbci	r31, 0xFF	; 255
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <main+0x4b2>
    311e:	fe 01       	movw	r30, r28
    3120:	eb 52       	subi	r30, 0x2B	; 43
    3122:	ff 4f       	sbci	r31, 0xFF	; 255
    3124:	91 83       	std	Z+1, r25	; 0x01
    3126:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3128:	de 01       	movw	r26, r28
    312a:	a9 52       	subi	r26, 0x29	; 41
    312c:	bf 4f       	sbci	r27, 0xFF	; 255
    312e:	fe 01       	movw	r30, r28
    3130:	e9 52       	subi	r30, 0x29	; 41
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	01 97       	sbiw	r24, 0x01	; 1
    313a:	11 96       	adiw	r26, 0x01	; 1
    313c:	9c 93       	st	X, r25
    313e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3140:	fe 01       	movw	r30, r28
    3142:	e9 52       	subi	r30, 0x29	; 41
    3144:	ff 4f       	sbci	r31, 0xFF	; 255
    3146:	80 81       	ld	r24, Z
    3148:	91 81       	ldd	r25, Z+1	; 0x01
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	d1 f6       	brne	.-76     	; 0x3102 <main+0x49a>
    314e:	27 c0       	rjmp	.+78     	; 0x319e <main+0x536>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3150:	8e 01       	movw	r16, r28
    3152:	09 52       	subi	r16, 0x29	; 41
    3154:	1f 4f       	sbci	r17, 0xFF	; 255
    3156:	fe 01       	movw	r30, r28
    3158:	e7 52       	subi	r30, 0x27	; 39
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	60 81       	ld	r22, Z
    315e:	71 81       	ldd	r23, Z+1	; 0x01
    3160:	82 81       	ldd	r24, Z+2	; 0x02
    3162:	93 81       	ldd	r25, Z+3	; 0x03
    3164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3168:	dc 01       	movw	r26, r24
    316a:	cb 01       	movw	r24, r22
    316c:	f8 01       	movw	r30, r16
    316e:	91 83       	std	Z+1, r25	; 0x01
    3170:	80 83       	st	Z, r24
    3172:	de 01       	movw	r26, r28
    3174:	ad 52       	subi	r26, 0x2D	; 45
    3176:	bf 4f       	sbci	r27, 0xFF	; 255
    3178:	fe 01       	movw	r30, r28
    317a:	e9 52       	subi	r30, 0x29	; 41
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	8d 93       	st	X+, r24
    3184:	9c 93       	st	X, r25
    3186:	fe 01       	movw	r30, r28
    3188:	ed 52       	subi	r30, 0x2D	; 45
    318a:	ff 4f       	sbci	r31, 0xFF	; 255
    318c:	80 81       	ld	r24, Z
    318e:	91 81       	ldd	r25, Z+1	; 0x01
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <main+0x528>
    3194:	fe 01       	movw	r30, r28
    3196:	ed 52       	subi	r30, 0x2D	; 45
    3198:	ff 4f       	sbci	r31, 0xFF	; 255
    319a:	91 83       	std	Z+1, r25	; 0x01
    319c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,5);
    319e:	28 e6       	ldi	r18, 0x68	; 104
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	80 e0       	ldi	r24, 0x00	; 0
    31a4:	b9 01       	movw	r22, r18
    31a6:	41 e0       	ldi	r20, 0x01	; 1
    31a8:	25 e0       	ldi	r18, 0x05	; 5
    31aa:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    31ae:	e7 c3       	rjmp	.+1998   	; 0x397e <main+0xd16>
			}
			else if(Local_u16AnalogValue > 1300)
    31b0:	fe 01       	movw	r30, r28
    31b2:	e3 50       	subi	r30, 0x03	; 3
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	91 81       	ldd	r25, Z+1	; 0x01
    31ba:	f5 e0       	ldi	r31, 0x05	; 5
    31bc:	85 31       	cpi	r24, 0x15	; 21
    31be:	9f 07       	cpc	r25, r31
    31c0:	08 f4       	brcc	.+2      	; 0x31c4 <main+0x55c>
    31c2:	be c0       	rjmp	.+380    	; 0x3340 <main+0x6d8>
			{
				LCD_voidClearScreen();
    31c4:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    31c8:	fe 01       	movw	r30, r28
    31ca:	e1 53       	subi	r30, 0x31	; 49
    31cc:	ff 4f       	sbci	r31, 0xFF	; 255
    31ce:	80 e0       	ldi	r24, 0x00	; 0
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	a0 ea       	ldi	r26, 0xA0	; 160
    31d4:	b1 e4       	ldi	r27, 0x41	; 65
    31d6:	80 83       	st	Z, r24
    31d8:	91 83       	std	Z+1, r25	; 0x01
    31da:	a2 83       	std	Z+2, r26	; 0x02
    31dc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31de:	8e 01       	movw	r16, r28
    31e0:	05 53       	subi	r16, 0x35	; 53
    31e2:	1f 4f       	sbci	r17, 0xFF	; 255
    31e4:	fe 01       	movw	r30, r28
    31e6:	e1 53       	subi	r30, 0x31	; 49
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	60 81       	ld	r22, Z
    31ec:	71 81       	ldd	r23, Z+1	; 0x01
    31ee:	82 81       	ldd	r24, Z+2	; 0x02
    31f0:	93 81       	ldd	r25, Z+3	; 0x03
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	4a ef       	ldi	r20, 0xFA	; 250
    31f8:	54 e4       	ldi	r21, 0x44	; 68
    31fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fe:	dc 01       	movw	r26, r24
    3200:	cb 01       	movw	r24, r22
    3202:	f8 01       	movw	r30, r16
    3204:	80 83       	st	Z, r24
    3206:	91 83       	std	Z+1, r25	; 0x01
    3208:	a2 83       	std	Z+2, r26	; 0x02
    320a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    320c:	fe 01       	movw	r30, r28
    320e:	e5 53       	subi	r30, 0x35	; 53
    3210:	ff 4f       	sbci	r31, 0xFF	; 255
    3212:	60 81       	ld	r22, Z
    3214:	71 81       	ldd	r23, Z+1	; 0x01
    3216:	82 81       	ldd	r24, Z+2	; 0x02
    3218:	93 81       	ldd	r25, Z+3	; 0x03
    321a:	20 e0       	ldi	r18, 0x00	; 0
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e8       	ldi	r20, 0x80	; 128
    3220:	5f e3       	ldi	r21, 0x3F	; 63
    3222:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3226:	88 23       	and	r24, r24
    3228:	44 f4       	brge	.+16     	; 0x323a <main+0x5d2>
		__ticks = 1;
    322a:	fe 01       	movw	r30, r28
    322c:	e7 53       	subi	r30, 0x37	; 55
    322e:	ff 4f       	sbci	r31, 0xFF	; 255
    3230:	81 e0       	ldi	r24, 0x01	; 1
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	91 83       	std	Z+1, r25	; 0x01
    3236:	80 83       	st	Z, r24
    3238:	64 c0       	rjmp	.+200    	; 0x3302 <main+0x69a>
	else if (__tmp > 65535)
    323a:	fe 01       	movw	r30, r28
    323c:	e5 53       	subi	r30, 0x35	; 53
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	60 81       	ld	r22, Z
    3242:	71 81       	ldd	r23, Z+1	; 0x01
    3244:	82 81       	ldd	r24, Z+2	; 0x02
    3246:	93 81       	ldd	r25, Z+3	; 0x03
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	3f ef       	ldi	r19, 0xFF	; 255
    324c:	4f e7       	ldi	r20, 0x7F	; 127
    324e:	57 e4       	ldi	r21, 0x47	; 71
    3250:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3254:	18 16       	cp	r1, r24
    3256:	0c f0       	brlt	.+2      	; 0x325a <main+0x5f2>
    3258:	43 c0       	rjmp	.+134    	; 0x32e0 <main+0x678>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325a:	fe 01       	movw	r30, r28
    325c:	e1 53       	subi	r30, 0x31	; 49
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	60 81       	ld	r22, Z
    3262:	71 81       	ldd	r23, Z+1	; 0x01
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	93 81       	ldd	r25, Z+3	; 0x03
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	40 e2       	ldi	r20, 0x20	; 32
    326e:	51 e4       	ldi	r21, 0x41	; 65
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8e 01       	movw	r16, r28
    327a:	07 53       	subi	r16, 0x37	; 55
    327c:	1f 4f       	sbci	r17, 0xFF	; 255
    327e:	bc 01       	movw	r22, r24
    3280:	cd 01       	movw	r24, r26
    3282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3286:	dc 01       	movw	r26, r24
    3288:	cb 01       	movw	r24, r22
    328a:	f8 01       	movw	r30, r16
    328c:	91 83       	std	Z+1, r25	; 0x01
    328e:	80 83       	st	Z, r24
    3290:	1f c0       	rjmp	.+62     	; 0x32d0 <main+0x668>
    3292:	fe 01       	movw	r30, r28
    3294:	e9 53       	subi	r30, 0x39	; 57
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	88 ec       	ldi	r24, 0xC8	; 200
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	91 83       	std	Z+1, r25	; 0x01
    329e:	80 83       	st	Z, r24
    32a0:	fe 01       	movw	r30, r28
    32a2:	e9 53       	subi	r30, 0x39	; 57
    32a4:	ff 4f       	sbci	r31, 0xFF	; 255
    32a6:	80 81       	ld	r24, Z
    32a8:	91 81       	ldd	r25, Z+1	; 0x01
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	f1 f7       	brne	.-4      	; 0x32aa <main+0x642>
    32ae:	fe 01       	movw	r30, r28
    32b0:	e9 53       	subi	r30, 0x39	; 57
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	91 83       	std	Z+1, r25	; 0x01
    32b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32b8:	de 01       	movw	r26, r28
    32ba:	a7 53       	subi	r26, 0x37	; 55
    32bc:	bf 4f       	sbci	r27, 0xFF	; 255
    32be:	fe 01       	movw	r30, r28
    32c0:	e7 53       	subi	r30, 0x37	; 55
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	11 96       	adiw	r26, 0x01	; 1
    32cc:	9c 93       	st	X, r25
    32ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32d0:	fe 01       	movw	r30, r28
    32d2:	e7 53       	subi	r30, 0x37	; 55
    32d4:	ff 4f       	sbci	r31, 0xFF	; 255
    32d6:	80 81       	ld	r24, Z
    32d8:	91 81       	ldd	r25, Z+1	; 0x01
    32da:	00 97       	sbiw	r24, 0x00	; 0
    32dc:	d1 f6       	brne	.-76     	; 0x3292 <main+0x62a>
    32de:	27 c0       	rjmp	.+78     	; 0x332e <main+0x6c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32e0:	8e 01       	movw	r16, r28
    32e2:	07 53       	subi	r16, 0x37	; 55
    32e4:	1f 4f       	sbci	r17, 0xFF	; 255
    32e6:	fe 01       	movw	r30, r28
    32e8:	e5 53       	subi	r30, 0x35	; 53
    32ea:	ff 4f       	sbci	r31, 0xFF	; 255
    32ec:	60 81       	ld	r22, Z
    32ee:	71 81       	ldd	r23, Z+1	; 0x01
    32f0:	82 81       	ldd	r24, Z+2	; 0x02
    32f2:	93 81       	ldd	r25, Z+3	; 0x03
    32f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	f8 01       	movw	r30, r16
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	80 83       	st	Z, r24
    3302:	de 01       	movw	r26, r28
    3304:	ab 53       	subi	r26, 0x3B	; 59
    3306:	bf 4f       	sbci	r27, 0xFF	; 255
    3308:	fe 01       	movw	r30, r28
    330a:	e7 53       	subi	r30, 0x37	; 55
    330c:	ff 4f       	sbci	r31, 0xFF	; 255
    330e:	80 81       	ld	r24, Z
    3310:	91 81       	ldd	r25, Z+1	; 0x01
    3312:	8d 93       	st	X+, r24
    3314:	9c 93       	st	X, r25
    3316:	fe 01       	movw	r30, r28
    3318:	eb 53       	subi	r30, 0x3B	; 59
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	80 81       	ld	r24, Z
    331e:	91 81       	ldd	r25, Z+1	; 0x01
    3320:	01 97       	sbiw	r24, 0x01	; 1
    3322:	f1 f7       	brne	.-4      	; 0x3320 <main+0x6b8>
    3324:	fe 01       	movw	r30, r28
    3326:	eb 53       	subi	r30, 0x3B	; 59
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	91 83       	std	Z+1, r25	; 0x01
    332c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,4);
    332e:	28 e6       	ldi	r18, 0x68	; 104
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	b9 01       	movw	r22, r18
    3336:	41 e0       	ldi	r20, 0x01	; 1
    3338:	24 e0       	ldi	r18, 0x04	; 4
    333a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    333e:	1f c3       	rjmp	.+1598   	; 0x397e <main+0xd16>
			}
			else if( Local_u16AnalogValue > 1000)
    3340:	fe 01       	movw	r30, r28
    3342:	e3 50       	subi	r30, 0x03	; 3
    3344:	ff 4f       	sbci	r31, 0xFF	; 255
    3346:	80 81       	ld	r24, Z
    3348:	91 81       	ldd	r25, Z+1	; 0x01
    334a:	f3 e0       	ldi	r31, 0x03	; 3
    334c:	89 3e       	cpi	r24, 0xE9	; 233
    334e:	9f 07       	cpc	r25, r31
    3350:	08 f4       	brcc	.+2      	; 0x3354 <main+0x6ec>
    3352:	be c0       	rjmp	.+380    	; 0x34d0 <main+0x868>
			{
				LCD_voidClearScreen();
    3354:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    3358:	fe 01       	movw	r30, r28
    335a:	ef 53       	subi	r30, 0x3F	; 63
    335c:	ff 4f       	sbci	r31, 0xFF	; 255
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	a0 ea       	ldi	r26, 0xA0	; 160
    3364:	b1 e4       	ldi	r27, 0x41	; 65
    3366:	80 83       	st	Z, r24
    3368:	91 83       	std	Z+1, r25	; 0x01
    336a:	a2 83       	std	Z+2, r26	; 0x02
    336c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    336e:	8e 01       	movw	r16, r28
    3370:	03 54       	subi	r16, 0x43	; 67
    3372:	1f 4f       	sbci	r17, 0xFF	; 255
    3374:	fe 01       	movw	r30, r28
    3376:	ef 53       	subi	r30, 0x3F	; 63
    3378:	ff 4f       	sbci	r31, 0xFF	; 255
    337a:	60 81       	ld	r22, Z
    337c:	71 81       	ldd	r23, Z+1	; 0x01
    337e:	82 81       	ldd	r24, Z+2	; 0x02
    3380:	93 81       	ldd	r25, Z+3	; 0x03
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	4a ef       	ldi	r20, 0xFA	; 250
    3388:	54 e4       	ldi	r21, 0x44	; 68
    338a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	f8 01       	movw	r30, r16
    3394:	80 83       	st	Z, r24
    3396:	91 83       	std	Z+1, r25	; 0x01
    3398:	a2 83       	std	Z+2, r26	; 0x02
    339a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    339c:	fe 01       	movw	r30, r28
    339e:	e3 54       	subi	r30, 0x43	; 67
    33a0:	ff 4f       	sbci	r31, 0xFF	; 255
    33a2:	60 81       	ld	r22, Z
    33a4:	71 81       	ldd	r23, Z+1	; 0x01
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	20 e0       	ldi	r18, 0x00	; 0
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	40 e8       	ldi	r20, 0x80	; 128
    33b0:	5f e3       	ldi	r21, 0x3F	; 63
    33b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33b6:	88 23       	and	r24, r24
    33b8:	44 f4       	brge	.+16     	; 0x33ca <main+0x762>
		__ticks = 1;
    33ba:	fe 01       	movw	r30, r28
    33bc:	e5 54       	subi	r30, 0x45	; 69
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
    33c8:	64 c0       	rjmp	.+200    	; 0x3492 <main+0x82a>
	else if (__tmp > 65535)
    33ca:	fe 01       	movw	r30, r28
    33cc:	e3 54       	subi	r30, 0x43	; 67
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	60 81       	ld	r22, Z
    33d2:	71 81       	ldd	r23, Z+1	; 0x01
    33d4:	82 81       	ldd	r24, Z+2	; 0x02
    33d6:	93 81       	ldd	r25, Z+3	; 0x03
    33d8:	20 e0       	ldi	r18, 0x00	; 0
    33da:	3f ef       	ldi	r19, 0xFF	; 255
    33dc:	4f e7       	ldi	r20, 0x7F	; 127
    33de:	57 e4       	ldi	r21, 0x47	; 71
    33e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    33e4:	18 16       	cp	r1, r24
    33e6:	0c f0       	brlt	.+2      	; 0x33ea <main+0x782>
    33e8:	43 c0       	rjmp	.+134    	; 0x3470 <main+0x808>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ea:	fe 01       	movw	r30, r28
    33ec:	ef 53       	subi	r30, 0x3F	; 63
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	60 81       	ld	r22, Z
    33f2:	71 81       	ldd	r23, Z+1	; 0x01
    33f4:	82 81       	ldd	r24, Z+2	; 0x02
    33f6:	93 81       	ldd	r25, Z+3	; 0x03
    33f8:	20 e0       	ldi	r18, 0x00	; 0
    33fa:	30 e0       	ldi	r19, 0x00	; 0
    33fc:	40 e2       	ldi	r20, 0x20	; 32
    33fe:	51 e4       	ldi	r21, 0x41	; 65
    3400:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	8e 01       	movw	r16, r28
    340a:	05 54       	subi	r16, 0x45	; 69
    340c:	1f 4f       	sbci	r17, 0xFF	; 255
    340e:	bc 01       	movw	r22, r24
    3410:	cd 01       	movw	r24, r26
    3412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	f8 01       	movw	r30, r16
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	80 83       	st	Z, r24
    3420:	1f c0       	rjmp	.+62     	; 0x3460 <main+0x7f8>
    3422:	fe 01       	movw	r30, r28
    3424:	e7 54       	subi	r30, 0x47	; 71
    3426:	ff 4f       	sbci	r31, 0xFF	; 255
    3428:	88 ec       	ldi	r24, 0xC8	; 200
    342a:	90 e0       	ldi	r25, 0x00	; 0
    342c:	91 83       	std	Z+1, r25	; 0x01
    342e:	80 83       	st	Z, r24
    3430:	fe 01       	movw	r30, r28
    3432:	e7 54       	subi	r30, 0x47	; 71
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 81       	ld	r24, Z
    3438:	91 81       	ldd	r25, Z+1	; 0x01
    343a:	01 97       	sbiw	r24, 0x01	; 1
    343c:	f1 f7       	brne	.-4      	; 0x343a <main+0x7d2>
    343e:	fe 01       	movw	r30, r28
    3440:	e7 54       	subi	r30, 0x47	; 71
    3442:	ff 4f       	sbci	r31, 0xFF	; 255
    3444:	91 83       	std	Z+1, r25	; 0x01
    3446:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3448:	de 01       	movw	r26, r28
    344a:	a5 54       	subi	r26, 0x45	; 69
    344c:	bf 4f       	sbci	r27, 0xFF	; 255
    344e:	fe 01       	movw	r30, r28
    3450:	e5 54       	subi	r30, 0x45	; 69
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	01 97       	sbiw	r24, 0x01	; 1
    345a:	11 96       	adiw	r26, 0x01	; 1
    345c:	9c 93       	st	X, r25
    345e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3460:	fe 01       	movw	r30, r28
    3462:	e5 54       	subi	r30, 0x45	; 69
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	91 81       	ldd	r25, Z+1	; 0x01
    346a:	00 97       	sbiw	r24, 0x00	; 0
    346c:	d1 f6       	brne	.-76     	; 0x3422 <main+0x7ba>
    346e:	27 c0       	rjmp	.+78     	; 0x34be <main+0x856>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3470:	8e 01       	movw	r16, r28
    3472:	05 54       	subi	r16, 0x45	; 69
    3474:	1f 4f       	sbci	r17, 0xFF	; 255
    3476:	fe 01       	movw	r30, r28
    3478:	e3 54       	subi	r30, 0x43	; 67
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	82 81       	ldd	r24, Z+2	; 0x02
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	f8 01       	movw	r30, r16
    348e:	91 83       	std	Z+1, r25	; 0x01
    3490:	80 83       	st	Z, r24
    3492:	de 01       	movw	r26, r28
    3494:	a9 54       	subi	r26, 0x49	; 73
    3496:	bf 4f       	sbci	r27, 0xFF	; 255
    3498:	fe 01       	movw	r30, r28
    349a:	e5 54       	subi	r30, 0x45	; 69
    349c:	ff 4f       	sbci	r31, 0xFF	; 255
    349e:	80 81       	ld	r24, Z
    34a0:	91 81       	ldd	r25, Z+1	; 0x01
    34a2:	8d 93       	st	X+, r24
    34a4:	9c 93       	st	X, r25
    34a6:	fe 01       	movw	r30, r28
    34a8:	e9 54       	subi	r30, 0x49	; 73
    34aa:	ff 4f       	sbci	r31, 0xFF	; 255
    34ac:	80 81       	ld	r24, Z
    34ae:	91 81       	ldd	r25, Z+1	; 0x01
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <main+0x848>
    34b4:	fe 01       	movw	r30, r28
    34b6:	e9 54       	subi	r30, 0x49	; 73
    34b8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ba:	91 83       	std	Z+1, r25	; 0x01
    34bc:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,3);
    34be:	28 e6       	ldi	r18, 0x68	; 104
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	80 e0       	ldi	r24, 0x00	; 0
    34c4:	b9 01       	movw	r22, r18
    34c6:	41 e0       	ldi	r20, 0x01	; 1
    34c8:	23 e0       	ldi	r18, 0x03	; 3
    34ca:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    34ce:	57 c2       	rjmp	.+1198   	; 0x397e <main+0xd16>
			}
			else if(Local_u16AnalogValue > 700)
    34d0:	fe 01       	movw	r30, r28
    34d2:	e3 50       	subi	r30, 0x03	; 3
    34d4:	ff 4f       	sbci	r31, 0xFF	; 255
    34d6:	80 81       	ld	r24, Z
    34d8:	91 81       	ldd	r25, Z+1	; 0x01
    34da:	f2 e0       	ldi	r31, 0x02	; 2
    34dc:	8d 3b       	cpi	r24, 0xBD	; 189
    34de:	9f 07       	cpc	r25, r31
    34e0:	08 f4       	brcc	.+2      	; 0x34e4 <main+0x87c>
    34e2:	be c0       	rjmp	.+380    	; 0x3660 <main+0x9f8>
			{
				LCD_voidClearScreen();
    34e4:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    34e8:	fe 01       	movw	r30, r28
    34ea:	ed 54       	subi	r30, 0x4D	; 77
    34ec:	ff 4f       	sbci	r31, 0xFF	; 255
    34ee:	80 e0       	ldi	r24, 0x00	; 0
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	a0 ea       	ldi	r26, 0xA0	; 160
    34f4:	b1 e4       	ldi	r27, 0x41	; 65
    34f6:	80 83       	st	Z, r24
    34f8:	91 83       	std	Z+1, r25	; 0x01
    34fa:	a2 83       	std	Z+2, r26	; 0x02
    34fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34fe:	8e 01       	movw	r16, r28
    3500:	01 55       	subi	r16, 0x51	; 81
    3502:	1f 4f       	sbci	r17, 0xFF	; 255
    3504:	fe 01       	movw	r30, r28
    3506:	ed 54       	subi	r30, 0x4D	; 77
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	4a ef       	ldi	r20, 0xFA	; 250
    3518:	54 e4       	ldi	r21, 0x44	; 68
    351a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	f8 01       	movw	r30, r16
    3524:	80 83       	st	Z, r24
    3526:	91 83       	std	Z+1, r25	; 0x01
    3528:	a2 83       	std	Z+2, r26	; 0x02
    352a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    352c:	fe 01       	movw	r30, r28
    352e:	e1 55       	subi	r30, 0x51	; 81
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	71 81       	ldd	r23, Z+1	; 0x01
    3536:	82 81       	ldd	r24, Z+2	; 0x02
    3538:	93 81       	ldd	r25, Z+3	; 0x03
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e8       	ldi	r20, 0x80	; 128
    3540:	5f e3       	ldi	r21, 0x3F	; 63
    3542:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3546:	88 23       	and	r24, r24
    3548:	44 f4       	brge	.+16     	; 0x355a <main+0x8f2>
		__ticks = 1;
    354a:	fe 01       	movw	r30, r28
    354c:	e3 55       	subi	r30, 0x53	; 83
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	91 83       	std	Z+1, r25	; 0x01
    3556:	80 83       	st	Z, r24
    3558:	64 c0       	rjmp	.+200    	; 0x3622 <main+0x9ba>
	else if (__tmp > 65535)
    355a:	fe 01       	movw	r30, r28
    355c:	e1 55       	subi	r30, 0x51	; 81
    355e:	ff 4f       	sbci	r31, 0xFF	; 255
    3560:	60 81       	ld	r22, Z
    3562:	71 81       	ldd	r23, Z+1	; 0x01
    3564:	82 81       	ldd	r24, Z+2	; 0x02
    3566:	93 81       	ldd	r25, Z+3	; 0x03
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	3f ef       	ldi	r19, 0xFF	; 255
    356c:	4f e7       	ldi	r20, 0x7F	; 127
    356e:	57 e4       	ldi	r21, 0x47	; 71
    3570:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3574:	18 16       	cp	r1, r24
    3576:	0c f0       	brlt	.+2      	; 0x357a <main+0x912>
    3578:	43 c0       	rjmp	.+134    	; 0x3600 <main+0x998>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357a:	fe 01       	movw	r30, r28
    357c:	ed 54       	subi	r30, 0x4D	; 77
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	60 81       	ld	r22, Z
    3582:	71 81       	ldd	r23, Z+1	; 0x01
    3584:	82 81       	ldd	r24, Z+2	; 0x02
    3586:	93 81       	ldd	r25, Z+3	; 0x03
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	30 e0       	ldi	r19, 0x00	; 0
    358c:	40 e2       	ldi	r20, 0x20	; 32
    358e:	51 e4       	ldi	r21, 0x41	; 65
    3590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	8e 01       	movw	r16, r28
    359a:	03 55       	subi	r16, 0x53	; 83
    359c:	1f 4f       	sbci	r17, 0xFF	; 255
    359e:	bc 01       	movw	r22, r24
    35a0:	cd 01       	movw	r24, r26
    35a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a6:	dc 01       	movw	r26, r24
    35a8:	cb 01       	movw	r24, r22
    35aa:	f8 01       	movw	r30, r16
    35ac:	91 83       	std	Z+1, r25	; 0x01
    35ae:	80 83       	st	Z, r24
    35b0:	1f c0       	rjmp	.+62     	; 0x35f0 <main+0x988>
    35b2:	fe 01       	movw	r30, r28
    35b4:	e5 55       	subi	r30, 0x55	; 85
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	88 ec       	ldi	r24, 0xC8	; 200
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	91 83       	std	Z+1, r25	; 0x01
    35be:	80 83       	st	Z, r24
    35c0:	fe 01       	movw	r30, r28
    35c2:	e5 55       	subi	r30, 0x55	; 85
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <main+0x962>
    35ce:	fe 01       	movw	r30, r28
    35d0:	e5 55       	subi	r30, 0x55	; 85
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d8:	de 01       	movw	r26, r28
    35da:	a3 55       	subi	r26, 0x53	; 83
    35dc:	bf 4f       	sbci	r27, 0xFF	; 255
    35de:	fe 01       	movw	r30, r28
    35e0:	e3 55       	subi	r30, 0x53	; 83
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 81       	ld	r24, Z
    35e6:	91 81       	ldd	r25, Z+1	; 0x01
    35e8:	01 97       	sbiw	r24, 0x01	; 1
    35ea:	11 96       	adiw	r26, 0x01	; 1
    35ec:	9c 93       	st	X, r25
    35ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f0:	fe 01       	movw	r30, r28
    35f2:	e3 55       	subi	r30, 0x53	; 83
    35f4:	ff 4f       	sbci	r31, 0xFF	; 255
    35f6:	80 81       	ld	r24, Z
    35f8:	91 81       	ldd	r25, Z+1	; 0x01
    35fa:	00 97       	sbiw	r24, 0x00	; 0
    35fc:	d1 f6       	brne	.-76     	; 0x35b2 <main+0x94a>
    35fe:	27 c0       	rjmp	.+78     	; 0x364e <main+0x9e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3600:	8e 01       	movw	r16, r28
    3602:	03 55       	subi	r16, 0x53	; 83
    3604:	1f 4f       	sbci	r17, 0xFF	; 255
    3606:	fe 01       	movw	r30, r28
    3608:	e1 55       	subi	r30, 0x51	; 81
    360a:	ff 4f       	sbci	r31, 0xFF	; 255
    360c:	60 81       	ld	r22, Z
    360e:	71 81       	ldd	r23, Z+1	; 0x01
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3618:	dc 01       	movw	r26, r24
    361a:	cb 01       	movw	r24, r22
    361c:	f8 01       	movw	r30, r16
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	80 83       	st	Z, r24
    3622:	de 01       	movw	r26, r28
    3624:	a7 55       	subi	r26, 0x57	; 87
    3626:	bf 4f       	sbci	r27, 0xFF	; 255
    3628:	fe 01       	movw	r30, r28
    362a:	e3 55       	subi	r30, 0x53	; 83
    362c:	ff 4f       	sbci	r31, 0xFF	; 255
    362e:	80 81       	ld	r24, Z
    3630:	91 81       	ldd	r25, Z+1	; 0x01
    3632:	8d 93       	st	X+, r24
    3634:	9c 93       	st	X, r25
    3636:	fe 01       	movw	r30, r28
    3638:	e7 55       	subi	r30, 0x57	; 87
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	80 81       	ld	r24, Z
    363e:	91 81       	ldd	r25, Z+1	; 0x01
    3640:	01 97       	sbiw	r24, 0x01	; 1
    3642:	f1 f7       	brne	.-4      	; 0x3640 <main+0x9d8>
    3644:	fe 01       	movw	r30, r28
    3646:	e7 55       	subi	r30, 0x57	; 87
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	91 83       	std	Z+1, r25	; 0x01
    364c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,2);
    364e:	28 e6       	ldi	r18, 0x68	; 104
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	80 e0       	ldi	r24, 0x00	; 0
    3654:	b9 01       	movw	r22, r18
    3656:	41 e0       	ldi	r20, 0x01	; 1
    3658:	22 e0       	ldi	r18, 0x02	; 2
    365a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    365e:	8f c1       	rjmp	.+798    	; 0x397e <main+0xd16>
			}
			else if(Local_u16AnalogValue > 400)
    3660:	fe 01       	movw	r30, r28
    3662:	e3 50       	subi	r30, 0x03	; 3
    3664:	ff 4f       	sbci	r31, 0xFF	; 255
    3666:	80 81       	ld	r24, Z
    3668:	91 81       	ldd	r25, Z+1	; 0x01
    366a:	f1 e0       	ldi	r31, 0x01	; 1
    366c:	81 39       	cpi	r24, 0x91	; 145
    366e:	9f 07       	cpc	r25, r31
    3670:	08 f4       	brcc	.+2      	; 0x3674 <main+0xa0c>
    3672:	be c0       	rjmp	.+380    	; 0x37f0 <main+0xb88>
			{
				LCD_voidClearScreen();
    3674:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    3678:	fe 01       	movw	r30, r28
    367a:	eb 55       	subi	r30, 0x5B	; 91
    367c:	ff 4f       	sbci	r31, 0xFF	; 255
    367e:	80 e0       	ldi	r24, 0x00	; 0
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	a0 ea       	ldi	r26, 0xA0	; 160
    3684:	b1 e4       	ldi	r27, 0x41	; 65
    3686:	80 83       	st	Z, r24
    3688:	91 83       	std	Z+1, r25	; 0x01
    368a:	a2 83       	std	Z+2, r26	; 0x02
    368c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    368e:	8e 01       	movw	r16, r28
    3690:	0f 55       	subi	r16, 0x5F	; 95
    3692:	1f 4f       	sbci	r17, 0xFF	; 255
    3694:	fe 01       	movw	r30, r28
    3696:	eb 55       	subi	r30, 0x5B	; 91
    3698:	ff 4f       	sbci	r31, 0xFF	; 255
    369a:	60 81       	ld	r22, Z
    369c:	71 81       	ldd	r23, Z+1	; 0x01
    369e:	82 81       	ldd	r24, Z+2	; 0x02
    36a0:	93 81       	ldd	r25, Z+3	; 0x03
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	30 e0       	ldi	r19, 0x00	; 0
    36a6:	4a ef       	ldi	r20, 0xFA	; 250
    36a8:	54 e4       	ldi	r21, 0x44	; 68
    36aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	f8 01       	movw	r30, r16
    36b4:	80 83       	st	Z, r24
    36b6:	91 83       	std	Z+1, r25	; 0x01
    36b8:	a2 83       	std	Z+2, r26	; 0x02
    36ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36bc:	fe 01       	movw	r30, r28
    36be:	ef 55       	subi	r30, 0x5F	; 95
    36c0:	ff 4f       	sbci	r31, 0xFF	; 255
    36c2:	60 81       	ld	r22, Z
    36c4:	71 81       	ldd	r23, Z+1	; 0x01
    36c6:	82 81       	ldd	r24, Z+2	; 0x02
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	30 e0       	ldi	r19, 0x00	; 0
    36ce:	40 e8       	ldi	r20, 0x80	; 128
    36d0:	5f e3       	ldi	r21, 0x3F	; 63
    36d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36d6:	88 23       	and	r24, r24
    36d8:	44 f4       	brge	.+16     	; 0x36ea <main+0xa82>
		__ticks = 1;
    36da:	fe 01       	movw	r30, r28
    36dc:	e1 56       	subi	r30, 0x61	; 97
    36de:	ff 4f       	sbci	r31, 0xFF	; 255
    36e0:	81 e0       	ldi	r24, 0x01	; 1
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	91 83       	std	Z+1, r25	; 0x01
    36e6:	80 83       	st	Z, r24
    36e8:	64 c0       	rjmp	.+200    	; 0x37b2 <main+0xb4a>
	else if (__tmp > 65535)
    36ea:	fe 01       	movw	r30, r28
    36ec:	ef 55       	subi	r30, 0x5F	; 95
    36ee:	ff 4f       	sbci	r31, 0xFF	; 255
    36f0:	60 81       	ld	r22, Z
    36f2:	71 81       	ldd	r23, Z+1	; 0x01
    36f4:	82 81       	ldd	r24, Z+2	; 0x02
    36f6:	93 81       	ldd	r25, Z+3	; 0x03
    36f8:	20 e0       	ldi	r18, 0x00	; 0
    36fa:	3f ef       	ldi	r19, 0xFF	; 255
    36fc:	4f e7       	ldi	r20, 0x7F	; 127
    36fe:	57 e4       	ldi	r21, 0x47	; 71
    3700:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3704:	18 16       	cp	r1, r24
    3706:	0c f0       	brlt	.+2      	; 0x370a <main+0xaa2>
    3708:	43 c0       	rjmp	.+134    	; 0x3790 <main+0xb28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370a:	fe 01       	movw	r30, r28
    370c:	eb 55       	subi	r30, 0x5B	; 91
    370e:	ff 4f       	sbci	r31, 0xFF	; 255
    3710:	60 81       	ld	r22, Z
    3712:	71 81       	ldd	r23, Z+1	; 0x01
    3714:	82 81       	ldd	r24, Z+2	; 0x02
    3716:	93 81       	ldd	r25, Z+3	; 0x03
    3718:	20 e0       	ldi	r18, 0x00	; 0
    371a:	30 e0       	ldi	r19, 0x00	; 0
    371c:	40 e2       	ldi	r20, 0x20	; 32
    371e:	51 e4       	ldi	r21, 0x41	; 65
    3720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3724:	dc 01       	movw	r26, r24
    3726:	cb 01       	movw	r24, r22
    3728:	8e 01       	movw	r16, r28
    372a:	01 56       	subi	r16, 0x61	; 97
    372c:	1f 4f       	sbci	r17, 0xFF	; 255
    372e:	bc 01       	movw	r22, r24
    3730:	cd 01       	movw	r24, r26
    3732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3736:	dc 01       	movw	r26, r24
    3738:	cb 01       	movw	r24, r22
    373a:	f8 01       	movw	r30, r16
    373c:	91 83       	std	Z+1, r25	; 0x01
    373e:	80 83       	st	Z, r24
    3740:	1f c0       	rjmp	.+62     	; 0x3780 <main+0xb18>
    3742:	fe 01       	movw	r30, r28
    3744:	e3 56       	subi	r30, 0x63	; 99
    3746:	ff 4f       	sbci	r31, 0xFF	; 255
    3748:	88 ec       	ldi	r24, 0xC8	; 200
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	91 83       	std	Z+1, r25	; 0x01
    374e:	80 83       	st	Z, r24
    3750:	fe 01       	movw	r30, r28
    3752:	e3 56       	subi	r30, 0x63	; 99
    3754:	ff 4f       	sbci	r31, 0xFF	; 255
    3756:	80 81       	ld	r24, Z
    3758:	91 81       	ldd	r25, Z+1	; 0x01
    375a:	01 97       	sbiw	r24, 0x01	; 1
    375c:	f1 f7       	brne	.-4      	; 0x375a <main+0xaf2>
    375e:	fe 01       	movw	r30, r28
    3760:	e3 56       	subi	r30, 0x63	; 99
    3762:	ff 4f       	sbci	r31, 0xFF	; 255
    3764:	91 83       	std	Z+1, r25	; 0x01
    3766:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3768:	de 01       	movw	r26, r28
    376a:	a1 56       	subi	r26, 0x61	; 97
    376c:	bf 4f       	sbci	r27, 0xFF	; 255
    376e:	fe 01       	movw	r30, r28
    3770:	e1 56       	subi	r30, 0x61	; 97
    3772:	ff 4f       	sbci	r31, 0xFF	; 255
    3774:	80 81       	ld	r24, Z
    3776:	91 81       	ldd	r25, Z+1	; 0x01
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	11 96       	adiw	r26, 0x01	; 1
    377c:	9c 93       	st	X, r25
    377e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3780:	fe 01       	movw	r30, r28
    3782:	e1 56       	subi	r30, 0x61	; 97
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	80 81       	ld	r24, Z
    3788:	91 81       	ldd	r25, Z+1	; 0x01
    378a:	00 97       	sbiw	r24, 0x00	; 0
    378c:	d1 f6       	brne	.-76     	; 0x3742 <main+0xada>
    378e:	27 c0       	rjmp	.+78     	; 0x37de <main+0xb76>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3790:	8e 01       	movw	r16, r28
    3792:	01 56       	subi	r16, 0x61	; 97
    3794:	1f 4f       	sbci	r17, 0xFF	; 255
    3796:	fe 01       	movw	r30, r28
    3798:	ef 55       	subi	r30, 0x5F	; 95
    379a:	ff 4f       	sbci	r31, 0xFF	; 255
    379c:	60 81       	ld	r22, Z
    379e:	71 81       	ldd	r23, Z+1	; 0x01
    37a0:	82 81       	ldd	r24, Z+2	; 0x02
    37a2:	93 81       	ldd	r25, Z+3	; 0x03
    37a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a8:	dc 01       	movw	r26, r24
    37aa:	cb 01       	movw	r24, r22
    37ac:	f8 01       	movw	r30, r16
    37ae:	91 83       	std	Z+1, r25	; 0x01
    37b0:	80 83       	st	Z, r24
    37b2:	de 01       	movw	r26, r28
    37b4:	a5 56       	subi	r26, 0x65	; 101
    37b6:	bf 4f       	sbci	r27, 0xFF	; 255
    37b8:	fe 01       	movw	r30, r28
    37ba:	e1 56       	subi	r30, 0x61	; 97
    37bc:	ff 4f       	sbci	r31, 0xFF	; 255
    37be:	80 81       	ld	r24, Z
    37c0:	91 81       	ldd	r25, Z+1	; 0x01
    37c2:	8d 93       	st	X+, r24
    37c4:	9c 93       	st	X, r25
    37c6:	fe 01       	movw	r30, r28
    37c8:	e5 56       	subi	r30, 0x65	; 101
    37ca:	ff 4f       	sbci	r31, 0xFF	; 255
    37cc:	80 81       	ld	r24, Z
    37ce:	91 81       	ldd	r25, Z+1	; 0x01
    37d0:	01 97       	sbiw	r24, 0x01	; 1
    37d2:	f1 f7       	brne	.-4      	; 0x37d0 <main+0xb68>
    37d4:	fe 01       	movw	r30, r28
    37d6:	e5 56       	subi	r30, 0x65	; 101
    37d8:	ff 4f       	sbci	r31, 0xFF	; 255
    37da:	91 83       	std	Z+1, r25	; 0x01
    37dc:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,1);
    37de:	28 e6       	ldi	r18, 0x68	; 104
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	b9 01       	movw	r22, r18
    37e6:	41 e0       	ldi	r20, 0x01	; 1
    37e8:	21 e0       	ldi	r18, 0x01	; 1
    37ea:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    37ee:	c7 c0       	rjmp	.+398    	; 0x397e <main+0xd16>
			}
			else if(Local_u16AnalogValue < 400)
    37f0:	fe 01       	movw	r30, r28
    37f2:	e3 50       	subi	r30, 0x03	; 3
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	80 81       	ld	r24, Z
    37f8:	91 81       	ldd	r25, Z+1	; 0x01
    37fa:	f1 e0       	ldi	r31, 0x01	; 1
    37fc:	80 39       	cpi	r24, 0x90	; 144
    37fe:	9f 07       	cpc	r25, r31
    3800:	08 f0       	brcs	.+2      	; 0x3804 <main+0xb9c>
    3802:	bd c0       	rjmp	.+378    	; 0x397e <main+0xd16>
			{
				LCD_voidClearScreen();
    3804:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    3808:	fe 01       	movw	r30, r28
    380a:	e9 56       	subi	r30, 0x69	; 105
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	a0 ea       	ldi	r26, 0xA0	; 160
    3814:	b1 e4       	ldi	r27, 0x41	; 65
    3816:	80 83       	st	Z, r24
    3818:	91 83       	std	Z+1, r25	; 0x01
    381a:	a2 83       	std	Z+2, r26	; 0x02
    381c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381e:	8e 01       	movw	r16, r28
    3820:	0d 56       	subi	r16, 0x6D	; 109
    3822:	1f 4f       	sbci	r17, 0xFF	; 255
    3824:	fe 01       	movw	r30, r28
    3826:	e9 56       	subi	r30, 0x69	; 105
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	60 81       	ld	r22, Z
    382c:	71 81       	ldd	r23, Z+1	; 0x01
    382e:	82 81       	ldd	r24, Z+2	; 0x02
    3830:	93 81       	ldd	r25, Z+3	; 0x03
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	4a ef       	ldi	r20, 0xFA	; 250
    3838:	54 e4       	ldi	r21, 0x44	; 68
    383a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	f8 01       	movw	r30, r16
    3844:	80 83       	st	Z, r24
    3846:	91 83       	std	Z+1, r25	; 0x01
    3848:	a2 83       	std	Z+2, r26	; 0x02
    384a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    384c:	fe 01       	movw	r30, r28
    384e:	ed 56       	subi	r30, 0x6D	; 109
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	60 81       	ld	r22, Z
    3854:	71 81       	ldd	r23, Z+1	; 0x01
    3856:	82 81       	ldd	r24, Z+2	; 0x02
    3858:	93 81       	ldd	r25, Z+3	; 0x03
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	40 e8       	ldi	r20, 0x80	; 128
    3860:	5f e3       	ldi	r21, 0x3F	; 63
    3862:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3866:	88 23       	and	r24, r24
    3868:	44 f4       	brge	.+16     	; 0x387a <main+0xc12>
		__ticks = 1;
    386a:	fe 01       	movw	r30, r28
    386c:	ef 56       	subi	r30, 0x6F	; 111
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	91 83       	std	Z+1, r25	; 0x01
    3876:	80 83       	st	Z, r24
    3878:	64 c0       	rjmp	.+200    	; 0x3942 <main+0xcda>
	else if (__tmp > 65535)
    387a:	fe 01       	movw	r30, r28
    387c:	ed 56       	subi	r30, 0x6D	; 109
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	60 81       	ld	r22, Z
    3882:	71 81       	ldd	r23, Z+1	; 0x01
    3884:	82 81       	ldd	r24, Z+2	; 0x02
    3886:	93 81       	ldd	r25, Z+3	; 0x03
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	3f ef       	ldi	r19, 0xFF	; 255
    388c:	4f e7       	ldi	r20, 0x7F	; 127
    388e:	57 e4       	ldi	r21, 0x47	; 71
    3890:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3894:	18 16       	cp	r1, r24
    3896:	0c f0       	brlt	.+2      	; 0x389a <main+0xc32>
    3898:	43 c0       	rjmp	.+134    	; 0x3920 <main+0xcb8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389a:	fe 01       	movw	r30, r28
    389c:	e9 56       	subi	r30, 0x69	; 105
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	60 81       	ld	r22, Z
    38a2:	71 81       	ldd	r23, Z+1	; 0x01
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e2       	ldi	r20, 0x20	; 32
    38ae:	51 e4       	ldi	r21, 0x41	; 65
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	8e 01       	movw	r16, r28
    38ba:	0f 56       	subi	r16, 0x6F	; 111
    38bc:	1f 4f       	sbci	r17, 0xFF	; 255
    38be:	bc 01       	movw	r22, r24
    38c0:	cd 01       	movw	r24, r26
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	f8 01       	movw	r30, r16
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	80 83       	st	Z, r24
    38d0:	1f c0       	rjmp	.+62     	; 0x3910 <main+0xca8>
    38d2:	fe 01       	movw	r30, r28
    38d4:	e1 57       	subi	r30, 0x71	; 113
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	88 ec       	ldi	r24, 0xC8	; 200
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	80 83       	st	Z, r24
    38e0:	fe 01       	movw	r30, r28
    38e2:	e1 57       	subi	r30, 0x71	; 113
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	80 81       	ld	r24, Z
    38e8:	91 81       	ldd	r25, Z+1	; 0x01
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	f1 f7       	brne	.-4      	; 0x38ea <main+0xc82>
    38ee:	fe 01       	movw	r30, r28
    38f0:	e1 57       	subi	r30, 0x71	; 113
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f8:	de 01       	movw	r26, r28
    38fa:	af 56       	subi	r26, 0x6F	; 111
    38fc:	bf 4f       	sbci	r27, 0xFF	; 255
    38fe:	fe 01       	movw	r30, r28
    3900:	ef 56       	subi	r30, 0x6F	; 111
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	11 96       	adiw	r26, 0x01	; 1
    390c:	9c 93       	st	X, r25
    390e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3910:	fe 01       	movw	r30, r28
    3912:	ef 56       	subi	r30, 0x6F	; 111
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	d1 f6       	brne	.-76     	; 0x38d2 <main+0xc6a>
    391e:	27 c0       	rjmp	.+78     	; 0x396e <main+0xd06>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3920:	8e 01       	movw	r16, r28
    3922:	0f 56       	subi	r16, 0x6F	; 111
    3924:	1f 4f       	sbci	r17, 0xFF	; 255
    3926:	fe 01       	movw	r30, r28
    3928:	ed 56       	subi	r30, 0x6D	; 109
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	60 81       	ld	r22, Z
    392e:	71 81       	ldd	r23, Z+1	; 0x01
    3930:	82 81       	ldd	r24, Z+2	; 0x02
    3932:	93 81       	ldd	r25, Z+3	; 0x03
    3934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	f8 01       	movw	r30, r16
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	80 83       	st	Z, r24
    3942:	de 01       	movw	r26, r28
    3944:	a3 57       	subi	r26, 0x73	; 115
    3946:	bf 4f       	sbci	r27, 0xFF	; 255
    3948:	fe 01       	movw	r30, r28
    394a:	ef 56       	subi	r30, 0x6F	; 111
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	80 81       	ld	r24, Z
    3950:	91 81       	ldd	r25, Z+1	; 0x01
    3952:	8d 93       	st	X+, r24
    3954:	9c 93       	st	X, r25
    3956:	fe 01       	movw	r30, r28
    3958:	e3 57       	subi	r30, 0x73	; 115
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	80 81       	ld	r24, Z
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <main+0xcf8>
    3964:	fe 01       	movw	r30, r28
    3966:	e3 57       	subi	r30, 0x73	; 115
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,0);
    396e:	28 e6       	ldi	r18, 0x68	; 104
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	80 e0       	ldi	r24, 0x00	; 0
    3974:	b9 01       	movw	r22, r18
    3976:	41 e0       	ldi	r20, 0x01	; 1
    3978:	20 e0       	ldi	r18, 0x00	; 0
    397a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
			}
			H_BRIDGE_voidRotateCCW();
    397e:	0e 94 45 0c 	call	0x188a	; 0x188a <H_BRIDGE_voidRotateCCW>
    3982:	fe 01       	movw	r30, r28
    3984:	e7 57       	subi	r30, 0x77	; 119
    3986:	ff 4f       	sbci	r31, 0xFF	; 255
    3988:	80 e0       	ldi	r24, 0x00	; 0
    398a:	90 e0       	ldi	r25, 0x00	; 0
    398c:	aa ef       	ldi	r26, 0xFA	; 250
    398e:	b3 e4       	ldi	r27, 0x43	; 67
    3990:	80 83       	st	Z, r24
    3992:	91 83       	std	Z+1, r25	; 0x01
    3994:	a2 83       	std	Z+2, r26	; 0x02
    3996:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3998:	8e 01       	movw	r16, r28
    399a:	0b 57       	subi	r16, 0x7B	; 123
    399c:	1f 4f       	sbci	r17, 0xFF	; 255
    399e:	fe 01       	movw	r30, r28
    39a0:	e7 57       	subi	r30, 0x77	; 119
    39a2:	ff 4f       	sbci	r31, 0xFF	; 255
    39a4:	60 81       	ld	r22, Z
    39a6:	71 81       	ldd	r23, Z+1	; 0x01
    39a8:	82 81       	ldd	r24, Z+2	; 0x02
    39aa:	93 81       	ldd	r25, Z+3	; 0x03
    39ac:	20 e0       	ldi	r18, 0x00	; 0
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	4a ef       	ldi	r20, 0xFA	; 250
    39b2:	54 e4       	ldi	r21, 0x44	; 68
    39b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b8:	dc 01       	movw	r26, r24
    39ba:	cb 01       	movw	r24, r22
    39bc:	f8 01       	movw	r30, r16
    39be:	80 83       	st	Z, r24
    39c0:	91 83       	std	Z+1, r25	; 0x01
    39c2:	a2 83       	std	Z+2, r26	; 0x02
    39c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39c6:	fe 01       	movw	r30, r28
    39c8:	eb 57       	subi	r30, 0x7B	; 123
    39ca:	ff 4f       	sbci	r31, 0xFF	; 255
    39cc:	60 81       	ld	r22, Z
    39ce:	71 81       	ldd	r23, Z+1	; 0x01
    39d0:	82 81       	ldd	r24, Z+2	; 0x02
    39d2:	93 81       	ldd	r25, Z+3	; 0x03
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	40 e8       	ldi	r20, 0x80	; 128
    39da:	5f e3       	ldi	r21, 0x3F	; 63
    39dc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39e0:	88 23       	and	r24, r24
    39e2:	44 f4       	brge	.+16     	; 0x39f4 <main+0xd8c>
		__ticks = 1;
    39e4:	fe 01       	movw	r30, r28
    39e6:	ed 57       	subi	r30, 0x7D	; 125
    39e8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ea:	81 e0       	ldi	r24, 0x01	; 1
    39ec:	90 e0       	ldi	r25, 0x00	; 0
    39ee:	91 83       	std	Z+1, r25	; 0x01
    39f0:	80 83       	st	Z, r24
    39f2:	64 c0       	rjmp	.+200    	; 0x3abc <main+0xe54>
	else if (__tmp > 65535)
    39f4:	fe 01       	movw	r30, r28
    39f6:	eb 57       	subi	r30, 0x7B	; 123
    39f8:	ff 4f       	sbci	r31, 0xFF	; 255
    39fa:	60 81       	ld	r22, Z
    39fc:	71 81       	ldd	r23, Z+1	; 0x01
    39fe:	82 81       	ldd	r24, Z+2	; 0x02
    3a00:	93 81       	ldd	r25, Z+3	; 0x03
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	3f ef       	ldi	r19, 0xFF	; 255
    3a06:	4f e7       	ldi	r20, 0x7F	; 127
    3a08:	57 e4       	ldi	r21, 0x47	; 71
    3a0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a0e:	18 16       	cp	r1, r24
    3a10:	0c f0       	brlt	.+2      	; 0x3a14 <main+0xdac>
    3a12:	43 c0       	rjmp	.+134    	; 0x3a9a <main+0xe32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a14:	fe 01       	movw	r30, r28
    3a16:	e7 57       	subi	r30, 0x77	; 119
    3a18:	ff 4f       	sbci	r31, 0xFF	; 255
    3a1a:	60 81       	ld	r22, Z
    3a1c:	71 81       	ldd	r23, Z+1	; 0x01
    3a1e:	82 81       	ldd	r24, Z+2	; 0x02
    3a20:	93 81       	ldd	r25, Z+3	; 0x03
    3a22:	20 e0       	ldi	r18, 0x00	; 0
    3a24:	30 e0       	ldi	r19, 0x00	; 0
    3a26:	40 e2       	ldi	r20, 0x20	; 32
    3a28:	51 e4       	ldi	r21, 0x41	; 65
    3a2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2e:	dc 01       	movw	r26, r24
    3a30:	cb 01       	movw	r24, r22
    3a32:	8e 01       	movw	r16, r28
    3a34:	0d 57       	subi	r16, 0x7D	; 125
    3a36:	1f 4f       	sbci	r17, 0xFF	; 255
    3a38:	bc 01       	movw	r22, r24
    3a3a:	cd 01       	movw	r24, r26
    3a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	f8 01       	movw	r30, r16
    3a46:	91 83       	std	Z+1, r25	; 0x01
    3a48:	80 83       	st	Z, r24
    3a4a:	1f c0       	rjmp	.+62     	; 0x3a8a <main+0xe22>
    3a4c:	fe 01       	movw	r30, r28
    3a4e:	ef 57       	subi	r30, 0x7F	; 127
    3a50:	ff 4f       	sbci	r31, 0xFF	; 255
    3a52:	88 ec       	ldi	r24, 0xC8	; 200
    3a54:	90 e0       	ldi	r25, 0x00	; 0
    3a56:	91 83       	std	Z+1, r25	; 0x01
    3a58:	80 83       	st	Z, r24
    3a5a:	fe 01       	movw	r30, r28
    3a5c:	ef 57       	subi	r30, 0x7F	; 127
    3a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a60:	80 81       	ld	r24, Z
    3a62:	91 81       	ldd	r25, Z+1	; 0x01
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	f1 f7       	brne	.-4      	; 0x3a64 <main+0xdfc>
    3a68:	fe 01       	movw	r30, r28
    3a6a:	ef 57       	subi	r30, 0x7F	; 127
    3a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6e:	91 83       	std	Z+1, r25	; 0x01
    3a70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a72:	de 01       	movw	r26, r28
    3a74:	ad 57       	subi	r26, 0x7D	; 125
    3a76:	bf 4f       	sbci	r27, 0xFF	; 255
    3a78:	fe 01       	movw	r30, r28
    3a7a:	ed 57       	subi	r30, 0x7D	; 125
    3a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a7e:	80 81       	ld	r24, Z
    3a80:	91 81       	ldd	r25, Z+1	; 0x01
    3a82:	01 97       	sbiw	r24, 0x01	; 1
    3a84:	11 96       	adiw	r26, 0x01	; 1
    3a86:	9c 93       	st	X, r25
    3a88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a8a:	fe 01       	movw	r30, r28
    3a8c:	ed 57       	subi	r30, 0x7D	; 125
    3a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a90:	80 81       	ld	r24, Z
    3a92:	91 81       	ldd	r25, Z+1	; 0x01
    3a94:	00 97       	sbiw	r24, 0x00	; 0
    3a96:	d1 f6       	brne	.-76     	; 0x3a4c <main+0xde4>
    3a98:	02 c9       	rjmp	.-3580   	; 0x2c9e <main+0x36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9a:	8e 01       	movw	r16, r28
    3a9c:	0d 57       	subi	r16, 0x7D	; 125
    3a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3aa0:	fe 01       	movw	r30, r28
    3aa2:	eb 57       	subi	r30, 0x7B	; 123
    3aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa6:	60 81       	ld	r22, Z
    3aa8:	71 81       	ldd	r23, Z+1	; 0x01
    3aaa:	82 81       	ldd	r24, Z+2	; 0x02
    3aac:	93 81       	ldd	r25, Z+3	; 0x03
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	91 83       	std	Z+1, r25	; 0x01
    3aba:	80 83       	st	Z, r24
    3abc:	de 01       	movw	r26, r28
    3abe:	a1 58       	subi	r26, 0x81	; 129
    3ac0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ac2:	fe 01       	movw	r30, r28
    3ac4:	ed 57       	subi	r30, 0x7D	; 125
    3ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac8:	80 81       	ld	r24, Z
    3aca:	91 81       	ldd	r25, Z+1	; 0x01
    3acc:	11 96       	adiw	r26, 0x01	; 1
    3ace:	9c 93       	st	X, r25
    3ad0:	8e 93       	st	-X, r24
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	e1 58       	subi	r30, 0x81	; 129
    3ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ad8:	80 81       	ld	r24, Z
    3ada:	91 81       	ldd	r25, Z+1	; 0x01
    3adc:	01 97       	sbiw	r24, 0x01	; 1
    3ade:	f1 f7       	brne	.-4      	; 0x3adc <main+0xe74>
    3ae0:	fe 01       	movw	r30, r28
    3ae2:	e1 58       	subi	r30, 0x81	; 129
    3ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae6:	91 83       	std	Z+1, r25	; 0x01
    3ae8:	80 83       	st	Z, r24
    3aea:	d9 c8       	rjmp	.-3662   	; 0x2c9e <main+0x36>
			_delay_ms(500);
		}
		else if(Local_u16AnalogValue > 2500)
    3aec:	fe 01       	movw	r30, r28
    3aee:	e3 50       	subi	r30, 0x03	; 3
    3af0:	ff 4f       	sbci	r31, 0xFF	; 255
    3af2:	80 81       	ld	r24, Z
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	f9 e0       	ldi	r31, 0x09	; 9
    3af8:	85 3c       	cpi	r24, 0xC5	; 197
    3afa:	9f 07       	cpc	r25, r31
    3afc:	08 f4       	brcc	.+2      	; 0x3b00 <main+0xe98>
    3afe:	cf c8       	rjmp	.-3682   	; 0x2c9e <main+0x36>
		{
			if(Local_u16AnalogValue > 4700)
    3b00:	fe 01       	movw	r30, r28
    3b02:	e3 50       	subi	r30, 0x03	; 3
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	80 81       	ld	r24, Z
    3b08:	91 81       	ldd	r25, Z+1	; 0x01
    3b0a:	22 e1       	ldi	r18, 0x12	; 18
    3b0c:	8d 35       	cpi	r24, 0x5D	; 93
    3b0e:	92 07       	cpc	r25, r18
    3b10:	08 f4       	brcc	.+2      	; 0x3b14 <main+0xeac>
    3b12:	be c0       	rjmp	.+380    	; 0x3c90 <main+0x1028>
			{
				LCD_voidClearScreen();
    3b14:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    3b18:	fe 01       	movw	r30, r28
    3b1a:	e5 58       	subi	r30, 0x85	; 133
    3b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b1e:	80 e0       	ldi	r24, 0x00	; 0
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	a0 ea       	ldi	r26, 0xA0	; 160
    3b24:	b1 e4       	ldi	r27, 0x41	; 65
    3b26:	80 83       	st	Z, r24
    3b28:	91 83       	std	Z+1, r25	; 0x01
    3b2a:	a2 83       	std	Z+2, r26	; 0x02
    3b2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b2e:	8e 01       	movw	r16, r28
    3b30:	09 58       	subi	r16, 0x89	; 137
    3b32:	1f 4f       	sbci	r17, 0xFF	; 255
    3b34:	fe 01       	movw	r30, r28
    3b36:	e5 58       	subi	r30, 0x85	; 133
    3b38:	ff 4f       	sbci	r31, 0xFF	; 255
    3b3a:	60 81       	ld	r22, Z
    3b3c:	71 81       	ldd	r23, Z+1	; 0x01
    3b3e:	82 81       	ldd	r24, Z+2	; 0x02
    3b40:	93 81       	ldd	r25, Z+3	; 0x03
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	4a ef       	ldi	r20, 0xFA	; 250
    3b48:	54 e4       	ldi	r21, 0x44	; 68
    3b4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b4e:	dc 01       	movw	r26, r24
    3b50:	cb 01       	movw	r24, r22
    3b52:	f8 01       	movw	r30, r16
    3b54:	80 83       	st	Z, r24
    3b56:	91 83       	std	Z+1, r25	; 0x01
    3b58:	a2 83       	std	Z+2, r26	; 0x02
    3b5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b5c:	fe 01       	movw	r30, r28
    3b5e:	e9 58       	subi	r30, 0x89	; 137
    3b60:	ff 4f       	sbci	r31, 0xFF	; 255
    3b62:	60 81       	ld	r22, Z
    3b64:	71 81       	ldd	r23, Z+1	; 0x01
    3b66:	82 81       	ldd	r24, Z+2	; 0x02
    3b68:	93 81       	ldd	r25, Z+3	; 0x03
    3b6a:	20 e0       	ldi	r18, 0x00	; 0
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	40 e8       	ldi	r20, 0x80	; 128
    3b70:	5f e3       	ldi	r21, 0x3F	; 63
    3b72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b76:	88 23       	and	r24, r24
    3b78:	44 f4       	brge	.+16     	; 0x3b8a <main+0xf22>
		__ticks = 1;
    3b7a:	fe 01       	movw	r30, r28
    3b7c:	eb 58       	subi	r30, 0x8B	; 139
    3b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	91 83       	std	Z+1, r25	; 0x01
    3b86:	80 83       	st	Z, r24
    3b88:	64 c0       	rjmp	.+200    	; 0x3c52 <main+0xfea>
	else if (__tmp > 65535)
    3b8a:	fe 01       	movw	r30, r28
    3b8c:	e9 58       	subi	r30, 0x89	; 137
    3b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3b90:	60 81       	ld	r22, Z
    3b92:	71 81       	ldd	r23, Z+1	; 0x01
    3b94:	82 81       	ldd	r24, Z+2	; 0x02
    3b96:	93 81       	ldd	r25, Z+3	; 0x03
    3b98:	20 e0       	ldi	r18, 0x00	; 0
    3b9a:	3f ef       	ldi	r19, 0xFF	; 255
    3b9c:	4f e7       	ldi	r20, 0x7F	; 127
    3b9e:	57 e4       	ldi	r21, 0x47	; 71
    3ba0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ba4:	18 16       	cp	r1, r24
    3ba6:	0c f0       	brlt	.+2      	; 0x3baa <main+0xf42>
    3ba8:	43 c0       	rjmp	.+134    	; 0x3c30 <main+0xfc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3baa:	fe 01       	movw	r30, r28
    3bac:	e5 58       	subi	r30, 0x85	; 133
    3bae:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb0:	60 81       	ld	r22, Z
    3bb2:	71 81       	ldd	r23, Z+1	; 0x01
    3bb4:	82 81       	ldd	r24, Z+2	; 0x02
    3bb6:	93 81       	ldd	r25, Z+3	; 0x03
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	30 e0       	ldi	r19, 0x00	; 0
    3bbc:	40 e2       	ldi	r20, 0x20	; 32
    3bbe:	51 e4       	ldi	r21, 0x41	; 65
    3bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	8e 01       	movw	r16, r28
    3bca:	0b 58       	subi	r16, 0x8B	; 139
    3bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bce:	bc 01       	movw	r22, r24
    3bd0:	cd 01       	movw	r24, r26
    3bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bd6:	dc 01       	movw	r26, r24
    3bd8:	cb 01       	movw	r24, r22
    3bda:	f8 01       	movw	r30, r16
    3bdc:	91 83       	std	Z+1, r25	; 0x01
    3bde:	80 83       	st	Z, r24
    3be0:	1f c0       	rjmp	.+62     	; 0x3c20 <main+0xfb8>
    3be2:	fe 01       	movw	r30, r28
    3be4:	ed 58       	subi	r30, 0x8D	; 141
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	88 ec       	ldi	r24, 0xC8	; 200
    3bea:	90 e0       	ldi	r25, 0x00	; 0
    3bec:	91 83       	std	Z+1, r25	; 0x01
    3bee:	80 83       	st	Z, r24
    3bf0:	fe 01       	movw	r30, r28
    3bf2:	ed 58       	subi	r30, 0x8D	; 141
    3bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf6:	80 81       	ld	r24, Z
    3bf8:	91 81       	ldd	r25, Z+1	; 0x01
    3bfa:	01 97       	sbiw	r24, 0x01	; 1
    3bfc:	f1 f7       	brne	.-4      	; 0x3bfa <main+0xf92>
    3bfe:	fe 01       	movw	r30, r28
    3c00:	ed 58       	subi	r30, 0x8D	; 141
    3c02:	ff 4f       	sbci	r31, 0xFF	; 255
    3c04:	91 83       	std	Z+1, r25	; 0x01
    3c06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c08:	de 01       	movw	r26, r28
    3c0a:	ab 58       	subi	r26, 0x8B	; 139
    3c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    3c0e:	fe 01       	movw	r30, r28
    3c10:	eb 58       	subi	r30, 0x8B	; 139
    3c12:	ff 4f       	sbci	r31, 0xFF	; 255
    3c14:	80 81       	ld	r24, Z
    3c16:	91 81       	ldd	r25, Z+1	; 0x01
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	11 96       	adiw	r26, 0x01	; 1
    3c1c:	9c 93       	st	X, r25
    3c1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c20:	fe 01       	movw	r30, r28
    3c22:	eb 58       	subi	r30, 0x8B	; 139
    3c24:	ff 4f       	sbci	r31, 0xFF	; 255
    3c26:	80 81       	ld	r24, Z
    3c28:	91 81       	ldd	r25, Z+1	; 0x01
    3c2a:	00 97       	sbiw	r24, 0x00	; 0
    3c2c:	d1 f6       	brne	.-76     	; 0x3be2 <main+0xf7a>
    3c2e:	27 c0       	rjmp	.+78     	; 0x3c7e <main+0x1016>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c30:	8e 01       	movw	r16, r28
    3c32:	0b 58       	subi	r16, 0x8B	; 139
    3c34:	1f 4f       	sbci	r17, 0xFF	; 255
    3c36:	fe 01       	movw	r30, r28
    3c38:	e9 58       	subi	r30, 0x89	; 137
    3c3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c3c:	60 81       	ld	r22, Z
    3c3e:	71 81       	ldd	r23, Z+1	; 0x01
    3c40:	82 81       	ldd	r24, Z+2	; 0x02
    3c42:	93 81       	ldd	r25, Z+3	; 0x03
    3c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c48:	dc 01       	movw	r26, r24
    3c4a:	cb 01       	movw	r24, r22
    3c4c:	f8 01       	movw	r30, r16
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	80 83       	st	Z, r24
    3c52:	de 01       	movw	r26, r28
    3c54:	af 58       	subi	r26, 0x8F	; 143
    3c56:	bf 4f       	sbci	r27, 0xFF	; 255
    3c58:	fe 01       	movw	r30, r28
    3c5a:	eb 58       	subi	r30, 0x8B	; 139
    3c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5e:	80 81       	ld	r24, Z
    3c60:	91 81       	ldd	r25, Z+1	; 0x01
    3c62:	8d 93       	st	X+, r24
    3c64:	9c 93       	st	X, r25
    3c66:	fe 01       	movw	r30, r28
    3c68:	ef 58       	subi	r30, 0x8F	; 143
    3c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6c:	80 81       	ld	r24, Z
    3c6e:	91 81       	ldd	r25, Z+1	; 0x01
    3c70:	01 97       	sbiw	r24, 0x01	; 1
    3c72:	f1 f7       	brne	.-4      	; 0x3c70 <main+0x1008>
    3c74:	fe 01       	movw	r30, r28
    3c76:	ef 58       	subi	r30, 0x8F	; 143
    3c78:	ff 4f       	sbci	r31, 0xFF	; 255
    3c7a:	91 83       	std	Z+1, r25	; 0x01
    3c7c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,15);
    3c7e:	28 e6       	ldi	r18, 0x68	; 104
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	b9 01       	movw	r22, r18
    3c86:	41 e0       	ldi	r20, 0x01	; 1
    3c88:	2f e0       	ldi	r18, 0x0F	; 15
    3c8a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    3c8e:	90 c4       	rjmp	.+2336   	; 0x45b0 <main+0x1948>
			}
			else if(Local_u16AnalogValue > 4400)
    3c90:	fe 01       	movw	r30, r28
    3c92:	e3 50       	subi	r30, 0x03	; 3
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	80 81       	ld	r24, Z
    3c98:	91 81       	ldd	r25, Z+1	; 0x01
    3c9a:	f1 e1       	ldi	r31, 0x11	; 17
    3c9c:	81 33       	cpi	r24, 0x31	; 49
    3c9e:	9f 07       	cpc	r25, r31
    3ca0:	08 f4       	brcc	.+2      	; 0x3ca4 <main+0x103c>
    3ca2:	be c0       	rjmp	.+380    	; 0x3e20 <main+0x11b8>
			{
				LCD_voidClearScreen();
    3ca4:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    3ca8:	fe 01       	movw	r30, r28
    3caa:	e3 59       	subi	r30, 0x93	; 147
    3cac:	ff 4f       	sbci	r31, 0xFF	; 255
    3cae:	80 e0       	ldi	r24, 0x00	; 0
    3cb0:	90 e0       	ldi	r25, 0x00	; 0
    3cb2:	a0 ea       	ldi	r26, 0xA0	; 160
    3cb4:	b1 e4       	ldi	r27, 0x41	; 65
    3cb6:	80 83       	st	Z, r24
    3cb8:	91 83       	std	Z+1, r25	; 0x01
    3cba:	a2 83       	std	Z+2, r26	; 0x02
    3cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cbe:	8e 01       	movw	r16, r28
    3cc0:	07 59       	subi	r16, 0x97	; 151
    3cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc4:	fe 01       	movw	r30, r28
    3cc6:	e3 59       	subi	r30, 0x93	; 147
    3cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cca:	60 81       	ld	r22, Z
    3ccc:	71 81       	ldd	r23, Z+1	; 0x01
    3cce:	82 81       	ldd	r24, Z+2	; 0x02
    3cd0:	93 81       	ldd	r25, Z+3	; 0x03
    3cd2:	20 e0       	ldi	r18, 0x00	; 0
    3cd4:	30 e0       	ldi	r19, 0x00	; 0
    3cd6:	4a ef       	ldi	r20, 0xFA	; 250
    3cd8:	54 e4       	ldi	r21, 0x44	; 68
    3cda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cde:	dc 01       	movw	r26, r24
    3ce0:	cb 01       	movw	r24, r22
    3ce2:	f8 01       	movw	r30, r16
    3ce4:	80 83       	st	Z, r24
    3ce6:	91 83       	std	Z+1, r25	; 0x01
    3ce8:	a2 83       	std	Z+2, r26	; 0x02
    3cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cec:	fe 01       	movw	r30, r28
    3cee:	e7 59       	subi	r30, 0x97	; 151
    3cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf2:	60 81       	ld	r22, Z
    3cf4:	71 81       	ldd	r23, Z+1	; 0x01
    3cf6:	82 81       	ldd	r24, Z+2	; 0x02
    3cf8:	93 81       	ldd	r25, Z+3	; 0x03
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	40 e8       	ldi	r20, 0x80	; 128
    3d00:	5f e3       	ldi	r21, 0x3F	; 63
    3d02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d06:	88 23       	and	r24, r24
    3d08:	44 f4       	brge	.+16     	; 0x3d1a <main+0x10b2>
		__ticks = 1;
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	e9 59       	subi	r30, 0x99	; 153
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	91 83       	std	Z+1, r25	; 0x01
    3d16:	80 83       	st	Z, r24
    3d18:	64 c0       	rjmp	.+200    	; 0x3de2 <main+0x117a>
	else if (__tmp > 65535)
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e7 59       	subi	r30, 0x97	; 151
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	60 81       	ld	r22, Z
    3d22:	71 81       	ldd	r23, Z+1	; 0x01
    3d24:	82 81       	ldd	r24, Z+2	; 0x02
    3d26:	93 81       	ldd	r25, Z+3	; 0x03
    3d28:	20 e0       	ldi	r18, 0x00	; 0
    3d2a:	3f ef       	ldi	r19, 0xFF	; 255
    3d2c:	4f e7       	ldi	r20, 0x7F	; 127
    3d2e:	57 e4       	ldi	r21, 0x47	; 71
    3d30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d34:	18 16       	cp	r1, r24
    3d36:	0c f0       	brlt	.+2      	; 0x3d3a <main+0x10d2>
    3d38:	43 c0       	rjmp	.+134    	; 0x3dc0 <main+0x1158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d3a:	fe 01       	movw	r30, r28
    3d3c:	e3 59       	subi	r30, 0x93	; 147
    3d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d40:	60 81       	ld	r22, Z
    3d42:	71 81       	ldd	r23, Z+1	; 0x01
    3d44:	82 81       	ldd	r24, Z+2	; 0x02
    3d46:	93 81       	ldd	r25, Z+3	; 0x03
    3d48:	20 e0       	ldi	r18, 0x00	; 0
    3d4a:	30 e0       	ldi	r19, 0x00	; 0
    3d4c:	40 e2       	ldi	r20, 0x20	; 32
    3d4e:	51 e4       	ldi	r21, 0x41	; 65
    3d50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	8e 01       	movw	r16, r28
    3d5a:	09 59       	subi	r16, 0x99	; 153
    3d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d5e:	bc 01       	movw	r22, r24
    3d60:	cd 01       	movw	r24, r26
    3d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d66:	dc 01       	movw	r26, r24
    3d68:	cb 01       	movw	r24, r22
    3d6a:	f8 01       	movw	r30, r16
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	80 83       	st	Z, r24
    3d70:	1f c0       	rjmp	.+62     	; 0x3db0 <main+0x1148>
    3d72:	fe 01       	movw	r30, r28
    3d74:	eb 59       	subi	r30, 0x9B	; 155
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	88 ec       	ldi	r24, 0xC8	; 200
    3d7a:	90 e0       	ldi	r25, 0x00	; 0
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
    3d80:	fe 01       	movw	r30, r28
    3d82:	eb 59       	subi	r30, 0x9B	; 155
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	80 81       	ld	r24, Z
    3d88:	91 81       	ldd	r25, Z+1	; 0x01
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	f1 f7       	brne	.-4      	; 0x3d8a <main+0x1122>
    3d8e:	fe 01       	movw	r30, r28
    3d90:	eb 59       	subi	r30, 0x9B	; 155
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255
    3d94:	91 83       	std	Z+1, r25	; 0x01
    3d96:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d98:	de 01       	movw	r26, r28
    3d9a:	a9 59       	subi	r26, 0x99	; 153
    3d9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d9e:	fe 01       	movw	r30, r28
    3da0:	e9 59       	subi	r30, 0x99	; 153
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	80 81       	ld	r24, Z
    3da6:	91 81       	ldd	r25, Z+1	; 0x01
    3da8:	01 97       	sbiw	r24, 0x01	; 1
    3daa:	11 96       	adiw	r26, 0x01	; 1
    3dac:	9c 93       	st	X, r25
    3dae:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3db0:	fe 01       	movw	r30, r28
    3db2:	e9 59       	subi	r30, 0x99	; 153
    3db4:	ff 4f       	sbci	r31, 0xFF	; 255
    3db6:	80 81       	ld	r24, Z
    3db8:	91 81       	ldd	r25, Z+1	; 0x01
    3dba:	00 97       	sbiw	r24, 0x00	; 0
    3dbc:	d1 f6       	brne	.-76     	; 0x3d72 <main+0x110a>
    3dbe:	27 c0       	rjmp	.+78     	; 0x3e0e <main+0x11a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dc0:	8e 01       	movw	r16, r28
    3dc2:	09 59       	subi	r16, 0x99	; 153
    3dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	e7 59       	subi	r30, 0x97	; 151
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	60 81       	ld	r22, Z
    3dce:	71 81       	ldd	r23, Z+1	; 0x01
    3dd0:	82 81       	ldd	r24, Z+2	; 0x02
    3dd2:	93 81       	ldd	r25, Z+3	; 0x03
    3dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dd8:	dc 01       	movw	r26, r24
    3dda:	cb 01       	movw	r24, r22
    3ddc:	f8 01       	movw	r30, r16
    3dde:	91 83       	std	Z+1, r25	; 0x01
    3de0:	80 83       	st	Z, r24
    3de2:	de 01       	movw	r26, r28
    3de4:	ad 59       	subi	r26, 0x9D	; 157
    3de6:	bf 4f       	sbci	r27, 0xFF	; 255
    3de8:	fe 01       	movw	r30, r28
    3dea:	e9 59       	subi	r30, 0x99	; 153
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	80 81       	ld	r24, Z
    3df0:	91 81       	ldd	r25, Z+1	; 0x01
    3df2:	8d 93       	st	X+, r24
    3df4:	9c 93       	st	X, r25
    3df6:	fe 01       	movw	r30, r28
    3df8:	ed 59       	subi	r30, 0x9D	; 157
    3dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfc:	80 81       	ld	r24, Z
    3dfe:	91 81       	ldd	r25, Z+1	; 0x01
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <main+0x1198>
    3e04:	fe 01       	movw	r30, r28
    3e06:	ed 59       	subi	r30, 0x9D	; 157
    3e08:	ff 4f       	sbci	r31, 0xFF	; 255
    3e0a:	91 83       	std	Z+1, r25	; 0x01
    3e0c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,14);
    3e0e:	28 e6       	ldi	r18, 0x68	; 104
    3e10:	30 e0       	ldi	r19, 0x00	; 0
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	b9 01       	movw	r22, r18
    3e16:	41 e0       	ldi	r20, 0x01	; 1
    3e18:	2e e0       	ldi	r18, 0x0E	; 14
    3e1a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    3e1e:	c8 c3       	rjmp	.+1936   	; 0x45b0 <main+0x1948>
			}
			else if(Local_u16AnalogValue > 4100)
    3e20:	fe 01       	movw	r30, r28
    3e22:	e3 50       	subi	r30, 0x03	; 3
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	80 81       	ld	r24, Z
    3e28:	91 81       	ldd	r25, Z+1	; 0x01
    3e2a:	f0 e1       	ldi	r31, 0x10	; 16
    3e2c:	85 30       	cpi	r24, 0x05	; 5
    3e2e:	9f 07       	cpc	r25, r31
    3e30:	08 f4       	brcc	.+2      	; 0x3e34 <main+0x11cc>
    3e32:	be c0       	rjmp	.+380    	; 0x3fb0 <main+0x1348>
			{
				LCD_voidClearScreen();
    3e34:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e1 5a       	subi	r30, 0xA1	; 161
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	a0 ea       	ldi	r26, 0xA0	; 160
    3e44:	b1 e4       	ldi	r27, 0x41	; 65
    3e46:	80 83       	st	Z, r24
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	a2 83       	std	Z+2, r26	; 0x02
    3e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e4e:	8e 01       	movw	r16, r28
    3e50:	05 5a       	subi	r16, 0xA5	; 165
    3e52:	1f 4f       	sbci	r17, 0xFF	; 255
    3e54:	fe 01       	movw	r30, r28
    3e56:	e1 5a       	subi	r30, 0xA1	; 161
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	60 81       	ld	r22, Z
    3e5c:	71 81       	ldd	r23, Z+1	; 0x01
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	4a ef       	ldi	r20, 0xFA	; 250
    3e68:	54 e4       	ldi	r21, 0x44	; 68
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	f8 01       	movw	r30, r16
    3e74:	80 83       	st	Z, r24
    3e76:	91 83       	std	Z+1, r25	; 0x01
    3e78:	a2 83       	std	Z+2, r26	; 0x02
    3e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e5 5a       	subi	r30, 0xA5	; 165
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e8       	ldi	r20, 0x80	; 128
    3e90:	5f e3       	ldi	r21, 0x3F	; 63
    3e92:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e96:	88 23       	and	r24, r24
    3e98:	44 f4       	brge	.+16     	; 0x3eaa <main+0x1242>
		__ticks = 1;
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	e7 5a       	subi	r30, 0xA7	; 167
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	91 83       	std	Z+1, r25	; 0x01
    3ea6:	80 83       	st	Z, r24
    3ea8:	64 c0       	rjmp	.+200    	; 0x3f72 <main+0x130a>
	else if (__tmp > 65535)
    3eaa:	fe 01       	movw	r30, r28
    3eac:	e5 5a       	subi	r30, 0xA5	; 165
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	60 81       	ld	r22, Z
    3eb2:	71 81       	ldd	r23, Z+1	; 0x01
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	93 81       	ldd	r25, Z+3	; 0x03
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	3f ef       	ldi	r19, 0xFF	; 255
    3ebc:	4f e7       	ldi	r20, 0x7F	; 127
    3ebe:	57 e4       	ldi	r21, 0x47	; 71
    3ec0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ec4:	18 16       	cp	r1, r24
    3ec6:	0c f0       	brlt	.+2      	; 0x3eca <main+0x1262>
    3ec8:	43 c0       	rjmp	.+134    	; 0x3f50 <main+0x12e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eca:	fe 01       	movw	r30, r28
    3ecc:	e1 5a       	subi	r30, 0xA1	; 161
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	60 81       	ld	r22, Z
    3ed2:	71 81       	ldd	r23, Z+1	; 0x01
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e2       	ldi	r20, 0x20	; 32
    3ede:	51 e4       	ldi	r21, 0x41	; 65
    3ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	8e 01       	movw	r16, r28
    3eea:	07 5a       	subi	r16, 0xA7	; 167
    3eec:	1f 4f       	sbci	r17, 0xFF	; 255
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	f8 01       	movw	r30, r16
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24
    3f00:	1f c0       	rjmp	.+62     	; 0x3f40 <main+0x12d8>
    3f02:	fe 01       	movw	r30, r28
    3f04:	e9 5a       	subi	r30, 0xA9	; 169
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	88 ec       	ldi	r24, 0xC8	; 200
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	80 83       	st	Z, r24
    3f10:	fe 01       	movw	r30, r28
    3f12:	e9 5a       	subi	r30, 0xA9	; 169
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <main+0x12b2>
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e9 5a       	subi	r30, 0xA9	; 169
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f28:	de 01       	movw	r26, r28
    3f2a:	a7 5a       	subi	r26, 0xA7	; 167
    3f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2e:	fe 01       	movw	r30, r28
    3f30:	e7 5a       	subi	r30, 0xA7	; 167
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	91 81       	ldd	r25, Z+1	; 0x01
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	11 96       	adiw	r26, 0x01	; 1
    3f3c:	9c 93       	st	X, r25
    3f3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f40:	fe 01       	movw	r30, r28
    3f42:	e7 5a       	subi	r30, 0xA7	; 167
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	00 97       	sbiw	r24, 0x00	; 0
    3f4c:	d1 f6       	brne	.-76     	; 0x3f02 <main+0x129a>
    3f4e:	27 c0       	rjmp	.+78     	; 0x3f9e <main+0x1336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f50:	8e 01       	movw	r16, r28
    3f52:	07 5a       	subi	r16, 0xA7	; 167
    3f54:	1f 4f       	sbci	r17, 0xFF	; 255
    3f56:	fe 01       	movw	r30, r28
    3f58:	e5 5a       	subi	r30, 0xA5	; 165
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	f8 01       	movw	r30, r16
    3f6e:	91 83       	std	Z+1, r25	; 0x01
    3f70:	80 83       	st	Z, r24
    3f72:	de 01       	movw	r26, r28
    3f74:	ab 5a       	subi	r26, 0xAB	; 171
    3f76:	bf 4f       	sbci	r27, 0xFF	; 255
    3f78:	fe 01       	movw	r30, r28
    3f7a:	e7 5a       	subi	r30, 0xA7	; 167
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	80 81       	ld	r24, Z
    3f80:	91 81       	ldd	r25, Z+1	; 0x01
    3f82:	8d 93       	st	X+, r24
    3f84:	9c 93       	st	X, r25
    3f86:	fe 01       	movw	r30, r28
    3f88:	eb 5a       	subi	r30, 0xAB	; 171
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <main+0x1328>
    3f94:	fe 01       	movw	r30, r28
    3f96:	eb 5a       	subi	r30, 0xAB	; 171
    3f98:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,13);
    3f9e:	28 e6       	ldi	r18, 0x68	; 104
    3fa0:	30 e0       	ldi	r19, 0x00	; 0
    3fa2:	80 e0       	ldi	r24, 0x00	; 0
    3fa4:	b9 01       	movw	r22, r18
    3fa6:	41 e0       	ldi	r20, 0x01	; 1
    3fa8:	2d e0       	ldi	r18, 0x0D	; 13
    3faa:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    3fae:	00 c3       	rjmp	.+1536   	; 0x45b0 <main+0x1948>
			}
			else if(Local_u16AnalogValue > 3800)
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e3 50       	subi	r30, 0x03	; 3
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	91 81       	ldd	r25, Z+1	; 0x01
    3fba:	fe e0       	ldi	r31, 0x0E	; 14
    3fbc:	89 3d       	cpi	r24, 0xD9	; 217
    3fbe:	9f 07       	cpc	r25, r31
    3fc0:	08 f4       	brcc	.+2      	; 0x3fc4 <main+0x135c>
    3fc2:	be c0       	rjmp	.+380    	; 0x4140 <main+0x14d8>
			{
				LCD_voidClearScreen();
    3fc4:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    3fc8:	fe 01       	movw	r30, r28
    3fca:	ef 5a       	subi	r30, 0xAF	; 175
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	80 e0       	ldi	r24, 0x00	; 0
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	a0 ea       	ldi	r26, 0xA0	; 160
    3fd4:	b1 e4       	ldi	r27, 0x41	; 65
    3fd6:	80 83       	st	Z, r24
    3fd8:	91 83       	std	Z+1, r25	; 0x01
    3fda:	a2 83       	std	Z+2, r26	; 0x02
    3fdc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fde:	8e 01       	movw	r16, r28
    3fe0:	03 5b       	subi	r16, 0xB3	; 179
    3fe2:	1f 4f       	sbci	r17, 0xFF	; 255
    3fe4:	fe 01       	movw	r30, r28
    3fe6:	ef 5a       	subi	r30, 0xAF	; 175
    3fe8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fea:	60 81       	ld	r22, Z
    3fec:	71 81       	ldd	r23, Z+1	; 0x01
    3fee:	82 81       	ldd	r24, Z+2	; 0x02
    3ff0:	93 81       	ldd	r25, Z+3	; 0x03
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	4a ef       	ldi	r20, 0xFA	; 250
    3ff8:	54 e4       	ldi	r21, 0x44	; 68
    3ffa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	f8 01       	movw	r30, r16
    4004:	80 83       	st	Z, r24
    4006:	91 83       	std	Z+1, r25	; 0x01
    4008:	a2 83       	std	Z+2, r26	; 0x02
    400a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    400c:	fe 01       	movw	r30, r28
    400e:	e3 5b       	subi	r30, 0xB3	; 179
    4010:	ff 4f       	sbci	r31, 0xFF	; 255
    4012:	60 81       	ld	r22, Z
    4014:	71 81       	ldd	r23, Z+1	; 0x01
    4016:	82 81       	ldd	r24, Z+2	; 0x02
    4018:	93 81       	ldd	r25, Z+3	; 0x03
    401a:	20 e0       	ldi	r18, 0x00	; 0
    401c:	30 e0       	ldi	r19, 0x00	; 0
    401e:	40 e8       	ldi	r20, 0x80	; 128
    4020:	5f e3       	ldi	r21, 0x3F	; 63
    4022:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4026:	88 23       	and	r24, r24
    4028:	44 f4       	brge	.+16     	; 0x403a <main+0x13d2>
		__ticks = 1;
    402a:	fe 01       	movw	r30, r28
    402c:	e5 5b       	subi	r30, 0xB5	; 181
    402e:	ff 4f       	sbci	r31, 0xFF	; 255
    4030:	81 e0       	ldi	r24, 0x01	; 1
    4032:	90 e0       	ldi	r25, 0x00	; 0
    4034:	91 83       	std	Z+1, r25	; 0x01
    4036:	80 83       	st	Z, r24
    4038:	64 c0       	rjmp	.+200    	; 0x4102 <main+0x149a>
	else if (__tmp > 65535)
    403a:	fe 01       	movw	r30, r28
    403c:	e3 5b       	subi	r30, 0xB3	; 179
    403e:	ff 4f       	sbci	r31, 0xFF	; 255
    4040:	60 81       	ld	r22, Z
    4042:	71 81       	ldd	r23, Z+1	; 0x01
    4044:	82 81       	ldd	r24, Z+2	; 0x02
    4046:	93 81       	ldd	r25, Z+3	; 0x03
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	3f ef       	ldi	r19, 0xFF	; 255
    404c:	4f e7       	ldi	r20, 0x7F	; 127
    404e:	57 e4       	ldi	r21, 0x47	; 71
    4050:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4054:	18 16       	cp	r1, r24
    4056:	0c f0       	brlt	.+2      	; 0x405a <main+0x13f2>
    4058:	43 c0       	rjmp	.+134    	; 0x40e0 <main+0x1478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    405a:	fe 01       	movw	r30, r28
    405c:	ef 5a       	subi	r30, 0xAF	; 175
    405e:	ff 4f       	sbci	r31, 0xFF	; 255
    4060:	60 81       	ld	r22, Z
    4062:	71 81       	ldd	r23, Z+1	; 0x01
    4064:	82 81       	ldd	r24, Z+2	; 0x02
    4066:	93 81       	ldd	r25, Z+3	; 0x03
    4068:	20 e0       	ldi	r18, 0x00	; 0
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e2       	ldi	r20, 0x20	; 32
    406e:	51 e4       	ldi	r21, 0x41	; 65
    4070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4074:	dc 01       	movw	r26, r24
    4076:	cb 01       	movw	r24, r22
    4078:	8e 01       	movw	r16, r28
    407a:	05 5b       	subi	r16, 0xB5	; 181
    407c:	1f 4f       	sbci	r17, 0xFF	; 255
    407e:	bc 01       	movw	r22, r24
    4080:	cd 01       	movw	r24, r26
    4082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	f8 01       	movw	r30, r16
    408c:	91 83       	std	Z+1, r25	; 0x01
    408e:	80 83       	st	Z, r24
    4090:	1f c0       	rjmp	.+62     	; 0x40d0 <main+0x1468>
    4092:	fe 01       	movw	r30, r28
    4094:	e7 5b       	subi	r30, 0xB7	; 183
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	88 ec       	ldi	r24, 0xC8	; 200
    409a:	90 e0       	ldi	r25, 0x00	; 0
    409c:	91 83       	std	Z+1, r25	; 0x01
    409e:	80 83       	st	Z, r24
    40a0:	fe 01       	movw	r30, r28
    40a2:	e7 5b       	subi	r30, 0xB7	; 183
    40a4:	ff 4f       	sbci	r31, 0xFF	; 255
    40a6:	80 81       	ld	r24, Z
    40a8:	91 81       	ldd	r25, Z+1	; 0x01
    40aa:	01 97       	sbiw	r24, 0x01	; 1
    40ac:	f1 f7       	brne	.-4      	; 0x40aa <main+0x1442>
    40ae:	fe 01       	movw	r30, r28
    40b0:	e7 5b       	subi	r30, 0xB7	; 183
    40b2:	ff 4f       	sbci	r31, 0xFF	; 255
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40b8:	de 01       	movw	r26, r28
    40ba:	a5 5b       	subi	r26, 0xB5	; 181
    40bc:	bf 4f       	sbci	r27, 0xFF	; 255
    40be:	fe 01       	movw	r30, r28
    40c0:	e5 5b       	subi	r30, 0xB5	; 181
    40c2:	ff 4f       	sbci	r31, 0xFF	; 255
    40c4:	80 81       	ld	r24, Z
    40c6:	91 81       	ldd	r25, Z+1	; 0x01
    40c8:	01 97       	sbiw	r24, 0x01	; 1
    40ca:	11 96       	adiw	r26, 0x01	; 1
    40cc:	9c 93       	st	X, r25
    40ce:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d0:	fe 01       	movw	r30, r28
    40d2:	e5 5b       	subi	r30, 0xB5	; 181
    40d4:	ff 4f       	sbci	r31, 0xFF	; 255
    40d6:	80 81       	ld	r24, Z
    40d8:	91 81       	ldd	r25, Z+1	; 0x01
    40da:	00 97       	sbiw	r24, 0x00	; 0
    40dc:	d1 f6       	brne	.-76     	; 0x4092 <main+0x142a>
    40de:	27 c0       	rjmp	.+78     	; 0x412e <main+0x14c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e0:	8e 01       	movw	r16, r28
    40e2:	05 5b       	subi	r16, 0xB5	; 181
    40e4:	1f 4f       	sbci	r17, 0xFF	; 255
    40e6:	fe 01       	movw	r30, r28
    40e8:	e3 5b       	subi	r30, 0xB3	; 179
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	60 81       	ld	r22, Z
    40ee:	71 81       	ldd	r23, Z+1	; 0x01
    40f0:	82 81       	ldd	r24, Z+2	; 0x02
    40f2:	93 81       	ldd	r25, Z+3	; 0x03
    40f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40f8:	dc 01       	movw	r26, r24
    40fa:	cb 01       	movw	r24, r22
    40fc:	f8 01       	movw	r30, r16
    40fe:	91 83       	std	Z+1, r25	; 0x01
    4100:	80 83       	st	Z, r24
    4102:	de 01       	movw	r26, r28
    4104:	a9 5b       	subi	r26, 0xB9	; 185
    4106:	bf 4f       	sbci	r27, 0xFF	; 255
    4108:	fe 01       	movw	r30, r28
    410a:	e5 5b       	subi	r30, 0xB5	; 181
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	8d 93       	st	X+, r24
    4114:	9c 93       	st	X, r25
    4116:	fe 01       	movw	r30, r28
    4118:	e9 5b       	subi	r30, 0xB9	; 185
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	80 81       	ld	r24, Z
    411e:	91 81       	ldd	r25, Z+1	; 0x01
    4120:	01 97       	sbiw	r24, 0x01	; 1
    4122:	f1 f7       	brne	.-4      	; 0x4120 <main+0x14b8>
    4124:	fe 01       	movw	r30, r28
    4126:	e9 5b       	subi	r30, 0xB9	; 185
    4128:	ff 4f       	sbci	r31, 0xFF	; 255
    412a:	91 83       	std	Z+1, r25	; 0x01
    412c:	80 83       	st	Z, r24
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,12);
    412e:	28 e6       	ldi	r18, 0x68	; 104
    4130:	30 e0       	ldi	r19, 0x00	; 0
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	b9 01       	movw	r22, r18
    4136:	41 e0       	ldi	r20, 0x01	; 1
    4138:	2c e0       	ldi	r18, 0x0C	; 12
    413a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    413e:	38 c2       	rjmp	.+1136   	; 0x45b0 <main+0x1948>
			}
			else if( Local_u16AnalogValue > 3500)
    4140:	fe 01       	movw	r30, r28
    4142:	e3 50       	subi	r30, 0x03	; 3
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	80 81       	ld	r24, Z
    4148:	91 81       	ldd	r25, Z+1	; 0x01
    414a:	fd e0       	ldi	r31, 0x0D	; 13
    414c:	8d 3a       	cpi	r24, 0xAD	; 173
    414e:	9f 07       	cpc	r25, r31
    4150:	08 f4       	brcc	.+2      	; 0x4154 <main+0x14ec>
    4152:	90 c0       	rjmp	.+288    	; 0x4274 <main+0x160c>
			{
				LCD_voidClearScreen();
    4154:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    4158:	fe 01       	movw	r30, r28
    415a:	ed 5b       	subi	r30, 0xBD	; 189
    415c:	ff 4f       	sbci	r31, 0xFF	; 255
    415e:	80 e0       	ldi	r24, 0x00	; 0
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	a0 ea       	ldi	r26, 0xA0	; 160
    4164:	b1 e4       	ldi	r27, 0x41	; 65
    4166:	80 83       	st	Z, r24
    4168:	91 83       	std	Z+1, r25	; 0x01
    416a:	a2 83       	std	Z+2, r26	; 0x02
    416c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    416e:	8e 01       	movw	r16, r28
    4170:	01 5c       	subi	r16, 0xC1	; 193
    4172:	1f 4f       	sbci	r17, 0xFF	; 255
    4174:	fe 01       	movw	r30, r28
    4176:	ed 5b       	subi	r30, 0xBD	; 189
    4178:	ff 4f       	sbci	r31, 0xFF	; 255
    417a:	60 81       	ld	r22, Z
    417c:	71 81       	ldd	r23, Z+1	; 0x01
    417e:	82 81       	ldd	r24, Z+2	; 0x02
    4180:	93 81       	ldd	r25, Z+3	; 0x03
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	30 e0       	ldi	r19, 0x00	; 0
    4186:	4a ef       	ldi	r20, 0xFA	; 250
    4188:	54 e4       	ldi	r21, 0x44	; 68
    418a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    418e:	dc 01       	movw	r26, r24
    4190:	cb 01       	movw	r24, r22
    4192:	f8 01       	movw	r30, r16
    4194:	80 83       	st	Z, r24
    4196:	91 83       	std	Z+1, r25	; 0x01
    4198:	a2 83       	std	Z+2, r26	; 0x02
    419a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    419c:	fe 01       	movw	r30, r28
    419e:	ff 96       	adiw	r30, 0x3f	; 63
    41a0:	60 81       	ld	r22, Z
    41a2:	71 81       	ldd	r23, Z+1	; 0x01
    41a4:	82 81       	ldd	r24, Z+2	; 0x02
    41a6:	93 81       	ldd	r25, Z+3	; 0x03
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	40 e8       	ldi	r20, 0x80	; 128
    41ae:	5f e3       	ldi	r21, 0x3F	; 63
    41b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    41b4:	88 23       	and	r24, r24
    41b6:	2c f4       	brge	.+10     	; 0x41c2 <main+0x155a>
		__ticks = 1;
    41b8:	81 e0       	ldi	r24, 0x01	; 1
    41ba:	90 e0       	ldi	r25, 0x00	; 0
    41bc:	9e af       	std	Y+62, r25	; 0x3e
    41be:	8d af       	std	Y+61, r24	; 0x3d
    41c0:	46 c0       	rjmp	.+140    	; 0x424e <main+0x15e6>
	else if (__tmp > 65535)
    41c2:	fe 01       	movw	r30, r28
    41c4:	ff 96       	adiw	r30, 0x3f	; 63
    41c6:	60 81       	ld	r22, Z
    41c8:	71 81       	ldd	r23, Z+1	; 0x01
    41ca:	82 81       	ldd	r24, Z+2	; 0x02
    41cc:	93 81       	ldd	r25, Z+3	; 0x03
    41ce:	20 e0       	ldi	r18, 0x00	; 0
    41d0:	3f ef       	ldi	r19, 0xFF	; 255
    41d2:	4f e7       	ldi	r20, 0x7F	; 127
    41d4:	57 e4       	ldi	r21, 0x47	; 71
    41d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    41da:	18 16       	cp	r1, r24
    41dc:	64 f5       	brge	.+88     	; 0x4236 <main+0x15ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41de:	fe 01       	movw	r30, r28
    41e0:	ed 5b       	subi	r30, 0xBD	; 189
    41e2:	ff 4f       	sbci	r31, 0xFF	; 255
    41e4:	60 81       	ld	r22, Z
    41e6:	71 81       	ldd	r23, Z+1	; 0x01
    41e8:	82 81       	ldd	r24, Z+2	; 0x02
    41ea:	93 81       	ldd	r25, Z+3	; 0x03
    41ec:	20 e0       	ldi	r18, 0x00	; 0
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	40 e2       	ldi	r20, 0x20	; 32
    41f2:	51 e4       	ldi	r21, 0x41	; 65
    41f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41f8:	dc 01       	movw	r26, r24
    41fa:	cb 01       	movw	r24, r22
    41fc:	bc 01       	movw	r22, r24
    41fe:	cd 01       	movw	r24, r26
    4200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4204:	dc 01       	movw	r26, r24
    4206:	cb 01       	movw	r24, r22
    4208:	9e af       	std	Y+62, r25	; 0x3e
    420a:	8d af       	std	Y+61, r24	; 0x3d
    420c:	0f c0       	rjmp	.+30     	; 0x422c <main+0x15c4>
    420e:	88 ec       	ldi	r24, 0xC8	; 200
    4210:	90 e0       	ldi	r25, 0x00	; 0
    4212:	9c af       	std	Y+60, r25	; 0x3c
    4214:	8b af       	std	Y+59, r24	; 0x3b
    4216:	8b ad       	ldd	r24, Y+59	; 0x3b
    4218:	9c ad       	ldd	r25, Y+60	; 0x3c
    421a:	01 97       	sbiw	r24, 0x01	; 1
    421c:	f1 f7       	brne	.-4      	; 0x421a <main+0x15b2>
    421e:	9c af       	std	Y+60, r25	; 0x3c
    4220:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4222:	8d ad       	ldd	r24, Y+61	; 0x3d
    4224:	9e ad       	ldd	r25, Y+62	; 0x3e
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	9e af       	std	Y+62, r25	; 0x3e
    422a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    422c:	8d ad       	ldd	r24, Y+61	; 0x3d
    422e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4230:	00 97       	sbiw	r24, 0x00	; 0
    4232:	69 f7       	brne	.-38     	; 0x420e <main+0x15a6>
    4234:	16 c0       	rjmp	.+44     	; 0x4262 <main+0x15fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4236:	fe 01       	movw	r30, r28
    4238:	ff 96       	adiw	r30, 0x3f	; 63
    423a:	60 81       	ld	r22, Z
    423c:	71 81       	ldd	r23, Z+1	; 0x01
    423e:	82 81       	ldd	r24, Z+2	; 0x02
    4240:	93 81       	ldd	r25, Z+3	; 0x03
    4242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4246:	dc 01       	movw	r26, r24
    4248:	cb 01       	movw	r24, r22
    424a:	9e af       	std	Y+62, r25	; 0x3e
    424c:	8d af       	std	Y+61, r24	; 0x3d
    424e:	8d ad       	ldd	r24, Y+61	; 0x3d
    4250:	9e ad       	ldd	r25, Y+62	; 0x3e
    4252:	9a af       	std	Y+58, r25	; 0x3a
    4254:	89 af       	std	Y+57, r24	; 0x39
    4256:	89 ad       	ldd	r24, Y+57	; 0x39
    4258:	9a ad       	ldd	r25, Y+58	; 0x3a
    425a:	01 97       	sbiw	r24, 0x01	; 1
    425c:	f1 f7       	brne	.-4      	; 0x425a <main+0x15f2>
    425e:	9a af       	std	Y+58, r25	; 0x3a
    4260:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,11);
    4262:	28 e6       	ldi	r18, 0x68	; 104
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	80 e0       	ldi	r24, 0x00	; 0
    4268:	b9 01       	movw	r22, r18
    426a:	41 e0       	ldi	r20, 0x01	; 1
    426c:	2b e0       	ldi	r18, 0x0B	; 11
    426e:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    4272:	9e c1       	rjmp	.+828    	; 0x45b0 <main+0x1948>
			}
			else if(Local_u16AnalogValue > 3200)
    4274:	fe 01       	movw	r30, r28
    4276:	e3 50       	subi	r30, 0x03	; 3
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	80 81       	ld	r24, Z
    427c:	91 81       	ldd	r25, Z+1	; 0x01
    427e:	fc e0       	ldi	r31, 0x0C	; 12
    4280:	81 38       	cpi	r24, 0x81	; 129
    4282:	9f 07       	cpc	r25, r31
    4284:	08 f4       	brcc	.+2      	; 0x4288 <main+0x1620>
    4286:	7d c0       	rjmp	.+250    	; 0x4382 <main+0x171a>
			{
				LCD_voidClearScreen();
    4288:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    428c:	80 e0       	ldi	r24, 0x00	; 0
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	a0 ea       	ldi	r26, 0xA0	; 160
    4292:	b1 e4       	ldi	r27, 0x41	; 65
    4294:	8d ab       	std	Y+53, r24	; 0x35
    4296:	9e ab       	std	Y+54, r25	; 0x36
    4298:	af ab       	std	Y+55, r26	; 0x37
    429a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    429c:	6d a9       	ldd	r22, Y+53	; 0x35
    429e:	7e a9       	ldd	r23, Y+54	; 0x36
    42a0:	8f a9       	ldd	r24, Y+55	; 0x37
    42a2:	98 ad       	ldd	r25, Y+56	; 0x38
    42a4:	20 e0       	ldi	r18, 0x00	; 0
    42a6:	30 e0       	ldi	r19, 0x00	; 0
    42a8:	4a ef       	ldi	r20, 0xFA	; 250
    42aa:	54 e4       	ldi	r21, 0x44	; 68
    42ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b0:	dc 01       	movw	r26, r24
    42b2:	cb 01       	movw	r24, r22
    42b4:	89 ab       	std	Y+49, r24	; 0x31
    42b6:	9a ab       	std	Y+50, r25	; 0x32
    42b8:	ab ab       	std	Y+51, r26	; 0x33
    42ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    42bc:	69 a9       	ldd	r22, Y+49	; 0x31
    42be:	7a a9       	ldd	r23, Y+50	; 0x32
    42c0:	8b a9       	ldd	r24, Y+51	; 0x33
    42c2:	9c a9       	ldd	r25, Y+52	; 0x34
    42c4:	20 e0       	ldi	r18, 0x00	; 0
    42c6:	30 e0       	ldi	r19, 0x00	; 0
    42c8:	40 e8       	ldi	r20, 0x80	; 128
    42ca:	5f e3       	ldi	r21, 0x3F	; 63
    42cc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42d0:	88 23       	and	r24, r24
    42d2:	2c f4       	brge	.+10     	; 0x42de <main+0x1676>
		__ticks = 1;
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	98 ab       	std	Y+48, r25	; 0x30
    42da:	8f a7       	std	Y+47, r24	; 0x2f
    42dc:	3f c0       	rjmp	.+126    	; 0x435c <main+0x16f4>
	else if (__tmp > 65535)
    42de:	69 a9       	ldd	r22, Y+49	; 0x31
    42e0:	7a a9       	ldd	r23, Y+50	; 0x32
    42e2:	8b a9       	ldd	r24, Y+51	; 0x33
    42e4:	9c a9       	ldd	r25, Y+52	; 0x34
    42e6:	20 e0       	ldi	r18, 0x00	; 0
    42e8:	3f ef       	ldi	r19, 0xFF	; 255
    42ea:	4f e7       	ldi	r20, 0x7F	; 127
    42ec:	57 e4       	ldi	r21, 0x47	; 71
    42ee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42f2:	18 16       	cp	r1, r24
    42f4:	4c f5       	brge	.+82     	; 0x4348 <main+0x16e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42f6:	6d a9       	ldd	r22, Y+53	; 0x35
    42f8:	7e a9       	ldd	r23, Y+54	; 0x36
    42fa:	8f a9       	ldd	r24, Y+55	; 0x37
    42fc:	98 ad       	ldd	r25, Y+56	; 0x38
    42fe:	20 e0       	ldi	r18, 0x00	; 0
    4300:	30 e0       	ldi	r19, 0x00	; 0
    4302:	40 e2       	ldi	r20, 0x20	; 32
    4304:	51 e4       	ldi	r21, 0x41	; 65
    4306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    430a:	dc 01       	movw	r26, r24
    430c:	cb 01       	movw	r24, r22
    430e:	bc 01       	movw	r22, r24
    4310:	cd 01       	movw	r24, r26
    4312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4316:	dc 01       	movw	r26, r24
    4318:	cb 01       	movw	r24, r22
    431a:	98 ab       	std	Y+48, r25	; 0x30
    431c:	8f a7       	std	Y+47, r24	; 0x2f
    431e:	0f c0       	rjmp	.+30     	; 0x433e <main+0x16d6>
    4320:	88 ec       	ldi	r24, 0xC8	; 200
    4322:	90 e0       	ldi	r25, 0x00	; 0
    4324:	9e a7       	std	Y+46, r25	; 0x2e
    4326:	8d a7       	std	Y+45, r24	; 0x2d
    4328:	8d a5       	ldd	r24, Y+45	; 0x2d
    432a:	9e a5       	ldd	r25, Y+46	; 0x2e
    432c:	01 97       	sbiw	r24, 0x01	; 1
    432e:	f1 f7       	brne	.-4      	; 0x432c <main+0x16c4>
    4330:	9e a7       	std	Y+46, r25	; 0x2e
    4332:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4334:	8f a5       	ldd	r24, Y+47	; 0x2f
    4336:	98 a9       	ldd	r25, Y+48	; 0x30
    4338:	01 97       	sbiw	r24, 0x01	; 1
    433a:	98 ab       	std	Y+48, r25	; 0x30
    433c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    433e:	8f a5       	ldd	r24, Y+47	; 0x2f
    4340:	98 a9       	ldd	r25, Y+48	; 0x30
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	69 f7       	brne	.-38     	; 0x4320 <main+0x16b8>
    4346:	14 c0       	rjmp	.+40     	; 0x4370 <main+0x1708>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4348:	69 a9       	ldd	r22, Y+49	; 0x31
    434a:	7a a9       	ldd	r23, Y+50	; 0x32
    434c:	8b a9       	ldd	r24, Y+51	; 0x33
    434e:	9c a9       	ldd	r25, Y+52	; 0x34
    4350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4354:	dc 01       	movw	r26, r24
    4356:	cb 01       	movw	r24, r22
    4358:	98 ab       	std	Y+48, r25	; 0x30
    435a:	8f a7       	std	Y+47, r24	; 0x2f
    435c:	8f a5       	ldd	r24, Y+47	; 0x2f
    435e:	98 a9       	ldd	r25, Y+48	; 0x30
    4360:	9c a7       	std	Y+44, r25	; 0x2c
    4362:	8b a7       	std	Y+43, r24	; 0x2b
    4364:	8b a5       	ldd	r24, Y+43	; 0x2b
    4366:	9c a5       	ldd	r25, Y+44	; 0x2c
    4368:	01 97       	sbiw	r24, 0x01	; 1
    436a:	f1 f7       	brne	.-4      	; 0x4368 <main+0x1700>
    436c:	9c a7       	std	Y+44, r25	; 0x2c
    436e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,10);
    4370:	28 e6       	ldi	r18, 0x68	; 104
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	80 e0       	ldi	r24, 0x00	; 0
    4376:	b9 01       	movw	r22, r18
    4378:	41 e0       	ldi	r20, 0x01	; 1
    437a:	2a e0       	ldi	r18, 0x0A	; 10
    437c:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    4380:	17 c1       	rjmp	.+558    	; 0x45b0 <main+0x1948>
			}
			else if(Local_u16AnalogValue > 2900)
    4382:	fe 01       	movw	r30, r28
    4384:	e3 50       	subi	r30, 0x03	; 3
    4386:	ff 4f       	sbci	r31, 0xFF	; 255
    4388:	80 81       	ld	r24, Z
    438a:	91 81       	ldd	r25, Z+1	; 0x01
    438c:	2b e0       	ldi	r18, 0x0B	; 11
    438e:	85 35       	cpi	r24, 0x55	; 85
    4390:	92 07       	cpc	r25, r18
    4392:	08 f4       	brcc	.+2      	; 0x4396 <main+0x172e>
    4394:	7d c0       	rjmp	.+250    	; 0x4490 <main+0x1828>
			{
				LCD_voidClearScreen();
    4396:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	a0 ea       	ldi	r26, 0xA0	; 160
    43a0:	b1 e4       	ldi	r27, 0x41	; 65
    43a2:	8f a3       	std	Y+39, r24	; 0x27
    43a4:	98 a7       	std	Y+40, r25	; 0x28
    43a6:	a9 a7       	std	Y+41, r26	; 0x29
    43a8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43aa:	6f a1       	ldd	r22, Y+39	; 0x27
    43ac:	78 a5       	ldd	r23, Y+40	; 0x28
    43ae:	89 a5       	ldd	r24, Y+41	; 0x29
    43b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	4a ef       	ldi	r20, 0xFA	; 250
    43b8:	54 e4       	ldi	r21, 0x44	; 68
    43ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	8b a3       	std	Y+35, r24	; 0x23
    43c4:	9c a3       	std	Y+36, r25	; 0x24
    43c6:	ad a3       	std	Y+37, r26	; 0x25
    43c8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    43ca:	6b a1       	ldd	r22, Y+35	; 0x23
    43cc:	7c a1       	ldd	r23, Y+36	; 0x24
    43ce:	8d a1       	ldd	r24, Y+37	; 0x25
    43d0:	9e a1       	ldd	r25, Y+38	; 0x26
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e8       	ldi	r20, 0x80	; 128
    43d8:	5f e3       	ldi	r21, 0x3F	; 63
    43da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43de:	88 23       	and	r24, r24
    43e0:	2c f4       	brge	.+10     	; 0x43ec <main+0x1784>
		__ticks = 1;
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	9a a3       	std	Y+34, r25	; 0x22
    43e8:	89 a3       	std	Y+33, r24	; 0x21
    43ea:	3f c0       	rjmp	.+126    	; 0x446a <main+0x1802>
	else if (__tmp > 65535)
    43ec:	6b a1       	ldd	r22, Y+35	; 0x23
    43ee:	7c a1       	ldd	r23, Y+36	; 0x24
    43f0:	8d a1       	ldd	r24, Y+37	; 0x25
    43f2:	9e a1       	ldd	r25, Y+38	; 0x26
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	3f ef       	ldi	r19, 0xFF	; 255
    43f8:	4f e7       	ldi	r20, 0x7F	; 127
    43fa:	57 e4       	ldi	r21, 0x47	; 71
    43fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4400:	18 16       	cp	r1, r24
    4402:	4c f5       	brge	.+82     	; 0x4456 <main+0x17ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4404:	6f a1       	ldd	r22, Y+39	; 0x27
    4406:	78 a5       	ldd	r23, Y+40	; 0x28
    4408:	89 a5       	ldd	r24, Y+41	; 0x29
    440a:	9a a5       	ldd	r25, Y+42	; 0x2a
    440c:	20 e0       	ldi	r18, 0x00	; 0
    440e:	30 e0       	ldi	r19, 0x00	; 0
    4410:	40 e2       	ldi	r20, 0x20	; 32
    4412:	51 e4       	ldi	r21, 0x41	; 65
    4414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	bc 01       	movw	r22, r24
    441e:	cd 01       	movw	r24, r26
    4420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4424:	dc 01       	movw	r26, r24
    4426:	cb 01       	movw	r24, r22
    4428:	9a a3       	std	Y+34, r25	; 0x22
    442a:	89 a3       	std	Y+33, r24	; 0x21
    442c:	0f c0       	rjmp	.+30     	; 0x444c <main+0x17e4>
    442e:	88 ec       	ldi	r24, 0xC8	; 200
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	98 a3       	std	Y+32, r25	; 0x20
    4434:	8f 8f       	std	Y+31, r24	; 0x1f
    4436:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4438:	98 a1       	ldd	r25, Y+32	; 0x20
    443a:	01 97       	sbiw	r24, 0x01	; 1
    443c:	f1 f7       	brne	.-4      	; 0x443a <main+0x17d2>
    443e:	98 a3       	std	Y+32, r25	; 0x20
    4440:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4442:	89 a1       	ldd	r24, Y+33	; 0x21
    4444:	9a a1       	ldd	r25, Y+34	; 0x22
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	9a a3       	std	Y+34, r25	; 0x22
    444a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    444c:	89 a1       	ldd	r24, Y+33	; 0x21
    444e:	9a a1       	ldd	r25, Y+34	; 0x22
    4450:	00 97       	sbiw	r24, 0x00	; 0
    4452:	69 f7       	brne	.-38     	; 0x442e <main+0x17c6>
    4454:	14 c0       	rjmp	.+40     	; 0x447e <main+0x1816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4456:	6b a1       	ldd	r22, Y+35	; 0x23
    4458:	7c a1       	ldd	r23, Y+36	; 0x24
    445a:	8d a1       	ldd	r24, Y+37	; 0x25
    445c:	9e a1       	ldd	r25, Y+38	; 0x26
    445e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4462:	dc 01       	movw	r26, r24
    4464:	cb 01       	movw	r24, r22
    4466:	9a a3       	std	Y+34, r25	; 0x22
    4468:	89 a3       	std	Y+33, r24	; 0x21
    446a:	89 a1       	ldd	r24, Y+33	; 0x21
    446c:	9a a1       	ldd	r25, Y+34	; 0x22
    446e:	9e 8f       	std	Y+30, r25	; 0x1e
    4470:	8d 8f       	std	Y+29, r24	; 0x1d
    4472:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4474:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4476:	01 97       	sbiw	r24, 0x01	; 1
    4478:	f1 f7       	brne	.-4      	; 0x4476 <main+0x180e>
    447a:	9e 8f       	std	Y+30, r25	; 0x1e
    447c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,9);
    447e:	28 e6       	ldi	r18, 0x68	; 104
    4480:	30 e0       	ldi	r19, 0x00	; 0
    4482:	80 e0       	ldi	r24, 0x00	; 0
    4484:	b9 01       	movw	r22, r18
    4486:	41 e0       	ldi	r20, 0x01	; 1
    4488:	29 e0       	ldi	r18, 0x09	; 9
    448a:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
    448e:	90 c0       	rjmp	.+288    	; 0x45b0 <main+0x1948>
			}
			else if((Local_u16AnalogValue < 2900) && (Local_u16AnalogValue > 2500))
    4490:	fe 01       	movw	r30, r28
    4492:	e3 50       	subi	r30, 0x03	; 3
    4494:	ff 4f       	sbci	r31, 0xFF	; 255
    4496:	80 81       	ld	r24, Z
    4498:	91 81       	ldd	r25, Z+1	; 0x01
    449a:	eb e0       	ldi	r30, 0x0B	; 11
    449c:	84 35       	cpi	r24, 0x54	; 84
    449e:	9e 07       	cpc	r25, r30
    44a0:	08 f0       	brcs	.+2      	; 0x44a4 <main+0x183c>
    44a2:	86 c0       	rjmp	.+268    	; 0x45b0 <main+0x1948>
    44a4:	fe 01       	movw	r30, r28
    44a6:	e3 50       	subi	r30, 0x03	; 3
    44a8:	ff 4f       	sbci	r31, 0xFF	; 255
    44aa:	80 81       	ld	r24, Z
    44ac:	91 81       	ldd	r25, Z+1	; 0x01
    44ae:	f9 e0       	ldi	r31, 0x09	; 9
    44b0:	85 3c       	cpi	r24, 0xC5	; 197
    44b2:	9f 07       	cpc	r25, r31
    44b4:	08 f4       	brcc	.+2      	; 0x44b8 <main+0x1850>
    44b6:	7c c0       	rjmp	.+248    	; 0x45b0 <main+0x1948>
			{
				LCD_voidClearScreen();
    44b8:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClearScreen>
    44bc:	80 e0       	ldi	r24, 0x00	; 0
    44be:	90 e0       	ldi	r25, 0x00	; 0
    44c0:	a0 ea       	ldi	r26, 0xA0	; 160
    44c2:	b1 e4       	ldi	r27, 0x41	; 65
    44c4:	89 8f       	std	Y+25, r24	; 0x19
    44c6:	9a 8f       	std	Y+26, r25	; 0x1a
    44c8:	ab 8f       	std	Y+27, r26	; 0x1b
    44ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44cc:	69 8d       	ldd	r22, Y+25	; 0x19
    44ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44d4:	20 e0       	ldi	r18, 0x00	; 0
    44d6:	30 e0       	ldi	r19, 0x00	; 0
    44d8:	4a ef       	ldi	r20, 0xFA	; 250
    44da:	54 e4       	ldi	r21, 0x44	; 68
    44dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44e0:	dc 01       	movw	r26, r24
    44e2:	cb 01       	movw	r24, r22
    44e4:	8d 8b       	std	Y+21, r24	; 0x15
    44e6:	9e 8b       	std	Y+22, r25	; 0x16
    44e8:	af 8b       	std	Y+23, r26	; 0x17
    44ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44ec:	6d 89       	ldd	r22, Y+21	; 0x15
    44ee:	7e 89       	ldd	r23, Y+22	; 0x16
    44f0:	8f 89       	ldd	r24, Y+23	; 0x17
    44f2:	98 8d       	ldd	r25, Y+24	; 0x18
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	40 e8       	ldi	r20, 0x80	; 128
    44fa:	5f e3       	ldi	r21, 0x3F	; 63
    44fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4500:	88 23       	and	r24, r24
    4502:	2c f4       	brge	.+10     	; 0x450e <main+0x18a6>
		__ticks = 1;
    4504:	81 e0       	ldi	r24, 0x01	; 1
    4506:	90 e0       	ldi	r25, 0x00	; 0
    4508:	9c 8b       	std	Y+20, r25	; 0x14
    450a:	8b 8b       	std	Y+19, r24	; 0x13
    450c:	3f c0       	rjmp	.+126    	; 0x458c <main+0x1924>
	else if (__tmp > 65535)
    450e:	6d 89       	ldd	r22, Y+21	; 0x15
    4510:	7e 89       	ldd	r23, Y+22	; 0x16
    4512:	8f 89       	ldd	r24, Y+23	; 0x17
    4514:	98 8d       	ldd	r25, Y+24	; 0x18
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	3f ef       	ldi	r19, 0xFF	; 255
    451a:	4f e7       	ldi	r20, 0x7F	; 127
    451c:	57 e4       	ldi	r21, 0x47	; 71
    451e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4522:	18 16       	cp	r1, r24
    4524:	4c f5       	brge	.+82     	; 0x4578 <main+0x1910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4526:	69 8d       	ldd	r22, Y+25	; 0x19
    4528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    452a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    452c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	40 e2       	ldi	r20, 0x20	; 32
    4534:	51 e4       	ldi	r21, 0x41	; 65
    4536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    453a:	dc 01       	movw	r26, r24
    453c:	cb 01       	movw	r24, r22
    453e:	bc 01       	movw	r22, r24
    4540:	cd 01       	movw	r24, r26
    4542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4546:	dc 01       	movw	r26, r24
    4548:	cb 01       	movw	r24, r22
    454a:	9c 8b       	std	Y+20, r25	; 0x14
    454c:	8b 8b       	std	Y+19, r24	; 0x13
    454e:	0f c0       	rjmp	.+30     	; 0x456e <main+0x1906>
    4550:	88 ec       	ldi	r24, 0xC8	; 200
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	9a 8b       	std	Y+18, r25	; 0x12
    4556:	89 8b       	std	Y+17, r24	; 0x11
    4558:	89 89       	ldd	r24, Y+17	; 0x11
    455a:	9a 89       	ldd	r25, Y+18	; 0x12
    455c:	01 97       	sbiw	r24, 0x01	; 1
    455e:	f1 f7       	brne	.-4      	; 0x455c <main+0x18f4>
    4560:	9a 8b       	std	Y+18, r25	; 0x12
    4562:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4564:	8b 89       	ldd	r24, Y+19	; 0x13
    4566:	9c 89       	ldd	r25, Y+20	; 0x14
    4568:	01 97       	sbiw	r24, 0x01	; 1
    456a:	9c 8b       	std	Y+20, r25	; 0x14
    456c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    456e:	8b 89       	ldd	r24, Y+19	; 0x13
    4570:	9c 89       	ldd	r25, Y+20	; 0x14
    4572:	00 97       	sbiw	r24, 0x00	; 0
    4574:	69 f7       	brne	.-38     	; 0x4550 <main+0x18e8>
    4576:	14 c0       	rjmp	.+40     	; 0x45a0 <main+0x1938>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4578:	6d 89       	ldd	r22, Y+21	; 0x15
    457a:	7e 89       	ldd	r23, Y+22	; 0x16
    457c:	8f 89       	ldd	r24, Y+23	; 0x17
    457e:	98 8d       	ldd	r25, Y+24	; 0x18
    4580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	9c 8b       	std	Y+20, r25	; 0x14
    458a:	8b 8b       	std	Y+19, r24	; 0x13
    458c:	8b 89       	ldd	r24, Y+19	; 0x13
    458e:	9c 89       	ldd	r25, Y+20	; 0x14
    4590:	98 8b       	std	Y+16, r25	; 0x10
    4592:	8f 87       	std	Y+15, r24	; 0x0f
    4594:	8f 85       	ldd	r24, Y+15	; 0x0f
    4596:	98 89       	ldd	r25, Y+16	; 0x10
    4598:	01 97       	sbiw	r24, 0x01	; 1
    459a:	f1 f7       	brne	.-4      	; 0x4598 <main+0x1930>
    459c:	98 8b       	std	Y+16, r25	; 0x10
    459e:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidWriteSpecialChar(LCD_u8_CHAR0,(u8*)SpecialChar,LCD_u8_LINE1,0);
    45a0:	28 e6       	ldi	r18, 0x68	; 104
    45a2:	30 e0       	ldi	r19, 0x00	; 0
    45a4:	80 e0       	ldi	r24, 0x00	; 0
    45a6:	b9 01       	movw	r22, r18
    45a8:	41 e0       	ldi	r20, 0x01	; 1
    45aa:	20 e0       	ldi	r18, 0x00	; 0
    45ac:	0e 94 38 13 	call	0x2670	; 0x2670 <LCD_voidWriteSpecialChar>
			}
			H_BRIDGE_voidRotateCW();
    45b0:	0e 94 34 0c 	call	0x1868	; 0x1868 <H_BRIDGE_voidRotateCW>
    45b4:	80 e0       	ldi	r24, 0x00	; 0
    45b6:	90 e0       	ldi	r25, 0x00	; 0
    45b8:	aa ef       	ldi	r26, 0xFA	; 250
    45ba:	b3 e4       	ldi	r27, 0x43	; 67
    45bc:	8b 87       	std	Y+11, r24	; 0x0b
    45be:	9c 87       	std	Y+12, r25	; 0x0c
    45c0:	ad 87       	std	Y+13, r26	; 0x0d
    45c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    45c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    45ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    45cc:	20 e0       	ldi	r18, 0x00	; 0
    45ce:	30 e0       	ldi	r19, 0x00	; 0
    45d0:	4a ef       	ldi	r20, 0xFA	; 250
    45d2:	54 e4       	ldi	r21, 0x44	; 68
    45d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d8:	dc 01       	movw	r26, r24
    45da:	cb 01       	movw	r24, r22
    45dc:	8f 83       	std	Y+7, r24	; 0x07
    45de:	98 87       	std	Y+8, r25	; 0x08
    45e0:	a9 87       	std	Y+9, r26	; 0x09
    45e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45e4:	6f 81       	ldd	r22, Y+7	; 0x07
    45e6:	78 85       	ldd	r23, Y+8	; 0x08
    45e8:	89 85       	ldd	r24, Y+9	; 0x09
    45ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ec:	20 e0       	ldi	r18, 0x00	; 0
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	40 e8       	ldi	r20, 0x80	; 128
    45f2:	5f e3       	ldi	r21, 0x3F	; 63
    45f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45f8:	88 23       	and	r24, r24
    45fa:	2c f4       	brge	.+10     	; 0x4606 <main+0x199e>
		__ticks = 1;
    45fc:	81 e0       	ldi	r24, 0x01	; 1
    45fe:	90 e0       	ldi	r25, 0x00	; 0
    4600:	9e 83       	std	Y+6, r25	; 0x06
    4602:	8d 83       	std	Y+5, r24	; 0x05
    4604:	40 c0       	rjmp	.+128    	; 0x4686 <main+0x1a1e>
	else if (__tmp > 65535)
    4606:	6f 81       	ldd	r22, Y+7	; 0x07
    4608:	78 85       	ldd	r23, Y+8	; 0x08
    460a:	89 85       	ldd	r24, Y+9	; 0x09
    460c:	9a 85       	ldd	r25, Y+10	; 0x0a
    460e:	20 e0       	ldi	r18, 0x00	; 0
    4610:	3f ef       	ldi	r19, 0xFF	; 255
    4612:	4f e7       	ldi	r20, 0x7F	; 127
    4614:	57 e4       	ldi	r21, 0x47	; 71
    4616:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    461a:	18 16       	cp	r1, r24
    461c:	54 f5       	brge	.+84     	; 0x4672 <main+0x1a0a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    461e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4620:	7c 85       	ldd	r23, Y+12	; 0x0c
    4622:	8d 85       	ldd	r24, Y+13	; 0x0d
    4624:	9e 85       	ldd	r25, Y+14	; 0x0e
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e2       	ldi	r20, 0x20	; 32
    462c:	51 e4       	ldi	r21, 0x41	; 65
    462e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	bc 01       	movw	r22, r24
    4638:	cd 01       	movw	r24, r26
    463a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    463e:	dc 01       	movw	r26, r24
    4640:	cb 01       	movw	r24, r22
    4642:	9e 83       	std	Y+6, r25	; 0x06
    4644:	8d 83       	std	Y+5, r24	; 0x05
    4646:	0f c0       	rjmp	.+30     	; 0x4666 <main+0x19fe>
    4648:	88 ec       	ldi	r24, 0xC8	; 200
    464a:	90 e0       	ldi	r25, 0x00	; 0
    464c:	9c 83       	std	Y+4, r25	; 0x04
    464e:	8b 83       	std	Y+3, r24	; 0x03
    4650:	8b 81       	ldd	r24, Y+3	; 0x03
    4652:	9c 81       	ldd	r25, Y+4	; 0x04
    4654:	01 97       	sbiw	r24, 0x01	; 1
    4656:	f1 f7       	brne	.-4      	; 0x4654 <main+0x19ec>
    4658:	9c 83       	std	Y+4, r25	; 0x04
    465a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    465c:	8d 81       	ldd	r24, Y+5	; 0x05
    465e:	9e 81       	ldd	r25, Y+6	; 0x06
    4660:	01 97       	sbiw	r24, 0x01	; 1
    4662:	9e 83       	std	Y+6, r25	; 0x06
    4664:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4666:	8d 81       	ldd	r24, Y+5	; 0x05
    4668:	9e 81       	ldd	r25, Y+6	; 0x06
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	69 f7       	brne	.-38     	; 0x4648 <main+0x19e0>
    466e:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <main+0x36>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4672:	6f 81       	ldd	r22, Y+7	; 0x07
    4674:	78 85       	ldd	r23, Y+8	; 0x08
    4676:	89 85       	ldd	r24, Y+9	; 0x09
    4678:	9a 85       	ldd	r25, Y+10	; 0x0a
    467a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    467e:	dc 01       	movw	r26, r24
    4680:	cb 01       	movw	r24, r22
    4682:	9e 83       	std	Y+6, r25	; 0x06
    4684:	8d 83       	std	Y+5, r24	; 0x05
    4686:	8d 81       	ldd	r24, Y+5	; 0x05
    4688:	9e 81       	ldd	r25, Y+6	; 0x06
    468a:	9a 83       	std	Y+2, r25	; 0x02
    468c:	89 83       	std	Y+1, r24	; 0x01
    468e:	89 81       	ldd	r24, Y+1	; 0x01
    4690:	9a 81       	ldd	r25, Y+2	; 0x02
    4692:	01 97       	sbiw	r24, 0x01	; 1
    4694:	f1 f7       	brne	.-4      	; 0x4692 <main+0x1a2a>
    4696:	9a 83       	std	Y+2, r25	; 0x02
    4698:	89 83       	std	Y+1, r24	; 0x01
    469a:	0c 94 4f 16 	jmp	0x2c9e	; 0x2c9e <main+0x36>

0000469e <__mulsi3>:
    469e:	62 9f       	mul	r22, r18
    46a0:	d0 01       	movw	r26, r0
    46a2:	73 9f       	mul	r23, r19
    46a4:	f0 01       	movw	r30, r0
    46a6:	82 9f       	mul	r24, r18
    46a8:	e0 0d       	add	r30, r0
    46aa:	f1 1d       	adc	r31, r1
    46ac:	64 9f       	mul	r22, r20
    46ae:	e0 0d       	add	r30, r0
    46b0:	f1 1d       	adc	r31, r1
    46b2:	92 9f       	mul	r25, r18
    46b4:	f0 0d       	add	r31, r0
    46b6:	83 9f       	mul	r24, r19
    46b8:	f0 0d       	add	r31, r0
    46ba:	74 9f       	mul	r23, r20
    46bc:	f0 0d       	add	r31, r0
    46be:	65 9f       	mul	r22, r21
    46c0:	f0 0d       	add	r31, r0
    46c2:	99 27       	eor	r25, r25
    46c4:	72 9f       	mul	r23, r18
    46c6:	b0 0d       	add	r27, r0
    46c8:	e1 1d       	adc	r30, r1
    46ca:	f9 1f       	adc	r31, r25
    46cc:	63 9f       	mul	r22, r19
    46ce:	b0 0d       	add	r27, r0
    46d0:	e1 1d       	adc	r30, r1
    46d2:	f9 1f       	adc	r31, r25
    46d4:	bd 01       	movw	r22, r26
    46d6:	cf 01       	movw	r24, r30
    46d8:	11 24       	eor	r1, r1
    46da:	08 95       	ret

000046dc <__udivmodsi4>:
    46dc:	a1 e2       	ldi	r26, 0x21	; 33
    46de:	1a 2e       	mov	r1, r26
    46e0:	aa 1b       	sub	r26, r26
    46e2:	bb 1b       	sub	r27, r27
    46e4:	fd 01       	movw	r30, r26
    46e6:	0d c0       	rjmp	.+26     	; 0x4702 <__udivmodsi4_ep>

000046e8 <__udivmodsi4_loop>:
    46e8:	aa 1f       	adc	r26, r26
    46ea:	bb 1f       	adc	r27, r27
    46ec:	ee 1f       	adc	r30, r30
    46ee:	ff 1f       	adc	r31, r31
    46f0:	a2 17       	cp	r26, r18
    46f2:	b3 07       	cpc	r27, r19
    46f4:	e4 07       	cpc	r30, r20
    46f6:	f5 07       	cpc	r31, r21
    46f8:	20 f0       	brcs	.+8      	; 0x4702 <__udivmodsi4_ep>
    46fa:	a2 1b       	sub	r26, r18
    46fc:	b3 0b       	sbc	r27, r19
    46fe:	e4 0b       	sbc	r30, r20
    4700:	f5 0b       	sbc	r31, r21

00004702 <__udivmodsi4_ep>:
    4702:	66 1f       	adc	r22, r22
    4704:	77 1f       	adc	r23, r23
    4706:	88 1f       	adc	r24, r24
    4708:	99 1f       	adc	r25, r25
    470a:	1a 94       	dec	r1
    470c:	69 f7       	brne	.-38     	; 0x46e8 <__udivmodsi4_loop>
    470e:	60 95       	com	r22
    4710:	70 95       	com	r23
    4712:	80 95       	com	r24
    4714:	90 95       	com	r25
    4716:	9b 01       	movw	r18, r22
    4718:	ac 01       	movw	r20, r24
    471a:	bd 01       	movw	r22, r26
    471c:	cf 01       	movw	r24, r30
    471e:	08 95       	ret

00004720 <__prologue_saves__>:
    4720:	2f 92       	push	r2
    4722:	3f 92       	push	r3
    4724:	4f 92       	push	r4
    4726:	5f 92       	push	r5
    4728:	6f 92       	push	r6
    472a:	7f 92       	push	r7
    472c:	8f 92       	push	r8
    472e:	9f 92       	push	r9
    4730:	af 92       	push	r10
    4732:	bf 92       	push	r11
    4734:	cf 92       	push	r12
    4736:	df 92       	push	r13
    4738:	ef 92       	push	r14
    473a:	ff 92       	push	r15
    473c:	0f 93       	push	r16
    473e:	1f 93       	push	r17
    4740:	cf 93       	push	r28
    4742:	df 93       	push	r29
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
    4748:	ca 1b       	sub	r28, r26
    474a:	db 0b       	sbc	r29, r27
    474c:	0f b6       	in	r0, 0x3f	; 63
    474e:	f8 94       	cli
    4750:	de bf       	out	0x3e, r29	; 62
    4752:	0f be       	out	0x3f, r0	; 63
    4754:	cd bf       	out	0x3d, r28	; 61
    4756:	09 94       	ijmp

00004758 <__epilogue_restores__>:
    4758:	2a 88       	ldd	r2, Y+18	; 0x12
    475a:	39 88       	ldd	r3, Y+17	; 0x11
    475c:	48 88       	ldd	r4, Y+16	; 0x10
    475e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4760:	6e 84       	ldd	r6, Y+14	; 0x0e
    4762:	7d 84       	ldd	r7, Y+13	; 0x0d
    4764:	8c 84       	ldd	r8, Y+12	; 0x0c
    4766:	9b 84       	ldd	r9, Y+11	; 0x0b
    4768:	aa 84       	ldd	r10, Y+10	; 0x0a
    476a:	b9 84       	ldd	r11, Y+9	; 0x09
    476c:	c8 84       	ldd	r12, Y+8	; 0x08
    476e:	df 80       	ldd	r13, Y+7	; 0x07
    4770:	ee 80       	ldd	r14, Y+6	; 0x06
    4772:	fd 80       	ldd	r15, Y+5	; 0x05
    4774:	0c 81       	ldd	r16, Y+4	; 0x04
    4776:	1b 81       	ldd	r17, Y+3	; 0x03
    4778:	aa 81       	ldd	r26, Y+2	; 0x02
    477a:	b9 81       	ldd	r27, Y+1	; 0x01
    477c:	ce 0f       	add	r28, r30
    477e:	d1 1d       	adc	r29, r1
    4780:	0f b6       	in	r0, 0x3f	; 63
    4782:	f8 94       	cli
    4784:	de bf       	out	0x3e, r29	; 62
    4786:	0f be       	out	0x3f, r0	; 63
    4788:	cd bf       	out	0x3d, r28	; 61
    478a:	ed 01       	movw	r28, r26
    478c:	08 95       	ret

0000478e <_exit>:
    478e:	f8 94       	cli

00004790 <__stop_program>:
    4790:	ff cf       	rjmp	.-2      	; 0x4790 <__stop_program>
