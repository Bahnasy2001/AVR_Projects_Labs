
Moving_Name.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  000029ca  00002a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e48  00000000  00000000  00002a68  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c6e  00000000  00000000  000048b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  0000551e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000567e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000580d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007852  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008953  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000098d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a5a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ec       	ldi	r30, 0xCA	; 202
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 a1 11 	call	0x2342	; 0x2342 <main>
      7a:	0c 94 e3 14 	jmp	0x29c6	; 0x29c6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	68 e6       	ldi	r22, 0x68	; 104
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	87 e0       	ldi	r24, 0x07	; 7
     c9c:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     c9e:	e7 e3       	ldi	r30, 0x37	; 55
     ca0:	f0 e0       	ldi	r31, 0x00	; 0
     ca2:	10 82       	st	Z, r1

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     ca4:	e4 e3       	ldi	r30, 0x34	; 52
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     caa:	e1 e3       	ldi	r30, 0x31	; 49
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     cb2:	eb e3       	ldi	r30, 0x3B	; 59
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     cb8:	e8 e3       	ldi	r30, 0x38	; 56
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     cbe:	e5 e3       	ldi	r30, 0x35	; 53
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     cc4:	e2 e3       	ldi	r30, 0x32	; 50
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1

}
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	2e 97       	sbiw	r28, 0x0e	; 14
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	8a 83       	std	Y+2, r24	; 0x02
     ce6:	6b 83       	std	Y+3, r22	; 0x03
     ce8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     cee:	8a 81       	ldd	r24, Y+2	; 0x02
     cf0:	84 30       	cpi	r24, 0x04	; 4
     cf2:	08 f0       	brcs	.+2      	; 0xcf6 <DIO_u8SetPinDirection+0x26>
     cf4:	0d c1       	rjmp	.+538    	; 0xf10 <DIO_u8SetPinDirection+0x240>
     cf6:	8b 81       	ldd	r24, Y+3	; 0x03
     cf8:	88 30       	cpi	r24, 0x08	; 8
     cfa:	08 f0       	brcs	.+2      	; 0xcfe <DIO_u8SetPinDirection+0x2e>
     cfc:	09 c1       	rjmp	.+530    	; 0xf10 <DIO_u8SetPinDirection+0x240>
     cfe:	8c 81       	ldd	r24, Y+4	; 0x04
     d00:	88 23       	and	r24, r24
     d02:	21 f0       	breq	.+8      	; 0xd0c <DIO_u8SetPinDirection+0x3c>
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	09 f0       	breq	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x3c>
     d0a:	02 c1       	rjmp	.+516    	; 0xf10 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	3e 87       	std	Y+14, r19	; 0x0e
     d14:	2d 87       	std	Y+13, r18	; 0x0d
     d16:	8d 85       	ldd	r24, Y+13	; 0x0d
     d18:	9e 85       	ldd	r25, Y+14	; 0x0e
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	91 05       	cpc	r25, r1
     d1e:	09 f4       	brne	.+2      	; 0xd22 <DIO_u8SetPinDirection+0x52>
     d20:	4f c0       	rjmp	.+158    	; 0xdc0 <DIO_u8SetPinDirection+0xf0>
     d22:	2d 85       	ldd	r18, Y+13	; 0x0d
     d24:	3e 85       	ldd	r19, Y+14	; 0x0e
     d26:	22 30       	cpi	r18, 0x02	; 2
     d28:	31 05       	cpc	r19, r1
     d2a:	2c f4       	brge	.+10     	; 0xd36 <DIO_u8SetPinDirection+0x66>
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	00 97       	sbiw	r24, 0x00	; 0
     d32:	71 f0       	breq	.+28     	; 0xd50 <DIO_u8SetPinDirection+0x80>
     d34:	ee c0       	rjmp	.+476    	; 0xf12 <DIO_u8SetPinDirection+0x242>
     d36:	2d 85       	ldd	r18, Y+13	; 0x0d
     d38:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	09 f4       	brne	.+2      	; 0xd42 <DIO_u8SetPinDirection+0x72>
     d40:	77 c0       	rjmp	.+238    	; 0xe30 <DIO_u8SetPinDirection+0x160>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	91 05       	cpc	r25, r1
     d4a:	09 f4       	brne	.+2      	; 0xd4e <DIO_u8SetPinDirection+0x7e>
     d4c:	a9 c0       	rjmp	.+338    	; 0xea0 <DIO_u8SetPinDirection+0x1d0>
     d4e:	e1 c0       	rjmp	.+450    	; 0xf12 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     d50:	8b 81       	ldd	r24, Y+3	; 0x03
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	3c 87       	std	Y+12, r19	; 0x0c
     d58:	2b 87       	std	Y+11, r18	; 0x0b
     d5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d5e:	00 97       	sbiw	r24, 0x00	; 0
     d60:	31 f0       	breq	.+12     	; 0xd6e <DIO_u8SetPinDirection+0x9e>
     d62:	2b 85       	ldd	r18, Y+11	; 0x0b
     d64:	3c 85       	ldd	r19, Y+12	; 0x0c
     d66:	21 30       	cpi	r18, 0x01	; 1
     d68:	31 05       	cpc	r19, r1
     d6a:	b1 f0       	breq	.+44     	; 0xd98 <DIO_u8SetPinDirection+0xc8>
     d6c:	d2 c0       	rjmp	.+420    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d6e:	aa e3       	ldi	r26, 0x3A	; 58
     d70:	b0 e0       	ldi	r27, 0x00	; 0
     d72:	ea e3       	ldi	r30, 0x3A	; 58
     d74:	f0 e0       	ldi	r31, 0x00	; 0
     d76:	80 81       	ld	r24, Z
     d78:	48 2f       	mov	r20, r24
     d7a:	8b 81       	ldd	r24, Y+3	; 0x03
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	02 2e       	mov	r0, r18
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <DIO_u8SetPinDirection+0xbc>
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	0a 94       	dec	r0
     d8e:	e2 f7       	brpl	.-8      	; 0xd88 <DIO_u8SetPinDirection+0xb8>
     d90:	80 95       	com	r24
     d92:	84 23       	and	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	bd c0       	rjmp	.+378    	; 0xf12 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d98:	aa e3       	ldi	r26, 0x3A	; 58
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	ea e3       	ldi	r30, 0x3A	; 58
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_u8SetPinDirection+0xe6>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_u8SetPinDirection+0xe2>
     dba:	84 2b       	or	r24, r20
     dbc:	8c 93       	st	X, r24
     dbe:	a9 c0       	rjmp	.+338    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     dc0:	8b 81       	ldd	r24, Y+3	; 0x03
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	3a 87       	std	Y+10, r19	; 0x0a
     dc8:	29 87       	std	Y+9, r18	; 0x09
     dca:	89 85       	ldd	r24, Y+9	; 0x09
     dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	31 f0       	breq	.+12     	; 0xdde <DIO_u8SetPinDirection+0x10e>
     dd2:	29 85       	ldd	r18, Y+9	; 0x09
     dd4:	3a 85       	ldd	r19, Y+10	; 0x0a
     dd6:	21 30       	cpi	r18, 0x01	; 1
     dd8:	31 05       	cpc	r19, r1
     dda:	b1 f0       	breq	.+44     	; 0xe08 <DIO_u8SetPinDirection+0x138>
     ddc:	9a c0       	rjmp	.+308    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     dde:	a7 e3       	ldi	r26, 0x37	; 55
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e7 e3       	ldi	r30, 0x37	; 55
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	28 2f       	mov	r18, r24
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	02 2e       	mov	r0, r18
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <DIO_u8SetPinDirection+0x12c>
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	0a 94       	dec	r0
     dfe:	e2 f7       	brpl	.-8      	; 0xdf8 <DIO_u8SetPinDirection+0x128>
     e00:	80 95       	com	r24
     e02:	84 23       	and	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	85 c0       	rjmp	.+266    	; 0xf12 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e08:	a7 e3       	ldi	r26, 0x37	; 55
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e7 e3       	ldi	r30, 0x37	; 55
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8b 81       	ldd	r24, Y+3	; 0x03
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <DIO_u8SetPinDirection+0x156>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <DIO_u8SetPinDirection+0x152>
     e2a:	84 2b       	or	r24, r20
     e2c:	8c 93       	st	X, r24
     e2e:	71 c0       	rjmp	.+226    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     e30:	8b 81       	ldd	r24, Y+3	; 0x03
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	38 87       	std	Y+8, r19	; 0x08
     e38:	2f 83       	std	Y+7, r18	; 0x07
     e3a:	8f 81       	ldd	r24, Y+7	; 0x07
     e3c:	98 85       	ldd	r25, Y+8	; 0x08
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	31 f0       	breq	.+12     	; 0xe4e <DIO_u8SetPinDirection+0x17e>
     e42:	2f 81       	ldd	r18, Y+7	; 0x07
     e44:	38 85       	ldd	r19, Y+8	; 0x08
     e46:	21 30       	cpi	r18, 0x01	; 1
     e48:	31 05       	cpc	r19, r1
     e4a:	b1 f0       	breq	.+44     	; 0xe78 <DIO_u8SetPinDirection+0x1a8>
     e4c:	62 c0       	rjmp	.+196    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e4e:	a4 e3       	ldi	r26, 0x34	; 52
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e4 e3       	ldi	r30, 0x34	; 52
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	8b 81       	ldd	r24, Y+3	; 0x03
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	02 2e       	mov	r0, r18
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <DIO_u8SetPinDirection+0x19c>
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	0a 94       	dec	r0
     e6e:	e2 f7       	brpl	.-8      	; 0xe68 <DIO_u8SetPinDirection+0x198>
     e70:	80 95       	com	r24
     e72:	84 23       	and	r24, r20
     e74:	8c 93       	st	X, r24
     e76:	4d c0       	rjmp	.+154    	; 0xf12 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e78:	a4 e3       	ldi	r26, 0x34	; 52
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	e4 e3       	ldi	r30, 0x34	; 52
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	80 81       	ld	r24, Z
     e82:	48 2f       	mov	r20, r24
     e84:	8b 81       	ldd	r24, Y+3	; 0x03
     e86:	28 2f       	mov	r18, r24
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	02 2e       	mov	r0, r18
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <DIO_u8SetPinDirection+0x1c6>
     e92:	88 0f       	add	r24, r24
     e94:	99 1f       	adc	r25, r25
     e96:	0a 94       	dec	r0
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <DIO_u8SetPinDirection+0x1c2>
     e9a:	84 2b       	or	r24, r20
     e9c:	8c 93       	st	X, r24
     e9e:	39 c0       	rjmp	.+114    	; 0xf12 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	3e 83       	std	Y+6, r19	; 0x06
     ea8:	2d 83       	std	Y+5, r18	; 0x05
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	31 f0       	breq	.+12     	; 0xebe <DIO_u8SetPinDirection+0x1ee>
     eb2:	2d 81       	ldd	r18, Y+5	; 0x05
     eb4:	3e 81       	ldd	r19, Y+6	; 0x06
     eb6:	21 30       	cpi	r18, 0x01	; 1
     eb8:	31 05       	cpc	r19, r1
     eba:	b1 f0       	breq	.+44     	; 0xee8 <DIO_u8SetPinDirection+0x218>
     ebc:	2a c0       	rjmp	.+84     	; 0xf12 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ebe:	a1 e3       	ldi	r26, 0x31	; 49
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e1 e3       	ldi	r30, 0x31	; 49
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <DIO_u8SetPinDirection+0x20c>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <DIO_u8SetPinDirection+0x208>
     ee0:	80 95       	com	r24
     ee2:	84 23       	and	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	15 c0       	rjmp	.+42     	; 0xf12 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ee8:	a1 e3       	ldi	r26, 0x31	; 49
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e1 e3       	ldi	r30, 0x31	; 49
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8b 81       	ldd	r24, Y+3	; 0x03
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <DIO_u8SetPinDirection+0x236>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <DIO_u8SetPinDirection+0x232>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f10:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f12:	89 81       	ldd	r24, Y+1	; 0x01
}
     f14:	2e 96       	adiw	r28, 0x0e	; 14
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	f8 94       	cli
     f1a:	de bf       	out	0x3e, r29	; 62
     f1c:	0f be       	out	0x3f, r0	; 63
     f1e:	cd bf       	out	0x3d, r28	; 61
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
     f2e:	2e 97       	sbiw	r28, 0x0e	; 14
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	8a 83       	std	Y+2, r24	; 0x02
     f3c:	6b 83       	std	Y+3, r22	; 0x03
     f3e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	88 30       	cpi	r24, 0x08	; 8
     f48:	08 f0       	brcs	.+2      	; 0xf4c <DIO_u8SetPinValue+0x26>
     f4a:	0c c1       	rjmp	.+536    	; 0x1164 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	3e 87       	std	Y+14, r19	; 0x0e
     f54:	2d 87       	std	Y+13, r18	; 0x0d
     f56:	8d 85       	ldd	r24, Y+13	; 0x0d
     f58:	9e 85       	ldd	r25, Y+14	; 0x0e
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	91 05       	cpc	r25, r1
     f5e:	09 f4       	brne	.+2      	; 0xf62 <DIO_u8SetPinValue+0x3c>
     f60:	51 c0       	rjmp	.+162    	; 0x1004 <DIO_u8SetPinValue+0xde>
     f62:	2d 85       	ldd	r18, Y+13	; 0x0d
     f64:	3e 85       	ldd	r19, Y+14	; 0x0e
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	2c f4       	brge	.+10     	; 0xf76 <DIO_u8SetPinValue+0x50>
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	71 f0       	breq	.+28     	; 0xf90 <DIO_u8SetPinValue+0x6a>
     f74:	f5 c0       	rjmp	.+490    	; 0x1160 <DIO_u8SetPinValue+0x23a>
     f76:	2d 85       	ldd	r18, Y+13	; 0x0d
     f78:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	09 f4       	brne	.+2      	; 0xf82 <DIO_u8SetPinValue+0x5c>
     f80:	7b c0       	rjmp	.+246    	; 0x1078 <DIO_u8SetPinValue+0x152>
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	83 30       	cpi	r24, 0x03	; 3
     f88:	91 05       	cpc	r25, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <DIO_u8SetPinValue+0x68>
     f8c:	af c0       	rjmp	.+350    	; 0x10ec <DIO_u8SetPinValue+0x1c6>
     f8e:	e8 c0       	rjmp	.+464    	; 0x1160 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	3c 87       	std	Y+12, r19	; 0x0c
     f98:	2b 87       	std	Y+11, r18	; 0x0b
     f9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     f9c:	9c 85       	ldd	r25, Y+12	; 0x0c
     f9e:	00 97       	sbiw	r24, 0x00	; 0
     fa0:	31 f0       	breq	.+12     	; 0xfae <DIO_u8SetPinValue+0x88>
     fa2:	2b 85       	ldd	r18, Y+11	; 0x0b
     fa4:	3c 85       	ldd	r19, Y+12	; 0x0c
     fa6:	21 30       	cpi	r18, 0x01	; 1
     fa8:	31 05       	cpc	r19, r1
     faa:	b1 f0       	breq	.+44     	; 0xfd8 <DIO_u8SetPinValue+0xb2>
     fac:	29 c0       	rjmp	.+82     	; 0x1000 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fae:	ab e3       	ldi	r26, 0x3B	; 59
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e3       	ldi	r30, 0x3B	; 59
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_u8SetPinValue+0xa6>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_u8SetPinValue+0xa2>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	c7 c0       	rjmp	.+398    	; 0x1166 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fd8:	ab e3       	ldi	r26, 0x3B	; 59
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	eb e3       	ldi	r30, 0x3B	; 59
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPinValue+0xd0>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_u8SetPinValue+0xcc>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	b3 c0       	rjmp	.+358    	; 0x1166 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1000:	19 82       	std	Y+1, r1	; 0x01
    1002:	b1 c0       	rjmp	.+354    	; 0x1166 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    1004:	8c 81       	ldd	r24, Y+4	; 0x04
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3a 87       	std	Y+10, r19	; 0x0a
    100c:	29 87       	std	Y+9, r18	; 0x09
    100e:	89 85       	ldd	r24, Y+9	; 0x09
    1010:	9a 85       	ldd	r25, Y+10	; 0x0a
    1012:	00 97       	sbiw	r24, 0x00	; 0
    1014:	31 f0       	breq	.+12     	; 0x1022 <DIO_u8SetPinValue+0xfc>
    1016:	29 85       	ldd	r18, Y+9	; 0x09
    1018:	3a 85       	ldd	r19, Y+10	; 0x0a
    101a:	21 30       	cpi	r18, 0x01	; 1
    101c:	31 05       	cpc	r19, r1
    101e:	b1 f0       	breq	.+44     	; 0x104c <DIO_u8SetPinValue+0x126>
    1020:	29 c0       	rjmp	.+82     	; 0x1074 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1022:	a8 e3       	ldi	r26, 0x38	; 56
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e8 e3       	ldi	r30, 0x38	; 56
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	48 2f       	mov	r20, r24
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	28 2f       	mov	r18, r24
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	02 2e       	mov	r0, r18
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <DIO_u8SetPinValue+0x11a>
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	0a 94       	dec	r0
    1042:	e2 f7       	brpl	.-8      	; 0x103c <DIO_u8SetPinValue+0x116>
    1044:	80 95       	com	r24
    1046:	84 23       	and	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	8d c0       	rjmp	.+282    	; 0x1166 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    104c:	a8 e3       	ldi	r26, 0x38	; 56
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e8 e3       	ldi	r30, 0x38	; 56
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_u8SetPinValue+0x144>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_u8SetPinValue+0x140>
    106e:	84 2b       	or	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	79 c0       	rjmp	.+242    	; 0x1166 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1074:	19 82       	std	Y+1, r1	; 0x01
    1076:	77 c0       	rjmp	.+238    	; 0x1166 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	38 87       	std	Y+8, r19	; 0x08
    1080:	2f 83       	std	Y+7, r18	; 0x07
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	31 f0       	breq	.+12     	; 0x1096 <DIO_u8SetPinValue+0x170>
    108a:	2f 81       	ldd	r18, Y+7	; 0x07
    108c:	38 85       	ldd	r19, Y+8	; 0x08
    108e:	21 30       	cpi	r18, 0x01	; 1
    1090:	31 05       	cpc	r19, r1
    1092:	b1 f0       	breq	.+44     	; 0x10c0 <DIO_u8SetPinValue+0x19a>
    1094:	29 c0       	rjmp	.+82     	; 0x10e8 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1096:	a5 e3       	ldi	r26, 0x35	; 53
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	e5 e3       	ldi	r30, 0x35	; 53
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	80 81       	ld	r24, Z
    10a0:	48 2f       	mov	r20, r24
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	02 2e       	mov	r0, r18
    10ae:	02 c0       	rjmp	.+4      	; 0x10b4 <DIO_u8SetPinValue+0x18e>
    10b0:	88 0f       	add	r24, r24
    10b2:	99 1f       	adc	r25, r25
    10b4:	0a 94       	dec	r0
    10b6:	e2 f7       	brpl	.-8      	; 0x10b0 <DIO_u8SetPinValue+0x18a>
    10b8:	80 95       	com	r24
    10ba:	84 23       	and	r24, r20
    10bc:	8c 93       	st	X, r24
    10be:	53 c0       	rjmp	.+166    	; 0x1166 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10c0:	a5 e3       	ldi	r26, 0x35	; 53
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e5 e3       	ldi	r30, 0x35	; 53
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8b 81       	ldd	r24, Y+3	; 0x03
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <DIO_u8SetPinValue+0x1b8>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <DIO_u8SetPinValue+0x1b4>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	3f c0       	rjmp	.+126    	; 0x1166 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    10e8:	19 82       	std	Y+1, r1	; 0x01
    10ea:	3d c0       	rjmp	.+122    	; 0x1166 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    10ec:	8c 81       	ldd	r24, Y+4	; 0x04
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	3e 83       	std	Y+6, r19	; 0x06
    10f4:	2d 83       	std	Y+5, r18	; 0x05
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	31 f0       	breq	.+12     	; 0x110a <DIO_u8SetPinValue+0x1e4>
    10fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1100:	3e 81       	ldd	r19, Y+6	; 0x06
    1102:	21 30       	cpi	r18, 0x01	; 1
    1104:	31 05       	cpc	r19, r1
    1106:	b1 f0       	breq	.+44     	; 0x1134 <DIO_u8SetPinValue+0x20e>
    1108:	29 c0       	rjmp	.+82     	; 0x115c <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    110a:	a2 e3       	ldi	r26, 0x32	; 50
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e2 e3       	ldi	r30, 0x32	; 50
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_u8SetPinValue+0x202>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_u8SetPinValue+0x1fe>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	19 c0       	rjmp	.+50     	; 0x1166 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_u8SetPinValue+0x22c>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_u8SetPinValue+0x228>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	05 c0       	rjmp	.+10     	; 0x1166 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    115c:	19 82       	std	Y+1, r1	; 0x01
    115e:	03 c0       	rjmp	.+6      	; 0x1166 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1160:	19 82       	std	Y+1, r1	; 0x01
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1164:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1166:	89 81       	ldd	r24, Y+1	; 0x01
}
    1168:	2e 96       	adiw	r28, 0x0e	; 14
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	28 97       	sbiw	r28, 0x08	; 8
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	de bf       	out	0x3e, r29	; 62
    118a:	0f be       	out	0x3f, r0	; 63
    118c:	cd bf       	out	0x3d, r28	; 61
    118e:	8b 83       	std	Y+3, r24	; 0x03
    1190:	6c 83       	std	Y+4, r22	; 0x04
    1192:	5e 83       	std	Y+6, r21	; 0x06
    1194:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1196:	81 e0       	ldi	r24, 0x01	; 1
    1198:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	84 30       	cpi	r24, 0x04	; 4
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <DIO_u8GetPinValue+0x28>
    11a0:	a1 c0       	rjmp	.+322    	; 0x12e4 <DIO_u8GetPinValue+0x16a>
    11a2:	8c 81       	ldd	r24, Y+4	; 0x04
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <DIO_u8GetPinValue+0x30>
    11a8:	9d c0       	rjmp	.+314    	; 0x12e4 <DIO_u8GetPinValue+0x16a>
    11aa:	8d 81       	ldd	r24, Y+5	; 0x05
    11ac:	9e 81       	ldd	r25, Y+6	; 0x06
    11ae:	00 97       	sbiw	r24, 0x00	; 0
    11b0:	09 f4       	brne	.+2      	; 0x11b4 <DIO_u8GetPinValue+0x3a>
    11b2:	98 c0       	rjmp	.+304    	; 0x12e4 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	38 87       	std	Y+8, r19	; 0x08
    11bc:	2f 83       	std	Y+7, r18	; 0x07
    11be:	4f 81       	ldd	r20, Y+7	; 0x07
    11c0:	58 85       	ldd	r21, Y+8	; 0x08
    11c2:	41 30       	cpi	r20, 0x01	; 1
    11c4:	51 05       	cpc	r21, r1
    11c6:	a9 f1       	breq	.+106    	; 0x1232 <DIO_u8GetPinValue+0xb8>
    11c8:	8f 81       	ldd	r24, Y+7	; 0x07
    11ca:	98 85       	ldd	r25, Y+8	; 0x08
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	91 05       	cpc	r25, r1
    11d0:	34 f4       	brge	.+12     	; 0x11de <DIO_u8GetPinValue+0x64>
    11d2:	2f 81       	ldd	r18, Y+7	; 0x07
    11d4:	38 85       	ldd	r19, Y+8	; 0x08
    11d6:	21 15       	cp	r18, r1
    11d8:	31 05       	cpc	r19, r1
    11da:	71 f0       	breq	.+28     	; 0x11f8 <DIO_u8GetPinValue+0x7e>
    11dc:	81 c0       	rjmp	.+258    	; 0x12e0 <DIO_u8GetPinValue+0x166>
    11de:	4f 81       	ldd	r20, Y+7	; 0x07
    11e0:	58 85       	ldd	r21, Y+8	; 0x08
    11e2:	42 30       	cpi	r20, 0x02	; 2
    11e4:	51 05       	cpc	r21, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <DIO_u8GetPinValue+0x70>
    11e8:	41 c0       	rjmp	.+130    	; 0x126c <DIO_u8GetPinValue+0xf2>
    11ea:	8f 81       	ldd	r24, Y+7	; 0x07
    11ec:	98 85       	ldd	r25, Y+8	; 0x08
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	91 05       	cpc	r25, r1
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <DIO_u8GetPinValue+0x7c>
    11f4:	58 c0       	rjmp	.+176    	; 0x12a6 <DIO_u8GetPinValue+0x12c>
    11f6:	74 c0       	rjmp	.+232    	; 0x12e0 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    11f8:	e9 e3       	ldi	r30, 0x39	; 57
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	8c 81       	ldd	r24, Y+4	; 0x04
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a9 01       	movw	r20, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <DIO_u8GetPinValue+0x96>
    120c:	55 95       	asr	r21
    120e:	47 95       	ror	r20
    1210:	8a 95       	dec	r24
    1212:	e2 f7       	brpl	.-8      	; 0x120c <DIO_u8GetPinValue+0x92>
    1214:	ca 01       	movw	r24, r20
    1216:	81 70       	andi	r24, 0x01	; 1
    1218:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	88 23       	and	r24, r24
    121e:	21 f4       	brne	.+8      	; 0x1228 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1220:	ed 81       	ldd	r30, Y+5	; 0x05
    1222:	fe 81       	ldd	r31, Y+6	; 0x06
    1224:	10 82       	st	Z, r1
    1226:	5f c0       	rjmp	.+190    	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1228:	ed 81       	ldd	r30, Y+5	; 0x05
    122a:	fe 81       	ldd	r31, Y+6	; 0x06
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	80 83       	st	Z, r24
    1230:	5a c0       	rjmp	.+180    	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1232:	e6 e3       	ldi	r30, 0x36	; 54
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	8c 81       	ldd	r24, Y+4	; 0x04
    123e:	88 2f       	mov	r24, r24
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a9 01       	movw	r20, r18
    1244:	02 c0       	rjmp	.+4      	; 0x124a <DIO_u8GetPinValue+0xd0>
    1246:	55 95       	asr	r21
    1248:	47 95       	ror	r20
    124a:	8a 95       	dec	r24
    124c:	e2 f7       	brpl	.-8      	; 0x1246 <DIO_u8GetPinValue+0xcc>
    124e:	ca 01       	movw	r24, r20
    1250:	81 70       	andi	r24, 0x01	; 1
    1252:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	88 23       	and	r24, r24
    1258:	21 f4       	brne	.+8      	; 0x1262 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    125a:	ed 81       	ldd	r30, Y+5	; 0x05
    125c:	fe 81       	ldd	r31, Y+6	; 0x06
    125e:	10 82       	st	Z, r1
    1260:	42 c0       	rjmp	.+132    	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1262:	ed 81       	ldd	r30, Y+5	; 0x05
    1264:	fe 81       	ldd	r31, Y+6	; 0x06
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    126a:	3d c0       	rjmp	.+122    	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    126c:	e3 e3       	ldi	r30, 0x33	; 51
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_u8GetPinValue+0x10a>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_u8GetPinValue+0x106>
    1288:	ca 01       	movw	r24, r20
    128a:	81 70       	andi	r24, 0x01	; 1
    128c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	88 23       	and	r24, r24
    1292:	21 f4       	brne	.+8      	; 0x129c <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1294:	ed 81       	ldd	r30, Y+5	; 0x05
    1296:	fe 81       	ldd	r31, Y+6	; 0x06
    1298:	10 82       	st	Z, r1
    129a:	25 c0       	rjmp	.+74     	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    129c:	ed 81       	ldd	r30, Y+5	; 0x05
    129e:	fe 81       	ldd	r31, Y+6	; 0x06
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 83       	st	Z, r24
    12a4:	20 c0       	rjmp	.+64     	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12a6:	e0 e3       	ldi	r30, 0x30	; 48
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	88 2f       	mov	r24, r24
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	a9 01       	movw	r20, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_u8GetPinValue+0x144>
    12ba:	55 95       	asr	r21
    12bc:	47 95       	ror	r20
    12be:	8a 95       	dec	r24
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_u8GetPinValue+0x140>
    12c2:	ca 01       	movw	r24, r20
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	88 23       	and	r24, r24
    12cc:	21 f4       	brne	.+8      	; 0x12d6 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12ce:	ed 81       	ldd	r30, Y+5	; 0x05
    12d0:	fe 81       	ldd	r31, Y+6	; 0x06
    12d2:	10 82       	st	Z, r1
    12d4:	08 c0       	rjmp	.+16     	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12d6:	ed 81       	ldd	r30, Y+5	; 0x05
    12d8:	fe 81       	ldd	r31, Y+6	; 0x06
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	80 83       	st	Z, r24
    12de:	03 c0       	rjmp	.+6      	; 0x12e6 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    12e0:	1a 82       	std	Y+2, r1	; 0x02
    12e2:	01 c0       	rjmp	.+2      	; 0x12e6 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12e4:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12e8:	28 96       	adiw	r28, 0x08	; 8
    12ea:	0f b6       	in	r0, 0x3f	; 63
    12ec:	f8 94       	cli
    12ee:	de bf       	out	0x3e, r29	; 62
    12f0:	0f be       	out	0x3f, r0	; 63
    12f2:	cd bf       	out	0x3d, r28	; 61
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	08 95       	ret

000012fa <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    12fa:	df 93       	push	r29
    12fc:	cf 93       	push	r28
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	2d 97       	sbiw	r28, 0x0d	; 13
    1304:	0f b6       	in	r0, 0x3f	; 63
    1306:	f8 94       	cli
    1308:	de bf       	out	0x3e, r29	; 62
    130a:	0f be       	out	0x3f, r0	; 63
    130c:	cd bf       	out	0x3d, r28	; 61
    130e:	8a 83       	std	Y+2, r24	; 0x02
    1310:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	88 23       	and	r24, r24
    131a:	21 f0       	breq	.+8      	; 0x1324 <DIO_u8SetPortDirection+0x2a>
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	09 f0       	breq	.+2      	; 0x1324 <DIO_u8SetPortDirection+0x2a>
    1322:	82 c0       	rjmp	.+260    	; 0x1428 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	3d 87       	std	Y+13, r19	; 0x0d
    132c:	2c 87       	std	Y+12, r18	; 0x0c
    132e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1330:	9d 85       	ldd	r25, Y+13	; 0x0d
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	91 05       	cpc	r25, r1
    1336:	71 f1       	breq	.+92     	; 0x1394 <DIO_u8SetPortDirection+0x9a>
    1338:	2c 85       	ldd	r18, Y+12	; 0x0c
    133a:	3d 85       	ldd	r19, Y+13	; 0x0d
    133c:	22 30       	cpi	r18, 0x02	; 2
    133e:	31 05       	cpc	r19, r1
    1340:	2c f4       	brge	.+10     	; 0x134c <DIO_u8SetPortDirection+0x52>
    1342:	8c 85       	ldd	r24, Y+12	; 0x0c
    1344:	9d 85       	ldd	r25, Y+13	; 0x0d
    1346:	00 97       	sbiw	r24, 0x00	; 0
    1348:	69 f0       	breq	.+26     	; 0x1364 <DIO_u8SetPortDirection+0x6a>
    134a:	6c c0       	rjmp	.+216    	; 0x1424 <DIO_u8SetPortDirection+0x12a>
    134c:	2c 85       	ldd	r18, Y+12	; 0x0c
    134e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	b9 f1       	breq	.+110    	; 0x13c4 <DIO_u8SetPortDirection+0xca>
    1356:	8c 85       	ldd	r24, Y+12	; 0x0c
    1358:	9d 85       	ldd	r25, Y+13	; 0x0d
    135a:	83 30       	cpi	r24, 0x03	; 3
    135c:	91 05       	cpc	r25, r1
    135e:	09 f4       	brne	.+2      	; 0x1362 <DIO_u8SetPortDirection+0x68>
    1360:	49 c0       	rjmp	.+146    	; 0x13f4 <DIO_u8SetPortDirection+0xfa>
    1362:	60 c0       	rjmp	.+192    	; 0x1424 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3b 87       	std	Y+11, r19	; 0x0b
    136c:	2a 87       	std	Y+10, r18	; 0x0a
    136e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1370:	9b 85       	ldd	r25, Y+11	; 0x0b
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	31 f0       	breq	.+12     	; 0x1382 <DIO_u8SetPortDirection+0x88>
    1376:	2a 85       	ldd	r18, Y+10	; 0x0a
    1378:	3b 85       	ldd	r19, Y+11	; 0x0b
    137a:	21 30       	cpi	r18, 0x01	; 1
    137c:	31 05       	cpc	r19, r1
    137e:	29 f0       	breq	.+10     	; 0x138a <DIO_u8SetPortDirection+0x90>
    1380:	54 c0       	rjmp	.+168    	; 0x142a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1382:	ea e3       	ldi	r30, 0x3A	; 58
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	10 82       	st	Z, r1
    1388:	50 c0       	rjmp	.+160    	; 0x142a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    138a:	ea e3       	ldi	r30, 0x3A	; 58
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	8f ef       	ldi	r24, 0xFF	; 255
    1390:	80 83       	st	Z, r24
    1392:	4b c0       	rjmp	.+150    	; 0x142a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	39 87       	std	Y+9, r19	; 0x09
    139c:	28 87       	std	Y+8, r18	; 0x08
    139e:	88 85       	ldd	r24, Y+8	; 0x08
    13a0:	99 85       	ldd	r25, Y+9	; 0x09
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <DIO_u8SetPortDirection+0xb8>
    13a6:	28 85       	ldd	r18, Y+8	; 0x08
    13a8:	39 85       	ldd	r19, Y+9	; 0x09
    13aa:	21 30       	cpi	r18, 0x01	; 1
    13ac:	31 05       	cpc	r19, r1
    13ae:	29 f0       	breq	.+10     	; 0x13ba <DIO_u8SetPortDirection+0xc0>
    13b0:	3c c0       	rjmp	.+120    	; 0x142a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	10 82       	st	Z, r1
    13b8:	38 c0       	rjmp	.+112    	; 0x142a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    13ba:	e7 e3       	ldi	r30, 0x37	; 55
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	80 83       	st	Z, r24
    13c2:	33 c0       	rjmp	.+102    	; 0x142a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3f 83       	std	Y+7, r19	; 0x07
    13cc:	2e 83       	std	Y+6, r18	; 0x06
    13ce:	8e 81       	ldd	r24, Y+6	; 0x06
    13d0:	9f 81       	ldd	r25, Y+7	; 0x07
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	31 f0       	breq	.+12     	; 0x13e2 <DIO_u8SetPortDirection+0xe8>
    13d6:	2e 81       	ldd	r18, Y+6	; 0x06
    13d8:	3f 81       	ldd	r19, Y+7	; 0x07
    13da:	21 30       	cpi	r18, 0x01	; 1
    13dc:	31 05       	cpc	r19, r1
    13de:	29 f0       	breq	.+10     	; 0x13ea <DIO_u8SetPortDirection+0xf0>
    13e0:	24 c0       	rjmp	.+72     	; 0x142a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    13e2:	e4 e3       	ldi	r30, 0x34	; 52
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	10 82       	st	Z, r1
    13e8:	20 c0       	rjmp	.+64     	; 0x142a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    13ea:	e4 e3       	ldi	r30, 0x34	; 52
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	80 83       	st	Z, r24
    13f2:	1b c0       	rjmp	.+54     	; 0x142a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3d 83       	std	Y+5, r19	; 0x05
    13fc:	2c 83       	std	Y+4, r18	; 0x04
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	9d 81       	ldd	r25, Y+5	; 0x05
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	31 f0       	breq	.+12     	; 0x1412 <DIO_u8SetPortDirection+0x118>
    1406:	2c 81       	ldd	r18, Y+4	; 0x04
    1408:	3d 81       	ldd	r19, Y+5	; 0x05
    140a:	21 30       	cpi	r18, 0x01	; 1
    140c:	31 05       	cpc	r19, r1
    140e:	29 f0       	breq	.+10     	; 0x141a <DIO_u8SetPortDirection+0x120>
    1410:	0c c0       	rjmp	.+24     	; 0x142a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    1412:	e1 e3       	ldi	r30, 0x31	; 49
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	10 82       	st	Z, r1
    1418:	08 c0       	rjmp	.+16     	; 0x142a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    141a:	e1 e3       	ldi	r30, 0x31	; 49
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	80 83       	st	Z, r24
    1422:	03 c0       	rjmp	.+6      	; 0x142a <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1424:	19 82       	std	Y+1, r1	; 0x01
    1426:	01 c0       	rjmp	.+2      	; 0x142a <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1428:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    142a:	89 81       	ldd	r24, Y+1	; 0x01
}
    142c:	2d 96       	adiw	r28, 0x0d	; 13
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	cd bf       	out	0x3d, r28	; 61
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	00 d0       	rcall	.+0      	; 0x1444 <DIO_u8SetPortValue+0x6>
    1444:	00 d0       	rcall	.+0      	; 0x1446 <DIO_u8SetPortValue+0x8>
    1446:	0f 92       	push	r0
    1448:	cd b7       	in	r28, 0x3d	; 61
    144a:	de b7       	in	r29, 0x3e	; 62
    144c:	8a 83       	std	Y+2, r24	; 0x02
    144e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	3d 83       	std	Y+5, r19	; 0x05
    145c:	2c 83       	std	Y+4, r18	; 0x04
    145e:	8c 81       	ldd	r24, Y+4	; 0x04
    1460:	9d 81       	ldd	r25, Y+5	; 0x05
    1462:	81 30       	cpi	r24, 0x01	; 1
    1464:	91 05       	cpc	r25, r1
    1466:	d1 f0       	breq	.+52     	; 0x149c <DIO_u8SetPortValue+0x5e>
    1468:	2c 81       	ldd	r18, Y+4	; 0x04
    146a:	3d 81       	ldd	r19, Y+5	; 0x05
    146c:	22 30       	cpi	r18, 0x02	; 2
    146e:	31 05       	cpc	r19, r1
    1470:	2c f4       	brge	.+10     	; 0x147c <DIO_u8SetPortValue+0x3e>
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	61 f0       	breq	.+24     	; 0x1492 <DIO_u8SetPortValue+0x54>
    147a:	1f c0       	rjmp	.+62     	; 0x14ba <DIO_u8SetPortValue+0x7c>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	81 f0       	breq	.+32     	; 0x14a6 <DIO_u8SetPortValue+0x68>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	83 30       	cpi	r24, 0x03	; 3
    148c:	91 05       	cpc	r25, r1
    148e:	81 f0       	breq	.+32     	; 0x14b0 <DIO_u8SetPortValue+0x72>
    1490:	14 c0       	rjmp	.+40     	; 0x14ba <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    1492:	eb e3       	ldi	r30, 0x3B	; 59
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	80 83       	st	Z, r24
    149a:	10 c0       	rjmp	.+32     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    149c:	e8 e3       	ldi	r30, 0x38	; 56
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	80 83       	st	Z, r24
    14a4:	0b c0       	rjmp	.+22     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    14a6:	e5 e3       	ldi	r30, 0x35	; 53
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	80 83       	st	Z, r24
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    14b0:	e2 e3       	ldi	r30, 0x32	; 50
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	80 83       	st	Z, r24
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    14ba:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_u8GetPortValue+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_u8GetPortValue+0x8>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_u8GetPortValue+0xa>
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	8a 83       	std	Y+2, r24	; 0x02
    14de:	7c 83       	std	Y+4, r23	; 0x04
    14e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	e9 f1       	breq	.+122    	; 0x1568 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	3e 83       	std	Y+6, r19	; 0x06
    14f6:	2d 83       	std	Y+5, r18	; 0x05
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	81 30       	cpi	r24, 0x01	; 1
    14fe:	91 05       	cpc	r25, r1
    1500:	e1 f0       	breq	.+56     	; 0x153a <DIO_u8GetPortValue+0x6c>
    1502:	2d 81       	ldd	r18, Y+5	; 0x05
    1504:	3e 81       	ldd	r19, Y+6	; 0x06
    1506:	22 30       	cpi	r18, 0x02	; 2
    1508:	31 05       	cpc	r19, r1
    150a:	2c f4       	brge	.+10     	; 0x1516 <DIO_u8GetPortValue+0x48>
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	00 97       	sbiw	r24, 0x00	; 0
    1512:	61 f0       	breq	.+24     	; 0x152c <DIO_u8GetPortValue+0x5e>
    1514:	27 c0       	rjmp	.+78     	; 0x1564 <DIO_u8GetPortValue+0x96>
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	a1 f0       	breq	.+40     	; 0x1548 <DIO_u8GetPortValue+0x7a>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	83 30       	cpi	r24, 0x03	; 3
    1526:	91 05       	cpc	r25, r1
    1528:	b1 f0       	breq	.+44     	; 0x1556 <DIO_u8GetPortValue+0x88>
    152a:	1c c0       	rjmp	.+56     	; 0x1564 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    152c:	e9 e3       	ldi	r30, 0x39	; 57
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	eb 81       	ldd	r30, Y+3	; 0x03
    1534:	fc 81       	ldd	r31, Y+4	; 0x04
    1536:	80 83       	st	Z, r24
    1538:	18 c0       	rjmp	.+48     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    153a:	e6 e3       	ldi	r30, 0x36	; 54
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	eb 81       	ldd	r30, Y+3	; 0x03
    1542:	fc 81       	ldd	r31, Y+4	; 0x04
    1544:	80 83       	st	Z, r24
    1546:	11 c0       	rjmp	.+34     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1548:	e3 e3       	ldi	r30, 0x33	; 51
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	eb 81       	ldd	r30, Y+3	; 0x03
    1550:	fc 81       	ldd	r31, Y+4	; 0x04
    1552:	80 83       	st	Z, r24
    1554:	0a c0       	rjmp	.+20     	; 0x156a <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1556:	e0 e3       	ldi	r30, 0x30	; 48
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	80 83       	st	Z, r24
    1562:	03 c0       	rjmp	.+6      	; 0x156a <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1564:	19 82       	std	Y+1, r1	; 0x01
    1566:	01 c0       	rjmp	.+2      	; 0x156a <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1568:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	26 96       	adiw	r28, 0x06	; 6
    156e:	0f b6       	in	r0, 0x3f	; 63
    1570:	f8 94       	cli
    1572:	de bf       	out	0x3e, r29	; 62
    1574:	0f be       	out	0x3f, r0	; 63
    1576:	cd bf       	out	0x3d, r28	; 61
    1578:	cf 91       	pop	r28
    157a:	df 91       	pop	r29
    157c:	08 95       	ret

0000157e <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	df 93       	push	r29
    1584:	cf 93       	push	r28
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	cc 54       	subi	r28, 0x4C	; 76
    158c:	d0 40       	sbci	r29, 0x00	; 0
    158e:	0f b6       	in	r0, 0x3f	; 63
    1590:	f8 94       	cli
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	0f be       	out	0x3f, r0	; 63
    1596:	cd bf       	out	0x3d, r28	; 61
    1598:	fe 01       	movw	r30, r28
    159a:	e7 5b       	subi	r30, 0xB7	; 183
    159c:	ff 4f       	sbci	r31, 0xFF	; 255
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	ac e0       	ldi	r26, 0x0C	; 12
    15a4:	b2 e4       	ldi	r27, 0x42	; 66
    15a6:	80 83       	st	Z, r24
    15a8:	91 83       	std	Z+1, r25	; 0x01
    15aa:	a2 83       	std	Z+2, r26	; 0x02
    15ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ae:	8e 01       	movw	r16, r28
    15b0:	0b 5b       	subi	r16, 0xBB	; 187
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	fe 01       	movw	r30, r28
    15b6:	e7 5b       	subi	r30, 0xB7	; 183
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	4a ef       	ldi	r20, 0xFA	; 250
    15c8:	54 e4       	ldi	r21, 0x44	; 68
    15ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	f8 01       	movw	r30, r16
    15d4:	80 83       	st	Z, r24
    15d6:	91 83       	std	Z+1, r25	; 0x01
    15d8:	a2 83       	std	Z+2, r26	; 0x02
    15da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15dc:	fe 01       	movw	r30, r28
    15de:	eb 5b       	subi	r30, 0xBB	; 187
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	82 81       	ldd	r24, Z+2	; 0x02
    15e8:	93 81       	ldd	r25, Z+3	; 0x03
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	40 e8       	ldi	r20, 0x80	; 128
    15f0:	5f e3       	ldi	r21, 0x3F	; 63
    15f2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15f6:	88 23       	and	r24, r24
    15f8:	44 f4       	brge	.+16     	; 0x160a <LCD_voidInit+0x8c>
		__ticks = 1;
    15fa:	fe 01       	movw	r30, r28
    15fc:	ed 5b       	subi	r30, 0xBD	; 189
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	91 83       	std	Z+1, r25	; 0x01
    1606:	80 83       	st	Z, r24
    1608:	64 c0       	rjmp	.+200    	; 0x16d2 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    160a:	fe 01       	movw	r30, r28
    160c:	eb 5b       	subi	r30, 0xBB	; 187
    160e:	ff 4f       	sbci	r31, 0xFF	; 255
    1610:	60 81       	ld	r22, Z
    1612:	71 81       	ldd	r23, Z+1	; 0x01
    1614:	82 81       	ldd	r24, Z+2	; 0x02
    1616:	93 81       	ldd	r25, Z+3	; 0x03
    1618:	20 e0       	ldi	r18, 0x00	; 0
    161a:	3f ef       	ldi	r19, 0xFF	; 255
    161c:	4f e7       	ldi	r20, 0x7F	; 127
    161e:	57 e4       	ldi	r21, 0x47	; 71
    1620:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1624:	18 16       	cp	r1, r24
    1626:	0c f0       	brlt	.+2      	; 0x162a <LCD_voidInit+0xac>
    1628:	43 c0       	rjmp	.+134    	; 0x16b0 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    162a:	fe 01       	movw	r30, r28
    162c:	e7 5b       	subi	r30, 0xB7	; 183
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e2       	ldi	r20, 0x20	; 32
    163e:	51 e4       	ldi	r21, 0x41	; 65
    1640:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	8e 01       	movw	r16, r28
    164a:	0d 5b       	subi	r16, 0xBD	; 189
    164c:	1f 4f       	sbci	r17, 0xFF	; 255
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	f8 01       	movw	r30, r16
    165c:	91 83       	std	Z+1, r25	; 0x01
    165e:	80 83       	st	Z, r24
    1660:	1f c0       	rjmp	.+62     	; 0x16a0 <LCD_voidInit+0x122>
    1662:	fe 01       	movw	r30, r28
    1664:	ef 5b       	subi	r30, 0xBF	; 191
    1666:	ff 4f       	sbci	r31, 0xFF	; 255
    1668:	88 ec       	ldi	r24, 0xC8	; 200
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	91 83       	std	Z+1, r25	; 0x01
    166e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1670:	fe 01       	movw	r30, r28
    1672:	ef 5b       	subi	r30, 0xBF	; 191
    1674:	ff 4f       	sbci	r31, 0xFF	; 255
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <LCD_voidInit+0xfc>
    167e:	fe 01       	movw	r30, r28
    1680:	ef 5b       	subi	r30, 0xBF	; 191
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	91 83       	std	Z+1, r25	; 0x01
    1686:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1688:	de 01       	movw	r26, r28
    168a:	ad 5b       	subi	r26, 0xBD	; 189
    168c:	bf 4f       	sbci	r27, 0xFF	; 255
    168e:	fe 01       	movw	r30, r28
    1690:	ed 5b       	subi	r30, 0xBD	; 189
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	11 96       	adiw	r26, 0x01	; 1
    169c:	9c 93       	st	X, r25
    169e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	fe 01       	movw	r30, r28
    16a2:	ed 5b       	subi	r30, 0xBD	; 189
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	91 81       	ldd	r25, Z+1	; 0x01
    16aa:	00 97       	sbiw	r24, 0x00	; 0
    16ac:	d1 f6       	brne	.-76     	; 0x1662 <LCD_voidInit+0xe4>
    16ae:	24 c0       	rjmp	.+72     	; 0x16f8 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b0:	8e 01       	movw	r16, r28
    16b2:	0d 5b       	subi	r16, 0xBD	; 189
    16b4:	1f 4f       	sbci	r17, 0xFF	; 255
    16b6:	fe 01       	movw	r30, r28
    16b8:	eb 5b       	subi	r30, 0xBB	; 187
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16c8:	dc 01       	movw	r26, r24
    16ca:	cb 01       	movw	r24, r22
    16cc:	f8 01       	movw	r30, r16
    16ce:	91 83       	std	Z+1, r25	; 0x01
    16d0:	80 83       	st	Z, r24
    16d2:	fe 01       	movw	r30, r28
    16d4:	ed 5b       	subi	r30, 0xBD	; 189
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	80 81       	ld	r24, Z
    16da:	91 81       	ldd	r25, Z+1	; 0x01
    16dc:	fe 01       	movw	r30, r28
    16de:	ff 96       	adiw	r30, 0x3f	; 63
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	80 83       	st	Z, r24
    16e4:	fe 01       	movw	r30, r28
    16e6:	ff 96       	adiw	r30, 0x3f	; 63
    16e8:	80 81       	ld	r24, Z
    16ea:	91 81       	ldd	r25, Z+1	; 0x01
    16ec:	01 97       	sbiw	r24, 0x01	; 1
    16ee:	f1 f7       	brne	.-4      	; 0x16ec <LCD_voidInit+0x16e>
    16f0:	fe 01       	movw	r30, r28
    16f2:	ff 96       	adiw	r30, 0x3f	; 63
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
	_delay_ms(35);
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    16f8:	88 e3       	ldi	r24, 0x38	; 56
    16fa:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	a0 e2       	ldi	r26, 0x20	; 32
    1704:	b2 e4       	ldi	r27, 0x42	; 66
    1706:	8b af       	std	Y+59, r24	; 0x3b
    1708:	9c af       	std	Y+60, r25	; 0x3c
    170a:	ad af       	std	Y+61, r26	; 0x3d
    170c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    170e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1710:	7c ad       	ldd	r23, Y+60	; 0x3c
    1712:	8d ad       	ldd	r24, Y+61	; 0x3d
    1714:	9e ad       	ldd	r25, Y+62	; 0x3e
    1716:	2b ea       	ldi	r18, 0xAB	; 171
    1718:	3a ea       	ldi	r19, 0xAA	; 170
    171a:	4a e2       	ldi	r20, 0x2A	; 42
    171c:	50 e4       	ldi	r21, 0x40	; 64
    171e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1722:	dc 01       	movw	r26, r24
    1724:	cb 01       	movw	r24, r22
    1726:	8f ab       	std	Y+55, r24	; 0x37
    1728:	98 af       	std	Y+56, r25	; 0x38
    172a:	a9 af       	std	Y+57, r26	; 0x39
    172c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    172e:	6f a9       	ldd	r22, Y+55	; 0x37
    1730:	78 ad       	ldd	r23, Y+56	; 0x38
    1732:	89 ad       	ldd	r24, Y+57	; 0x39
    1734:	9a ad       	ldd	r25, Y+58	; 0x3a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	40 e8       	ldi	r20, 0x80	; 128
    173c:	5f e3       	ldi	r21, 0x3F	; 63
    173e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1742:	88 23       	and	r24, r24
    1744:	1c f4       	brge	.+6      	; 0x174c <LCD_voidInit+0x1ce>
		__ticks = 1;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	8e ab       	std	Y+54, r24	; 0x36
    174a:	91 c0       	rjmp	.+290    	; 0x186e <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    174c:	6f a9       	ldd	r22, Y+55	; 0x37
    174e:	78 ad       	ldd	r23, Y+56	; 0x38
    1750:	89 ad       	ldd	r24, Y+57	; 0x39
    1752:	9a ad       	ldd	r25, Y+58	; 0x3a
    1754:	20 e0       	ldi	r18, 0x00	; 0
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	4f e7       	ldi	r20, 0x7F	; 127
    175a:	53 e4       	ldi	r21, 0x43	; 67
    175c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1760:	18 16       	cp	r1, r24
    1762:	0c f0       	brlt	.+2      	; 0x1766 <LCD_voidInit+0x1e8>
    1764:	7b c0       	rjmp	.+246    	; 0x185c <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1766:	6b ad       	ldd	r22, Y+59	; 0x3b
    1768:	7c ad       	ldd	r23, Y+60	; 0x3c
    176a:	8d ad       	ldd	r24, Y+61	; 0x3d
    176c:	9e ad       	ldd	r25, Y+62	; 0x3e
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	4a e7       	ldi	r20, 0x7A	; 122
    1774:	54 e4       	ldi	r21, 0x44	; 68
    1776:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    177a:	dc 01       	movw	r26, r24
    177c:	cb 01       	movw	r24, r22
    177e:	8a ab       	std	Y+50, r24	; 0x32
    1780:	9b ab       	std	Y+51, r25	; 0x33
    1782:	ac ab       	std	Y+52, r26	; 0x34
    1784:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1786:	6a a9       	ldd	r22, Y+50	; 0x32
    1788:	7b a9       	ldd	r23, Y+51	; 0x33
    178a:	8c a9       	ldd	r24, Y+52	; 0x34
    178c:	9d a9       	ldd	r25, Y+53	; 0x35
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a ef       	ldi	r20, 0xFA	; 250
    1794:	54 e4       	ldi	r21, 0x44	; 68
    1796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	8e a7       	std	Y+46, r24	; 0x2e
    17a0:	9f a7       	std	Y+47, r25	; 0x2f
    17a2:	a8 ab       	std	Y+48, r26	; 0x30
    17a4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    17a6:	6e a5       	ldd	r22, Y+46	; 0x2e
    17a8:	7f a5       	ldd	r23, Y+47	; 0x2f
    17aa:	88 a9       	ldd	r24, Y+48	; 0x30
    17ac:	99 a9       	ldd	r25, Y+49	; 0x31
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <LCD_voidInit+0x24a>
		__ticks = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9d a7       	std	Y+45, r25	; 0x2d
    17c4:	8c a7       	std	Y+44, r24	; 0x2c
    17c6:	3f c0       	rjmp	.+126    	; 0x1846 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    17c8:	6e a5       	ldd	r22, Y+46	; 0x2e
    17ca:	7f a5       	ldd	r23, Y+47	; 0x2f
    17cc:	88 a9       	ldd	r24, Y+48	; 0x30
    17ce:	99 a9       	ldd	r25, Y+49	; 0x31
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17dc:	18 16       	cp	r1, r24
    17de:	4c f5       	brge	.+82     	; 0x1832 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	6a a9       	ldd	r22, Y+50	; 0x32
    17e2:	7b a9       	ldd	r23, Y+51	; 0x33
    17e4:	8c a9       	ldd	r24, Y+52	; 0x34
    17e6:	9d a9       	ldd	r25, Y+53	; 0x35
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9d a7       	std	Y+45, r25	; 0x2d
    1806:	8c a7       	std	Y+44, r24	; 0x2c
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <LCD_voidInit+0x2aa>
    180a:	88 ec       	ldi	r24, 0xC8	; 200
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9b a7       	std	Y+43, r25	; 0x2b
    1810:	8a a7       	std	Y+42, r24	; 0x2a
    1812:	8a a5       	ldd	r24, Y+42	; 0x2a
    1814:	9b a5       	ldd	r25, Y+43	; 0x2b
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <LCD_voidInit+0x298>
    181a:	9b a7       	std	Y+43, r25	; 0x2b
    181c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1820:	9d a5       	ldd	r25, Y+45	; 0x2d
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	9d a7       	std	Y+45, r25	; 0x2d
    1826:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1828:	8c a5       	ldd	r24, Y+44	; 0x2c
    182a:	9d a5       	ldd	r25, Y+45	; 0x2d
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	69 f7       	brne	.-38     	; 0x180a <LCD_voidInit+0x28c>
    1830:	24 c0       	rjmp	.+72     	; 0x187a <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	6e a5       	ldd	r22, Y+46	; 0x2e
    1834:	7f a5       	ldd	r23, Y+47	; 0x2f
    1836:	88 a9       	ldd	r24, Y+48	; 0x30
    1838:	99 a9       	ldd	r25, Y+49	; 0x31
    183a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9d a7       	std	Y+45, r25	; 0x2d
    1844:	8c a7       	std	Y+44, r24	; 0x2c
    1846:	8c a5       	ldd	r24, Y+44	; 0x2c
    1848:	9d a5       	ldd	r25, Y+45	; 0x2d
    184a:	99 a7       	std	Y+41, r25	; 0x29
    184c:	88 a7       	std	Y+40, r24	; 0x28
    184e:	88 a5       	ldd	r24, Y+40	; 0x28
    1850:	99 a5       	ldd	r25, Y+41	; 0x29
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <LCD_voidInit+0x2d4>
    1856:	99 a7       	std	Y+41, r25	; 0x29
    1858:	88 a7       	std	Y+40, r24	; 0x28
    185a:	0f c0       	rjmp	.+30     	; 0x187a <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    185c:	6f a9       	ldd	r22, Y+55	; 0x37
    185e:	78 ad       	ldd	r23, Y+56	; 0x38
    1860:	89 ad       	ldd	r24, Y+57	; 0x39
    1862:	9a ad       	ldd	r25, Y+58	; 0x3a
    1864:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	8e ab       	std	Y+54, r24	; 0x36
    186e:	8e a9       	ldd	r24, Y+54	; 0x36
    1870:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1872:	8f a1       	ldd	r24, Y+39	; 0x27
    1874:	8a 95       	dec	r24
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_voidInit+0x2f6>
    1878:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    187a:	8f e0       	ldi	r24, 0x0F	; 15
    187c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 e2       	ldi	r26, 0x20	; 32
    1886:	b2 e4       	ldi	r27, 0x42	; 66
    1888:	8b a3       	std	Y+35, r24	; 0x23
    188a:	9c a3       	std	Y+36, r25	; 0x24
    188c:	ad a3       	std	Y+37, r26	; 0x25
    188e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1890:	6b a1       	ldd	r22, Y+35	; 0x23
    1892:	7c a1       	ldd	r23, Y+36	; 0x24
    1894:	8d a1       	ldd	r24, Y+37	; 0x25
    1896:	9e a1       	ldd	r25, Y+38	; 0x26
    1898:	2b ea       	ldi	r18, 0xAB	; 171
    189a:	3a ea       	ldi	r19, 0xAA	; 170
    189c:	4a e2       	ldi	r20, 0x2A	; 42
    189e:	50 e4       	ldi	r21, 0x40	; 64
    18a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	8f 8f       	std	Y+31, r24	; 0x1f
    18aa:	98 a3       	std	Y+32, r25	; 0x20
    18ac:	a9 a3       	std	Y+33, r26	; 0x21
    18ae:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18b0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18b2:	78 a1       	ldd	r23, Y+32	; 0x20
    18b4:	89 a1       	ldd	r24, Y+33	; 0x21
    18b6:	9a a1       	ldd	r25, Y+34	; 0x22
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	1c f4       	brge	.+6      	; 0x18ce <LCD_voidInit+0x350>
		__ticks = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	8e 8f       	std	Y+30, r24	; 0x1e
    18cc:	91 c0       	rjmp	.+290    	; 0x19f0 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    18ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18d0:	78 a1       	ldd	r23, Y+32	; 0x20
    18d2:	89 a1       	ldd	r24, Y+33	; 0x21
    18d4:	9a a1       	ldd	r25, Y+34	; 0x22
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	4f e7       	ldi	r20, 0x7F	; 127
    18dc:	53 e4       	ldi	r21, 0x43	; 67
    18de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    18e2:	18 16       	cp	r1, r24
    18e4:	0c f0       	brlt	.+2      	; 0x18e8 <LCD_voidInit+0x36a>
    18e6:	7b c0       	rjmp	.+246    	; 0x19de <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    18e8:	6b a1       	ldd	r22, Y+35	; 0x23
    18ea:	7c a1       	ldd	r23, Y+36	; 0x24
    18ec:	8d a1       	ldd	r24, Y+37	; 0x25
    18ee:	9e a1       	ldd	r25, Y+38	; 0x26
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4a e7       	ldi	r20, 0x7A	; 122
    18f6:	54 e4       	ldi	r21, 0x44	; 68
    18f8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    18fc:	dc 01       	movw	r26, r24
    18fe:	cb 01       	movw	r24, r22
    1900:	8a 8f       	std	Y+26, r24	; 0x1a
    1902:	9b 8f       	std	Y+27, r25	; 0x1b
    1904:	ac 8f       	std	Y+28, r26	; 0x1c
    1906:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1908:	6a 8d       	ldd	r22, Y+26	; 0x1a
    190a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    190c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    190e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	4a ef       	ldi	r20, 0xFA	; 250
    1916:	54 e4       	ldi	r21, 0x44	; 68
    1918:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	8e 8b       	std	Y+22, r24	; 0x16
    1922:	9f 8b       	std	Y+23, r25	; 0x17
    1924:	a8 8f       	std	Y+24, r26	; 0x18
    1926:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1928:	6e 89       	ldd	r22, Y+22	; 0x16
    192a:	7f 89       	ldd	r23, Y+23	; 0x17
    192c:	88 8d       	ldd	r24, Y+24	; 0x18
    192e:	99 8d       	ldd	r25, Y+25	; 0x19
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	40 e8       	ldi	r20, 0x80	; 128
    1936:	5f e3       	ldi	r21, 0x3F	; 63
    1938:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    193c:	88 23       	and	r24, r24
    193e:	2c f4       	brge	.+10     	; 0x194a <LCD_voidInit+0x3cc>
		__ticks = 1;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9d 8b       	std	Y+21, r25	; 0x15
    1946:	8c 8b       	std	Y+20, r24	; 0x14
    1948:	3f c0       	rjmp	.+126    	; 0x19c8 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    194a:	6e 89       	ldd	r22, Y+22	; 0x16
    194c:	7f 89       	ldd	r23, Y+23	; 0x17
    194e:	88 8d       	ldd	r24, Y+24	; 0x18
    1950:	99 8d       	ldd	r25, Y+25	; 0x19
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	3f ef       	ldi	r19, 0xFF	; 255
    1956:	4f e7       	ldi	r20, 0x7F	; 127
    1958:	57 e4       	ldi	r21, 0x47	; 71
    195a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    195e:	18 16       	cp	r1, r24
    1960:	4c f5       	brge	.+82     	; 0x19b4 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1962:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1964:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1966:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1968:	9d 8d       	ldd	r25, Y+29	; 0x1d
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	bc 01       	movw	r22, r24
    197c:	cd 01       	movw	r24, r26
    197e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9d 8b       	std	Y+21, r25	; 0x15
    1988:	8c 8b       	std	Y+20, r24	; 0x14
    198a:	0f c0       	rjmp	.+30     	; 0x19aa <LCD_voidInit+0x42c>
    198c:	88 ec       	ldi	r24, 0xC8	; 200
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9b 8b       	std	Y+19, r25	; 0x13
    1992:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1994:	8a 89       	ldd	r24, Y+18	; 0x12
    1996:	9b 89       	ldd	r25, Y+19	; 0x13
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	f1 f7       	brne	.-4      	; 0x1998 <LCD_voidInit+0x41a>
    199c:	9b 8b       	std	Y+19, r25	; 0x13
    199e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a0:	8c 89       	ldd	r24, Y+20	; 0x14
    19a2:	9d 89       	ldd	r25, Y+21	; 0x15
    19a4:	01 97       	sbiw	r24, 0x01	; 1
    19a6:	9d 8b       	std	Y+21, r25	; 0x15
    19a8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19aa:	8c 89       	ldd	r24, Y+20	; 0x14
    19ac:	9d 89       	ldd	r25, Y+21	; 0x15
    19ae:	00 97       	sbiw	r24, 0x00	; 0
    19b0:	69 f7       	brne	.-38     	; 0x198c <LCD_voidInit+0x40e>
    19b2:	24 c0       	rjmp	.+72     	; 0x19fc <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b4:	6e 89       	ldd	r22, Y+22	; 0x16
    19b6:	7f 89       	ldd	r23, Y+23	; 0x17
    19b8:	88 8d       	ldd	r24, Y+24	; 0x18
    19ba:	99 8d       	ldd	r25, Y+25	; 0x19
    19bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	9d 8b       	std	Y+21, r25	; 0x15
    19c6:	8c 8b       	std	Y+20, r24	; 0x14
    19c8:	8c 89       	ldd	r24, Y+20	; 0x14
    19ca:	9d 89       	ldd	r25, Y+21	; 0x15
    19cc:	99 8b       	std	Y+17, r25	; 0x11
    19ce:	88 8b       	std	Y+16, r24	; 0x10
    19d0:	88 89       	ldd	r24, Y+16	; 0x10
    19d2:	99 89       	ldd	r25, Y+17	; 0x11
    19d4:	01 97       	sbiw	r24, 0x01	; 1
    19d6:	f1 f7       	brne	.-4      	; 0x19d4 <LCD_voidInit+0x456>
    19d8:	99 8b       	std	Y+17, r25	; 0x11
    19da:	88 8b       	std	Y+16, r24	; 0x10
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    19e0:	78 a1       	ldd	r23, Y+32	; 0x20
    19e2:	89 a1       	ldd	r24, Y+33	; 0x21
    19e4:	9a a1       	ldd	r25, Y+34	; 0x22
    19e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19ea:	dc 01       	movw	r26, r24
    19ec:	cb 01       	movw	r24, r22
    19ee:	8e 8f       	std	Y+30, r24	; 0x1e
    19f0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19f2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    19f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f6:	8a 95       	dec	r24
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_voidInit+0x478>
    19fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a0 e0       	ldi	r26, 0x00	; 0
    1a08:	b0 e4       	ldi	r27, 0x40	; 64
    1a0a:	8b 87       	std	Y+11, r24	; 0x0b
    1a0c:	9c 87       	std	Y+12, r25	; 0x0c
    1a0e:	ad 87       	std	Y+13, r26	; 0x0d
    1a10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	4a ef       	ldi	r20, 0xFA	; 250
    1a20:	54 e4       	ldi	r21, 0x44	; 68
    1a22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a26:	dc 01       	movw	r26, r24
    1a28:	cb 01       	movw	r24, r22
    1a2a:	8f 83       	std	Y+7, r24	; 0x07
    1a2c:	98 87       	std	Y+8, r25	; 0x08
    1a2e:	a9 87       	std	Y+9, r26	; 0x09
    1a30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a32:	6f 81       	ldd	r22, Y+7	; 0x07
    1a34:	78 85       	ldd	r23, Y+8	; 0x08
    1a36:	89 85       	ldd	r24, Y+9	; 0x09
    1a38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	40 e8       	ldi	r20, 0x80	; 128
    1a40:	5f e3       	ldi	r21, 0x3F	; 63
    1a42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a46:	88 23       	and	r24, r24
    1a48:	2c f4       	brge	.+10     	; 0x1a54 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9e 83       	std	Y+6, r25	; 0x06
    1a50:	8d 83       	std	Y+5, r24	; 0x05
    1a52:	3f c0       	rjmp	.+126    	; 0x1ad2 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1a54:	6f 81       	ldd	r22, Y+7	; 0x07
    1a56:	78 85       	ldd	r23, Y+8	; 0x08
    1a58:	89 85       	ldd	r24, Y+9	; 0x09
    1a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5c:	20 e0       	ldi	r18, 0x00	; 0
    1a5e:	3f ef       	ldi	r19, 0xFF	; 255
    1a60:	4f e7       	ldi	r20, 0x7F	; 127
    1a62:	57 e4       	ldi	r21, 0x47	; 71
    1a64:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a68:	18 16       	cp	r1, r24
    1a6a:	4c f5       	brge	.+82     	; 0x1abe <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	40 e2       	ldi	r20, 0x20	; 32
    1a7a:	51 e4       	ldi	r21, 0x41	; 65
    1a7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	9e 83       	std	Y+6, r25	; 0x06
    1a92:	8d 83       	std	Y+5, r24	; 0x05
    1a94:	0f c0       	rjmp	.+30     	; 0x1ab4 <LCD_voidInit+0x536>
    1a96:	88 ec       	ldi	r24, 0xC8	; 200
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9c 83       	std	Y+4, r25	; 0x04
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	01 97       	sbiw	r24, 0x01	; 1
    1aa4:	f1 f7       	brne	.-4      	; 0x1aa2 <LCD_voidInit+0x524>
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab8:	00 97       	sbiw	r24, 0x00	; 0
    1aba:	69 f7       	brne	.-38     	; 0x1a96 <LCD_voidInit+0x518>
    1abc:	14 c0       	rjmp	.+40     	; 0x1ae6 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	9a 83       	std	Y+2, r25	; 0x02
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <LCD_voidInit+0x560>
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    1ae6:	86 e0       	ldi	r24, 0x06	; 6
    1ae8:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>


}
    1aec:	c4 5b       	subi	r28, 0xB4	; 180
    1aee:	df 4f       	sbci	r29, 0xFF	; 255
    1af0:	0f b6       	in	r0, 0x3f	; 63
    1af2:	f8 94       	cli
    1af4:	de bf       	out	0x3e, r29	; 62
    1af6:	0f be       	out	0x3f, r0	; 63
    1af8:	cd bf       	out	0x3d, r28	; 61
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	1f 91       	pop	r17
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	e1 97       	sbiw	r28, 0x31	; 49
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	40 e0       	ldi	r20, 0x00	; 0
    1b20:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	40 e0       	ldi	r20, 0x00	; 0
    1b2a:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	69 a9       	ldd	r22, Y+49	; 0x31
    1b32:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	62 e0       	ldi	r22, 0x02	; 2
    1b3a:	41 e0       	ldi	r20, 0x01	; 1
    1b3c:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	a0 e8       	ldi	r26, 0x80	; 128
    1b46:	bf e3       	ldi	r27, 0x3F	; 63
    1b48:	8d a7       	std	Y+45, r24	; 0x2d
    1b4a:	9e a7       	std	Y+46, r25	; 0x2e
    1b4c:	af a7       	std	Y+47, r26	; 0x2f
    1b4e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b50:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b52:	7e a5       	ldd	r23, Y+46	; 0x2e
    1b54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b56:	98 a9       	ldd	r25, Y+48	; 0x30
    1b58:	2b ea       	ldi	r18, 0xAB	; 171
    1b5a:	3a ea       	ldi	r19, 0xAA	; 170
    1b5c:	4a e2       	ldi	r20, 0x2A	; 42
    1b5e:	50 e4       	ldi	r21, 0x40	; 64
    1b60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	89 a7       	std	Y+41, r24	; 0x29
    1b6a:	9a a7       	std	Y+42, r25	; 0x2a
    1b6c:	ab a7       	std	Y+43, r26	; 0x2b
    1b6e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1b70:	69 a5       	ldd	r22, Y+41	; 0x29
    1b72:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b74:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b76:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	40 e8       	ldi	r20, 0x80	; 128
    1b7e:	5f e3       	ldi	r21, 0x3F	; 63
    1b80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b84:	88 23       	and	r24, r24
    1b86:	1c f4       	brge	.+6      	; 0x1b8e <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	88 a7       	std	Y+40, r24	; 0x28
    1b8c:	91 c0       	rjmp	.+290    	; 0x1cb0 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1b8e:	69 a5       	ldd	r22, Y+41	; 0x29
    1b90:	7a a5       	ldd	r23, Y+42	; 0x2a
    1b92:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b94:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	4f e7       	ldi	r20, 0x7F	; 127
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	0c f0       	brlt	.+2      	; 0x1ba8 <LCD_voidSendCmnd+0xa4>
    1ba6:	7b c0       	rjmp	.+246    	; 0x1c9e <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ba8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1baa:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bae:	98 a9       	ldd	r25, Y+48	; 0x30
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a e7       	ldi	r20, 0x7A	; 122
    1bb6:	54 e4       	ldi	r21, 0x44	; 68
    1bb8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	8c a3       	std	Y+36, r24	; 0x24
    1bc2:	9d a3       	std	Y+37, r25	; 0x25
    1bc4:	ae a3       	std	Y+38, r26	; 0x26
    1bc6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bc8:	6c a1       	ldd	r22, Y+36	; 0x24
    1bca:	7d a1       	ldd	r23, Y+37	; 0x25
    1bcc:	8e a1       	ldd	r24, Y+38	; 0x26
    1bce:	9f a1       	ldd	r25, Y+39	; 0x27
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	4a ef       	ldi	r20, 0xFA	; 250
    1bd6:	54 e4       	ldi	r21, 0x44	; 68
    1bd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bdc:	dc 01       	movw	r26, r24
    1bde:	cb 01       	movw	r24, r22
    1be0:	88 a3       	std	Y+32, r24	; 0x20
    1be2:	99 a3       	std	Y+33, r25	; 0x21
    1be4:	aa a3       	std	Y+34, r26	; 0x22
    1be6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1be8:	68 a1       	ldd	r22, Y+32	; 0x20
    1bea:	79 a1       	ldd	r23, Y+33	; 0x21
    1bec:	8a a1       	ldd	r24, Y+34	; 0x22
    1bee:	9b a1       	ldd	r25, Y+35	; 0x23
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	40 e8       	ldi	r20, 0x80	; 128
    1bf6:	5f e3       	ldi	r21, 0x3F	; 63
    1bf8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bfc:	88 23       	and	r24, r24
    1bfe:	2c f4       	brge	.+10     	; 0x1c0a <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	9f 8f       	std	Y+31, r25	; 0x1f
    1c06:	8e 8f       	std	Y+30, r24	; 0x1e
    1c08:	3f c0       	rjmp	.+126    	; 0x1c88 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1c0a:	68 a1       	ldd	r22, Y+32	; 0x20
    1c0c:	79 a1       	ldd	r23, Y+33	; 0x21
    1c0e:	8a a1       	ldd	r24, Y+34	; 0x22
    1c10:	9b a1       	ldd	r25, Y+35	; 0x23
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	3f ef       	ldi	r19, 0xFF	; 255
    1c16:	4f e7       	ldi	r20, 0x7F	; 127
    1c18:	57 e4       	ldi	r21, 0x47	; 71
    1c1a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c1e:	18 16       	cp	r1, r24
    1c20:	4c f5       	brge	.+82     	; 0x1c74 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c22:	6c a1       	ldd	r22, Y+36	; 0x24
    1c24:	7d a1       	ldd	r23, Y+37	; 0x25
    1c26:	8e a1       	ldd	r24, Y+38	; 0x26
    1c28:	9f a1       	ldd	r25, Y+39	; 0x27
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	40 e2       	ldi	r20, 0x20	; 32
    1c30:	51 e4       	ldi	r21, 0x41	; 65
    1c32:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	bc 01       	movw	r22, r24
    1c3c:	cd 01       	movw	r24, r26
    1c3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9f 8f       	std	Y+31, r25	; 0x1f
    1c48:	8e 8f       	std	Y+30, r24	; 0x1e
    1c4a:	0f c0       	rjmp	.+30     	; 0x1c6a <LCD_voidSendCmnd+0x166>
    1c4c:	88 ec       	ldi	r24, 0xC8	; 200
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9d 8f       	std	Y+29, r25	; 0x1d
    1c52:	8c 8f       	std	Y+28, r24	; 0x1c
    1c54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_voidSendCmnd+0x154>
    1c5c:	9d 8f       	std	Y+29, r25	; 0x1d
    1c5e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c62:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c64:	01 97       	sbiw	r24, 0x01	; 1
    1c66:	9f 8f       	std	Y+31, r25	; 0x1f
    1c68:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c6a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c6c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	69 f7       	brne	.-38     	; 0x1c4c <LCD_voidSendCmnd+0x148>
    1c72:	24 c0       	rjmp	.+72     	; 0x1cbc <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c74:	68 a1       	ldd	r22, Y+32	; 0x20
    1c76:	79 a1       	ldd	r23, Y+33	; 0x21
    1c78:	8a a1       	ldd	r24, Y+34	; 0x22
    1c7a:	9b a1       	ldd	r25, Y+35	; 0x23
    1c7c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	9f 8f       	std	Y+31, r25	; 0x1f
    1c86:	8e 8f       	std	Y+30, r24	; 0x1e
    1c88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1c8c:	9b 8f       	std	Y+27, r25	; 0x1b
    1c8e:	8a 8f       	std	Y+26, r24	; 0x1a
    1c90:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c92:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c94:	01 97       	sbiw	r24, 0x01	; 1
    1c96:	f1 f7       	brne	.-4      	; 0x1c94 <LCD_voidSendCmnd+0x190>
    1c98:	9b 8f       	std	Y+27, r25	; 0x1b
    1c9a:	8a 8f       	std	Y+26, r24	; 0x1a
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c9e:	69 a5       	ldd	r22, Y+41	; 0x29
    1ca0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ca2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ca4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ca6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	88 a7       	std	Y+40, r24	; 0x28
    1cb0:	88 a5       	ldd	r24, Y+40	; 0x28
    1cb2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cb4:	89 8d       	ldd	r24, Y+25	; 0x19
    1cb6:	8a 95       	dec	r24
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_voidSendCmnd+0x1b2>
    1cba:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	62 e0       	ldi	r22, 0x02	; 2
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    1cc6:	80 e0       	ldi	r24, 0x00	; 0
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	a0 e8       	ldi	r26, 0x80	; 128
    1ccc:	bf e3       	ldi	r27, 0x3F	; 63
    1cce:	8d 8b       	std	Y+21, r24	; 0x15
    1cd0:	9e 8b       	std	Y+22, r25	; 0x16
    1cd2:	af 8b       	std	Y+23, r26	; 0x17
    1cd4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cda:	8f 89       	ldd	r24, Y+23	; 0x17
    1cdc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cde:	2b ea       	ldi	r18, 0xAB	; 171
    1ce0:	3a ea       	ldi	r19, 0xAA	; 170
    1ce2:	4a e2       	ldi	r20, 0x2A	; 42
    1ce4:	50 e4       	ldi	r21, 0x40	; 64
    1ce6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	89 8b       	std	Y+17, r24	; 0x11
    1cf0:	9a 8b       	std	Y+18, r25	; 0x12
    1cf2:	ab 8b       	std	Y+19, r26	; 0x13
    1cf4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1cf6:	69 89       	ldd	r22, Y+17	; 0x11
    1cf8:	7a 89       	ldd	r23, Y+18	; 0x12
    1cfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e8       	ldi	r20, 0x80	; 128
    1d04:	5f e3       	ldi	r21, 0x3F	; 63
    1d06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d0a:	88 23       	and	r24, r24
    1d0c:	1c f4       	brge	.+6      	; 0x1d14 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	88 8b       	std	Y+16, r24	; 0x10
    1d12:	91 c0       	rjmp	.+290    	; 0x1e36 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    1d14:	69 89       	ldd	r22, Y+17	; 0x11
    1d16:	7a 89       	ldd	r23, Y+18	; 0x12
    1d18:	8b 89       	ldd	r24, Y+19	; 0x13
    1d1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	53 e4       	ldi	r21, 0x43	; 67
    1d24:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	0c f0       	brlt	.+2      	; 0x1d2e <LCD_voidSendCmnd+0x22a>
    1d2c:	7b c0       	rjmp	.+246    	; 0x1e24 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    1d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1d30:	7e 89       	ldd	r23, Y+22	; 0x16
    1d32:	8f 89       	ldd	r24, Y+23	; 0x17
    1d34:	98 8d       	ldd	r25, Y+24	; 0x18
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	4a e7       	ldi	r20, 0x7A	; 122
    1d3c:	54 e4       	ldi	r21, 0x44	; 68
    1d3e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	8c 87       	std	Y+12, r24	; 0x0c
    1d48:	9d 87       	std	Y+13, r25	; 0x0d
    1d4a:	ae 87       	std	Y+14, r26	; 0x0e
    1d4c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d50:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d52:	8e 85       	ldd	r24, Y+14	; 0x0e
    1d54:	9f 85       	ldd	r25, Y+15	; 0x0f
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a ef       	ldi	r20, 0xFA	; 250
    1d5c:	54 e4       	ldi	r21, 0x44	; 68
    1d5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	88 87       	std	Y+8, r24	; 0x08
    1d68:	99 87       	std	Y+9, r25	; 0x09
    1d6a:	aa 87       	std	Y+10, r26	; 0x0a
    1d6c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1d6e:	68 85       	ldd	r22, Y+8	; 0x08
    1d70:	79 85       	ldd	r23, Y+9	; 0x09
    1d72:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d74:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9f 83       	std	Y+7, r25	; 0x07
    1d8c:	8e 83       	std	Y+6, r24	; 0x06
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    1d90:	68 85       	ldd	r22, Y+8	; 0x08
    1d92:	79 85       	ldd	r23, Y+9	; 0x09
    1d94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1daa:	7d 85       	ldd	r23, Y+13	; 0x0d
    1dac:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dae:	9f 85       	ldd	r25, Y+15	; 0x0f
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9f 83       	std	Y+7, r25	; 0x07
    1dce:	8e 83       	std	Y+6, r24	; 0x06
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_voidSendCmnd+0x2ec>
    1dd2:	88 ec       	ldi	r24, 0xC8	; 200
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9d 83       	std	Y+5, r25	; 0x05
    1dd8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dda:	8c 81       	ldd	r24, Y+4	; 0x04
    1ddc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_voidSendCmnd+0x2da>
    1de2:	9d 83       	std	Y+5, r25	; 0x05
    1de4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8e 81       	ldd	r24, Y+6	; 0x06
    1de8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9f 83       	std	Y+7, r25	; 0x07
    1dee:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	9f 81       	ldd	r25, Y+7	; 0x07
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_voidSendCmnd+0x2ce>
    1df8:	24 c0       	rjmp	.+72     	; 0x1e42 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	68 85       	ldd	r22, Y+8	; 0x08
    1dfc:	79 85       	ldd	r23, Y+9	; 0x09
    1dfe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e00:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e02:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9f 83       	std	Y+7, r25	; 0x07
    1e0c:	8e 83       	std	Y+6, r24	; 0x06
    1e0e:	8e 81       	ldd	r24, Y+6	; 0x06
    1e10:	9f 81       	ldd	r25, Y+7	; 0x07
    1e12:	9b 83       	std	Y+3, r25	; 0x03
    1e14:	8a 83       	std	Y+2, r24	; 0x02
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_voidSendCmnd+0x316>
    1e1e:	9b 83       	std	Y+3, r25	; 0x03
    1e20:	8a 83       	std	Y+2, r24	; 0x02
    1e22:	0f c0       	rjmp	.+30     	; 0x1e42 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e24:	69 89       	ldd	r22, Y+17	; 0x11
    1e26:	7a 89       	ldd	r23, Y+18	; 0x12
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	88 8b       	std	Y+16, r24	; 0x10
    1e36:	88 89       	ldd	r24, Y+16	; 0x10
    1e38:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	8a 95       	dec	r24
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_voidSendCmnd+0x338>
    1e40:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    1e42:	e1 96       	adiw	r28, 0x31	; 49
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1e54:	df 93       	push	r29
    1e56:	cf 93       	push	r28
    1e58:	cd b7       	in	r28, 0x3d	; 61
    1e5a:	de b7       	in	r29, 0x3e	; 62
    1e5c:	e1 97       	sbiw	r28, 0x31	; 49
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	de bf       	out	0x3e, r29	; 62
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	cd bf       	out	0x3d, r28	; 61
    1e68:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	60 e0       	ldi	r22, 0x00	; 0
    1e6e:	41 e0       	ldi	r20, 0x01	; 1
    1e70:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	61 e0       	ldi	r22, 0x01	; 1
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	69 a9       	ldd	r22, Y+49	; 0x31
    1e82:	0e 94 1f 0a 	call	0x143e	; 0x143e <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	62 e0       	ldi	r22, 0x02	; 2
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 e8       	ldi	r26, 0x80	; 128
    1e96:	bf e3       	ldi	r27, 0x3F	; 63
    1e98:	8d a7       	std	Y+45, r24	; 0x2d
    1e9a:	9e a7       	std	Y+46, r25	; 0x2e
    1e9c:	af a7       	std	Y+47, r26	; 0x2f
    1e9e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ea0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ea2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ea8:	2b ea       	ldi	r18, 0xAB	; 171
    1eaa:	3a ea       	ldi	r19, 0xAA	; 170
    1eac:	4a e2       	ldi	r20, 0x2A	; 42
    1eae:	50 e4       	ldi	r21, 0x40	; 64
    1eb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	89 a7       	std	Y+41, r24	; 0x29
    1eba:	9a a7       	std	Y+42, r25	; 0x2a
    1ebc:	ab a7       	std	Y+43, r26	; 0x2b
    1ebe:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ec0:	69 a5       	ldd	r22, Y+41	; 0x29
    1ec2:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e8       	ldi	r20, 0x80	; 128
    1ece:	5f e3       	ldi	r21, 0x3F	; 63
    1ed0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ed4:	88 23       	and	r24, r24
    1ed6:	1c f4       	brge	.+6      	; 0x1ede <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	88 a7       	std	Y+40, r24	; 0x28
    1edc:	91 c0       	rjmp	.+290    	; 0x2000 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1ede:	69 a5       	ldd	r22, Y+41	; 0x29
    1ee0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ee2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ee4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	53 e4       	ldi	r21, 0x43	; 67
    1eee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	0c f0       	brlt	.+2      	; 0x1ef8 <LCD_voidSendChar+0xa4>
    1ef6:	7b c0       	rjmp	.+246    	; 0x1fee <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1ef8:	6d a5       	ldd	r22, Y+45	; 0x2d
    1efa:	7e a5       	ldd	r23, Y+46	; 0x2e
    1efc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1efe:	98 a9       	ldd	r25, Y+48	; 0x30
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	4a e7       	ldi	r20, 0x7A	; 122
    1f06:	54 e4       	ldi	r21, 0x44	; 68
    1f08:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	8c a3       	std	Y+36, r24	; 0x24
    1f12:	9d a3       	std	Y+37, r25	; 0x25
    1f14:	ae a3       	std	Y+38, r26	; 0x26
    1f16:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f18:	6c a1       	ldd	r22, Y+36	; 0x24
    1f1a:	7d a1       	ldd	r23, Y+37	; 0x25
    1f1c:	8e a1       	ldd	r24, Y+38	; 0x26
    1f1e:	9f a1       	ldd	r25, Y+39	; 0x27
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	4a ef       	ldi	r20, 0xFA	; 250
    1f26:	54 e4       	ldi	r21, 0x44	; 68
    1f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	88 a3       	std	Y+32, r24	; 0x20
    1f32:	99 a3       	std	Y+33, r25	; 0x21
    1f34:	aa a3       	std	Y+34, r26	; 0x22
    1f36:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f38:	68 a1       	ldd	r22, Y+32	; 0x20
    1f3a:	79 a1       	ldd	r23, Y+33	; 0x21
    1f3c:	8a a1       	ldd	r24, Y+34	; 0x22
    1f3e:	9b a1       	ldd	r25, Y+35	; 0x23
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	40 e8       	ldi	r20, 0x80	; 128
    1f46:	5f e3       	ldi	r21, 0x3F	; 63
    1f48:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f4c:	88 23       	and	r24, r24
    1f4e:	2c f4       	brge	.+10     	; 0x1f5a <LCD_voidSendChar+0x106>
		__ticks = 1;
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	9f 8f       	std	Y+31, r25	; 0x1f
    1f56:	8e 8f       	std	Y+30, r24	; 0x1e
    1f58:	3f c0       	rjmp	.+126    	; 0x1fd8 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1f5a:	68 a1       	ldd	r22, Y+32	; 0x20
    1f5c:	79 a1       	ldd	r23, Y+33	; 0x21
    1f5e:	8a a1       	ldd	r24, Y+34	; 0x22
    1f60:	9b a1       	ldd	r25, Y+35	; 0x23
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	3f ef       	ldi	r19, 0xFF	; 255
    1f66:	4f e7       	ldi	r20, 0x7F	; 127
    1f68:	57 e4       	ldi	r21, 0x47	; 71
    1f6a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f6e:	18 16       	cp	r1, r24
    1f70:	4c f5       	brge	.+82     	; 0x1fc4 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f72:	6c a1       	ldd	r22, Y+36	; 0x24
    1f74:	7d a1       	ldd	r23, Y+37	; 0x25
    1f76:	8e a1       	ldd	r24, Y+38	; 0x26
    1f78:	9f a1       	ldd	r25, Y+39	; 0x27
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e2       	ldi	r20, 0x20	; 32
    1f80:	51 e4       	ldi	r21, 0x41	; 65
    1f82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	9f 8f       	std	Y+31, r25	; 0x1f
    1f98:	8e 8f       	std	Y+30, r24	; 0x1e
    1f9a:	0f c0       	rjmp	.+30     	; 0x1fba <LCD_voidSendChar+0x166>
    1f9c:	88 ec       	ldi	r24, 0xC8	; 200
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9d 8f       	std	Y+29, r25	; 0x1d
    1fa2:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fa4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1fa6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1fa8:	01 97       	sbiw	r24, 0x01	; 1
    1faa:	f1 f7       	brne	.-4      	; 0x1fa8 <LCD_voidSendChar+0x154>
    1fac:	9d 8f       	std	Y+29, r25	; 0x1d
    1fae:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	9f 8f       	std	Y+31, r25	; 0x1f
    1fb8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fbc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fbe:	00 97       	sbiw	r24, 0x00	; 0
    1fc0:	69 f7       	brne	.-38     	; 0x1f9c <LCD_voidSendChar+0x148>
    1fc2:	24 c0       	rjmp	.+72     	; 0x200c <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fc4:	68 a1       	ldd	r22, Y+32	; 0x20
    1fc6:	79 a1       	ldd	r23, Y+33	; 0x21
    1fc8:	8a a1       	ldd	r24, Y+34	; 0x22
    1fca:	9b a1       	ldd	r25, Y+35	; 0x23
    1fcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	9f 8f       	std	Y+31, r25	; 0x1f
    1fd6:	8e 8f       	std	Y+30, r24	; 0x1e
    1fd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fda:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fdc:	9b 8f       	std	Y+27, r25	; 0x1b
    1fde:	8a 8f       	std	Y+26, r24	; 0x1a
    1fe0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fe2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <LCD_voidSendChar+0x190>
    1fe8:	9b 8f       	std	Y+27, r25	; 0x1b
    1fea:	8a 8f       	std	Y+26, r24	; 0x1a
    1fec:	0f c0       	rjmp	.+30     	; 0x200c <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fee:	69 a5       	ldd	r22, Y+41	; 0x29
    1ff0:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ff2:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ff4:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ff6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	88 a7       	std	Y+40, r24	; 0x28
    2000:	88 a5       	ldd	r24, Y+40	; 0x28
    2002:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2004:	89 8d       	ldd	r24, Y+25	; 0x19
    2006:	8a 95       	dec	r24
    2008:	f1 f7       	brne	.-4      	; 0x2006 <LCD_voidSendChar+0x1b2>
    200a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	62 e0       	ldi	r22, 0x02	; 2
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	0e 94 93 07 	call	0xf26	; 0xf26 <DIO_u8SetPinValue>
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	a0 e8       	ldi	r26, 0x80	; 128
    201c:	bf e3       	ldi	r27, 0x3F	; 63
    201e:	8d 8b       	std	Y+21, r24	; 0x15
    2020:	9e 8b       	std	Y+22, r25	; 0x16
    2022:	af 8b       	std	Y+23, r26	; 0x17
    2024:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	2b ea       	ldi	r18, 0xAB	; 171
    2030:	3a ea       	ldi	r19, 0xAA	; 170
    2032:	4a e2       	ldi	r20, 0x2A	; 42
    2034:	50 e4       	ldi	r21, 0x40	; 64
    2036:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    203a:	dc 01       	movw	r26, r24
    203c:	cb 01       	movw	r24, r22
    203e:	89 8b       	std	Y+17, r24	; 0x11
    2040:	9a 8b       	std	Y+18, r25	; 0x12
    2042:	ab 8b       	std	Y+19, r26	; 0x13
    2044:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2046:	69 89       	ldd	r22, Y+17	; 0x11
    2048:	7a 89       	ldd	r23, Y+18	; 0x12
    204a:	8b 89       	ldd	r24, Y+19	; 0x13
    204c:	9c 89       	ldd	r25, Y+20	; 0x14
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e8       	ldi	r20, 0x80	; 128
    2054:	5f e3       	ldi	r21, 0x3F	; 63
    2056:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    205a:	88 23       	and	r24, r24
    205c:	1c f4       	brge	.+6      	; 0x2064 <LCD_voidSendChar+0x210>
		__ticks = 1;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	88 8b       	std	Y+16, r24	; 0x10
    2062:	91 c0       	rjmp	.+290    	; 0x2186 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    2064:	69 89       	ldd	r22, Y+17	; 0x11
    2066:	7a 89       	ldd	r23, Y+18	; 0x12
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	4f e7       	ldi	r20, 0x7F	; 127
    2072:	53 e4       	ldi	r21, 0x43	; 67
    2074:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2078:	18 16       	cp	r1, r24
    207a:	0c f0       	brlt	.+2      	; 0x207e <LCD_voidSendChar+0x22a>
    207c:	7b c0       	rjmp	.+246    	; 0x2174 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    207e:	6d 89       	ldd	r22, Y+21	; 0x15
    2080:	7e 89       	ldd	r23, Y+22	; 0x16
    2082:	8f 89       	ldd	r24, Y+23	; 0x17
    2084:	98 8d       	ldd	r25, Y+24	; 0x18
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a e7       	ldi	r20, 0x7A	; 122
    208c:	54 e4       	ldi	r21, 0x44	; 68
    208e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8c 87       	std	Y+12, r24	; 0x0c
    2098:	9d 87       	std	Y+13, r25	; 0x0d
    209a:	ae 87       	std	Y+14, r26	; 0x0e
    209c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    209e:	6c 85       	ldd	r22, Y+12	; 0x0c
    20a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    20a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    20a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    20a6:	20 e0       	ldi	r18, 0x00	; 0
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	4a ef       	ldi	r20, 0xFA	; 250
    20ac:	54 e4       	ldi	r21, 0x44	; 68
    20ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	88 87       	std	Y+8, r24	; 0x08
    20b8:	99 87       	std	Y+9, r25	; 0x09
    20ba:	aa 87       	std	Y+10, r26	; 0x0a
    20bc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    20be:	68 85       	ldd	r22, Y+8	; 0x08
    20c0:	79 85       	ldd	r23, Y+9	; 0x09
    20c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    20c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	40 e8       	ldi	r20, 0x80	; 128
    20cc:	5f e3       	ldi	r21, 0x3F	; 63
    20ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20d2:	88 23       	and	r24, r24
    20d4:	2c f4       	brge	.+10     	; 0x20e0 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	9f 83       	std	Y+7, r25	; 0x07
    20dc:	8e 83       	std	Y+6, r24	; 0x06
    20de:	3f c0       	rjmp	.+126    	; 0x215e <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    20e0:	68 85       	ldd	r22, Y+8	; 0x08
    20e2:	79 85       	ldd	r23, Y+9	; 0x09
    20e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    20e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	3f ef       	ldi	r19, 0xFF	; 255
    20ec:	4f e7       	ldi	r20, 0x7F	; 127
    20ee:	57 e4       	ldi	r21, 0x47	; 71
    20f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20f4:	18 16       	cp	r1, r24
    20f6:	4c f5       	brge	.+82     	; 0x214a <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    20fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    20fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    20fe:	9f 85       	ldd	r25, Y+15	; 0x0f
    2100:	20 e0       	ldi	r18, 0x00	; 0
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	40 e2       	ldi	r20, 0x20	; 32
    2106:	51 e4       	ldi	r21, 0x41	; 65
    2108:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    210c:	dc 01       	movw	r26, r24
    210e:	cb 01       	movw	r24, r22
    2110:	bc 01       	movw	r22, r24
    2112:	cd 01       	movw	r24, r26
    2114:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2118:	dc 01       	movw	r26, r24
    211a:	cb 01       	movw	r24, r22
    211c:	9f 83       	std	Y+7, r25	; 0x07
    211e:	8e 83       	std	Y+6, r24	; 0x06
    2120:	0f c0       	rjmp	.+30     	; 0x2140 <LCD_voidSendChar+0x2ec>
    2122:	88 ec       	ldi	r24, 0xC8	; 200
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9d 83       	std	Y+5, r25	; 0x05
    2128:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    212a:	8c 81       	ldd	r24, Y+4	; 0x04
    212c:	9d 81       	ldd	r25, Y+5	; 0x05
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_voidSendChar+0x2da>
    2132:	9d 83       	std	Y+5, r25	; 0x05
    2134:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	8e 81       	ldd	r24, Y+6	; 0x06
    2138:	9f 81       	ldd	r25, Y+7	; 0x07
    213a:	01 97       	sbiw	r24, 0x01	; 1
    213c:	9f 83       	std	Y+7, r25	; 0x07
    213e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2140:	8e 81       	ldd	r24, Y+6	; 0x06
    2142:	9f 81       	ldd	r25, Y+7	; 0x07
    2144:	00 97       	sbiw	r24, 0x00	; 0
    2146:	69 f7       	brne	.-38     	; 0x2122 <LCD_voidSendChar+0x2ce>
    2148:	24 c0       	rjmp	.+72     	; 0x2192 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    214a:	68 85       	ldd	r22, Y+8	; 0x08
    214c:	79 85       	ldd	r23, Y+9	; 0x09
    214e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2150:	9b 85       	ldd	r25, Y+11	; 0x0b
    2152:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	9f 83       	std	Y+7, r25	; 0x07
    215c:	8e 83       	std	Y+6, r24	; 0x06
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	9f 81       	ldd	r25, Y+7	; 0x07
    2162:	9b 83       	std	Y+3, r25	; 0x03
    2164:	8a 83       	std	Y+2, r24	; 0x02
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	9b 81       	ldd	r25, Y+3	; 0x03
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_voidSendChar+0x316>
    216e:	9b 83       	std	Y+3, r25	; 0x03
    2170:	8a 83       	std	Y+2, r24	; 0x02
    2172:	0f c0       	rjmp	.+30     	; 0x2192 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2174:	69 89       	ldd	r22, Y+17	; 0x11
    2176:	7a 89       	ldd	r23, Y+18	; 0x12
    2178:	8b 89       	ldd	r24, Y+19	; 0x13
    217a:	9c 89       	ldd	r25, Y+20	; 0x14
    217c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	88 8b       	std	Y+16, r24	; 0x10
    2186:	88 89       	ldd	r24, Y+16	; 0x10
    2188:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	8a 95       	dec	r24
    218e:	f1 f7       	brne	.-4      	; 0x218c <LCD_voidSendChar+0x338>
    2190:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
}
    2192:	e1 96       	adiw	r28, 0x31	; 49
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	f8 94       	cli
    2198:	de bf       	out	0x3e, r29	; 62
    219a:	0f be       	out	0x3f, r0	; 63
    219c:	cd bf       	out	0x3d, r28	; 61
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <LCD_voidWriteString+0x6>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01
    21b2:	0a c0       	rjmp	.+20     	; 0x21c8 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    21b4:	e9 81       	ldd	r30, Y+1	; 0x01
    21b6:	fa 81       	ldd	r31, Y+2	; 0x02
    21b8:	80 81       	ld	r24, Z
    21ba:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	9a 83       	std	Y+2, r25	; 0x02
    21c6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    21c8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ca:	fa 81       	ldd	r31, Y+2	; 0x02
    21cc:	80 81       	ld	r24, Z
    21ce:	88 23       	and	r24, r24
    21d0:	89 f7       	brne	.-30     	; 0x21b4 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    21dc:	0f 93       	push	r16
    21de:	1f 93       	push	r17
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	cd b7       	in	r28, 0x3d	; 61
    21e6:	de b7       	in	r29, 0x3e	; 62
    21e8:	65 97       	sbiw	r28, 0x15	; 21
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	de bf       	out	0x3e, r29	; 62
    21f0:	0f be       	out	0x3f, r0	; 63
    21f2:	cd bf       	out	0x3d, r28	; 61
    21f4:	6a 8b       	std	Y+18, r22	; 0x12
    21f6:	7b 8b       	std	Y+19, r23	; 0x13
    21f8:	8c 8b       	std	Y+20, r24	; 0x14
    21fa:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    21fc:	8f ef       	ldi	r24, 0xFF	; 255
    21fe:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    2200:	8a 89       	ldd	r24, Y+18	; 0x12
    2202:	9b 89       	ldd	r25, Y+19	; 0x13
    2204:	ac 89       	ldd	r26, Y+20	; 0x14
    2206:	bd 89       	ldd	r27, Y+21	; 0x15
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	a1 05       	cpc	r26, r1
    220c:	b1 05       	cpc	r27, r1
    220e:	99 f5       	brne	.+102    	; 0x2276 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    2210:	80 e3       	ldi	r24, 0x30	; 48
    2212:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
    2216:	4e c0       	rjmp	.+156    	; 0x22b4 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	8f 5f       	subi	r24, 0xFF	; 255
    221c:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	08 2f       	mov	r16, r24
    2222:	11 27       	eor	r17, r17
    2224:	07 fd       	sbrc	r16, 7
    2226:	10 95       	com	r17
    2228:	8a 89       	ldd	r24, Y+18	; 0x12
    222a:	9b 89       	ldd	r25, Y+19	; 0x13
    222c:	ac 89       	ldd	r26, Y+20	; 0x14
    222e:	bd 89       	ldd	r27, Y+21	; 0x15
    2230:	2a e0       	ldi	r18, 0x0A	; 10
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	40 e0       	ldi	r20, 0x00	; 0
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	bc 01       	movw	r22, r24
    223a:	cd 01       	movw	r24, r26
    223c:	0e 94 8a 14 	call	0x2914	; 0x2914 <__udivmodsi4>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	28 2f       	mov	r18, r24
    2246:	ce 01       	movw	r24, r28
    2248:	03 96       	adiw	r24, 0x03	; 3
    224a:	fc 01       	movw	r30, r24
    224c:	e0 0f       	add	r30, r16
    224e:	f1 1f       	adc	r31, r17
    2250:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    2252:	8a 89       	ldd	r24, Y+18	; 0x12
    2254:	9b 89       	ldd	r25, Y+19	; 0x13
    2256:	ac 89       	ldd	r26, Y+20	; 0x14
    2258:	bd 89       	ldd	r27, Y+21	; 0x15
    225a:	2a e0       	ldi	r18, 0x0A	; 10
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e0       	ldi	r20, 0x00	; 0
    2260:	50 e0       	ldi	r21, 0x00	; 0
    2262:	bc 01       	movw	r22, r24
    2264:	cd 01       	movw	r24, r26
    2266:	0e 94 8a 14 	call	0x2914	; 0x2914 <__udivmodsi4>
    226a:	da 01       	movw	r26, r20
    226c:	c9 01       	movw	r24, r18
    226e:	8a 8b       	std	Y+18, r24	; 0x12
    2270:	9b 8b       	std	Y+19, r25	; 0x13
    2272:	ac 8b       	std	Y+20, r26	; 0x14
    2274:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    2276:	8a 89       	ldd	r24, Y+18	; 0x12
    2278:	9b 89       	ldd	r25, Y+19	; 0x13
    227a:	ac 89       	ldd	r26, Y+20	; 0x14
    227c:	bd 89       	ldd	r27, Y+21	; 0x15
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	a1 05       	cpc	r26, r1
    2282:	b1 05       	cpc	r27, r1
    2284:	49 f6       	brne	.-110    	; 0x2218 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	11 c0       	rjmp	.+34     	; 0x22ae <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	28 2f       	mov	r18, r24
    2290:	33 27       	eor	r19, r19
    2292:	27 fd       	sbrc	r18, 7
    2294:	30 95       	com	r19
    2296:	ce 01       	movw	r24, r28
    2298:	03 96       	adiw	r24, 0x03	; 3
    229a:	fc 01       	movw	r30, r24
    229c:	e2 0f       	add	r30, r18
    229e:	f3 1f       	adc	r31, r19
    22a0:	80 81       	ld	r24, Z
    22a2:	80 5d       	subi	r24, 0xD0	; 208
    22a4:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	81 50       	subi	r24, 0x01	; 1
    22ac:	89 83       	std	Y+1, r24	; 0x01
    22ae:	89 81       	ldd	r24, Y+1	; 0x01
    22b0:	88 23       	and	r24, r24
    22b2:	64 f7       	brge	.-40     	; 0x228c <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    22b4:	65 96       	adiw	r28, 0x15	; 21
    22b6:	0f b6       	in	r0, 0x3f	; 63
    22b8:	f8 94       	cli
    22ba:	de bf       	out	0x3e, r29	; 62
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	cd bf       	out	0x3d, r28	; 61
    22c0:	cf 91       	pop	r28
    22c2:	df 91       	pop	r29
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	08 95       	ret

000022ca <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <LCD_u8GoToXY+0x6>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <LCD_u8GoToXY+0x8>
    22d2:	0f 92       	push	r0
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	8a 83       	std	Y+2, r24	; 0x02
    22da:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	88 32       	cpi	r24, 0x28	; 40
    22e4:	d8 f4       	brcc	.+54     	; 0x231c <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	28 2f       	mov	r18, r24
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	3d 83       	std	Y+5, r19	; 0x05
    22ee:	2c 83       	std	Y+4, r18	; 0x04
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	9d 81       	ldd	r25, Y+5	; 0x05
    22f4:	81 30       	cpi	r24, 0x01	; 1
    22f6:	91 05       	cpc	r25, r1
    22f8:	31 f0       	breq	.+12     	; 0x2306 <LCD_u8GoToXY+0x3c>
    22fa:	2c 81       	ldd	r18, Y+4	; 0x04
    22fc:	3d 81       	ldd	r19, Y+5	; 0x05
    22fe:	22 30       	cpi	r18, 0x02	; 2
    2300:	31 05       	cpc	r19, r1
    2302:	31 f0       	breq	.+12     	; 0x2310 <LCD_u8GoToXY+0x46>
    2304:	0a c0       	rjmp	.+20     	; 0x231a <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE + Copy_u8Location);break;
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	80 58       	subi	r24, 0x80	; 128
    230a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
    230e:	06 c0       	rjmp	.+12     	; 0x231c <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE + Copy_u8Location);break;
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	80 54       	subi	r24, 0x40	; 64
    2314:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
    2318:	01 c0       	rjmp	.+2      	; 0x231c <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    231a:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    231c:	89 81       	ldd	r24, Y+1	; 0x01
}
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	0f 90       	pop	r0
    2326:	0f 90       	pop	r0
    2328:	cf 91       	pop	r28
    232a:	df 91       	pop	r29
    232c:	08 95       	ret

0000232e <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	cd b7       	in	r28, 0x3d	; 61
    2334:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
}
    233c:	cf 91       	pop	r28
    233e:	df 91       	pop	r29
    2340:	08 95       	ret

00002342 <main>:
void SpecialChar3(void);
void FrameOne(void);
void FrameTwo(void);

int main(void)
{
    2342:	df 93       	push	r29
    2344:	cf 93       	push	r28
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	2e 97       	sbiw	r28, 0x0e	; 14
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	de bf       	out	0x3e, r29	; 62
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	cd bf       	out	0x3d, r28	; 61
	setup();
    2356:	0e 94 27 12 	call	0x244e	; 0x244e <setup>

	while(1)
	{
		FrameOne();
    235a:	0e 94 40 13 	call	0x2680	; 0x2680 <FrameOne>
		LCD_voidSendCmnd(LCD_u8_SHIFT_DISPLAY_RIGHT_CMND);
    235e:	8c e1       	ldi	r24, 0x1C	; 28
    2360:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	aa e7       	ldi	r26, 0x7A	; 122
    236a:	b4 e4       	ldi	r27, 0x44	; 68
    236c:	8b 87       	std	Y+11, r24	; 0x0b
    236e:	9c 87       	std	Y+12, r25	; 0x0c
    2370:	ad 87       	std	Y+13, r26	; 0x0d
    2372:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2374:	6b 85       	ldd	r22, Y+11	; 0x0b
    2376:	7c 85       	ldd	r23, Y+12	; 0x0c
    2378:	8d 85       	ldd	r24, Y+13	; 0x0d
    237a:	9e 85       	ldd	r25, Y+14	; 0x0e
    237c:	20 e0       	ldi	r18, 0x00	; 0
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	4a ef       	ldi	r20, 0xFA	; 250
    2382:	54 e4       	ldi	r21, 0x44	; 68
    2384:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	8f 83       	std	Y+7, r24	; 0x07
    238e:	98 87       	std	Y+8, r25	; 0x08
    2390:	a9 87       	std	Y+9, r26	; 0x09
    2392:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	20 e0       	ldi	r18, 0x00	; 0
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	40 e8       	ldi	r20, 0x80	; 128
    23a2:	5f e3       	ldi	r21, 0x3F	; 63
    23a4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23a8:	88 23       	and	r24, r24
    23aa:	2c f4       	brge	.+10     	; 0x23b6 <main+0x74>
		__ticks = 1;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9e 83       	std	Y+6, r25	; 0x06
    23b2:	8d 83       	std	Y+5, r24	; 0x05
    23b4:	3f c0       	rjmp	.+126    	; 0x2434 <main+0xf2>
	else if (__tmp > 65535)
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f ef       	ldi	r19, 0xFF	; 255
    23c2:	4f e7       	ldi	r20, 0x7F	; 127
    23c4:	57 e4       	ldi	r21, 0x47	; 71
    23c6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23ca:	18 16       	cp	r1, r24
    23cc:	4c f5       	brge	.+82     	; 0x2420 <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e2       	ldi	r20, 0x20	; 32
    23dc:	51 e4       	ldi	r21, 0x41	; 65
    23de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	9e 83       	std	Y+6, r25	; 0x06
    23f4:	8d 83       	std	Y+5, r24	; 0x05
    23f6:	0f c0       	rjmp	.+30     	; 0x2416 <main+0xd4>
    23f8:	88 ec       	ldi	r24, 0xC8	; 200
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	9c 83       	std	Y+4, r25	; 0x04
    23fe:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	01 97       	sbiw	r24, 0x01	; 1
    2406:	f1 f7       	brne	.-4      	; 0x2404 <main+0xc2>
    2408:	9c 83       	std	Y+4, r25	; 0x04
    240a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    240c:	8d 81       	ldd	r24, Y+5	; 0x05
    240e:	9e 81       	ldd	r25, Y+6	; 0x06
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	69 f7       	brne	.-38     	; 0x23f8 <main+0xb6>
    241e:	14 c0       	rjmp	.+40     	; 0x2448 <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2420:	6f 81       	ldd	r22, Y+7	; 0x07
    2422:	78 85       	ldd	r23, Y+8	; 0x08
    2424:	89 85       	ldd	r24, Y+9	; 0x09
    2426:	9a 85       	ldd	r25, Y+10	; 0x0a
    2428:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	8d 83       	std	Y+5, r24	; 0x05
    2434:	8d 81       	ldd	r24, Y+5	; 0x05
    2436:	9e 81       	ldd	r25, Y+6	; 0x06
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	9a 81       	ldd	r25, Y+2	; 0x02
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	f1 f7       	brne	.-4      	; 0x2440 <main+0xfe>
    2444:	9a 83       	std	Y+2, r25	; 0x02
    2446:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		FrameTwo();
    2448:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <FrameTwo>
    244c:	86 cf       	rjmp	.-244    	; 0x235a <main+0x18>

0000244e <setup>:
	}
	return 0;
}
void setup(void)
{
    244e:	df 93       	push	r29
    2450:	cf 93       	push	r28
    2452:	cd b7       	in	r28, 0x3d	; 61
    2454:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    2456:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_voidInit>
	LCD_voidInit();
    245a:	0e 94 bf 0a 	call	0x157e	; 0x157e <LCD_voidInit>
}
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <SpecialChar0>:
void SpecialChar0(void)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	2e 97       	sbiw	r28, 0x0e	; 14
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2478:	80 e4       	ldi	r24, 0x40	; 64
    247a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
			0b00000100,
			0b00000010,
			0b00011111,
			0b00000000,
			0b00000000
	};
    247e:	ce 01       	movw	r24, r28
    2480:	02 96       	adiw	r24, 0x02	; 2
    2482:	9b 87       	std	Y+11, r25	; 0x0b
    2484:	8a 87       	std	Y+10, r24	; 0x0a
    2486:	e0 e7       	ldi	r30, 0x70	; 112
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	fd 87       	std	Y+13, r31	; 0x0d
    248c:	ec 87       	std	Y+12, r30	; 0x0c
    248e:	f8 e0       	ldi	r31, 0x08	; 8
    2490:	fe 87       	std	Y+14, r31	; 0x0e
    2492:	ec 85       	ldd	r30, Y+12	; 0x0c
    2494:	fd 85       	ldd	r31, Y+13	; 0x0d
    2496:	00 80       	ld	r0, Z
    2498:	8c 85       	ldd	r24, Y+12	; 0x0c
    249a:	9d 85       	ldd	r25, Y+13	; 0x0d
    249c:	01 96       	adiw	r24, 0x01	; 1
    249e:	9d 87       	std	Y+13, r25	; 0x0d
    24a0:	8c 87       	std	Y+12, r24	; 0x0c
    24a2:	ea 85       	ldd	r30, Y+10	; 0x0a
    24a4:	fb 85       	ldd	r31, Y+11	; 0x0b
    24a6:	00 82       	st	Z, r0
    24a8:	8a 85       	ldd	r24, Y+10	; 0x0a
    24aa:	9b 85       	ldd	r25, Y+11	; 0x0b
    24ac:	01 96       	adiw	r24, 0x01	; 1
    24ae:	9b 87       	std	Y+11, r25	; 0x0b
    24b0:	8a 87       	std	Y+10, r24	; 0x0a
    24b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24b4:	91 50       	subi	r25, 0x01	; 1
    24b6:	9e 87       	std	Y+14, r25	; 0x0e
    24b8:	ee 85       	ldd	r30, Y+14	; 0x0e
    24ba:	ee 23       	and	r30, r30
    24bc:	51 f7       	brne	.-44     	; 0x2492 <SpecialChar0+0x2e>
	for(i = 0;i < sizeof(customChar);i++)
    24be:	19 82       	std	Y+1, r1	; 0x01
    24c0:	0e c0       	rjmp	.+28     	; 0x24de <SpecialChar0+0x7a>
	{
		LCD_voidSendChar(customChar[i]);
    24c2:	89 81       	ldd	r24, Y+1	; 0x01
    24c4:	28 2f       	mov	r18, r24
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	ce 01       	movw	r24, r28
    24ca:	02 96       	adiw	r24, 0x02	; 2
    24cc:	fc 01       	movw	r30, r24
    24ce:	e2 0f       	add	r30, r18
    24d0:	f3 1f       	adc	r31, r19
    24d2:	80 81       	ld	r24, Z
    24d4:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
			0b00000010,
			0b00011111,
			0b00000000,
			0b00000000
	};
	for(i = 0;i < sizeof(customChar);i++)
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	8f 5f       	subi	r24, 0xFF	; 255
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	88 30       	cpi	r24, 0x08	; 8
    24e2:	78 f3       	brcs	.-34     	; 0x24c2 <SpecialChar0+0x5e>
	{
		LCD_voidSendChar(customChar[i]);
	}
}
    24e4:	2e 96       	adiw	r28, 0x0e	; 14
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
    24f0:	cf 91       	pop	r28
    24f2:	df 91       	pop	r29
    24f4:	08 95       	ret

000024f6 <SpecialChar1>:
void SpecialChar1(void)
{
    24f6:	df 93       	push	r29
    24f8:	cf 93       	push	r28
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	2e 97       	sbiw	r28, 0x0e	; 14
    2500:	0f b6       	in	r0, 0x3f	; 63
    2502:	f8 94       	cli
    2504:	de bf       	out	0x3e, r29	; 62
    2506:	0f be       	out	0x3f, r0	; 63
    2508:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    250a:	88 e4       	ldi	r24, 0x48	; 72
    250c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
			0b00010101,
			0b00010101,
			0b00011111,
			0b00000000,
			0b00000000
	};
    2510:	ce 01       	movw	r24, r28
    2512:	02 96       	adiw	r24, 0x02	; 2
    2514:	9b 87       	std	Y+11, r25	; 0x0b
    2516:	8a 87       	std	Y+10, r24	; 0x0a
    2518:	e8 e7       	ldi	r30, 0x78	; 120
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	fd 87       	std	Y+13, r31	; 0x0d
    251e:	ec 87       	std	Y+12, r30	; 0x0c
    2520:	f8 e0       	ldi	r31, 0x08	; 8
    2522:	fe 87       	std	Y+14, r31	; 0x0e
    2524:	ec 85       	ldd	r30, Y+12	; 0x0c
    2526:	fd 85       	ldd	r31, Y+13	; 0x0d
    2528:	00 80       	ld	r0, Z
    252a:	8c 85       	ldd	r24, Y+12	; 0x0c
    252c:	9d 85       	ldd	r25, Y+13	; 0x0d
    252e:	01 96       	adiw	r24, 0x01	; 1
    2530:	9d 87       	std	Y+13, r25	; 0x0d
    2532:	8c 87       	std	Y+12, r24	; 0x0c
    2534:	ea 85       	ldd	r30, Y+10	; 0x0a
    2536:	fb 85       	ldd	r31, Y+11	; 0x0b
    2538:	00 82       	st	Z, r0
    253a:	8a 85       	ldd	r24, Y+10	; 0x0a
    253c:	9b 85       	ldd	r25, Y+11	; 0x0b
    253e:	01 96       	adiw	r24, 0x01	; 1
    2540:	9b 87       	std	Y+11, r25	; 0x0b
    2542:	8a 87       	std	Y+10, r24	; 0x0a
    2544:	9e 85       	ldd	r25, Y+14	; 0x0e
    2546:	91 50       	subi	r25, 0x01	; 1
    2548:	9e 87       	std	Y+14, r25	; 0x0e
    254a:	ee 85       	ldd	r30, Y+14	; 0x0e
    254c:	ee 23       	and	r30, r30
    254e:	51 f7       	brne	.-44     	; 0x2524 <SpecialChar1+0x2e>
	for(i = 0;i < sizeof(customChar);i++)
    2550:	19 82       	std	Y+1, r1	; 0x01
    2552:	0e c0       	rjmp	.+28     	; 0x2570 <SpecialChar1+0x7a>
	{
		LCD_voidSendChar(customChar[i]);
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	28 2f       	mov	r18, r24
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	ce 01       	movw	r24, r28
    255c:	02 96       	adiw	r24, 0x02	; 2
    255e:	fc 01       	movw	r30, r24
    2560:	e2 0f       	add	r30, r18
    2562:	f3 1f       	adc	r31, r19
    2564:	80 81       	ld	r24, Z
    2566:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
			0b00010101,
			0b00011111,
			0b00000000,
			0b00000000
	};
	for(i = 0;i < sizeof(customChar);i++)
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	8f 5f       	subi	r24, 0xFF	; 255
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	88 30       	cpi	r24, 0x08	; 8
    2574:	78 f3       	brcs	.-34     	; 0x2554 <SpecialChar1+0x5e>
	{
		LCD_voidSendChar(customChar[i]);
	}
}
    2576:	2e 96       	adiw	r28, 0x0e	; 14
    2578:	0f b6       	in	r0, 0x3f	; 63
    257a:	f8 94       	cli
    257c:	de bf       	out	0x3e, r29	; 62
    257e:	0f be       	out	0x3f, r0	; 63
    2580:	cd bf       	out	0x3d, r28	; 61
    2582:	cf 91       	pop	r28
    2584:	df 91       	pop	r29
    2586:	08 95       	ret

00002588 <SpecialChar2>:
void SpecialChar2(void)
{
    2588:	df 93       	push	r29
    258a:	cf 93       	push	r28
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	29 97       	sbiw	r28, 0x09	; 9
    2592:	0f b6       	in	r0, 0x3f	; 63
    2594:	f8 94       	cli
    2596:	de bf       	out	0x3e, r29	; 62
    2598:	0f be       	out	0x3f, r0	; 63
    259a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    259c:	80 e5       	ldi	r24, 0x50	; 80
    259e:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
			0b00000000,
			0b00000000,
			0b00011111,
			0b00000000,
			0b00000000
	};
    25a2:	88 e0       	ldi	r24, 0x08	; 8
    25a4:	fe 01       	movw	r30, r28
    25a6:	32 96       	adiw	r30, 0x02	; 2
    25a8:	df 01       	movw	r26, r30
    25aa:	98 2f       	mov	r25, r24
    25ac:	1d 92       	st	X+, r1
    25ae:	9a 95       	dec	r25
    25b0:	e9 f7       	brne	.-6      	; 0x25ac <SpecialChar2+0x24>
    25b2:	8f e1       	ldi	r24, 0x1F	; 31
    25b4:	8f 83       	std	Y+7, r24	; 0x07
	for(i = 0;i < sizeof(customChar);i++)
    25b6:	19 82       	std	Y+1, r1	; 0x01
    25b8:	0e c0       	rjmp	.+28     	; 0x25d6 <SpecialChar2+0x4e>
	{
		LCD_voidSendChar(customChar[i]);
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	28 2f       	mov	r18, r24
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	ce 01       	movw	r24, r28
    25c2:	02 96       	adiw	r24, 0x02	; 2
    25c4:	fc 01       	movw	r30, r24
    25c6:	e2 0f       	add	r30, r18
    25c8:	f3 1f       	adc	r31, r19
    25ca:	80 81       	ld	r24, Z
    25cc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
			0b00000000,
			0b00011111,
			0b00000000,
			0b00000000
	};
	for(i = 0;i < sizeof(customChar);i++)
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	8f 5f       	subi	r24, 0xFF	; 255
    25d4:	89 83       	std	Y+1, r24	; 0x01
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	88 30       	cpi	r24, 0x08	; 8
    25da:	78 f3       	brcs	.-34     	; 0x25ba <SpecialChar2+0x32>
	{
		LCD_voidSendChar(customChar[i]);
	}
}
    25dc:	29 96       	adiw	r28, 0x09	; 9
    25de:	0f b6       	in	r0, 0x3f	; 63
    25e0:	f8 94       	cli
    25e2:	de bf       	out	0x3e, r29	; 62
    25e4:	0f be       	out	0x3f, r0	; 63
    25e6:	cd bf       	out	0x3d, r28	; 61
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <SpecialChar3>:
void SpecialChar3(void)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	2e 97       	sbiw	r28, 0x0e	; 14
    25f8:	0f b6       	in	r0, 0x3f	; 63
    25fa:	f8 94       	cli
    25fc:	de bf       	out	0x3e, r29	; 62
    25fe:	0f be       	out	0x3f, r0	; 63
    2600:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    2602:	88 e5       	ldi	r24, 0x58	; 88
    2604:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_voidSendCmnd>
			0b00000100,
			0b00010001,
			0b00010001,
			0b00001010,
			0b00000100
	};
    2608:	ce 01       	movw	r24, r28
    260a:	02 96       	adiw	r24, 0x02	; 2
    260c:	9b 87       	std	Y+11, r25	; 0x0b
    260e:	8a 87       	std	Y+10, r24	; 0x0a
    2610:	e0 e8       	ldi	r30, 0x80	; 128
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	fd 87       	std	Y+13, r31	; 0x0d
    2616:	ec 87       	std	Y+12, r30	; 0x0c
    2618:	f8 e0       	ldi	r31, 0x08	; 8
    261a:	fe 87       	std	Y+14, r31	; 0x0e
    261c:	ec 85       	ldd	r30, Y+12	; 0x0c
    261e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2620:	00 80       	ld	r0, Z
    2622:	8c 85       	ldd	r24, Y+12	; 0x0c
    2624:	9d 85       	ldd	r25, Y+13	; 0x0d
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	9d 87       	std	Y+13, r25	; 0x0d
    262a:	8c 87       	std	Y+12, r24	; 0x0c
    262c:	ea 85       	ldd	r30, Y+10	; 0x0a
    262e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2630:	00 82       	st	Z, r0
    2632:	8a 85       	ldd	r24, Y+10	; 0x0a
    2634:	9b 85       	ldd	r25, Y+11	; 0x0b
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	9b 87       	std	Y+11, r25	; 0x0b
    263a:	8a 87       	std	Y+10, r24	; 0x0a
    263c:	9e 85       	ldd	r25, Y+14	; 0x0e
    263e:	91 50       	subi	r25, 0x01	; 1
    2640:	9e 87       	std	Y+14, r25	; 0x0e
    2642:	ee 85       	ldd	r30, Y+14	; 0x0e
    2644:	ee 23       	and	r30, r30
    2646:	51 f7       	brne	.-44     	; 0x261c <SpecialChar3+0x2e>
	for(i = 0;i < sizeof(customChar);i++)
    2648:	19 82       	std	Y+1, r1	; 0x01
    264a:	0e c0       	rjmp	.+28     	; 0x2668 <SpecialChar3+0x7a>
	{
		LCD_voidSendChar(customChar[i]);
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	ce 01       	movw	r24, r28
    2654:	02 96       	adiw	r24, 0x02	; 2
    2656:	fc 01       	movw	r30, r24
    2658:	e2 0f       	add	r30, r18
    265a:	f3 1f       	adc	r31, r19
    265c:	80 81       	ld	r24, Z
    265e:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
			0b00010001,
			0b00010001,
			0b00001010,
			0b00000100
	};
	for(i = 0;i < sizeof(customChar);i++)
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	88 30       	cpi	r24, 0x08	; 8
    266c:	78 f3       	brcs	.-34     	; 0x264c <SpecialChar3+0x5e>
	{
		LCD_voidSendChar(customChar[i]);
	}
}
    266e:	2e 96       	adiw	r28, 0x0e	; 14
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	f8 94       	cli
    2674:	de bf       	out	0x3e, r29	; 62
    2676:	0f be       	out	0x3f, r0	; 63
    2678:	cd bf       	out	0x3d, r28	; 61
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <FrameOne>:
void FrameOne(void)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	2e 97       	sbiw	r28, 0x0e	; 14
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
	LCD_voidWriteString(" Hassan");
    2694:	80 e6       	ldi	r24, 0x60	; 96
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_voidWriteString>
	SpecialChar0();
    269c:	0e 94 32 12 	call	0x2464	; 0x2464 <SpecialChar0>
	SpecialChar1();
    26a0:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <SpecialChar1>
	SpecialChar2();
    26a4:	0e 94 c4 12 	call	0x2588	; 0x2588 <SpecialChar2>
	SpecialChar3();
    26a8:	0e 94 f7 12 	call	0x25ee	; 0x25ee <SpecialChar3>
	LCD_u8GoToXY(LCD_u8_LINE2,1);
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	61 e0       	ldi	r22, 0x01	; 1
    26b0:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_u8GoToXY>
	LCD_voidSendChar(3);
    26b4:	83 e0       	ldi	r24, 0x03	; 3
    26b6:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
	LCD_voidSendChar(2);
    26ba:	82 e0       	ldi	r24, 0x02	; 2
    26bc:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
	LCD_voidSendChar(1);
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
	LCD_voidSendChar(0);
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	aa e7       	ldi	r26, 0x7A	; 122
    26d2:	b4 e4       	ldi	r27, 0x44	; 68
    26d4:	8b 87       	std	Y+11, r24	; 0x0b
    26d6:	9c 87       	std	Y+12, r25	; 0x0c
    26d8:	ad 87       	std	Y+13, r26	; 0x0d
    26da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    26de:	7c 85       	ldd	r23, Y+12	; 0x0c
    26e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	4a ef       	ldi	r20, 0xFA	; 250
    26ea:	54 e4       	ldi	r21, 0x44	; 68
    26ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	8f 83       	std	Y+7, r24	; 0x07
    26f6:	98 87       	std	Y+8, r25	; 0x08
    26f8:	a9 87       	std	Y+9, r26	; 0x09
    26fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26fc:	6f 81       	ldd	r22, Y+7	; 0x07
    26fe:	78 85       	ldd	r23, Y+8	; 0x08
    2700:	89 85       	ldd	r24, Y+9	; 0x09
    2702:	9a 85       	ldd	r25, Y+10	; 0x0a
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	40 e8       	ldi	r20, 0x80	; 128
    270a:	5f e3       	ldi	r21, 0x3F	; 63
    270c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2710:	88 23       	and	r24, r24
    2712:	2c f4       	brge	.+10     	; 0x271e <FrameOne+0x9e>
		__ticks = 1;
    2714:	81 e0       	ldi	r24, 0x01	; 1
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	9e 83       	std	Y+6, r25	; 0x06
    271a:	8d 83       	std	Y+5, r24	; 0x05
    271c:	3f c0       	rjmp	.+126    	; 0x279c <FrameOne+0x11c>
	else if (__tmp > 65535)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	3f ef       	ldi	r19, 0xFF	; 255
    272a:	4f e7       	ldi	r20, 0x7F	; 127
    272c:	57 e4       	ldi	r21, 0x47	; 71
    272e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2732:	18 16       	cp	r1, r24
    2734:	4c f5       	brge	.+82     	; 0x2788 <FrameOne+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2736:	6b 85       	ldd	r22, Y+11	; 0x0b
    2738:	7c 85       	ldd	r23, Y+12	; 0x0c
    273a:	8d 85       	ldd	r24, Y+13	; 0x0d
    273c:	9e 85       	ldd	r25, Y+14	; 0x0e
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e2       	ldi	r20, 0x20	; 32
    2744:	51 e4       	ldi	r21, 0x41	; 65
    2746:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	bc 01       	movw	r22, r24
    2750:	cd 01       	movw	r24, r26
    2752:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	9e 83       	std	Y+6, r25	; 0x06
    275c:	8d 83       	std	Y+5, r24	; 0x05
    275e:	0f c0       	rjmp	.+30     	; 0x277e <FrameOne+0xfe>
    2760:	88 ec       	ldi	r24, 0xC8	; 200
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	9c 83       	std	Y+4, r25	; 0x04
    2766:	8b 83       	std	Y+3, r24	; 0x03
    2768:	8b 81       	ldd	r24, Y+3	; 0x03
    276a:	9c 81       	ldd	r25, Y+4	; 0x04
    276c:	01 97       	sbiw	r24, 0x01	; 1
    276e:	f1 f7       	brne	.-4      	; 0x276c <FrameOne+0xec>
    2770:	9c 83       	std	Y+4, r25	; 0x04
    2772:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2774:	8d 81       	ldd	r24, Y+5	; 0x05
    2776:	9e 81       	ldd	r25, Y+6	; 0x06
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	9e 83       	std	Y+6, r25	; 0x06
    277c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    277e:	8d 81       	ldd	r24, Y+5	; 0x05
    2780:	9e 81       	ldd	r25, Y+6	; 0x06
    2782:	00 97       	sbiw	r24, 0x00	; 0
    2784:	69 f7       	brne	.-38     	; 0x2760 <FrameOne+0xe0>
    2786:	14 c0       	rjmp	.+40     	; 0x27b0 <FrameOne+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2788:	6f 81       	ldd	r22, Y+7	; 0x07
    278a:	78 85       	ldd	r23, Y+8	; 0x08
    278c:	89 85       	ldd	r24, Y+9	; 0x09
    278e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2790:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2794:	dc 01       	movw	r26, r24
    2796:	cb 01       	movw	r24, r22
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
    27a4:	89 81       	ldd	r24, Y+1	; 0x01
    27a6:	9a 81       	ldd	r25, Y+2	; 0x02
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <FrameOne+0x128>
    27ac:	9a 83       	std	Y+2, r25	; 0x02
    27ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_voidClearScreen();
    27b0:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_voidClearScreen>
}
    27b4:	2e 96       	adiw	r28, 0x0e	; 14
    27b6:	0f b6       	in	r0, 0x3f	; 63
    27b8:	f8 94       	cli
    27ba:	de bf       	out	0x3e, r29	; 62
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	cd bf       	out	0x3d, r28	; 61
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <FrameTwo>:

void FrameTwo(void)
{
    27c6:	df 93       	push	r29
    27c8:	cf 93       	push	r28
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
    27ce:	2e 97       	sbiw	r28, 0x0e	; 14
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
	SpecialChar0();
    27da:	0e 94 32 12 	call	0x2464	; 0x2464 <SpecialChar0>
	SpecialChar1();
    27de:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <SpecialChar1>
	SpecialChar2();
    27e2:	0e 94 c4 12 	call	0x2588	; 0x2588 <SpecialChar2>
	SpecialChar3();
    27e6:	0e 94 f7 12 	call	0x25ee	; 0x25ee <SpecialChar3>
	LCD_u8GoToXY(LCD_u8_LINE1,7);
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	67 e0       	ldi	r22, 0x07	; 7
    27ee:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_u8GoToXY>
	LCD_voidSendChar(3);
    27f2:	83 e0       	ldi	r24, 0x03	; 3
    27f4:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
	LCD_voidSendChar(2);
    27f8:	82 e0       	ldi	r24, 0x02	; 2
    27fa:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
	LCD_voidSendChar(1);
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
	LCD_voidSendChar(0);
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <LCD_voidSendChar>
	LCD_u8GoToXY(LCD_u8_LINE2,6);
    280a:	82 e0       	ldi	r24, 0x02	; 2
    280c:	66 e0       	ldi	r22, 0x06	; 6
    280e:	0e 94 65 11 	call	0x22ca	; 0x22ca <LCD_u8GoToXY>
	LCD_voidWriteString(" Hassan");
    2812:	80 e6       	ldi	r24, 0x60	; 96
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <LCD_voidWriteString>
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	aa e7       	ldi	r26, 0x7A	; 122
    2820:	b4 e4       	ldi	r27, 0x44	; 68
    2822:	8b 87       	std	Y+11, r24	; 0x0b
    2824:	9c 87       	std	Y+12, r25	; 0x0c
    2826:	ad 87       	std	Y+13, r26	; 0x0d
    2828:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282a:	6b 85       	ldd	r22, Y+11	; 0x0b
    282c:	7c 85       	ldd	r23, Y+12	; 0x0c
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4a ef       	ldi	r20, 0xFA	; 250
    2838:	54 e4       	ldi	r21, 0x44	; 68
    283a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	8f 83       	std	Y+7, r24	; 0x07
    2844:	98 87       	std	Y+8, r25	; 0x08
    2846:	a9 87       	std	Y+9, r26	; 0x09
    2848:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e8       	ldi	r20, 0x80	; 128
    2858:	5f e3       	ldi	r21, 0x3F	; 63
    285a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    285e:	88 23       	and	r24, r24
    2860:	2c f4       	brge	.+10     	; 0x286c <FrameTwo+0xa6>
		__ticks = 1;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	3f c0       	rjmp	.+126    	; 0x28ea <FrameTwo+0x124>
	else if (__tmp > 65535)
    286c:	6f 81       	ldd	r22, Y+7	; 0x07
    286e:	78 85       	ldd	r23, Y+8	; 0x08
    2870:	89 85       	ldd	r24, Y+9	; 0x09
    2872:	9a 85       	ldd	r25, Y+10	; 0x0a
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	3f ef       	ldi	r19, 0xFF	; 255
    2878:	4f e7       	ldi	r20, 0x7F	; 127
    287a:	57 e4       	ldi	r21, 0x47	; 71
    287c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2880:	18 16       	cp	r1, r24
    2882:	4c f5       	brge	.+82     	; 0x28d6 <FrameTwo+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2884:	6b 85       	ldd	r22, Y+11	; 0x0b
    2886:	7c 85       	ldd	r23, Y+12	; 0x0c
    2888:	8d 85       	ldd	r24, Y+13	; 0x0d
    288a:	9e 85       	ldd	r25, Y+14	; 0x0e
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e2       	ldi	r20, 0x20	; 32
    2892:	51 e4       	ldi	r21, 0x41	; 65
    2894:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	8d 83       	std	Y+5, r24	; 0x05
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <FrameTwo+0x106>
    28ae:	88 ec       	ldi	r24, 0xC8	; 200
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9c 83       	std	Y+4, r25	; 0x04
    28b4:	8b 83       	std	Y+3, r24	; 0x03
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <FrameTwo+0xf4>
    28be:	9c 83       	std	Y+4, r25	; 0x04
    28c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	69 f7       	brne	.-38     	; 0x28ae <FrameTwo+0xe8>
    28d4:	14 c0       	rjmp	.+40     	; 0x28fe <FrameTwo+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d6:	6f 81       	ldd	r22, Y+7	; 0x07
    28d8:	78 85       	ldd	r23, Y+8	; 0x08
    28da:	89 85       	ldd	r24, Y+9	; 0x09
    28dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	9e 81       	ldd	r25, Y+6	; 0x06
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	9a 81       	ldd	r25, Y+2	; 0x02
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <FrameTwo+0x130>
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_voidClearScreen();
    28fe:	0e 94 97 11 	call	0x232e	; 0x232e <LCD_voidClearScreen>
}
    2902:	2e 96       	adiw	r28, 0x0e	; 14
    2904:	0f b6       	in	r0, 0x3f	; 63
    2906:	f8 94       	cli
    2908:	de bf       	out	0x3e, r29	; 62
    290a:	0f be       	out	0x3f, r0	; 63
    290c:	cd bf       	out	0x3d, r28	; 61
    290e:	cf 91       	pop	r28
    2910:	df 91       	pop	r29
    2912:	08 95       	ret

00002914 <__udivmodsi4>:
    2914:	a1 e2       	ldi	r26, 0x21	; 33
    2916:	1a 2e       	mov	r1, r26
    2918:	aa 1b       	sub	r26, r26
    291a:	bb 1b       	sub	r27, r27
    291c:	fd 01       	movw	r30, r26
    291e:	0d c0       	rjmp	.+26     	; 0x293a <__udivmodsi4_ep>

00002920 <__udivmodsi4_loop>:
    2920:	aa 1f       	adc	r26, r26
    2922:	bb 1f       	adc	r27, r27
    2924:	ee 1f       	adc	r30, r30
    2926:	ff 1f       	adc	r31, r31
    2928:	a2 17       	cp	r26, r18
    292a:	b3 07       	cpc	r27, r19
    292c:	e4 07       	cpc	r30, r20
    292e:	f5 07       	cpc	r31, r21
    2930:	20 f0       	brcs	.+8      	; 0x293a <__udivmodsi4_ep>
    2932:	a2 1b       	sub	r26, r18
    2934:	b3 0b       	sbc	r27, r19
    2936:	e4 0b       	sbc	r30, r20
    2938:	f5 0b       	sbc	r31, r21

0000293a <__udivmodsi4_ep>:
    293a:	66 1f       	adc	r22, r22
    293c:	77 1f       	adc	r23, r23
    293e:	88 1f       	adc	r24, r24
    2940:	99 1f       	adc	r25, r25
    2942:	1a 94       	dec	r1
    2944:	69 f7       	brne	.-38     	; 0x2920 <__udivmodsi4_loop>
    2946:	60 95       	com	r22
    2948:	70 95       	com	r23
    294a:	80 95       	com	r24
    294c:	90 95       	com	r25
    294e:	9b 01       	movw	r18, r22
    2950:	ac 01       	movw	r20, r24
    2952:	bd 01       	movw	r22, r26
    2954:	cf 01       	movw	r24, r30
    2956:	08 95       	ret

00002958 <__prologue_saves__>:
    2958:	2f 92       	push	r2
    295a:	3f 92       	push	r3
    295c:	4f 92       	push	r4
    295e:	5f 92       	push	r5
    2960:	6f 92       	push	r6
    2962:	7f 92       	push	r7
    2964:	8f 92       	push	r8
    2966:	9f 92       	push	r9
    2968:	af 92       	push	r10
    296a:	bf 92       	push	r11
    296c:	cf 92       	push	r12
    296e:	df 92       	push	r13
    2970:	ef 92       	push	r14
    2972:	ff 92       	push	r15
    2974:	0f 93       	push	r16
    2976:	1f 93       	push	r17
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	ca 1b       	sub	r28, r26
    2982:	db 0b       	sbc	r29, r27
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	09 94       	ijmp

00002990 <__epilogue_restores__>:
    2990:	2a 88       	ldd	r2, Y+18	; 0x12
    2992:	39 88       	ldd	r3, Y+17	; 0x11
    2994:	48 88       	ldd	r4, Y+16	; 0x10
    2996:	5f 84       	ldd	r5, Y+15	; 0x0f
    2998:	6e 84       	ldd	r6, Y+14	; 0x0e
    299a:	7d 84       	ldd	r7, Y+13	; 0x0d
    299c:	8c 84       	ldd	r8, Y+12	; 0x0c
    299e:	9b 84       	ldd	r9, Y+11	; 0x0b
    29a0:	aa 84       	ldd	r10, Y+10	; 0x0a
    29a2:	b9 84       	ldd	r11, Y+9	; 0x09
    29a4:	c8 84       	ldd	r12, Y+8	; 0x08
    29a6:	df 80       	ldd	r13, Y+7	; 0x07
    29a8:	ee 80       	ldd	r14, Y+6	; 0x06
    29aa:	fd 80       	ldd	r15, Y+5	; 0x05
    29ac:	0c 81       	ldd	r16, Y+4	; 0x04
    29ae:	1b 81       	ldd	r17, Y+3	; 0x03
    29b0:	aa 81       	ldd	r26, Y+2	; 0x02
    29b2:	b9 81       	ldd	r27, Y+1	; 0x01
    29b4:	ce 0f       	add	r28, r30
    29b6:	d1 1d       	adc	r29, r1
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	ed 01       	movw	r28, r26
    29c4:	08 95       	ret

000029c6 <_exit>:
    29c6:	f8 94       	cli

000029c8 <__stop_program>:
    29c8:	ff cf       	rjmp	.-2      	; 0x29c8 <__stop_program>
