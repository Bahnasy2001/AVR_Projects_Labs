
Piano_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00001e7c  00001f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800090  00800090  00001f40  2**0
                  ALLOC
  3 .stab         00001ac4  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000fab  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000049af  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00004aef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000068a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007793  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008540  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000086a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000892d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000090fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 bf 0d 	jmp	0x1b7e	; 0x1b7e <__vector_6>
      1c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_7>
      20:	0c 94 2f 0d 	jmp	0x1a5e	; 0x1a5e <__vector_8>
      24:	0c 94 e1 0c 	jmp	0x19c2	; 0x19c2 <__vector_9>
      28:	0c 94 53 0e 	jmp	0x1ca6	; 0x1ca6 <__vector_10>
      2c:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e9       	ldi	r26, 0x90	; 144
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3a       	cpi	r26, 0xA8	; 168
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <main>
      8a:	0c 94 3c 0f 	jmp	0x1e78	; 0x1e78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 05 0f 	jmp	0x1e0a	; 0x1e0a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 21 0f 	jmp	0x1e42	; 0x1e42 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 11 0f 	jmp	0x1e22	; 0x1e22 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     b54:	e7 e3       	ldi	r30, 0x37	; 55
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	10 82       	st	Z, r1

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     b5a:	e4 e3       	ldi	r30, 0x34	; 52
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	8f e0       	ldi	r24, 0x0F	; 15
     b60:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     b62:	e1 e3       	ldi	r30, 0x31	; 49
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 e2       	ldi	r24, 0x20	; 32
     b68:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     b6a:	eb e3       	ldi	r30, 0x3B	; 59
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     b70:	e8 e3       	ldi	r30, 0x38	; 56
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     b76:	e5 e3       	ldi	r30, 0x35	; 53
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	8f ef       	ldi	r24, 0xFF	; 255
     b7c:	80 83       	st	Z, r24

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     b7e:	e2 e3       	ldi	r30, 0x32	; 50
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	10 82       	st	Z, r1

}
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     b8a:	df 93       	push	r29
     b8c:	cf 93       	push	r28
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	2e 97       	sbiw	r28, 0x0e	; 14
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	de bf       	out	0x3e, r29	; 62
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	cd bf       	out	0x3d, r28	; 61
     b9e:	8a 83       	std	Y+2, r24	; 0x02
     ba0:	6b 83       	std	Y+3, r22	; 0x03
     ba2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     ba8:	8a 81       	ldd	r24, Y+2	; 0x02
     baa:	84 30       	cpi	r24, 0x04	; 4
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <DIO_u8SetPinDirection+0x26>
     bae:	0d c1       	rjmp	.+538    	; 0xdca <DIO_u8SetPinDirection+0x240>
     bb0:	8b 81       	ldd	r24, Y+3	; 0x03
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <DIO_u8SetPinDirection+0x2e>
     bb6:	09 c1       	rjmp	.+530    	; 0xdca <DIO_u8SetPinDirection+0x240>
     bb8:	8c 81       	ldd	r24, Y+4	; 0x04
     bba:	88 23       	and	r24, r24
     bbc:	21 f0       	breq	.+8      	; 0xbc6 <DIO_u8SetPinDirection+0x3c>
     bbe:	8c 81       	ldd	r24, Y+4	; 0x04
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <DIO_u8SetPinDirection+0x3c>
     bc4:	02 c1       	rjmp	.+516    	; 0xdca <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     bc6:	8a 81       	ldd	r24, Y+2	; 0x02
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	3e 87       	std	Y+14, r19	; 0x0e
     bce:	2d 87       	std	Y+13, r18	; 0x0d
     bd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	91 05       	cpc	r25, r1
     bd8:	09 f4       	brne	.+2      	; 0xbdc <DIO_u8SetPinDirection+0x52>
     bda:	4f c0       	rjmp	.+158    	; 0xc7a <DIO_u8SetPinDirection+0xf0>
     bdc:	2d 85       	ldd	r18, Y+13	; 0x0d
     bde:	3e 85       	ldd	r19, Y+14	; 0x0e
     be0:	22 30       	cpi	r18, 0x02	; 2
     be2:	31 05       	cpc	r19, r1
     be4:	2c f4       	brge	.+10     	; 0xbf0 <DIO_u8SetPinDirection+0x66>
     be6:	8d 85       	ldd	r24, Y+13	; 0x0d
     be8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bea:	00 97       	sbiw	r24, 0x00	; 0
     bec:	71 f0       	breq	.+28     	; 0xc0a <DIO_u8SetPinDirection+0x80>
     bee:	ee c0       	rjmp	.+476    	; 0xdcc <DIO_u8SetPinDirection+0x242>
     bf0:	2d 85       	ldd	r18, Y+13	; 0x0d
     bf2:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf4:	22 30       	cpi	r18, 0x02	; 2
     bf6:	31 05       	cpc	r19, r1
     bf8:	09 f4       	brne	.+2      	; 0xbfc <DIO_u8SetPinDirection+0x72>
     bfa:	77 c0       	rjmp	.+238    	; 0xcea <DIO_u8SetPinDirection+0x160>
     bfc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfe:	9e 85       	ldd	r25, Y+14	; 0x0e
     c00:	83 30       	cpi	r24, 0x03	; 3
     c02:	91 05       	cpc	r25, r1
     c04:	09 f4       	brne	.+2      	; 0xc08 <DIO_u8SetPinDirection+0x7e>
     c06:	a9 c0       	rjmp	.+338    	; 0xd5a <DIO_u8SetPinDirection+0x1d0>
     c08:	e1 c0       	rjmp	.+450    	; 0xdcc <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     c0a:	8b 81       	ldd	r24, Y+3	; 0x03
     c0c:	28 2f       	mov	r18, r24
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	3c 87       	std	Y+12, r19	; 0x0c
     c12:	2b 87       	std	Y+11, r18	; 0x0b
     c14:	8b 85       	ldd	r24, Y+11	; 0x0b
     c16:	9c 85       	ldd	r25, Y+12	; 0x0c
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	31 f0       	breq	.+12     	; 0xc28 <DIO_u8SetPinDirection+0x9e>
     c1c:	2b 85       	ldd	r18, Y+11	; 0x0b
     c1e:	3c 85       	ldd	r19, Y+12	; 0x0c
     c20:	21 30       	cpi	r18, 0x01	; 1
     c22:	31 05       	cpc	r19, r1
     c24:	b1 f0       	breq	.+44     	; 0xc52 <DIO_u8SetPinDirection+0xc8>
     c26:	d2 c0       	rjmp	.+420    	; 0xdcc <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     c28:	aa e3       	ldi	r26, 0x3A	; 58
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea e3       	ldi	r30, 0x3A	; 58
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	02 2e       	mov	r0, r18
     c40:	02 c0       	rjmp	.+4      	; 0xc46 <DIO_u8SetPinDirection+0xbc>
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	0a 94       	dec	r0
     c48:	e2 f7       	brpl	.-8      	; 0xc42 <DIO_u8SetPinDirection+0xb8>
     c4a:	80 95       	com	r24
     c4c:	84 23       	and	r24, r20
     c4e:	8c 93       	st	X, r24
     c50:	bd c0       	rjmp	.+378    	; 0xdcc <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     c52:	aa e3       	ldi	r26, 0x3A	; 58
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e3       	ldi	r30, 0x3A	; 58
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	48 2f       	mov	r20, r24
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 2e       	mov	r0, r18
     c6a:	02 c0       	rjmp	.+4      	; 0xc70 <DIO_u8SetPinDirection+0xe6>
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	0a 94       	dec	r0
     c72:	e2 f7       	brpl	.-8      	; 0xc6c <DIO_u8SetPinDirection+0xe2>
     c74:	84 2b       	or	r24, r20
     c76:	8c 93       	st	X, r24
     c78:	a9 c0       	rjmp	.+338    	; 0xdcc <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     c7a:	8b 81       	ldd	r24, Y+3	; 0x03
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	3a 87       	std	Y+10, r19	; 0x0a
     c82:	29 87       	std	Y+9, r18	; 0x09
     c84:	89 85       	ldd	r24, Y+9	; 0x09
     c86:	9a 85       	ldd	r25, Y+10	; 0x0a
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	31 f0       	breq	.+12     	; 0xc98 <DIO_u8SetPinDirection+0x10e>
     c8c:	29 85       	ldd	r18, Y+9	; 0x09
     c8e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c90:	21 30       	cpi	r18, 0x01	; 1
     c92:	31 05       	cpc	r19, r1
     c94:	b1 f0       	breq	.+44     	; 0xcc2 <DIO_u8SetPinDirection+0x138>
     c96:	9a c0       	rjmp	.+308    	; 0xdcc <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     c98:	a7 e3       	ldi	r26, 0x37	; 55
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e7 e3       	ldi	r30, 0x37	; 55
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	48 2f       	mov	r20, r24
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	28 2f       	mov	r18, r24
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	02 2e       	mov	r0, r18
     cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <DIO_u8SetPinDirection+0x12c>
     cb2:	88 0f       	add	r24, r24
     cb4:	99 1f       	adc	r25, r25
     cb6:	0a 94       	dec	r0
     cb8:	e2 f7       	brpl	.-8      	; 0xcb2 <DIO_u8SetPinDirection+0x128>
     cba:	80 95       	com	r24
     cbc:	84 23       	and	r24, r20
     cbe:	8c 93       	st	X, r24
     cc0:	85 c0       	rjmp	.+266    	; 0xdcc <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     cc2:	a7 e3       	ldi	r26, 0x37	; 55
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e3       	ldi	r30, 0x37	; 55
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	48 2f       	mov	r20, r24
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	02 2e       	mov	r0, r18
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <DIO_u8SetPinDirection+0x156>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <DIO_u8SetPinDirection+0x152>
     ce4:	84 2b       	or	r24, r20
     ce6:	8c 93       	st	X, r24
     ce8:	71 c0       	rjmp	.+226    	; 0xdcc <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	38 87       	std	Y+8, r19	; 0x08
     cf2:	2f 83       	std	Y+7, r18	; 0x07
     cf4:	8f 81       	ldd	r24, Y+7	; 0x07
     cf6:	98 85       	ldd	r25, Y+8	; 0x08
     cf8:	00 97       	sbiw	r24, 0x00	; 0
     cfa:	31 f0       	breq	.+12     	; 0xd08 <DIO_u8SetPinDirection+0x17e>
     cfc:	2f 81       	ldd	r18, Y+7	; 0x07
     cfe:	38 85       	ldd	r19, Y+8	; 0x08
     d00:	21 30       	cpi	r18, 0x01	; 1
     d02:	31 05       	cpc	r19, r1
     d04:	b1 f0       	breq	.+44     	; 0xd32 <DIO_u8SetPinDirection+0x1a8>
     d06:	62 c0       	rjmp	.+196    	; 0xdcc <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     d08:	a4 e3       	ldi	r26, 0x34	; 52
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e4 e3       	ldi	r30, 0x34	; 52
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	48 2f       	mov	r20, r24
     d14:	8b 81       	ldd	r24, Y+3	; 0x03
     d16:	28 2f       	mov	r18, r24
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	02 2e       	mov	r0, r18
     d20:	02 c0       	rjmp	.+4      	; 0xd26 <DIO_u8SetPinDirection+0x19c>
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	0a 94       	dec	r0
     d28:	e2 f7       	brpl	.-8      	; 0xd22 <DIO_u8SetPinDirection+0x198>
     d2a:	80 95       	com	r24
     d2c:	84 23       	and	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	4d c0       	rjmp	.+154    	; 0xdcc <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     d32:	a4 e3       	ldi	r26, 0x34	; 52
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e4 e3       	ldi	r30, 0x34	; 52
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_u8SetPinDirection+0x1c6>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_u8SetPinDirection+0x1c2>
     d54:	84 2b       	or	r24, r20
     d56:	8c 93       	st	X, r24
     d58:	39 c0       	rjmp	.+114    	; 0xdcc <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	3e 83       	std	Y+6, r19	; 0x06
     d62:	2d 83       	std	Y+5, r18	; 0x05
     d64:	8d 81       	ldd	r24, Y+5	; 0x05
     d66:	9e 81       	ldd	r25, Y+6	; 0x06
     d68:	00 97       	sbiw	r24, 0x00	; 0
     d6a:	31 f0       	breq	.+12     	; 0xd78 <DIO_u8SetPinDirection+0x1ee>
     d6c:	2d 81       	ldd	r18, Y+5	; 0x05
     d6e:	3e 81       	ldd	r19, Y+6	; 0x06
     d70:	21 30       	cpi	r18, 0x01	; 1
     d72:	31 05       	cpc	r19, r1
     d74:	b1 f0       	breq	.+44     	; 0xda2 <DIO_u8SetPinDirection+0x218>
     d76:	2a c0       	rjmp	.+84     	; 0xdcc <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     d78:	a1 e3       	ldi	r26, 0x31	; 49
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 e3       	ldi	r30, 0x31	; 49
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_u8SetPinDirection+0x20c>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_u8SetPinDirection+0x208>
     d9a:	80 95       	com	r24
     d9c:	84 23       	and	r24, r20
     d9e:	8c 93       	st	X, r24
     da0:	15 c0       	rjmp	.+42     	; 0xdcc <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     da2:	a1 e3       	ldi	r26, 0x31	; 49
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e1 e3       	ldi	r30, 0x31	; 49
     da8:	f0 e0       	ldi	r31, 0x00	; 0
     daa:	80 81       	ld	r24, Z
     dac:	48 2f       	mov	r20, r24
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	28 2f       	mov	r18, r24
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	02 2e       	mov	r0, r18
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <DIO_u8SetPinDirection+0x236>
     dbc:	88 0f       	add	r24, r24
     dbe:	99 1f       	adc	r25, r25
     dc0:	0a 94       	dec	r0
     dc2:	e2 f7       	brpl	.-8      	; 0xdbc <DIO_u8SetPinDirection+0x232>
     dc4:	84 2b       	or	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	01 c0       	rjmp	.+2      	; 0xdcc <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     dca:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dce:	2e 96       	adiw	r28, 0x0e	; 14
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	cf 91       	pop	r28
     ddc:	df 91       	pop	r29
     dde:	08 95       	ret

00000de0 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     de0:	df 93       	push	r29
     de2:	cf 93       	push	r28
     de4:	cd b7       	in	r28, 0x3d	; 61
     de6:	de b7       	in	r29, 0x3e	; 62
     de8:	2e 97       	sbiw	r28, 0x0e	; 14
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	f8 94       	cli
     dee:	de bf       	out	0x3e, r29	; 62
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	cd bf       	out	0x3d, r28	; 61
     df4:	8a 83       	std	Y+2, r24	; 0x02
     df6:	6b 83       	std	Y+3, r22	; 0x03
     df8:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 30       	cpi	r24, 0x08	; 8
     e02:	08 f0       	brcs	.+2      	; 0xe06 <DIO_u8SetPinValue+0x26>
     e04:	0c c1       	rjmp	.+536    	; 0x101e <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3e 87       	std	Y+14, r19	; 0x0e
     e0e:	2d 87       	std	Y+13, r18	; 0x0d
     e10:	8d 85       	ldd	r24, Y+13	; 0x0d
     e12:	9e 85       	ldd	r25, Y+14	; 0x0e
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	09 f4       	brne	.+2      	; 0xe1c <DIO_u8SetPinValue+0x3c>
     e1a:	51 c0       	rjmp	.+162    	; 0xebe <DIO_u8SetPinValue+0xde>
     e1c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e20:	22 30       	cpi	r18, 0x02	; 2
     e22:	31 05       	cpc	r19, r1
     e24:	2c f4       	brge	.+10     	; 0xe30 <DIO_u8SetPinValue+0x50>
     e26:	8d 85       	ldd	r24, Y+13	; 0x0d
     e28:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2a:	00 97       	sbiw	r24, 0x00	; 0
     e2c:	71 f0       	breq	.+28     	; 0xe4a <DIO_u8SetPinValue+0x6a>
     e2e:	f5 c0       	rjmp	.+490    	; 0x101a <DIO_u8SetPinValue+0x23a>
     e30:	2d 85       	ldd	r18, Y+13	; 0x0d
     e32:	3e 85       	ldd	r19, Y+14	; 0x0e
     e34:	22 30       	cpi	r18, 0x02	; 2
     e36:	31 05       	cpc	r19, r1
     e38:	09 f4       	brne	.+2      	; 0xe3c <DIO_u8SetPinValue+0x5c>
     e3a:	7b c0       	rjmp	.+246    	; 0xf32 <DIO_u8SetPinValue+0x152>
     e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e40:	83 30       	cpi	r24, 0x03	; 3
     e42:	91 05       	cpc	r25, r1
     e44:	09 f4       	brne	.+2      	; 0xe48 <DIO_u8SetPinValue+0x68>
     e46:	af c0       	rjmp	.+350    	; 0xfa6 <DIO_u8SetPinValue+0x1c6>
     e48:	e8 c0       	rjmp	.+464    	; 0x101a <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     e4a:	8c 81       	ldd	r24, Y+4	; 0x04
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	3c 87       	std	Y+12, r19	; 0x0c
     e52:	2b 87       	std	Y+11, r18	; 0x0b
     e54:	8b 85       	ldd	r24, Y+11	; 0x0b
     e56:	9c 85       	ldd	r25, Y+12	; 0x0c
     e58:	00 97       	sbiw	r24, 0x00	; 0
     e5a:	31 f0       	breq	.+12     	; 0xe68 <DIO_u8SetPinValue+0x88>
     e5c:	2b 85       	ldd	r18, Y+11	; 0x0b
     e5e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e60:	21 30       	cpi	r18, 0x01	; 1
     e62:	31 05       	cpc	r19, r1
     e64:	b1 f0       	breq	.+44     	; 0xe92 <DIO_u8SetPinValue+0xb2>
     e66:	29 c0       	rjmp	.+82     	; 0xeba <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     e68:	ab e3       	ldi	r26, 0x3B	; 59
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e3       	ldi	r30, 0x3B	; 59
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8b 81       	ldd	r24, Y+3	; 0x03
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_u8SetPinValue+0xa6>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_u8SetPinValue+0xa2>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	c7 c0       	rjmp	.+398    	; 0x1020 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     e92:	ab e3       	ldi	r26, 0x3B	; 59
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	eb e3       	ldi	r30, 0x3B	; 59
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_u8SetPinValue+0xd0>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_u8SetPinValue+0xcc>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	b3 c0       	rjmp	.+358    	; 0x1020 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     eba:	19 82       	std	Y+1, r1	; 0x01
     ebc:	b1 c0       	rjmp	.+354    	; 0x1020 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3a 87       	std	Y+10, r19	; 0x0a
     ec6:	29 87       	std	Y+9, r18	; 0x09
     ec8:	89 85       	ldd	r24, Y+9	; 0x09
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	31 f0       	breq	.+12     	; 0xedc <DIO_u8SetPinValue+0xfc>
     ed0:	29 85       	ldd	r18, Y+9	; 0x09
     ed2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	31 05       	cpc	r19, r1
     ed8:	b1 f0       	breq	.+44     	; 0xf06 <DIO_u8SetPinValue+0x126>
     eda:	29 c0       	rjmp	.+82     	; 0xf2e <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <DIO_u8SetPinValue+0x11a>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <DIO_u8SetPinValue+0x116>
     efe:	80 95       	com	r24
     f00:	84 23       	and	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	8d c0       	rjmp	.+282    	; 0x1020 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     f06:	a8 e3       	ldi	r26, 0x38	; 56
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e8 e3       	ldi	r30, 0x38	; 56
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_u8SetPinValue+0x144>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_u8SetPinValue+0x140>
     f28:	84 2b       	or	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	79 c0       	rjmp	.+242    	; 0x1020 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     f2e:	19 82       	std	Y+1, r1	; 0x01
     f30:	77 c0       	rjmp	.+238    	; 0x1020 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
     f32:	8c 81       	ldd	r24, Y+4	; 0x04
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	38 87       	std	Y+8, r19	; 0x08
     f3a:	2f 83       	std	Y+7, r18	; 0x07
     f3c:	8f 81       	ldd	r24, Y+7	; 0x07
     f3e:	98 85       	ldd	r25, Y+8	; 0x08
     f40:	00 97       	sbiw	r24, 0x00	; 0
     f42:	31 f0       	breq	.+12     	; 0xf50 <DIO_u8SetPinValue+0x170>
     f44:	2f 81       	ldd	r18, Y+7	; 0x07
     f46:	38 85       	ldd	r19, Y+8	; 0x08
     f48:	21 30       	cpi	r18, 0x01	; 1
     f4a:	31 05       	cpc	r19, r1
     f4c:	b1 f0       	breq	.+44     	; 0xf7a <DIO_u8SetPinValue+0x19a>
     f4e:	29 c0       	rjmp	.+82     	; 0xfa2 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     f50:	a5 e3       	ldi	r26, 0x35	; 53
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e5 e3       	ldi	r30, 0x35	; 53
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <DIO_u8SetPinValue+0x18e>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <DIO_u8SetPinValue+0x18a>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	53 c0       	rjmp	.+166    	; 0x1020 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     f7a:	a5 e3       	ldi	r26, 0x35	; 53
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e5 e3       	ldi	r30, 0x35	; 53
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	8b 81       	ldd	r24, Y+3	; 0x03
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	02 2e       	mov	r0, r18
     f92:	02 c0       	rjmp	.+4      	; 0xf98 <DIO_u8SetPinValue+0x1b8>
     f94:	88 0f       	add	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	0a 94       	dec	r0
     f9a:	e2 f7       	brpl	.-8      	; 0xf94 <DIO_u8SetPinValue+0x1b4>
     f9c:	84 2b       	or	r24, r20
     f9e:	8c 93       	st	X, r24
     fa0:	3f c0       	rjmp	.+126    	; 0x1020 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     fa2:	19 82       	std	Y+1, r1	; 0x01
     fa4:	3d c0       	rjmp	.+122    	; 0x1020 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3e 83       	std	Y+6, r19	; 0x06
     fae:	2d 83       	std	Y+5, r18	; 0x05
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <DIO_u8SetPinValue+0x1e4>
     fb8:	2d 81       	ldd	r18, Y+5	; 0x05
     fba:	3e 81       	ldd	r19, Y+6	; 0x06
     fbc:	21 30       	cpi	r18, 0x01	; 1
     fbe:	31 05       	cpc	r19, r1
     fc0:	b1 f0       	breq	.+44     	; 0xfee <DIO_u8SetPinValue+0x20e>
     fc2:	29 c0       	rjmp	.+82     	; 0x1016 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     fc4:	a2 e3       	ldi	r26, 0x32	; 50
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e2 e3       	ldi	r30, 0x32	; 50
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_u8SetPinValue+0x202>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_u8SetPinValue+0x1fe>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	19 c0       	rjmp	.+50     	; 0x1020 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     fee:	a2 e3       	ldi	r26, 0x32	; 50
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e2 e3       	ldi	r30, 0x32	; 50
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_u8SetPinValue+0x22c>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_u8SetPinValue+0x228>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    101a:	19 82       	std	Y+1, r1	; 0x01
    101c:	01 c0       	rjmp	.+2      	; 0x1020 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    101e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1020:	89 81       	ldd	r24, Y+1	; 0x01
}
    1022:	2e 96       	adiw	r28, 0x0e	; 14
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	28 97       	sbiw	r28, 0x08	; 8
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	6c 83       	std	Y+4, r22	; 0x04
    104c:	5e 83       	std	Y+6, r21	; 0x06
    104e:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	08 f0       	brcs	.+2      	; 0x105c <DIO_u8GetPinValue+0x28>
    105a:	a1 c0       	rjmp	.+322    	; 0x119e <DIO_u8GetPinValue+0x16a>
    105c:	8c 81       	ldd	r24, Y+4	; 0x04
    105e:	88 30       	cpi	r24, 0x08	; 8
    1060:	08 f0       	brcs	.+2      	; 0x1064 <DIO_u8GetPinValue+0x30>
    1062:	9d c0       	rjmp	.+314    	; 0x119e <DIO_u8GetPinValue+0x16a>
    1064:	8d 81       	ldd	r24, Y+5	; 0x05
    1066:	9e 81       	ldd	r25, Y+6	; 0x06
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	09 f4       	brne	.+2      	; 0x106e <DIO_u8GetPinValue+0x3a>
    106c:	98 c0       	rjmp	.+304    	; 0x119e <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	38 87       	std	Y+8, r19	; 0x08
    1076:	2f 83       	std	Y+7, r18	; 0x07
    1078:	4f 81       	ldd	r20, Y+7	; 0x07
    107a:	58 85       	ldd	r21, Y+8	; 0x08
    107c:	41 30       	cpi	r20, 0x01	; 1
    107e:	51 05       	cpc	r21, r1
    1080:	a9 f1       	breq	.+106    	; 0x10ec <DIO_u8GetPinValue+0xb8>
    1082:	8f 81       	ldd	r24, Y+7	; 0x07
    1084:	98 85       	ldd	r25, Y+8	; 0x08
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	91 05       	cpc	r25, r1
    108a:	34 f4       	brge	.+12     	; 0x1098 <DIO_u8GetPinValue+0x64>
    108c:	2f 81       	ldd	r18, Y+7	; 0x07
    108e:	38 85       	ldd	r19, Y+8	; 0x08
    1090:	21 15       	cp	r18, r1
    1092:	31 05       	cpc	r19, r1
    1094:	71 f0       	breq	.+28     	; 0x10b2 <DIO_u8GetPinValue+0x7e>
    1096:	81 c0       	rjmp	.+258    	; 0x119a <DIO_u8GetPinValue+0x166>
    1098:	4f 81       	ldd	r20, Y+7	; 0x07
    109a:	58 85       	ldd	r21, Y+8	; 0x08
    109c:	42 30       	cpi	r20, 0x02	; 2
    109e:	51 05       	cpc	r21, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <DIO_u8GetPinValue+0x70>
    10a2:	41 c0       	rjmp	.+130    	; 0x1126 <DIO_u8GetPinValue+0xf2>
    10a4:	8f 81       	ldd	r24, Y+7	; 0x07
    10a6:	98 85       	ldd	r25, Y+8	; 0x08
    10a8:	83 30       	cpi	r24, 0x03	; 3
    10aa:	91 05       	cpc	r25, r1
    10ac:	09 f4       	brne	.+2      	; 0x10b0 <DIO_u8GetPinValue+0x7c>
    10ae:	58 c0       	rjmp	.+176    	; 0x1160 <DIO_u8GetPinValue+0x12c>
    10b0:	74 c0       	rjmp	.+232    	; 0x119a <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    10b2:	e9 e3       	ldi	r30, 0x39	; 57
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	80 81       	ld	r24, Z
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	88 2f       	mov	r24, r24
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a9 01       	movw	r20, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8GetPinValue+0x96>
    10c6:	55 95       	asr	r21
    10c8:	47 95       	ror	r20
    10ca:	8a 95       	dec	r24
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_u8GetPinValue+0x92>
    10ce:	ca 01       	movw	r24, r20
    10d0:	81 70       	andi	r24, 0x01	; 1
    10d2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	88 23       	and	r24, r24
    10d8:	21 f4       	brne	.+8      	; 0x10e2 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    10da:	ed 81       	ldd	r30, Y+5	; 0x05
    10dc:	fe 81       	ldd	r31, Y+6	; 0x06
    10de:	10 82       	st	Z, r1
    10e0:	5f c0       	rjmp	.+190    	; 0x11a0 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    10e2:	ed 81       	ldd	r30, Y+5	; 0x05
    10e4:	fe 81       	ldd	r31, Y+6	; 0x06
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	80 83       	st	Z, r24
    10ea:	5a c0       	rjmp	.+180    	; 0x11a0 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    10ec:	e6 e3       	ldi	r30, 0x36	; 54
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	8c 81       	ldd	r24, Y+4	; 0x04
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a9 01       	movw	r20, r18
    10fe:	02 c0       	rjmp	.+4      	; 0x1104 <DIO_u8GetPinValue+0xd0>
    1100:	55 95       	asr	r21
    1102:	47 95       	ror	r20
    1104:	8a 95       	dec	r24
    1106:	e2 f7       	brpl	.-8      	; 0x1100 <DIO_u8GetPinValue+0xcc>
    1108:	ca 01       	movw	r24, r20
    110a:	81 70       	andi	r24, 0x01	; 1
    110c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 23       	and	r24, r24
    1112:	21 f4       	brne	.+8      	; 0x111c <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1114:	ed 81       	ldd	r30, Y+5	; 0x05
    1116:	fe 81       	ldd	r31, Y+6	; 0x06
    1118:	10 82       	st	Z, r1
    111a:	42 c0       	rjmp	.+132    	; 0x11a0 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    111c:	ed 81       	ldd	r30, Y+5	; 0x05
    111e:	fe 81       	ldd	r31, Y+6	; 0x06
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	80 83       	st	Z, r24
    1124:	3d c0       	rjmp	.+122    	; 0x11a0 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1126:	e3 e3       	ldi	r30, 0x33	; 51
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8GetPinValue+0x10a>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8GetPinValue+0x106>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	88 23       	and	r24, r24
    114c:	21 f4       	brne	.+8      	; 0x1156 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    114e:	ed 81       	ldd	r30, Y+5	; 0x05
    1150:	fe 81       	ldd	r31, Y+6	; 0x06
    1152:	10 82       	st	Z, r1
    1154:	25 c0       	rjmp	.+74     	; 0x11a0 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1156:	ed 81       	ldd	r30, Y+5	; 0x05
    1158:	fe 81       	ldd	r31, Y+6	; 0x06
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	80 83       	st	Z, r24
    115e:	20 c0       	rjmp	.+64     	; 0x11a0 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1160:	e0 e3       	ldi	r30, 0x30	; 48
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	8c 81       	ldd	r24, Y+4	; 0x04
    116c:	88 2f       	mov	r24, r24
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a9 01       	movw	r20, r18
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <DIO_u8GetPinValue+0x144>
    1174:	55 95       	asr	r21
    1176:	47 95       	ror	r20
    1178:	8a 95       	dec	r24
    117a:	e2 f7       	brpl	.-8      	; 0x1174 <DIO_u8GetPinValue+0x140>
    117c:	ca 01       	movw	r24, r20
    117e:	81 70       	andi	r24, 0x01	; 1
    1180:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	88 23       	and	r24, r24
    1186:	21 f4       	brne	.+8      	; 0x1190 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1188:	ed 81       	ldd	r30, Y+5	; 0x05
    118a:	fe 81       	ldd	r31, Y+6	; 0x06
    118c:	10 82       	st	Z, r1
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1190:	ed 81       	ldd	r30, Y+5	; 0x05
    1192:	fe 81       	ldd	r31, Y+6	; 0x06
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	80 83       	st	Z, r24
    1198:	03 c0       	rjmp	.+6      	; 0x11a0 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    119a:	1a 82       	std	Y+2, r1	; 0x02
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    119e:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    11a2:	28 96       	adiw	r28, 0x08	; 8
    11a4:	0f b6       	in	r0, 0x3f	; 63
    11a6:	f8 94       	cli
    11a8:	de bf       	out	0x3e, r29	; 62
    11aa:	0f be       	out	0x3f, r0	; 63
    11ac:	cd bf       	out	0x3d, r28	; 61
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	2d 97       	sbiw	r28, 0x0d	; 13
    11be:	0f b6       	in	r0, 0x3f	; 63
    11c0:	f8 94       	cli
    11c2:	de bf       	out	0x3e, r29	; 62
    11c4:	0f be       	out	0x3f, r0	; 63
    11c6:	cd bf       	out	0x3d, r28	; 61
    11c8:	8a 83       	std	Y+2, r24	; 0x02
    11ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	88 23       	and	r24, r24
    11d4:	21 f0       	breq	.+8      	; 0x11de <DIO_u8SetPortDirection+0x2a>
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	81 30       	cpi	r24, 0x01	; 1
    11da:	09 f0       	breq	.+2      	; 0x11de <DIO_u8SetPortDirection+0x2a>
    11dc:	82 c0       	rjmp	.+260    	; 0x12e2 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	3d 87       	std	Y+13, r19	; 0x0d
    11e6:	2c 87       	std	Y+12, r18	; 0x0c
    11e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    11ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    11ec:	81 30       	cpi	r24, 0x01	; 1
    11ee:	91 05       	cpc	r25, r1
    11f0:	71 f1       	breq	.+92     	; 0x124e <DIO_u8SetPortDirection+0x9a>
    11f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f4:	3d 85       	ldd	r19, Y+13	; 0x0d
    11f6:	22 30       	cpi	r18, 0x02	; 2
    11f8:	31 05       	cpc	r19, r1
    11fa:	2c f4       	brge	.+10     	; 0x1206 <DIO_u8SetPortDirection+0x52>
    11fc:	8c 85       	ldd	r24, Y+12	; 0x0c
    11fe:	9d 85       	ldd	r25, Y+13	; 0x0d
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	69 f0       	breq	.+26     	; 0x121e <DIO_u8SetPortDirection+0x6a>
    1204:	6c c0       	rjmp	.+216    	; 0x12de <DIO_u8SetPortDirection+0x12a>
    1206:	2c 85       	ldd	r18, Y+12	; 0x0c
    1208:	3d 85       	ldd	r19, Y+13	; 0x0d
    120a:	22 30       	cpi	r18, 0x02	; 2
    120c:	31 05       	cpc	r19, r1
    120e:	b9 f1       	breq	.+110    	; 0x127e <DIO_u8SetPortDirection+0xca>
    1210:	8c 85       	ldd	r24, Y+12	; 0x0c
    1212:	9d 85       	ldd	r25, Y+13	; 0x0d
    1214:	83 30       	cpi	r24, 0x03	; 3
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <DIO_u8SetPortDirection+0x68>
    121a:	49 c0       	rjmp	.+146    	; 0x12ae <DIO_u8SetPortDirection+0xfa>
    121c:	60 c0       	rjmp	.+192    	; 0x12de <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3b 87       	std	Y+11, r19	; 0x0b
    1226:	2a 87       	std	Y+10, r18	; 0x0a
    1228:	8a 85       	ldd	r24, Y+10	; 0x0a
    122a:	9b 85       	ldd	r25, Y+11	; 0x0b
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	31 f0       	breq	.+12     	; 0x123c <DIO_u8SetPortDirection+0x88>
    1230:	2a 85       	ldd	r18, Y+10	; 0x0a
    1232:	3b 85       	ldd	r19, Y+11	; 0x0b
    1234:	21 30       	cpi	r18, 0x01	; 1
    1236:	31 05       	cpc	r19, r1
    1238:	29 f0       	breq	.+10     	; 0x1244 <DIO_u8SetPortDirection+0x90>
    123a:	54 c0       	rjmp	.+168    	; 0x12e4 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	10 82       	st	Z, r1
    1242:	50 c0       	rjmp	.+160    	; 0x12e4 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    1244:	ea e3       	ldi	r30, 0x3A	; 58
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	80 83       	st	Z, r24
    124c:	4b c0       	rjmp	.+150    	; 0x12e4 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	39 87       	std	Y+9, r19	; 0x09
    1256:	28 87       	std	Y+8, r18	; 0x08
    1258:	88 85       	ldd	r24, Y+8	; 0x08
    125a:	99 85       	ldd	r25, Y+9	; 0x09
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	31 f0       	breq	.+12     	; 0x126c <DIO_u8SetPortDirection+0xb8>
    1260:	28 85       	ldd	r18, Y+8	; 0x08
    1262:	39 85       	ldd	r19, Y+9	; 0x09
    1264:	21 30       	cpi	r18, 0x01	; 1
    1266:	31 05       	cpc	r19, r1
    1268:	29 f0       	breq	.+10     	; 0x1274 <DIO_u8SetPortDirection+0xc0>
    126a:	3c c0       	rjmp	.+120    	; 0x12e4 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    126c:	e7 e3       	ldi	r30, 0x37	; 55
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	10 82       	st	Z, r1
    1272:	38 c0       	rjmp	.+112    	; 0x12e4 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    1274:	e7 e3       	ldi	r30, 0x37	; 55
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	80 83       	st	Z, r24
    127c:	33 c0       	rjmp	.+102    	; 0x12e4 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	3f 83       	std	Y+7, r19	; 0x07
    1286:	2e 83       	std	Y+6, r18	; 0x06
    1288:	8e 81       	ldd	r24, Y+6	; 0x06
    128a:	9f 81       	ldd	r25, Y+7	; 0x07
    128c:	00 97       	sbiw	r24, 0x00	; 0
    128e:	31 f0       	breq	.+12     	; 0x129c <DIO_u8SetPortDirection+0xe8>
    1290:	2e 81       	ldd	r18, Y+6	; 0x06
    1292:	3f 81       	ldd	r19, Y+7	; 0x07
    1294:	21 30       	cpi	r18, 0x01	; 1
    1296:	31 05       	cpc	r19, r1
    1298:	29 f0       	breq	.+10     	; 0x12a4 <DIO_u8SetPortDirection+0xf0>
    129a:	24 c0       	rjmp	.+72     	; 0x12e4 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    129c:	e4 e3       	ldi	r30, 0x34	; 52
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	10 82       	st	Z, r1
    12a2:	20 c0       	rjmp	.+64     	; 0x12e4 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    12a4:	e4 e3       	ldi	r30, 0x34	; 52
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	80 83       	st	Z, r24
    12ac:	1b c0       	rjmp	.+54     	; 0x12e4 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	3d 83       	std	Y+5, r19	; 0x05
    12b6:	2c 83       	std	Y+4, r18	; 0x04
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	31 f0       	breq	.+12     	; 0x12cc <DIO_u8SetPortDirection+0x118>
    12c0:	2c 81       	ldd	r18, Y+4	; 0x04
    12c2:	3d 81       	ldd	r19, Y+5	; 0x05
    12c4:	21 30       	cpi	r18, 0x01	; 1
    12c6:	31 05       	cpc	r19, r1
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <DIO_u8SetPortDirection+0x120>
    12ca:	0c c0       	rjmp	.+24     	; 0x12e4 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    12cc:	e1 e3       	ldi	r30, 0x31	; 49
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	10 82       	st	Z, r1
    12d2:	08 c0       	rjmp	.+16     	; 0x12e4 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    12d4:	e1 e3       	ldi	r30, 0x31	; 49
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8f ef       	ldi	r24, 0xFF	; 255
    12da:	80 83       	st	Z, r24
    12dc:	03 c0       	rjmp	.+6      	; 0x12e4 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    12de:	19 82       	std	Y+1, r1	; 0x01
    12e0:	01 c0       	rjmp	.+2      	; 0x12e4 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12e2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e6:	2d 96       	adiw	r28, 0x0d	; 13
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <DIO_u8SetPortValue+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <DIO_u8SetPortValue+0x8>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	3d 83       	std	Y+5, r19	; 0x05
    1316:	2c 83       	std	Y+4, r18	; 0x04
    1318:	8c 81       	ldd	r24, Y+4	; 0x04
    131a:	9d 81       	ldd	r25, Y+5	; 0x05
    131c:	81 30       	cpi	r24, 0x01	; 1
    131e:	91 05       	cpc	r25, r1
    1320:	d1 f0       	breq	.+52     	; 0x1356 <DIO_u8SetPortValue+0x5e>
    1322:	2c 81       	ldd	r18, Y+4	; 0x04
    1324:	3d 81       	ldd	r19, Y+5	; 0x05
    1326:	22 30       	cpi	r18, 0x02	; 2
    1328:	31 05       	cpc	r19, r1
    132a:	2c f4       	brge	.+10     	; 0x1336 <DIO_u8SetPortValue+0x3e>
    132c:	8c 81       	ldd	r24, Y+4	; 0x04
    132e:	9d 81       	ldd	r25, Y+5	; 0x05
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	61 f0       	breq	.+24     	; 0x134c <DIO_u8SetPortValue+0x54>
    1334:	1f c0       	rjmp	.+62     	; 0x1374 <DIO_u8SetPortValue+0x7c>
    1336:	2c 81       	ldd	r18, Y+4	; 0x04
    1338:	3d 81       	ldd	r19, Y+5	; 0x05
    133a:	22 30       	cpi	r18, 0x02	; 2
    133c:	31 05       	cpc	r19, r1
    133e:	81 f0       	breq	.+32     	; 0x1360 <DIO_u8SetPortValue+0x68>
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	83 30       	cpi	r24, 0x03	; 3
    1346:	91 05       	cpc	r25, r1
    1348:	81 f0       	breq	.+32     	; 0x136a <DIO_u8SetPortValue+0x72>
    134a:	14 c0       	rjmp	.+40     	; 0x1374 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    134c:	eb e3       	ldi	r30, 0x3B	; 59
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	80 83       	st	Z, r24
    1354:	10 c0       	rjmp	.+32     	; 0x1376 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    1356:	e8 e3       	ldi	r30, 0x38	; 56
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	80 83       	st	Z, r24
    135e:	0b c0       	rjmp	.+22     	; 0x1376 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    1360:	e5 e3       	ldi	r30, 0x35	; 53
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	80 83       	st	Z, r24
    1368:	06 c0       	rjmp	.+12     	; 0x1376 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    136a:	e2 e3       	ldi	r30, 0x32	; 50
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	80 83       	st	Z, r24
    1372:	01 c0       	rjmp	.+2      	; 0x1376 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    1374:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	0f 90       	pop	r0
    1380:	0f 90       	pop	r0
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	00 d0       	rcall	.+0      	; 0x138e <DIO_u8GetPortValue+0x6>
    138e:	00 d0       	rcall	.+0      	; 0x1390 <DIO_u8GetPortValue+0x8>
    1390:	00 d0       	rcall	.+0      	; 0x1392 <DIO_u8GetPortValue+0xa>
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	8a 83       	std	Y+2, r24	; 0x02
    1398:	7c 83       	std	Y+4, r23	; 0x04
    139a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	00 97       	sbiw	r24, 0x00	; 0
    13a6:	e9 f1       	breq	.+122    	; 0x1422 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    13a8:	8a 81       	ldd	r24, Y+2	; 0x02
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	3e 83       	std	Y+6, r19	; 0x06
    13b0:	2d 83       	std	Y+5, r18	; 0x05
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	9e 81       	ldd	r25, Y+6	; 0x06
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	91 05       	cpc	r25, r1
    13ba:	e1 f0       	breq	.+56     	; 0x13f4 <DIO_u8GetPortValue+0x6c>
    13bc:	2d 81       	ldd	r18, Y+5	; 0x05
    13be:	3e 81       	ldd	r19, Y+6	; 0x06
    13c0:	22 30       	cpi	r18, 0x02	; 2
    13c2:	31 05       	cpc	r19, r1
    13c4:	2c f4       	brge	.+10     	; 0x13d0 <DIO_u8GetPortValue+0x48>
    13c6:	8d 81       	ldd	r24, Y+5	; 0x05
    13c8:	9e 81       	ldd	r25, Y+6	; 0x06
    13ca:	00 97       	sbiw	r24, 0x00	; 0
    13cc:	61 f0       	breq	.+24     	; 0x13e6 <DIO_u8GetPortValue+0x5e>
    13ce:	27 c0       	rjmp	.+78     	; 0x141e <DIO_u8GetPortValue+0x96>
    13d0:	2d 81       	ldd	r18, Y+5	; 0x05
    13d2:	3e 81       	ldd	r19, Y+6	; 0x06
    13d4:	22 30       	cpi	r18, 0x02	; 2
    13d6:	31 05       	cpc	r19, r1
    13d8:	a1 f0       	breq	.+40     	; 0x1402 <DIO_u8GetPortValue+0x7a>
    13da:	8d 81       	ldd	r24, Y+5	; 0x05
    13dc:	9e 81       	ldd	r25, Y+6	; 0x06
    13de:	83 30       	cpi	r24, 0x03	; 3
    13e0:	91 05       	cpc	r25, r1
    13e2:	b1 f0       	breq	.+44     	; 0x1410 <DIO_u8GetPortValue+0x88>
    13e4:	1c c0       	rjmp	.+56     	; 0x141e <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    13e6:	e9 e3       	ldi	r30, 0x39	; 57
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	eb 81       	ldd	r30, Y+3	; 0x03
    13ee:	fc 81       	ldd	r31, Y+4	; 0x04
    13f0:	80 83       	st	Z, r24
    13f2:	18 c0       	rjmp	.+48     	; 0x1424 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    13f4:	e6 e3       	ldi	r30, 0x36	; 54
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	eb 81       	ldd	r30, Y+3	; 0x03
    13fc:	fc 81       	ldd	r31, Y+4	; 0x04
    13fe:	80 83       	st	Z, r24
    1400:	11 c0       	rjmp	.+34     	; 0x1424 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1402:	e3 e3       	ldi	r30, 0x33	; 51
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	eb 81       	ldd	r30, Y+3	; 0x03
    140a:	fc 81       	ldd	r31, Y+4	; 0x04
    140c:	80 83       	st	Z, r24
    140e:	0a c0       	rjmp	.+20     	; 0x1424 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1410:	e0 e3       	ldi	r30, 0x30	; 48
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	eb 81       	ldd	r30, Y+3	; 0x03
    1418:	fc 81       	ldd	r31, Y+4	; 0x04
    141a:	80 83       	st	Z, r24
    141c:	03 c0       	rjmp	.+6      	; 0x1424 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    141e:	19 82       	std	Y+1, r1	; 0x01
    1420:	01 c0       	rjmp	.+2      	; 0x1424 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1422:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	26 96       	adiw	r28, 0x06	; 6
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	de bf       	out	0x3e, r29	; 62
    142e:	0f be       	out	0x3f, r0	; 63
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	cf 91       	pop	r28
    1434:	df 91       	pop	r29
    1436:	08 95       	ret

00001438 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u16 * Copy_pu8ReturnedKey)
{
    1438:	df 93       	push	r29
    143a:	cf 93       	push	r28
    143c:	cd b7       	in	r28, 0x3d	; 61
    143e:	de b7       	in	r29, 0x3e	; 62
    1440:	66 97       	sbiw	r28, 0x16	; 22
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	9e 8b       	std	Y+22, r25	; 0x16
    144e:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	8b 8b       	std	Y+19, r24	; 0x13
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    1454:	18 8a       	std	Y+16, r1	; 0x10
	if(Copy_pu8ReturnedKey != NULL)
    1456:	8d 89       	ldd	r24, Y+21	; 0x15
    1458:	9e 89       	ldd	r25, Y+22	; 0x16
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	09 f4       	brne	.+2      	; 0x1460 <KPD_u8GetKeyState+0x28>
    145e:	f6 c0       	rjmp	.+492    	; 0x164c <KPD_u8GetKeyState+0x214>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1460:	ed 89       	ldd	r30, Y+21	; 0x15
    1462:	fe 89       	ldd	r31, Y+22	; 0x16
    1464:	8f ef       	ldi	r24, 0xFF	; 255
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    146c:	1a 8a       	std	Y+18, r1	; 0x12
    146e:	e9 c0       	rjmp	.+466    	; 0x1642 <KPD_u8GetKeyState+0x20a>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    1470:	8a 89       	ldd	r24, Y+18	; 0x12
    1472:	88 2f       	mov	r24, r24
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	fc 01       	movw	r30, r24
    1478:	e8 57       	subi	r30, 0x78	; 120
    147a:	ff 4f       	sbci	r31, 0xFF	; 255
    147c:	90 81       	ld	r25, Z
    147e:	82 e0       	ldi	r24, 0x02	; 2
    1480:	69 2f       	mov	r22, r25
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    1488:	19 8a       	std	Y+17, r1	; 0x11
    148a:	c5 c0       	rjmp	.+394    	; 0x1616 <KPD_u8GetKeyState+0x1de>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    148c:	89 89       	ldd	r24, Y+17	; 0x11
    148e:	88 2f       	mov	r24, r24
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	fc 01       	movw	r30, r24
    1494:	e4 57       	subi	r30, 0x74	; 116
    1496:	ff 4f       	sbci	r31, 0xFF	; 255
    1498:	90 81       	ld	r25, Z
    149a:	9e 01       	movw	r18, r28
    149c:	2c 5e       	subi	r18, 0xEC	; 236
    149e:	3f 4f       	sbci	r19, 0xFF	; 255
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	69 2f       	mov	r22, r25
    14a4:	a9 01       	movw	r20, r18
    14a6:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    14aa:	8c 89       	ldd	r24, Y+20	; 0x14
    14ac:	88 23       	and	r24, r24
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <KPD_u8GetKeyState+0x7a>
    14b0:	af c0       	rjmp	.+350    	; 0x1610 <KPD_u8GetKeyState+0x1d8>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	a0 ea       	ldi	r26, 0xA0	; 160
    14b8:	b1 e4       	ldi	r27, 0x41	; 65
    14ba:	8b 87       	std	Y+11, r24	; 0x0b
    14bc:	9c 87       	std	Y+12, r25	; 0x0c
    14be:	ad 87       	std	Y+13, r26	; 0x0d
    14c0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a ef       	ldi	r20, 0xFA	; 250
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8f 83       	std	Y+7, r24	; 0x07
    14dc:	98 87       	std	Y+8, r25	; 0x08
    14de:	a9 87       	std	Y+9, r26	; 0x09
    14e0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14e2:	6f 81       	ldd	r22, Y+7	; 0x07
    14e4:	78 85       	ldd	r23, Y+8	; 0x08
    14e6:	89 85       	ldd	r24, Y+9	; 0x09
    14e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 e8       	ldi	r20, 0x80	; 128
    14f0:	5f e3       	ldi	r21, 0x3F	; 63
    14f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f6:	88 23       	and	r24, r24
    14f8:	2c f4       	brge	.+10     	; 0x1504 <KPD_u8GetKeyState+0xcc>
		__ticks = 1;
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
    1502:	3f c0       	rjmp	.+126    	; 0x1582 <KPD_u8GetKeyState+0x14a>
	else if (__tmp > 65535)
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	3f ef       	ldi	r19, 0xFF	; 255
    1510:	4f e7       	ldi	r20, 0x7F	; 127
    1512:	57 e4       	ldi	r21, 0x47	; 71
    1514:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1518:	18 16       	cp	r1, r24
    151a:	4c f5       	brge	.+82     	; 0x156e <KPD_u8GetKeyState+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    151c:	6b 85       	ldd	r22, Y+11	; 0x0b
    151e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1520:	8d 85       	ldd	r24, Y+13	; 0x0d
    1522:	9e 85       	ldd	r25, Y+14	; 0x0e
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	40 e2       	ldi	r20, 0x20	; 32
    152a:	51 e4       	ldi	r21, 0x41	; 65
    152c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1530:	dc 01       	movw	r26, r24
    1532:	cb 01       	movw	r24, r22
    1534:	bc 01       	movw	r22, r24
    1536:	cd 01       	movw	r24, r26
    1538:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	9e 83       	std	Y+6, r25	; 0x06
    1542:	8d 83       	std	Y+5, r24	; 0x05
    1544:	0f c0       	rjmp	.+30     	; 0x1564 <KPD_u8GetKeyState+0x12c>
    1546:	88 ec       	ldi	r24, 0xC8	; 200
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9c 83       	std	Y+4, r25	; 0x04
    154c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <KPD_u8GetKeyState+0x11a>
    1556:	9c 83       	std	Y+4, r25	; 0x04
    1558:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    155a:	8d 81       	ldd	r24, Y+5	; 0x05
    155c:	9e 81       	ldd	r25, Y+6	; 0x06
    155e:	01 97       	sbiw	r24, 0x01	; 1
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	00 97       	sbiw	r24, 0x00	; 0
    156a:	69 f7       	brne	.-38     	; 0x1546 <KPD_u8GetKeyState+0x10e>
    156c:	14 c0       	rjmp	.+40     	; 0x1596 <KPD_u8GetKeyState+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    156e:	6f 81       	ldd	r22, Y+7	; 0x07
    1570:	78 85       	ldd	r23, Y+8	; 0x08
    1572:	89 85       	ldd	r24, Y+9	; 0x09
    1574:	9a 85       	ldd	r25, Y+10	; 0x0a
    1576:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	9e 83       	std	Y+6, r25	; 0x06
    1580:	8d 83       	std	Y+5, r24	; 0x05
    1582:	8d 81       	ldd	r24, Y+5	; 0x05
    1584:	9e 81       	ldd	r25, Y+6	; 0x06
    1586:	9a 83       	std	Y+2, r25	; 0x02
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	89 81       	ldd	r24, Y+1	; 0x01
    158c:	9a 81       	ldd	r25, Y+2	; 0x02
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <KPD_u8GetKeyState+0x156>
    1592:	9a 83       	std	Y+2, r25	; 0x02
    1594:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1596:	89 89       	ldd	r24, Y+17	; 0x11
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	fc 01       	movw	r30, r24
    159e:	e4 57       	subi	r30, 0x74	; 116
    15a0:	ff 4f       	sbci	r31, 0xFF	; 255
    15a2:	90 81       	ld	r25, Z
    15a4:	9e 01       	movw	r18, r28
    15a6:	2c 5e       	subi	r18, 0xEC	; 236
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	82 e0       	ldi	r24, 0x02	; 2
    15ac:	69 2f       	mov	r22, r25
    15ae:	a9 01       	movw	r20, r18
    15b0:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_u8GetPinValue>
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <KPD_u8GetKeyState+0x19c>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    15b6:	89 89       	ldd	r24, Y+17	; 0x11
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	fc 01       	movw	r30, r24
    15be:	e4 57       	subi	r30, 0x74	; 116
    15c0:	ff 4f       	sbci	r31, 0xFF	; 255
    15c2:	90 81       	ld	r25, Z
    15c4:	9e 01       	movw	r18, r28
    15c6:	2c 5e       	subi	r18, 0xEC	; 236
    15c8:	3f 4f       	sbci	r19, 0xFF	; 255
    15ca:	82 e0       	ldi	r24, 0x02	; 2
    15cc:	69 2f       	mov	r22, r25
    15ce:	a9 01       	movw	r20, r18
    15d0:	0e 94 1a 08 	call	0x1034	; 0x1034 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    15d4:	8c 89       	ldd	r24, Y+20	; 0x14
    15d6:	88 23       	and	r24, r24
    15d8:	71 f3       	breq	.-36     	; 0x15b6 <KPD_u8GetKeyState+0x17e>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    15da:	8a 89       	ldd	r24, Y+18	; 0x12
    15dc:	48 2f       	mov	r20, r24
    15de:	50 e0       	ldi	r21, 0x00	; 0
    15e0:	89 89       	ldd	r24, Y+17	; 0x11
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	ca 01       	movw	r24, r20
    15e8:	88 0f       	add	r24, r24
    15ea:	99 1f       	adc	r25, r25
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	82 0f       	add	r24, r18
    15f2:	93 1f       	adc	r25, r19
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	fc 01       	movw	r30, r24
    15fa:	e8 59       	subi	r30, 0x98	; 152
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 81       	ld	r24, Z
    1600:	91 81       	ldd	r25, Z+1	; 0x01
    1602:	ed 89       	ldd	r30, Y+21	; 0x15
    1604:	fe 89       	ldd	r31, Y+22	; 0x16
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	88 8b       	std	Y+16, r24	; 0x10
    160e:	07 c0       	rjmp	.+14     	; 0x161e <KPD_u8GetKeyState+0x1e6>
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    1610:	89 89       	ldd	r24, Y+17	; 0x11
    1612:	8f 5f       	subi	r24, 0xFF	; 255
    1614:	89 8b       	std	Y+17, r24	; 0x11
    1616:	89 89       	ldd	r24, Y+17	; 0x11
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	08 f4       	brcc	.+2      	; 0x161e <KPD_u8GetKeyState+0x1e6>
    161c:	37 cf       	rjmp	.-402    	; 0x148c <KPD_u8GetKeyState+0x54>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row*/
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    161e:	8a 89       	ldd	r24, Y+18	; 0x12
    1620:	88 2f       	mov	r24, r24
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	fc 01       	movw	r30, r24
    1626:	e8 57       	subi	r30, 0x78	; 120
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	90 81       	ld	r25, Z
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	69 2f       	mov	r22, r25
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 f0 06 	call	0xde0	; 0xde0 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    1636:	88 89       	ldd	r24, Y+16	; 0x10
    1638:	81 30       	cpi	r24, 0x01	; 1
    163a:	49 f0       	breq	.+18     	; 0x164e <KPD_u8GetKeyState+0x216>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    163c:	8a 89       	ldd	r24, Y+18	; 0x12
    163e:	8f 5f       	subi	r24, 0xFF	; 255
    1640:	8a 8b       	std	Y+18, r24	; 0x12
    1642:	8a 89       	ldd	r24, Y+18	; 0x12
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	08 f4       	brcc	.+2      	; 0x164a <KPD_u8GetKeyState+0x212>
    1648:	13 cf       	rjmp	.-474    	; 0x1470 <KPD_u8GetKeyState+0x38>
    164a:	01 c0       	rjmp	.+2      	; 0x164e <KPD_u8GetKeyState+0x216>


	}
	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    164c:	1f 86       	std	Y+15, r1	; 0x0f
	}
	return Local_u8ErrorState;
    164e:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1650:	66 96       	adiw	r28, 0x16	; 22
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	de bf       	out	0x3e, r29	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	cd bf       	out	0x3d, r28	; 61
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	08 95       	ret

00001662 <TIMERS_voidTimer0Init>:
static void (*TIMERS_pfTimer1CTC_COMPA)(void) = NULL;
static void (*TIMERS_pfTimer1CAPT)(void) = NULL;
static void (*TIMERS_pfTimer1CTC_COMPB)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Normal Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Select Mode => CTC Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
    166a:	a3 e5       	ldi	r26, 0x53	; 83
    166c:	b0 e0       	ldi	r27, 0x00	; 0
    166e:	e3 e5       	ldi	r30, 0x53	; 83
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	80 81       	ld	r24, Z
    1674:	8f 7b       	andi	r24, 0xBF	; 191
    1676:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    1678:	a3 e5       	ldi	r26, 0x53	; 83
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e3 e5       	ldi	r30, 0x53	; 83
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	88 60       	ori	r24, 0x08	; 8
    1684:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,0);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Enable CTC Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,1);
    1686:	a9 e5       	ldi	r26, 0x59	; 89
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	e9 e5       	ldi	r30, 0x59	; 89
    168c:	f0 e0       	ldi	r31, 0x00	; 0
    168e:	80 81       	ld	r24, Z
    1690:	82 60       	ori	r24, 0x02	; 2
    1692:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Set Preload Value */
	TIMERS_u8_TCNT0_REG = TIMERS_u8_TIMER0_PRELOAD_VALUE;
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMERS_u8_TIMER0_COMPARE_MATCH_OCR0;
    1694:	ec e5       	ldi	r30, 0x5C	; 92
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	83 e6       	ldi	r24, 0x63	; 99
    169a:	80 83       	st	Z, r24
#endif

#if TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR0_REG,5);
    169c:	a3 e5       	ldi	r26, 0x53	; 83
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e3 e5       	ldi	r30, 0x53	; 83
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	8f 7d       	andi	r24, 0xDF	; 223
    16a8:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
    16aa:	a3 e5       	ldi	r26, 0x53	; 83
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e3 e5       	ldi	r30, 0x53	; 83
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	8f 7e       	andi	r24, 0xEF	; 239
    16b6:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#elif TIMERS_u8_TIMER0_CLOCK_SOURCE == TIMERS_u8_TIMER0_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    16b8:	a3 e5       	ldi	r26, 0x53	; 83
    16ba:	b0 e0       	ldi	r27, 0x00	; 0
    16bc:	e3 e5       	ldi	r30, 0x53	; 83
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8b 7f       	andi	r24, 0xFB	; 251
    16c4:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
    16c6:	a3 e5       	ldi	r26, 0x53	; 83
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e3 e5       	ldi	r30, 0x53	; 83
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	82 60       	ori	r24, 0x02	; 2
    16d2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
    16d4:	a3 e5       	ldi	r26, 0x53	; 83
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e3 e5       	ldi	r30, 0x53	; 83
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	8e 7f       	andi	r24, 0xFE	; 254
    16e0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,2);
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#endif

}
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
	CLR_BIT(TIMERS_u8_TCCR1A_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_FAST_PWM_ICR1_MODE
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    16f0:	af e4       	ldi	r26, 0x4F	; 79
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	ef e4       	ldi	r30, 0x4F	; 79
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8e 7f       	andi	r24, 0xFE	; 254
    16fc:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    16fe:	af e4       	ldi	r26, 0x4F	; 79
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ef e4       	ldi	r30, 0x4F	; 79
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	82 60       	ori	r24, 0x02	; 2
    170a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    170c:	ae e4       	ldi	r26, 0x4E	; 78
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ee e4       	ldi	r30, 0x4E	; 78
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	88 60       	ori	r24, 0x08	; 8
    1718:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    171a:	ae e4       	ldi	r26, 0x4E	; 78
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ee e4       	ldi	r30, 0x4E	; 78
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	80 61       	ori	r24, 0x10	; 16
    1726:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_CTC_OCR1B_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_FAST_PWM_ICR1_MODE
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = TIMERS_u16_TIMER1_TOP_VALUE_ICR1;
    1728:	e6 e4       	ldi	r30, 0x46	; 70
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	8f e3       	ldi	r24, 0x3F	; 63
    172e:	9c e9       	ldi	r25, 0x9C	; 156
    1730:	91 83       	std	Z+1, r25	; 0x01
    1732:	80 83       	st	Z, r24
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_CHANNEL == TIMERS_u8_TIMER1_CHANNEL_A
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
    1734:	ea e4       	ldi	r30, 0x4A	; 74
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	11 82       	std	Z+1, r1	; 0x01
    173a:	10 82       	st	Z, r1
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#elif TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_SET
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#elif TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_NON_INVERTING
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    173c:	af e4       	ldi	r26, 0x4F	; 79
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ef e4       	ldi	r30, 0x4F	; 79
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	8f 7b       	andi	r24, 0xBF	; 191
    1748:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    174a:	af e4       	ldi	r26, 0x4F	; 79
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ef e4       	ldi	r30, 0x4F	; 79
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	80 68       	ori	r24, 0x80	; 128
    1756:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#endif
/* Compare Match Output Mode unit B */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_B == TIMERS_u8_TIMER1_OC1B_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,4);
    1758:	af e4       	ldi	r26, 0x4F	; 79
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	ef e4       	ldi	r30, 0x4F	; 79
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	8f 7e       	andi	r24, 0xEF	; 239
    1764:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,5);
    1766:	af e4       	ldi	r26, 0x4F	; 79
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	ef e4       	ldi	r30, 0x4F	; 79
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	8f 7d       	andi	r24, 0xDF	; 223
    1772:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
	CLR_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    1774:	ae e4       	ldi	r26, 0x4E	; 78
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	ee e4       	ldi	r30, 0x4E	; 78
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	8b 7f       	andi	r24, 0xFB	; 251
    1780:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    1782:	ae e4       	ldi	r26, 0x4E	; 78
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	ee e4       	ldi	r30, 0x4E	; 78
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	82 60       	ori	r24, 0x02	; 2
    178e:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    1790:	ae e4       	ldi	r26, 0x4E	; 78
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ee e4       	ldi	r30, 0x4E	; 78
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8e 7f       	andi	r24, 0xFE	; 254
    179c:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_T1_PIN_RISING_EDGE
	SET_BIT(TIMERS_u8_TCCR1B_REG,2);
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#endif
}
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <TIMERS_voidTimer1SetCompareMatchValueUnitA>:
void TIMERS_voidTimer1SetCompareMatchValueUnitA(u16 Copy_u16OCR1AValue)
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <TIMERS_voidTimer1SetCompareMatchValueUnitA+0x6>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u16OCR1AValue;
    17b2:	ea e4       	ldi	r30, 0x4A	; 74
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	91 83       	std	Z+1, r25	; 0x01
    17bc:	80 83       	st	Z, r24
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <TIMERS_voidTimer1SetCompareMatchValueUnitB>:

void TIMERS_voidTimer1SetCompareMatchValueUnitB(u16 Copy_u16OCR1BValue)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <TIMERS_voidTimer1SetCompareMatchValueUnitB+0x6>
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1B_REG = Copy_u16OCR1BValue;
    17d6:	e8 e4       	ldi	r30, 0x48	; 72
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	9a 81       	ldd	r25, Y+2	; 0x02
    17de:	91 83       	std	Z+1, r25	; 0x01
    17e0:	80 83       	st	Z, r24
}
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	08 95       	ret

000017ec <TIMERS_u8GetTCNT0Value>:
u8 TIMERS_u8GetTCNT0Value(u8 * Copy_pu8Value)
{
    17ec:	df 93       	push	r29
    17ee:	cf 93       	push	r28
    17f0:	00 d0       	rcall	.+0      	; 0x17f2 <TIMERS_u8GetTCNT0Value+0x6>
    17f2:	0f 92       	push	r0
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	9b 83       	std	Y+3, r25	; 0x03
    17fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL)
    1800:	8a 81       	ldd	r24, Y+2	; 0x02
    1802:	9b 81       	ldd	r25, Y+3	; 0x03
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	39 f0       	breq	.+14     	; 0x1816 <TIMERS_u8GetTCNT0Value+0x2a>
	{
		*Copy_pu8Value = TIMERS_u8_TCNT0_REG;
    1808:	e2 e5       	ldi	r30, 0x52	; 82
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	ea 81       	ldd	r30, Y+2	; 0x02
    1810:	fb 81       	ldd	r31, Y+3	; 0x03
    1812:	80 83       	st	Z, r24
    1814:	01 c0       	rjmp	.+2      	; 0x1818 <TIMERS_u8GetTCNT0Value+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1816:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <TIMERS_voidTimer1SetICR1Value>:
void TIMERS_voidTimer1SetICR1Value(u16 Copy_u16ICR1Value)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <TIMERS_voidTimer1SetICR1Value+0x6>
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16ICR1Value;
    1834:	e6 e4       	ldi	r30, 0x46	; 70
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	91 83       	std	Z+1, r25	; 0x01
    183e:	80 83       	st	Z, r24
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	0f 92       	push	r0
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    1856:	ec e5       	ldi	r30, 0x5C	; 92
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	80 83       	st	Z, r24
}
    185e:	0f 90       	pop	r0
    1860:	cf 91       	pop	r28
    1862:	df 91       	pop	r29
    1864:	08 95       	ret

00001866 <TIMERS_u8Timer0SetCallBack>:

u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
    1866:	df 93       	push	r29
    1868:	cf 93       	push	r28
    186a:	00 d0       	rcall	.+0      	; 0x186c <TIMERS_u8Timer0SetCallBack+0x6>
    186c:	0f 92       	push	r0
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	9b 83       	std	Y+3, r25	; 0x03
    1874:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	39 f0       	breq	.+14     	; 0x1890 <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	9b 81       	ldd	r25, Y+3	; 0x03
    1886:	90 93 91 00 	sts	0x0091, r25
    188a:	80 93 90 00 	sts	0x0090, r24
    188e:	01 c0       	rjmp	.+2      	; 0x1892 <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1890:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1892:	89 81       	ldd	r24, Y+1	; 0x01
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	cf 91       	pop	r28
    189c:	df 91       	pop	r29
    189e:	08 95       	ret

000018a0 <TIMERS_u8Timer0CTCSetCallBack>:

u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    18a0:	df 93       	push	r29
    18a2:	cf 93       	push	r28
    18a4:	00 d0       	rcall	.+0      	; 0x18a6 <TIMERS_u8Timer0CTCSetCallBack+0x6>
    18a6:	0f 92       	push	r0
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	9b 83       	std	Y+3, r25	; 0x03
    18ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	9b 81       	ldd	r25, Y+3	; 0x03
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	39 f0       	breq	.+14     	; 0x18ca <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	9b 81       	ldd	r25, Y+3	; 0x03
    18c0:	90 93 93 00 	sts	0x0093, r25
    18c4:	80 93 92 00 	sts	0x0092, r24
    18c8:	01 c0       	rjmp	.+2      	; 0x18cc <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    18ca:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <TIMERS_u8Timer1SetCallBack>:


u8 TIMERS_u8Timer1SetCallBack(void(*Copy_pf)(void))
{
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <TIMERS_u8Timer1SetCallBack+0x6>
    18e0:	0f 92       	push	r0
    18e2:	cd b7       	in	r28, 0x3d	; 61
    18e4:	de b7       	in	r29, 0x3e	; 62
    18e6:	9b 83       	std	Y+3, r25	; 0x03
    18e8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	9b 81       	ldd	r25, Y+3	; 0x03
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	39 f0       	breq	.+14     	; 0x1904 <TIMERS_u8Timer1SetCallBack+0x2a>
	{
		TIMERS_pfTimer1OVF = Copy_pf;
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	9b 81       	ldd	r25, Y+3	; 0x03
    18fa:	90 93 95 00 	sts	0x0095, r25
    18fe:	80 93 94 00 	sts	0x0094, r24
    1902:	01 c0       	rjmp	.+2      	; 0x1906 <TIMERS_u8Timer1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1904:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <TIMERS_u8Timer1COMPASetCallBack>:

u8 TIMERS_u8Timer1COMPASetCallBack(void(*Copy_pf)(void))
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <TIMERS_u8Timer1COMPASetCallBack+0x6>
    191a:	0f 92       	push	r0
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	9b 83       	std	Y+3, r25	; 0x03
    1922:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    1928:	8a 81       	ldd	r24, Y+2	; 0x02
    192a:	9b 81       	ldd	r25, Y+3	; 0x03
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	39 f0       	breq	.+14     	; 0x193e <TIMERS_u8Timer1COMPASetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPA = Copy_pf;
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	9b 81       	ldd	r25, Y+3	; 0x03
    1934:	90 93 97 00 	sts	0x0097, r25
    1938:	80 93 96 00 	sts	0x0096, r24
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <TIMERS_u8Timer1COMPASetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    193e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1940:	89 81       	ldd	r24, Y+1	; 0x01
}
    1942:	0f 90       	pop	r0
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
    1948:	cf 91       	pop	r28
    194a:	df 91       	pop	r29
    194c:	08 95       	ret

0000194e <TIMERS_u8Timer1COMPBSetCallBack>:

u8 TIMERS_u8Timer1COMPBSetCallBack(void(*Copy_pf)(void))
{
    194e:	df 93       	push	r29
    1950:	cf 93       	push	r28
    1952:	00 d0       	rcall	.+0      	; 0x1954 <TIMERS_u8Timer1COMPBSetCallBack+0x6>
    1954:	0f 92       	push	r0
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	9b 83       	std	Y+3, r25	; 0x03
    195c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	9b 81       	ldd	r25, Y+3	; 0x03
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	39 f0       	breq	.+14     	; 0x1978 <TIMERS_u8Timer1COMPBSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPB = Copy_pf;
    196a:	8a 81       	ldd	r24, Y+2	; 0x02
    196c:	9b 81       	ldd	r25, Y+3	; 0x03
    196e:	90 93 9b 00 	sts	0x009B, r25
    1972:	80 93 9a 00 	sts	0x009A, r24
    1976:	01 c0       	rjmp	.+2      	; 0x197a <TIMERS_u8Timer1COMPBSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1978:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    197a:	89 81       	ldd	r24, Y+1	; 0x01
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	cf 91       	pop	r28
    1984:	df 91       	pop	r29
    1986:	08 95       	ret

00001988 <TIMERS_u8Timer1CAPTSetCallBack>:

u8 TIMERS_u8Timer1CAPTSetCallBack(void(*Copy_pf)(void))
{
    1988:	df 93       	push	r29
    198a:	cf 93       	push	r28
    198c:	00 d0       	rcall	.+0      	; 0x198e <TIMERS_u8Timer1CAPTSetCallBack+0x6>
    198e:	0f 92       	push	r0
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    1994:	9b 83       	std	Y+3, r25	; 0x03
    1996:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	9b 81       	ldd	r25, Y+3	; 0x03
    19a0:	00 97       	sbiw	r24, 0x00	; 0
    19a2:	39 f0       	breq	.+14     	; 0x19b2 <TIMERS_u8Timer1CAPTSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CAPT = Copy_pf;
    19a4:	8a 81       	ldd	r24, Y+2	; 0x02
    19a6:	9b 81       	ldd	r25, Y+3	; 0x03
    19a8:	90 93 99 00 	sts	0x0099, r25
    19ac:	80 93 98 00 	sts	0x0098, r24
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <TIMERS_u8Timer1CAPTSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    19b2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    19b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <__vector_9>:

/* Prototype for ISR TIMER1 OVF */
void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    19c2:	1f 92       	push	r1
    19c4:	0f 92       	push	r0
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	0f 92       	push	r0
    19ca:	11 24       	eor	r1, r1
    19cc:	2f 93       	push	r18
    19ce:	3f 93       	push	r19
    19d0:	4f 93       	push	r20
    19d2:	5f 93       	push	r21
    19d4:	6f 93       	push	r22
    19d6:	7f 93       	push	r23
    19d8:	8f 93       	push	r24
    19da:	9f 93       	push	r25
    19dc:	af 93       	push	r26
    19de:	bf 93       	push	r27
    19e0:	ef 93       	push	r30
    19e2:	ff 93       	push	r31
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    19ec:	80 91 9c 00 	lds	r24, 0x009C
    19f0:	90 91 9d 00 	lds	r25, 0x009D
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	90 93 9d 00 	sts	0x009D, r25
    19fa:	80 93 9c 00 	sts	0x009C, r24
	if(Local_u16CounterOVF == 3907)
    19fe:	80 91 9c 00 	lds	r24, 0x009C
    1a02:	90 91 9d 00 	lds	r25, 0x009D
    1a06:	2f e0       	ldi	r18, 0x0F	; 15
    1a08:	83 34       	cpi	r24, 0x43	; 67
    1a0a:	92 07       	cpc	r25, r18
    1a0c:	a9 f4       	brne	.+42     	; 0x1a38 <__vector_9+0x76>
	{
		/* Update Preload Value */
		TIMERS_u16_TCNT1_REG = 192;
    1a0e:	ec e4       	ldi	r30, 0x4C	; 76
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 ec       	ldi	r24, 0xC0	; 192
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	91 83       	std	Z+1, r25	; 0x01
    1a18:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    1a1a:	10 92 9d 00 	sts	0x009D, r1
    1a1e:	10 92 9c 00 	sts	0x009C, r1
		/* Call App Function */
		if(TIMERS_pfTimer1OVF != NULL)
    1a22:	80 91 94 00 	lds	r24, 0x0094
    1a26:	90 91 95 00 	lds	r25, 0x0095
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	29 f0       	breq	.+10     	; 0x1a38 <__vector_9+0x76>
		{
			TIMERS_pfTimer1OVF();
    1a2e:	e0 91 94 00 	lds	r30, 0x0094
    1a32:	f0 91 95 00 	lds	r31, 0x0095
    1a36:	09 95       	icall
		}
	}
}
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	ff 91       	pop	r31
    1a3e:	ef 91       	pop	r30
    1a40:	bf 91       	pop	r27
    1a42:	af 91       	pop	r26
    1a44:	9f 91       	pop	r25
    1a46:	8f 91       	pop	r24
    1a48:	7f 91       	pop	r23
    1a4a:	6f 91       	pop	r22
    1a4c:	5f 91       	pop	r21
    1a4e:	4f 91       	pop	r20
    1a50:	3f 91       	pop	r19
    1a52:	2f 91       	pop	r18
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	0f 90       	pop	r0
    1a5a:	1f 90       	pop	r1
    1a5c:	18 95       	reti

00001a5e <__vector_8>:


/* Prototype for ISR TIMER1 COMPB */
void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    1a5e:	1f 92       	push	r1
    1a60:	0f 92       	push	r0
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	0f 92       	push	r0
    1a66:	11 24       	eor	r1, r1
    1a68:	2f 93       	push	r18
    1a6a:	3f 93       	push	r19
    1a6c:	4f 93       	push	r20
    1a6e:	5f 93       	push	r21
    1a70:	6f 93       	push	r22
    1a72:	7f 93       	push	r23
    1a74:	8f 93       	push	r24
    1a76:	9f 93       	push	r25
    1a78:	af 93       	push	r26
    1a7a:	bf 93       	push	r27
    1a7c:	ef 93       	push	r30
    1a7e:	ff 93       	push	r31
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    1a88:	80 91 9e 00 	lds	r24, 0x009E
    1a8c:	90 91 9f 00 	lds	r25, 0x009F
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	90 93 9f 00 	sts	0x009F, r25
    1a96:	80 93 9e 00 	sts	0x009E, r24
	if(Local_u16CounterCTC == 10000)
    1a9a:	80 91 9e 00 	lds	r24, 0x009E
    1a9e:	90 91 9f 00 	lds	r25, 0x009F
    1aa2:	27 e2       	ldi	r18, 0x27	; 39
    1aa4:	80 31       	cpi	r24, 0x10	; 16
    1aa6:	92 07       	cpc	r25, r18
    1aa8:	79 f4       	brne	.+30     	; 0x1ac8 <__vector_8+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    1aaa:	10 92 9f 00 	sts	0x009F, r1
    1aae:	10 92 9e 00 	sts	0x009E, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPB != NULL)
    1ab2:	80 91 9a 00 	lds	r24, 0x009A
    1ab6:	90 91 9b 00 	lds	r25, 0x009B
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	29 f0       	breq	.+10     	; 0x1ac8 <__vector_8+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPB();
    1abe:	e0 91 9a 00 	lds	r30, 0x009A
    1ac2:	f0 91 9b 00 	lds	r31, 0x009B
    1ac6:	09 95       	icall
		}
	}
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	ff 91       	pop	r31
    1ace:	ef 91       	pop	r30
    1ad0:	bf 91       	pop	r27
    1ad2:	af 91       	pop	r26
    1ad4:	9f 91       	pop	r25
    1ad6:	8f 91       	pop	r24
    1ad8:	7f 91       	pop	r23
    1ada:	6f 91       	pop	r22
    1adc:	5f 91       	pop	r21
    1ade:	4f 91       	pop	r20
    1ae0:	3f 91       	pop	r19
    1ae2:	2f 91       	pop	r18
    1ae4:	0f 90       	pop	r0
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	0f 90       	pop	r0
    1aea:	1f 90       	pop	r1
    1aec:	18 95       	reti

00001aee <__vector_7>:

/* Prototype for ISR TIMER1 COMPA */
void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	2f 93       	push	r18
    1afa:	3f 93       	push	r19
    1afc:	4f 93       	push	r20
    1afe:	5f 93       	push	r21
    1b00:	6f 93       	push	r22
    1b02:	7f 93       	push	r23
    1b04:	8f 93       	push	r24
    1b06:	9f 93       	push	r25
    1b08:	af 93       	push	r26
    1b0a:	bf 93       	push	r27
    1b0c:	ef 93       	push	r30
    1b0e:	ff 93       	push	r31
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	cd b7       	in	r28, 0x3d	; 61
    1b16:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    1b18:	80 91 a0 00 	lds	r24, 0x00A0
    1b1c:	90 91 a1 00 	lds	r25, 0x00A1
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	90 93 a1 00 	sts	0x00A1, r25
    1b26:	80 93 a0 00 	sts	0x00A0, r24
	if(Local_u16CounterCTC == 10000)
    1b2a:	80 91 a0 00 	lds	r24, 0x00A0
    1b2e:	90 91 a1 00 	lds	r25, 0x00A1
    1b32:	27 e2       	ldi	r18, 0x27	; 39
    1b34:	80 31       	cpi	r24, 0x10	; 16
    1b36:	92 07       	cpc	r25, r18
    1b38:	79 f4       	brne	.+30     	; 0x1b58 <__vector_7+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    1b3a:	10 92 a1 00 	sts	0x00A1, r1
    1b3e:	10 92 a0 00 	sts	0x00A0, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPA != NULL)
    1b42:	80 91 96 00 	lds	r24, 0x0096
    1b46:	90 91 97 00 	lds	r25, 0x0097
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	29 f0       	breq	.+10     	; 0x1b58 <__vector_7+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPA();
    1b4e:	e0 91 96 00 	lds	r30, 0x0096
    1b52:	f0 91 97 00 	lds	r31, 0x0097
    1b56:	09 95       	icall
		}
	}
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	ff 91       	pop	r31
    1b5e:	ef 91       	pop	r30
    1b60:	bf 91       	pop	r27
    1b62:	af 91       	pop	r26
    1b64:	9f 91       	pop	r25
    1b66:	8f 91       	pop	r24
    1b68:	7f 91       	pop	r23
    1b6a:	6f 91       	pop	r22
    1b6c:	5f 91       	pop	r21
    1b6e:	4f 91       	pop	r20
    1b70:	3f 91       	pop	r19
    1b72:	2f 91       	pop	r18
    1b74:	0f 90       	pop	r0
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	0f 90       	pop	r0
    1b7a:	1f 90       	pop	r1
    1b7c:	18 95       	reti

00001b7e <__vector_6>:

/* Prototype for ISR TIMER1 CAPT */
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    1b7e:	1f 92       	push	r1
    1b80:	0f 92       	push	r0
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	0f 92       	push	r0
    1b86:	11 24       	eor	r1, r1
    1b88:	2f 93       	push	r18
    1b8a:	3f 93       	push	r19
    1b8c:	4f 93       	push	r20
    1b8e:	5f 93       	push	r21
    1b90:	6f 93       	push	r22
    1b92:	7f 93       	push	r23
    1b94:	8f 93       	push	r24
    1b96:	9f 93       	push	r25
    1b98:	af 93       	push	r26
    1b9a:	bf 93       	push	r27
    1b9c:	ef 93       	push	r30
    1b9e:	ff 93       	push	r31
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCAPT = 0;
	Local_u16CounterCAPT++;
    1ba8:	80 91 a2 00 	lds	r24, 0x00A2
    1bac:	90 91 a3 00 	lds	r25, 0x00A3
    1bb0:	01 96       	adiw	r24, 0x01	; 1
    1bb2:	90 93 a3 00 	sts	0x00A3, r25
    1bb6:	80 93 a2 00 	sts	0x00A2, r24
	if(Local_u16CounterCAPT == 10000)
    1bba:	80 91 a2 00 	lds	r24, 0x00A2
    1bbe:	90 91 a3 00 	lds	r25, 0x00A3
    1bc2:	27 e2       	ldi	r18, 0x27	; 39
    1bc4:	80 31       	cpi	r24, 0x10	; 16
    1bc6:	92 07       	cpc	r25, r18
    1bc8:	79 f4       	brne	.+30     	; 0x1be8 <__vector_6+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCAPT = 0;
    1bca:	10 92 a3 00 	sts	0x00A3, r1
    1bce:	10 92 a2 00 	sts	0x00A2, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CAPT != NULL)
    1bd2:	80 91 98 00 	lds	r24, 0x0098
    1bd6:	90 91 99 00 	lds	r25, 0x0099
    1bda:	00 97       	sbiw	r24, 0x00	; 0
    1bdc:	29 f0       	breq	.+10     	; 0x1be8 <__vector_6+0x6a>
		{
			TIMERS_pfTimer1CAPT();
    1bde:	e0 91 98 00 	lds	r30, 0x0098
    1be2:	f0 91 99 00 	lds	r31, 0x0099
    1be6:	09 95       	icall
		}
	}
}
    1be8:	cf 91       	pop	r28
    1bea:	df 91       	pop	r29
    1bec:	ff 91       	pop	r31
    1bee:	ef 91       	pop	r30
    1bf0:	bf 91       	pop	r27
    1bf2:	af 91       	pop	r26
    1bf4:	9f 91       	pop	r25
    1bf6:	8f 91       	pop	r24
    1bf8:	7f 91       	pop	r23
    1bfa:	6f 91       	pop	r22
    1bfc:	5f 91       	pop	r21
    1bfe:	4f 91       	pop	r20
    1c00:	3f 91       	pop	r19
    1c02:	2f 91       	pop	r18
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	0f 90       	pop	r0
    1c0a:	1f 90       	pop	r1
    1c0c:	18 95       	reti

00001c0e <__vector_11>:

/* Prototype for ISR TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1c0e:	1f 92       	push	r1
    1c10:	0f 92       	push	r0
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	0f 92       	push	r0
    1c16:	11 24       	eor	r1, r1
    1c18:	2f 93       	push	r18
    1c1a:	3f 93       	push	r19
    1c1c:	4f 93       	push	r20
    1c1e:	5f 93       	push	r21
    1c20:	6f 93       	push	r22
    1c22:	7f 93       	push	r23
    1c24:	8f 93       	push	r24
    1c26:	9f 93       	push	r25
    1c28:	af 93       	push	r26
    1c2a:	bf 93       	push	r27
    1c2c:	ef 93       	push	r30
    1c2e:	ff 93       	push	r31
    1c30:	df 93       	push	r29
    1c32:	cf 93       	push	r28
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    1c38:	80 91 a4 00 	lds	r24, 0x00A4
    1c3c:	90 91 a5 00 	lds	r25, 0x00A5
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	90 93 a5 00 	sts	0x00A5, r25
    1c46:	80 93 a4 00 	sts	0x00A4, r24
	if(Local_u16CounterOVF == 3907)
    1c4a:	80 91 a4 00 	lds	r24, 0x00A4
    1c4e:	90 91 a5 00 	lds	r25, 0x00A5
    1c52:	2f e0       	ldi	r18, 0x0F	; 15
    1c54:	83 34       	cpi	r24, 0x43	; 67
    1c56:	92 07       	cpc	r25, r18
    1c58:	99 f4       	brne	.+38     	; 0x1c80 <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    1c5a:	e2 e5       	ldi	r30, 0x52	; 82
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 ec       	ldi	r24, 0xC0	; 192
    1c60:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    1c62:	10 92 a5 00 	sts	0x00A5, r1
    1c66:	10 92 a4 00 	sts	0x00A4, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
    1c6a:	80 91 90 00 	lds	r24, 0x0090
    1c6e:	90 91 91 00 	lds	r25, 0x0091
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	29 f0       	breq	.+10     	; 0x1c80 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    1c76:	e0 91 90 00 	lds	r30, 0x0090
    1c7a:	f0 91 91 00 	lds	r31, 0x0091
    1c7e:	09 95       	icall
		}
	}
}
    1c80:	cf 91       	pop	r28
    1c82:	df 91       	pop	r29
    1c84:	ff 91       	pop	r31
    1c86:	ef 91       	pop	r30
    1c88:	bf 91       	pop	r27
    1c8a:	af 91       	pop	r26
    1c8c:	9f 91       	pop	r25
    1c8e:	8f 91       	pop	r24
    1c90:	7f 91       	pop	r23
    1c92:	6f 91       	pop	r22
    1c94:	5f 91       	pop	r21
    1c96:	4f 91       	pop	r20
    1c98:	3f 91       	pop	r19
    1c9a:	2f 91       	pop	r18
    1c9c:	0f 90       	pop	r0
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	0f 90       	pop	r0
    1ca2:	1f 90       	pop	r1
    1ca4:	18 95       	reti

00001ca6 <__vector_10>:

/* Prototype for ISR TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    1ca6:	1f 92       	push	r1
    1ca8:	0f 92       	push	r0
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	0f 92       	push	r0
    1cae:	11 24       	eor	r1, r1
    1cb0:	2f 93       	push	r18
    1cb2:	3f 93       	push	r19
    1cb4:	4f 93       	push	r20
    1cb6:	5f 93       	push	r21
    1cb8:	6f 93       	push	r22
    1cba:	7f 93       	push	r23
    1cbc:	8f 93       	push	r24
    1cbe:	9f 93       	push	r25
    1cc0:	af 93       	push	r26
    1cc2:	bf 93       	push	r27
    1cc4:	ef 93       	push	r30
    1cc6:	ff 93       	push	r31
    1cc8:	df 93       	push	r29
    1cca:	cf 93       	push	r28
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    1cd0:	80 91 a6 00 	lds	r24, 0x00A6
    1cd4:	90 91 a7 00 	lds	r25, 0x00A7
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	90 93 a7 00 	sts	0x00A7, r25
    1cde:	80 93 a6 00 	sts	0x00A6, r24
	if(Local_u16CounterCTC == 10000)
    1ce2:	80 91 a6 00 	lds	r24, 0x00A6
    1ce6:	90 91 a7 00 	lds	r25, 0x00A7
    1cea:	27 e2       	ldi	r18, 0x27	; 39
    1cec:	80 31       	cpi	r24, 0x10	; 16
    1cee:	92 07       	cpc	r25, r18
    1cf0:	79 f4       	brne	.+30     	; 0x1d10 <__vector_10+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    1cf2:	10 92 a7 00 	sts	0x00A7, r1
    1cf6:	10 92 a6 00 	sts	0x00A6, r1
		/* Call App Function */
		if(TIMERS_pfTimer0CTC != NULL)
    1cfa:	80 91 92 00 	lds	r24, 0x0092
    1cfe:	90 91 93 00 	lds	r25, 0x0093
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	29 f0       	breq	.+10     	; 0x1d10 <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
    1d06:	e0 91 92 00 	lds	r30, 0x0092
    1d0a:	f0 91 93 00 	lds	r31, 0x0093
    1d0e:	09 95       	icall
		}
	}
}
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	ff 91       	pop	r31
    1d16:	ef 91       	pop	r30
    1d18:	bf 91       	pop	r27
    1d1a:	af 91       	pop	r26
    1d1c:	9f 91       	pop	r25
    1d1e:	8f 91       	pop	r24
    1d20:	7f 91       	pop	r23
    1d22:	6f 91       	pop	r22
    1d24:	5f 91       	pop	r21
    1d26:	4f 91       	pop	r20
    1d28:	3f 91       	pop	r19
    1d2a:	2f 91       	pop	r18
    1d2c:	0f 90       	pop	r0
    1d2e:	0f be       	out	0x3f, r0	; 63
    1d30:	0f 90       	pop	r0
    1d32:	1f 90       	pop	r1
    1d34:	18 95       	reti

00001d36 <main>:
#include "KPD_interface.h"


void PWM_SetFrequency(u16 frequency);
int main(void)
{
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <main+0x6>
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16Key;
	DIO_voidInit(); // Initialize DIO
    1d40:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	TIMERS_voidTimer1Init(); // Initialize Timer1
    1d44:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <TIMERS_voidTimer1Init>

	while(1)
	{
		KPD_u8GetKeyState(&Local_u16Key); // Get the key state from the keypad
    1d48:	ce 01       	movw	r24, r28
    1d4a:	01 96       	adiw	r24, 0x01	; 1
    1d4c:	0e 94 1c 0a 	call	0x1438	; 0x1438 <KPD_u8GetKeyState>
		if(Local_u16Key != KPD_u8_KEY_NOT_PRESSED)
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	9a 81       	ldd	r25, Y+2	; 0x02
    1d54:	8f 3f       	cpi	r24, 0xFF	; 255
    1d56:	91 05       	cpc	r25, r1
    1d58:	b9 f3       	breq	.-18     	; 0x1d48 <main+0x12>
		{
			PWM_SetFrequency(Local_u16Key); // Set the PWM frequency based on the key pressed
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <PWM_SetFrequency>
    1d62:	f2 cf       	rjmp	.-28     	; 0x1d48 <main+0x12>

00001d64 <PWM_SetFrequency>:
		}
	}
	return 0;
}
void PWM_SetFrequency(u16 frequency)
{
    1d64:	df 93       	push	r29
    1d66:	cf 93       	push	r28
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <PWM_SetFrequency+0x6>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <PWM_SetFrequency+0x8>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	8b 83       	std	Y+3, r24	; 0x03
	u16 top_value = (F_CPU / (2 * 8 * frequency)) - 1; // Calculate TOP value
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	82 95       	swap	r24
    1d7a:	92 95       	swap	r25
    1d7c:	90 7f       	andi	r25, 0xF0	; 240
    1d7e:	98 27       	eor	r25, r24
    1d80:	80 7f       	andi	r24, 0xF0	; 240
    1d82:	98 27       	eor	r25, r24
    1d84:	9c 01       	movw	r18, r24
    1d86:	40 e0       	ldi	r20, 0x00	; 0
    1d88:	50 e0       	ldi	r21, 0x00	; 0
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	92 e1       	ldi	r25, 0x12	; 18
    1d8e:	aa e7       	ldi	r26, 0x7A	; 122
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	bc 01       	movw	r22, r24
    1d94:	cd 01       	movw	r24, r26
    1d96:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <__udivmodsi4>
    1d9a:	da 01       	movw	r26, r20
    1d9c:	c9 01       	movw	r24, r18
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	9a 83       	std	Y+2, r25	; 0x02
    1da2:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTimer1SetICR1Value(top_value);
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	0e 94 13 0c 	call	0x1826	; 0x1826 <TIMERS_voidTimer1SetICR1Value>
	TIMERS_voidTimer1SetCompareMatchValueUnitA(top_value / 2); // Set duty cycle to 50%
    1dac:	89 81       	ldd	r24, Y+1	; 0x01
    1dae:	9a 81       	ldd	r25, Y+2	; 0x02
    1db0:	96 95       	lsr	r25
    1db2:	87 95       	ror	r24
    1db4:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <TIMERS_voidTimer1SetCompareMatchValueUnitA>
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <__udivmodsi4>:
    1dc6:	a1 e2       	ldi	r26, 0x21	; 33
    1dc8:	1a 2e       	mov	r1, r26
    1dca:	aa 1b       	sub	r26, r26
    1dcc:	bb 1b       	sub	r27, r27
    1dce:	fd 01       	movw	r30, r26
    1dd0:	0d c0       	rjmp	.+26     	; 0x1dec <__udivmodsi4_ep>

00001dd2 <__udivmodsi4_loop>:
    1dd2:	aa 1f       	adc	r26, r26
    1dd4:	bb 1f       	adc	r27, r27
    1dd6:	ee 1f       	adc	r30, r30
    1dd8:	ff 1f       	adc	r31, r31
    1dda:	a2 17       	cp	r26, r18
    1ddc:	b3 07       	cpc	r27, r19
    1dde:	e4 07       	cpc	r30, r20
    1de0:	f5 07       	cpc	r31, r21
    1de2:	20 f0       	brcs	.+8      	; 0x1dec <__udivmodsi4_ep>
    1de4:	a2 1b       	sub	r26, r18
    1de6:	b3 0b       	sbc	r27, r19
    1de8:	e4 0b       	sbc	r30, r20
    1dea:	f5 0b       	sbc	r31, r21

00001dec <__udivmodsi4_ep>:
    1dec:	66 1f       	adc	r22, r22
    1dee:	77 1f       	adc	r23, r23
    1df0:	88 1f       	adc	r24, r24
    1df2:	99 1f       	adc	r25, r25
    1df4:	1a 94       	dec	r1
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <__udivmodsi4_loop>
    1df8:	60 95       	com	r22
    1dfa:	70 95       	com	r23
    1dfc:	80 95       	com	r24
    1dfe:	90 95       	com	r25
    1e00:	9b 01       	movw	r18, r22
    1e02:	ac 01       	movw	r20, r24
    1e04:	bd 01       	movw	r22, r26
    1e06:	cf 01       	movw	r24, r30
    1e08:	08 95       	ret

00001e0a <__prologue_saves__>:
    1e0a:	2f 92       	push	r2
    1e0c:	3f 92       	push	r3
    1e0e:	4f 92       	push	r4
    1e10:	5f 92       	push	r5
    1e12:	6f 92       	push	r6
    1e14:	7f 92       	push	r7
    1e16:	8f 92       	push	r8
    1e18:	9f 92       	push	r9
    1e1a:	af 92       	push	r10
    1e1c:	bf 92       	push	r11
    1e1e:	cf 92       	push	r12
    1e20:	df 92       	push	r13
    1e22:	ef 92       	push	r14
    1e24:	ff 92       	push	r15
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	ca 1b       	sub	r28, r26
    1e34:	db 0b       	sbc	r29, r27
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	09 94       	ijmp

00001e42 <__epilogue_restores__>:
    1e42:	2a 88       	ldd	r2, Y+18	; 0x12
    1e44:	39 88       	ldd	r3, Y+17	; 0x11
    1e46:	48 88       	ldd	r4, Y+16	; 0x10
    1e48:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e50:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e52:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e54:	b9 84       	ldd	r11, Y+9	; 0x09
    1e56:	c8 84       	ldd	r12, Y+8	; 0x08
    1e58:	df 80       	ldd	r13, Y+7	; 0x07
    1e5a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e5c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e60:	1b 81       	ldd	r17, Y+3	; 0x03
    1e62:	aa 81       	ldd	r26, Y+2	; 0x02
    1e64:	b9 81       	ldd	r27, Y+1	; 0x01
    1e66:	ce 0f       	add	r28, r30
    1e68:	d1 1d       	adc	r29, r1
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	de bf       	out	0x3e, r29	; 62
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	cd bf       	out	0x3d, r28	; 61
    1e74:	ed 01       	movw	r28, r26
    1e76:	08 95       	ret

00001e78 <_exit>:
    1e78:	f8 94       	cli

00001e7a <__stop_program>:
    1e7a:	ff cf       	rjmp	.-2      	; 0x1e7a <__stop_program>
