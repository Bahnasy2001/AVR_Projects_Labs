
Temp_Sensor_Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000045f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000bc  00800060  000045f8  0000468c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080011c  0080011c  00004748  2**0
                  ALLOC
  3 .stab         00003a98  00000000  00000000  00004748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001123  00000000  00000000  000081e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00009303  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00009463  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  000095f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000b637  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000c738  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000d6bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000d83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000dafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e38c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ef       	ldi	r30, 0xF8	; 248
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 31       	cpi	r26, 0x1C	; 28
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e1       	ldi	r26, 0x1C	; 28
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 32       	cpi	r26, 0x26	; 38
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 fa 1e 	call	0x3df4	; 0x3df4 <main>
      8a:	0c 94 fa 22 	jmp	0x45f4	; 0x45f4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ef       	ldi	r26, 0xFC	; 252
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 df 22 	jmp	0x45be	; 0x45be <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ef       	ldi	r24, 0xFC	; 252
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 df 22 	jmp	0x45be	; 0x45be <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cb 22 	jmp	0x4596	; 0x4596 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ef       	ldi	r22, 0xFC	; 252
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e7 22 	jmp	0x45ce	; 0x45ce <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 cf 22 	jmp	0x459e	; 0x459e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 eb 22 	jmp	0x45d6	; 0x45d6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d3 22 	jmp	0x45a6	; 0x45a6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ef 22 	jmp	0x45de	; 0x45de <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_voidInit>:

/* ADC busy Flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_u8_ADMUX_REG,6);
#elif ADC_u8_VREF_OPTION == ADC_u8_VREF_AREF
	CLR_BIT(ADC_u8_ADMUX_REG,7);
	CLR_BIT(ADC_u8_ADMUX_REG,6);
#elif ADC_u8_VREF_OPTION == ADC_u8_VREF_VINTERNAL
	SET_BIT(ADC_u8_ADMUX_REG,7);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 68       	ori	r24, 0x80	; 128
     cb2:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	80 64       	ori	r24, 0x40	; 64
     cc0:	8c 93       	st	X, r24
#endif

	//2- Right Adjust
#if ADC_u8_ADJUST_OPTION == ADC_u8_RIGHT_ADJUST
	CLR_BIT(ADC_u8_ADMUX_REG,5);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,5);
#endif

	//3- Disable AutoTrigger
#if ADC_u8_AUTO_TRIGGER_MODE == ADC_u8_AUTO_TRIGGER_DISABLE
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7d       	andi	r24, 0xDF	; 223
     cdc:	8c 93       	st	X, r24
	#endif
#endif

	//4- Select CLK/64
#if ADC_u8_PRESCALER == ADC_u8_PRESCALER_64
	SET_BIT(ADC_u8_ADCSRA_REG,2);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	84 60       	ori	r24, 0x04	; 4
     cea:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	8e 7f       	andi	r24, 0xFE	; 254
     d06:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
	SET_BIT(ADC_u8_ADCSRA_REG,0);
#endif

	//5- Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG,7);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 *Copy_pu16DigitalValue)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	28 97       	sbiw	r28, 0x08	; 8
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	f8 94       	cli
     d2a:	de bf       	out	0x3e, r29	; 62
     d2c:	0f be       	out	0x3f, r0	; 63
     d2e:	cd bf       	out	0x3d, r28	; 61
     d30:	8e 83       	std	Y+6, r24	; 0x06
     d32:	78 87       	std	Y+8, r23	; 0x08
     d34:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
     d3a:	19 82       	std	Y+1, r1	; 0x01
     d3c:	1a 82       	std	Y+2, r1	; 0x02
     d3e:	1b 82       	std	Y+3, r1	; 0x03
     d40:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32)  && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
     d42:	8e 81       	ldd	r24, Y+6	; 0x06
     d44:	80 32       	cpi	r24, 0x20	; 32
     d46:	08 f0       	brcs	.+2      	; 0xd4a <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
     d48:	65 c0       	rjmp	.+202    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     d4a:	8f 81       	ldd	r24, Y+7	; 0x07
     d4c:	98 85       	ldd	r25, Y+8	; 0x08
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	09 f4       	brne	.+2      	; 0xd54 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
     d52:	60 c0       	rjmp	.+192    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
     d54:	80 91 1e 01 	lds	r24, 0x011E
     d58:	88 23       	and	r24, r24
     d5a:	09 f0       	breq	.+2      	; 0xd5e <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
     d5c:	5b c0       	rjmp	.+182    	; 0xe14 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	80 93 1e 01 	sts	0x011E, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     d64:	a7 e2       	ldi	r26, 0x27	; 39
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e7 e2       	ldi	r30, 0x27	; 39
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 7e       	andi	r24, 0xE0	; 224
     d70:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     d72:	a7 e2       	ldi	r26, 0x27	; 39
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e7 e2       	ldi	r30, 0x27	; 39
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	90 81       	ld	r25, Z
     d7c:	8e 81       	ldd	r24, Y+6	; 0x06
     d7e:	89 2b       	or	r24, r25
     d80:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     d82:	a6 e2       	ldi	r26, 0x26	; 38
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e6 e2       	ldi	r30, 0x26	; 38
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	80 64       	ori	r24, 0x40	; 64
     d8e:	8c 93       	st	X, r24
     d90:	0b c0       	rjmp	.+22     	; 0xda8 <ADC_u8GetDigitalValueSynchNonBlocking+0x8c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
     d92:	89 81       	ldd	r24, Y+1	; 0x01
     d94:	9a 81       	ldd	r25, Y+2	; 0x02
     d96:	ab 81       	ldd	r26, Y+3	; 0x03
     d98:	bc 81       	ldd	r27, Y+4	; 0x04
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	a1 1d       	adc	r26, r1
     d9e:	b1 1d       	adc	r27, r1
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	ab 83       	std	Y+3, r26	; 0x03
     da6:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
     da8:	e6 e2       	ldi	r30, 0x26	; 38
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	82 95       	swap	r24
     db0:	8f 70       	andi	r24, 0x0F	; 15
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	81 70       	andi	r24, 0x01	; 1
     db8:	90 70       	andi	r25, 0x00	; 0
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	61 f4       	brne	.+24     	; 0xdd6 <ADC_u8GetDigitalValueSynchNonBlocking+0xba>
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	ab 81       	ldd	r26, Y+3	; 0x03
     dc4:	bc 81       	ldd	r27, Y+4	; 0x04
     dc6:	80 35       	cpi	r24, 0x50	; 80
     dc8:	23 ec       	ldi	r18, 0xC3	; 195
     dca:	92 07       	cpc	r25, r18
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	a2 07       	cpc	r26, r18
     dd0:	20 e0       	ldi	r18, 0x00	; 0
     dd2:	b2 07       	cpc	r27, r18
     dd4:	f0 f2       	brcs	.-68     	; 0xd92 <ADC_u8GetDigitalValueSynchNonBlocking+0x76>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 95       	swap	r24
     dde:	8f 70       	andi	r24, 0x0F	; 15
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	88 23       	and	r24, r24
     dea:	91 f0       	breq	.+36     	; 0xe10 <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
		{
			/* Clear Flag */
			ADC_u8BusyFlag = 0;
     dec:	10 92 1e 01 	sts	0x011E, r1
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
     df0:	a6 e2       	ldi	r26, 0x26	; 38
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e6 e2       	ldi	r30, 0x26	; 38
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	80 61       	ori	r24, 0x10	; 16
     dfc:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
     dfe:	e4 e2       	ldi	r30, 0x24	; 36
     e00:	f0 e0       	ldi	r31, 0x00	; 0
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	ef 81       	ldd	r30, Y+7	; 0x07
     e08:	f8 85       	ldd	r31, Y+8	; 0x08
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24
     e0e:	03 c0       	rjmp	.+6      	; 0xe16 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
     e10:	1d 82       	std	Y+5, r1	; 0x05
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e14:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
}
     e18:	28 96       	adiw	r28, 0x08	; 8
     e1a:	0f b6       	in	r0, 0x3f	; 63
     e1c:	f8 94       	cli
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	0f be       	out	0x3f, r0	; 63
     e22:	cd bf       	out	0x3d, r28	; 61
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <ADC_u8GetDigitalValueAsynch>:


u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb, void (*Copy_pfNotification) (u16))
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	00 d0       	rcall	.+0      	; 0xe30 <ADC_u8GetDigitalValueAsynch+0x6>
     e30:	00 d0       	rcall	.+0      	; 0xe32 <ADC_u8GetDigitalValueAsynch+0x8>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	7c 83       	std	Y+4, r23	; 0x04
     e3a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32)  && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
     e40:	8a 81       	ldd	r24, Y+2	; 0x02
     e42:	80 32       	cpi	r24, 0x20	; 32
     e44:	78 f5       	brcc	.+94     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	9c 81       	ldd	r25, Y+4	; 0x04
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	59 f1       	breq	.+86     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
     e4e:	80 91 1e 01 	lds	r24, 0x011E
     e52:	88 23       	and	r24, r24
     e54:	39 f5       	brne	.+78     	; 0xea4 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	80 93 1e 01 	sts	0x011E, r24
		/* Update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
     e5c:	8b 81       	ldd	r24, Y+3	; 0x03
     e5e:	9c 81       	ldd	r25, Y+4	; 0x04
     e60:	90 93 1d 01 	sts	0x011D, r25
     e64:	80 93 1c 01 	sts	0x011C, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
     e68:	a6 e2       	ldi	r26, 0x26	; 38
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e6 e2       	ldi	r30, 0x26	; 38
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	88 60       	ori	r24, 0x08	; 8
     e74:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
     e76:	a7 e2       	ldi	r26, 0x27	; 39
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	e7 e2       	ldi	r30, 0x27	; 39
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	80 81       	ld	r24, Z
     e80:	80 7e       	andi	r24, 0xE0	; 224
     e82:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
     e84:	a7 e2       	ldi	r26, 0x27	; 39
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e2       	ldi	r30, 0x27	; 39
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	90 81       	ld	r25, Z
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	89 2b       	or	r24, r25
     e92:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
     e94:	a6 e2       	ldi	r26, 0x26	; 38
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e6 e2       	ldi	r30, 0x26	; 38
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	80 64       	ori	r24, 0x40	; 64
     ea0:	8c 93       	st	X, r24
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ea4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ea6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	cf 91       	pop	r28
     eb2:	df 91       	pop	r29
     eb4:	08 95       	ret

00000eb6 <ADC_u8GetADCRegValue>:
u8 ADC_u8GetADCRegValue (u16 * Copy_pu16ADCValue)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	00 d0       	rcall	.+0      	; 0xebc <ADC_u8GetADCRegValue+0x6>
     ebc:	0f 92       	push	r0
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	9b 83       	std	Y+3, r25	; 0x03
     ec4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	9b 81       	ldd	r25, Y+3	; 0x03
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	49 f0       	breq	.+18     	; 0xee4 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
     ed2:	e4 e2       	ldi	r30, 0x24	; 36
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	ea 81       	ldd	r30, Y+2	; 0x02
     edc:	fb 81       	ldd	r31, Y+3	; 0x03
     ede:	91 83       	std	Z+1, r25	; 0x01
     ee0:	80 83       	st	Z, r24
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	2f 93       	push	r18
     f00:	3f 93       	push	r19
     f02:	4f 93       	push	r20
     f04:	5f 93       	push	r21
     f06:	6f 93       	push	r22
     f08:	7f 93       	push	r23
     f0a:	8f 93       	push	r24
     f0c:	9f 93       	push	r25
     f0e:	af 93       	push	r26
     f10:	bf 93       	push	r27
     f12:	ef 93       	push	r30
     f14:	ff 93       	push	r31
     f16:	df 93       	push	r29
     f18:	cf 93       	push	r28
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
     f1e:	80 91 1c 01 	lds	r24, 0x011C
     f22:	90 91 1d 01 	lds	r25, 0x011D
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	99 f0       	breq	.+38     	; 0xf50 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
     f2a:	10 92 1e 01 	sts	0x011E, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
     f2e:	a6 e2       	ldi	r26, 0x26	; 38
     f30:	b0 e0       	ldi	r27, 0x00	; 0
     f32:	e6 e2       	ldi	r30, 0x26	; 38
     f34:	f0 e0       	ldi	r31, 0x00	; 0
     f36:	80 81       	ld	r24, Z
     f38:	87 7f       	andi	r24, 0xF7	; 247
     f3a:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
     f3c:	20 91 1c 01 	lds	r18, 0x011C
     f40:	30 91 1d 01 	lds	r19, 0x011D
     f44:	e4 e2       	ldi	r30, 0x24	; 36
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	f9 01       	movw	r30, r18
     f4e:	09 95       	icall
	}
     f50:	cf 91       	pop	r28
     f52:	df 91       	pop	r29
     f54:	ff 91       	pop	r31
     f56:	ef 91       	pop	r30
     f58:	bf 91       	pop	r27
     f5a:	af 91       	pop	r26
     f5c:	9f 91       	pop	r25
     f5e:	8f 91       	pop	r24
     f60:	7f 91       	pop	r23
     f62:	6f 91       	pop	r22
     f64:	5f 91       	pop	r21
     f66:	4f 91       	pop	r20
     f68:	3f 91       	pop	r19
     f6a:	2f 91       	pop	r18
     f6c:	0f 90       	pop	r0
     f6e:	0f be       	out	0x3f, r0	; 63
     f70:	0f 90       	pop	r0
     f72:	1f 90       	pop	r1
     f74:	18 95       	reti

00000f76 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     f7e:	ea e3       	ldi	r30, 0x3A	; 58
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	87 e0       	ldi	r24, 0x07	; 7
     f8a:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     f8c:	e4 e3       	ldi	r30, 0x34	; 52
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	8f e0       	ldi	r24, 0x0F	; 15
     f92:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     f94:	e1 e3       	ldi	r30, 0x31	; 49
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     f9c:	eb e3       	ldi	r30, 0x3B	; 59
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     fa2:	e8 e3       	ldi	r30, 0x38	; 56
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     fa8:	e5 e3       	ldi	r30, 0x35	; 53
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	8f ef       	ldi	r24, 0xFF	; 255
     fae:	80 83       	st	Z, r24

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     fb0:	e2 e3       	ldi	r30, 0x32	; 50
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	10 82       	st	Z, r1

}
     fb6:	cf 91       	pop	r28
     fb8:	df 91       	pop	r29
     fba:	08 95       	ret

00000fbc <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	2e 97       	sbiw	r28, 0x0e	; 14
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	8a 83       	std	Y+2, r24	; 0x02
     fd2:	6b 83       	std	Y+3, r22	; 0x03
     fd4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	84 30       	cpi	r24, 0x04	; 4
     fde:	08 f0       	brcs	.+2      	; 0xfe2 <DIO_u8SetPinDirection+0x26>
     fe0:	0d c1       	rjmp	.+538    	; 0x11fc <DIO_u8SetPinDirection+0x240>
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	88 30       	cpi	r24, 0x08	; 8
     fe6:	08 f0       	brcs	.+2      	; 0xfea <DIO_u8SetPinDirection+0x2e>
     fe8:	09 c1       	rjmp	.+530    	; 0x11fc <DIO_u8SetPinDirection+0x240>
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	88 23       	and	r24, r24
     fee:	21 f0       	breq	.+8      	; 0xff8 <DIO_u8SetPinDirection+0x3c>
     ff0:	8c 81       	ldd	r24, Y+4	; 0x04
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	09 f0       	breq	.+2      	; 0xff8 <DIO_u8SetPinDirection+0x3c>
     ff6:	02 c1       	rjmp	.+516    	; 0x11fc <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	3e 87       	std	Y+14, r19	; 0x0e
    1000:	2d 87       	std	Y+13, r18	; 0x0d
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	81 30       	cpi	r24, 0x01	; 1
    1008:	91 05       	cpc	r25, r1
    100a:	09 f4       	brne	.+2      	; 0x100e <DIO_u8SetPinDirection+0x52>
    100c:	4f c0       	rjmp	.+158    	; 0x10ac <DIO_u8SetPinDirection+0xf0>
    100e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1010:	3e 85       	ldd	r19, Y+14	; 0x0e
    1012:	22 30       	cpi	r18, 0x02	; 2
    1014:	31 05       	cpc	r19, r1
    1016:	2c f4       	brge	.+10     	; 0x1022 <DIO_u8SetPinDirection+0x66>
    1018:	8d 85       	ldd	r24, Y+13	; 0x0d
    101a:	9e 85       	ldd	r25, Y+14	; 0x0e
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	71 f0       	breq	.+28     	; 0x103c <DIO_u8SetPinDirection+0x80>
    1020:	ee c0       	rjmp	.+476    	; 0x11fe <DIO_u8SetPinDirection+0x242>
    1022:	2d 85       	ldd	r18, Y+13	; 0x0d
    1024:	3e 85       	ldd	r19, Y+14	; 0x0e
    1026:	22 30       	cpi	r18, 0x02	; 2
    1028:	31 05       	cpc	r19, r1
    102a:	09 f4       	brne	.+2      	; 0x102e <DIO_u8SetPinDirection+0x72>
    102c:	77 c0       	rjmp	.+238    	; 0x111c <DIO_u8SetPinDirection+0x160>
    102e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1030:	9e 85       	ldd	r25, Y+14	; 0x0e
    1032:	83 30       	cpi	r24, 0x03	; 3
    1034:	91 05       	cpc	r25, r1
    1036:	09 f4       	brne	.+2      	; 0x103a <DIO_u8SetPinDirection+0x7e>
    1038:	a9 c0       	rjmp	.+338    	; 0x118c <DIO_u8SetPinDirection+0x1d0>
    103a:	e1 c0       	rjmp	.+450    	; 0x11fe <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	3c 87       	std	Y+12, r19	; 0x0c
    1044:	2b 87       	std	Y+11, r18	; 0x0b
    1046:	8b 85       	ldd	r24, Y+11	; 0x0b
    1048:	9c 85       	ldd	r25, Y+12	; 0x0c
    104a:	00 97       	sbiw	r24, 0x00	; 0
    104c:	31 f0       	breq	.+12     	; 0x105a <DIO_u8SetPinDirection+0x9e>
    104e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1050:	3c 85       	ldd	r19, Y+12	; 0x0c
    1052:	21 30       	cpi	r18, 0x01	; 1
    1054:	31 05       	cpc	r19, r1
    1056:	b1 f0       	breq	.+44     	; 0x1084 <DIO_u8SetPinDirection+0xc8>
    1058:	d2 c0       	rjmp	.+420    	; 0x11fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    105a:	aa e3       	ldi	r26, 0x3A	; 58
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	ea e3       	ldi	r30, 0x3A	; 58
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_u8SetPinDirection+0xbc>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_u8SetPinDirection+0xb8>
    107c:	80 95       	com	r24
    107e:	84 23       	and	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	bd c0       	rjmp	.+378    	; 0x11fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
    1084:	aa e3       	ldi	r26, 0x3A	; 58
    1086:	b0 e0       	ldi	r27, 0x00	; 0
    1088:	ea e3       	ldi	r30, 0x3A	; 58
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 81       	ld	r24, Z
    108e:	48 2f       	mov	r20, r24
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	02 2e       	mov	r0, r18
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <DIO_u8SetPinDirection+0xe6>
    109e:	88 0f       	add	r24, r24
    10a0:	99 1f       	adc	r25, r25
    10a2:	0a 94       	dec	r0
    10a4:	e2 f7       	brpl	.-8      	; 0x109e <DIO_u8SetPinDirection+0xe2>
    10a6:	84 2b       	or	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	a9 c0       	rjmp	.+338    	; 0x11fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3a 87       	std	Y+10, r19	; 0x0a
    10b4:	29 87       	std	Y+9, r18	; 0x09
    10b6:	89 85       	ldd	r24, Y+9	; 0x09
    10b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	31 f0       	breq	.+12     	; 0x10ca <DIO_u8SetPinDirection+0x10e>
    10be:	29 85       	ldd	r18, Y+9	; 0x09
    10c0:	3a 85       	ldd	r19, Y+10	; 0x0a
    10c2:	21 30       	cpi	r18, 0x01	; 1
    10c4:	31 05       	cpc	r19, r1
    10c6:	b1 f0       	breq	.+44     	; 0x10f4 <DIO_u8SetPinDirection+0x138>
    10c8:	9a c0       	rjmp	.+308    	; 0x11fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10ca:	a7 e3       	ldi	r26, 0x37	; 55
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e7 e3       	ldi	r30, 0x37	; 55
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	48 2f       	mov	r20, r24
    10d6:	8b 81       	ldd	r24, Y+3	; 0x03
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_u8SetPinDirection+0x12c>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_u8SetPinDirection+0x128>
    10ec:	80 95       	com	r24
    10ee:	84 23       	and	r24, r20
    10f0:	8c 93       	st	X, r24
    10f2:	85 c0       	rjmp	.+266    	; 0x11fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
    10f4:	a7 e3       	ldi	r26, 0x37	; 55
    10f6:	b0 e0       	ldi	r27, 0x00	; 0
    10f8:	e7 e3       	ldi	r30, 0x37	; 55
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	48 2f       	mov	r20, r24
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_u8SetPinDirection+0x156>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_u8SetPinDirection+0x152>
    1116:	84 2b       	or	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	71 c0       	rjmp	.+226    	; 0x11fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	38 87       	std	Y+8, r19	; 0x08
    1124:	2f 83       	std	Y+7, r18	; 0x07
    1126:	8f 81       	ldd	r24, Y+7	; 0x07
    1128:	98 85       	ldd	r25, Y+8	; 0x08
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	31 f0       	breq	.+12     	; 0x113a <DIO_u8SetPinDirection+0x17e>
    112e:	2f 81       	ldd	r18, Y+7	; 0x07
    1130:	38 85       	ldd	r19, Y+8	; 0x08
    1132:	21 30       	cpi	r18, 0x01	; 1
    1134:	31 05       	cpc	r19, r1
    1136:	b1 f0       	breq	.+44     	; 0x1164 <DIO_u8SetPinDirection+0x1a8>
    1138:	62 c0       	rjmp	.+196    	; 0x11fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    113a:	a4 e3       	ldi	r26, 0x34	; 52
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	e4 e3       	ldi	r30, 0x34	; 52
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	48 2f       	mov	r20, r24
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	02 2e       	mov	r0, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_u8SetPinDirection+0x19c>
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	0a 94       	dec	r0
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_u8SetPinDirection+0x198>
    115c:	80 95       	com	r24
    115e:	84 23       	and	r24, r20
    1160:	8c 93       	st	X, r24
    1162:	4d c0       	rjmp	.+154    	; 0x11fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    1164:	a4 e3       	ldi	r26, 0x34	; 52
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e4 e3       	ldi	r30, 0x34	; 52
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_u8SetPinDirection+0x1c6>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_u8SetPinDirection+0x1c2>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	39 c0       	rjmp	.+114    	; 0x11fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	3e 83       	std	Y+6, r19	; 0x06
    1194:	2d 83       	std	Y+5, r18	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	00 97       	sbiw	r24, 0x00	; 0
    119c:	31 f0       	breq	.+12     	; 0x11aa <DIO_u8SetPinDirection+0x1ee>
    119e:	2d 81       	ldd	r18, Y+5	; 0x05
    11a0:	3e 81       	ldd	r19, Y+6	; 0x06
    11a2:	21 30       	cpi	r18, 0x01	; 1
    11a4:	31 05       	cpc	r19, r1
    11a6:	b1 f0       	breq	.+44     	; 0x11d4 <DIO_u8SetPinDirection+0x218>
    11a8:	2a c0       	rjmp	.+84     	; 0x11fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    11aa:	a1 e3       	ldi	r26, 0x31	; 49
    11ac:	b0 e0       	ldi	r27, 0x00	; 0
    11ae:	e1 e3       	ldi	r30, 0x31	; 49
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	80 81       	ld	r24, Z
    11b4:	48 2f       	mov	r20, r24
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	02 2e       	mov	r0, r18
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <DIO_u8SetPinDirection+0x20c>
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	0a 94       	dec	r0
    11ca:	e2 f7       	brpl	.-8      	; 0x11c4 <DIO_u8SetPinDirection+0x208>
    11cc:	80 95       	com	r24
    11ce:	84 23       	and	r24, r20
    11d0:	8c 93       	st	X, r24
    11d2:	15 c0       	rjmp	.+42     	; 0x11fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    11d4:	a1 e3       	ldi	r26, 0x31	; 49
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	e1 e3       	ldi	r30, 0x31	; 49
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	48 2f       	mov	r20, r24
    11e0:	8b 81       	ldd	r24, Y+3	; 0x03
    11e2:	28 2f       	mov	r18, r24
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	81 e0       	ldi	r24, 0x01	; 1
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	02 2e       	mov	r0, r18
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <DIO_u8SetPinDirection+0x236>
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	0a 94       	dec	r0
    11f4:	e2 f7       	brpl	.-8      	; 0x11ee <DIO_u8SetPinDirection+0x232>
    11f6:	84 2b       	or	r24, r20
    11f8:	8c 93       	st	X, r24
    11fa:	01 c0       	rjmp	.+2      	; 0x11fe <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    11fc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1200:	2e 96       	adiw	r28, 0x0e	; 14
    1202:	0f b6       	in	r0, 0x3f	; 63
    1204:	f8 94       	cli
    1206:	de bf       	out	0x3e, r29	; 62
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	cd bf       	out	0x3d, r28	; 61
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	08 95       	ret

00001212 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1212:	df 93       	push	r29
    1214:	cf 93       	push	r28
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	2e 97       	sbiw	r28, 0x0e	; 14
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	8a 83       	std	Y+2, r24	; 0x02
    1228:	6b 83       	std	Y+3, r22	; 0x03
    122a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	88 30       	cpi	r24, 0x08	; 8
    1234:	08 f0       	brcs	.+2      	; 0x1238 <DIO_u8SetPinValue+0x26>
    1236:	0c c1       	rjmp	.+536    	; 0x1450 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
    1238:	8a 81       	ldd	r24, Y+2	; 0x02
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3e 87       	std	Y+14, r19	; 0x0e
    1240:	2d 87       	std	Y+13, r18	; 0x0d
    1242:	8d 85       	ldd	r24, Y+13	; 0x0d
    1244:	9e 85       	ldd	r25, Y+14	; 0x0e
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	09 f4       	brne	.+2      	; 0x124e <DIO_u8SetPinValue+0x3c>
    124c:	51 c0       	rjmp	.+162    	; 0x12f0 <DIO_u8SetPinValue+0xde>
    124e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1250:	3e 85       	ldd	r19, Y+14	; 0x0e
    1252:	22 30       	cpi	r18, 0x02	; 2
    1254:	31 05       	cpc	r19, r1
    1256:	2c f4       	brge	.+10     	; 0x1262 <DIO_u8SetPinValue+0x50>
    1258:	8d 85       	ldd	r24, Y+13	; 0x0d
    125a:	9e 85       	ldd	r25, Y+14	; 0x0e
    125c:	00 97       	sbiw	r24, 0x00	; 0
    125e:	71 f0       	breq	.+28     	; 0x127c <DIO_u8SetPinValue+0x6a>
    1260:	f5 c0       	rjmp	.+490    	; 0x144c <DIO_u8SetPinValue+0x23a>
    1262:	2d 85       	ldd	r18, Y+13	; 0x0d
    1264:	3e 85       	ldd	r19, Y+14	; 0x0e
    1266:	22 30       	cpi	r18, 0x02	; 2
    1268:	31 05       	cpc	r19, r1
    126a:	09 f4       	brne	.+2      	; 0x126e <DIO_u8SetPinValue+0x5c>
    126c:	7b c0       	rjmp	.+246    	; 0x1364 <DIO_u8SetPinValue+0x152>
    126e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1270:	9e 85       	ldd	r25, Y+14	; 0x0e
    1272:	83 30       	cpi	r24, 0x03	; 3
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <DIO_u8SetPinValue+0x68>
    1278:	af c0       	rjmp	.+350    	; 0x13d8 <DIO_u8SetPinValue+0x1c6>
    127a:	e8 c0       	rjmp	.+464    	; 0x144c <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    127c:	8c 81       	ldd	r24, Y+4	; 0x04
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	3c 87       	std	Y+12, r19	; 0x0c
    1284:	2b 87       	std	Y+11, r18	; 0x0b
    1286:	8b 85       	ldd	r24, Y+11	; 0x0b
    1288:	9c 85       	ldd	r25, Y+12	; 0x0c
    128a:	00 97       	sbiw	r24, 0x00	; 0
    128c:	31 f0       	breq	.+12     	; 0x129a <DIO_u8SetPinValue+0x88>
    128e:	2b 85       	ldd	r18, Y+11	; 0x0b
    1290:	3c 85       	ldd	r19, Y+12	; 0x0c
    1292:	21 30       	cpi	r18, 0x01	; 1
    1294:	31 05       	cpc	r19, r1
    1296:	b1 f0       	breq	.+44     	; 0x12c4 <DIO_u8SetPinValue+0xb2>
    1298:	29 c0       	rjmp	.+82     	; 0x12ec <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    129a:	ab e3       	ldi	r26, 0x3B	; 59
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	eb e3       	ldi	r30, 0x3B	; 59
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_u8SetPinValue+0xa6>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_u8SetPinValue+0xa2>
    12bc:	80 95       	com	r24
    12be:	84 23       	and	r24, r20
    12c0:	8c 93       	st	X, r24
    12c2:	c7 c0       	rjmp	.+398    	; 0x1452 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    12c4:	ab e3       	ldi	r26, 0x3B	; 59
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	eb e3       	ldi	r30, 0x3B	; 59
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	48 2f       	mov	r20, r24
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 2e       	mov	r0, r18
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <DIO_u8SetPinValue+0xd0>
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	0a 94       	dec	r0
    12e4:	e2 f7       	brpl	.-8      	; 0x12de <DIO_u8SetPinValue+0xcc>
    12e6:	84 2b       	or	r24, r20
    12e8:	8c 93       	st	X, r24
    12ea:	b3 c0       	rjmp	.+358    	; 0x1452 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    12ec:	19 82       	std	Y+1, r1	; 0x01
    12ee:	b1 c0       	rjmp	.+354    	; 0x1452 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    12f0:	8c 81       	ldd	r24, Y+4	; 0x04
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3a 87       	std	Y+10, r19	; 0x0a
    12f8:	29 87       	std	Y+9, r18	; 0x09
    12fa:	89 85       	ldd	r24, Y+9	; 0x09
    12fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	31 f0       	breq	.+12     	; 0x130e <DIO_u8SetPinValue+0xfc>
    1302:	29 85       	ldd	r18, Y+9	; 0x09
    1304:	3a 85       	ldd	r19, Y+10	; 0x0a
    1306:	21 30       	cpi	r18, 0x01	; 1
    1308:	31 05       	cpc	r19, r1
    130a:	b1 f0       	breq	.+44     	; 0x1338 <DIO_u8SetPinValue+0x126>
    130c:	29 c0       	rjmp	.+82     	; 0x1360 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    130e:	a8 e3       	ldi	r26, 0x38	; 56
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e8 e3       	ldi	r30, 0x38	; 56
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	80 81       	ld	r24, Z
    1318:	48 2f       	mov	r20, r24
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	28 2f       	mov	r18, r24
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	02 2e       	mov	r0, r18
    1326:	02 c0       	rjmp	.+4      	; 0x132c <DIO_u8SetPinValue+0x11a>
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	0a 94       	dec	r0
    132e:	e2 f7       	brpl	.-8      	; 0x1328 <DIO_u8SetPinValue+0x116>
    1330:	80 95       	com	r24
    1332:	84 23       	and	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	8d c0       	rjmp	.+282    	; 0x1452 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1338:	a8 e3       	ldi	r26, 0x38	; 56
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e8 e3       	ldi	r30, 0x38	; 56
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_u8SetPinValue+0x144>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_u8SetPinValue+0x140>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	79 c0       	rjmp	.+242    	; 0x1452 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1360:	19 82       	std	Y+1, r1	; 0x01
    1362:	77 c0       	rjmp	.+238    	; 0x1452 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    1364:	8c 81       	ldd	r24, Y+4	; 0x04
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	38 87       	std	Y+8, r19	; 0x08
    136c:	2f 83       	std	Y+7, r18	; 0x07
    136e:	8f 81       	ldd	r24, Y+7	; 0x07
    1370:	98 85       	ldd	r25, Y+8	; 0x08
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	31 f0       	breq	.+12     	; 0x1382 <DIO_u8SetPinValue+0x170>
    1376:	2f 81       	ldd	r18, Y+7	; 0x07
    1378:	38 85       	ldd	r19, Y+8	; 0x08
    137a:	21 30       	cpi	r18, 0x01	; 1
    137c:	31 05       	cpc	r19, r1
    137e:	b1 f0       	breq	.+44     	; 0x13ac <DIO_u8SetPinValue+0x19a>
    1380:	29 c0       	rjmp	.+82     	; 0x13d4 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1382:	a5 e3       	ldi	r26, 0x35	; 53
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e3       	ldi	r30, 0x35	; 53
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 2e       	mov	r0, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_u8SetPinValue+0x18e>
    139c:	88 0f       	add	r24, r24
    139e:	99 1f       	adc	r25, r25
    13a0:	0a 94       	dec	r0
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_u8SetPinValue+0x18a>
    13a4:	80 95       	com	r24
    13a6:	84 23       	and	r24, r20
    13a8:	8c 93       	st	X, r24
    13aa:	53 c0       	rjmp	.+166    	; 0x1452 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    13ac:	a5 e3       	ldi	r26, 0x35	; 53
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e5 e3       	ldi	r30, 0x35	; 53
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	48 2f       	mov	r20, r24
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 2e       	mov	r0, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <DIO_u8SetPinValue+0x1b8>
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	0a 94       	dec	r0
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <DIO_u8SetPinValue+0x1b4>
    13ce:	84 2b       	or	r24, r20
    13d0:	8c 93       	st	X, r24
    13d2:	3f c0       	rjmp	.+126    	; 0x1452 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    13d4:	19 82       	std	Y+1, r1	; 0x01
    13d6:	3d c0       	rjmp	.+122    	; 0x1452 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    13d8:	8c 81       	ldd	r24, Y+4	; 0x04
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	3e 83       	std	Y+6, r19	; 0x06
    13e0:	2d 83       	std	Y+5, r18	; 0x05
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <DIO_u8SetPinValue+0x1e4>
    13ea:	2d 81       	ldd	r18, Y+5	; 0x05
    13ec:	3e 81       	ldd	r19, Y+6	; 0x06
    13ee:	21 30       	cpi	r18, 0x01	; 1
    13f0:	31 05       	cpc	r19, r1
    13f2:	b1 f0       	breq	.+44     	; 0x1420 <DIO_u8SetPinValue+0x20e>
    13f4:	29 c0       	rjmp	.+82     	; 0x1448 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    13f6:	a2 e3       	ldi	r26, 0x32	; 50
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e2 e3       	ldi	r30, 0x32	; 50
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_u8SetPinValue+0x202>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_u8SetPinValue+0x1fe>
    1418:	80 95       	com	r24
    141a:	84 23       	and	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	19 c0       	rjmp	.+50     	; 0x1452 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1420:	a2 e3       	ldi	r26, 0x32	; 50
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e2 e3       	ldi	r30, 0x32	; 50
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_u8SetPinValue+0x22c>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_u8SetPinValue+0x228>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	05 c0       	rjmp	.+10     	; 0x1452 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1448:	19 82       	std	Y+1, r1	; 0x01
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    144c:	19 82       	std	Y+1, r1	; 0x01
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1450:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1452:	89 81       	ldd	r24, Y+1	; 0x01
}
    1454:	2e 96       	adiw	r28, 0x0e	; 14
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	28 97       	sbiw	r28, 0x08	; 8
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	8b 83       	std	Y+3, r24	; 0x03
    147c:	6c 83       	std	Y+4, r22	; 0x04
    147e:	5e 83       	std	Y+6, r21	; 0x06
    1480:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	84 30       	cpi	r24, 0x04	; 4
    148a:	08 f0       	brcs	.+2      	; 0x148e <DIO_u8GetPinValue+0x28>
    148c:	a1 c0       	rjmp	.+322    	; 0x15d0 <DIO_u8GetPinValue+0x16a>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	88 30       	cpi	r24, 0x08	; 8
    1492:	08 f0       	brcs	.+2      	; 0x1496 <DIO_u8GetPinValue+0x30>
    1494:	9d c0       	rjmp	.+314    	; 0x15d0 <DIO_u8GetPinValue+0x16a>
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	09 f4       	brne	.+2      	; 0x14a0 <DIO_u8GetPinValue+0x3a>
    149e:	98 c0       	rjmp	.+304    	; 0x15d0 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	28 2f       	mov	r18, r24
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	38 87       	std	Y+8, r19	; 0x08
    14a8:	2f 83       	std	Y+7, r18	; 0x07
    14aa:	4f 81       	ldd	r20, Y+7	; 0x07
    14ac:	58 85       	ldd	r21, Y+8	; 0x08
    14ae:	41 30       	cpi	r20, 0x01	; 1
    14b0:	51 05       	cpc	r21, r1
    14b2:	a9 f1       	breq	.+106    	; 0x151e <DIO_u8GetPinValue+0xb8>
    14b4:	8f 81       	ldd	r24, Y+7	; 0x07
    14b6:	98 85       	ldd	r25, Y+8	; 0x08
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	34 f4       	brge	.+12     	; 0x14ca <DIO_u8GetPinValue+0x64>
    14be:	2f 81       	ldd	r18, Y+7	; 0x07
    14c0:	38 85       	ldd	r19, Y+8	; 0x08
    14c2:	21 15       	cp	r18, r1
    14c4:	31 05       	cpc	r19, r1
    14c6:	71 f0       	breq	.+28     	; 0x14e4 <DIO_u8GetPinValue+0x7e>
    14c8:	81 c0       	rjmp	.+258    	; 0x15cc <DIO_u8GetPinValue+0x166>
    14ca:	4f 81       	ldd	r20, Y+7	; 0x07
    14cc:	58 85       	ldd	r21, Y+8	; 0x08
    14ce:	42 30       	cpi	r20, 0x02	; 2
    14d0:	51 05       	cpc	r21, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <DIO_u8GetPinValue+0x70>
    14d4:	41 c0       	rjmp	.+130    	; 0x1558 <DIO_u8GetPinValue+0xf2>
    14d6:	8f 81       	ldd	r24, Y+7	; 0x07
    14d8:	98 85       	ldd	r25, Y+8	; 0x08
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <DIO_u8GetPinValue+0x7c>
    14e0:	58 c0       	rjmp	.+176    	; 0x1592 <DIO_u8GetPinValue+0x12c>
    14e2:	74 c0       	rjmp	.+232    	; 0x15cc <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    14e4:	e9 e3       	ldi	r30, 0x39	; 57
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	28 2f       	mov	r18, r24
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	88 2f       	mov	r24, r24
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	a9 01       	movw	r20, r18
    14f6:	02 c0       	rjmp	.+4      	; 0x14fc <DIO_u8GetPinValue+0x96>
    14f8:	55 95       	asr	r21
    14fa:	47 95       	ror	r20
    14fc:	8a 95       	dec	r24
    14fe:	e2 f7       	brpl	.-8      	; 0x14f8 <DIO_u8GetPinValue+0x92>
    1500:	ca 01       	movw	r24, r20
    1502:	81 70       	andi	r24, 0x01	; 1
    1504:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	88 23       	and	r24, r24
    150a:	21 f4       	brne	.+8      	; 0x1514 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    150c:	ed 81       	ldd	r30, Y+5	; 0x05
    150e:	fe 81       	ldd	r31, Y+6	; 0x06
    1510:	10 82       	st	Z, r1
    1512:	5f c0       	rjmp	.+190    	; 0x15d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1514:	ed 81       	ldd	r30, Y+5	; 0x05
    1516:	fe 81       	ldd	r31, Y+6	; 0x06
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 83       	st	Z, r24
    151c:	5a c0       	rjmp	.+180    	; 0x15d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    151e:	e6 e3       	ldi	r30, 0x36	; 54
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	88 2f       	mov	r24, r24
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a9 01       	movw	r20, r18
    1530:	02 c0       	rjmp	.+4      	; 0x1536 <DIO_u8GetPinValue+0xd0>
    1532:	55 95       	asr	r21
    1534:	47 95       	ror	r20
    1536:	8a 95       	dec	r24
    1538:	e2 f7       	brpl	.-8      	; 0x1532 <DIO_u8GetPinValue+0xcc>
    153a:	ca 01       	movw	r24, r20
    153c:	81 70       	andi	r24, 0x01	; 1
    153e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	88 23       	and	r24, r24
    1544:	21 f4       	brne	.+8      	; 0x154e <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1546:	ed 81       	ldd	r30, Y+5	; 0x05
    1548:	fe 81       	ldd	r31, Y+6	; 0x06
    154a:	10 82       	st	Z, r1
    154c:	42 c0       	rjmp	.+132    	; 0x15d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    154e:	ed 81       	ldd	r30, Y+5	; 0x05
    1550:	fe 81       	ldd	r31, Y+6	; 0x06
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 83       	st	Z, r24
    1556:	3d c0       	rjmp	.+122    	; 0x15d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1558:	e3 e3       	ldi	r30, 0x33	; 51
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	88 2f       	mov	r24, r24
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a9 01       	movw	r20, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_u8GetPinValue+0x10a>
    156c:	55 95       	asr	r21
    156e:	47 95       	ror	r20
    1570:	8a 95       	dec	r24
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_u8GetPinValue+0x106>
    1574:	ca 01       	movw	r24, r20
    1576:	81 70       	andi	r24, 0x01	; 1
    1578:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	88 23       	and	r24, r24
    157e:	21 f4       	brne	.+8      	; 0x1588 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1580:	ed 81       	ldd	r30, Y+5	; 0x05
    1582:	fe 81       	ldd	r31, Y+6	; 0x06
    1584:	10 82       	st	Z, r1
    1586:	25 c0       	rjmp	.+74     	; 0x15d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1588:	ed 81       	ldd	r30, Y+5	; 0x05
    158a:	fe 81       	ldd	r31, Y+6	; 0x06
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	80 83       	st	Z, r24
    1590:	20 c0       	rjmp	.+64     	; 0x15d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1592:	e0 e3       	ldi	r30, 0x30	; 48
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	88 2f       	mov	r24, r24
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a9 01       	movw	r20, r18
    15a4:	02 c0       	rjmp	.+4      	; 0x15aa <DIO_u8GetPinValue+0x144>
    15a6:	55 95       	asr	r21
    15a8:	47 95       	ror	r20
    15aa:	8a 95       	dec	r24
    15ac:	e2 f7       	brpl	.-8      	; 0x15a6 <DIO_u8GetPinValue+0x140>
    15ae:	ca 01       	movw	r24, r20
    15b0:	81 70       	andi	r24, 0x01	; 1
    15b2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	88 23       	and	r24, r24
    15b8:	21 f4       	brne	.+8      	; 0x15c2 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    15ba:	ed 81       	ldd	r30, Y+5	; 0x05
    15bc:	fe 81       	ldd	r31, Y+6	; 0x06
    15be:	10 82       	st	Z, r1
    15c0:	08 c0       	rjmp	.+16     	; 0x15d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    15c2:	ed 81       	ldd	r30, Y+5	; 0x05
    15c4:	fe 81       	ldd	r31, Y+6	; 0x06
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	80 83       	st	Z, r24
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    15cc:	1a 82       	std	Y+2, r1	; 0x02
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    15d0:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15d4:	28 96       	adiw	r28, 0x08	; 8
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	2d 97       	sbiw	r28, 0x0d	; 13
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	8a 83       	std	Y+2, r24	; 0x02
    15fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 23       	and	r24, r24
    1606:	21 f0       	breq	.+8      	; 0x1610 <DIO_u8SetPortDirection+0x2a>
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	09 f0       	breq	.+2      	; 0x1610 <DIO_u8SetPortDirection+0x2a>
    160e:	82 c0       	rjmp	.+260    	; 0x1714 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    1610:	8a 81       	ldd	r24, Y+2	; 0x02
    1612:	28 2f       	mov	r18, r24
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	3d 87       	std	Y+13, r19	; 0x0d
    1618:	2c 87       	std	Y+12, r18	; 0x0c
    161a:	8c 85       	ldd	r24, Y+12	; 0x0c
    161c:	9d 85       	ldd	r25, Y+13	; 0x0d
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	91 05       	cpc	r25, r1
    1622:	71 f1       	breq	.+92     	; 0x1680 <DIO_u8SetPortDirection+0x9a>
    1624:	2c 85       	ldd	r18, Y+12	; 0x0c
    1626:	3d 85       	ldd	r19, Y+13	; 0x0d
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	2c f4       	brge	.+10     	; 0x1638 <DIO_u8SetPortDirection+0x52>
    162e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1630:	9d 85       	ldd	r25, Y+13	; 0x0d
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f0       	breq	.+26     	; 0x1650 <DIO_u8SetPortDirection+0x6a>
    1636:	6c c0       	rjmp	.+216    	; 0x1710 <DIO_u8SetPortDirection+0x12a>
    1638:	2c 85       	ldd	r18, Y+12	; 0x0c
    163a:	3d 85       	ldd	r19, Y+13	; 0x0d
    163c:	22 30       	cpi	r18, 0x02	; 2
    163e:	31 05       	cpc	r19, r1
    1640:	b9 f1       	breq	.+110    	; 0x16b0 <DIO_u8SetPortDirection+0xca>
    1642:	8c 85       	ldd	r24, Y+12	; 0x0c
    1644:	9d 85       	ldd	r25, Y+13	; 0x0d
    1646:	83 30       	cpi	r24, 0x03	; 3
    1648:	91 05       	cpc	r25, r1
    164a:	09 f4       	brne	.+2      	; 0x164e <DIO_u8SetPortDirection+0x68>
    164c:	49 c0       	rjmp	.+146    	; 0x16e0 <DIO_u8SetPortDirection+0xfa>
    164e:	60 c0       	rjmp	.+192    	; 0x1710 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3b 87       	std	Y+11, r19	; 0x0b
    1658:	2a 87       	std	Y+10, r18	; 0x0a
    165a:	8a 85       	ldd	r24, Y+10	; 0x0a
    165c:	9b 85       	ldd	r25, Y+11	; 0x0b
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	31 f0       	breq	.+12     	; 0x166e <DIO_u8SetPortDirection+0x88>
    1662:	2a 85       	ldd	r18, Y+10	; 0x0a
    1664:	3b 85       	ldd	r19, Y+11	; 0x0b
    1666:	21 30       	cpi	r18, 0x01	; 1
    1668:	31 05       	cpc	r19, r1
    166a:	29 f0       	breq	.+10     	; 0x1676 <DIO_u8SetPortDirection+0x90>
    166c:	54 c0       	rjmp	.+168    	; 0x1716 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    166e:	ea e3       	ldi	r30, 0x3A	; 58
    1670:	f0 e0       	ldi	r31, 0x00	; 0
    1672:	10 82       	st	Z, r1
    1674:	50 c0       	rjmp	.+160    	; 0x1716 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    1676:	ea e3       	ldi	r30, 0x3A	; 58
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	80 83       	st	Z, r24
    167e:	4b c0       	rjmp	.+150    	; 0x1716 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	39 87       	std	Y+9, r19	; 0x09
    1688:	28 87       	std	Y+8, r18	; 0x08
    168a:	88 85       	ldd	r24, Y+8	; 0x08
    168c:	99 85       	ldd	r25, Y+9	; 0x09
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	31 f0       	breq	.+12     	; 0x169e <DIO_u8SetPortDirection+0xb8>
    1692:	28 85       	ldd	r18, Y+8	; 0x08
    1694:	39 85       	ldd	r19, Y+9	; 0x09
    1696:	21 30       	cpi	r18, 0x01	; 1
    1698:	31 05       	cpc	r19, r1
    169a:	29 f0       	breq	.+10     	; 0x16a6 <DIO_u8SetPortDirection+0xc0>
    169c:	3c c0       	rjmp	.+120    	; 0x1716 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    169e:	e7 e3       	ldi	r30, 0x37	; 55
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	10 82       	st	Z, r1
    16a4:	38 c0       	rjmp	.+112    	; 0x1716 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    16a6:	e7 e3       	ldi	r30, 0x37	; 55
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8f ef       	ldi	r24, 0xFF	; 255
    16ac:	80 83       	st	Z, r24
    16ae:	33 c0       	rjmp	.+102    	; 0x1716 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    16b0:	8b 81       	ldd	r24, Y+3	; 0x03
    16b2:	28 2f       	mov	r18, r24
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	3f 83       	std	Y+7, r19	; 0x07
    16b8:	2e 83       	std	Y+6, r18	; 0x06
    16ba:	8e 81       	ldd	r24, Y+6	; 0x06
    16bc:	9f 81       	ldd	r25, Y+7	; 0x07
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	31 f0       	breq	.+12     	; 0x16ce <DIO_u8SetPortDirection+0xe8>
    16c2:	2e 81       	ldd	r18, Y+6	; 0x06
    16c4:	3f 81       	ldd	r19, Y+7	; 0x07
    16c6:	21 30       	cpi	r18, 0x01	; 1
    16c8:	31 05       	cpc	r19, r1
    16ca:	29 f0       	breq	.+10     	; 0x16d6 <DIO_u8SetPortDirection+0xf0>
    16cc:	24 c0       	rjmp	.+72     	; 0x1716 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    16ce:	e4 e3       	ldi	r30, 0x34	; 52
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	10 82       	st	Z, r1
    16d4:	20 c0       	rjmp	.+64     	; 0x1716 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    16d6:	e4 e3       	ldi	r30, 0x34	; 52
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	80 83       	st	Z, r24
    16de:	1b c0       	rjmp	.+54     	; 0x1716 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    16e0:	8b 81       	ldd	r24, Y+3	; 0x03
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	3d 83       	std	Y+5, r19	; 0x05
    16e8:	2c 83       	std	Y+4, r18	; 0x04
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	9d 81       	ldd	r25, Y+5	; 0x05
    16ee:	00 97       	sbiw	r24, 0x00	; 0
    16f0:	31 f0       	breq	.+12     	; 0x16fe <DIO_u8SetPortDirection+0x118>
    16f2:	2c 81       	ldd	r18, Y+4	; 0x04
    16f4:	3d 81       	ldd	r19, Y+5	; 0x05
    16f6:	21 30       	cpi	r18, 0x01	; 1
    16f8:	31 05       	cpc	r19, r1
    16fa:	29 f0       	breq	.+10     	; 0x1706 <DIO_u8SetPortDirection+0x120>
    16fc:	0c c0       	rjmp	.+24     	; 0x1716 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    16fe:	e1 e3       	ldi	r30, 0x31	; 49
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	10 82       	st	Z, r1
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    1706:	e1 e3       	ldi	r30, 0x31	; 49
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	8f ef       	ldi	r24, 0xFF	; 255
    170c:	80 83       	st	Z, r24
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1710:	19 82       	std	Y+1, r1	; 0x01
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1714:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1716:	89 81       	ldd	r24, Y+1	; 0x01
}
    1718:	2d 96       	adiw	r28, 0x0d	; 13
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	f8 94       	cli
    171e:	de bf       	out	0x3e, r29	; 62
    1720:	0f be       	out	0x3f, r0	; 63
    1722:	cd bf       	out	0x3d, r28	; 61
    1724:	cf 91       	pop	r28
    1726:	df 91       	pop	r29
    1728:	08 95       	ret

0000172a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	00 d0       	rcall	.+0      	; 0x1730 <DIO_u8SetPortValue+0x6>
    1730:	00 d0       	rcall	.+0      	; 0x1732 <DIO_u8SetPortValue+0x8>
    1732:	0f 92       	push	r0
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
    1738:	8a 83       	std	Y+2, r24	; 0x02
    173a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	3d 83       	std	Y+5, r19	; 0x05
    1748:	2c 83       	std	Y+4, r18	; 0x04
    174a:	8c 81       	ldd	r24, Y+4	; 0x04
    174c:	9d 81       	ldd	r25, Y+5	; 0x05
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	91 05       	cpc	r25, r1
    1752:	d1 f0       	breq	.+52     	; 0x1788 <DIO_u8SetPortValue+0x5e>
    1754:	2c 81       	ldd	r18, Y+4	; 0x04
    1756:	3d 81       	ldd	r19, Y+5	; 0x05
    1758:	22 30       	cpi	r18, 0x02	; 2
    175a:	31 05       	cpc	r19, r1
    175c:	2c f4       	brge	.+10     	; 0x1768 <DIO_u8SetPortValue+0x3e>
    175e:	8c 81       	ldd	r24, Y+4	; 0x04
    1760:	9d 81       	ldd	r25, Y+5	; 0x05
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	61 f0       	breq	.+24     	; 0x177e <DIO_u8SetPortValue+0x54>
    1766:	1f c0       	rjmp	.+62     	; 0x17a6 <DIO_u8SetPortValue+0x7c>
    1768:	2c 81       	ldd	r18, Y+4	; 0x04
    176a:	3d 81       	ldd	r19, Y+5	; 0x05
    176c:	22 30       	cpi	r18, 0x02	; 2
    176e:	31 05       	cpc	r19, r1
    1770:	81 f0       	breq	.+32     	; 0x1792 <DIO_u8SetPortValue+0x68>
    1772:	8c 81       	ldd	r24, Y+4	; 0x04
    1774:	9d 81       	ldd	r25, Y+5	; 0x05
    1776:	83 30       	cpi	r24, 0x03	; 3
    1778:	91 05       	cpc	r25, r1
    177a:	81 f0       	breq	.+32     	; 0x179c <DIO_u8SetPortValue+0x72>
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    177e:	eb e3       	ldi	r30, 0x3B	; 59
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	8b 81       	ldd	r24, Y+3	; 0x03
    1784:	80 83       	st	Z, r24
    1786:	10 c0       	rjmp	.+32     	; 0x17a8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    1788:	e8 e3       	ldi	r30, 0x38	; 56
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	80 83       	st	Z, r24
    1790:	0b c0       	rjmp	.+22     	; 0x17a8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    1792:	e5 e3       	ldi	r30, 0x35	; 53
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	80 83       	st	Z, r24
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    179c:	e2 e3       	ldi	r30, 0x32	; 50
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	80 83       	st	Z, r24
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    17a6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	08 95       	ret

000017ba <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    17ba:	df 93       	push	r29
    17bc:	cf 93       	push	r28
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <DIO_u8GetPortValue+0x6>
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <DIO_u8GetPortValue+0x8>
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <DIO_u8GetPortValue+0xa>
    17c4:	cd b7       	in	r28, 0x3d	; 61
    17c6:	de b7       	in	r29, 0x3e	; 62
    17c8:	8a 83       	std	Y+2, r24	; 0x02
    17ca:	7c 83       	std	Y+4, r23	; 0x04
    17cc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	e9 f1       	breq	.+122    	; 0x1854 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    17da:	8a 81       	ldd	r24, Y+2	; 0x02
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3e 83       	std	Y+6, r19	; 0x06
    17e2:	2d 83       	std	Y+5, r18	; 0x05
    17e4:	8d 81       	ldd	r24, Y+5	; 0x05
    17e6:	9e 81       	ldd	r25, Y+6	; 0x06
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	e1 f0       	breq	.+56     	; 0x1826 <DIO_u8GetPortValue+0x6c>
    17ee:	2d 81       	ldd	r18, Y+5	; 0x05
    17f0:	3e 81       	ldd	r19, Y+6	; 0x06
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	2c f4       	brge	.+10     	; 0x1802 <DIO_u8GetPortValue+0x48>
    17f8:	8d 81       	ldd	r24, Y+5	; 0x05
    17fa:	9e 81       	ldd	r25, Y+6	; 0x06
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	61 f0       	breq	.+24     	; 0x1818 <DIO_u8GetPortValue+0x5e>
    1800:	27 c0       	rjmp	.+78     	; 0x1850 <DIO_u8GetPortValue+0x96>
    1802:	2d 81       	ldd	r18, Y+5	; 0x05
    1804:	3e 81       	ldd	r19, Y+6	; 0x06
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	a1 f0       	breq	.+40     	; 0x1834 <DIO_u8GetPortValue+0x7a>
    180c:	8d 81       	ldd	r24, Y+5	; 0x05
    180e:	9e 81       	ldd	r25, Y+6	; 0x06
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	91 05       	cpc	r25, r1
    1814:	b1 f0       	breq	.+44     	; 0x1842 <DIO_u8GetPortValue+0x88>
    1816:	1c c0       	rjmp	.+56     	; 0x1850 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1818:	e9 e3       	ldi	r30, 0x39	; 57
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	eb 81       	ldd	r30, Y+3	; 0x03
    1820:	fc 81       	ldd	r31, Y+4	; 0x04
    1822:	80 83       	st	Z, r24
    1824:	18 c0       	rjmp	.+48     	; 0x1856 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1826:	e6 e3       	ldi	r30, 0x36	; 54
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	eb 81       	ldd	r30, Y+3	; 0x03
    182e:	fc 81       	ldd	r31, Y+4	; 0x04
    1830:	80 83       	st	Z, r24
    1832:	11 c0       	rjmp	.+34     	; 0x1856 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    1834:	e3 e3       	ldi	r30, 0x33	; 51
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	eb 81       	ldd	r30, Y+3	; 0x03
    183c:	fc 81       	ldd	r31, Y+4	; 0x04
    183e:	80 83       	st	Z, r24
    1840:	0a c0       	rjmp	.+20     	; 0x1856 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    1842:	e0 e3       	ldi	r30, 0x30	; 48
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	eb 81       	ldd	r30, Y+3	; 0x03
    184a:	fc 81       	ldd	r31, Y+4	; 0x04
    184c:	80 83       	st	Z, r24
    184e:	03 c0       	rjmp	.+6      	; 0x1856 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1850:	19 82       	std	Y+1, r1	; 0x01
    1852:	01 c0       	rjmp	.+2      	; 0x1856 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1854:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	26 96       	adiw	r28, 0x06	; 6
    185a:	0f b6       	in	r0, 0x3f	; 63
    185c:	f8 94       	cli
    185e:	de bf       	out	0x3e, r29	; 62
    1860:	0f be       	out	0x3f, r0	; 63
    1862:	cd bf       	out	0x3d, r28	; 61
    1864:	cf 91       	pop	r28
    1866:	df 91       	pop	r29
    1868:	08 95       	ret

0000186a <Dashboard_FrameOne>:
#include "LCD_interface.h"
#include "ADC_interface.h"


void Dashboard_FrameOne(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	ab 97       	sbiw	r28, 0x2b	; 43
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;

	LCD_voidClearScreen();
    187e:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 ea       	ldi	r26, 0xA0	; 160
    1888:	b1 e4       	ldi	r27, 0x41	; 65
    188a:	8f a3       	std	Y+39, r24	; 0x27
    188c:	98 a7       	std	Y+40, r25	; 0x28
    188e:	a9 a7       	std	Y+41, r26	; 0x29
    1890:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6f a1       	ldd	r22, Y+39	; 0x27
    1894:	78 a5       	ldd	r23, Y+40	; 0x28
    1896:	89 a5       	ldd	r24, Y+41	; 0x29
    1898:	9a a5       	ldd	r25, Y+42	; 0x2a
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	8b a3       	std	Y+35, r24	; 0x23
    18ac:	9c a3       	std	Y+36, r25	; 0x24
    18ae:	ad a3       	std	Y+37, r26	; 0x25
    18b0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18b2:	6b a1       	ldd	r22, Y+35	; 0x23
    18b4:	7c a1       	ldd	r23, Y+36	; 0x24
    18b6:	8d a1       	ldd	r24, Y+37	; 0x25
    18b8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <Dashboard_FrameOne+0x6a>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9a a3       	std	Y+34, r25	; 0x22
    18d0:	89 a3       	std	Y+33, r24	; 0x21
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <Dashboard_FrameOne+0xe8>
	else if (__tmp > 65535)
    18d4:	6b a1       	ldd	r22, Y+35	; 0x23
    18d6:	7c a1       	ldd	r23, Y+36	; 0x24
    18d8:	8d a1       	ldd	r24, Y+37	; 0x25
    18da:	9e a1       	ldd	r25, Y+38	; 0x26
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <Dashboard_FrameOne+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6f a1       	ldd	r22, Y+39	; 0x27
    18ee:	78 a5       	ldd	r23, Y+40	; 0x28
    18f0:	89 a5       	ldd	r24, Y+41	; 0x29
    18f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9a a3       	std	Y+34, r25	; 0x22
    1912:	89 a3       	std	Y+33, r24	; 0x21
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <Dashboard_FrameOne+0xca>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	98 a3       	std	Y+32, r25	; 0x20
    191c:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    191e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1920:	98 a1       	ldd	r25, Y+32	; 0x20
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <Dashboard_FrameOne+0xb8>
    1926:	98 a3       	std	Y+32, r25	; 0x20
    1928:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	89 a1       	ldd	r24, Y+33	; 0x21
    192c:	9a a1       	ldd	r25, Y+34	; 0x22
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9a a3       	std	Y+34, r25	; 0x22
    1932:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	89 a1       	ldd	r24, Y+33	; 0x21
    1936:	9a a1       	ldd	r25, Y+34	; 0x22
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <Dashboard_FrameOne+0xac>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <Dashboard_FrameOne+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	6b a1       	ldd	r22, Y+35	; 0x23
    1940:	7c a1       	ldd	r23, Y+36	; 0x24
    1942:	8d a1       	ldd	r24, Y+37	; 0x25
    1944:	9e a1       	ldd	r25, Y+38	; 0x26
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9a a3       	std	Y+34, r25	; 0x22
    1950:	89 a3       	std	Y+33, r24	; 0x21
    1952:	89 a1       	ldd	r24, Y+33	; 0x21
    1954:	9a a1       	ldd	r25, Y+34	; 0x22
    1956:	9e 8f       	std	Y+30, r25	; 0x1e
    1958:	8d 8f       	std	Y+29, r24	; 0x1d
    195a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    195c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <Dashboard_FrameOne+0xf4>
    1962:	9e 8f       	std	Y+30, r25	; 0x1e
    1964:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-Temp Sensor");
    1966:	80 e6       	ldi	r24, 0x60	; 96
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-Exit");
    1976:	8e e6       	ldi	r24, 0x6E	; 110
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>

	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    197e:	ce 01       	movw	r24, r28
    1980:	8b 96       	adiw	r24, 0x2b	; 43
    1982:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    1986:	8b a5       	ldd	r24, Y+43	; 0x2b
    1988:	8f 3f       	cpi	r24, 0xFF	; 255
    198a:	c9 f3       	breq	.-14     	; 0x197e <Dashboard_FrameOne+0x114>
		{
			if(Local_u8Key == '1') // If pressed key is '1'
    198c:	8b a5       	ldd	r24, Y+43	; 0x2b
    198e:	81 33       	cpi	r24, 0x31	; 49
    1990:	19 f4       	brne	.+6      	; 0x1998 <Dashboard_FrameOne+0x12e>
			{
				Dashboard_FrameTwo();
    1992:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <Dashboard_FrameTwo>
    1996:	f3 cf       	rjmp	.-26     	; 0x197e <Dashboard_FrameOne+0x114>
			}
			else if (Local_u8Key == '2') // If pressed key is '2'
    1998:	8b a5       	ldd	r24, Y+43	; 0x2b
    199a:	82 33       	cpi	r24, 0x32	; 50
    199c:	81 f7       	brne	.-32     	; 0x197e <Dashboard_FrameOne+0x114>
			{
				LCD_voidClearScreen();
    199e:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 ea       	ldi	r26, 0xA0	; 160
    19a8:	b1 e4       	ldi	r27, 0x41	; 65
    19aa:	89 8f       	std	Y+25, r24	; 0x19
    19ac:	9a 8f       	std	Y+26, r25	; 0x1a
    19ae:	ab 8f       	std	Y+27, r26	; 0x1b
    19b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	69 8d       	ldd	r22, Y+25	; 0x19
    19b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a ef       	ldi	r20, 0xFA	; 250
    19c0:	54 e4       	ldi	r21, 0x44	; 68
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	8d 8b       	std	Y+21, r24	; 0x15
    19cc:	9e 8b       	std	Y+22, r25	; 0x16
    19ce:	af 8b       	std	Y+23, r26	; 0x17
    19d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d2:	6d 89       	ldd	r22, Y+21	; 0x15
    19d4:	7e 89       	ldd	r23, Y+22	; 0x16
    19d6:	8f 89       	ldd	r24, Y+23	; 0x17
    19d8:	98 8d       	ldd	r25, Y+24	; 0x18
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <Dashboard_FrameOne+0x18a>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	8b 8b       	std	Y+19, r24	; 0x13
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <Dashboard_FrameOne+0x208>
	else if (__tmp > 65535)
    19f4:	6d 89       	ldd	r22, Y+21	; 0x15
    19f6:	7e 89       	ldd	r23, Y+22	; 0x16
    19f8:	8f 89       	ldd	r24, Y+23	; 0x17
    19fa:	98 8d       	ldd	r25, Y+24	; 0x18
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <Dashboard_FrameOne+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	69 8d       	ldd	r22, Y+25	; 0x19
    1a0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	9c 8b       	std	Y+20, r25	; 0x14
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <Dashboard_FrameOne+0x1ea>
    1a36:	88 ec       	ldi	r24, 0xC8	; 200
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9a 8b       	std	Y+18, r25	; 0x12
    1a3c:	89 8b       	std	Y+17, r24	; 0x11
    1a3e:	89 89       	ldd	r24, Y+17	; 0x11
    1a40:	9a 89       	ldd	r25, Y+18	; 0x12
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <Dashboard_FrameOne+0x1d8>
    1a46:	9a 8b       	std	Y+18, r25	; 0x12
    1a48:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a4c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	9c 8b       	std	Y+20, r25	; 0x14
    1a52:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8b 89       	ldd	r24, Y+19	; 0x13
    1a56:	9c 89       	ldd	r25, Y+20	; 0x14
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <Dashboard_FrameOne+0x1cc>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <Dashboard_FrameOne+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	9c 8b       	std	Y+20, r25	; 0x14
    1a70:	8b 8b       	std	Y+19, r24	; 0x13
    1a72:	8b 89       	ldd	r24, Y+19	; 0x13
    1a74:	9c 89       	ldd	r25, Y+20	; 0x14
    1a76:	98 8b       	std	Y+16, r25	; 0x10
    1a78:	8f 87       	std	Y+15, r24	; 0x0f
    1a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7c:	98 89       	ldd	r25, Y+16	; 0x10
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <Dashboard_FrameOne+0x214>
    1a82:	98 8b       	std	Y+16, r25	; 0x10
    1a84:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidWriteString((u8*)"GoodLuck!");
    1a86:	85 e7       	ldi	r24, 0x75	; 117
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e8       	ldi	r25, 0x80	; 128
    1a92:	ab e3       	ldi	r26, 0x3B	; 59
    1a94:	b5 e4       	ldi	r27, 0x45	; 69
    1a96:	8b 87       	std	Y+11, r24	; 0x0b
    1a98:	9c 87       	std	Y+12, r25	; 0x0c
    1a9a:	ad 87       	std	Y+13, r26	; 0x0d
    1a9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a ef       	ldi	r20, 0xFA	; 250
    1aac:	54 e4       	ldi	r21, 0x44	; 68
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8f 83       	std	Y+7, r24	; 0x07
    1ab8:	98 87       	std	Y+8, r25	; 0x08
    1aba:	a9 87       	std	Y+9, r26	; 0x09
    1abc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abe:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac0:	78 85       	ldd	r23, Y+8	; 0x08
    1ac2:	89 85       	ldd	r24, Y+9	; 0x09
    1ac4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <Dashboard_FrameOne+0x276>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <Dashboard_FrameOne+0x2f4>
	else if (__tmp > 65535)
    1ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae2:	78 85       	ldd	r23, Y+8	; 0x08
    1ae4:	89 85       	ldd	r24, Y+9	; 0x09
    1ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <Dashboard_FrameOne+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9e 83       	std	Y+6, r25	; 0x06
    1b1e:	8d 83       	std	Y+5, r24	; 0x05
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <Dashboard_FrameOne+0x2d6>
    1b22:	88 ec       	ldi	r24, 0xC8	; 200
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9c 83       	std	Y+4, r25	; 0x04
    1b28:	8b 83       	std	Y+3, r24	; 0x03
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <Dashboard_FrameOne+0x2c4>
    1b32:	9c 83       	std	Y+4, r25	; 0x04
    1b34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8d 81       	ldd	r24, Y+5	; 0x05
    1b38:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9e 83       	std	Y+6, r25	; 0x06
    1b3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8d 81       	ldd	r24, Y+5	; 0x05
    1b42:	9e 81       	ldd	r25, Y+6	; 0x06
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <Dashboard_FrameOne+0x2b8>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <Dashboard_FrameOne+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9e 83       	std	Y+6, r25	; 0x06
    1b5c:	8d 83       	std	Y+5, r24	; 0x05
    1b5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b60:	9e 81       	ldd	r25, Y+6	; 0x06
    1b62:	9a 83       	std	Y+2, r25	; 0x02
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <Dashboard_FrameOne+0x300>
    1b6e:	9a 83       	std	Y+2, r25	; 0x02
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	ff cf       	rjmp	.-2      	; 0x1b72 <Dashboard_FrameOne+0x308>

00001b74 <Dashboard_FrameTwo>:
			}
		}
	}
}
void Dashboard_FrameTwo(void)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	a4 97       	sbiw	r28, 0x24	; 36
    1b7e:	0f b6       	in	r0, 0x3f	; 63
    1b80:	f8 94       	cli
    1b82:	de bf       	out	0x3e, r29	; 62
    1b84:	0f be       	out	0x3f, r0	; 63
    1b86:	cd bf       	out	0x3d, r28	; 61
	LCD_voidClearScreen(); // Clear the LCD screen
    1b88:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 ea       	ldi	r26, 0xA0	; 160
    1b92:	b1 e4       	ldi	r27, 0x41	; 65
    1b94:	89 8f       	std	Y+25, r24	; 0x19
    1b96:	9a 8f       	std	Y+26, r25	; 0x1a
    1b98:	ab 8f       	std	Y+27, r26	; 0x1b
    1b9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a ef       	ldi	r20, 0xFA	; 250
    1baa:	54 e4       	ldi	r21, 0x44	; 68
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8d 8b       	std	Y+21, r24	; 0x15
    1bb6:	9e 8b       	std	Y+22, r25	; 0x16
    1bb8:	af 8b       	std	Y+23, r26	; 0x17
    1bba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e8       	ldi	r20, 0x80	; 128
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <Dashboard_FrameTwo+0x6a>
		__ticks = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	9c 8b       	std	Y+20, r25	; 0x14
    1bda:	8b 8b       	std	Y+19, r24	; 0x13
    1bdc:	3f c0       	rjmp	.+126    	; 0x1c5c <Dashboard_FrameTwo+0xe8>
	else if (__tmp > 65535)
    1bde:	6d 89       	ldd	r22, Y+21	; 0x15
    1be0:	7e 89       	ldd	r23, Y+22	; 0x16
    1be2:	8f 89       	ldd	r24, Y+23	; 0x17
    1be4:	98 8d       	ldd	r25, Y+24	; 0x18
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	3f ef       	ldi	r19, 0xFF	; 255
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	57 e4       	ldi	r21, 0x47	; 71
    1bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	4c f5       	brge	.+82     	; 0x1c48 <Dashboard_FrameTwo+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf6:	69 8d       	ldd	r22, Y+25	; 0x19
    1bf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bfe:	20 e0       	ldi	r18, 0x00	; 0
    1c00:	30 e0       	ldi	r19, 0x00	; 0
    1c02:	40 e2       	ldi	r20, 0x20	; 32
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c0a:	dc 01       	movw	r26, r24
    1c0c:	cb 01       	movw	r24, r22
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9c 8b       	std	Y+20, r25	; 0x14
    1c1c:	8b 8b       	std	Y+19, r24	; 0x13
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <Dashboard_FrameTwo+0xca>
    1c20:	88 ec       	ldi	r24, 0xC8	; 200
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	9a 8b       	std	Y+18, r25	; 0x12
    1c26:	89 8b       	std	Y+17, r24	; 0x11
    1c28:	89 89       	ldd	r24, Y+17	; 0x11
    1c2a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	f1 f7       	brne	.-4      	; 0x1c2c <Dashboard_FrameTwo+0xb8>
    1c30:	9a 8b       	std	Y+18, r25	; 0x12
    1c32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c34:	8b 89       	ldd	r24, Y+19	; 0x13
    1c36:	9c 89       	ldd	r25, Y+20	; 0x14
    1c38:	01 97       	sbiw	r24, 0x01	; 1
    1c3a:	9c 8b       	std	Y+20, r25	; 0x14
    1c3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c40:	9c 89       	ldd	r25, Y+20	; 0x14
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	69 f7       	brne	.-38     	; 0x1c20 <Dashboard_FrameTwo+0xac>
    1c46:	14 c0       	rjmp	.+40     	; 0x1c70 <Dashboard_FrameTwo+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c48:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c54:	dc 01       	movw	r26, r24
    1c56:	cb 01       	movw	r24, r22
    1c58:	9c 8b       	std	Y+20, r25	; 0x14
    1c5a:	8b 8b       	std	Y+19, r24	; 0x13
    1c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c60:	98 8b       	std	Y+16, r25	; 0x10
    1c62:	8f 87       	std	Y+15, r24	; 0x0f
    1c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c66:	98 89       	ldd	r25, Y+16	; 0x10
    1c68:	01 97       	sbiw	r24, 0x01	; 1
    1c6a:	f1 f7       	brne	.-4      	; 0x1c68 <Dashboard_FrameTwo+0xf4>
    1c6c:	98 8b       	std	Y+16, r25	; 0x10
    1c6e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20); // Wait for LCD to clear
	LCD_voidWriteString((u8*)"Temp = "); // Display "Temp = " on the LCD
    1c70:	8f e7       	ldi	r24, 0x7F	; 127
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
	u16 previousTempValue = 0xFFFF; // Initialize previous temperature value to an out-of-range value
    1c78:	8f ef       	ldi	r24, 0xFF	; 255
    1c7a:	9f ef       	ldi	r25, 0xFF	; 255
    1c7c:	9a a3       	std	Y+34, r25	; 0x22
    1c7e:	89 a3       	std	Y+33, r24	; 0x21
	u16 Local_u16DigitalValue, Local_u16AnalogValue, Local_u16TempValue; // Declare variables

	while (1) // Infinite loop to continuously monitor temperature
	{
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0, &Local_u16DigitalValue); // Read ADC value from temperature sensor
    1c80:	9e 01       	movw	r18, r28
    1c82:	2d 5d       	subi	r18, 0xDD	; 221
    1c84:	3f 4f       	sbci	r19, 0xFF	; 255
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	b9 01       	movw	r22, r18
    1c8a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <ADC_u8GetDigitalValueSynchNonBlocking>
		Local_u16AnalogValue = (u16)((Local_u16DigitalValue * 2560UL) / 1024); // Convert ADC value to analog voltage
    1c8e:	8b a1       	ldd	r24, Y+35	; 0x23
    1c90:	9c a1       	ldd	r25, Y+36	; 0x24
    1c92:	cc 01       	movw	r24, r24
    1c94:	a0 e0       	ldi	r26, 0x00	; 0
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	3a e0       	ldi	r19, 0x0A	; 10
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	50 e0       	ldi	r21, 0x00	; 0
    1ca0:	bc 01       	movw	r22, r24
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	0e 94 6e 22 	call	0x44dc	; 0x44dc <__mulsi3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	07 2e       	mov	r0, r23
    1cae:	7a e0       	ldi	r23, 0x0A	; 10
    1cb0:	b6 95       	lsr	r27
    1cb2:	a7 95       	ror	r26
    1cb4:	97 95       	ror	r25
    1cb6:	87 95       	ror	r24
    1cb8:	7a 95       	dec	r23
    1cba:	d1 f7       	brne	.-12     	; 0x1cb0 <Dashboard_FrameTwo+0x13c>
    1cbc:	70 2d       	mov	r23, r0
    1cbe:	98 a3       	std	Y+32, r25	; 0x20
    1cc0:	8f 8f       	std	Y+31, r24	; 0x1f
		Local_u16TempValue = Local_u16AnalogValue / 10; // Convert analog voltage to temperature in degrees Celsius
    1cc2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cc4:	98 a1       	ldd	r25, Y+32	; 0x20
    1cc6:	2a e0       	ldi	r18, 0x0A	; 10
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	b9 01       	movw	r22, r18
    1ccc:	0e 94 8d 22 	call	0x451a	; 0x451a <__udivmodhi4>
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	9e 8f       	std	Y+30, r25	; 0x1e
    1cd4:	8d 8f       	std	Y+29, r24	; 0x1d

		// Check if the current temperature value is different from the previous one
		if (((s16)(Local_u16TempValue - previousTempValue) > 0) || ((s16)(Local_u16TempValue - previousTempValue) < 0))
    1cd6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1cd8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1cda:	89 a1       	ldd	r24, Y+33	; 0x21
    1cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cde:	a9 01       	movw	r20, r18
    1ce0:	48 1b       	sub	r20, r24
    1ce2:	59 0b       	sbc	r21, r25
    1ce4:	ca 01       	movw	r24, r20
    1ce6:	18 16       	cp	r1, r24
    1ce8:	19 06       	cpc	r1, r25
    1cea:	5c f0       	brlt	.+22     	; 0x1d02 <Dashboard_FrameTwo+0x18e>
    1cec:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1cee:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1cf0:	89 a1       	ldd	r24, Y+33	; 0x21
    1cf2:	9a a1       	ldd	r25, Y+34	; 0x22
    1cf4:	a9 01       	movw	r20, r18
    1cf6:	48 1b       	sub	r20, r24
    1cf8:	59 0b       	sbc	r21, r25
    1cfa:	ca 01       	movw	r24, r20
    1cfc:	99 23       	and	r25, r25
    1cfe:	0c f0       	brlt	.+2      	; 0x1d02 <Dashboard_FrameTwo+0x18e>
    1d00:	bf cf       	rjmp	.-130    	; 0x1c80 <Dashboard_FrameTwo+0x10c>
		{
			// Update the LCD display only if the temperature has changed significantly
			LCD_voidClearScreen(); // Clear the LCD screen
    1d02:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	a0 ea       	ldi	r26, 0xA0	; 160
    1d0c:	b1 e4       	ldi	r27, 0x41	; 65
    1d0e:	8b 87       	std	Y+11, r24	; 0x0b
    1d10:	9c 87       	std	Y+12, r25	; 0x0c
    1d12:	ad 87       	std	Y+13, r26	; 0x0d
    1d14:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d16:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d18:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	4a ef       	ldi	r20, 0xFA	; 250
    1d24:	54 e4       	ldi	r21, 0x44	; 68
    1d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	8f 83       	std	Y+7, r24	; 0x07
    1d30:	98 87       	std	Y+8, r25	; 0x08
    1d32:	a9 87       	std	Y+9, r26	; 0x09
    1d34:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d36:	6f 81       	ldd	r22, Y+7	; 0x07
    1d38:	78 85       	ldd	r23, Y+8	; 0x08
    1d3a:	89 85       	ldd	r24, Y+9	; 0x09
    1d3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e8       	ldi	r20, 0x80	; 128
    1d44:	5f e3       	ldi	r21, 0x3F	; 63
    1d46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d4a:	88 23       	and	r24, r24
    1d4c:	2c f4       	brge	.+10     	; 0x1d58 <Dashboard_FrameTwo+0x1e4>
		__ticks = 1;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	9e 83       	std	Y+6, r25	; 0x06
    1d54:	8d 83       	std	Y+5, r24	; 0x05
    1d56:	3f c0       	rjmp	.+126    	; 0x1dd6 <Dashboard_FrameTwo+0x262>
	else if (__tmp > 65535)
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	3f ef       	ldi	r19, 0xFF	; 255
    1d64:	4f e7       	ldi	r20, 0x7F	; 127
    1d66:	57 e4       	ldi	r21, 0x47	; 71
    1d68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d6c:	18 16       	cp	r1, r24
    1d6e:	4c f5       	brge	.+82     	; 0x1dc2 <Dashboard_FrameTwo+0x24e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d78:	20 e0       	ldi	r18, 0x00	; 0
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	40 e2       	ldi	r20, 0x20	; 32
    1d7e:	51 e4       	ldi	r21, 0x41	; 65
    1d80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d84:	dc 01       	movw	r26, r24
    1d86:	cb 01       	movw	r24, r22
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	9e 83       	std	Y+6, r25	; 0x06
    1d96:	8d 83       	std	Y+5, r24	; 0x05
    1d98:	0f c0       	rjmp	.+30     	; 0x1db8 <Dashboard_FrameTwo+0x244>
    1d9a:	88 ec       	ldi	r24, 0xC8	; 200
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	9c 83       	std	Y+4, r25	; 0x04
    1da0:	8b 83       	std	Y+3, r24	; 0x03
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	9c 81       	ldd	r25, Y+4	; 0x04
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <Dashboard_FrameTwo+0x232>
    1daa:	9c 83       	std	Y+4, r25	; 0x04
    1dac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dae:	8d 81       	ldd	r24, Y+5	; 0x05
    1db0:	9e 81       	ldd	r25, Y+6	; 0x06
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	9e 83       	std	Y+6, r25	; 0x06
    1db6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	00 97       	sbiw	r24, 0x00	; 0
    1dbe:	69 f7       	brne	.-38     	; 0x1d9a <Dashboard_FrameTwo+0x226>
    1dc0:	14 c0       	rjmp	.+40     	; 0x1dea <Dashboard_FrameTwo+0x276>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc4:	78 85       	ldd	r23, Y+8	; 0x08
    1dc6:	89 85       	ldd	r24, Y+9	; 0x09
    1dc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	9e 83       	std	Y+6, r25	; 0x06
    1dd4:	8d 83       	std	Y+5, r24	; 0x05
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dda:	9a 83       	std	Y+2, r25	; 0x02
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	9a 81       	ldd	r25, Y+2	; 0x02
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <Dashboard_FrameTwo+0x26e>
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20); // Wait for LCD to clear
			LCD_voidWriteString((u8*)"Temp = "); // Display "Temp = " on the LCD
    1dea:	8f e7       	ldi	r24, 0x7F	; 127
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
			LCD_voidWriteNumber((u32)Local_u16TempValue); // Display the current temperature value on the LCD
    1df2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df6:	cc 01       	movw	r24, r24
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	bc 01       	movw	r22, r24
    1dfe:	cd 01       	movw	r24, r26
    1e00:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <LCD_voidWriteNumber>

			previousTempValue = Local_u16TempValue; // Update previous temperature value
    1e04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e08:	9a a3       	std	Y+34, r25	; 0x22
    1e0a:	89 a3       	std	Y+33, r24	; 0x21
    1e0c:	39 cf       	rjmp	.-398    	; 0x1c80 <Dashboard_FrameTwo+0x10c>

00001e0e <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	cd b7       	in	r28, 0x3d	; 61
    1e14:	de b7       	in	r29, 0x3e	; 62
    1e16:	66 97       	sbiw	r28, 0x16	; 22
    1e18:	0f b6       	in	r0, 0x3f	; 63
    1e1a:	f8 94       	cli
    1e1c:	de bf       	out	0x3e, r29	; 62
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	cd bf       	out	0x3d, r28	; 61
    1e22:	9e 8b       	std	Y+22, r25	; 0x16
    1e24:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	8b 8b       	std	Y+19, r24	; 0x13
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    1e2a:	18 8a       	std	Y+16, r1	; 0x10
	if(Copy_pu8ReturnedKey != NULL)
    1e2c:	8d 89       	ldd	r24, Y+21	; 0x15
    1e2e:	9e 89       	ldd	r25, Y+22	; 0x16
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <KPD_u8GetKeyState+0x28>
    1e34:	f0 c0       	rjmp	.+480    	; 0x2016 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    1e36:	ed 89       	ldd	r30, Y+21	; 0x15
    1e38:	fe 89       	ldd	r31, Y+22	; 0x16
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    1e3e:	1a 8a       	std	Y+18, r1	; 0x12
    1e40:	e5 c0       	rjmp	.+458    	; 0x200c <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    1e42:	8a 89       	ldd	r24, Y+18	; 0x12
    1e44:	88 2f       	mov	r24, r24
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	fc 01       	movw	r30, r24
    1e4a:	ec 5e       	subi	r30, 0xEC	; 236
    1e4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1e4e:	90 81       	ld	r25, Z
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	69 2f       	mov	r22, r25
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    1e5a:	19 8a       	std	Y+17, r1	; 0x11
    1e5c:	c1 c0       	rjmp	.+386    	; 0x1fe0 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1e5e:	89 89       	ldd	r24, Y+17	; 0x11
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	fc 01       	movw	r30, r24
    1e66:	e8 5e       	subi	r30, 0xE8	; 232
    1e68:	fe 4f       	sbci	r31, 0xFE	; 254
    1e6a:	90 81       	ld	r25, Z
    1e6c:	9e 01       	movw	r18, r28
    1e6e:	2c 5e       	subi	r18, 0xEC	; 236
    1e70:	3f 4f       	sbci	r19, 0xFF	; 255
    1e72:	82 e0       	ldi	r24, 0x02	; 2
    1e74:	69 2f       	mov	r22, r25
    1e76:	a9 01       	movw	r20, r18
    1e78:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    1e7c:	8c 89       	ldd	r24, Y+20	; 0x14
    1e7e:	88 23       	and	r24, r24
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <KPD_u8GetKeyState+0x76>
    1e82:	ab c0       	rjmp	.+342    	; 0x1fda <KPD_u8GetKeyState+0x1cc>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a0 ea       	ldi	r26, 0xA0	; 160
    1e8a:	b1 e4       	ldi	r27, 0x41	; 65
    1e8c:	8b 87       	std	Y+11, r24	; 0x0b
    1e8e:	9c 87       	std	Y+12, r25	; 0x0c
    1e90:	ad 87       	std	Y+13, r26	; 0x0d
    1e92:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	4a ef       	ldi	r20, 0xFA	; 250
    1ea2:	54 e4       	ldi	r21, 0x44	; 68
    1ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	8f 83       	std	Y+7, r24	; 0x07
    1eae:	98 87       	std	Y+8, r25	; 0x08
    1eb0:	a9 87       	std	Y+9, r26	; 0x09
    1eb2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb6:	78 85       	ldd	r23, Y+8	; 0x08
    1eb8:	89 85       	ldd	r24, Y+9	; 0x09
    1eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	40 e8       	ldi	r20, 0x80	; 128
    1ec2:	5f e3       	ldi	r21, 0x3F	; 63
    1ec4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ec8:	88 23       	and	r24, r24
    1eca:	2c f4       	brge	.+10     	; 0x1ed6 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	3f c0       	rjmp	.+126    	; 0x1f54 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1ed6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed8:	78 85       	ldd	r23, Y+8	; 0x08
    1eda:	89 85       	ldd	r24, Y+9	; 0x09
    1edc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	3f ef       	ldi	r19, 0xFF	; 255
    1ee2:	4f e7       	ldi	r20, 0x7F	; 127
    1ee4:	57 e4       	ldi	r21, 0x47	; 71
    1ee6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eea:	18 16       	cp	r1, r24
    1eec:	4c f5       	brge	.+82     	; 0x1f40 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e2       	ldi	r20, 0x20	; 32
    1efc:	51 e4       	ldi	r21, 0x41	; 65
    1efe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f02:	dc 01       	movw	r26, r24
    1f04:	cb 01       	movw	r24, r22
    1f06:	bc 01       	movw	r22, r24
    1f08:	cd 01       	movw	r24, r26
    1f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0e:	dc 01       	movw	r26, r24
    1f10:	cb 01       	movw	r24, r22
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	0f c0       	rjmp	.+30     	; 0x1f36 <KPD_u8GetKeyState+0x128>
    1f18:	88 ec       	ldi	r24, 0xC8	; 200
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	9c 83       	std	Y+4, r25	; 0x04
    1f1e:	8b 83       	std	Y+3, r24	; 0x03
    1f20:	8b 81       	ldd	r24, Y+3	; 0x03
    1f22:	9c 81       	ldd	r25, Y+4	; 0x04
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	f1 f7       	brne	.-4      	; 0x1f24 <KPD_u8GetKeyState+0x116>
    1f28:	9c 83       	std	Y+4, r25	; 0x04
    1f2a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f36:	8d 81       	ldd	r24, Y+5	; 0x05
    1f38:	9e 81       	ldd	r25, Y+6	; 0x06
    1f3a:	00 97       	sbiw	r24, 0x00	; 0
    1f3c:	69 f7       	brne	.-38     	; 0x1f18 <KPD_u8GetKeyState+0x10a>
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f40:	6f 81       	ldd	r22, Y+7	; 0x07
    1f42:	78 85       	ldd	r23, Y+8	; 0x08
    1f44:	89 85       	ldd	r24, Y+9	; 0x09
    1f46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4c:	dc 01       	movw	r26, r24
    1f4e:	cb 01       	movw	r24, r22
    1f50:	9e 83       	std	Y+6, r25	; 0x06
    1f52:	8d 83       	std	Y+5, r24	; 0x05
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	9e 81       	ldd	r25, Y+6	; 0x06
    1f58:	9a 83       	std	Y+2, r25	; 0x02
    1f5a:	89 83       	std	Y+1, r24	; 0x01
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	01 97       	sbiw	r24, 0x01	; 1
    1f62:	f1 f7       	brne	.-4      	; 0x1f60 <KPD_u8GetKeyState+0x152>
    1f64:	9a 83       	std	Y+2, r25	; 0x02
    1f66:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1f68:	89 89       	ldd	r24, Y+17	; 0x11
    1f6a:	88 2f       	mov	r24, r24
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	fc 01       	movw	r30, r24
    1f70:	e8 5e       	subi	r30, 0xE8	; 232
    1f72:	fe 4f       	sbci	r31, 0xFE	; 254
    1f74:	90 81       	ld	r25, Z
    1f76:	9e 01       	movw	r18, r28
    1f78:	2c 5e       	subi	r18, 0xEC	; 236
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	82 e0       	ldi	r24, 0x02	; 2
    1f7e:	69 2f       	mov	r22, r25
    1f80:	a9 01       	movw	r20, r18
    1f82:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_u8GetPinValue>
    1f86:	0f c0       	rjmp	.+30     	; 0x1fa6 <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1f88:	89 89       	ldd	r24, Y+17	; 0x11
    1f8a:	88 2f       	mov	r24, r24
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	fc 01       	movw	r30, r24
    1f90:	e8 5e       	subi	r30, 0xE8	; 232
    1f92:	fe 4f       	sbci	r31, 0xFE	; 254
    1f94:	90 81       	ld	r25, Z
    1f96:	9e 01       	movw	r18, r28
    1f98:	2c 5e       	subi	r18, 0xEC	; 236
    1f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	69 2f       	mov	r22, r25
    1fa0:	a9 01       	movw	r20, r18
    1fa2:	0e 94 33 0a 	call	0x1466	; 0x1466 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    1fa6:	8c 89       	ldd	r24, Y+20	; 0x14
    1fa8:	88 23       	and	r24, r24
    1faa:	71 f3       	breq	.-36     	; 0x1f88 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    1fac:	8a 89       	ldd	r24, Y+18	; 0x12
    1fae:	48 2f       	mov	r20, r24
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	89 89       	ldd	r24, Y+17	; 0x11
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	ca 01       	movw	r24, r20
    1fba:	88 0f       	add	r24, r24
    1fbc:	99 1f       	adc	r25, r25
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	82 0f       	add	r24, r18
    1fc4:	93 1f       	adc	r25, r19
    1fc6:	fc 01       	movw	r30, r24
    1fc8:	ec 5f       	subi	r30, 0xFC	; 252
    1fca:	fe 4f       	sbci	r31, 0xFE	; 254
    1fcc:	80 81       	ld	r24, Z
    1fce:	ed 89       	ldd	r30, Y+21	; 0x15
    1fd0:	fe 89       	ldd	r31, Y+22	; 0x16
    1fd2:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	88 8b       	std	Y+16, r24	; 0x10
    1fd8:	07 c0       	rjmp	.+14     	; 0x1fe8 <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    1fda:	89 89       	ldd	r24, Y+17	; 0x11
    1fdc:	8f 5f       	subi	r24, 0xFF	; 255
    1fde:	89 8b       	std	Y+17, r24	; 0x11
    1fe0:	89 89       	ldd	r24, Y+17	; 0x11
    1fe2:	84 30       	cpi	r24, 0x04	; 4
    1fe4:	08 f4       	brcc	.+2      	; 0x1fe8 <KPD_u8GetKeyState+0x1da>
    1fe6:	3b cf       	rjmp	.-394    	; 0x1e5e <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row*/
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    1fe8:	8a 89       	ldd	r24, Y+18	; 0x12
    1fea:	88 2f       	mov	r24, r24
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	fc 01       	movw	r30, r24
    1ff0:	ec 5e       	subi	r30, 0xEC	; 236
    1ff2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ff4:	90 81       	ld	r25, Z
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	69 2f       	mov	r22, r25
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    2000:	88 89       	ldd	r24, Y+16	; 0x10
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	49 f0       	breq	.+18     	; 0x2018 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    2006:	8a 89       	ldd	r24, Y+18	; 0x12
    2008:	8f 5f       	subi	r24, 0xFF	; 255
    200a:	8a 8b       	std	Y+18, r24	; 0x12
    200c:	8a 89       	ldd	r24, Y+18	; 0x12
    200e:	84 30       	cpi	r24, 0x04	; 4
    2010:	08 f4       	brcc	.+2      	; 0x2014 <KPD_u8GetKeyState+0x206>
    2012:	17 cf       	rjmp	.-466    	; 0x1e42 <KPD_u8GetKeyState+0x34>
    2014:	01 c0       	rjmp	.+2      	; 0x2018 <KPD_u8GetKeyState+0x20a>


	}
	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    2016:	1f 86       	std	Y+15, r1	; 0x0f
	}
	return Local_u8ErrorState;
    2018:	8b 89       	ldd	r24, Y+19	; 0x13
    201a:	66 96       	adiw	r28, 0x16	; 22
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	f8 94       	cli
    2020:	de bf       	out	0x3e, r29	; 62
    2022:	0f be       	out	0x3f, r0	; 63
    2024:	cd bf       	out	0x3d, r28	; 61
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	08 95       	ret

0000202c <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	df 93       	push	r29
    2032:	cf 93       	push	r28
    2034:	cd b7       	in	r28, 0x3d	; 61
    2036:	de b7       	in	r29, 0x3e	; 62
    2038:	cc 54       	subi	r28, 0x4C	; 76
    203a:	d0 40       	sbci	r29, 0x00	; 0
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	f8 94       	cli
    2040:	de bf       	out	0x3e, r29	; 62
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	cd bf       	out	0x3d, r28	; 61
    2046:	fe 01       	movw	r30, r28
    2048:	e7 5b       	subi	r30, 0xB7	; 183
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	ac e0       	ldi	r26, 0x0C	; 12
    2052:	b2 e4       	ldi	r27, 0x42	; 66
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205c:	8e 01       	movw	r16, r28
    205e:	0b 5b       	subi	r16, 0xBB	; 187
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	fe 01       	movw	r30, r28
    2064:	e7 5b       	subi	r30, 0xB7	; 183
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a ef       	ldi	r20, 0xFA	; 250
    2076:	54 e4       	ldi	r21, 0x44	; 68
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	f8 01       	movw	r30, r16
    2082:	80 83       	st	Z, r24
    2084:	91 83       	std	Z+1, r25	; 0x01
    2086:	a2 83       	std	Z+2, r26	; 0x02
    2088:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208a:	fe 01       	movw	r30, r28
    208c:	eb 5b       	subi	r30, 0xBB	; 187
    208e:	ff 4f       	sbci	r31, 0xFF	; 255
    2090:	60 81       	ld	r22, Z
    2092:	71 81       	ldd	r23, Z+1	; 0x01
    2094:	82 81       	ldd	r24, Z+2	; 0x02
    2096:	93 81       	ldd	r25, Z+3	; 0x03
    2098:	20 e0       	ldi	r18, 0x00	; 0
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	40 e8       	ldi	r20, 0x80	; 128
    209e:	5f e3       	ldi	r21, 0x3F	; 63
    20a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a4:	88 23       	and	r24, r24
    20a6:	44 f4       	brge	.+16     	; 0x20b8 <LCD_voidInit+0x8c>
		__ticks = 1;
    20a8:	fe 01       	movw	r30, r28
    20aa:	ed 5b       	subi	r30, 0xBD	; 189
    20ac:	ff 4f       	sbci	r31, 0xFF	; 255
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	91 83       	std	Z+1, r25	; 0x01
    20b4:	80 83       	st	Z, r24
    20b6:	64 c0       	rjmp	.+200    	; 0x2180 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    20b8:	fe 01       	movw	r30, r28
    20ba:	eb 5b       	subi	r30, 0xBB	; 187
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	0c f0       	brlt	.+2      	; 0x20d8 <LCD_voidInit+0xac>
    20d6:	43 c0       	rjmp	.+134    	; 0x215e <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d8:	fe 01       	movw	r30, r28
    20da:	e7 5b       	subi	r30, 0xB7	; 183
    20dc:	ff 4f       	sbci	r31, 0xFF	; 255
    20de:	60 81       	ld	r22, Z
    20e0:	71 81       	ldd	r23, Z+1	; 0x01
    20e2:	82 81       	ldd	r24, Z+2	; 0x02
    20e4:	93 81       	ldd	r25, Z+3	; 0x03
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e2       	ldi	r20, 0x20	; 32
    20ec:	51 e4       	ldi	r21, 0x41	; 65
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8e 01       	movw	r16, r28
    20f8:	0d 5b       	subi	r16, 0xBD	; 189
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2104:	dc 01       	movw	r26, r24
    2106:	cb 01       	movw	r24, r22
    2108:	f8 01       	movw	r30, r16
    210a:	91 83       	std	Z+1, r25	; 0x01
    210c:	80 83       	st	Z, r24
    210e:	1f c0       	rjmp	.+62     	; 0x214e <LCD_voidInit+0x122>
    2110:	fe 01       	movw	r30, r28
    2112:	ef 5b       	subi	r30, 0xBF	; 191
    2114:	ff 4f       	sbci	r31, 0xFF	; 255
    2116:	88 ec       	ldi	r24, 0xC8	; 200
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	91 83       	std	Z+1, r25	; 0x01
    211c:	80 83       	st	Z, r24
    211e:	fe 01       	movw	r30, r28
    2120:	ef 5b       	subi	r30, 0xBF	; 191
    2122:	ff 4f       	sbci	r31, 0xFF	; 255
    2124:	80 81       	ld	r24, Z
    2126:	91 81       	ldd	r25, Z+1	; 0x01
    2128:	01 97       	sbiw	r24, 0x01	; 1
    212a:	f1 f7       	brne	.-4      	; 0x2128 <LCD_voidInit+0xfc>
    212c:	fe 01       	movw	r30, r28
    212e:	ef 5b       	subi	r30, 0xBF	; 191
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2136:	de 01       	movw	r26, r28
    2138:	ad 5b       	subi	r26, 0xBD	; 189
    213a:	bf 4f       	sbci	r27, 0xFF	; 255
    213c:	fe 01       	movw	r30, r28
    213e:	ed 5b       	subi	r30, 0xBD	; 189
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	80 81       	ld	r24, Z
    2144:	91 81       	ldd	r25, Z+1	; 0x01
    2146:	01 97       	sbiw	r24, 0x01	; 1
    2148:	11 96       	adiw	r26, 0x01	; 1
    214a:	9c 93       	st	X, r25
    214c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    214e:	fe 01       	movw	r30, r28
    2150:	ed 5b       	subi	r30, 0xBD	; 189
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 81       	ld	r24, Z
    2156:	91 81       	ldd	r25, Z+1	; 0x01
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	d1 f6       	brne	.-76     	; 0x2110 <LCD_voidInit+0xe4>
    215c:	24 c0       	rjmp	.+72     	; 0x21a6 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	8e 01       	movw	r16, r28
    2160:	0d 5b       	subi	r16, 0xBD	; 189
    2162:	1f 4f       	sbci	r17, 0xFF	; 255
    2164:	fe 01       	movw	r30, r28
    2166:	eb 5b       	subi	r30, 0xBB	; 187
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	f8 01       	movw	r30, r16
    217c:	91 83       	std	Z+1, r25	; 0x01
    217e:	80 83       	st	Z, r24
    2180:	fe 01       	movw	r30, r28
    2182:	ed 5b       	subi	r30, 0xBD	; 189
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 81       	ld	r24, Z
    2188:	91 81       	ldd	r25, Z+1	; 0x01
    218a:	fe 01       	movw	r30, r28
    218c:	ff 96       	adiw	r30, 0x3f	; 63
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	fe 01       	movw	r30, r28
    2194:	ff 96       	adiw	r30, 0x3f	; 63
    2196:	80 81       	ld	r24, Z
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <LCD_voidInit+0x16e>
    219e:	fe 01       	movw	r30, r28
    21a0:	ff 96       	adiw	r30, 0x3f	; 63
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    21a6:	88 e3       	ldi	r24, 0x38	; 56
    21a8:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 e2       	ldi	r26, 0x20	; 32
    21b2:	b2 e4       	ldi	r27, 0x42	; 66
    21b4:	8b af       	std	Y+59, r24	; 0x3b
    21b6:	9c af       	std	Y+60, r25	; 0x3c
    21b8:	ad af       	std	Y+61, r26	; 0x3d
    21ba:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21bc:	6b ad       	ldd	r22, Y+59	; 0x3b
    21be:	7c ad       	ldd	r23, Y+60	; 0x3c
    21c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    21c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    21c4:	2b ea       	ldi	r18, 0xAB	; 171
    21c6:	3a ea       	ldi	r19, 0xAA	; 170
    21c8:	4a e2       	ldi	r20, 0x2A	; 42
    21ca:	50 e4       	ldi	r21, 0x40	; 64
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8f ab       	std	Y+55, r24	; 0x37
    21d6:	98 af       	std	Y+56, r25	; 0x38
    21d8:	a9 af       	std	Y+57, r26	; 0x39
    21da:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    21dc:	6f a9       	ldd	r22, Y+55	; 0x37
    21de:	78 ad       	ldd	r23, Y+56	; 0x38
    21e0:	89 ad       	ldd	r24, Y+57	; 0x39
    21e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	1c f4       	brge	.+6      	; 0x21fa <LCD_voidInit+0x1ce>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	8e ab       	std	Y+54, r24	; 0x36
    21f8:	91 c0       	rjmp	.+290    	; 0x231c <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    21fa:	6f a9       	ldd	r22, Y+55	; 0x37
    21fc:	78 ad       	ldd	r23, Y+56	; 0x38
    21fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2200:	9a ad       	ldd	r25, Y+58	; 0x3a
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	4f e7       	ldi	r20, 0x7F	; 127
    2208:	53 e4       	ldi	r21, 0x43	; 67
    220a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    220e:	18 16       	cp	r1, r24
    2210:	0c f0       	brlt	.+2      	; 0x2214 <LCD_voidInit+0x1e8>
    2212:	7b c0       	rjmp	.+246    	; 0x230a <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2214:	6b ad       	ldd	r22, Y+59	; 0x3b
    2216:	7c ad       	ldd	r23, Y+60	; 0x3c
    2218:	8d ad       	ldd	r24, Y+61	; 0x3d
    221a:	9e ad       	ldd	r25, Y+62	; 0x3e
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4a e7       	ldi	r20, 0x7A	; 122
    2222:	54 e4       	ldi	r21, 0x44	; 68
    2224:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8a ab       	std	Y+50, r24	; 0x32
    222e:	9b ab       	std	Y+51, r25	; 0x33
    2230:	ac ab       	std	Y+52, r26	; 0x34
    2232:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2234:	6a a9       	ldd	r22, Y+50	; 0x32
    2236:	7b a9       	ldd	r23, Y+51	; 0x33
    2238:	8c a9       	ldd	r24, Y+52	; 0x34
    223a:	9d a9       	ldd	r25, Y+53	; 0x35
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4a ef       	ldi	r20, 0xFA	; 250
    2242:	54 e4       	ldi	r21, 0x44	; 68
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	8e a7       	std	Y+46, r24	; 0x2e
    224e:	9f a7       	std	Y+47, r25	; 0x2f
    2250:	a8 ab       	std	Y+48, r26	; 0x30
    2252:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2254:	6e a5       	ldd	r22, Y+46	; 0x2e
    2256:	7f a5       	ldd	r23, Y+47	; 0x2f
    2258:	88 a9       	ldd	r24, Y+48	; 0x30
    225a:	99 a9       	ldd	r25, Y+49	; 0x31
    225c:	20 e0       	ldi	r18, 0x00	; 0
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	40 e8       	ldi	r20, 0x80	; 128
    2262:	5f e3       	ldi	r21, 0x3F	; 63
    2264:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2268:	88 23       	and	r24, r24
    226a:	2c f4       	brge	.+10     	; 0x2276 <LCD_voidInit+0x24a>
		__ticks = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	9d a7       	std	Y+45, r25	; 0x2d
    2272:	8c a7       	std	Y+44, r24	; 0x2c
    2274:	3f c0       	rjmp	.+126    	; 0x22f4 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2276:	6e a5       	ldd	r22, Y+46	; 0x2e
    2278:	7f a5       	ldd	r23, Y+47	; 0x2f
    227a:	88 a9       	ldd	r24, Y+48	; 0x30
    227c:	99 a9       	ldd	r25, Y+49	; 0x31
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	3f ef       	ldi	r19, 0xFF	; 255
    2282:	4f e7       	ldi	r20, 0x7F	; 127
    2284:	57 e4       	ldi	r21, 0x47	; 71
    2286:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    228a:	18 16       	cp	r1, r24
    228c:	4c f5       	brge	.+82     	; 0x22e0 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228e:	6a a9       	ldd	r22, Y+50	; 0x32
    2290:	7b a9       	ldd	r23, Y+51	; 0x33
    2292:	8c a9       	ldd	r24, Y+52	; 0x34
    2294:	9d a9       	ldd	r25, Y+53	; 0x35
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e2       	ldi	r20, 0x20	; 32
    229c:	51 e4       	ldi	r21, 0x41	; 65
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	bc 01       	movw	r22, r24
    22a8:	cd 01       	movw	r24, r26
    22aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ae:	dc 01       	movw	r26, r24
    22b0:	cb 01       	movw	r24, r22
    22b2:	9d a7       	std	Y+45, r25	; 0x2d
    22b4:	8c a7       	std	Y+44, r24	; 0x2c
    22b6:	0f c0       	rjmp	.+30     	; 0x22d6 <LCD_voidInit+0x2aa>
    22b8:	88 ec       	ldi	r24, 0xC8	; 200
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	9b a7       	std	Y+43, r25	; 0x2b
    22be:	8a a7       	std	Y+42, r24	; 0x2a
    22c0:	8a a5       	ldd	r24, Y+42	; 0x2a
    22c2:	9b a5       	ldd	r25, Y+43	; 0x2b
    22c4:	01 97       	sbiw	r24, 0x01	; 1
    22c6:	f1 f7       	brne	.-4      	; 0x22c4 <LCD_voidInit+0x298>
    22c8:	9b a7       	std	Y+43, r25	; 0x2b
    22ca:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    22ce:	9d a5       	ldd	r25, Y+45	; 0x2d
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	9d a7       	std	Y+45, r25	; 0x2d
    22d4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d6:	8c a5       	ldd	r24, Y+44	; 0x2c
    22d8:	9d a5       	ldd	r25, Y+45	; 0x2d
    22da:	00 97       	sbiw	r24, 0x00	; 0
    22dc:	69 f7       	brne	.-38     	; 0x22b8 <LCD_voidInit+0x28c>
    22de:	24 c0       	rjmp	.+72     	; 0x2328 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22e0:	6e a5       	ldd	r22, Y+46	; 0x2e
    22e2:	7f a5       	ldd	r23, Y+47	; 0x2f
    22e4:	88 a9       	ldd	r24, Y+48	; 0x30
    22e6:	99 a9       	ldd	r25, Y+49	; 0x31
    22e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	9d a7       	std	Y+45, r25	; 0x2d
    22f2:	8c a7       	std	Y+44, r24	; 0x2c
    22f4:	8c a5       	ldd	r24, Y+44	; 0x2c
    22f6:	9d a5       	ldd	r25, Y+45	; 0x2d
    22f8:	99 a7       	std	Y+41, r25	; 0x29
    22fa:	88 a7       	std	Y+40, r24	; 0x28
    22fc:	88 a5       	ldd	r24, Y+40	; 0x28
    22fe:	99 a5       	ldd	r25, Y+41	; 0x29
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <LCD_voidInit+0x2d4>
    2304:	99 a7       	std	Y+41, r25	; 0x29
    2306:	88 a7       	std	Y+40, r24	; 0x28
    2308:	0f c0       	rjmp	.+30     	; 0x2328 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    230a:	6f a9       	ldd	r22, Y+55	; 0x37
    230c:	78 ad       	ldd	r23, Y+56	; 0x38
    230e:	89 ad       	ldd	r24, Y+57	; 0x39
    2310:	9a ad       	ldd	r25, Y+58	; 0x3a
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8e ab       	std	Y+54, r24	; 0x36
    231c:	8e a9       	ldd	r24, Y+54	; 0x36
    231e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2320:	8f a1       	ldd	r24, Y+39	; 0x27
    2322:	8a 95       	dec	r24
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_voidInit+0x2f6>
    2326:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    2328:	8e e0       	ldi	r24, 0x0E	; 14
    232a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	a0 e2       	ldi	r26, 0x20	; 32
    2334:	b2 e4       	ldi	r27, 0x42	; 66
    2336:	8b a3       	std	Y+35, r24	; 0x23
    2338:	9c a3       	std	Y+36, r25	; 0x24
    233a:	ad a3       	std	Y+37, r26	; 0x25
    233c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    233e:	6b a1       	ldd	r22, Y+35	; 0x23
    2340:	7c a1       	ldd	r23, Y+36	; 0x24
    2342:	8d a1       	ldd	r24, Y+37	; 0x25
    2344:	9e a1       	ldd	r25, Y+38	; 0x26
    2346:	2b ea       	ldi	r18, 0xAB	; 171
    2348:	3a ea       	ldi	r19, 0xAA	; 170
    234a:	4a e2       	ldi	r20, 0x2A	; 42
    234c:	50 e4       	ldi	r21, 0x40	; 64
    234e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	8f 8f       	std	Y+31, r24	; 0x1f
    2358:	98 a3       	std	Y+32, r25	; 0x20
    235a:	a9 a3       	std	Y+33, r26	; 0x21
    235c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    235e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2360:	78 a1       	ldd	r23, Y+32	; 0x20
    2362:	89 a1       	ldd	r24, Y+33	; 0x21
    2364:	9a a1       	ldd	r25, Y+34	; 0x22
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	40 e8       	ldi	r20, 0x80	; 128
    236c:	5f e3       	ldi	r21, 0x3F	; 63
    236e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2372:	88 23       	and	r24, r24
    2374:	1c f4       	brge	.+6      	; 0x237c <LCD_voidInit+0x350>
		__ticks = 1;
    2376:	81 e0       	ldi	r24, 0x01	; 1
    2378:	8e 8f       	std	Y+30, r24	; 0x1e
    237a:	91 c0       	rjmp	.+290    	; 0x249e <LCD_voidInit+0x472>
	else if (__tmp > 255)
    237c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    237e:	78 a1       	ldd	r23, Y+32	; 0x20
    2380:	89 a1       	ldd	r24, Y+33	; 0x21
    2382:	9a a1       	ldd	r25, Y+34	; 0x22
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	30 e0       	ldi	r19, 0x00	; 0
    2388:	4f e7       	ldi	r20, 0x7F	; 127
    238a:	53 e4       	ldi	r21, 0x43	; 67
    238c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2390:	18 16       	cp	r1, r24
    2392:	0c f0       	brlt	.+2      	; 0x2396 <LCD_voidInit+0x36a>
    2394:	7b c0       	rjmp	.+246    	; 0x248c <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2396:	6b a1       	ldd	r22, Y+35	; 0x23
    2398:	7c a1       	ldd	r23, Y+36	; 0x24
    239a:	8d a1       	ldd	r24, Y+37	; 0x25
    239c:	9e a1       	ldd	r25, Y+38	; 0x26
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a e7       	ldi	r20, 0x7A	; 122
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8a 8f       	std	Y+26, r24	; 0x1a
    23b0:	9b 8f       	std	Y+27, r25	; 0x1b
    23b2:	ac 8f       	std	Y+28, r26	; 0x1c
    23b4:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	6a 8d       	ldd	r22, Y+26	; 0x1a
    23b8:	7b 8d       	ldd	r23, Y+27	; 0x1b
    23ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
    23bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a ef       	ldi	r20, 0xFA	; 250
    23c4:	54 e4       	ldi	r21, 0x44	; 68
    23c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8e 8b       	std	Y+22, r24	; 0x16
    23d0:	9f 8b       	std	Y+23, r25	; 0x17
    23d2:	a8 8f       	std	Y+24, r26	; 0x18
    23d4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    23d6:	6e 89       	ldd	r22, Y+22	; 0x16
    23d8:	7f 89       	ldd	r23, Y+23	; 0x17
    23da:	88 8d       	ldd	r24, Y+24	; 0x18
    23dc:	99 8d       	ldd	r25, Y+25	; 0x19
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <LCD_voidInit+0x3cc>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9d 8b       	std	Y+21, r25	; 0x15
    23f4:	8c 8b       	std	Y+20, r24	; 0x14
    23f6:	3f c0       	rjmp	.+126    	; 0x2476 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    23f8:	6e 89       	ldd	r22, Y+22	; 0x16
    23fa:	7f 89       	ldd	r23, Y+23	; 0x17
    23fc:	88 8d       	ldd	r24, Y+24	; 0x18
    23fe:	99 8d       	ldd	r25, Y+25	; 0x19
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	4c f5       	brge	.+82     	; 0x2462 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2412:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2414:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2416:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9d 8b       	std	Y+21, r25	; 0x15
    2436:	8c 8b       	std	Y+20, r24	; 0x14
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_voidInit+0x42c>
    243a:	88 ec       	ldi	r24, 0xC8	; 200
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9b 8b       	std	Y+19, r25	; 0x13
    2440:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2442:	8a 89       	ldd	r24, Y+18	; 0x12
    2444:	9b 89       	ldd	r25, Y+19	; 0x13
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_voidInit+0x41a>
    244a:	9b 8b       	std	Y+19, r25	; 0x13
    244c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	8c 89       	ldd	r24, Y+20	; 0x14
    2450:	9d 89       	ldd	r25, Y+21	; 0x15
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9d 8b       	std	Y+21, r25	; 0x15
    2456:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	8c 89       	ldd	r24, Y+20	; 0x14
    245a:	9d 89       	ldd	r25, Y+21	; 0x15
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_voidInit+0x40e>
    2460:	24 c0       	rjmp	.+72     	; 0x24aa <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	6e 89       	ldd	r22, Y+22	; 0x16
    2464:	7f 89       	ldd	r23, Y+23	; 0x17
    2466:	88 8d       	ldd	r24, Y+24	; 0x18
    2468:	99 8d       	ldd	r25, Y+25	; 0x19
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9d 8b       	std	Y+21, r25	; 0x15
    2474:	8c 8b       	std	Y+20, r24	; 0x14
    2476:	8c 89       	ldd	r24, Y+20	; 0x14
    2478:	9d 89       	ldd	r25, Y+21	; 0x15
    247a:	99 8b       	std	Y+17, r25	; 0x11
    247c:	88 8b       	std	Y+16, r24	; 0x10
    247e:	88 89       	ldd	r24, Y+16	; 0x10
    2480:	99 89       	ldd	r25, Y+17	; 0x11
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_voidInit+0x456>
    2486:	99 8b       	std	Y+17, r25	; 0x11
    2488:	88 8b       	std	Y+16, r24	; 0x10
    248a:	0f c0       	rjmp	.+30     	; 0x24aa <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    248c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    248e:	78 a1       	ldd	r23, Y+32	; 0x20
    2490:	89 a1       	ldd	r24, Y+33	; 0x21
    2492:	9a a1       	ldd	r25, Y+34	; 0x22
    2494:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2498:	dc 01       	movw	r26, r24
    249a:	cb 01       	movw	r24, r22
    249c:	8e 8f       	std	Y+30, r24	; 0x1e
    249e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24a0:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a4:	8a 95       	dec	r24
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <LCD_voidInit+0x478>
    24a8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e4       	ldi	r27, 0x40	; 64
    24b8:	8b 87       	std	Y+11, r24	; 0x0b
    24ba:	9c 87       	std	Y+12, r25	; 0x0c
    24bc:	ad 87       	std	Y+13, r26	; 0x0d
    24be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a ef       	ldi	r20, 0xFA	; 250
    24ce:	54 e4       	ldi	r21, 0x44	; 68
    24d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	98 87       	std	Y+8, r25	; 0x08
    24dc:	a9 87       	std	Y+9, r26	; 0x09
    24de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <LCD_voidInit+0x4d6>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <LCD_voidInit+0x536>
    2544:	88 ec       	ldi	r24, 0xC8	; 200
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_voidInit+0x524>
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <LCD_voidInit+0x518>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_voidInit+0x560>
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    2594:	86 e0       	ldi	r24, 0x06	; 6
    2596:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>


}
    259a:	c4 5b       	subi	r28, 0xB4	; 180
    259c:	df 4f       	sbci	r29, 0xFF	; 255
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	cf 91       	pop	r28
    25aa:	df 91       	pop	r29
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	08 95       	ret

000025b2 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	e1 97       	sbiw	r28, 0x31	; 49
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	40 e0       	ldi	r20, 0x00	; 0
    25ce:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	61 e0       	ldi	r22, 0x01	; 1
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    25dc:	83 e0       	ldi	r24, 0x03	; 3
    25de:	69 a9       	ldd	r22, Y+49	; 0x31
    25e0:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a0 e8       	ldi	r26, 0x80	; 128
    25f4:	bf e3       	ldi	r27, 0x3F	; 63
    25f6:	8d a7       	std	Y+45, r24	; 0x2d
    25f8:	9e a7       	std	Y+46, r25	; 0x2e
    25fa:	af a7       	std	Y+47, r26	; 0x2f
    25fc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25fe:	6d a5       	ldd	r22, Y+45	; 0x2d
    2600:	7e a5       	ldd	r23, Y+46	; 0x2e
    2602:	8f a5       	ldd	r24, Y+47	; 0x2f
    2604:	98 a9       	ldd	r25, Y+48	; 0x30
    2606:	2b ea       	ldi	r18, 0xAB	; 171
    2608:	3a ea       	ldi	r19, 0xAA	; 170
    260a:	4a e2       	ldi	r20, 0x2A	; 42
    260c:	50 e4       	ldi	r21, 0x40	; 64
    260e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	89 a7       	std	Y+41, r24	; 0x29
    2618:	9a a7       	std	Y+42, r25	; 0x2a
    261a:	ab a7       	std	Y+43, r26	; 0x2b
    261c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    261e:	69 a5       	ldd	r22, Y+41	; 0x29
    2620:	7a a5       	ldd	r23, Y+42	; 0x2a
    2622:	8b a5       	ldd	r24, Y+43	; 0x2b
    2624:	9c a5       	ldd	r25, Y+44	; 0x2c
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e8       	ldi	r20, 0x80	; 128
    262c:	5f e3       	ldi	r21, 0x3F	; 63
    262e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2632:	88 23       	and	r24, r24
    2634:	1c f4       	brge	.+6      	; 0x263c <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	88 a7       	std	Y+40, r24	; 0x28
    263a:	91 c0       	rjmp	.+290    	; 0x275e <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    263c:	69 a5       	ldd	r22, Y+41	; 0x29
    263e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2640:	8b a5       	ldd	r24, Y+43	; 0x2b
    2642:	9c a5       	ldd	r25, Y+44	; 0x2c
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	4f e7       	ldi	r20, 0x7F	; 127
    264a:	53 e4       	ldi	r21, 0x43	; 67
    264c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2650:	18 16       	cp	r1, r24
    2652:	0c f0       	brlt	.+2      	; 0x2656 <LCD_voidSendCmnd+0xa4>
    2654:	7b c0       	rjmp	.+246    	; 0x274c <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2656:	6d a5       	ldd	r22, Y+45	; 0x2d
    2658:	7e a5       	ldd	r23, Y+46	; 0x2e
    265a:	8f a5       	ldd	r24, Y+47	; 0x2f
    265c:	98 a9       	ldd	r25, Y+48	; 0x30
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	4a e7       	ldi	r20, 0x7A	; 122
    2664:	54 e4       	ldi	r21, 0x44	; 68
    2666:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8c a3       	std	Y+36, r24	; 0x24
    2670:	9d a3       	std	Y+37, r25	; 0x25
    2672:	ae a3       	std	Y+38, r26	; 0x26
    2674:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2676:	6c a1       	ldd	r22, Y+36	; 0x24
    2678:	7d a1       	ldd	r23, Y+37	; 0x25
    267a:	8e a1       	ldd	r24, Y+38	; 0x26
    267c:	9f a1       	ldd	r25, Y+39	; 0x27
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	4a ef       	ldi	r20, 0xFA	; 250
    2684:	54 e4       	ldi	r21, 0x44	; 68
    2686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	88 a3       	std	Y+32, r24	; 0x20
    2690:	99 a3       	std	Y+33, r25	; 0x21
    2692:	aa a3       	std	Y+34, r26	; 0x22
    2694:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2696:	68 a1       	ldd	r22, Y+32	; 0x20
    2698:	79 a1       	ldd	r23, Y+33	; 0x21
    269a:	8a a1       	ldd	r24, Y+34	; 0x22
    269c:	9b a1       	ldd	r25, Y+35	; 0x23
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9f 8f       	std	Y+31, r25	; 0x1f
    26b4:	8e 8f       	std	Y+30, r24	; 0x1e
    26b6:	3f c0       	rjmp	.+126    	; 0x2736 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    26b8:	68 a1       	ldd	r22, Y+32	; 0x20
    26ba:	79 a1       	ldd	r23, Y+33	; 0x21
    26bc:	8a a1       	ldd	r24, Y+34	; 0x22
    26be:	9b a1       	ldd	r25, Y+35	; 0x23
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	3f ef       	ldi	r19, 0xFF	; 255
    26c4:	4f e7       	ldi	r20, 0x7F	; 127
    26c6:	57 e4       	ldi	r21, 0x47	; 71
    26c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26cc:	18 16       	cp	r1, r24
    26ce:	4c f5       	brge	.+82     	; 0x2722 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d0:	6c a1       	ldd	r22, Y+36	; 0x24
    26d2:	7d a1       	ldd	r23, Y+37	; 0x25
    26d4:	8e a1       	ldd	r24, Y+38	; 0x26
    26d6:	9f a1       	ldd	r25, Y+39	; 0x27
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9f 8f       	std	Y+31, r25	; 0x1f
    26f6:	8e 8f       	std	Y+30, r24	; 0x1e
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <LCD_voidSendCmnd+0x166>
    26fa:	88 ec       	ldi	r24, 0xC8	; 200
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9d 8f       	std	Y+29, r25	; 0x1d
    2700:	8c 8f       	std	Y+28, r24	; 0x1c
    2702:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2704:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <LCD_voidSendCmnd+0x154>
    270a:	9d 8f       	std	Y+29, r25	; 0x1d
    270c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2710:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	9f 8f       	std	Y+31, r25	; 0x1f
    2716:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2718:	8e 8d       	ldd	r24, Y+30	; 0x1e
    271a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	69 f7       	brne	.-38     	; 0x26fa <LCD_voidSendCmnd+0x148>
    2720:	24 c0       	rjmp	.+72     	; 0x276a <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	68 a1       	ldd	r22, Y+32	; 0x20
    2724:	79 a1       	ldd	r23, Y+33	; 0x21
    2726:	8a a1       	ldd	r24, Y+34	; 0x22
    2728:	9b a1       	ldd	r25, Y+35	; 0x23
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9f 8f       	std	Y+31, r25	; 0x1f
    2734:	8e 8f       	std	Y+30, r24	; 0x1e
    2736:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2738:	9f 8d       	ldd	r25, Y+31	; 0x1f
    273a:	9b 8f       	std	Y+27, r25	; 0x1b
    273c:	8a 8f       	std	Y+26, r24	; 0x1a
    273e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2740:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <LCD_voidSendCmnd+0x190>
    2746:	9b 8f       	std	Y+27, r25	; 0x1b
    2748:	8a 8f       	std	Y+26, r24	; 0x1a
    274a:	0f c0       	rjmp	.+30     	; 0x276a <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    274c:	69 a5       	ldd	r22, Y+41	; 0x29
    274e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2750:	8b a5       	ldd	r24, Y+43	; 0x2b
    2752:	9c a5       	ldd	r25, Y+44	; 0x2c
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	88 a7       	std	Y+40, r24	; 0x28
    275e:	88 a5       	ldd	r24, Y+40	; 0x28
    2760:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2762:	89 8d       	ldd	r24, Y+25	; 0x19
    2764:	8a 95       	dec	r24
    2766:	f1 f7       	brne	.-4      	; 0x2764 <LCD_voidSendCmnd+0x1b2>
    2768:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	62 e0       	ldi	r22, 0x02	; 2
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a0 e8       	ldi	r26, 0x80	; 128
    277a:	bf e3       	ldi	r27, 0x3F	; 63
    277c:	8d 8b       	std	Y+21, r24	; 0x15
    277e:	9e 8b       	std	Y+22, r25	; 0x16
    2780:	af 8b       	std	Y+23, r26	; 0x17
    2782:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2784:	6d 89       	ldd	r22, Y+21	; 0x15
    2786:	7e 89       	ldd	r23, Y+22	; 0x16
    2788:	8f 89       	ldd	r24, Y+23	; 0x17
    278a:	98 8d       	ldd	r25, Y+24	; 0x18
    278c:	2b ea       	ldi	r18, 0xAB	; 171
    278e:	3a ea       	ldi	r19, 0xAA	; 170
    2790:	4a e2       	ldi	r20, 0x2A	; 42
    2792:	50 e4       	ldi	r21, 0x40	; 64
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	89 8b       	std	Y+17, r24	; 0x11
    279e:	9a 8b       	std	Y+18, r25	; 0x12
    27a0:	ab 8b       	std	Y+19, r26	; 0x13
    27a2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    27a4:	69 89       	ldd	r22, Y+17	; 0x11
    27a6:	7a 89       	ldd	r23, Y+18	; 0x12
    27a8:	8b 89       	ldd	r24, Y+19	; 0x13
    27aa:	9c 89       	ldd	r25, Y+20	; 0x14
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	1c f4       	brge	.+6      	; 0x27c2 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	88 8b       	std	Y+16, r24	; 0x10
    27c0:	91 c0       	rjmp	.+290    	; 0x28e4 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    27c2:	69 89       	ldd	r22, Y+17	; 0x11
    27c4:	7a 89       	ldd	r23, Y+18	; 0x12
    27c6:	8b 89       	ldd	r24, Y+19	; 0x13
    27c8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4f e7       	ldi	r20, 0x7F	; 127
    27d0:	53 e4       	ldi	r21, 0x43	; 67
    27d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	0c f0       	brlt	.+2      	; 0x27dc <LCD_voidSendCmnd+0x22a>
    27da:	7b c0       	rjmp	.+246    	; 0x28d2 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    27dc:	6d 89       	ldd	r22, Y+21	; 0x15
    27de:	7e 89       	ldd	r23, Y+22	; 0x16
    27e0:	8f 89       	ldd	r24, Y+23	; 0x17
    27e2:	98 8d       	ldd	r25, Y+24	; 0x18
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4a e7       	ldi	r20, 0x7A	; 122
    27ea:	54 e4       	ldi	r21, 0x44	; 68
    27ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8c 87       	std	Y+12, r24	; 0x0c
    27f6:	9d 87       	std	Y+13, r25	; 0x0d
    27f8:	ae 87       	std	Y+14, r26	; 0x0e
    27fa:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    27fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    2800:	8e 85       	ldd	r24, Y+14	; 0x0e
    2802:	9f 85       	ldd	r25, Y+15	; 0x0f
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a ef       	ldi	r20, 0xFA	; 250
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	88 87       	std	Y+8, r24	; 0x08
    2816:	99 87       	std	Y+9, r25	; 0x09
    2818:	aa 87       	std	Y+10, r26	; 0x0a
    281a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    281c:	68 85       	ldd	r22, Y+8	; 0x08
    281e:	79 85       	ldd	r23, Y+9	; 0x09
    2820:	8a 85       	ldd	r24, Y+10	; 0x0a
    2822:	9b 85       	ldd	r25, Y+11	; 0x0b
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9f 83       	std	Y+7, r25	; 0x07
    283a:	8e 83       	std	Y+6, r24	; 0x06
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    283e:	68 85       	ldd	r22, Y+8	; 0x08
    2840:	79 85       	ldd	r23, Y+9	; 0x09
    2842:	8a 85       	ldd	r24, Y+10	; 0x0a
    2844:	9b 85       	ldd	r25, Y+11	; 0x0b
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	6c 85       	ldd	r22, Y+12	; 0x0c
    2858:	7d 85       	ldd	r23, Y+13	; 0x0d
    285a:	8e 85       	ldd	r24, Y+14	; 0x0e
    285c:	9f 85       	ldd	r25, Y+15	; 0x0f
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9f 83       	std	Y+7, r25	; 0x07
    287c:	8e 83       	std	Y+6, r24	; 0x06
    287e:	0f c0       	rjmp	.+30     	; 0x289e <LCD_voidSendCmnd+0x2ec>
    2880:	88 ec       	ldi	r24, 0xC8	; 200
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9d 83       	std	Y+5, r25	; 0x05
    2886:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2888:	8c 81       	ldd	r24, Y+4	; 0x04
    288a:	9d 81       	ldd	r25, Y+5	; 0x05
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_voidSendCmnd+0x2da>
    2890:	9d 83       	std	Y+5, r25	; 0x05
    2892:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	8e 81       	ldd	r24, Y+6	; 0x06
    2896:	9f 81       	ldd	r25, Y+7	; 0x07
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9f 83       	std	Y+7, r25	; 0x07
    289c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	8e 81       	ldd	r24, Y+6	; 0x06
    28a0:	9f 81       	ldd	r25, Y+7	; 0x07
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <LCD_voidSendCmnd+0x2ce>
    28a6:	24 c0       	rjmp	.+72     	; 0x28f0 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	68 85       	ldd	r22, Y+8	; 0x08
    28aa:	79 85       	ldd	r23, Y+9	; 0x09
    28ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    28ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9f 83       	std	Y+7, r25	; 0x07
    28ba:	8e 83       	std	Y+6, r24	; 0x06
    28bc:	8e 81       	ldd	r24, Y+6	; 0x06
    28be:	9f 81       	ldd	r25, Y+7	; 0x07
    28c0:	9b 83       	std	Y+3, r25	; 0x03
    28c2:	8a 83       	std	Y+2, r24	; 0x02
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	9b 81       	ldd	r25, Y+3	; 0x03
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_voidSendCmnd+0x316>
    28cc:	9b 83       	std	Y+3, r25	; 0x03
    28ce:	8a 83       	std	Y+2, r24	; 0x02
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28d2:	69 89       	ldd	r22, Y+17	; 0x11
    28d4:	7a 89       	ldd	r23, Y+18	; 0x12
    28d6:	8b 89       	ldd	r24, Y+19	; 0x13
    28d8:	9c 89       	ldd	r25, Y+20	; 0x14
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	88 8b       	std	Y+16, r24	; 0x10
    28e4:	88 89       	ldd	r24, Y+16	; 0x10
    28e6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	8a 95       	dec	r24
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <LCD_voidSendCmnd+0x338>
    28ee:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    28f0:	e1 96       	adiw	r28, 0x31	; 49
    28f2:	0f b6       	in	r0, 0x3f	; 63
    28f4:	f8 94       	cli
    28f6:	de bf       	out	0x3e, r29	; 62
    28f8:	0f be       	out	0x3f, r0	; 63
    28fa:	cd bf       	out	0x3d, r28	; 61
    28fc:	cf 91       	pop	r28
    28fe:	df 91       	pop	r29
    2900:	08 95       	ret

00002902 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    2902:	df 93       	push	r29
    2904:	cf 93       	push	r28
    2906:	cd b7       	in	r28, 0x3d	; 61
    2908:	de b7       	in	r29, 0x3e	; 62
    290a:	e1 97       	sbiw	r28, 0x31	; 49
    290c:	0f b6       	in	r0, 0x3f	; 63
    290e:	f8 94       	cli
    2910:	de bf       	out	0x3e, r29	; 62
    2912:	0f be       	out	0x3f, r0	; 63
    2914:	cd bf       	out	0x3d, r28	; 61
    2916:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	61 e0       	ldi	r22, 0x01	; 1
    2926:	40 e0       	ldi	r20, 0x00	; 0
    2928:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    292c:	83 e0       	ldi	r24, 0x03	; 3
    292e:	69 a9       	ldd	r22, Y+49	; 0x31
    2930:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	62 e0       	ldi	r22, 0x02	; 2
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
    293e:	80 e0       	ldi	r24, 0x00	; 0
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	a0 e8       	ldi	r26, 0x80	; 128
    2944:	bf e3       	ldi	r27, 0x3F	; 63
    2946:	8d a7       	std	Y+45, r24	; 0x2d
    2948:	9e a7       	std	Y+46, r25	; 0x2e
    294a:	af a7       	std	Y+47, r26	; 0x2f
    294c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    294e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2950:	7e a5       	ldd	r23, Y+46	; 0x2e
    2952:	8f a5       	ldd	r24, Y+47	; 0x2f
    2954:	98 a9       	ldd	r25, Y+48	; 0x30
    2956:	2b ea       	ldi	r18, 0xAB	; 171
    2958:	3a ea       	ldi	r19, 0xAA	; 170
    295a:	4a e2       	ldi	r20, 0x2A	; 42
    295c:	50 e4       	ldi	r21, 0x40	; 64
    295e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2962:	dc 01       	movw	r26, r24
    2964:	cb 01       	movw	r24, r22
    2966:	89 a7       	std	Y+41, r24	; 0x29
    2968:	9a a7       	std	Y+42, r25	; 0x2a
    296a:	ab a7       	std	Y+43, r26	; 0x2b
    296c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    296e:	69 a5       	ldd	r22, Y+41	; 0x29
    2970:	7a a5       	ldd	r23, Y+42	; 0x2a
    2972:	8b a5       	ldd	r24, Y+43	; 0x2b
    2974:	9c a5       	ldd	r25, Y+44	; 0x2c
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e8       	ldi	r20, 0x80	; 128
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2982:	88 23       	and	r24, r24
    2984:	1c f4       	brge	.+6      	; 0x298c <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	88 a7       	std	Y+40, r24	; 0x28
    298a:	91 c0       	rjmp	.+290    	; 0x2aae <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    298c:	69 a5       	ldd	r22, Y+41	; 0x29
    298e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2990:	8b a5       	ldd	r24, Y+43	; 0x2b
    2992:	9c a5       	ldd	r25, Y+44	; 0x2c
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	4f e7       	ldi	r20, 0x7F	; 127
    299a:	53 e4       	ldi	r21, 0x43	; 67
    299c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a0:	18 16       	cp	r1, r24
    29a2:	0c f0       	brlt	.+2      	; 0x29a6 <LCD_voidSendChar+0xa4>
    29a4:	7b c0       	rjmp	.+246    	; 0x2a9c <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    29a6:	6d a5       	ldd	r22, Y+45	; 0x2d
    29a8:	7e a5       	ldd	r23, Y+46	; 0x2e
    29aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29ac:	98 a9       	ldd	r25, Y+48	; 0x30
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4a e7       	ldi	r20, 0x7A	; 122
    29b4:	54 e4       	ldi	r21, 0x44	; 68
    29b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	8c a3       	std	Y+36, r24	; 0x24
    29c0:	9d a3       	std	Y+37, r25	; 0x25
    29c2:	ae a3       	std	Y+38, r26	; 0x26
    29c4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	6c a1       	ldd	r22, Y+36	; 0x24
    29c8:	7d a1       	ldd	r23, Y+37	; 0x25
    29ca:	8e a1       	ldd	r24, Y+38	; 0x26
    29cc:	9f a1       	ldd	r25, Y+39	; 0x27
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4a ef       	ldi	r20, 0xFA	; 250
    29d4:	54 e4       	ldi	r21, 0x44	; 68
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	88 a3       	std	Y+32, r24	; 0x20
    29e0:	99 a3       	std	Y+33, r25	; 0x21
    29e2:	aa a3       	std	Y+34, r26	; 0x22
    29e4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    29e6:	68 a1       	ldd	r22, Y+32	; 0x20
    29e8:	79 a1       	ldd	r23, Y+33	; 0x21
    29ea:	8a a1       	ldd	r24, Y+34	; 0x22
    29ec:	9b a1       	ldd	r25, Y+35	; 0x23
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e8       	ldi	r20, 0x80	; 128
    29f4:	5f e3       	ldi	r21, 0x3F	; 63
    29f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29fa:	88 23       	and	r24, r24
    29fc:	2c f4       	brge	.+10     	; 0x2a08 <LCD_voidSendChar+0x106>
		__ticks = 1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	9f 8f       	std	Y+31, r25	; 0x1f
    2a04:	8e 8f       	std	Y+30, r24	; 0x1e
    2a06:	3f c0       	rjmp	.+126    	; 0x2a86 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2a08:	68 a1       	ldd	r22, Y+32	; 0x20
    2a0a:	79 a1       	ldd	r23, Y+33	; 0x21
    2a0c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a0e:	9b a1       	ldd	r25, Y+35	; 0x23
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f e7       	ldi	r20, 0x7F	; 127
    2a16:	57 e4       	ldi	r21, 0x47	; 71
    2a18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a1c:	18 16       	cp	r1, r24
    2a1e:	4c f5       	brge	.+82     	; 0x2a72 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a20:	6c a1       	ldd	r22, Y+36	; 0x24
    2a22:	7d a1       	ldd	r23, Y+37	; 0x25
    2a24:	8e a1       	ldd	r24, Y+38	; 0x26
    2a26:	9f a1       	ldd	r25, Y+39	; 0x27
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e2       	ldi	r20, 0x20	; 32
    2a2e:	51 e4       	ldi	r21, 0x41	; 65
    2a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	9f 8f       	std	Y+31, r25	; 0x1f
    2a46:	8e 8f       	std	Y+30, r24	; 0x1e
    2a48:	0f c0       	rjmp	.+30     	; 0x2a68 <LCD_voidSendChar+0x166>
    2a4a:	88 ec       	ldi	r24, 0xC8	; 200
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	9d 8f       	std	Y+29, r25	; 0x1d
    2a50:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <LCD_voidSendChar+0x154>
    2a5a:	9d 8f       	std	Y+29, r25	; 0x1d
    2a5c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	9f 8f       	std	Y+31, r25	; 0x1f
    2a66:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a68:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a6a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	69 f7       	brne	.-38     	; 0x2a4a <LCD_voidSendChar+0x148>
    2a70:	24 c0       	rjmp	.+72     	; 0x2aba <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a72:	68 a1       	ldd	r22, Y+32	; 0x20
    2a74:	79 a1       	ldd	r23, Y+33	; 0x21
    2a76:	8a a1       	ldd	r24, Y+34	; 0x22
    2a78:	9b a1       	ldd	r25, Y+35	; 0x23
    2a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	9f 8f       	std	Y+31, r25	; 0x1f
    2a84:	8e 8f       	std	Y+30, r24	; 0x1e
    2a86:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a8a:	9b 8f       	std	Y+27, r25	; 0x1b
    2a8c:	8a 8f       	std	Y+26, r24	; 0x1a
    2a8e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2a90:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <LCD_voidSendChar+0x190>
    2a96:	9b 8f       	std	Y+27, r25	; 0x1b
    2a98:	8a 8f       	std	Y+26, r24	; 0x1a
    2a9a:	0f c0       	rjmp	.+30     	; 0x2aba <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a9c:	69 a5       	ldd	r22, Y+41	; 0x29
    2a9e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2aa0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2aa2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2aa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	88 a7       	std	Y+40, r24	; 0x28
    2aae:	88 a5       	ldd	r24, Y+40	; 0x28
    2ab0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ab2:	89 8d       	ldd	r24, Y+25	; 0x19
    2ab4:	8a 95       	dec	r24
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_voidSendChar+0x1b2>
    2ab8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	62 e0       	ldi	r22, 0x02	; 2
    2abe:	40 e0       	ldi	r20, 0x00	; 0
    2ac0:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e8       	ldi	r26, 0x80	; 128
    2aca:	bf e3       	ldi	r27, 0x3F	; 63
    2acc:	8d 8b       	std	Y+21, r24	; 0x15
    2ace:	9e 8b       	std	Y+22, r25	; 0x16
    2ad0:	af 8b       	std	Y+23, r26	; 0x17
    2ad2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2ad4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ada:	98 8d       	ldd	r25, Y+24	; 0x18
    2adc:	2b ea       	ldi	r18, 0xAB	; 171
    2ade:	3a ea       	ldi	r19, 0xAA	; 170
    2ae0:	4a e2       	ldi	r20, 0x2A	; 42
    2ae2:	50 e4       	ldi	r21, 0x40	; 64
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	89 8b       	std	Y+17, r24	; 0x11
    2aee:	9a 8b       	std	Y+18, r25	; 0x12
    2af0:	ab 8b       	std	Y+19, r26	; 0x13
    2af2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2af4:	69 89       	ldd	r22, Y+17	; 0x11
    2af6:	7a 89       	ldd	r23, Y+18	; 0x12
    2af8:	8b 89       	ldd	r24, Y+19	; 0x13
    2afa:	9c 89       	ldd	r25, Y+20	; 0x14
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	1c f4       	brge	.+6      	; 0x2b12 <LCD_voidSendChar+0x210>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	88 8b       	std	Y+16, r24	; 0x10
    2b10:	91 c0       	rjmp	.+290    	; 0x2c34 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    2b12:	69 89       	ldd	r22, Y+17	; 0x11
    2b14:	7a 89       	ldd	r23, Y+18	; 0x12
    2b16:	8b 89       	ldd	r24, Y+19	; 0x13
    2b18:	9c 89       	ldd	r25, Y+20	; 0x14
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	4f e7       	ldi	r20, 0x7F	; 127
    2b20:	53 e4       	ldi	r21, 0x43	; 67
    2b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b26:	18 16       	cp	r1, r24
    2b28:	0c f0       	brlt	.+2      	; 0x2b2c <LCD_voidSendChar+0x22a>
    2b2a:	7b c0       	rjmp	.+246    	; 0x2c22 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2b2c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b30:	8f 89       	ldd	r24, Y+23	; 0x17
    2b32:	98 8d       	ldd	r25, Y+24	; 0x18
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4a e7       	ldi	r20, 0x7A	; 122
    2b3a:	54 e4       	ldi	r21, 0x44	; 68
    2b3c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	8c 87       	std	Y+12, r24	; 0x0c
    2b46:	9d 87       	std	Y+13, r25	; 0x0d
    2b48:	ae 87       	std	Y+14, r26	; 0x0e
    2b4a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b4c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b4e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b50:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b52:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	4a ef       	ldi	r20, 0xFA	; 250
    2b5a:	54 e4       	ldi	r21, 0x44	; 68
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	88 87       	std	Y+8, r24	; 0x08
    2b66:	99 87       	std	Y+9, r25	; 0x09
    2b68:	aa 87       	std	Y+10, r26	; 0x0a
    2b6a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b6c:	68 85       	ldd	r22, Y+8	; 0x08
    2b6e:	79 85       	ldd	r23, Y+9	; 0x09
    2b70:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b72:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	40 e8       	ldi	r20, 0x80	; 128
    2b7a:	5f e3       	ldi	r21, 0x3F	; 63
    2b7c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b80:	88 23       	and	r24, r24
    2b82:	2c f4       	brge	.+10     	; 0x2b8e <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2b84:	81 e0       	ldi	r24, 0x01	; 1
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	9f 83       	std	Y+7, r25	; 0x07
    2b8a:	8e 83       	std	Y+6, r24	; 0x06
    2b8c:	3f c0       	rjmp	.+126    	; 0x2c0c <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2b8e:	68 85       	ldd	r22, Y+8	; 0x08
    2b90:	79 85       	ldd	r23, Y+9	; 0x09
    2b92:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b94:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	3f ef       	ldi	r19, 0xFF	; 255
    2b9a:	4f e7       	ldi	r20, 0x7F	; 127
    2b9c:	57 e4       	ldi	r21, 0x47	; 71
    2b9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ba2:	18 16       	cp	r1, r24
    2ba4:	4c f5       	brge	.+82     	; 0x2bf8 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ba8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2baa:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bac:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e2       	ldi	r20, 0x20	; 32
    2bb4:	51 e4       	ldi	r21, 0x41	; 65
    2bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc6:	dc 01       	movw	r26, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	9f 83       	std	Y+7, r25	; 0x07
    2bcc:	8e 83       	std	Y+6, r24	; 0x06
    2bce:	0f c0       	rjmp	.+30     	; 0x2bee <LCD_voidSendChar+0x2ec>
    2bd0:	88 ec       	ldi	r24, 0xC8	; 200
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	9d 83       	std	Y+5, r25	; 0x05
    2bd6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    2bda:	9d 81       	ldd	r25, Y+5	; 0x05
    2bdc:	01 97       	sbiw	r24, 0x01	; 1
    2bde:	f1 f7       	brne	.-4      	; 0x2bdc <LCD_voidSendChar+0x2da>
    2be0:	9d 83       	std	Y+5, r25	; 0x05
    2be2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2be4:	8e 81       	ldd	r24, Y+6	; 0x06
    2be6:	9f 81       	ldd	r25, Y+7	; 0x07
    2be8:	01 97       	sbiw	r24, 0x01	; 1
    2bea:	9f 83       	std	Y+7, r25	; 0x07
    2bec:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bee:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf0:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf2:	00 97       	sbiw	r24, 0x00	; 0
    2bf4:	69 f7       	brne	.-38     	; 0x2bd0 <LCD_voidSendChar+0x2ce>
    2bf6:	24 c0       	rjmp	.+72     	; 0x2c40 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf8:	68 85       	ldd	r22, Y+8	; 0x08
    2bfa:	79 85       	ldd	r23, Y+9	; 0x09
    2bfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9f 83       	std	Y+7, r25	; 0x07
    2c0a:	8e 83       	std	Y+6, r24	; 0x06
    2c0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c10:	9b 83       	std	Y+3, r25	; 0x03
    2c12:	8a 83       	std	Y+2, r24	; 0x02
    2c14:	8a 81       	ldd	r24, Y+2	; 0x02
    2c16:	9b 81       	ldd	r25, Y+3	; 0x03
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <LCD_voidSendChar+0x316>
    2c1c:	9b 83       	std	Y+3, r25	; 0x03
    2c1e:	8a 83       	std	Y+2, r24	; 0x02
    2c20:	0f c0       	rjmp	.+30     	; 0x2c40 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c22:	69 89       	ldd	r22, Y+17	; 0x11
    2c24:	7a 89       	ldd	r23, Y+18	; 0x12
    2c26:	8b 89       	ldd	r24, Y+19	; 0x13
    2c28:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	88 8b       	std	Y+16, r24	; 0x10
    2c34:	88 89       	ldd	r24, Y+16	; 0x10
    2c36:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	8a 95       	dec	r24
    2c3c:	f1 f7       	brne	.-4      	; 0x2c3a <LCD_voidSendChar+0x338>
    2c3e:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    2c40:	e1 96       	adiw	r28, 0x31	; 49
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	de bf       	out	0x3e, r29	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	08 95       	ret

00002c52 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    2c52:	df 93       	push	r29
    2c54:	cf 93       	push	r28
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <LCD_voidWriteString+0x6>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	9a 83       	std	Y+2, r25	; 0x02
    2c5e:	89 83       	std	Y+1, r24	; 0x01
    2c60:	0a c0       	rjmp	.+20     	; 0x2c76 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    2c62:	e9 81       	ldd	r30, Y+1	; 0x01
    2c64:	fa 81       	ldd	r31, Y+2	; 0x02
    2c66:	80 81       	ld	r24, Z
    2c68:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	9a 83       	std	Y+2, r25	; 0x02
    2c74:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    2c76:	e9 81       	ldd	r30, Y+1	; 0x01
    2c78:	fa 81       	ldd	r31, Y+2	; 0x02
    2c7a:	80 81       	ld	r24, Z
    2c7c:	88 23       	and	r24, r24
    2c7e:	89 f7       	brne	.-30     	; 0x2c62 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	cf 91       	pop	r28
    2c86:	df 91       	pop	r29
    2c88:	08 95       	ret

00002c8a <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    2c8a:	0f 93       	push	r16
    2c8c:	1f 93       	push	r17
    2c8e:	df 93       	push	r29
    2c90:	cf 93       	push	r28
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	65 97       	sbiw	r28, 0x15	; 21
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	6a 8b       	std	Y+18, r22	; 0x12
    2ca4:	7b 8b       	std	Y+19, r23	; 0x13
    2ca6:	8c 8b       	std	Y+20, r24	; 0x14
    2ca8:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    2caa:	8f ef       	ldi	r24, 0xFF	; 255
    2cac:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    2cae:	8a 89       	ldd	r24, Y+18	; 0x12
    2cb0:	9b 89       	ldd	r25, Y+19	; 0x13
    2cb2:	ac 89       	ldd	r26, Y+20	; 0x14
    2cb4:	bd 89       	ldd	r27, Y+21	; 0x15
    2cb6:	00 97       	sbiw	r24, 0x00	; 0
    2cb8:	a1 05       	cpc	r26, r1
    2cba:	b1 05       	cpc	r27, r1
    2cbc:	99 f5       	brne	.+102    	; 0x2d24 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    2cbe:	80 e3       	ldi	r24, 0x30	; 48
    2cc0:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    2cc4:	4e c0       	rjmp	.+156    	; 0x2d62 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	8f 5f       	subi	r24, 0xFF	; 255
    2cca:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	08 2f       	mov	r16, r24
    2cd0:	11 27       	eor	r17, r17
    2cd2:	07 fd       	sbrc	r16, 7
    2cd4:	10 95       	com	r17
    2cd6:	8a 89       	ldd	r24, Y+18	; 0x12
    2cd8:	9b 89       	ldd	r25, Y+19	; 0x13
    2cda:	ac 89       	ldd	r26, Y+20	; 0x14
    2cdc:	bd 89       	ldd	r27, Y+21	; 0x15
    2cde:	2a e0       	ldi	r18, 0x0A	; 10
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodsi4>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	28 2f       	mov	r18, r24
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	03 96       	adiw	r24, 0x03	; 3
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	e0 0f       	add	r30, r16
    2cfc:	f1 1f       	adc	r31, r17
    2cfe:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    2d00:	8a 89       	ldd	r24, Y+18	; 0x12
    2d02:	9b 89       	ldd	r25, Y+19	; 0x13
    2d04:	ac 89       	ldd	r26, Y+20	; 0x14
    2d06:	bd 89       	ldd	r27, Y+21	; 0x15
    2d08:	2a e0       	ldi	r18, 0x0A	; 10
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	50 e0       	ldi	r21, 0x00	; 0
    2d10:	bc 01       	movw	r22, r24
    2d12:	cd 01       	movw	r24, r26
    2d14:	0e 94 a1 22 	call	0x4542	; 0x4542 <__udivmodsi4>
    2d18:	da 01       	movw	r26, r20
    2d1a:	c9 01       	movw	r24, r18
    2d1c:	8a 8b       	std	Y+18, r24	; 0x12
    2d1e:	9b 8b       	std	Y+19, r25	; 0x13
    2d20:	ac 8b       	std	Y+20, r26	; 0x14
    2d22:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    2d24:	8a 89       	ldd	r24, Y+18	; 0x12
    2d26:	9b 89       	ldd	r25, Y+19	; 0x13
    2d28:	ac 89       	ldd	r26, Y+20	; 0x14
    2d2a:	bd 89       	ldd	r27, Y+21	; 0x15
    2d2c:	00 97       	sbiw	r24, 0x00	; 0
    2d2e:	a1 05       	cpc	r26, r1
    2d30:	b1 05       	cpc	r27, r1
    2d32:	49 f6       	brne	.-110    	; 0x2cc6 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
    2d38:	11 c0       	rjmp	.+34     	; 0x2d5c <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	33 27       	eor	r19, r19
    2d40:	27 fd       	sbrc	r18, 7
    2d42:	30 95       	com	r19
    2d44:	ce 01       	movw	r24, r28
    2d46:	03 96       	adiw	r24, 0x03	; 3
    2d48:	fc 01       	movw	r30, r24
    2d4a:	e2 0f       	add	r30, r18
    2d4c:	f3 1f       	adc	r31, r19
    2d4e:	80 81       	ld	r24, Z
    2d50:	80 5d       	subi	r24, 0xD0	; 208
    2d52:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2d56:	89 81       	ldd	r24, Y+1	; 0x01
    2d58:	81 50       	subi	r24, 0x01	; 1
    2d5a:	89 83       	std	Y+1, r24	; 0x01
    2d5c:	89 81       	ldd	r24, Y+1	; 0x01
    2d5e:	88 23       	and	r24, r24
    2d60:	64 f7       	brge	.-40     	; 0x2d3a <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    2d62:	65 96       	adiw	r28, 0x15	; 21
    2d64:	0f b6       	in	r0, 0x3f	; 63
    2d66:	f8 94       	cli
    2d68:	de bf       	out	0x3e, r29	; 62
    2d6a:	0f be       	out	0x3f, r0	; 63
    2d6c:	cd bf       	out	0x3d, r28	; 61
    2d6e:	cf 91       	pop	r28
    2d70:	df 91       	pop	r29
    2d72:	1f 91       	pop	r17
    2d74:	0f 91       	pop	r16
    2d76:	08 95       	ret

00002d78 <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2d78:	df 93       	push	r29
    2d7a:	cf 93       	push	r28
    2d7c:	00 d0       	rcall	.+0      	; 0x2d7e <LCD_u8GoToXY+0x6>
    2d7e:	00 d0       	rcall	.+0      	; 0x2d80 <LCD_u8GoToXY+0x8>
    2d80:	0f 92       	push	r0
    2d82:	cd b7       	in	r28, 0x3d	; 61
    2d84:	de b7       	in	r29, 0x3e	; 62
    2d86:	8a 83       	std	Y+2, r24	; 0x02
    2d88:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    2d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d90:	88 32       	cpi	r24, 0x28	; 40
    2d92:	d8 f4       	brcc	.+54     	; 0x2dca <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2d94:	8a 81       	ldd	r24, Y+2	; 0x02
    2d96:	28 2f       	mov	r18, r24
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	3d 83       	std	Y+5, r19	; 0x05
    2d9c:	2c 83       	std	Y+4, r18	; 0x04
    2d9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2da0:	9d 81       	ldd	r25, Y+5	; 0x05
    2da2:	81 30       	cpi	r24, 0x01	; 1
    2da4:	91 05       	cpc	r25, r1
    2da6:	31 f0       	breq	.+12     	; 0x2db4 <LCD_u8GoToXY+0x3c>
    2da8:	2c 81       	ldd	r18, Y+4	; 0x04
    2daa:	3d 81       	ldd	r19, Y+5	; 0x05
    2dac:	22 30       	cpi	r18, 0x02	; 2
    2dae:	31 05       	cpc	r19, r1
    2db0:	31 f0       	breq	.+12     	; 0x2dbe <LCD_u8GoToXY+0x46>
    2db2:	0a c0       	rjmp	.+20     	; 0x2dc8 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2db4:	8b 81       	ldd	r24, Y+3	; 0x03
    2db6:	80 58       	subi	r24, 0x80	; 128
    2db8:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
    2dbc:	06 c0       	rjmp	.+12     	; 0x2dca <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	80 54       	subi	r24, 0x40	; 64
    2dc2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
    2dc6:	01 c0       	rjmp	.+2      	; 0x2dca <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2dc8:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dcc:	0f 90       	pop	r0
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
}
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	cd b7       	in	r28, 0x3d	; 61
    2df6:	de b7       	in	r29, 0x3e	; 62
    2df8:	2a 97       	sbiw	r28, 0x0a	; 10
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	8c 83       	std	Y+4, r24	; 0x04
    2e06:	7e 83       	std	Y+6, r23	; 0x06
    2e08:	6d 83       	std	Y+5, r22	; 0x05
    2e0a:	4f 83       	std	Y+7, r20	; 0x07
    2e0c:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2e0e:	81 e0       	ldi	r24, 0x01	; 1
    2e10:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    2e12:	88 e0       	ldi	r24, 0x08	; 8
    2e14:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    2e16:	8c 81       	ldd	r24, Y+4	; 0x04
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	3a 87       	std	Y+10, r19	; 0x0a
    2e1e:	29 87       	std	Y+9, r18	; 0x09
    2e20:	89 85       	ldd	r24, Y+9	; 0x09
    2e22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e24:	83 30       	cpi	r24, 0x03	; 3
    2e26:	91 05       	cpc	r25, r1
    2e28:	09 f4       	brne	.+2      	; 0x2e2c <LCD_voidWriteSpecialChar+0x3c>
    2e2a:	8c c0       	rjmp	.+280    	; 0x2f44 <LCD_voidWriteSpecialChar+0x154>
    2e2c:	29 85       	ldd	r18, Y+9	; 0x09
    2e2e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e30:	24 30       	cpi	r18, 0x04	; 4
    2e32:	31 05       	cpc	r19, r1
    2e34:	8c f4       	brge	.+34     	; 0x2e58 <LCD_voidWriteSpecialChar+0x68>
    2e36:	89 85       	ldd	r24, Y+9	; 0x09
    2e38:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3a:	81 30       	cpi	r24, 0x01	; 1
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <LCD_voidWriteSpecialChar+0x52>
    2e40:	43 c0       	rjmp	.+134    	; 0x2ec8 <LCD_voidWriteSpecialChar+0xd8>
    2e42:	29 85       	ldd	r18, Y+9	; 0x09
    2e44:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e46:	22 30       	cpi	r18, 0x02	; 2
    2e48:	31 05       	cpc	r19, r1
    2e4a:	0c f0       	brlt	.+2      	; 0x2e4e <LCD_voidWriteSpecialChar+0x5e>
    2e4c:	5c c0       	rjmp	.+184    	; 0x2f06 <LCD_voidWriteSpecialChar+0x116>
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e52:	00 97       	sbiw	r24, 0x00	; 0
    2e54:	d1 f0       	breq	.+52     	; 0x2e8a <LCD_voidWriteSpecialChar+0x9a>
    2e56:	11 c1       	rjmp	.+546    	; 0x307a <LCD_voidWriteSpecialChar+0x28a>
    2e58:	29 85       	ldd	r18, Y+9	; 0x09
    2e5a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e5c:	25 30       	cpi	r18, 0x05	; 5
    2e5e:	31 05       	cpc	r19, r1
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <LCD_voidWriteSpecialChar+0x74>
    2e62:	ae c0       	rjmp	.+348    	; 0x2fc0 <LCD_voidWriteSpecialChar+0x1d0>
    2e64:	89 85       	ldd	r24, Y+9	; 0x09
    2e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e68:	85 30       	cpi	r24, 0x05	; 5
    2e6a:	91 05       	cpc	r25, r1
    2e6c:	0c f4       	brge	.+2      	; 0x2e70 <LCD_voidWriteSpecialChar+0x80>
    2e6e:	89 c0       	rjmp	.+274    	; 0x2f82 <LCD_voidWriteSpecialChar+0x192>
    2e70:	29 85       	ldd	r18, Y+9	; 0x09
    2e72:	3a 85       	ldd	r19, Y+10	; 0x0a
    2e74:	26 30       	cpi	r18, 0x06	; 6
    2e76:	31 05       	cpc	r19, r1
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <LCD_voidWriteSpecialChar+0x8c>
    2e7a:	c1 c0       	rjmp	.+386    	; 0x2ffe <LCD_voidWriteSpecialChar+0x20e>
    2e7c:	89 85       	ldd	r24, Y+9	; 0x09
    2e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e80:	87 30       	cpi	r24, 0x07	; 7
    2e82:	91 05       	cpc	r25, r1
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <LCD_voidWriteSpecialChar+0x98>
    2e86:	da c0       	rjmp	.+436    	; 0x303c <LCD_voidWriteSpecialChar+0x24c>
    2e88:	f8 c0       	rjmp	.+496    	; 0x307a <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2e8a:	80 e4       	ldi	r24, 0x40	; 64
    2e8c:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2e90:	19 82       	std	Y+1, r1	; 0x01
    2e92:	0e c0       	rjmp	.+28     	; 0x2eb0 <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	28 2f       	mov	r18, r24
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	e2 0f       	add	r30, r18
    2ea2:	f3 1f       	adc	r31, r19
    2ea4:	80 81       	ld	r24, Z
    2ea6:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	8f 5f       	subi	r24, 0xFF	; 255
    2eae:	89 83       	std	Y+1, r24	; 0x01
    2eb0:	99 81       	ldd	r25, Y+1	; 0x01
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	98 17       	cp	r25, r24
    2eb6:	70 f3       	brcs	.-36     	; 0x2e94 <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2eb8:	8f 81       	ldd	r24, Y+7	; 0x07
    2eba:	68 85       	ldd	r22, Y+8	; 0x08
    2ebc:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2ec0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec2:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    2ec6:	da c0       	rjmp	.+436    	; 0x307c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2ec8:	88 e4       	ldi	r24, 0x48	; 72
    2eca:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2ece:	19 82       	std	Y+1, r1	; 0x01
    2ed0:	0e c0       	rjmp	.+28     	; 0x2eee <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	fc 01       	movw	r30, r24
    2ede:	e2 0f       	add	r30, r18
    2ee0:	f3 1f       	adc	r31, r19
    2ee2:	80 81       	ld	r24, Z
    2ee4:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	8f 5f       	subi	r24, 0xFF	; 255
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	99 81       	ldd	r25, Y+1	; 0x01
    2ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef2:	98 17       	cp	r25, r24
    2ef4:	70 f3       	brcs	.-36     	; 0x2ed2 <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef8:	68 85       	ldd	r22, Y+8	; 0x08
    2efa:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2efe:	8c 81       	ldd	r24, Y+4	; 0x04
    2f00:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    2f04:	bb c0       	rjmp	.+374    	; 0x307c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    2f06:	80 e5       	ldi	r24, 0x50	; 80
    2f08:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2f0c:	19 82       	std	Y+1, r1	; 0x01
    2f0e:	0e c0       	rjmp	.+28     	; 0x2f2c <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2f10:	89 81       	ldd	r24, Y+1	; 0x01
    2f12:	28 2f       	mov	r18, r24
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	8d 81       	ldd	r24, Y+5	; 0x05
    2f18:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	e2 0f       	add	r30, r18
    2f1e:	f3 1f       	adc	r31, r19
    2f20:	80 81       	ld	r24, Z
    2f22:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	8f 5f       	subi	r24, 0xFF	; 255
    2f2a:	89 83       	std	Y+1, r24	; 0x01
    2f2c:	99 81       	ldd	r25, Y+1	; 0x01
    2f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f30:	98 17       	cp	r25, r24
    2f32:	70 f3       	brcs	.-36     	; 0x2f10 <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2f34:	8f 81       	ldd	r24, Y+7	; 0x07
    2f36:	68 85       	ldd	r22, Y+8	; 0x08
    2f38:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3e:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    2f42:	9c c0       	rjmp	.+312    	; 0x307c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    2f44:	88 e5       	ldi	r24, 0x58	; 88
    2f46:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2f4a:	19 82       	std	Y+1, r1	; 0x01
    2f4c:	0e c0       	rjmp	.+28     	; 0x2f6a <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2f4e:	89 81       	ldd	r24, Y+1	; 0x01
    2f50:	28 2f       	mov	r18, r24
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	8d 81       	ldd	r24, Y+5	; 0x05
    2f56:	9e 81       	ldd	r25, Y+6	; 0x06
    2f58:	fc 01       	movw	r30, r24
    2f5a:	e2 0f       	add	r30, r18
    2f5c:	f3 1f       	adc	r31, r19
    2f5e:	80 81       	ld	r24, Z
    2f60:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	8f 5f       	subi	r24, 0xFF	; 255
    2f68:	89 83       	std	Y+1, r24	; 0x01
    2f6a:	99 81       	ldd	r25, Y+1	; 0x01
    2f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6e:	98 17       	cp	r25, r24
    2f70:	70 f3       	brcs	.-36     	; 0x2f4e <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2f72:	8f 81       	ldd	r24, Y+7	; 0x07
    2f74:	68 85       	ldd	r22, Y+8	; 0x08
    2f76:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7c:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    2f80:	7d c0       	rjmp	.+250    	; 0x307c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    2f82:	80 e6       	ldi	r24, 0x60	; 96
    2f84:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2f88:	19 82       	std	Y+1, r1	; 0x01
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2f8c:	89 81       	ldd	r24, Y+1	; 0x01
    2f8e:	28 2f       	mov	r18, r24
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	8d 81       	ldd	r24, Y+5	; 0x05
    2f94:	9e 81       	ldd	r25, Y+6	; 0x06
    2f96:	fc 01       	movw	r30, r24
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	80 81       	ld	r24, Z
    2f9e:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	8f 5f       	subi	r24, 0xFF	; 255
    2fa6:	89 83       	std	Y+1, r24	; 0x01
    2fa8:	99 81       	ldd	r25, Y+1	; 0x01
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	98 17       	cp	r25, r24
    2fae:	70 f3       	brcs	.-36     	; 0x2f8c <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2fb0:	8f 81       	ldd	r24, Y+7	; 0x07
    2fb2:	68 85       	ldd	r22, Y+8	; 0x08
    2fb4:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    2fba:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    2fbe:	5e c0       	rjmp	.+188    	; 0x307c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    2fc0:	88 e6       	ldi	r24, 0x68	; 104
    2fc2:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2fc6:	19 82       	std	Y+1, r1	; 0x01
    2fc8:	0e c0       	rjmp	.+28     	; 0x2fe6 <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2fca:	89 81       	ldd	r24, Y+1	; 0x01
    2fcc:	28 2f       	mov	r18, r24
    2fce:	30 e0       	ldi	r19, 0x00	; 0
    2fd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd4:	fc 01       	movw	r30, r24
    2fd6:	e2 0f       	add	r30, r18
    2fd8:	f3 1f       	adc	r31, r19
    2fda:	80 81       	ld	r24, Z
    2fdc:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	8f 5f       	subi	r24, 0xFF	; 255
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	99 81       	ldd	r25, Y+1	; 0x01
    2fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fea:	98 17       	cp	r25, r24
    2fec:	70 f3       	brcs	.-36     	; 0x2fca <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2fee:	8f 81       	ldd	r24, Y+7	; 0x07
    2ff0:	68 85       	ldd	r22, Y+8	; 0x08
    2ff2:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2ff6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ff8:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    2ffc:	3f c0       	rjmp	.+126    	; 0x307c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    2ffe:	80 e7       	ldi	r24, 0x70	; 112
    3000:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3004:	19 82       	std	Y+1, r1	; 0x01
    3006:	0e c0       	rjmp	.+28     	; 0x3024 <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	28 2f       	mov	r18, r24
    300c:	30 e0       	ldi	r19, 0x00	; 0
    300e:	8d 81       	ldd	r24, Y+5	; 0x05
    3010:	9e 81       	ldd	r25, Y+6	; 0x06
    3012:	fc 01       	movw	r30, r24
    3014:	e2 0f       	add	r30, r18
    3016:	f3 1f       	adc	r31, r19
    3018:	80 81       	ld	r24, Z
    301a:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	8f 5f       	subi	r24, 0xFF	; 255
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	99 81       	ldd	r25, Y+1	; 0x01
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	98 17       	cp	r25, r24
    302a:	70 f3       	brcs	.-36     	; 0x3008 <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    302c:	8f 81       	ldd	r24, Y+7	; 0x07
    302e:	68 85       	ldd	r22, Y+8	; 0x08
    3030:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3034:	8c 81       	ldd	r24, Y+4	; 0x04
    3036:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    303a:	20 c0       	rjmp	.+64     	; 0x307c <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    303c:	88 e7       	ldi	r24, 0x78	; 120
    303e:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3042:	19 82       	std	Y+1, r1	; 0x01
    3044:	0e c0       	rjmp	.+28     	; 0x3062 <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3046:	89 81       	ldd	r24, Y+1	; 0x01
    3048:	28 2f       	mov	r18, r24
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	8d 81       	ldd	r24, Y+5	; 0x05
    304e:	9e 81       	ldd	r25, Y+6	; 0x06
    3050:	fc 01       	movw	r30, r24
    3052:	e2 0f       	add	r30, r18
    3054:	f3 1f       	adc	r31, r19
    3056:	80 81       	ld	r24, Z
    3058:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    305c:	89 81       	ldd	r24, Y+1	; 0x01
    305e:	8f 5f       	subi	r24, 0xFF	; 255
    3060:	89 83       	std	Y+1, r24	; 0x01
    3062:	99 81       	ldd	r25, Y+1	; 0x01
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	98 17       	cp	r25, r24
    3068:	70 f3       	brcs	.-36     	; 0x3046 <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    306a:	8f 81       	ldd	r24, Y+7	; 0x07
    306c:	68 85       	ldd	r22, Y+8	; 0x08
    306e:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3072:	8c 81       	ldd	r24, Y+4	; 0x04
    3074:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    3078:	01 c0       	rjmp	.+2      	; 0x307c <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    307a:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    307c:	8b 81       	ldd	r24, Y+3	; 0x03
}
    307e:	2a 96       	adiw	r28, 0x0a	; 10
    3080:	0f b6       	in	r0, 0x3f	; 63
    3082:	f8 94       	cli
    3084:	de bf       	out	0x3e, r29	; 62
    3086:	0f be       	out	0x3f, r0	; 63
    3088:	cd bf       	out	0x3d, r28	; 61
    308a:	cf 91       	pop	r28
    308c:	df 91       	pop	r29
    308e:	08 95       	ret

00003090 <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    3090:	df 93       	push	r29
    3092:	cf 93       	push	r28
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	e1 97       	sbiw	r28, 0x31	; 49
    309a:	0f b6       	in	r0, 0x3f	; 63
    309c:	f8 94       	cli
    309e:	de bf       	out	0x3e, r29	; 62
    30a0:	0f be       	out	0x3f, r0	; 63
    30a2:	cd bf       	out	0x3d, r28	; 61
    30a4:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    30a6:	81 e0       	ldi	r24, 0x01	; 1
    30a8:	60 e0       	ldi	r22, 0x00	; 0
    30aa:	40 e0       	ldi	r20, 0x00	; 0
    30ac:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	61 e0       	ldi	r22, 0x01	; 1
    30b4:	40 e0       	ldi	r20, 0x00	; 0
    30b6:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    30ba:	89 a9       	ldd	r24, Y+49	; 0x31
    30bc:	98 2f       	mov	r25, r24
    30be:	92 95       	swap	r25
    30c0:	90 7f       	andi	r25, 0xF0	; 240
    30c2:	83 e0       	ldi	r24, 0x03	; 3
    30c4:	69 2f       	mov	r22, r25
    30c6:	0e 94 95 0b 	call	0x172a	; 0x172a <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	62 e0       	ldi	r22, 0x02	; 2
    30ce:	41 e0       	ldi	r20, 0x01	; 1
    30d0:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
    30d4:	80 e0       	ldi	r24, 0x00	; 0
    30d6:	90 e0       	ldi	r25, 0x00	; 0
    30d8:	a0 e8       	ldi	r26, 0x80	; 128
    30da:	bf e3       	ldi	r27, 0x3F	; 63
    30dc:	8d a7       	std	Y+45, r24	; 0x2d
    30de:	9e a7       	std	Y+46, r25	; 0x2e
    30e0:	af a7       	std	Y+47, r26	; 0x2f
    30e2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30e4:	6d a5       	ldd	r22, Y+45	; 0x2d
    30e6:	7e a5       	ldd	r23, Y+46	; 0x2e
    30e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    30ea:	98 a9       	ldd	r25, Y+48	; 0x30
    30ec:	2b ea       	ldi	r18, 0xAB	; 171
    30ee:	3a ea       	ldi	r19, 0xAA	; 170
    30f0:	4a e2       	ldi	r20, 0x2A	; 42
    30f2:	50 e4       	ldi	r21, 0x40	; 64
    30f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f8:	dc 01       	movw	r26, r24
    30fa:	cb 01       	movw	r24, r22
    30fc:	89 a7       	std	Y+41, r24	; 0x29
    30fe:	9a a7       	std	Y+42, r25	; 0x2a
    3100:	ab a7       	std	Y+43, r26	; 0x2b
    3102:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3104:	69 a5       	ldd	r22, Y+41	; 0x29
    3106:	7a a5       	ldd	r23, Y+42	; 0x2a
    3108:	8b a5       	ldd	r24, Y+43	; 0x2b
    310a:	9c a5       	ldd	r25, Y+44	; 0x2c
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e8       	ldi	r20, 0x80	; 128
    3112:	5f e3       	ldi	r21, 0x3F	; 63
    3114:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3118:	88 23       	and	r24, r24
    311a:	1c f4       	brge	.+6      	; 0x3122 <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	88 a7       	std	Y+40, r24	; 0x28
    3120:	91 c0       	rjmp	.+290    	; 0x3244 <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    3122:	69 a5       	ldd	r22, Y+41	; 0x29
    3124:	7a a5       	ldd	r23, Y+42	; 0x2a
    3126:	8b a5       	ldd	r24, Y+43	; 0x2b
    3128:	9c a5       	ldd	r25, Y+44	; 0x2c
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	30 e0       	ldi	r19, 0x00	; 0
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	53 e4       	ldi	r21, 0x43	; 67
    3132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	0c f0       	brlt	.+2      	; 0x313c <LCD_voidSendHalfCmnd+0xac>
    313a:	7b c0       	rjmp	.+246    	; 0x3232 <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    313c:	6d a5       	ldd	r22, Y+45	; 0x2d
    313e:	7e a5       	ldd	r23, Y+46	; 0x2e
    3140:	8f a5       	ldd	r24, Y+47	; 0x2f
    3142:	98 a9       	ldd	r25, Y+48	; 0x30
    3144:	20 e0       	ldi	r18, 0x00	; 0
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	4a e7       	ldi	r20, 0x7A	; 122
    314a:	54 e4       	ldi	r21, 0x44	; 68
    314c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	8c a3       	std	Y+36, r24	; 0x24
    3156:	9d a3       	std	Y+37, r25	; 0x25
    3158:	ae a3       	std	Y+38, r26	; 0x26
    315a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    315c:	6c a1       	ldd	r22, Y+36	; 0x24
    315e:	7d a1       	ldd	r23, Y+37	; 0x25
    3160:	8e a1       	ldd	r24, Y+38	; 0x26
    3162:	9f a1       	ldd	r25, Y+39	; 0x27
    3164:	20 e0       	ldi	r18, 0x00	; 0
    3166:	30 e0       	ldi	r19, 0x00	; 0
    3168:	4a ef       	ldi	r20, 0xFA	; 250
    316a:	54 e4       	ldi	r21, 0x44	; 68
    316c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	88 a3       	std	Y+32, r24	; 0x20
    3176:	99 a3       	std	Y+33, r25	; 0x21
    3178:	aa a3       	std	Y+34, r26	; 0x22
    317a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    317c:	68 a1       	ldd	r22, Y+32	; 0x20
    317e:	79 a1       	ldd	r23, Y+33	; 0x21
    3180:	8a a1       	ldd	r24, Y+34	; 0x22
    3182:	9b a1       	ldd	r25, Y+35	; 0x23
    3184:	20 e0       	ldi	r18, 0x00	; 0
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	40 e8       	ldi	r20, 0x80	; 128
    318a:	5f e3       	ldi	r21, 0x3F	; 63
    318c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3190:	88 23       	and	r24, r24
    3192:	2c f4       	brge	.+10     	; 0x319e <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    3194:	81 e0       	ldi	r24, 0x01	; 1
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9f 8f       	std	Y+31, r25	; 0x1f
    319a:	8e 8f       	std	Y+30, r24	; 0x1e
    319c:	3f c0       	rjmp	.+126    	; 0x321c <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    319e:	68 a1       	ldd	r22, Y+32	; 0x20
    31a0:	79 a1       	ldd	r23, Y+33	; 0x21
    31a2:	8a a1       	ldd	r24, Y+34	; 0x22
    31a4:	9b a1       	ldd	r25, Y+35	; 0x23
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	3f ef       	ldi	r19, 0xFF	; 255
    31aa:	4f e7       	ldi	r20, 0x7F	; 127
    31ac:	57 e4       	ldi	r21, 0x47	; 71
    31ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31b2:	18 16       	cp	r1, r24
    31b4:	4c f5       	brge	.+82     	; 0x3208 <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31b6:	6c a1       	ldd	r22, Y+36	; 0x24
    31b8:	7d a1       	ldd	r23, Y+37	; 0x25
    31ba:	8e a1       	ldd	r24, Y+38	; 0x26
    31bc:	9f a1       	ldd	r25, Y+39	; 0x27
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	40 e2       	ldi	r20, 0x20	; 32
    31c4:	51 e4       	ldi	r21, 0x41	; 65
    31c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	bc 01       	movw	r22, r24
    31d0:	cd 01       	movw	r24, r26
    31d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	9f 8f       	std	Y+31, r25	; 0x1f
    31dc:	8e 8f       	std	Y+30, r24	; 0x1e
    31de:	0f c0       	rjmp	.+30     	; 0x31fe <LCD_voidSendHalfCmnd+0x16e>
    31e0:	88 ec       	ldi	r24, 0xC8	; 200
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	9d 8f       	std	Y+29, r25	; 0x1d
    31e6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    31e8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31ea:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <LCD_voidSendHalfCmnd+0x15c>
    31f0:	9d 8f       	std	Y+29, r25	; 0x1d
    31f2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    31f8:	01 97       	sbiw	r24, 0x01	; 1
    31fa:	9f 8f       	std	Y+31, r25	; 0x1f
    31fc:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3200:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3202:	00 97       	sbiw	r24, 0x00	; 0
    3204:	69 f7       	brne	.-38     	; 0x31e0 <LCD_voidSendHalfCmnd+0x150>
    3206:	24 c0       	rjmp	.+72     	; 0x3250 <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3208:	68 a1       	ldd	r22, Y+32	; 0x20
    320a:	79 a1       	ldd	r23, Y+33	; 0x21
    320c:	8a a1       	ldd	r24, Y+34	; 0x22
    320e:	9b a1       	ldd	r25, Y+35	; 0x23
    3210:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	9f 8f       	std	Y+31, r25	; 0x1f
    321a:	8e 8f       	std	Y+30, r24	; 0x1e
    321c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    321e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3220:	9b 8f       	std	Y+27, r25	; 0x1b
    3222:	8a 8f       	std	Y+26, r24	; 0x1a
    3224:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3226:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3228:	01 97       	sbiw	r24, 0x01	; 1
    322a:	f1 f7       	brne	.-4      	; 0x3228 <LCD_voidSendHalfCmnd+0x198>
    322c:	9b 8f       	std	Y+27, r25	; 0x1b
    322e:	8a 8f       	std	Y+26, r24	; 0x1a
    3230:	0f c0       	rjmp	.+30     	; 0x3250 <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3232:	69 a5       	ldd	r22, Y+41	; 0x29
    3234:	7a a5       	ldd	r23, Y+42	; 0x2a
    3236:	8b a5       	ldd	r24, Y+43	; 0x2b
    3238:	9c a5       	ldd	r25, Y+44	; 0x2c
    323a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323e:	dc 01       	movw	r26, r24
    3240:	cb 01       	movw	r24, r22
    3242:	88 a7       	std	Y+40, r24	; 0x28
    3244:	88 a5       	ldd	r24, Y+40	; 0x28
    3246:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3248:	89 8d       	ldd	r24, Y+25	; 0x19
    324a:	8a 95       	dec	r24
    324c:	f1 f7       	brne	.-4      	; 0x324a <LCD_voidSendHalfCmnd+0x1ba>
    324e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    3250:	81 e0       	ldi	r24, 0x01	; 1
    3252:	62 e0       	ldi	r22, 0x02	; 2
    3254:	40 e0       	ldi	r20, 0x00	; 0
    3256:	0e 94 09 09 	call	0x1212	; 0x1212 <DIO_u8SetPinValue>
    325a:	80 e0       	ldi	r24, 0x00	; 0
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	a0 e8       	ldi	r26, 0x80	; 128
    3260:	bf e3       	ldi	r27, 0x3F	; 63
    3262:	8d 8b       	std	Y+21, r24	; 0x15
    3264:	9e 8b       	std	Y+22, r25	; 0x16
    3266:	af 8b       	std	Y+23, r26	; 0x17
    3268:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    326a:	6d 89       	ldd	r22, Y+21	; 0x15
    326c:	7e 89       	ldd	r23, Y+22	; 0x16
    326e:	8f 89       	ldd	r24, Y+23	; 0x17
    3270:	98 8d       	ldd	r25, Y+24	; 0x18
    3272:	2b ea       	ldi	r18, 0xAB	; 171
    3274:	3a ea       	ldi	r19, 0xAA	; 170
    3276:	4a e2       	ldi	r20, 0x2A	; 42
    3278:	50 e4       	ldi	r21, 0x40	; 64
    327a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	89 8b       	std	Y+17, r24	; 0x11
    3284:	9a 8b       	std	Y+18, r25	; 0x12
    3286:	ab 8b       	std	Y+19, r26	; 0x13
    3288:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    328a:	69 89       	ldd	r22, Y+17	; 0x11
    328c:	7a 89       	ldd	r23, Y+18	; 0x12
    328e:	8b 89       	ldd	r24, Y+19	; 0x13
    3290:	9c 89       	ldd	r25, Y+20	; 0x14
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	40 e8       	ldi	r20, 0x80	; 128
    3298:	5f e3       	ldi	r21, 0x3F	; 63
    329a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    329e:	88 23       	and	r24, r24
    32a0:	1c f4       	brge	.+6      	; 0x32a8 <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    32a2:	81 e0       	ldi	r24, 0x01	; 1
    32a4:	88 8b       	std	Y+16, r24	; 0x10
    32a6:	91 c0       	rjmp	.+290    	; 0x33ca <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    32a8:	69 89       	ldd	r22, Y+17	; 0x11
    32aa:	7a 89       	ldd	r23, Y+18	; 0x12
    32ac:	8b 89       	ldd	r24, Y+19	; 0x13
    32ae:	9c 89       	ldd	r25, Y+20	; 0x14
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	4f e7       	ldi	r20, 0x7F	; 127
    32b6:	53 e4       	ldi	r21, 0x43	; 67
    32b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32bc:	18 16       	cp	r1, r24
    32be:	0c f0       	brlt	.+2      	; 0x32c2 <LCD_voidSendHalfCmnd+0x232>
    32c0:	7b c0       	rjmp	.+246    	; 0x33b8 <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    32c2:	6d 89       	ldd	r22, Y+21	; 0x15
    32c4:	7e 89       	ldd	r23, Y+22	; 0x16
    32c6:	8f 89       	ldd	r24, Y+23	; 0x17
    32c8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ca:	20 e0       	ldi	r18, 0x00	; 0
    32cc:	30 e0       	ldi	r19, 0x00	; 0
    32ce:	4a e7       	ldi	r20, 0x7A	; 122
    32d0:	54 e4       	ldi	r21, 0x44	; 68
    32d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32d6:	dc 01       	movw	r26, r24
    32d8:	cb 01       	movw	r24, r22
    32da:	8c 87       	std	Y+12, r24	; 0x0c
    32dc:	9d 87       	std	Y+13, r25	; 0x0d
    32de:	ae 87       	std	Y+14, r26	; 0x0e
    32e0:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    32e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    32e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    32e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a ef       	ldi	r20, 0xFA	; 250
    32f0:	54 e4       	ldi	r21, 0x44	; 68
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	88 87       	std	Y+8, r24	; 0x08
    32fc:	99 87       	std	Y+9, r25	; 0x09
    32fe:	aa 87       	std	Y+10, r26	; 0x0a
    3300:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3302:	68 85       	ldd	r22, Y+8	; 0x08
    3304:	79 85       	ldd	r23, Y+9	; 0x09
    3306:	8a 85       	ldd	r24, Y+10	; 0x0a
    3308:	9b 85       	ldd	r25, Y+11	; 0x0b
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e8       	ldi	r20, 0x80	; 128
    3310:	5f e3       	ldi	r21, 0x3F	; 63
    3312:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3316:	88 23       	and	r24, r24
    3318:	2c f4       	brge	.+10     	; 0x3324 <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	9f 83       	std	Y+7, r25	; 0x07
    3320:	8e 83       	std	Y+6, r24	; 0x06
    3322:	3f c0       	rjmp	.+126    	; 0x33a2 <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    3324:	68 85       	ldd	r22, Y+8	; 0x08
    3326:	79 85       	ldd	r23, Y+9	; 0x09
    3328:	8a 85       	ldd	r24, Y+10	; 0x0a
    332a:	9b 85       	ldd	r25, Y+11	; 0x0b
    332c:	20 e0       	ldi	r18, 0x00	; 0
    332e:	3f ef       	ldi	r19, 0xFF	; 255
    3330:	4f e7       	ldi	r20, 0x7F	; 127
    3332:	57 e4       	ldi	r21, 0x47	; 71
    3334:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3338:	18 16       	cp	r1, r24
    333a:	4c f5       	brge	.+82     	; 0x338e <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    333c:	6c 85       	ldd	r22, Y+12	; 0x0c
    333e:	7d 85       	ldd	r23, Y+13	; 0x0d
    3340:	8e 85       	ldd	r24, Y+14	; 0x0e
    3342:	9f 85       	ldd	r25, Y+15	; 0x0f
    3344:	20 e0       	ldi	r18, 0x00	; 0
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	40 e2       	ldi	r20, 0x20	; 32
    334a:	51 e4       	ldi	r21, 0x41	; 65
    334c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3350:	dc 01       	movw	r26, r24
    3352:	cb 01       	movw	r24, r22
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    335c:	dc 01       	movw	r26, r24
    335e:	cb 01       	movw	r24, r22
    3360:	9f 83       	std	Y+7, r25	; 0x07
    3362:	8e 83       	std	Y+6, r24	; 0x06
    3364:	0f c0       	rjmp	.+30     	; 0x3384 <LCD_voidSendHalfCmnd+0x2f4>
    3366:	88 ec       	ldi	r24, 0xC8	; 200
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9d 83       	std	Y+5, r25	; 0x05
    336c:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    336e:	8c 81       	ldd	r24, Y+4	; 0x04
    3370:	9d 81       	ldd	r25, Y+5	; 0x05
    3372:	01 97       	sbiw	r24, 0x01	; 1
    3374:	f1 f7       	brne	.-4      	; 0x3372 <LCD_voidSendHalfCmnd+0x2e2>
    3376:	9d 83       	std	Y+5, r25	; 0x05
    3378:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    337a:	8e 81       	ldd	r24, Y+6	; 0x06
    337c:	9f 81       	ldd	r25, Y+7	; 0x07
    337e:	01 97       	sbiw	r24, 0x01	; 1
    3380:	9f 83       	std	Y+7, r25	; 0x07
    3382:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3384:	8e 81       	ldd	r24, Y+6	; 0x06
    3386:	9f 81       	ldd	r25, Y+7	; 0x07
    3388:	00 97       	sbiw	r24, 0x00	; 0
    338a:	69 f7       	brne	.-38     	; 0x3366 <LCD_voidSendHalfCmnd+0x2d6>
    338c:	24 c0       	rjmp	.+72     	; 0x33d6 <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338e:	68 85       	ldd	r22, Y+8	; 0x08
    3390:	79 85       	ldd	r23, Y+9	; 0x09
    3392:	8a 85       	ldd	r24, Y+10	; 0x0a
    3394:	9b 85       	ldd	r25, Y+11	; 0x0b
    3396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    339a:	dc 01       	movw	r26, r24
    339c:	cb 01       	movw	r24, r22
    339e:	9f 83       	std	Y+7, r25	; 0x07
    33a0:	8e 83       	std	Y+6, r24	; 0x06
    33a2:	8e 81       	ldd	r24, Y+6	; 0x06
    33a4:	9f 81       	ldd	r25, Y+7	; 0x07
    33a6:	9b 83       	std	Y+3, r25	; 0x03
    33a8:	8a 83       	std	Y+2, r24	; 0x02
    33aa:	8a 81       	ldd	r24, Y+2	; 0x02
    33ac:	9b 81       	ldd	r25, Y+3	; 0x03
    33ae:	01 97       	sbiw	r24, 0x01	; 1
    33b0:	f1 f7       	brne	.-4      	; 0x33ae <LCD_voidSendHalfCmnd+0x31e>
    33b2:	9b 83       	std	Y+3, r25	; 0x03
    33b4:	8a 83       	std	Y+2, r24	; 0x02
    33b6:	0f c0       	rjmp	.+30     	; 0x33d6 <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33b8:	69 89       	ldd	r22, Y+17	; 0x11
    33ba:	7a 89       	ldd	r23, Y+18	; 0x12
    33bc:	8b 89       	ldd	r24, Y+19	; 0x13
    33be:	9c 89       	ldd	r25, Y+20	; 0x14
    33c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c4:	dc 01       	movw	r26, r24
    33c6:	cb 01       	movw	r24, r22
    33c8:	88 8b       	std	Y+16, r24	; 0x10
    33ca:	88 89       	ldd	r24, Y+16	; 0x10
    33cc:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33ce:	89 81       	ldd	r24, Y+1	; 0x01
    33d0:	8a 95       	dec	r24
    33d2:	f1 f7       	brne	.-4      	; 0x33d0 <LCD_voidSendHalfCmnd+0x340>
    33d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
    33d6:	e1 96       	adiw	r28, 0x31	; 49
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	f8 94       	cli
    33dc:	de bf       	out	0x3e, r29	; 62
    33de:	0f be       	out	0x3f, r0	; 63
    33e0:	cd bf       	out	0x3d, r28	; 61
    33e2:	cf 91       	pop	r28
    33e4:	df 91       	pop	r29
    33e6:	08 95       	ret

000033e8 <appenedToBuffer>:
u8 Local_u8Index = 0; // Index for buffer
u8 Local_Au8InputBuffer[5] = {0}; // Buffer to store input
u8 trials = 0;
/* Function to append a key to buffer */
void appenedToBuffer(u8 *buffer,u8 key)
{
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <appenedToBuffer+0x6>
    33ee:	0f 92       	push	r0
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	9a 83       	std	Y+2, r25	; 0x02
    33f6:	89 83       	std	Y+1, r24	; 0x01
    33f8:	6b 83       	std	Y+3, r22	; 0x03
	if(Local_u8Index < 4) // Make sure buffer index is within range
    33fa:	80 91 1f 01 	lds	r24, 0x011F
    33fe:	84 30       	cpi	r24, 0x04	; 4
    3400:	d0 f4       	brcc	.+52     	; 0x3436 <appenedToBuffer+0x4e>
	{
		*(buffer+Local_u8Index) = key; // Store the character in buffer
    3402:	80 91 1f 01 	lds	r24, 0x011F
    3406:	28 2f       	mov	r18, r24
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	9a 81       	ldd	r25, Y+2	; 0x02
    340e:	fc 01       	movw	r30, r24
    3410:	e2 0f       	add	r30, r18
    3412:	f3 1f       	adc	r31, r19
    3414:	8b 81       	ldd	r24, Y+3	; 0x03
    3416:	80 83       	st	Z, r24
		Local_u8Index++; // Increment buffer index
    3418:	80 91 1f 01 	lds	r24, 0x011F
    341c:	8f 5f       	subi	r24, 0xFF	; 255
    341e:	80 93 1f 01 	sts	0x011F, r24
		*(buffer+Local_u8Index) = '\0';// Null-terminate buffer
    3422:	80 91 1f 01 	lds	r24, 0x011F
    3426:	28 2f       	mov	r18, r24
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	9a 81       	ldd	r25, Y+2	; 0x02
    342e:	fc 01       	movw	r30, r24
    3430:	e2 0f       	add	r30, r18
    3432:	f3 1f       	adc	r31, r19
    3434:	10 82       	st	Z, r1
	}
}
    3436:	0f 90       	pop	r0
    3438:	0f 90       	pop	r0
    343a:	0f 90       	pop	r0
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <ClearBuffer>:
/* Function to clear buffer */
void ClearBuffer(u8 *buffer,u8 size)
{
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	00 d0       	rcall	.+0      	; 0x3448 <ClearBuffer+0x6>
    3448:	00 d0       	rcall	.+0      	; 0x344a <ClearBuffer+0x8>
    344a:	cd b7       	in	r28, 0x3d	; 61
    344c:	de b7       	in	r29, 0x3e	; 62
    344e:	9b 83       	std	Y+3, r25	; 0x03
    3450:	8a 83       	std	Y+2, r24	; 0x02
    3452:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for (i = 0; i < size; i++)// Loop through buffer
    3454:	19 82       	std	Y+1, r1	; 0x01
    3456:	0c c0       	rjmp	.+24     	; 0x3470 <ClearBuffer+0x2e>
	{
		buffer[i] = '\0';// Set each element to null character
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	28 2f       	mov	r18, r24
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	8a 81       	ldd	r24, Y+2	; 0x02
    3460:	9b 81       	ldd	r25, Y+3	; 0x03
    3462:	fc 01       	movw	r30, r24
    3464:	e2 0f       	add	r30, r18
    3466:	f3 1f       	adc	r31, r19
    3468:	10 82       	st	Z, r1
}
/* Function to clear buffer */
void ClearBuffer(u8 *buffer,u8 size)
{
	u8 i;
	for (i = 0; i < size; i++)// Loop through buffer
    346a:	89 81       	ldd	r24, Y+1	; 0x01
    346c:	8f 5f       	subi	r24, 0xFF	; 255
    346e:	89 83       	std	Y+1, r24	; 0x01
    3470:	99 81       	ldd	r25, Y+1	; 0x01
    3472:	8c 81       	ldd	r24, Y+4	; 0x04
    3474:	98 17       	cp	r25, r24
    3476:	80 f3       	brcs	.-32     	; 0x3458 <ClearBuffer+0x16>
	{
		buffer[i] = '\0';// Set each element to null character
	}
}
    3478:	0f 90       	pop	r0
    347a:	0f 90       	pop	r0
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	cf 91       	pop	r28
    3482:	df 91       	pop	r29
    3484:	08 95       	ret

00003486 <CheckPassword>:
void CheckPassword(u8* buffer,u8* password,u8* Result)
{
    3486:	df 93       	push	r29
    3488:	cf 93       	push	r28
    348a:	cd b7       	in	r28, 0x3d	; 61
    348c:	de b7       	in	r29, 0x3e	; 62
    348e:	28 97       	sbiw	r28, 0x08	; 8
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	9c 83       	std	Y+4, r25	; 0x04
    349c:	8b 83       	std	Y+3, r24	; 0x03
    349e:	7e 83       	std	Y+6, r23	; 0x06
    34a0:	6d 83       	std	Y+5, r22	; 0x05
    34a2:	58 87       	std	Y+8, r21	; 0x08
    34a4:	4f 83       	std	Y+7, r20	; 0x07
	u8 i = 0; // Loop counter
    34a6:	1a 82       	std	Y+2, r1	; 0x02
	u8 Password_Flag = 0; // 0 mean incorrect
    34a8:	19 82       	std	Y+1, r1	; 0x01
    34aa:	1c c0       	rjmp	.+56     	; 0x34e4 <CheckPassword+0x5e>
	while((*(buffer+i) != '\0') && (*(password+i)!= '\0'))
	{
		if(buffer[i] == password[i])
    34ac:	8a 81       	ldd	r24, Y+2	; 0x02
    34ae:	28 2f       	mov	r18, r24
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	9c 81       	ldd	r25, Y+4	; 0x04
    34b6:	fc 01       	movw	r30, r24
    34b8:	e2 0f       	add	r30, r18
    34ba:	f3 1f       	adc	r31, r19
    34bc:	40 81       	ld	r20, Z
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	28 2f       	mov	r18, r24
    34c2:	30 e0       	ldi	r19, 0x00	; 0
    34c4:	8d 81       	ldd	r24, Y+5	; 0x05
    34c6:	9e 81       	ldd	r25, Y+6	; 0x06
    34c8:	fc 01       	movw	r30, r24
    34ca:	e2 0f       	add	r30, r18
    34cc:	f3 1f       	adc	r31, r19
    34ce:	80 81       	ld	r24, Z
    34d0:	48 17       	cp	r20, r24
    34d2:	31 f4       	brne	.+12     	; 0x34e0 <CheckPassword+0x5a>
		{
			Password_Flag = 1;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			Password_Flag = 0;
			break;
		}
		i++;
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	8f 5f       	subi	r24, 0xFF	; 255
    34dc:	8a 83       	std	Y+2, r24	; 0x02
    34de:	02 c0       	rjmp	.+4      	; 0x34e4 <CheckPassword+0x5e>
		{
			Password_Flag = 1;
		}
		else
		{
			Password_Flag = 0;
    34e0:	19 82       	std	Y+1, r1	; 0x01
    34e2:	16 c0       	rjmp	.+44     	; 0x3510 <CheckPassword+0x8a>
}
void CheckPassword(u8* buffer,u8* password,u8* Result)
{
	u8 i = 0; // Loop counter
	u8 Password_Flag = 0; // 0 mean incorrect
	while((*(buffer+i) != '\0') && (*(password+i)!= '\0'))
    34e4:	8a 81       	ldd	r24, Y+2	; 0x02
    34e6:	28 2f       	mov	r18, r24
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	8b 81       	ldd	r24, Y+3	; 0x03
    34ec:	9c 81       	ldd	r25, Y+4	; 0x04
    34ee:	fc 01       	movw	r30, r24
    34f0:	e2 0f       	add	r30, r18
    34f2:	f3 1f       	adc	r31, r19
    34f4:	80 81       	ld	r24, Z
    34f6:	88 23       	and	r24, r24
    34f8:	59 f0       	breq	.+22     	; 0x3510 <CheckPassword+0x8a>
    34fa:	8a 81       	ldd	r24, Y+2	; 0x02
    34fc:	28 2f       	mov	r18, r24
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	8d 81       	ldd	r24, Y+5	; 0x05
    3502:	9e 81       	ldd	r25, Y+6	; 0x06
    3504:	fc 01       	movw	r30, r24
    3506:	e2 0f       	add	r30, r18
    3508:	f3 1f       	adc	r31, r19
    350a:	80 81       	ld	r24, Z
    350c:	88 23       	and	r24, r24
    350e:	71 f6       	brne	.-100    	; 0x34ac <CheckPassword+0x26>
			Password_Flag = 0;
			break;
		}
		i++;
	}
	*Result = Password_Flag;
    3510:	ef 81       	ldd	r30, Y+7	; 0x07
    3512:	f8 85       	ldd	r31, Y+8	; 0x08
    3514:	89 81       	ldd	r24, Y+1	; 0x01
    3516:	80 83       	st	Z, r24
}
    3518:	28 96       	adiw	r28, 0x08	; 8
    351a:	0f b6       	in	r0, 0x3f	; 63
    351c:	f8 94       	cli
    351e:	de bf       	out	0x3e, r29	; 62
    3520:	0f be       	out	0x3f, r0	; 63
    3522:	cd bf       	out	0x3d, r28	; 61
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <login_system>:
void login_system(const u8* password, u8* flag)
{
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	c8 56       	subi	r28, 0x68	; 104
    3538:	d0 40       	sbci	r29, 0x00	; 0
    353a:	0f b6       	in	r0, 0x3f	; 63
    353c:	f8 94       	cli
    353e:	de bf       	out	0x3e, r29	; 62
    3540:	0f be       	out	0x3f, r0	; 63
    3542:	cd bf       	out	0x3d, r28	; 61
    3544:	fe 01       	movw	r30, r28
    3546:	eb 59       	subi	r30, 0x9B	; 155
    3548:	ff 4f       	sbci	r31, 0xFF	; 255
    354a:	91 83       	std	Z+1, r25	; 0x01
    354c:	80 83       	st	Z, r24
    354e:	fe 01       	movw	r30, r28
    3550:	e9 59       	subi	r30, 0x99	; 153
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	71 83       	std	Z+1, r23	; 0x01
    3556:	60 83       	st	Z, r22
	u8 Local_u8Key;
	u8 Local_u8Result;
	LCD_voidWriteString((u8*)"Enter Password: ");
    3558:	87 e8       	ldi	r24, 0x87	; 135
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    3560:	82 e0       	ldi	r24, 0x02	; 2
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
	while(1)
	{
		if(trials < 3)
    3568:	80 91 25 01 	lds	r24, 0x0125
    356c:	83 30       	cpi	r24, 0x03	; 3
    356e:	08 f0       	brcs	.+2      	; 0x3572 <login_system+0x48>
    3570:	b1 c3       	rjmp	.+1890   	; 0x3cd4 <login_system+0x7aa>
		{
			KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    3572:	ce 01       	movw	r24, r28
    3574:	8d 59       	subi	r24, 0x9D	; 157
    3576:	9f 4f       	sbci	r25, 0xFF	; 255
    3578:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <KPD_u8GetKeyState>
			if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    357c:	fe 01       	movw	r30, r28
    357e:	ed 59       	subi	r30, 0x9D	; 157
    3580:	ff 4f       	sbci	r31, 0xFF	; 255
    3582:	80 81       	ld	r24, Z
    3584:	8f 3f       	cpi	r24, 0xFF	; 255
    3586:	81 f3       	breq	.-32     	; 0x3568 <login_system+0x3e>
			{
				if(Local_u8Key == '=') // If pressed key is '='
    3588:	fe 01       	movw	r30, r28
    358a:	ed 59       	subi	r30, 0x9D	; 157
    358c:	ff 4f       	sbci	r31, 0xFF	; 255
    358e:	80 81       	ld	r24, Z
    3590:	8d 33       	cpi	r24, 0x3D	; 61
    3592:	09 f0       	breq	.+2      	; 0x3596 <login_system+0x6c>
    3594:	92 c3       	rjmp	.+1828   	; 0x3cba <login_system+0x790>
				{
					CheckPassword(Local_Au8InputBuffer,password,&Local_u8Result);
    3596:	fe 01       	movw	r30, r28
    3598:	eb 59       	subi	r30, 0x9B	; 155
    359a:	ff 4f       	sbci	r31, 0xFF	; 255
    359c:	40 81       	ld	r20, Z
    359e:	51 81       	ldd	r21, Z+1	; 0x01
    35a0:	80 e2       	ldi	r24, 0x20	; 32
    35a2:	91 e0       	ldi	r25, 0x01	; 1
    35a4:	9e 01       	movw	r18, r28
    35a6:	2c 59       	subi	r18, 0x9C	; 156
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	ba 01       	movw	r22, r20
    35ac:	a9 01       	movw	r20, r18
    35ae:	0e 94 43 1a 	call	0x3486	; 0x3486 <CheckPassword>
					if(Local_u8Result)
    35b2:	fe 01       	movw	r30, r28
    35b4:	ec 59       	subi	r30, 0x9C	; 156
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 81       	ld	r24, Z
    35ba:	88 23       	and	r24, r24
    35bc:	09 f4       	brne	.+2      	; 0x35c0 <login_system+0x96>
    35be:	c2 c0       	rjmp	.+388    	; 0x3744 <login_system+0x21a>
					{
						LCD_voidClearScreen();
    35c0:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    35c4:	fe 01       	movw	r30, r28
    35c6:	e1 5a       	subi	r30, 0xA1	; 161
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	a0 ea       	ldi	r26, 0xA0	; 160
    35d0:	b1 e4       	ldi	r27, 0x41	; 65
    35d2:	80 83       	st	Z, r24
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	a2 83       	std	Z+2, r26	; 0x02
    35d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35da:	8e 01       	movw	r16, r28
    35dc:	05 5a       	subi	r16, 0xA5	; 165
    35de:	1f 4f       	sbci	r17, 0xFF	; 255
    35e0:	fe 01       	movw	r30, r28
    35e2:	e1 5a       	subi	r30, 0xA1	; 161
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	60 81       	ld	r22, Z
    35e8:	71 81       	ldd	r23, Z+1	; 0x01
    35ea:	82 81       	ldd	r24, Z+2	; 0x02
    35ec:	93 81       	ldd	r25, Z+3	; 0x03
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	4a ef       	ldi	r20, 0xFA	; 250
    35f4:	54 e4       	ldi	r21, 0x44	; 68
    35f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	f8 01       	movw	r30, r16
    3600:	80 83       	st	Z, r24
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	a2 83       	std	Z+2, r26	; 0x02
    3606:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3608:	fe 01       	movw	r30, r28
    360a:	e5 5a       	subi	r30, 0xA5	; 165
    360c:	ff 4f       	sbci	r31, 0xFF	; 255
    360e:	60 81       	ld	r22, Z
    3610:	71 81       	ldd	r23, Z+1	; 0x01
    3612:	82 81       	ldd	r24, Z+2	; 0x02
    3614:	93 81       	ldd	r25, Z+3	; 0x03
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	30 e0       	ldi	r19, 0x00	; 0
    361a:	40 e8       	ldi	r20, 0x80	; 128
    361c:	5f e3       	ldi	r21, 0x3F	; 63
    361e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3622:	88 23       	and	r24, r24
    3624:	44 f4       	brge	.+16     	; 0x3636 <login_system+0x10c>
		__ticks = 1;
    3626:	fe 01       	movw	r30, r28
    3628:	e7 5a       	subi	r30, 0xA7	; 167
    362a:	ff 4f       	sbci	r31, 0xFF	; 255
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	91 83       	std	Z+1, r25	; 0x01
    3632:	80 83       	st	Z, r24
    3634:	64 c0       	rjmp	.+200    	; 0x36fe <login_system+0x1d4>
	else if (__tmp > 65535)
    3636:	fe 01       	movw	r30, r28
    3638:	e5 5a       	subi	r30, 0xA5	; 165
    363a:	ff 4f       	sbci	r31, 0xFF	; 255
    363c:	60 81       	ld	r22, Z
    363e:	71 81       	ldd	r23, Z+1	; 0x01
    3640:	82 81       	ldd	r24, Z+2	; 0x02
    3642:	93 81       	ldd	r25, Z+3	; 0x03
    3644:	20 e0       	ldi	r18, 0x00	; 0
    3646:	3f ef       	ldi	r19, 0xFF	; 255
    3648:	4f e7       	ldi	r20, 0x7F	; 127
    364a:	57 e4       	ldi	r21, 0x47	; 71
    364c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3650:	18 16       	cp	r1, r24
    3652:	0c f0       	brlt	.+2      	; 0x3656 <login_system+0x12c>
    3654:	43 c0       	rjmp	.+134    	; 0x36dc <login_system+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3656:	fe 01       	movw	r30, r28
    3658:	e1 5a       	subi	r30, 0xA1	; 161
    365a:	ff 4f       	sbci	r31, 0xFF	; 255
    365c:	60 81       	ld	r22, Z
    365e:	71 81       	ldd	r23, Z+1	; 0x01
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	20 e0       	ldi	r18, 0x00	; 0
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	40 e2       	ldi	r20, 0x20	; 32
    366a:	51 e4       	ldi	r21, 0x41	; 65
    366c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	8e 01       	movw	r16, r28
    3676:	07 5a       	subi	r16, 0xA7	; 167
    3678:	1f 4f       	sbci	r17, 0xFF	; 255
    367a:	bc 01       	movw	r22, r24
    367c:	cd 01       	movw	r24, r26
    367e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	f8 01       	movw	r30, r16
    3688:	91 83       	std	Z+1, r25	; 0x01
    368a:	80 83       	st	Z, r24
    368c:	1f c0       	rjmp	.+62     	; 0x36cc <login_system+0x1a2>
    368e:	fe 01       	movw	r30, r28
    3690:	e9 5a       	subi	r30, 0xA9	; 169
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	88 ec       	ldi	r24, 0xC8	; 200
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	91 83       	std	Z+1, r25	; 0x01
    369a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    369c:	fe 01       	movw	r30, r28
    369e:	e9 5a       	subi	r30, 0xA9	; 169
    36a0:	ff 4f       	sbci	r31, 0xFF	; 255
    36a2:	80 81       	ld	r24, Z
    36a4:	91 81       	ldd	r25, Z+1	; 0x01
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <login_system+0x17c>
    36aa:	fe 01       	movw	r30, r28
    36ac:	e9 5a       	subi	r30, 0xA9	; 169
    36ae:	ff 4f       	sbci	r31, 0xFF	; 255
    36b0:	91 83       	std	Z+1, r25	; 0x01
    36b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36b4:	de 01       	movw	r26, r28
    36b6:	a7 5a       	subi	r26, 0xA7	; 167
    36b8:	bf 4f       	sbci	r27, 0xFF	; 255
    36ba:	fe 01       	movw	r30, r28
    36bc:	e7 5a       	subi	r30, 0xA7	; 167
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 81       	ld	r24, Z
    36c2:	91 81       	ldd	r25, Z+1	; 0x01
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	11 96       	adiw	r26, 0x01	; 1
    36c8:	9c 93       	st	X, r25
    36ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36cc:	fe 01       	movw	r30, r28
    36ce:	e7 5a       	subi	r30, 0xA7	; 167
    36d0:	ff 4f       	sbci	r31, 0xFF	; 255
    36d2:	80 81       	ld	r24, Z
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
    36d6:	00 97       	sbiw	r24, 0x00	; 0
    36d8:	d1 f6       	brne	.-76     	; 0x368e <login_system+0x164>
    36da:	27 c0       	rjmp	.+78     	; 0x372a <login_system+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36dc:	8e 01       	movw	r16, r28
    36de:	07 5a       	subi	r16, 0xA7	; 167
    36e0:	1f 4f       	sbci	r17, 0xFF	; 255
    36e2:	fe 01       	movw	r30, r28
    36e4:	e5 5a       	subi	r30, 0xA5	; 165
    36e6:	ff 4f       	sbci	r31, 0xFF	; 255
    36e8:	60 81       	ld	r22, Z
    36ea:	71 81       	ldd	r23, Z+1	; 0x01
    36ec:	82 81       	ldd	r24, Z+2	; 0x02
    36ee:	93 81       	ldd	r25, Z+3	; 0x03
    36f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	f8 01       	movw	r30, r16
    36fa:	91 83       	std	Z+1, r25	; 0x01
    36fc:	80 83       	st	Z, r24
    36fe:	de 01       	movw	r26, r28
    3700:	ab 5a       	subi	r26, 0xAB	; 171
    3702:	bf 4f       	sbci	r27, 0xFF	; 255
    3704:	fe 01       	movw	r30, r28
    3706:	e7 5a       	subi	r30, 0xA7	; 167
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	8d 93       	st	X+, r24
    3710:	9c 93       	st	X, r25
    3712:	fe 01       	movw	r30, r28
    3714:	eb 5a       	subi	r30, 0xAB	; 171
    3716:	ff 4f       	sbci	r31, 0xFF	; 255
    3718:	80 81       	ld	r24, Z
    371a:	91 81       	ldd	r25, Z+1	; 0x01
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <login_system+0x1f2>
    3720:	fe 01       	movw	r30, r28
    3722:	eb 5a       	subi	r30, 0xAB	; 171
    3724:	ff 4f       	sbci	r31, 0xFF	; 255
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	80 83       	st	Z, r24
						_delay_ms(20);
						LCD_voidWriteString((u8*)"Correct Password!");
    372a:	88 e9       	ldi	r24, 0x98	; 152
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
						*flag = 1;
    3732:	fe 01       	movw	r30, r28
    3734:	e9 59       	subi	r30, 0x99	; 153
    3736:	ff 4f       	sbci	r31, 0xFF	; 255
    3738:	01 90       	ld	r0, Z+
    373a:	f0 81       	ld	r31, Z
    373c:	e0 2d       	mov	r30, r0
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	80 83       	st	Z, r24
    3742:	4c c3       	rjmp	.+1688   	; 0x3ddc <login_system+0x8b2>
						break;
					}
					else
					{
						LCD_voidClearScreen();
    3744:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    3748:	fe 01       	movw	r30, r28
    374a:	ef 5a       	subi	r30, 0xAF	; 175
    374c:	ff 4f       	sbci	r31, 0xFF	; 255
    374e:	80 e0       	ldi	r24, 0x00	; 0
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	a0 ea       	ldi	r26, 0xA0	; 160
    3754:	b1 e4       	ldi	r27, 0x41	; 65
    3756:	80 83       	st	Z, r24
    3758:	91 83       	std	Z+1, r25	; 0x01
    375a:	a2 83       	std	Z+2, r26	; 0x02
    375c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    375e:	8e 01       	movw	r16, r28
    3760:	03 5b       	subi	r16, 0xB3	; 179
    3762:	1f 4f       	sbci	r17, 0xFF	; 255
    3764:	fe 01       	movw	r30, r28
    3766:	ef 5a       	subi	r30, 0xAF	; 175
    3768:	ff 4f       	sbci	r31, 0xFF	; 255
    376a:	60 81       	ld	r22, Z
    376c:	71 81       	ldd	r23, Z+1	; 0x01
    376e:	82 81       	ldd	r24, Z+2	; 0x02
    3770:	93 81       	ldd	r25, Z+3	; 0x03
    3772:	20 e0       	ldi	r18, 0x00	; 0
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	4a ef       	ldi	r20, 0xFA	; 250
    3778:	54 e4       	ldi	r21, 0x44	; 68
    377a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    377e:	dc 01       	movw	r26, r24
    3780:	cb 01       	movw	r24, r22
    3782:	f8 01       	movw	r30, r16
    3784:	80 83       	st	Z, r24
    3786:	91 83       	std	Z+1, r25	; 0x01
    3788:	a2 83       	std	Z+2, r26	; 0x02
    378a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    378c:	fe 01       	movw	r30, r28
    378e:	e3 5b       	subi	r30, 0xB3	; 179
    3790:	ff 4f       	sbci	r31, 0xFF	; 255
    3792:	60 81       	ld	r22, Z
    3794:	71 81       	ldd	r23, Z+1	; 0x01
    3796:	82 81       	ldd	r24, Z+2	; 0x02
    3798:	93 81       	ldd	r25, Z+3	; 0x03
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	40 e8       	ldi	r20, 0x80	; 128
    37a0:	5f e3       	ldi	r21, 0x3F	; 63
    37a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37a6:	88 23       	and	r24, r24
    37a8:	44 f4       	brge	.+16     	; 0x37ba <login_system+0x290>
		__ticks = 1;
    37aa:	fe 01       	movw	r30, r28
    37ac:	e5 5b       	subi	r30, 0xB5	; 181
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	91 83       	std	Z+1, r25	; 0x01
    37b6:	80 83       	st	Z, r24
    37b8:	64 c0       	rjmp	.+200    	; 0x3882 <login_system+0x358>
	else if (__tmp > 65535)
    37ba:	fe 01       	movw	r30, r28
    37bc:	e3 5b       	subi	r30, 0xB3	; 179
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	60 81       	ld	r22, Z
    37c2:	71 81       	ldd	r23, Z+1	; 0x01
    37c4:	82 81       	ldd	r24, Z+2	; 0x02
    37c6:	93 81       	ldd	r25, Z+3	; 0x03
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	3f ef       	ldi	r19, 0xFF	; 255
    37cc:	4f e7       	ldi	r20, 0x7F	; 127
    37ce:	57 e4       	ldi	r21, 0x47	; 71
    37d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37d4:	18 16       	cp	r1, r24
    37d6:	0c f0       	brlt	.+2      	; 0x37da <login_system+0x2b0>
    37d8:	43 c0       	rjmp	.+134    	; 0x3860 <login_system+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37da:	fe 01       	movw	r30, r28
    37dc:	ef 5a       	subi	r30, 0xAF	; 175
    37de:	ff 4f       	sbci	r31, 0xFF	; 255
    37e0:	60 81       	ld	r22, Z
    37e2:	71 81       	ldd	r23, Z+1	; 0x01
    37e4:	82 81       	ldd	r24, Z+2	; 0x02
    37e6:	93 81       	ldd	r25, Z+3	; 0x03
    37e8:	20 e0       	ldi	r18, 0x00	; 0
    37ea:	30 e0       	ldi	r19, 0x00	; 0
    37ec:	40 e2       	ldi	r20, 0x20	; 32
    37ee:	51 e4       	ldi	r21, 0x41	; 65
    37f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37f4:	dc 01       	movw	r26, r24
    37f6:	cb 01       	movw	r24, r22
    37f8:	8e 01       	movw	r16, r28
    37fa:	05 5b       	subi	r16, 0xB5	; 181
    37fc:	1f 4f       	sbci	r17, 0xFF	; 255
    37fe:	bc 01       	movw	r22, r24
    3800:	cd 01       	movw	r24, r26
    3802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	f8 01       	movw	r30, r16
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	80 83       	st	Z, r24
    3810:	1f c0       	rjmp	.+62     	; 0x3850 <login_system+0x326>
    3812:	fe 01       	movw	r30, r28
    3814:	e7 5b       	subi	r30, 0xB7	; 183
    3816:	ff 4f       	sbci	r31, 0xFF	; 255
    3818:	88 ec       	ldi	r24, 0xC8	; 200
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	91 83       	std	Z+1, r25	; 0x01
    381e:	80 83       	st	Z, r24
    3820:	fe 01       	movw	r30, r28
    3822:	e7 5b       	subi	r30, 0xB7	; 183
    3824:	ff 4f       	sbci	r31, 0xFF	; 255
    3826:	80 81       	ld	r24, Z
    3828:	91 81       	ldd	r25, Z+1	; 0x01
    382a:	01 97       	sbiw	r24, 0x01	; 1
    382c:	f1 f7       	brne	.-4      	; 0x382a <login_system+0x300>
    382e:	fe 01       	movw	r30, r28
    3830:	e7 5b       	subi	r30, 0xB7	; 183
    3832:	ff 4f       	sbci	r31, 0xFF	; 255
    3834:	91 83       	std	Z+1, r25	; 0x01
    3836:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3838:	de 01       	movw	r26, r28
    383a:	a5 5b       	subi	r26, 0xB5	; 181
    383c:	bf 4f       	sbci	r27, 0xFF	; 255
    383e:	fe 01       	movw	r30, r28
    3840:	e5 5b       	subi	r30, 0xB5	; 181
    3842:	ff 4f       	sbci	r31, 0xFF	; 255
    3844:	80 81       	ld	r24, Z
    3846:	91 81       	ldd	r25, Z+1	; 0x01
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	11 96       	adiw	r26, 0x01	; 1
    384c:	9c 93       	st	X, r25
    384e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3850:	fe 01       	movw	r30, r28
    3852:	e5 5b       	subi	r30, 0xB5	; 181
    3854:	ff 4f       	sbci	r31, 0xFF	; 255
    3856:	80 81       	ld	r24, Z
    3858:	91 81       	ldd	r25, Z+1	; 0x01
    385a:	00 97       	sbiw	r24, 0x00	; 0
    385c:	d1 f6       	brne	.-76     	; 0x3812 <login_system+0x2e8>
    385e:	27 c0       	rjmp	.+78     	; 0x38ae <login_system+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3860:	8e 01       	movw	r16, r28
    3862:	05 5b       	subi	r16, 0xB5	; 181
    3864:	1f 4f       	sbci	r17, 0xFF	; 255
    3866:	fe 01       	movw	r30, r28
    3868:	e3 5b       	subi	r30, 0xB3	; 179
    386a:	ff 4f       	sbci	r31, 0xFF	; 255
    386c:	60 81       	ld	r22, Z
    386e:	71 81       	ldd	r23, Z+1	; 0x01
    3870:	82 81       	ldd	r24, Z+2	; 0x02
    3872:	93 81       	ldd	r25, Z+3	; 0x03
    3874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	f8 01       	movw	r30, r16
    387e:	91 83       	std	Z+1, r25	; 0x01
    3880:	80 83       	st	Z, r24
    3882:	de 01       	movw	r26, r28
    3884:	a9 5b       	subi	r26, 0xB9	; 185
    3886:	bf 4f       	sbci	r27, 0xFF	; 255
    3888:	fe 01       	movw	r30, r28
    388a:	e5 5b       	subi	r30, 0xB5	; 181
    388c:	ff 4f       	sbci	r31, 0xFF	; 255
    388e:	80 81       	ld	r24, Z
    3890:	91 81       	ldd	r25, Z+1	; 0x01
    3892:	8d 93       	st	X+, r24
    3894:	9c 93       	st	X, r25
    3896:	fe 01       	movw	r30, r28
    3898:	e9 5b       	subi	r30, 0xB9	; 185
    389a:	ff 4f       	sbci	r31, 0xFF	; 255
    389c:	80 81       	ld	r24, Z
    389e:	91 81       	ldd	r25, Z+1	; 0x01
    38a0:	01 97       	sbiw	r24, 0x01	; 1
    38a2:	f1 f7       	brne	.-4      	; 0x38a0 <login_system+0x376>
    38a4:	fe 01       	movw	r30, r28
    38a6:	e9 5b       	subi	r30, 0xB9	; 185
    38a8:	ff 4f       	sbci	r31, 0xFF	; 255
    38aa:	91 83       	std	Z+1, r25	; 0x01
    38ac:	80 83       	st	Z, r24
						_delay_ms(20);
						LCD_voidWriteString((u8*)"Wrong Password!");
    38ae:	8a ea       	ldi	r24, 0xAA	; 170
    38b0:	90 e0       	ldi	r25, 0x00	; 0
    38b2:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
    38b6:	fe 01       	movw	r30, r28
    38b8:	ed 5b       	subi	r30, 0xBD	; 189
    38ba:	ff 4f       	sbci	r31, 0xFF	; 255
    38bc:	80 e0       	ldi	r24, 0x00	; 0
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	aa e7       	ldi	r26, 0x7A	; 122
    38c2:	b4 e4       	ldi	r27, 0x44	; 68
    38c4:	80 83       	st	Z, r24
    38c6:	91 83       	std	Z+1, r25	; 0x01
    38c8:	a2 83       	std	Z+2, r26	; 0x02
    38ca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38cc:	8e 01       	movw	r16, r28
    38ce:	01 5c       	subi	r16, 0xC1	; 193
    38d0:	1f 4f       	sbci	r17, 0xFF	; 255
    38d2:	fe 01       	movw	r30, r28
    38d4:	ed 5b       	subi	r30, 0xBD	; 189
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	60 81       	ld	r22, Z
    38da:	71 81       	ldd	r23, Z+1	; 0x01
    38dc:	82 81       	ldd	r24, Z+2	; 0x02
    38de:	93 81       	ldd	r25, Z+3	; 0x03
    38e0:	20 e0       	ldi	r18, 0x00	; 0
    38e2:	30 e0       	ldi	r19, 0x00	; 0
    38e4:	4a ef       	ldi	r20, 0xFA	; 250
    38e6:	54 e4       	ldi	r21, 0x44	; 68
    38e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	f8 01       	movw	r30, r16
    38f2:	80 83       	st	Z, r24
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	a2 83       	std	Z+2, r26	; 0x02
    38f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38fa:	fe 01       	movw	r30, r28
    38fc:	ff 96       	adiw	r30, 0x3f	; 63
    38fe:	60 81       	ld	r22, Z
    3900:	71 81       	ldd	r23, Z+1	; 0x01
    3902:	82 81       	ldd	r24, Z+2	; 0x02
    3904:	93 81       	ldd	r25, Z+3	; 0x03
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	5f e3       	ldi	r21, 0x3F	; 63
    390e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3912:	88 23       	and	r24, r24
    3914:	2c f4       	brge	.+10     	; 0x3920 <login_system+0x3f6>
		__ticks = 1;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9e af       	std	Y+62, r25	; 0x3e
    391c:	8d af       	std	Y+61, r24	; 0x3d
    391e:	46 c0       	rjmp	.+140    	; 0x39ac <login_system+0x482>
	else if (__tmp > 65535)
    3920:	fe 01       	movw	r30, r28
    3922:	ff 96       	adiw	r30, 0x3f	; 63
    3924:	60 81       	ld	r22, Z
    3926:	71 81       	ldd	r23, Z+1	; 0x01
    3928:	82 81       	ldd	r24, Z+2	; 0x02
    392a:	93 81       	ldd	r25, Z+3	; 0x03
    392c:	20 e0       	ldi	r18, 0x00	; 0
    392e:	3f ef       	ldi	r19, 0xFF	; 255
    3930:	4f e7       	ldi	r20, 0x7F	; 127
    3932:	57 e4       	ldi	r21, 0x47	; 71
    3934:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3938:	18 16       	cp	r1, r24
    393a:	64 f5       	brge	.+88     	; 0x3994 <login_system+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    393c:	fe 01       	movw	r30, r28
    393e:	ed 5b       	subi	r30, 0xBD	; 189
    3940:	ff 4f       	sbci	r31, 0xFF	; 255
    3942:	60 81       	ld	r22, Z
    3944:	71 81       	ldd	r23, Z+1	; 0x01
    3946:	82 81       	ldd	r24, Z+2	; 0x02
    3948:	93 81       	ldd	r25, Z+3	; 0x03
    394a:	20 e0       	ldi	r18, 0x00	; 0
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	40 e2       	ldi	r20, 0x20	; 32
    3950:	51 e4       	ldi	r21, 0x41	; 65
    3952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3956:	dc 01       	movw	r26, r24
    3958:	cb 01       	movw	r24, r22
    395a:	bc 01       	movw	r22, r24
    395c:	cd 01       	movw	r24, r26
    395e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3962:	dc 01       	movw	r26, r24
    3964:	cb 01       	movw	r24, r22
    3966:	9e af       	std	Y+62, r25	; 0x3e
    3968:	8d af       	std	Y+61, r24	; 0x3d
    396a:	0f c0       	rjmp	.+30     	; 0x398a <login_system+0x460>
    396c:	88 ec       	ldi	r24, 0xC8	; 200
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	9c af       	std	Y+60, r25	; 0x3c
    3972:	8b af       	std	Y+59, r24	; 0x3b
    3974:	8b ad       	ldd	r24, Y+59	; 0x3b
    3976:	9c ad       	ldd	r25, Y+60	; 0x3c
    3978:	01 97       	sbiw	r24, 0x01	; 1
    397a:	f1 f7       	brne	.-4      	; 0x3978 <login_system+0x44e>
    397c:	9c af       	std	Y+60, r25	; 0x3c
    397e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3980:	8d ad       	ldd	r24, Y+61	; 0x3d
    3982:	9e ad       	ldd	r25, Y+62	; 0x3e
    3984:	01 97       	sbiw	r24, 0x01	; 1
    3986:	9e af       	std	Y+62, r25	; 0x3e
    3988:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    398a:	8d ad       	ldd	r24, Y+61	; 0x3d
    398c:	9e ad       	ldd	r25, Y+62	; 0x3e
    398e:	00 97       	sbiw	r24, 0x00	; 0
    3990:	69 f7       	brne	.-38     	; 0x396c <login_system+0x442>
    3992:	16 c0       	rjmp	.+44     	; 0x39c0 <login_system+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3994:	fe 01       	movw	r30, r28
    3996:	ff 96       	adiw	r30, 0x3f	; 63
    3998:	60 81       	ld	r22, Z
    399a:	71 81       	ldd	r23, Z+1	; 0x01
    399c:	82 81       	ldd	r24, Z+2	; 0x02
    399e:	93 81       	ldd	r25, Z+3	; 0x03
    39a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	9e af       	std	Y+62, r25	; 0x3e
    39aa:	8d af       	std	Y+61, r24	; 0x3d
    39ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    39ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    39b0:	9a af       	std	Y+58, r25	; 0x3a
    39b2:	89 af       	std	Y+57, r24	; 0x39
    39b4:	89 ad       	ldd	r24, Y+57	; 0x39
    39b6:	9a ad       	ldd	r25, Y+58	; 0x3a
    39b8:	01 97       	sbiw	r24, 0x01	; 1
    39ba:	f1 f7       	brne	.-4      	; 0x39b8 <login_system+0x48e>
    39bc:	9a af       	std	Y+58, r25	; 0x3a
    39be:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(1000);
						if(trials < 2) // display try again for twice only
    39c0:	80 91 25 01 	lds	r24, 0x0125
    39c4:	82 30       	cpi	r24, 0x02	; 2
    39c6:	08 f0       	brcs	.+2      	; 0x39ca <login_system+0x4a0>
    39c8:	ea c0       	rjmp	.+468    	; 0x3b9e <login_system+0x674>
						{
							LCD_voidClearScreen();
    39ca:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    39ce:	80 e0       	ldi	r24, 0x00	; 0
    39d0:	90 e0       	ldi	r25, 0x00	; 0
    39d2:	a0 ea       	ldi	r26, 0xA0	; 160
    39d4:	b1 e4       	ldi	r27, 0x41	; 65
    39d6:	8d ab       	std	Y+53, r24	; 0x35
    39d8:	9e ab       	std	Y+54, r25	; 0x36
    39da:	af ab       	std	Y+55, r26	; 0x37
    39dc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39de:	6d a9       	ldd	r22, Y+53	; 0x35
    39e0:	7e a9       	ldd	r23, Y+54	; 0x36
    39e2:	8f a9       	ldd	r24, Y+55	; 0x37
    39e4:	98 ad       	ldd	r25, Y+56	; 0x38
    39e6:	20 e0       	ldi	r18, 0x00	; 0
    39e8:	30 e0       	ldi	r19, 0x00	; 0
    39ea:	4a ef       	ldi	r20, 0xFA	; 250
    39ec:	54 e4       	ldi	r21, 0x44	; 68
    39ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f2:	dc 01       	movw	r26, r24
    39f4:	cb 01       	movw	r24, r22
    39f6:	89 ab       	std	Y+49, r24	; 0x31
    39f8:	9a ab       	std	Y+50, r25	; 0x32
    39fa:	ab ab       	std	Y+51, r26	; 0x33
    39fc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3a00:	7a a9       	ldd	r23, Y+50	; 0x32
    3a02:	8b a9       	ldd	r24, Y+51	; 0x33
    3a04:	9c a9       	ldd	r25, Y+52	; 0x34
    3a06:	20 e0       	ldi	r18, 0x00	; 0
    3a08:	30 e0       	ldi	r19, 0x00	; 0
    3a0a:	40 e8       	ldi	r20, 0x80	; 128
    3a0c:	5f e3       	ldi	r21, 0x3F	; 63
    3a0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a12:	88 23       	and	r24, r24
    3a14:	2c f4       	brge	.+10     	; 0x3a20 <login_system+0x4f6>
		__ticks = 1;
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	98 ab       	std	Y+48, r25	; 0x30
    3a1c:	8f a7       	std	Y+47, r24	; 0x2f
    3a1e:	3f c0       	rjmp	.+126    	; 0x3a9e <login_system+0x574>
	else if (__tmp > 65535)
    3a20:	69 a9       	ldd	r22, Y+49	; 0x31
    3a22:	7a a9       	ldd	r23, Y+50	; 0x32
    3a24:	8b a9       	ldd	r24, Y+51	; 0x33
    3a26:	9c a9       	ldd	r25, Y+52	; 0x34
    3a28:	20 e0       	ldi	r18, 0x00	; 0
    3a2a:	3f ef       	ldi	r19, 0xFF	; 255
    3a2c:	4f e7       	ldi	r20, 0x7F	; 127
    3a2e:	57 e4       	ldi	r21, 0x47	; 71
    3a30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a34:	18 16       	cp	r1, r24
    3a36:	4c f5       	brge	.+82     	; 0x3a8a <login_system+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a38:	6d a9       	ldd	r22, Y+53	; 0x35
    3a3a:	7e a9       	ldd	r23, Y+54	; 0x36
    3a3c:	8f a9       	ldd	r24, Y+55	; 0x37
    3a3e:	98 ad       	ldd	r25, Y+56	; 0x38
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e2       	ldi	r20, 0x20	; 32
    3a46:	51 e4       	ldi	r21, 0x41	; 65
    3a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	bc 01       	movw	r22, r24
    3a52:	cd 01       	movw	r24, r26
    3a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a58:	dc 01       	movw	r26, r24
    3a5a:	cb 01       	movw	r24, r22
    3a5c:	98 ab       	std	Y+48, r25	; 0x30
    3a5e:	8f a7       	std	Y+47, r24	; 0x2f
    3a60:	0f c0       	rjmp	.+30     	; 0x3a80 <login_system+0x556>
    3a62:	88 ec       	ldi	r24, 0xC8	; 200
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9e a7       	std	Y+46, r25	; 0x2e
    3a68:	8d a7       	std	Y+45, r24	; 0x2d
    3a6a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a6c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a6e:	01 97       	sbiw	r24, 0x01	; 1
    3a70:	f1 f7       	brne	.-4      	; 0x3a6e <login_system+0x544>
    3a72:	9e a7       	std	Y+46, r25	; 0x2e
    3a74:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a76:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a78:	98 a9       	ldd	r25, Y+48	; 0x30
    3a7a:	01 97       	sbiw	r24, 0x01	; 1
    3a7c:	98 ab       	std	Y+48, r25	; 0x30
    3a7e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a80:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a82:	98 a9       	ldd	r25, Y+48	; 0x30
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	69 f7       	brne	.-38     	; 0x3a62 <login_system+0x538>
    3a88:	14 c0       	rjmp	.+40     	; 0x3ab2 <login_system+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a8a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a8c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a8e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a90:	9c a9       	ldd	r25, Y+52	; 0x34
    3a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a96:	dc 01       	movw	r26, r24
    3a98:	cb 01       	movw	r24, r22
    3a9a:	98 ab       	std	Y+48, r25	; 0x30
    3a9c:	8f a7       	std	Y+47, r24	; 0x2f
    3a9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3aa0:	98 a9       	ldd	r25, Y+48	; 0x30
    3aa2:	9c a7       	std	Y+44, r25	; 0x2c
    3aa4:	8b a7       	std	Y+43, r24	; 0x2b
    3aa6:	8b a5       	ldd	r24, Y+43	; 0x2b
    3aa8:	9c a5       	ldd	r25, Y+44	; 0x2c
    3aaa:	01 97       	sbiw	r24, 0x01	; 1
    3aac:	f1 f7       	brne	.-4      	; 0x3aaa <login_system+0x580>
    3aae:	9c a7       	std	Y+44, r25	; 0x2c
    3ab0:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(20);
							LCD_voidWriteString((u8*)"Try Again!");
    3ab2:	8a eb       	ldi	r24, 0xBA	; 186
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
    3aba:	80 e0       	ldi	r24, 0x00	; 0
    3abc:	90 e0       	ldi	r25, 0x00	; 0
    3abe:	aa e7       	ldi	r26, 0x7A	; 122
    3ac0:	b4 e4       	ldi	r27, 0x44	; 68
    3ac2:	8f a3       	std	Y+39, r24	; 0x27
    3ac4:	98 a7       	std	Y+40, r25	; 0x28
    3ac6:	a9 a7       	std	Y+41, r26	; 0x29
    3ac8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aca:	6f a1       	ldd	r22, Y+39	; 0x27
    3acc:	78 a5       	ldd	r23, Y+40	; 0x28
    3ace:	89 a5       	ldd	r24, Y+41	; 0x29
    3ad0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	4a ef       	ldi	r20, 0xFA	; 250
    3ad8:	54 e4       	ldi	r21, 0x44	; 68
    3ada:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ade:	dc 01       	movw	r26, r24
    3ae0:	cb 01       	movw	r24, r22
    3ae2:	8b a3       	std	Y+35, r24	; 0x23
    3ae4:	9c a3       	std	Y+36, r25	; 0x24
    3ae6:	ad a3       	std	Y+37, r26	; 0x25
    3ae8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aea:	6b a1       	ldd	r22, Y+35	; 0x23
    3aec:	7c a1       	ldd	r23, Y+36	; 0x24
    3aee:	8d a1       	ldd	r24, Y+37	; 0x25
    3af0:	9e a1       	ldd	r25, Y+38	; 0x26
    3af2:	20 e0       	ldi	r18, 0x00	; 0
    3af4:	30 e0       	ldi	r19, 0x00	; 0
    3af6:	40 e8       	ldi	r20, 0x80	; 128
    3af8:	5f e3       	ldi	r21, 0x3F	; 63
    3afa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3afe:	88 23       	and	r24, r24
    3b00:	2c f4       	brge	.+10     	; 0x3b0c <login_system+0x5e2>
		__ticks = 1;
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	9a a3       	std	Y+34, r25	; 0x22
    3b08:	89 a3       	std	Y+33, r24	; 0x21
    3b0a:	3f c0       	rjmp	.+126    	; 0x3b8a <login_system+0x660>
	else if (__tmp > 65535)
    3b0c:	6b a1       	ldd	r22, Y+35	; 0x23
    3b0e:	7c a1       	ldd	r23, Y+36	; 0x24
    3b10:	8d a1       	ldd	r24, Y+37	; 0x25
    3b12:	9e a1       	ldd	r25, Y+38	; 0x26
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	3f ef       	ldi	r19, 0xFF	; 255
    3b18:	4f e7       	ldi	r20, 0x7F	; 127
    3b1a:	57 e4       	ldi	r21, 0x47	; 71
    3b1c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b20:	18 16       	cp	r1, r24
    3b22:	4c f5       	brge	.+82     	; 0x3b76 <login_system+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b24:	6f a1       	ldd	r22, Y+39	; 0x27
    3b26:	78 a5       	ldd	r23, Y+40	; 0x28
    3b28:	89 a5       	ldd	r24, Y+41	; 0x29
    3b2a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b2c:	20 e0       	ldi	r18, 0x00	; 0
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	40 e2       	ldi	r20, 0x20	; 32
    3b32:	51 e4       	ldi	r21, 0x41	; 65
    3b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b38:	dc 01       	movw	r26, r24
    3b3a:	cb 01       	movw	r24, r22
    3b3c:	bc 01       	movw	r22, r24
    3b3e:	cd 01       	movw	r24, r26
    3b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b44:	dc 01       	movw	r26, r24
    3b46:	cb 01       	movw	r24, r22
    3b48:	9a a3       	std	Y+34, r25	; 0x22
    3b4a:	89 a3       	std	Y+33, r24	; 0x21
    3b4c:	0f c0       	rjmp	.+30     	; 0x3b6c <login_system+0x642>
    3b4e:	88 ec       	ldi	r24, 0xC8	; 200
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	98 a3       	std	Y+32, r25	; 0x20
    3b54:	8f 8f       	std	Y+31, r24	; 0x1f
    3b56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b58:	98 a1       	ldd	r25, Y+32	; 0x20
    3b5a:	01 97       	sbiw	r24, 0x01	; 1
    3b5c:	f1 f7       	brne	.-4      	; 0x3b5a <login_system+0x630>
    3b5e:	98 a3       	std	Y+32, r25	; 0x20
    3b60:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b62:	89 a1       	ldd	r24, Y+33	; 0x21
    3b64:	9a a1       	ldd	r25, Y+34	; 0x22
    3b66:	01 97       	sbiw	r24, 0x01	; 1
    3b68:	9a a3       	std	Y+34, r25	; 0x22
    3b6a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b6c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b6e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b70:	00 97       	sbiw	r24, 0x00	; 0
    3b72:	69 f7       	brne	.-38     	; 0x3b4e <login_system+0x624>
    3b74:	14 c0       	rjmp	.+40     	; 0x3b9e <login_system+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b76:	6b a1       	ldd	r22, Y+35	; 0x23
    3b78:	7c a1       	ldd	r23, Y+36	; 0x24
    3b7a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b7c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b82:	dc 01       	movw	r26, r24
    3b84:	cb 01       	movw	r24, r22
    3b86:	9a a3       	std	Y+34, r25	; 0x22
    3b88:	89 a3       	std	Y+33, r24	; 0x21
    3b8a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b8c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b8e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b90:	8d 8f       	std	Y+29, r24	; 0x1d
    3b92:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b94:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b96:	01 97       	sbiw	r24, 0x01	; 1
    3b98:	f1 f7       	brne	.-4      	; 0x3b96 <login_system+0x66c>
    3b9a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b9c:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(1000);
						}
						trials++;
    3b9e:	80 91 25 01 	lds	r24, 0x0125
    3ba2:	8f 5f       	subi	r24, 0xFF	; 255
    3ba4:	80 93 25 01 	sts	0x0125, r24
						Local_u8Index = 0;
    3ba8:	10 92 1f 01 	sts	0x011F, r1
						ClearBuffer(Local_Au8InputBuffer,5);
    3bac:	80 e2       	ldi	r24, 0x20	; 32
    3bae:	91 e0       	ldi	r25, 0x01	; 1
    3bb0:	65 e0       	ldi	r22, 0x05	; 5
    3bb2:	0e 94 21 1a 	call	0x3442	; 0x3442 <ClearBuffer>
						if(trials <= 2) // For Last trial that will not display try again
    3bb6:	80 91 25 01 	lds	r24, 0x0125
    3bba:	83 30       	cpi	r24, 0x03	; 3
    3bbc:	08 f0       	brcs	.+2      	; 0x3bc0 <login_system+0x696>
    3bbe:	d4 cc       	rjmp	.-1624   	; 0x3568 <login_system+0x3e>
						{
							LCD_voidClearScreen();
    3bc0:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    3bc4:	80 e0       	ldi	r24, 0x00	; 0
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	a0 ea       	ldi	r26, 0xA0	; 160
    3bca:	b1 e4       	ldi	r27, 0x41	; 65
    3bcc:	89 8f       	std	Y+25, r24	; 0x19
    3bce:	9a 8f       	std	Y+26, r25	; 0x1a
    3bd0:	ab 8f       	std	Y+27, r26	; 0x1b
    3bd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bd4:	69 8d       	ldd	r22, Y+25	; 0x19
    3bd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bdc:	20 e0       	ldi	r18, 0x00	; 0
    3bde:	30 e0       	ldi	r19, 0x00	; 0
    3be0:	4a ef       	ldi	r20, 0xFA	; 250
    3be2:	54 e4       	ldi	r21, 0x44	; 68
    3be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	8d 8b       	std	Y+21, r24	; 0x15
    3bee:	9e 8b       	std	Y+22, r25	; 0x16
    3bf0:	af 8b       	std	Y+23, r26	; 0x17
    3bf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bf4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bf6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bf8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bfa:	98 8d       	ldd	r25, Y+24	; 0x18
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	40 e8       	ldi	r20, 0x80	; 128
    3c02:	5f e3       	ldi	r21, 0x3F	; 63
    3c04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c08:	88 23       	and	r24, r24
    3c0a:	2c f4       	brge	.+10     	; 0x3c16 <login_system+0x6ec>
		__ticks = 1;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1
    3c0e:	90 e0       	ldi	r25, 0x00	; 0
    3c10:	9c 8b       	std	Y+20, r25	; 0x14
    3c12:	8b 8b       	std	Y+19, r24	; 0x13
    3c14:	3f c0       	rjmp	.+126    	; 0x3c94 <login_system+0x76a>
	else if (__tmp > 65535)
    3c16:	6d 89       	ldd	r22, Y+21	; 0x15
    3c18:	7e 89       	ldd	r23, Y+22	; 0x16
    3c1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3c1c:	98 8d       	ldd	r25, Y+24	; 0x18
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	3f ef       	ldi	r19, 0xFF	; 255
    3c22:	4f e7       	ldi	r20, 0x7F	; 127
    3c24:	57 e4       	ldi	r21, 0x47	; 71
    3c26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c2a:	18 16       	cp	r1, r24
    3c2c:	4c f5       	brge	.+82     	; 0x3c80 <login_system+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c2e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	40 e2       	ldi	r20, 0x20	; 32
    3c3c:	51 e4       	ldi	r21, 0x41	; 65
    3c3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c42:	dc 01       	movw	r26, r24
    3c44:	cb 01       	movw	r24, r22
    3c46:	bc 01       	movw	r22, r24
    3c48:	cd 01       	movw	r24, r26
    3c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4e:	dc 01       	movw	r26, r24
    3c50:	cb 01       	movw	r24, r22
    3c52:	9c 8b       	std	Y+20, r25	; 0x14
    3c54:	8b 8b       	std	Y+19, r24	; 0x13
    3c56:	0f c0       	rjmp	.+30     	; 0x3c76 <login_system+0x74c>
    3c58:	88 ec       	ldi	r24, 0xC8	; 200
    3c5a:	90 e0       	ldi	r25, 0x00	; 0
    3c5c:	9a 8b       	std	Y+18, r25	; 0x12
    3c5e:	89 8b       	std	Y+17, r24	; 0x11
    3c60:	89 89       	ldd	r24, Y+17	; 0x11
    3c62:	9a 89       	ldd	r25, Y+18	; 0x12
    3c64:	01 97       	sbiw	r24, 0x01	; 1
    3c66:	f1 f7       	brne	.-4      	; 0x3c64 <login_system+0x73a>
    3c68:	9a 8b       	std	Y+18, r25	; 0x12
    3c6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c70:	01 97       	sbiw	r24, 0x01	; 1
    3c72:	9c 8b       	std	Y+20, r25	; 0x14
    3c74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c76:	8b 89       	ldd	r24, Y+19	; 0x13
    3c78:	9c 89       	ldd	r25, Y+20	; 0x14
    3c7a:	00 97       	sbiw	r24, 0x00	; 0
    3c7c:	69 f7       	brne	.-38     	; 0x3c58 <login_system+0x72e>
    3c7e:	14 c0       	rjmp	.+40     	; 0x3ca8 <login_system+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c80:	6d 89       	ldd	r22, Y+21	; 0x15
    3c82:	7e 89       	ldd	r23, Y+22	; 0x16
    3c84:	8f 89       	ldd	r24, Y+23	; 0x17
    3c86:	98 8d       	ldd	r25, Y+24	; 0x18
    3c88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	9c 8b       	std	Y+20, r25	; 0x14
    3c92:	8b 8b       	std	Y+19, r24	; 0x13
    3c94:	8b 89       	ldd	r24, Y+19	; 0x13
    3c96:	9c 89       	ldd	r25, Y+20	; 0x14
    3c98:	98 8b       	std	Y+16, r25	; 0x10
    3c9a:	8f 87       	std	Y+15, r24	; 0x0f
    3c9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c9e:	98 89       	ldd	r25, Y+16	; 0x10
    3ca0:	01 97       	sbiw	r24, 0x01	; 1
    3ca2:	f1 f7       	brne	.-4      	; 0x3ca0 <login_system+0x776>
    3ca4:	98 8b       	std	Y+16, r25	; 0x10
    3ca6:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(20);
							LCD_voidWriteString((u8*)"Enter Password: ");
    3ca8:	87 e8       	ldi	r24, 0x87	; 135
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
							LCD_u8GoToXY(LCD_u8_LINE2,0);
    3cb0:	82 e0       	ldi	r24, 0x02	; 2
    3cb2:	60 e0       	ldi	r22, 0x00	; 0
    3cb4:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
    3cb8:	57 cc       	rjmp	.-1874   	; 0x3568 <login_system+0x3e>
						}
					}
				}
				else  // If pressed key is a number or operator
				{
					appenedToBuffer(Local_Au8InputBuffer,Local_u8Key); // Append pressed key to buffer
    3cba:	fe 01       	movw	r30, r28
    3cbc:	ed 59       	subi	r30, 0x9D	; 157
    3cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3cc0:	20 81       	ld	r18, Z
    3cc2:	80 e2       	ldi	r24, 0x20	; 32
    3cc4:	91 e0       	ldi	r25, 0x01	; 1
    3cc6:	62 2f       	mov	r22, r18
    3cc8:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <appenedToBuffer>
					LCD_voidSendChar('*'); // Display pressed key on LCD
    3ccc:	8a e2       	ldi	r24, 0x2A	; 42
    3cce:	0e 94 81 14 	call	0x2902	; 0x2902 <LCD_voidSendChar>
    3cd2:	4a cc       	rjmp	.-1900   	; 0x3568 <login_system+0x3e>
				}
			}
		}
		else if ( trials == 3) // to make sure this won't execute the else before trails run out
    3cd4:	80 91 25 01 	lds	r24, 0x0125
    3cd8:	83 30       	cpi	r24, 0x03	; 3
    3cda:	09 f0       	breq	.+2      	; 0x3cde <login_system+0x7b4>
    3cdc:	45 cc       	rjmp	.-1910   	; 0x3568 <login_system+0x3e>
		{
			LCD_voidClearScreen();
    3cde:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	90 e0       	ldi	r25, 0x00	; 0
    3ce6:	a0 ea       	ldi	r26, 0xA0	; 160
    3ce8:	b1 e4       	ldi	r27, 0x41	; 65
    3cea:	8b 87       	std	Y+11, r24	; 0x0b
    3cec:	9c 87       	std	Y+12, r25	; 0x0c
    3cee:	ad 87       	std	Y+13, r26	; 0x0d
    3cf0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cfa:	20 e0       	ldi	r18, 0x00	; 0
    3cfc:	30 e0       	ldi	r19, 0x00	; 0
    3cfe:	4a ef       	ldi	r20, 0xFA	; 250
    3d00:	54 e4       	ldi	r21, 0x44	; 68
    3d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d06:	dc 01       	movw	r26, r24
    3d08:	cb 01       	movw	r24, r22
    3d0a:	8f 83       	std	Y+7, r24	; 0x07
    3d0c:	98 87       	std	Y+8, r25	; 0x08
    3d0e:	a9 87       	std	Y+9, r26	; 0x09
    3d10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d12:	6f 81       	ldd	r22, Y+7	; 0x07
    3d14:	78 85       	ldd	r23, Y+8	; 0x08
    3d16:	89 85       	ldd	r24, Y+9	; 0x09
    3d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	30 e0       	ldi	r19, 0x00	; 0
    3d1e:	40 e8       	ldi	r20, 0x80	; 128
    3d20:	5f e3       	ldi	r21, 0x3F	; 63
    3d22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d26:	88 23       	and	r24, r24
    3d28:	2c f4       	brge	.+10     	; 0x3d34 <login_system+0x80a>
		__ticks = 1;
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	90 e0       	ldi	r25, 0x00	; 0
    3d2e:	9e 83       	std	Y+6, r25	; 0x06
    3d30:	8d 83       	std	Y+5, r24	; 0x05
    3d32:	3f c0       	rjmp	.+126    	; 0x3db2 <login_system+0x888>
	else if (__tmp > 65535)
    3d34:	6f 81       	ldd	r22, Y+7	; 0x07
    3d36:	78 85       	ldd	r23, Y+8	; 0x08
    3d38:	89 85       	ldd	r24, Y+9	; 0x09
    3d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	3f ef       	ldi	r19, 0xFF	; 255
    3d40:	4f e7       	ldi	r20, 0x7F	; 127
    3d42:	57 e4       	ldi	r21, 0x47	; 71
    3d44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3d48:	18 16       	cp	r1, r24
    3d4a:	4c f5       	brge	.+82     	; 0x3d9e <login_system+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d50:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d52:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	30 e0       	ldi	r19, 0x00	; 0
    3d58:	40 e2       	ldi	r20, 0x20	; 32
    3d5a:	51 e4       	ldi	r21, 0x41	; 65
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	bc 01       	movw	r22, r24
    3d66:	cd 01       	movw	r24, r26
    3d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d6c:	dc 01       	movw	r26, r24
    3d6e:	cb 01       	movw	r24, r22
    3d70:	9e 83       	std	Y+6, r25	; 0x06
    3d72:	8d 83       	std	Y+5, r24	; 0x05
    3d74:	0f c0       	rjmp	.+30     	; 0x3d94 <login_system+0x86a>
    3d76:	88 ec       	ldi	r24, 0xC8	; 200
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	9c 83       	std	Y+4, r25	; 0x04
    3d7c:	8b 83       	std	Y+3, r24	; 0x03
    3d7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d80:	9c 81       	ldd	r25, Y+4	; 0x04
    3d82:	01 97       	sbiw	r24, 0x01	; 1
    3d84:	f1 f7       	brne	.-4      	; 0x3d82 <login_system+0x858>
    3d86:	9c 83       	std	Y+4, r25	; 0x04
    3d88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d8e:	01 97       	sbiw	r24, 0x01	; 1
    3d90:	9e 83       	std	Y+6, r25	; 0x06
    3d92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d94:	8d 81       	ldd	r24, Y+5	; 0x05
    3d96:	9e 81       	ldd	r25, Y+6	; 0x06
    3d98:	00 97       	sbiw	r24, 0x00	; 0
    3d9a:	69 f7       	brne	.-38     	; 0x3d76 <login_system+0x84c>
    3d9c:	14 c0       	rjmp	.+40     	; 0x3dc6 <login_system+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3da0:	78 85       	ldd	r23, Y+8	; 0x08
    3da2:	89 85       	ldd	r24, Y+9	; 0x09
    3da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3daa:	dc 01       	movw	r26, r24
    3dac:	cb 01       	movw	r24, r22
    3dae:	9e 83       	std	Y+6, r25	; 0x06
    3db0:	8d 83       	std	Y+5, r24	; 0x05
    3db2:	8d 81       	ldd	r24, Y+5	; 0x05
    3db4:	9e 81       	ldd	r25, Y+6	; 0x06
    3db6:	9a 83       	std	Y+2, r25	; 0x02
    3db8:	89 83       	std	Y+1, r24	; 0x01
    3dba:	89 81       	ldd	r24, Y+1	; 0x01
    3dbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3dbe:	01 97       	sbiw	r24, 0x01	; 1
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <login_system+0x894>
    3dc2:	9a 83       	std	Y+2, r25	; 0x02
    3dc4:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			LCD_voidWriteString((u8*)"Failed Login ");
    3dc6:	85 ec       	ldi	r24, 0xC5	; 197
    3dc8:	90 e0       	ldi	r25, 0x00	; 0
    3dca:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
			*flag = 0;
    3dce:	fe 01       	movw	r30, r28
    3dd0:	e9 59       	subi	r30, 0x99	; 153
    3dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd4:	01 90       	ld	r0, Z+
    3dd6:	f0 81       	ld	r31, Z
    3dd8:	e0 2d       	mov	r30, r0
    3dda:	10 82       	st	Z, r1
			break;
		}
	}
}
    3ddc:	c8 59       	subi	r28, 0x98	; 152
    3dde:	df 4f       	sbci	r29, 0xFF	; 255
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	f8 94       	cli
    3de4:	de bf       	out	0x3e, r29	; 62
    3de6:	0f be       	out	0x3f, r0	; 63
    3de8:	cd bf       	out	0x3d, r28	; 61
    3dea:	cf 91       	pop	r28
    3dec:	df 91       	pop	r29
    3dee:	1f 91       	pop	r17
    3df0:	0f 91       	pop	r16
    3df2:	08 95       	ret

00003df4 <main>:
/*Services Layer*/
#include "Login_System.h"
#include "Dashboard.h"

int main(void)
{
    3df4:	0f 93       	push	r16
    3df6:	1f 93       	push	r17
    3df8:	df 93       	push	r29
    3dfa:	cf 93       	push	r28
    3dfc:	cd b7       	in	r28, 0x3d	; 61
    3dfe:	de b7       	in	r29, 0x3e	; 62
    3e00:	cf 55       	subi	r28, 0x5F	; 95
    3e02:	d0 40       	sbci	r29, 0x00	; 0
    3e04:	0f b6       	in	r0, 0x3f	; 63
    3e06:	f8 94       	cli
    3e08:	de bf       	out	0x3e, r29	; 62
    3e0a:	0f be       	out	0x3f, r0	; 63
    3e0c:	cd bf       	out	0x3d, r28	; 61
	u8 const password[] = "1234";
    3e0e:	ce 01       	movw	r24, r28
    3e10:	8b 5a       	subi	r24, 0xAB	; 171
    3e12:	9f 4f       	sbci	r25, 0xFF	; 255
    3e14:	6d 96       	adiw	r28, 0x1d	; 29
    3e16:	9f af       	std	Y+63, r25	; 0x3f
    3e18:	8e af       	std	Y+62, r24	; 0x3e
    3e1a:	6d 97       	sbiw	r28, 0x1d	; 29
    3e1c:	87 ef       	ldi	r24, 0xF7	; 247
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	6f 96       	adiw	r28, 0x1f	; 31
    3e22:	9f af       	std	Y+63, r25	; 0x3f
    3e24:	8e af       	std	Y+62, r24	; 0x3e
    3e26:	6f 97       	sbiw	r28, 0x1f	; 31
    3e28:	95 e0       	ldi	r25, 0x05	; 5
    3e2a:	a0 96       	adiw	r28, 0x20	; 32
    3e2c:	9f af       	std	Y+63, r25	; 0x3f
    3e2e:	a0 97       	sbiw	r28, 0x20	; 32
    3e30:	6f 96       	adiw	r28, 0x1f	; 31
    3e32:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e34:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e36:	6f 97       	sbiw	r28, 0x1f	; 31
    3e38:	00 80       	ld	r0, Z
    3e3a:	6f 96       	adiw	r28, 0x1f	; 31
    3e3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e40:	6f 97       	sbiw	r28, 0x1f	; 31
    3e42:	01 96       	adiw	r24, 0x01	; 1
    3e44:	6f 96       	adiw	r28, 0x1f	; 31
    3e46:	9f af       	std	Y+63, r25	; 0x3f
    3e48:	8e af       	std	Y+62, r24	; 0x3e
    3e4a:	6f 97       	sbiw	r28, 0x1f	; 31
    3e4c:	6d 96       	adiw	r28, 0x1d	; 29
    3e4e:	ee ad       	ldd	r30, Y+62	; 0x3e
    3e50:	ff ad       	ldd	r31, Y+63	; 0x3f
    3e52:	6d 97       	sbiw	r28, 0x1d	; 29
    3e54:	00 82       	st	Z, r0
    3e56:	6d 96       	adiw	r28, 0x1d	; 29
    3e58:	8e ad       	ldd	r24, Y+62	; 0x3e
    3e5a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e5c:	6d 97       	sbiw	r28, 0x1d	; 29
    3e5e:	01 96       	adiw	r24, 0x01	; 1
    3e60:	6d 96       	adiw	r28, 0x1d	; 29
    3e62:	9f af       	std	Y+63, r25	; 0x3f
    3e64:	8e af       	std	Y+62, r24	; 0x3e
    3e66:	6d 97       	sbiw	r28, 0x1d	; 29
    3e68:	a0 96       	adiw	r28, 0x20	; 32
    3e6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3e6c:	a0 97       	sbiw	r28, 0x20	; 32
    3e6e:	91 50       	subi	r25, 0x01	; 1
    3e70:	a0 96       	adiw	r28, 0x20	; 32
    3e72:	9f af       	std	Y+63, r25	; 0x3f
    3e74:	a0 97       	sbiw	r28, 0x20	; 32
    3e76:	a0 96       	adiw	r28, 0x20	; 32
    3e78:	ef ad       	ldd	r30, Y+63	; 0x3f
    3e7a:	a0 97       	sbiw	r28, 0x20	; 32
    3e7c:	ee 23       	and	r30, r30
    3e7e:	c1 f6       	brne	.-80     	; 0x3e30 <main+0x3c>
	u8 flag;//To check login correct or wrong
	DIO_voidInit();
    3e80:	0e 94 bb 07 	call	0xf76	; 0xf76 <DIO_voidInit>
	LCD_voidInit();
    3e84:	0e 94 16 10 	call	0x202c	; 0x202c <LCD_voidInit>
	ADC_voidInit();
    3e88:	0e 94 4f 06 	call	0xc9e	; 0xc9e <ADC_voidInit>
	while(1)
	{
		login_system(password,&flag);
    3e8c:	ce 01       	movw	r24, r28
    3e8e:	8b 5a       	subi	r24, 0xAB	; 171
    3e90:	9f 4f       	sbci	r25, 0xFF	; 255
    3e92:	9e 01       	movw	r18, r28
    3e94:	26 5a       	subi	r18, 0xA6	; 166
    3e96:	3f 4f       	sbci	r19, 0xFF	; 255
    3e98:	b9 01       	movw	r22, r18
    3e9a:	0e 94 95 1a 	call	0x352a	; 0x352a <login_system>
		if(flag)
    3e9e:	fe 01       	movw	r30, r28
    3ea0:	e6 5a       	subi	r30, 0xA6	; 166
    3ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea4:	80 81       	ld	r24, Z
    3ea6:	88 23       	and	r24, r24
    3ea8:	09 f4       	brne	.+2      	; 0x3eac <main+0xb8>
    3eaa:	bb c1       	rjmp	.+886    	; 0x4222 <main+0x42e>
    3eac:	fe 01       	movw	r30, r28
    3eae:	ef 5a       	subi	r30, 0xAF	; 175
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	80 e0       	ldi	r24, 0x00	; 0
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	aa e7       	ldi	r26, 0x7A	; 122
    3eb8:	b4 e4       	ldi	r27, 0x44	; 68
    3eba:	80 83       	st	Z, r24
    3ebc:	91 83       	std	Z+1, r25	; 0x01
    3ebe:	a2 83       	std	Z+2, r26	; 0x02
    3ec0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ec2:	8e 01       	movw	r16, r28
    3ec4:	03 5b       	subi	r16, 0xB3	; 179
    3ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ec8:	fe 01       	movw	r30, r28
    3eca:	ef 5a       	subi	r30, 0xAF	; 175
    3ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    3ece:	60 81       	ld	r22, Z
    3ed0:	71 81       	ldd	r23, Z+1	; 0x01
    3ed2:	82 81       	ldd	r24, Z+2	; 0x02
    3ed4:	93 81       	ldd	r25, Z+3	; 0x03
    3ed6:	20 e0       	ldi	r18, 0x00	; 0
    3ed8:	30 e0       	ldi	r19, 0x00	; 0
    3eda:	4a ef       	ldi	r20, 0xFA	; 250
    3edc:	54 e4       	ldi	r21, 0x44	; 68
    3ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	cb 01       	movw	r24, r22
    3ee6:	f8 01       	movw	r30, r16
    3ee8:	80 83       	st	Z, r24
    3eea:	91 83       	std	Z+1, r25	; 0x01
    3eec:	a2 83       	std	Z+2, r26	; 0x02
    3eee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ef0:	fe 01       	movw	r30, r28
    3ef2:	e3 5b       	subi	r30, 0xB3	; 179
    3ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ef6:	60 81       	ld	r22, Z
    3ef8:	71 81       	ldd	r23, Z+1	; 0x01
    3efa:	82 81       	ldd	r24, Z+2	; 0x02
    3efc:	93 81       	ldd	r25, Z+3	; 0x03
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	40 e8       	ldi	r20, 0x80	; 128
    3f04:	5f e3       	ldi	r21, 0x3F	; 63
    3f06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f0a:	88 23       	and	r24, r24
    3f0c:	44 f4       	brge	.+16     	; 0x3f1e <main+0x12a>
		__ticks = 1;
    3f0e:	fe 01       	movw	r30, r28
    3f10:	e5 5b       	subi	r30, 0xB5	; 181
    3f12:	ff 4f       	sbci	r31, 0xFF	; 255
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	90 e0       	ldi	r25, 0x00	; 0
    3f18:	91 83       	std	Z+1, r25	; 0x01
    3f1a:	80 83       	st	Z, r24
    3f1c:	64 c0       	rjmp	.+200    	; 0x3fe6 <main+0x1f2>
	else if (__tmp > 65535)
    3f1e:	fe 01       	movw	r30, r28
    3f20:	e3 5b       	subi	r30, 0xB3	; 179
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	60 81       	ld	r22, Z
    3f26:	71 81       	ldd	r23, Z+1	; 0x01
    3f28:	82 81       	ldd	r24, Z+2	; 0x02
    3f2a:	93 81       	ldd	r25, Z+3	; 0x03
    3f2c:	20 e0       	ldi	r18, 0x00	; 0
    3f2e:	3f ef       	ldi	r19, 0xFF	; 255
    3f30:	4f e7       	ldi	r20, 0x7F	; 127
    3f32:	57 e4       	ldi	r21, 0x47	; 71
    3f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f38:	18 16       	cp	r1, r24
    3f3a:	0c f0       	brlt	.+2      	; 0x3f3e <main+0x14a>
    3f3c:	43 c0       	rjmp	.+134    	; 0x3fc4 <main+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f3e:	fe 01       	movw	r30, r28
    3f40:	ef 5a       	subi	r30, 0xAF	; 175
    3f42:	ff 4f       	sbci	r31, 0xFF	; 255
    3f44:	60 81       	ld	r22, Z
    3f46:	71 81       	ldd	r23, Z+1	; 0x01
    3f48:	82 81       	ldd	r24, Z+2	; 0x02
    3f4a:	93 81       	ldd	r25, Z+3	; 0x03
    3f4c:	20 e0       	ldi	r18, 0x00	; 0
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	40 e2       	ldi	r20, 0x20	; 32
    3f52:	51 e4       	ldi	r21, 0x41	; 65
    3f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f58:	dc 01       	movw	r26, r24
    3f5a:	cb 01       	movw	r24, r22
    3f5c:	8e 01       	movw	r16, r28
    3f5e:	05 5b       	subi	r16, 0xB5	; 181
    3f60:	1f 4f       	sbci	r17, 0xFF	; 255
    3f62:	bc 01       	movw	r22, r24
    3f64:	cd 01       	movw	r24, r26
    3f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	f8 01       	movw	r30, r16
    3f70:	91 83       	std	Z+1, r25	; 0x01
    3f72:	80 83       	st	Z, r24
    3f74:	1f c0       	rjmp	.+62     	; 0x3fb4 <main+0x1c0>
    3f76:	fe 01       	movw	r30, r28
    3f78:	e7 5b       	subi	r30, 0xB7	; 183
    3f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7c:	88 ec       	ldi	r24, 0xC8	; 200
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	91 83       	std	Z+1, r25	; 0x01
    3f82:	80 83       	st	Z, r24
    3f84:	fe 01       	movw	r30, r28
    3f86:	e7 5b       	subi	r30, 0xB7	; 183
    3f88:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8a:	80 81       	ld	r24, Z
    3f8c:	91 81       	ldd	r25, Z+1	; 0x01
    3f8e:	01 97       	sbiw	r24, 0x01	; 1
    3f90:	f1 f7       	brne	.-4      	; 0x3f8e <main+0x19a>
    3f92:	fe 01       	movw	r30, r28
    3f94:	e7 5b       	subi	r30, 0xB7	; 183
    3f96:	ff 4f       	sbci	r31, 0xFF	; 255
    3f98:	91 83       	std	Z+1, r25	; 0x01
    3f9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f9c:	de 01       	movw	r26, r28
    3f9e:	a5 5b       	subi	r26, 0xB5	; 181
    3fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    3fa2:	fe 01       	movw	r30, r28
    3fa4:	e5 5b       	subi	r30, 0xB5	; 181
    3fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa8:	80 81       	ld	r24, Z
    3faa:	91 81       	ldd	r25, Z+1	; 0x01
    3fac:	01 97       	sbiw	r24, 0x01	; 1
    3fae:	11 96       	adiw	r26, 0x01	; 1
    3fb0:	9c 93       	st	X, r25
    3fb2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb4:	fe 01       	movw	r30, r28
    3fb6:	e5 5b       	subi	r30, 0xB5	; 181
    3fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3fba:	80 81       	ld	r24, Z
    3fbc:	91 81       	ldd	r25, Z+1	; 0x01
    3fbe:	00 97       	sbiw	r24, 0x00	; 0
    3fc0:	d1 f6       	brne	.-76     	; 0x3f76 <main+0x182>
    3fc2:	27 c0       	rjmp	.+78     	; 0x4012 <main+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fc4:	8e 01       	movw	r16, r28
    3fc6:	05 5b       	subi	r16, 0xB5	; 181
    3fc8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fca:	fe 01       	movw	r30, r28
    3fcc:	e3 5b       	subi	r30, 0xB3	; 179
    3fce:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd0:	60 81       	ld	r22, Z
    3fd2:	71 81       	ldd	r23, Z+1	; 0x01
    3fd4:	82 81       	ldd	r24, Z+2	; 0x02
    3fd6:	93 81       	ldd	r25, Z+3	; 0x03
    3fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fdc:	dc 01       	movw	r26, r24
    3fde:	cb 01       	movw	r24, r22
    3fe0:	f8 01       	movw	r30, r16
    3fe2:	91 83       	std	Z+1, r25	; 0x01
    3fe4:	80 83       	st	Z, r24
    3fe6:	de 01       	movw	r26, r28
    3fe8:	a9 5b       	subi	r26, 0xB9	; 185
    3fea:	bf 4f       	sbci	r27, 0xFF	; 255
    3fec:	fe 01       	movw	r30, r28
    3fee:	e5 5b       	subi	r30, 0xB5	; 181
    3ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff2:	80 81       	ld	r24, Z
    3ff4:	91 81       	ldd	r25, Z+1	; 0x01
    3ff6:	8d 93       	st	X+, r24
    3ff8:	9c 93       	st	X, r25
    3ffa:	fe 01       	movw	r30, r28
    3ffc:	e9 5b       	subi	r30, 0xB9	; 185
    3ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    4000:	80 81       	ld	r24, Z
    4002:	91 81       	ldd	r25, Z+1	; 0x01
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	f1 f7       	brne	.-4      	; 0x4004 <main+0x210>
    4008:	fe 01       	movw	r30, r28
    400a:	e9 5b       	subi	r30, 0xB9	; 185
    400c:	ff 4f       	sbci	r31, 0xFF	; 255
    400e:	91 83       	std	Z+1, r25	; 0x01
    4010:	80 83       	st	Z, r24
		{
			_delay_ms(1000);
			LCD_voidClearScreen();
    4012:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    4016:	fe 01       	movw	r30, r28
    4018:	ed 5b       	subi	r30, 0xBD	; 189
    401a:	ff 4f       	sbci	r31, 0xFF	; 255
    401c:	80 e0       	ldi	r24, 0x00	; 0
    401e:	90 e0       	ldi	r25, 0x00	; 0
    4020:	a0 ea       	ldi	r26, 0xA0	; 160
    4022:	b1 e4       	ldi	r27, 0x41	; 65
    4024:	80 83       	st	Z, r24
    4026:	91 83       	std	Z+1, r25	; 0x01
    4028:	a2 83       	std	Z+2, r26	; 0x02
    402a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    402c:	8e 01       	movw	r16, r28
    402e:	01 5c       	subi	r16, 0xC1	; 193
    4030:	1f 4f       	sbci	r17, 0xFF	; 255
    4032:	fe 01       	movw	r30, r28
    4034:	ed 5b       	subi	r30, 0xBD	; 189
    4036:	ff 4f       	sbci	r31, 0xFF	; 255
    4038:	60 81       	ld	r22, Z
    403a:	71 81       	ldd	r23, Z+1	; 0x01
    403c:	82 81       	ldd	r24, Z+2	; 0x02
    403e:	93 81       	ldd	r25, Z+3	; 0x03
    4040:	20 e0       	ldi	r18, 0x00	; 0
    4042:	30 e0       	ldi	r19, 0x00	; 0
    4044:	4a ef       	ldi	r20, 0xFA	; 250
    4046:	54 e4       	ldi	r21, 0x44	; 68
    4048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    404c:	dc 01       	movw	r26, r24
    404e:	cb 01       	movw	r24, r22
    4050:	f8 01       	movw	r30, r16
    4052:	80 83       	st	Z, r24
    4054:	91 83       	std	Z+1, r25	; 0x01
    4056:	a2 83       	std	Z+2, r26	; 0x02
    4058:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    405a:	fe 01       	movw	r30, r28
    405c:	ff 96       	adiw	r30, 0x3f	; 63
    405e:	60 81       	ld	r22, Z
    4060:	71 81       	ldd	r23, Z+1	; 0x01
    4062:	82 81       	ldd	r24, Z+2	; 0x02
    4064:	93 81       	ldd	r25, Z+3	; 0x03
    4066:	20 e0       	ldi	r18, 0x00	; 0
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	40 e8       	ldi	r20, 0x80	; 128
    406c:	5f e3       	ldi	r21, 0x3F	; 63
    406e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4072:	88 23       	and	r24, r24
    4074:	2c f4       	brge	.+10     	; 0x4080 <main+0x28c>
		__ticks = 1;
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	90 e0       	ldi	r25, 0x00	; 0
    407a:	9e af       	std	Y+62, r25	; 0x3e
    407c:	8d af       	std	Y+61, r24	; 0x3d
    407e:	46 c0       	rjmp	.+140    	; 0x410c <main+0x318>
	else if (__tmp > 65535)
    4080:	fe 01       	movw	r30, r28
    4082:	ff 96       	adiw	r30, 0x3f	; 63
    4084:	60 81       	ld	r22, Z
    4086:	71 81       	ldd	r23, Z+1	; 0x01
    4088:	82 81       	ldd	r24, Z+2	; 0x02
    408a:	93 81       	ldd	r25, Z+3	; 0x03
    408c:	20 e0       	ldi	r18, 0x00	; 0
    408e:	3f ef       	ldi	r19, 0xFF	; 255
    4090:	4f e7       	ldi	r20, 0x7F	; 127
    4092:	57 e4       	ldi	r21, 0x47	; 71
    4094:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4098:	18 16       	cp	r1, r24
    409a:	64 f5       	brge	.+88     	; 0x40f4 <main+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    409c:	fe 01       	movw	r30, r28
    409e:	ed 5b       	subi	r30, 0xBD	; 189
    40a0:	ff 4f       	sbci	r31, 0xFF	; 255
    40a2:	60 81       	ld	r22, Z
    40a4:	71 81       	ldd	r23, Z+1	; 0x01
    40a6:	82 81       	ldd	r24, Z+2	; 0x02
    40a8:	93 81       	ldd	r25, Z+3	; 0x03
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e2       	ldi	r20, 0x20	; 32
    40b0:	51 e4       	ldi	r21, 0x41	; 65
    40b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b6:	dc 01       	movw	r26, r24
    40b8:	cb 01       	movw	r24, r22
    40ba:	bc 01       	movw	r22, r24
    40bc:	cd 01       	movw	r24, r26
    40be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	9e af       	std	Y+62, r25	; 0x3e
    40c8:	8d af       	std	Y+61, r24	; 0x3d
    40ca:	0f c0       	rjmp	.+30     	; 0x40ea <main+0x2f6>
    40cc:	88 ec       	ldi	r24, 0xC8	; 200
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	9c af       	std	Y+60, r25	; 0x3c
    40d2:	8b af       	std	Y+59, r24	; 0x3b
    40d4:	8b ad       	ldd	r24, Y+59	; 0x3b
    40d6:	9c ad       	ldd	r25, Y+60	; 0x3c
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <main+0x2e4>
    40dc:	9c af       	std	Y+60, r25	; 0x3c
    40de:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    40e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    40e4:	01 97       	sbiw	r24, 0x01	; 1
    40e6:	9e af       	std	Y+62, r25	; 0x3e
    40e8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    40ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    40ee:	00 97       	sbiw	r24, 0x00	; 0
    40f0:	69 f7       	brne	.-38     	; 0x40cc <main+0x2d8>
    40f2:	16 c0       	rjmp	.+44     	; 0x4120 <main+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f4:	fe 01       	movw	r30, r28
    40f6:	ff 96       	adiw	r30, 0x3f	; 63
    40f8:	60 81       	ld	r22, Z
    40fa:	71 81       	ldd	r23, Z+1	; 0x01
    40fc:	82 81       	ldd	r24, Z+2	; 0x02
    40fe:	93 81       	ldd	r25, Z+3	; 0x03
    4100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4104:	dc 01       	movw	r26, r24
    4106:	cb 01       	movw	r24, r22
    4108:	9e af       	std	Y+62, r25	; 0x3e
    410a:	8d af       	std	Y+61, r24	; 0x3d
    410c:	8d ad       	ldd	r24, Y+61	; 0x3d
    410e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4110:	9a af       	std	Y+58, r25	; 0x3a
    4112:	89 af       	std	Y+57, r24	; 0x39
    4114:	89 ad       	ldd	r24, Y+57	; 0x39
    4116:	9a ad       	ldd	r25, Y+58	; 0x3a
    4118:	01 97       	sbiw	r24, 0x01	; 1
    411a:	f1 f7       	brne	.-4      	; 0x4118 <main+0x324>
    411c:	9a af       	std	Y+58, r25	; 0x3a
    411e:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(20);
			LCD_voidWriteString((u8*)"Welcome To Temp");
    4120:	83 ed       	ldi	r24, 0xD3	; 211
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
			LCD_u8GoToXY(LCD_u8_LINE2,0);
    4128:	82 e0       	ldi	r24, 0x02	; 2
    412a:	60 e0       	ldi	r22, 0x00	; 0
    412c:	0e 94 bc 16 	call	0x2d78	; 0x2d78 <LCD_u8GoToXY>
			LCD_voidWriteString((u8*)"Dashboard");
    4130:	83 ee       	ldi	r24, 0xE3	; 227
    4132:	90 e0       	ldi	r25, 0x00	; 0
    4134:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
    4138:	80 e0       	ldi	r24, 0x00	; 0
    413a:	90 e8       	ldi	r25, 0x80	; 128
    413c:	ab e3       	ldi	r26, 0x3B	; 59
    413e:	b5 e4       	ldi	r27, 0x45	; 69
    4140:	8d ab       	std	Y+53, r24	; 0x35
    4142:	9e ab       	std	Y+54, r25	; 0x36
    4144:	af ab       	std	Y+55, r26	; 0x37
    4146:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4148:	6d a9       	ldd	r22, Y+53	; 0x35
    414a:	7e a9       	ldd	r23, Y+54	; 0x36
    414c:	8f a9       	ldd	r24, Y+55	; 0x37
    414e:	98 ad       	ldd	r25, Y+56	; 0x38
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	30 e0       	ldi	r19, 0x00	; 0
    4154:	4a ef       	ldi	r20, 0xFA	; 250
    4156:	54 e4       	ldi	r21, 0x44	; 68
    4158:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    415c:	dc 01       	movw	r26, r24
    415e:	cb 01       	movw	r24, r22
    4160:	89 ab       	std	Y+49, r24	; 0x31
    4162:	9a ab       	std	Y+50, r25	; 0x32
    4164:	ab ab       	std	Y+51, r26	; 0x33
    4166:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4168:	69 a9       	ldd	r22, Y+49	; 0x31
    416a:	7a a9       	ldd	r23, Y+50	; 0x32
    416c:	8b a9       	ldd	r24, Y+51	; 0x33
    416e:	9c a9       	ldd	r25, Y+52	; 0x34
    4170:	20 e0       	ldi	r18, 0x00	; 0
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	40 e8       	ldi	r20, 0x80	; 128
    4176:	5f e3       	ldi	r21, 0x3F	; 63
    4178:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    417c:	88 23       	and	r24, r24
    417e:	2c f4       	brge	.+10     	; 0x418a <main+0x396>
		__ticks = 1;
    4180:	81 e0       	ldi	r24, 0x01	; 1
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	98 ab       	std	Y+48, r25	; 0x30
    4186:	8f a7       	std	Y+47, r24	; 0x2f
    4188:	3f c0       	rjmp	.+126    	; 0x4208 <main+0x414>
	else if (__tmp > 65535)
    418a:	69 a9       	ldd	r22, Y+49	; 0x31
    418c:	7a a9       	ldd	r23, Y+50	; 0x32
    418e:	8b a9       	ldd	r24, Y+51	; 0x33
    4190:	9c a9       	ldd	r25, Y+52	; 0x34
    4192:	20 e0       	ldi	r18, 0x00	; 0
    4194:	3f ef       	ldi	r19, 0xFF	; 255
    4196:	4f e7       	ldi	r20, 0x7F	; 127
    4198:	57 e4       	ldi	r21, 0x47	; 71
    419a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    419e:	18 16       	cp	r1, r24
    41a0:	4c f5       	brge	.+82     	; 0x41f4 <main+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a2:	6d a9       	ldd	r22, Y+53	; 0x35
    41a4:	7e a9       	ldd	r23, Y+54	; 0x36
    41a6:	8f a9       	ldd	r24, Y+55	; 0x37
    41a8:	98 ad       	ldd	r25, Y+56	; 0x38
    41aa:	20 e0       	ldi	r18, 0x00	; 0
    41ac:	30 e0       	ldi	r19, 0x00	; 0
    41ae:	40 e2       	ldi	r20, 0x20	; 32
    41b0:	51 e4       	ldi	r21, 0x41	; 65
    41b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b6:	dc 01       	movw	r26, r24
    41b8:	cb 01       	movw	r24, r22
    41ba:	bc 01       	movw	r22, r24
    41bc:	cd 01       	movw	r24, r26
    41be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c2:	dc 01       	movw	r26, r24
    41c4:	cb 01       	movw	r24, r22
    41c6:	98 ab       	std	Y+48, r25	; 0x30
    41c8:	8f a7       	std	Y+47, r24	; 0x2f
    41ca:	0f c0       	rjmp	.+30     	; 0x41ea <main+0x3f6>
    41cc:	88 ec       	ldi	r24, 0xC8	; 200
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	9e a7       	std	Y+46, r25	; 0x2e
    41d2:	8d a7       	std	Y+45, r24	; 0x2d
    41d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    41d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    41d8:	01 97       	sbiw	r24, 0x01	; 1
    41da:	f1 f7       	brne	.-4      	; 0x41d8 <main+0x3e4>
    41dc:	9e a7       	std	Y+46, r25	; 0x2e
    41de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    41e2:	98 a9       	ldd	r25, Y+48	; 0x30
    41e4:	01 97       	sbiw	r24, 0x01	; 1
    41e6:	98 ab       	std	Y+48, r25	; 0x30
    41e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    41ec:	98 a9       	ldd	r25, Y+48	; 0x30
    41ee:	00 97       	sbiw	r24, 0x00	; 0
    41f0:	69 f7       	brne	.-38     	; 0x41cc <main+0x3d8>
    41f2:	14 c0       	rjmp	.+40     	; 0x421c <main+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f4:	69 a9       	ldd	r22, Y+49	; 0x31
    41f6:	7a a9       	ldd	r23, Y+50	; 0x32
    41f8:	8b a9       	ldd	r24, Y+51	; 0x33
    41fa:	9c a9       	ldd	r25, Y+52	; 0x34
    41fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4200:	dc 01       	movw	r26, r24
    4202:	cb 01       	movw	r24, r22
    4204:	98 ab       	std	Y+48, r25	; 0x30
    4206:	8f a7       	std	Y+47, r24	; 0x2f
    4208:	8f a5       	ldd	r24, Y+47	; 0x2f
    420a:	98 a9       	ldd	r25, Y+48	; 0x30
    420c:	9c a7       	std	Y+44, r25	; 0x2c
    420e:	8b a7       	std	Y+43, r24	; 0x2b
    4210:	8b a5       	ldd	r24, Y+43	; 0x2b
    4212:	9c a5       	ldd	r25, Y+44	; 0x2c
    4214:	01 97       	sbiw	r24, 0x01	; 1
    4216:	f1 f7       	brne	.-4      	; 0x4214 <main+0x420>
    4218:	9c a7       	std	Y+44, r25	; 0x2c
    421a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(3000);
			Dashboard_FrameOne();
    421c:	0e 94 35 0c 	call	0x186a	; 0x186a <Dashboard_FrameOne>
    4220:	ff cf       	rjmp	.-2      	; 0x4220 <main+0x42c>
			while(1)
			{

			}
    4222:	80 e0       	ldi	r24, 0x00	; 0
    4224:	90 e0       	ldi	r25, 0x00	; 0
    4226:	aa e7       	ldi	r26, 0x7A	; 122
    4228:	b4 e4       	ldi	r27, 0x44	; 68
    422a:	8f a3       	std	Y+39, r24	; 0x27
    422c:	98 a7       	std	Y+40, r25	; 0x28
    422e:	a9 a7       	std	Y+41, r26	; 0x29
    4230:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4232:	6f a1       	ldd	r22, Y+39	; 0x27
    4234:	78 a5       	ldd	r23, Y+40	; 0x28
    4236:	89 a5       	ldd	r24, Y+41	; 0x29
    4238:	9a a5       	ldd	r25, Y+42	; 0x2a
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	4a ef       	ldi	r20, 0xFA	; 250
    4240:	54 e4       	ldi	r21, 0x44	; 68
    4242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4246:	dc 01       	movw	r26, r24
    4248:	cb 01       	movw	r24, r22
    424a:	8b a3       	std	Y+35, r24	; 0x23
    424c:	9c a3       	std	Y+36, r25	; 0x24
    424e:	ad a3       	std	Y+37, r26	; 0x25
    4250:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4252:	6b a1       	ldd	r22, Y+35	; 0x23
    4254:	7c a1       	ldd	r23, Y+36	; 0x24
    4256:	8d a1       	ldd	r24, Y+37	; 0x25
    4258:	9e a1       	ldd	r25, Y+38	; 0x26
    425a:	20 e0       	ldi	r18, 0x00	; 0
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	40 e8       	ldi	r20, 0x80	; 128
    4260:	5f e3       	ldi	r21, 0x3F	; 63
    4262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4266:	88 23       	and	r24, r24
    4268:	2c f4       	brge	.+10     	; 0x4274 <main+0x480>
		__ticks = 1;
    426a:	81 e0       	ldi	r24, 0x01	; 1
    426c:	90 e0       	ldi	r25, 0x00	; 0
    426e:	9a a3       	std	Y+34, r25	; 0x22
    4270:	89 a3       	std	Y+33, r24	; 0x21
    4272:	3f c0       	rjmp	.+126    	; 0x42f2 <main+0x4fe>
	else if (__tmp > 65535)
    4274:	6b a1       	ldd	r22, Y+35	; 0x23
    4276:	7c a1       	ldd	r23, Y+36	; 0x24
    4278:	8d a1       	ldd	r24, Y+37	; 0x25
    427a:	9e a1       	ldd	r25, Y+38	; 0x26
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	3f ef       	ldi	r19, 0xFF	; 255
    4280:	4f e7       	ldi	r20, 0x7F	; 127
    4282:	57 e4       	ldi	r21, 0x47	; 71
    4284:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4288:	18 16       	cp	r1, r24
    428a:	4c f5       	brge	.+82     	; 0x42de <main+0x4ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    428c:	6f a1       	ldd	r22, Y+39	; 0x27
    428e:	78 a5       	ldd	r23, Y+40	; 0x28
    4290:	89 a5       	ldd	r24, Y+41	; 0x29
    4292:	9a a5       	ldd	r25, Y+42	; 0x2a
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	30 e0       	ldi	r19, 0x00	; 0
    4298:	40 e2       	ldi	r20, 0x20	; 32
    429a:	51 e4       	ldi	r21, 0x41	; 65
    429c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42a0:	dc 01       	movw	r26, r24
    42a2:	cb 01       	movw	r24, r22
    42a4:	bc 01       	movw	r22, r24
    42a6:	cd 01       	movw	r24, r26
    42a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ac:	dc 01       	movw	r26, r24
    42ae:	cb 01       	movw	r24, r22
    42b0:	9a a3       	std	Y+34, r25	; 0x22
    42b2:	89 a3       	std	Y+33, r24	; 0x21
    42b4:	0f c0       	rjmp	.+30     	; 0x42d4 <main+0x4e0>
    42b6:	88 ec       	ldi	r24, 0xC8	; 200
    42b8:	90 e0       	ldi	r25, 0x00	; 0
    42ba:	98 a3       	std	Y+32, r25	; 0x20
    42bc:	8f 8f       	std	Y+31, r24	; 0x1f
    42be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42c0:	98 a1       	ldd	r25, Y+32	; 0x20
    42c2:	01 97       	sbiw	r24, 0x01	; 1
    42c4:	f1 f7       	brne	.-4      	; 0x42c2 <main+0x4ce>
    42c6:	98 a3       	std	Y+32, r25	; 0x20
    42c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42ca:	89 a1       	ldd	r24, Y+33	; 0x21
    42cc:	9a a1       	ldd	r25, Y+34	; 0x22
    42ce:	01 97       	sbiw	r24, 0x01	; 1
    42d0:	9a a3       	std	Y+34, r25	; 0x22
    42d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42d4:	89 a1       	ldd	r24, Y+33	; 0x21
    42d6:	9a a1       	ldd	r25, Y+34	; 0x22
    42d8:	00 97       	sbiw	r24, 0x00	; 0
    42da:	69 f7       	brne	.-38     	; 0x42b6 <main+0x4c2>
    42dc:	14 c0       	rjmp	.+40     	; 0x4306 <main+0x512>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42de:	6b a1       	ldd	r22, Y+35	; 0x23
    42e0:	7c a1       	ldd	r23, Y+36	; 0x24
    42e2:	8d a1       	ldd	r24, Y+37	; 0x25
    42e4:	9e a1       	ldd	r25, Y+38	; 0x26
    42e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	9a a3       	std	Y+34, r25	; 0x22
    42f0:	89 a3       	std	Y+33, r24	; 0x21
    42f2:	89 a1       	ldd	r24, Y+33	; 0x21
    42f4:	9a a1       	ldd	r25, Y+34	; 0x22
    42f6:	9e 8f       	std	Y+30, r25	; 0x1e
    42f8:	8d 8f       	std	Y+29, r24	; 0x1d
    42fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    42fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    42fe:	01 97       	sbiw	r24, 0x01	; 1
    4300:	f1 f7       	brne	.-4      	; 0x42fe <main+0x50a>
    4302:	9e 8f       	std	Y+30, r25	; 0x1e
    4304:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else
		{
			_delay_ms(1000);
			LCD_voidClearScreen();
    4306:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <LCD_voidClearScreen>
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	a0 ea       	ldi	r26, 0xA0	; 160
    4310:	b1 e4       	ldi	r27, 0x41	; 65
    4312:	89 8f       	std	Y+25, r24	; 0x19
    4314:	9a 8f       	std	Y+26, r25	; 0x1a
    4316:	ab 8f       	std	Y+27, r26	; 0x1b
    4318:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431a:	69 8d       	ldd	r22, Y+25	; 0x19
    431c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    431e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	4a ef       	ldi	r20, 0xFA	; 250
    4328:	54 e4       	ldi	r21, 0x44	; 68
    432a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	8d 8b       	std	Y+21, r24	; 0x15
    4334:	9e 8b       	std	Y+22, r25	; 0x16
    4336:	af 8b       	std	Y+23, r26	; 0x17
    4338:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    433a:	6d 89       	ldd	r22, Y+21	; 0x15
    433c:	7e 89       	ldd	r23, Y+22	; 0x16
    433e:	8f 89       	ldd	r24, Y+23	; 0x17
    4340:	98 8d       	ldd	r25, Y+24	; 0x18
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e8       	ldi	r20, 0x80	; 128
    4348:	5f e3       	ldi	r21, 0x3F	; 63
    434a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    434e:	88 23       	and	r24, r24
    4350:	2c f4       	brge	.+10     	; 0x435c <main+0x568>
		__ticks = 1;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	9c 8b       	std	Y+20, r25	; 0x14
    4358:	8b 8b       	std	Y+19, r24	; 0x13
    435a:	3f c0       	rjmp	.+126    	; 0x43da <main+0x5e6>
	else if (__tmp > 65535)
    435c:	6d 89       	ldd	r22, Y+21	; 0x15
    435e:	7e 89       	ldd	r23, Y+22	; 0x16
    4360:	8f 89       	ldd	r24, Y+23	; 0x17
    4362:	98 8d       	ldd	r25, Y+24	; 0x18
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	4c f5       	brge	.+82     	; 0x43c6 <main+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4374:	69 8d       	ldd	r22, Y+25	; 0x19
    4376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    437a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e2       	ldi	r20, 0x20	; 32
    4382:	51 e4       	ldi	r21, 0x41	; 65
    4384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	bc 01       	movw	r22, r24
    438e:	cd 01       	movw	r24, r26
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	9c 8b       	std	Y+20, r25	; 0x14
    439a:	8b 8b       	std	Y+19, r24	; 0x13
    439c:	0f c0       	rjmp	.+30     	; 0x43bc <main+0x5c8>
    439e:	88 ec       	ldi	r24, 0xC8	; 200
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	9a 8b       	std	Y+18, r25	; 0x12
    43a4:	89 8b       	std	Y+17, r24	; 0x11
    43a6:	89 89       	ldd	r24, Y+17	; 0x11
    43a8:	9a 89       	ldd	r25, Y+18	; 0x12
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	f1 f7       	brne	.-4      	; 0x43aa <main+0x5b6>
    43ae:	9a 8b       	std	Y+18, r25	; 0x12
    43b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b2:	8b 89       	ldd	r24, Y+19	; 0x13
    43b4:	9c 89       	ldd	r25, Y+20	; 0x14
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	9c 8b       	std	Y+20, r25	; 0x14
    43ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43bc:	8b 89       	ldd	r24, Y+19	; 0x13
    43be:	9c 89       	ldd	r25, Y+20	; 0x14
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	69 f7       	brne	.-38     	; 0x439e <main+0x5aa>
    43c4:	14 c0       	rjmp	.+40     	; 0x43ee <main+0x5fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c6:	6d 89       	ldd	r22, Y+21	; 0x15
    43c8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ca:	8f 89       	ldd	r24, Y+23	; 0x17
    43cc:	98 8d       	ldd	r25, Y+24	; 0x18
    43ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	9c 8b       	std	Y+20, r25	; 0x14
    43d8:	8b 8b       	std	Y+19, r24	; 0x13
    43da:	8b 89       	ldd	r24, Y+19	; 0x13
    43dc:	9c 89       	ldd	r25, Y+20	; 0x14
    43de:	98 8b       	std	Y+16, r25	; 0x10
    43e0:	8f 87       	std	Y+15, r24	; 0x0f
    43e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e4:	98 89       	ldd	r25, Y+16	; 0x10
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <main+0x5f2>
    43ea:	98 8b       	std	Y+16, r25	; 0x10
    43ec:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			LCD_voidWriteString((u8*)"GoodLuck!");
    43ee:	8d ee       	ldi	r24, 0xED	; 237
    43f0:	90 e0       	ldi	r25, 0x00	; 0
    43f2:	0e 94 29 16 	call	0x2c52	; 0x2c52 <LCD_voidWriteString>
    43f6:	80 e0       	ldi	r24, 0x00	; 0
    43f8:	90 e8       	ldi	r25, 0x80	; 128
    43fa:	ab e3       	ldi	r26, 0x3B	; 59
    43fc:	b5 e4       	ldi	r27, 0x45	; 69
    43fe:	8b 87       	std	Y+11, r24	; 0x0b
    4400:	9c 87       	std	Y+12, r25	; 0x0c
    4402:	ad 87       	std	Y+13, r26	; 0x0d
    4404:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4406:	6b 85       	ldd	r22, Y+11	; 0x0b
    4408:	7c 85       	ldd	r23, Y+12	; 0x0c
    440a:	8d 85       	ldd	r24, Y+13	; 0x0d
    440c:	9e 85       	ldd	r25, Y+14	; 0x0e
    440e:	20 e0       	ldi	r18, 0x00	; 0
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	4a ef       	ldi	r20, 0xFA	; 250
    4414:	54 e4       	ldi	r21, 0x44	; 68
    4416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441a:	dc 01       	movw	r26, r24
    441c:	cb 01       	movw	r24, r22
    441e:	8f 83       	std	Y+7, r24	; 0x07
    4420:	98 87       	std	Y+8, r25	; 0x08
    4422:	a9 87       	std	Y+9, r26	; 0x09
    4424:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4426:	6f 81       	ldd	r22, Y+7	; 0x07
    4428:	78 85       	ldd	r23, Y+8	; 0x08
    442a:	89 85       	ldd	r24, Y+9	; 0x09
    442c:	9a 85       	ldd	r25, Y+10	; 0x0a
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	40 e8       	ldi	r20, 0x80	; 128
    4434:	5f e3       	ldi	r21, 0x3F	; 63
    4436:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    443a:	88 23       	and	r24, r24
    443c:	2c f4       	brge	.+10     	; 0x4448 <main+0x654>
		__ticks = 1;
    443e:	81 e0       	ldi	r24, 0x01	; 1
    4440:	90 e0       	ldi	r25, 0x00	; 0
    4442:	9e 83       	std	Y+6, r25	; 0x06
    4444:	8d 83       	std	Y+5, r24	; 0x05
    4446:	3f c0       	rjmp	.+126    	; 0x44c6 <main+0x6d2>
	else if (__tmp > 65535)
    4448:	6f 81       	ldd	r22, Y+7	; 0x07
    444a:	78 85       	ldd	r23, Y+8	; 0x08
    444c:	89 85       	ldd	r24, Y+9	; 0x09
    444e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4450:	20 e0       	ldi	r18, 0x00	; 0
    4452:	3f ef       	ldi	r19, 0xFF	; 255
    4454:	4f e7       	ldi	r20, 0x7F	; 127
    4456:	57 e4       	ldi	r21, 0x47	; 71
    4458:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    445c:	18 16       	cp	r1, r24
    445e:	4c f5       	brge	.+82     	; 0x44b2 <main+0x6be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4460:	6b 85       	ldd	r22, Y+11	; 0x0b
    4462:	7c 85       	ldd	r23, Y+12	; 0x0c
    4464:	8d 85       	ldd	r24, Y+13	; 0x0d
    4466:	9e 85       	ldd	r25, Y+14	; 0x0e
    4468:	20 e0       	ldi	r18, 0x00	; 0
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	40 e2       	ldi	r20, 0x20	; 32
    446e:	51 e4       	ldi	r21, 0x41	; 65
    4470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4474:	dc 01       	movw	r26, r24
    4476:	cb 01       	movw	r24, r22
    4478:	bc 01       	movw	r22, r24
    447a:	cd 01       	movw	r24, r26
    447c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4480:	dc 01       	movw	r26, r24
    4482:	cb 01       	movw	r24, r22
    4484:	9e 83       	std	Y+6, r25	; 0x06
    4486:	8d 83       	std	Y+5, r24	; 0x05
    4488:	0f c0       	rjmp	.+30     	; 0x44a8 <main+0x6b4>
    448a:	88 ec       	ldi	r24, 0xC8	; 200
    448c:	90 e0       	ldi	r25, 0x00	; 0
    448e:	9c 83       	std	Y+4, r25	; 0x04
    4490:	8b 83       	std	Y+3, r24	; 0x03
    4492:	8b 81       	ldd	r24, Y+3	; 0x03
    4494:	9c 81       	ldd	r25, Y+4	; 0x04
    4496:	01 97       	sbiw	r24, 0x01	; 1
    4498:	f1 f7       	brne	.-4      	; 0x4496 <main+0x6a2>
    449a:	9c 83       	std	Y+4, r25	; 0x04
    449c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    449e:	8d 81       	ldd	r24, Y+5	; 0x05
    44a0:	9e 81       	ldd	r25, Y+6	; 0x06
    44a2:	01 97       	sbiw	r24, 0x01	; 1
    44a4:	9e 83       	std	Y+6, r25	; 0x06
    44a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44a8:	8d 81       	ldd	r24, Y+5	; 0x05
    44aa:	9e 81       	ldd	r25, Y+6	; 0x06
    44ac:	00 97       	sbiw	r24, 0x00	; 0
    44ae:	69 f7       	brne	.-38     	; 0x448a <main+0x696>
    44b0:	14 c0       	rjmp	.+40     	; 0x44da <main+0x6e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b2:	6f 81       	ldd	r22, Y+7	; 0x07
    44b4:	78 85       	ldd	r23, Y+8	; 0x08
    44b6:	89 85       	ldd	r24, Y+9	; 0x09
    44b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    44ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44be:	dc 01       	movw	r26, r24
    44c0:	cb 01       	movw	r24, r22
    44c2:	9e 83       	std	Y+6, r25	; 0x06
    44c4:	8d 83       	std	Y+5, r24	; 0x05
    44c6:	8d 81       	ldd	r24, Y+5	; 0x05
    44c8:	9e 81       	ldd	r25, Y+6	; 0x06
    44ca:	9a 83       	std	Y+2, r25	; 0x02
    44cc:	89 83       	std	Y+1, r24	; 0x01
    44ce:	89 81       	ldd	r24, Y+1	; 0x01
    44d0:	9a 81       	ldd	r25, Y+2	; 0x02
    44d2:	01 97       	sbiw	r24, 0x01	; 1
    44d4:	f1 f7       	brne	.-4      	; 0x44d2 <main+0x6de>
    44d6:	9a 83       	std	Y+2, r25	; 0x02
    44d8:	89 83       	std	Y+1, r24	; 0x01
    44da:	ff cf       	rjmp	.-2      	; 0x44da <main+0x6e6>

000044dc <__mulsi3>:
    44dc:	62 9f       	mul	r22, r18
    44de:	d0 01       	movw	r26, r0
    44e0:	73 9f       	mul	r23, r19
    44e2:	f0 01       	movw	r30, r0
    44e4:	82 9f       	mul	r24, r18
    44e6:	e0 0d       	add	r30, r0
    44e8:	f1 1d       	adc	r31, r1
    44ea:	64 9f       	mul	r22, r20
    44ec:	e0 0d       	add	r30, r0
    44ee:	f1 1d       	adc	r31, r1
    44f0:	92 9f       	mul	r25, r18
    44f2:	f0 0d       	add	r31, r0
    44f4:	83 9f       	mul	r24, r19
    44f6:	f0 0d       	add	r31, r0
    44f8:	74 9f       	mul	r23, r20
    44fa:	f0 0d       	add	r31, r0
    44fc:	65 9f       	mul	r22, r21
    44fe:	f0 0d       	add	r31, r0
    4500:	99 27       	eor	r25, r25
    4502:	72 9f       	mul	r23, r18
    4504:	b0 0d       	add	r27, r0
    4506:	e1 1d       	adc	r30, r1
    4508:	f9 1f       	adc	r31, r25
    450a:	63 9f       	mul	r22, r19
    450c:	b0 0d       	add	r27, r0
    450e:	e1 1d       	adc	r30, r1
    4510:	f9 1f       	adc	r31, r25
    4512:	bd 01       	movw	r22, r26
    4514:	cf 01       	movw	r24, r30
    4516:	11 24       	eor	r1, r1
    4518:	08 95       	ret

0000451a <__udivmodhi4>:
    451a:	aa 1b       	sub	r26, r26
    451c:	bb 1b       	sub	r27, r27
    451e:	51 e1       	ldi	r21, 0x11	; 17
    4520:	07 c0       	rjmp	.+14     	; 0x4530 <__udivmodhi4_ep>

00004522 <__udivmodhi4_loop>:
    4522:	aa 1f       	adc	r26, r26
    4524:	bb 1f       	adc	r27, r27
    4526:	a6 17       	cp	r26, r22
    4528:	b7 07       	cpc	r27, r23
    452a:	10 f0       	brcs	.+4      	; 0x4530 <__udivmodhi4_ep>
    452c:	a6 1b       	sub	r26, r22
    452e:	b7 0b       	sbc	r27, r23

00004530 <__udivmodhi4_ep>:
    4530:	88 1f       	adc	r24, r24
    4532:	99 1f       	adc	r25, r25
    4534:	5a 95       	dec	r21
    4536:	a9 f7       	brne	.-22     	; 0x4522 <__udivmodhi4_loop>
    4538:	80 95       	com	r24
    453a:	90 95       	com	r25
    453c:	bc 01       	movw	r22, r24
    453e:	cd 01       	movw	r24, r26
    4540:	08 95       	ret

00004542 <__udivmodsi4>:
    4542:	a1 e2       	ldi	r26, 0x21	; 33
    4544:	1a 2e       	mov	r1, r26
    4546:	aa 1b       	sub	r26, r26
    4548:	bb 1b       	sub	r27, r27
    454a:	fd 01       	movw	r30, r26
    454c:	0d c0       	rjmp	.+26     	; 0x4568 <__udivmodsi4_ep>

0000454e <__udivmodsi4_loop>:
    454e:	aa 1f       	adc	r26, r26
    4550:	bb 1f       	adc	r27, r27
    4552:	ee 1f       	adc	r30, r30
    4554:	ff 1f       	adc	r31, r31
    4556:	a2 17       	cp	r26, r18
    4558:	b3 07       	cpc	r27, r19
    455a:	e4 07       	cpc	r30, r20
    455c:	f5 07       	cpc	r31, r21
    455e:	20 f0       	brcs	.+8      	; 0x4568 <__udivmodsi4_ep>
    4560:	a2 1b       	sub	r26, r18
    4562:	b3 0b       	sbc	r27, r19
    4564:	e4 0b       	sbc	r30, r20
    4566:	f5 0b       	sbc	r31, r21

00004568 <__udivmodsi4_ep>:
    4568:	66 1f       	adc	r22, r22
    456a:	77 1f       	adc	r23, r23
    456c:	88 1f       	adc	r24, r24
    456e:	99 1f       	adc	r25, r25
    4570:	1a 94       	dec	r1
    4572:	69 f7       	brne	.-38     	; 0x454e <__udivmodsi4_loop>
    4574:	60 95       	com	r22
    4576:	70 95       	com	r23
    4578:	80 95       	com	r24
    457a:	90 95       	com	r25
    457c:	9b 01       	movw	r18, r22
    457e:	ac 01       	movw	r20, r24
    4580:	bd 01       	movw	r22, r26
    4582:	cf 01       	movw	r24, r30
    4584:	08 95       	ret

00004586 <__prologue_saves__>:
    4586:	2f 92       	push	r2
    4588:	3f 92       	push	r3
    458a:	4f 92       	push	r4
    458c:	5f 92       	push	r5
    458e:	6f 92       	push	r6
    4590:	7f 92       	push	r7
    4592:	8f 92       	push	r8
    4594:	9f 92       	push	r9
    4596:	af 92       	push	r10
    4598:	bf 92       	push	r11
    459a:	cf 92       	push	r12
    459c:	df 92       	push	r13
    459e:	ef 92       	push	r14
    45a0:	ff 92       	push	r15
    45a2:	0f 93       	push	r16
    45a4:	1f 93       	push	r17
    45a6:	cf 93       	push	r28
    45a8:	df 93       	push	r29
    45aa:	cd b7       	in	r28, 0x3d	; 61
    45ac:	de b7       	in	r29, 0x3e	; 62
    45ae:	ca 1b       	sub	r28, r26
    45b0:	db 0b       	sbc	r29, r27
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	09 94       	ijmp

000045be <__epilogue_restores__>:
    45be:	2a 88       	ldd	r2, Y+18	; 0x12
    45c0:	39 88       	ldd	r3, Y+17	; 0x11
    45c2:	48 88       	ldd	r4, Y+16	; 0x10
    45c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    45c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    45c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    45ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    45cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    45ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    45d0:	b9 84       	ldd	r11, Y+9	; 0x09
    45d2:	c8 84       	ldd	r12, Y+8	; 0x08
    45d4:	df 80       	ldd	r13, Y+7	; 0x07
    45d6:	ee 80       	ldd	r14, Y+6	; 0x06
    45d8:	fd 80       	ldd	r15, Y+5	; 0x05
    45da:	0c 81       	ldd	r16, Y+4	; 0x04
    45dc:	1b 81       	ldd	r17, Y+3	; 0x03
    45de:	aa 81       	ldd	r26, Y+2	; 0x02
    45e0:	b9 81       	ldd	r27, Y+1	; 0x01
    45e2:	ce 0f       	add	r28, r30
    45e4:	d1 1d       	adc	r29, r1
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	f8 94       	cli
    45ea:	de bf       	out	0x3e, r29	; 62
    45ec:	0f be       	out	0x3f, r0	; 63
    45ee:	cd bf       	out	0x3d, r28	; 61
    45f0:	ed 01       	movw	r28, r26
    45f2:	08 95       	ret

000045f4 <_exit>:
    45f4:	f8 94       	cli

000045f6 <__stop_program>:
    45f6:	ff cf       	rjmp	.-2      	; 0x45f6 <__stop_program>
