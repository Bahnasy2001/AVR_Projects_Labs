
DutyCycle_Detector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012c  00800060  00003e5c  00003ef0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080018c  0080018c  0000401c  2**0
                  ALLOC
  3 .stab         000035f4  00000000  00000000  0000401c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012cf  00000000  00000000  00007610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000088df  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008c71  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c402  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d5d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d798  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000da8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e3fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__vector_1>
       8:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__vector_2>
       c:	0c 94 b0 0e 	jmp	0x1d60	; 0x1d60 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__vector_6>
      1c:	0c 94 e7 1b 	jmp	0x37ce	; 0x37ce <__vector_7>
      20:	0c 94 9f 1b 	jmp	0x373e	; 0x373e <__vector_8>
      24:	0c 94 51 1b 	jmp	0x36a2	; 0x36a2 <__vector_9>
      28:	0c 94 c3 1c 	jmp	0x3986	; 0x3986 <__vector_10>
      2c:	0c 94 77 1c 	jmp	0x38ee	; 0x38ee <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e5       	ldi	r30, 0x5C	; 92
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3a       	cpi	r26, 0xAF	; 175
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <main>
      8a:	0c 94 2c 1f 	jmp	0x3e58	; 0x3e58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e8       	ldi	r26, 0x84	; 132
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 1e 	jmp	0x3dea	; 0x3dea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e8       	ldi	r24, 0x84	; 132
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	64 e8       	ldi	r22, 0x84	; 132
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 1f 	jmp	0x3e02	; 0x3e02 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 1f 	jmp	0x3e3a	; 0x3e3a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 19 1f 	jmp	0x3e32	; 0x3e32 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e4 57       	subi	r30, 0x74	; 116
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	87 e0       	ldi	r24, 0x07	; 7
     e3c:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	88 e0       	ldi	r24, 0x08	; 8
     e44:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     e4c:	e1 e3       	ldi	r30, 0x31	; 49
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     e54:	eb e3       	ldi	r30, 0x3B	; 59
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     e5a:	e8 e3       	ldi	r30, 0x38	; 56
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     e60:	e5 e3       	ldi	r30, 0x35	; 53
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     e66:	e2 e3       	ldi	r30, 0x32	; 50
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	10 82       	st	Z, r1

}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	2e 97       	sbiw	r28, 0x0e	; 14
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	8a 83       	std	Y+2, r24	; 0x02
     e88:	6b 83       	std	Y+3, r22	; 0x03
     e8a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	08 f0       	brcs	.+2      	; 0xe98 <DIO_u8SetPinDirection+0x26>
     e96:	0d c1       	rjmp	.+538    	; 0x10b2 <DIO_u8SetPinDirection+0x240>
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	88 30       	cpi	r24, 0x08	; 8
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <DIO_u8SetPinDirection+0x2e>
     e9e:	09 c1       	rjmp	.+530    	; 0x10b2 <DIO_u8SetPinDirection+0x240>
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	88 23       	and	r24, r24
     ea4:	21 f0       	breq	.+8      	; 0xeae <DIO_u8SetPinDirection+0x3c>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	09 f0       	breq	.+2      	; 0xeae <DIO_u8SetPinDirection+0x3c>
     eac:	02 c1       	rjmp	.+516    	; 0x10b2 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3e 87       	std	Y+14, r19	; 0x0e
     eb6:	2d 87       	std	Y+13, r18	; 0x0d
     eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eba:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <DIO_u8SetPinDirection+0x52>
     ec2:	4f c0       	rjmp	.+158    	; 0xf62 <DIO_u8SetPinDirection+0xf0>
     ec4:	2d 85       	ldd	r18, Y+13	; 0x0d
     ec6:	3e 85       	ldd	r19, Y+14	; 0x0e
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	2c f4       	brge	.+10     	; 0xed8 <DIO_u8SetPinDirection+0x66>
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	71 f0       	breq	.+28     	; 0xef2 <DIO_u8SetPinDirection+0x80>
     ed6:	ee c0       	rjmp	.+476    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
     ed8:	2d 85       	ldd	r18, Y+13	; 0x0d
     eda:	3e 85       	ldd	r19, Y+14	; 0x0e
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <DIO_u8SetPinDirection+0x72>
     ee2:	77 c0       	rjmp	.+238    	; 0xfd2 <DIO_u8SetPinDirection+0x160>
     ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <DIO_u8SetPinDirection+0x7e>
     eee:	a9 c0       	rjmp	.+338    	; 0x1042 <DIO_u8SetPinDirection+0x1d0>
     ef0:	e1 c0       	rjmp	.+450    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3c 87       	std	Y+12, r19	; 0x0c
     efa:	2b 87       	std	Y+11, r18	; 0x0b
     efc:	8b 85       	ldd	r24, Y+11	; 0x0b
     efe:	9c 85       	ldd	r25, Y+12	; 0x0c
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	31 f0       	breq	.+12     	; 0xf10 <DIO_u8SetPinDirection+0x9e>
     f04:	2b 85       	ldd	r18, Y+11	; 0x0b
     f06:	3c 85       	ldd	r19, Y+12	; 0x0c
     f08:	21 30       	cpi	r18, 0x01	; 1
     f0a:	31 05       	cpc	r19, r1
     f0c:	b1 f0       	breq	.+44     	; 0xf3a <DIO_u8SetPinDirection+0xc8>
     f0e:	d2 c0       	rjmp	.+420    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     f10:	aa e3       	ldi	r26, 0x3A	; 58
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea e3       	ldi	r30, 0x3A	; 58
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_u8SetPinDirection+0xbc>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_u8SetPinDirection+0xb8>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	bd c0       	rjmp	.+378    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     f3a:	aa e3       	ldi	r26, 0x3A	; 58
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ea e3       	ldi	r30, 0x3A	; 58
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_u8SetPinDirection+0xe6>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_u8SetPinDirection+0xe2>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	a9 c0       	rjmp	.+338    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3a 87       	std	Y+10, r19	; 0x0a
     f6a:	29 87       	std	Y+9, r18	; 0x09
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	31 f0       	breq	.+12     	; 0xf80 <DIO_u8SetPinDirection+0x10e>
     f74:	29 85       	ldd	r18, Y+9	; 0x09
     f76:	3a 85       	ldd	r19, Y+10	; 0x0a
     f78:	21 30       	cpi	r18, 0x01	; 1
     f7a:	31 05       	cpc	r19, r1
     f7c:	b1 f0       	breq	.+44     	; 0xfaa <DIO_u8SetPinDirection+0x138>
     f7e:	9a c0       	rjmp	.+308    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     f80:	a7 e3       	ldi	r26, 0x37	; 55
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_u8SetPinDirection+0x12c>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_u8SetPinDirection+0x128>
     fa2:	80 95       	com	r24
     fa4:	84 23       	and	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	85 c0       	rjmp	.+266    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     faa:	a7 e3       	ldi	r26, 0x37	; 55
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e3       	ldi	r30, 0x37	; 55
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_u8SetPinDirection+0x156>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_u8SetPinDirection+0x152>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	71 c0       	rjmp	.+226    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	38 87       	std	Y+8, r19	; 0x08
     fda:	2f 83       	std	Y+7, r18	; 0x07
     fdc:	8f 81       	ldd	r24, Y+7	; 0x07
     fde:	98 85       	ldd	r25, Y+8	; 0x08
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	31 f0       	breq	.+12     	; 0xff0 <DIO_u8SetPinDirection+0x17e>
     fe4:	2f 81       	ldd	r18, Y+7	; 0x07
     fe6:	38 85       	ldd	r19, Y+8	; 0x08
     fe8:	21 30       	cpi	r18, 0x01	; 1
     fea:	31 05       	cpc	r19, r1
     fec:	b1 f0       	breq	.+44     	; 0x101a <DIO_u8SetPinDirection+0x1a8>
     fee:	62 c0       	rjmp	.+196    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     ff0:	a4 e3       	ldi	r26, 0x34	; 52
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e4 e3       	ldi	r30, 0x34	; 52
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_u8SetPinDirection+0x19c>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_u8SetPinDirection+0x198>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	4d c0       	rjmp	.+154    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    101a:	a4 e3       	ldi	r26, 0x34	; 52
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e4 e3       	ldi	r30, 0x34	; 52
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_u8SetPinDirection+0x1c6>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_u8SetPinDirection+0x1c2>
    103c:	84 2b       	or	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	39 c0       	rjmp	.+114    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3e 83       	std	Y+6, r19	; 0x06
    104a:	2d 83       	std	Y+5, r18	; 0x05
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	31 f0       	breq	.+12     	; 0x1060 <DIO_u8SetPinDirection+0x1ee>
    1054:	2d 81       	ldd	r18, Y+5	; 0x05
    1056:	3e 81       	ldd	r19, Y+6	; 0x06
    1058:	21 30       	cpi	r18, 0x01	; 1
    105a:	31 05       	cpc	r19, r1
    105c:	b1 f0       	breq	.+44     	; 0x108a <DIO_u8SetPinDirection+0x218>
    105e:	2a c0       	rjmp	.+84     	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    1060:	a1 e3       	ldi	r26, 0x31	; 49
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e1 e3       	ldi	r30, 0x31	; 49
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_u8SetPinDirection+0x20c>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_u8SetPinDirection+0x208>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	15 c0       	rjmp	.+42     	; 0x10b4 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    108a:	a1 e3       	ldi	r26, 0x31	; 49
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e1 e3       	ldi	r30, 0x31	; 49
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_u8SetPinDirection+0x236>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_u8SetPinDirection+0x232>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    10b2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b6:	2e 96       	adiw	r28, 0x0e	; 14
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	2e 97       	sbiw	r28, 0x0e	; 14
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	6b 83       	std	Y+3, r22	; 0x03
    10e0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 30       	cpi	r24, 0x08	; 8
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <DIO_u8SetPinValue+0x26>
    10ec:	0c c1       	rjmp	.+536    	; 0x1306 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3e 87       	std	Y+14, r19	; 0x0e
    10f6:	2d 87       	std	Y+13, r18	; 0x0d
    10f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <DIO_u8SetPinValue+0x3c>
    1102:	51 c0       	rjmp	.+162    	; 0x11a6 <DIO_u8SetPinValue+0xde>
    1104:	2d 85       	ldd	r18, Y+13	; 0x0d
    1106:	3e 85       	ldd	r19, Y+14	; 0x0e
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <DIO_u8SetPinValue+0x50>
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	71 f0       	breq	.+28     	; 0x1132 <DIO_u8SetPinValue+0x6a>
    1116:	f5 c0       	rjmp	.+490    	; 0x1302 <DIO_u8SetPinValue+0x23a>
    1118:	2d 85       	ldd	r18, Y+13	; 0x0d
    111a:	3e 85       	ldd	r19, Y+14	; 0x0e
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <DIO_u8SetPinValue+0x5c>
    1122:	7b c0       	rjmp	.+246    	; 0x121a <DIO_u8SetPinValue+0x152>
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	9e 85       	ldd	r25, Y+14	; 0x0e
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <DIO_u8SetPinValue+0x68>
    112e:	af c0       	rjmp	.+350    	; 0x128e <DIO_u8SetPinValue+0x1c6>
    1130:	e8 c0       	rjmp	.+464    	; 0x1302 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3c 87       	std	Y+12, r19	; 0x0c
    113a:	2b 87       	std	Y+11, r18	; 0x0b
    113c:	8b 85       	ldd	r24, Y+11	; 0x0b
    113e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	31 f0       	breq	.+12     	; 0x1150 <DIO_u8SetPinValue+0x88>
    1144:	2b 85       	ldd	r18, Y+11	; 0x0b
    1146:	3c 85       	ldd	r19, Y+12	; 0x0c
    1148:	21 30       	cpi	r18, 0x01	; 1
    114a:	31 05       	cpc	r19, r1
    114c:	b1 f0       	breq	.+44     	; 0x117a <DIO_u8SetPinValue+0xb2>
    114e:	29 c0       	rjmp	.+82     	; 0x11a2 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1150:	ab e3       	ldi	r26, 0x3B	; 59
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e3       	ldi	r30, 0x3B	; 59
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinValue+0xa6>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinValue+0xa2>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	c7 c0       	rjmp	.+398    	; 0x1308 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    117a:	ab e3       	ldi	r26, 0x3B	; 59
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_u8SetPinValue+0xd0>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_u8SetPinValue+0xcc>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	b3 c0       	rjmp	.+358    	; 0x1308 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	b1 c0       	rjmp	.+354    	; 0x1308 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3a 87       	std	Y+10, r19	; 0x0a
    11ae:	29 87       	std	Y+9, r18	; 0x09
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <DIO_u8SetPinValue+0xfc>
    11b8:	29 85       	ldd	r18, Y+9	; 0x09
    11ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    11bc:	21 30       	cpi	r18, 0x01	; 1
    11be:	31 05       	cpc	r19, r1
    11c0:	b1 f0       	breq	.+44     	; 0x11ee <DIO_u8SetPinValue+0x126>
    11c2:	29 c0       	rjmp	.+82     	; 0x1216 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    11c4:	a8 e3       	ldi	r26, 0x38	; 56
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e8 e3       	ldi	r30, 0x38	; 56
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_u8SetPinValue+0x11a>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_u8SetPinValue+0x116>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	8d c0       	rjmp	.+282    	; 0x1308 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    11ee:	a8 e3       	ldi	r26, 0x38	; 56
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e8 e3       	ldi	r30, 0x38	; 56
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8SetPinValue+0x144>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8SetPinValue+0x140>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	79 c0       	rjmp	.+242    	; 0x1308 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1216:	19 82       	std	Y+1, r1	; 0x01
    1218:	77 c0       	rjmp	.+238    	; 0x1308 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	38 87       	std	Y+8, r19	; 0x08
    1222:	2f 83       	std	Y+7, r18	; 0x07
    1224:	8f 81       	ldd	r24, Y+7	; 0x07
    1226:	98 85       	ldd	r25, Y+8	; 0x08
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	31 f0       	breq	.+12     	; 0x1238 <DIO_u8SetPinValue+0x170>
    122c:	2f 81       	ldd	r18, Y+7	; 0x07
    122e:	38 85       	ldd	r19, Y+8	; 0x08
    1230:	21 30       	cpi	r18, 0x01	; 1
    1232:	31 05       	cpc	r19, r1
    1234:	b1 f0       	breq	.+44     	; 0x1262 <DIO_u8SetPinValue+0x19a>
    1236:	29 c0       	rjmp	.+82     	; 0x128a <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1238:	a5 e3       	ldi	r26, 0x35	; 53
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e3       	ldi	r30, 0x35	; 53
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_u8SetPinValue+0x18e>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_u8SetPinValue+0x18a>
    125a:	80 95       	com	r24
    125c:	84 23       	and	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	53 c0       	rjmp	.+166    	; 0x1308 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1262:	a5 e3       	ldi	r26, 0x35	; 53
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e5 e3       	ldi	r30, 0x35	; 53
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8SetPinValue+0x1b8>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8SetPinValue+0x1b4>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	3f c0       	rjmp	.+126    	; 0x1308 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    128a:	19 82       	std	Y+1, r1	; 0x01
    128c:	3d c0       	rjmp	.+122    	; 0x1308 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3e 83       	std	Y+6, r19	; 0x06
    1296:	2d 83       	std	Y+5, r18	; 0x05
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
    129a:	9e 81       	ldd	r25, Y+6	; 0x06
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	31 f0       	breq	.+12     	; 0x12ac <DIO_u8SetPinValue+0x1e4>
    12a0:	2d 81       	ldd	r18, Y+5	; 0x05
    12a2:	3e 81       	ldd	r19, Y+6	; 0x06
    12a4:	21 30       	cpi	r18, 0x01	; 1
    12a6:	31 05       	cpc	r19, r1
    12a8:	b1 f0       	breq	.+44     	; 0x12d6 <DIO_u8SetPinValue+0x20e>
    12aa:	29 c0       	rjmp	.+82     	; 0x12fe <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    12ac:	a2 e3       	ldi	r26, 0x32	; 50
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e2 e3       	ldi	r30, 0x32	; 50
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_u8SetPinValue+0x202>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_u8SetPinValue+0x1fe>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	19 c0       	rjmp	.+50     	; 0x1308 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_u8SetPinValue+0x22c>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_u8SetPinValue+0x228>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1306:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1308:	89 81       	ldd	r24, Y+1	; 0x01
}
    130a:	2e 96       	adiw	r28, 0x0e	; 14
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	28 97       	sbiw	r28, 0x08	; 8
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	8b 83       	std	Y+3, r24	; 0x03
    1332:	6c 83       	std	Y+4, r22	; 0x04
    1334:	5e 83       	std	Y+6, r21	; 0x06
    1336:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	08 f0       	brcs	.+2      	; 0x1344 <DIO_u8GetPinValue+0x28>
    1342:	a1 c0       	rjmp	.+322    	; 0x1486 <DIO_u8GetPinValue+0x16a>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <DIO_u8GetPinValue+0x30>
    134a:	9d c0       	rjmp	.+314    	; 0x1486 <DIO_u8GetPinValue+0x16a>
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	09 f4       	brne	.+2      	; 0x1356 <DIO_u8GetPinValue+0x3a>
    1354:	98 c0       	rjmp	.+304    	; 0x1486 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	38 87       	std	Y+8, r19	; 0x08
    135e:	2f 83       	std	Y+7, r18	; 0x07
    1360:	4f 81       	ldd	r20, Y+7	; 0x07
    1362:	58 85       	ldd	r21, Y+8	; 0x08
    1364:	41 30       	cpi	r20, 0x01	; 1
    1366:	51 05       	cpc	r21, r1
    1368:	a9 f1       	breq	.+106    	; 0x13d4 <DIO_u8GetPinValue+0xb8>
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	98 85       	ldd	r25, Y+8	; 0x08
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	91 05       	cpc	r25, r1
    1372:	34 f4       	brge	.+12     	; 0x1380 <DIO_u8GetPinValue+0x64>
    1374:	2f 81       	ldd	r18, Y+7	; 0x07
    1376:	38 85       	ldd	r19, Y+8	; 0x08
    1378:	21 15       	cp	r18, r1
    137a:	31 05       	cpc	r19, r1
    137c:	71 f0       	breq	.+28     	; 0x139a <DIO_u8GetPinValue+0x7e>
    137e:	81 c0       	rjmp	.+258    	; 0x1482 <DIO_u8GetPinValue+0x166>
    1380:	4f 81       	ldd	r20, Y+7	; 0x07
    1382:	58 85       	ldd	r21, Y+8	; 0x08
    1384:	42 30       	cpi	r20, 0x02	; 2
    1386:	51 05       	cpc	r21, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <DIO_u8GetPinValue+0x70>
    138a:	41 c0       	rjmp	.+130    	; 0x140e <DIO_u8GetPinValue+0xf2>
    138c:	8f 81       	ldd	r24, Y+7	; 0x07
    138e:	98 85       	ldd	r25, Y+8	; 0x08
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <DIO_u8GetPinValue+0x7c>
    1396:	58 c0       	rjmp	.+176    	; 0x1448 <DIO_u8GetPinValue+0x12c>
    1398:	74 c0       	rjmp	.+232    	; 0x1482 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    139a:	e9 e3       	ldi	r30, 0x39	; 57
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_u8GetPinValue+0x96>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_u8GetPinValue+0x92>
    13b6:	ca 01       	movw	r24, r20
    13b8:	81 70       	andi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	88 23       	and	r24, r24
    13c0:	21 f4       	brne	.+8      	; 0x13ca <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    13c2:	ed 81       	ldd	r30, Y+5	; 0x05
    13c4:	fe 81       	ldd	r31, Y+6	; 0x06
    13c6:	10 82       	st	Z, r1
    13c8:	5f c0       	rjmp	.+190    	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    13ca:	ed 81       	ldd	r30, Y+5	; 0x05
    13cc:	fe 81       	ldd	r31, Y+6	; 0x06
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 83       	st	Z, r24
    13d2:	5a c0       	rjmp	.+180    	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    13d4:	e6 e3       	ldi	r30, 0x36	; 54
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_u8GetPinValue+0xd0>
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_u8GetPinValue+0xcc>
    13f0:	ca 01       	movw	r24, r20
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	88 23       	and	r24, r24
    13fa:	21 f4       	brne	.+8      	; 0x1404 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    13fc:	ed 81       	ldd	r30, Y+5	; 0x05
    13fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1400:	10 82       	st	Z, r1
    1402:	42 c0       	rjmp	.+132    	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1404:	ed 81       	ldd	r30, Y+5	; 0x05
    1406:	fe 81       	ldd	r31, Y+6	; 0x06
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 83       	st	Z, r24
    140c:	3d c0       	rjmp	.+122    	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    140e:	e3 e3       	ldi	r30, 0x33	; 51
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a9 01       	movw	r20, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_u8GetPinValue+0x10a>
    1422:	55 95       	asr	r21
    1424:	47 95       	ror	r20
    1426:	8a 95       	dec	r24
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_u8GetPinValue+0x106>
    142a:	ca 01       	movw	r24, r20
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	88 23       	and	r24, r24
    1434:	21 f4       	brne	.+8      	; 0x143e <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1436:	ed 81       	ldd	r30, Y+5	; 0x05
    1438:	fe 81       	ldd	r31, Y+6	; 0x06
    143a:	10 82       	st	Z, r1
    143c:	25 c0       	rjmp	.+74     	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    143e:	ed 81       	ldd	r30, Y+5	; 0x05
    1440:	fe 81       	ldd	r31, Y+6	; 0x06
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 83       	st	Z, r24
    1446:	20 c0       	rjmp	.+64     	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1448:	e0 e3       	ldi	r30, 0x30	; 48
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8GetPinValue+0x144>
    145c:	55 95       	asr	r21
    145e:	47 95       	ror	r20
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8GetPinValue+0x140>
    1464:	ca 01       	movw	r24, r20
    1466:	81 70       	andi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	88 23       	and	r24, r24
    146e:	21 f4       	brne	.+8      	; 0x1478 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1470:	ed 81       	ldd	r30, Y+5	; 0x05
    1472:	fe 81       	ldd	r31, Y+6	; 0x06
    1474:	10 82       	st	Z, r1
    1476:	08 c0       	rjmp	.+16     	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1478:	ed 81       	ldd	r30, Y+5	; 0x05
    147a:	fe 81       	ldd	r31, Y+6	; 0x06
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 83       	st	Z, r24
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    1482:	1a 82       	std	Y+2, r1	; 0x02
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1486:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
}
    148a:	28 96       	adiw	r28, 0x08	; 8
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	2d 97       	sbiw	r28, 0x0d	; 13
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	8a 83       	std	Y+2, r24	; 0x02
    14b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	88 23       	and	r24, r24
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <DIO_u8SetPortDirection+0x2a>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <DIO_u8SetPortDirection+0x2a>
    14c4:	82 c0       	rjmp	.+260    	; 0x15ca <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3d 87       	std	Y+13, r19	; 0x0d
    14ce:	2c 87       	std	Y+12, r18	; 0x0c
    14d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	71 f1       	breq	.+92     	; 0x1536 <DIO_u8SetPortDirection+0x9a>
    14da:	2c 85       	ldd	r18, Y+12	; 0x0c
    14dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	2c f4       	brge	.+10     	; 0x14ee <DIO_u8SetPortDirection+0x52>
    14e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	69 f0       	breq	.+26     	; 0x1506 <DIO_u8SetPortDirection+0x6a>
    14ec:	6c c0       	rjmp	.+216    	; 0x15c6 <DIO_u8SetPortDirection+0x12a>
    14ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    14f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	b9 f1       	breq	.+110    	; 0x1566 <DIO_u8SetPortDirection+0xca>
    14f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    14fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <DIO_u8SetPortDirection+0x68>
    1502:	49 c0       	rjmp	.+146    	; 0x1596 <DIO_u8SetPortDirection+0xfa>
    1504:	60 c0       	rjmp	.+192    	; 0x15c6 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3b 87       	std	Y+11, r19	; 0x0b
    150e:	2a 87       	std	Y+10, r18	; 0x0a
    1510:	8a 85       	ldd	r24, Y+10	; 0x0a
    1512:	9b 85       	ldd	r25, Y+11	; 0x0b
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	31 f0       	breq	.+12     	; 0x1524 <DIO_u8SetPortDirection+0x88>
    1518:	2a 85       	ldd	r18, Y+10	; 0x0a
    151a:	3b 85       	ldd	r19, Y+11	; 0x0b
    151c:	21 30       	cpi	r18, 0x01	; 1
    151e:	31 05       	cpc	r19, r1
    1520:	29 f0       	breq	.+10     	; 0x152c <DIO_u8SetPortDirection+0x90>
    1522:	54 c0       	rjmp	.+168    	; 0x15cc <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1524:	ea e3       	ldi	r30, 0x3A	; 58
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	10 82       	st	Z, r1
    152a:	50 c0       	rjmp	.+160    	; 0x15cc <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    152c:	ea e3       	ldi	r30, 0x3A	; 58
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	80 83       	st	Z, r24
    1534:	4b c0       	rjmp	.+150    	; 0x15cc <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	39 87       	std	Y+9, r19	; 0x09
    153e:	28 87       	std	Y+8, r18	; 0x08
    1540:	88 85       	ldd	r24, Y+8	; 0x08
    1542:	99 85       	ldd	r25, Y+9	; 0x09
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	31 f0       	breq	.+12     	; 0x1554 <DIO_u8SetPortDirection+0xb8>
    1548:	28 85       	ldd	r18, Y+8	; 0x08
    154a:	39 85       	ldd	r19, Y+9	; 0x09
    154c:	21 30       	cpi	r18, 0x01	; 1
    154e:	31 05       	cpc	r19, r1
    1550:	29 f0       	breq	.+10     	; 0x155c <DIO_u8SetPortDirection+0xc0>
    1552:	3c c0       	rjmp	.+120    	; 0x15cc <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	10 82       	st	Z, r1
    155a:	38 c0       	rjmp	.+112    	; 0x15cc <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    155c:	e7 e3       	ldi	r30, 0x37	; 55
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	80 83       	st	Z, r24
    1564:	33 c0       	rjmp	.+102    	; 0x15cc <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3f 83       	std	Y+7, r19	; 0x07
    156e:	2e 83       	std	Y+6, r18	; 0x06
    1570:	8e 81       	ldd	r24, Y+6	; 0x06
    1572:	9f 81       	ldd	r25, Y+7	; 0x07
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	31 f0       	breq	.+12     	; 0x1584 <DIO_u8SetPortDirection+0xe8>
    1578:	2e 81       	ldd	r18, Y+6	; 0x06
    157a:	3f 81       	ldd	r19, Y+7	; 0x07
    157c:	21 30       	cpi	r18, 0x01	; 1
    157e:	31 05       	cpc	r19, r1
    1580:	29 f0       	breq	.+10     	; 0x158c <DIO_u8SetPortDirection+0xf0>
    1582:	24 c0       	rjmp	.+72     	; 0x15cc <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    1584:	e4 e3       	ldi	r30, 0x34	; 52
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	10 82       	st	Z, r1
    158a:	20 c0       	rjmp	.+64     	; 0x15cc <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    158c:	e4 e3       	ldi	r30, 0x34	; 52
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	80 83       	st	Z, r24
    1594:	1b c0       	rjmp	.+54     	; 0x15cc <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	3d 83       	std	Y+5, r19	; 0x05
    159e:	2c 83       	std	Y+4, r18	; 0x04
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <DIO_u8SetPortDirection+0x118>
    15a8:	2c 81       	ldd	r18, Y+4	; 0x04
    15aa:	3d 81       	ldd	r19, Y+5	; 0x05
    15ac:	21 30       	cpi	r18, 0x01	; 1
    15ae:	31 05       	cpc	r19, r1
    15b0:	29 f0       	breq	.+10     	; 0x15bc <DIO_u8SetPortDirection+0x120>
    15b2:	0c c0       	rjmp	.+24     	; 0x15cc <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    15b4:	e1 e3       	ldi	r30, 0x31	; 49
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	10 82       	st	Z, r1
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    15bc:	e1 e3       	ldi	r30, 0x31	; 49
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	80 83       	st	Z, r24
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    15ca:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ce:	2d 96       	adiw	r28, 0x0d	; 13
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_u8SetPortValue+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_u8SetPortValue+0x8>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	8a 83       	std	Y+2, r24	; 0x02
    15f0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3d 83       	std	Y+5, r19	; 0x05
    15fe:	2c 83       	std	Y+4, r18	; 0x04
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	d1 f0       	breq	.+52     	; 0x163e <DIO_u8SetPortValue+0x5e>
    160a:	2c 81       	ldd	r18, Y+4	; 0x04
    160c:	3d 81       	ldd	r19, Y+5	; 0x05
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	2c f4       	brge	.+10     	; 0x161e <DIO_u8SetPortValue+0x3e>
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 f0       	breq	.+24     	; 0x1634 <DIO_u8SetPortValue+0x54>
    161c:	1f c0       	rjmp	.+62     	; 0x165c <DIO_u8SetPortValue+0x7c>
    161e:	2c 81       	ldd	r18, Y+4	; 0x04
    1620:	3d 81       	ldd	r19, Y+5	; 0x05
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	81 f0       	breq	.+32     	; 0x1648 <DIO_u8SetPortValue+0x68>
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	81 f0       	breq	.+32     	; 0x1652 <DIO_u8SetPortValue+0x72>
    1632:	14 c0       	rjmp	.+40     	; 0x165c <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    1634:	eb e3       	ldi	r30, 0x3B	; 59
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	80 83       	st	Z, r24
    163c:	10 c0       	rjmp	.+32     	; 0x165e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    163e:	e8 e3       	ldi	r30, 0x38	; 56
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	80 83       	st	Z, r24
    1646:	0b c0       	rjmp	.+22     	; 0x165e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    1648:	e5 e3       	ldi	r30, 0x35	; 53
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	80 83       	st	Z, r24
    1650:	06 c0       	rjmp	.+12     	; 0x165e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    1652:	e2 e3       	ldi	r30, 0x32	; 50
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	80 83       	st	Z, r24
    165a:	01 c0       	rjmp	.+2      	; 0x165e <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    165c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <DIO_u8GetPortValue+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <DIO_u8GetPortValue+0x8>
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_u8GetPortValue+0xa>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	7c 83       	std	Y+4, r23	; 0x04
    1682:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	e9 f1       	breq	.+122    	; 0x170a <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	3e 83       	std	Y+6, r19	; 0x06
    1698:	2d 83       	std	Y+5, r18	; 0x05
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	e1 f0       	breq	.+56     	; 0x16dc <DIO_u8GetPortValue+0x6c>
    16a4:	2d 81       	ldd	r18, Y+5	; 0x05
    16a6:	3e 81       	ldd	r19, Y+6	; 0x06
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <DIO_u8GetPortValue+0x48>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	61 f0       	breq	.+24     	; 0x16ce <DIO_u8GetPortValue+0x5e>
    16b6:	27 c0       	rjmp	.+78     	; 0x1706 <DIO_u8GetPortValue+0x96>
    16b8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ba:	3e 81       	ldd	r19, Y+6	; 0x06
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	a1 f0       	breq	.+40     	; 0x16ea <DIO_u8GetPortValue+0x7a>
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	91 05       	cpc	r25, r1
    16ca:	b1 f0       	breq	.+44     	; 0x16f8 <DIO_u8GetPortValue+0x88>
    16cc:	1c c0       	rjmp	.+56     	; 0x1706 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    16ce:	e9 e3       	ldi	r30, 0x39	; 57
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	eb 81       	ldd	r30, Y+3	; 0x03
    16d6:	fc 81       	ldd	r31, Y+4	; 0x04
    16d8:	80 83       	st	Z, r24
    16da:	18 c0       	rjmp	.+48     	; 0x170c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    16dc:	e6 e3       	ldi	r30, 0x36	; 54
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	eb 81       	ldd	r30, Y+3	; 0x03
    16e4:	fc 81       	ldd	r31, Y+4	; 0x04
    16e6:	80 83       	st	Z, r24
    16e8:	11 c0       	rjmp	.+34     	; 0x170c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    16ea:	e3 e3       	ldi	r30, 0x33	; 51
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	eb 81       	ldd	r30, Y+3	; 0x03
    16f2:	fc 81       	ldd	r31, Y+4	; 0x04
    16f4:	80 83       	st	Z, r24
    16f6:	0a c0       	rjmp	.+20     	; 0x170c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    16f8:	e0 e3       	ldi	r30, 0x30	; 48
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1700:	fc 81       	ldd	r31, Y+4	; 0x04
    1702:	80 83       	st	Z, r24
    1704:	03 c0       	rjmp	.+6      	; 0x170c <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	01 c0       	rjmp	.+2      	; 0x170c <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    170a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	26 96       	adiw	r28, 0x06	; 6
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <EXTI_u8EXTIEnable>:
/* Global Pointer to a function */
static void (*EXTI_ApfExtI[3]) (void) = {NULL,NULL,NULL};


u8 EXTI_u8EXTIEnable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	2b 97       	sbiw	r28, 0x0b	; 11
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	8a 83       	std	Y+2, r24	; 0x02
    1736:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndex)
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3b 87       	std	Y+11, r19	; 0x0b
    1744:	2a 87       	std	Y+10, r18	; 0x0a
    1746:	8a 85       	ldd	r24, Y+10	; 0x0a
    1748:	9b 85       	ldd	r25, Y+11	; 0x0b
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <EXTI_u8EXTIEnable+0x32>
    1750:	85 c0       	rjmp	.+266    	; 0x185c <EXTI_u8EXTIEnable+0x13c>
    1752:	2a 85       	ldd	r18, Y+10	; 0x0a
    1754:	3b 85       	ldd	r19, Y+11	; 0x0b
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <EXTI_u8EXTIEnable+0x3e>
    175c:	f9 c0       	rjmp	.+498    	; 0x1950 <EXTI_u8EXTIEnable+0x230>
    175e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1760:	9b 85       	ldd	r25, Y+11	; 0x0b
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	09 f0       	breq	.+2      	; 0x1768 <EXTI_u8EXTIEnable+0x48>
    1766:	23 c1       	rjmp	.+582    	; 0x19ae <EXTI_u8EXTIEnable+0x28e>
	{
	case EXTI_u8_INT0:
		switch(Copy_u8EdgeIndex)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	39 87       	std	Y+9, r19	; 0x09
    1770:	28 87       	std	Y+8, r18	; 0x08
    1772:	88 85       	ldd	r24, Y+8	; 0x08
    1774:	99 85       	ldd	r25, Y+9	; 0x09
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	91 05       	cpc	r25, r1
    177a:	61 f1       	breq	.+88     	; 0x17d4 <EXTI_u8EXTIEnable+0xb4>
    177c:	28 85       	ldd	r18, Y+8	; 0x08
    177e:	39 85       	ldd	r19, Y+9	; 0x09
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	2c f4       	brge	.+10     	; 0x1790 <EXTI_u8EXTIEnable+0x70>
    1786:	88 85       	ldd	r24, Y+8	; 0x08
    1788:	99 85       	ldd	r25, Y+9	; 0x09
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f0       	breq	.+26     	; 0x17a8 <EXTI_u8EXTIEnable+0x88>
    178e:	64 c0       	rjmp	.+200    	; 0x1858 <EXTI_u8EXTIEnable+0x138>
    1790:	28 85       	ldd	r18, Y+8	; 0x08
    1792:	39 85       	ldd	r19, Y+9	; 0x09
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	99 f1       	breq	.+102    	; 0x1800 <EXTI_u8EXTIEnable+0xe0>
    179a:	88 85       	ldd	r24, Y+8	; 0x08
    179c:	99 85       	ldd	r25, Y+9	; 0x09
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <EXTI_u8EXTIEnable+0x86>
    17a4:	43 c0       	rjmp	.+134    	; 0x182c <EXTI_u8EXTIEnable+0x10c>
    17a6:	58 c0       	rjmp	.+176    	; 0x1858 <EXTI_u8EXTIEnable+0x138>
		{
		case EXTI_u8_RAISING_EDGE:
			SET_BIT(EXTI_u8_MCUCR,1);
    17a8:	a5 e5       	ldi	r26, 0x55	; 85
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e5       	ldi	r30, 0x55	; 85
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	82 60       	ori	r24, 0x02	; 2
    17b4:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR,0);
    17b6:	a5 e5       	ldi	r26, 0x55	; 85
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e5 e5       	ldi	r30, 0x55	; 85
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	81 60       	ori	r24, 0x01	; 1
    17c2:	8c 93       	st	X, r24
			/* Enable EXTI0 */
			SET_BIT(EXTI_u8_GICR,6);
    17c4:	ab e5       	ldi	r26, 0x5B	; 91
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	eb e5       	ldi	r30, 0x5B	; 91
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 64       	ori	r24, 0x40	; 64
    17d0:	8c 93       	st	X, r24
    17d2:	ee c0       	rjmp	.+476    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
			break;
		case EXTI_u8_FALLING_EDGE:
			SET_BIT(EXTI_u8_MCUCR,1);
    17d4:	a5 e5       	ldi	r26, 0x55	; 85
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e5       	ldi	r30, 0x55	; 85
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	82 60       	ori	r24, 0x02	; 2
    17e0:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR,0);
    17e2:	a5 e5       	ldi	r26, 0x55	; 85
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e5       	ldi	r30, 0x55	; 85
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	8e 7f       	andi	r24, 0xFE	; 254
    17ee:	8c 93       	st	X, r24
			/* Enable EXTI0 */
			SET_BIT(EXTI_u8_GICR,6);
    17f0:	ab e5       	ldi	r26, 0x5B	; 91
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e5       	ldi	r30, 0x5B	; 91
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 64       	ori	r24, 0x40	; 64
    17fc:	8c 93       	st	X, r24
    17fe:	d8 c0       	rjmp	.+432    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
			break;
		case EXTI_u8_ANY_LOGICAL_CHANGE:
			CLR_BIT(EXTI_u8_MCUCR,1);
    1800:	a5 e5       	ldi	r26, 0x55	; 85
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e5       	ldi	r30, 0x55	; 85
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8d 7f       	andi	r24, 0xFD	; 253
    180c:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR,0);
    180e:	a5 e5       	ldi	r26, 0x55	; 85
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e5       	ldi	r30, 0x55	; 85
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	8c 93       	st	X, r24
			/* Enable EXTI0 */
			SET_BIT(EXTI_u8_GICR,6);
    181c:	ab e5       	ldi	r26, 0x5B	; 91
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	eb e5       	ldi	r30, 0x5B	; 91
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	80 64       	ori	r24, 0x40	; 64
    1828:	8c 93       	st	X, r24
    182a:	c2 c0       	rjmp	.+388    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
			break;
		case EXTI_u8_LOW_LEVEL:
			CLR_BIT(EXTI_u8_MCUCR,1);
    182c:	a5 e5       	ldi	r26, 0x55	; 85
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e5       	ldi	r30, 0x55	; 85
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8d 7f       	andi	r24, 0xFD	; 253
    1838:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR,0);
    183a:	a5 e5       	ldi	r26, 0x55	; 85
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e5 e5       	ldi	r30, 0x55	; 85
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8e 7f       	andi	r24, 0xFE	; 254
    1846:	8c 93       	st	X, r24
			/* Enable EXTI0 */
			SET_BIT(EXTI_u8_GICR,6);
    1848:	ab e5       	ldi	r26, 0x5B	; 91
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e5       	ldi	r30, 0x5B	; 91
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 64       	ori	r24, 0x40	; 64
    1854:	8c 93       	st	X, r24
    1856:	ac c0       	rjmp	.+344    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
			break;
		default: Local_u8ErrorState = STD_TYPES_NOK;
    1858:	19 82       	std	Y+1, r1	; 0x01
    185a:	aa c0       	rjmp	.+340    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
		}
		break;
		case EXTI_u8_INT1:
			switch(Copy_u8EdgeIndex)
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3f 83       	std	Y+7, r19	; 0x07
    1864:	2e 83       	std	Y+6, r18	; 0x06
    1866:	8e 81       	ldd	r24, Y+6	; 0x06
    1868:	9f 81       	ldd	r25, Y+7	; 0x07
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	91 05       	cpc	r25, r1
    186e:	61 f1       	breq	.+88     	; 0x18c8 <EXTI_u8EXTIEnable+0x1a8>
    1870:	2e 81       	ldd	r18, Y+6	; 0x06
    1872:	3f 81       	ldd	r19, Y+7	; 0x07
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	2c f4       	brge	.+10     	; 0x1884 <EXTI_u8EXTIEnable+0x164>
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	9f 81       	ldd	r25, Y+7	; 0x07
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	69 f0       	breq	.+26     	; 0x189c <EXTI_u8EXTIEnable+0x17c>
    1882:	64 c0       	rjmp	.+200    	; 0x194c <EXTI_u8EXTIEnable+0x22c>
    1884:	2e 81       	ldd	r18, Y+6	; 0x06
    1886:	3f 81       	ldd	r19, Y+7	; 0x07
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	99 f1       	breq	.+102    	; 0x18f4 <EXTI_u8EXTIEnable+0x1d4>
    188e:	8e 81       	ldd	r24, Y+6	; 0x06
    1890:	9f 81       	ldd	r25, Y+7	; 0x07
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <EXTI_u8EXTIEnable+0x17a>
    1898:	43 c0       	rjmp	.+134    	; 0x1920 <EXTI_u8EXTIEnable+0x200>
    189a:	58 c0       	rjmp	.+176    	; 0x194c <EXTI_u8EXTIEnable+0x22c>
			{
			case EXTI_u8_RAISING_EDGE:
				SET_BIT(EXTI_u8_MCUCR,3);
    189c:	a5 e5       	ldi	r26, 0x55	; 85
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e5 e5       	ldi	r30, 0x55	; 85
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	88 60       	ori	r24, 0x08	; 8
    18a8:	8c 93       	st	X, r24
				SET_BIT(EXTI_u8_MCUCR,2);
    18aa:	a5 e5       	ldi	r26, 0x55	; 85
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e5 e5       	ldi	r30, 0x55	; 85
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	84 60       	ori	r24, 0x04	; 4
    18b6:	8c 93       	st	X, r24
				/* Enable EXTI1 */
				SET_BIT(EXTI_u8_GICR,7);
    18b8:	ab e5       	ldi	r26, 0x5B	; 91
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	eb e5       	ldi	r30, 0x5B	; 91
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 68       	ori	r24, 0x80	; 128
    18c4:	8c 93       	st	X, r24
    18c6:	74 c0       	rjmp	.+232    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
			case EXTI_u8_FALLING_EDGE:
				SET_BIT(EXTI_u8_MCUCR,3);
    18c8:	a5 e5       	ldi	r26, 0x55	; 85
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e5       	ldi	r30, 0x55	; 85
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 60       	ori	r24, 0x08	; 8
    18d4:	8c 93       	st	X, r24
				CLR_BIT(EXTI_u8_MCUCR,2);
    18d6:	a5 e5       	ldi	r26, 0x55	; 85
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e5 e5       	ldi	r30, 0x55	; 85
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8b 7f       	andi	r24, 0xFB	; 251
    18e2:	8c 93       	st	X, r24
				/* Enable EXTI1 */
				SET_BIT(EXTI_u8_GICR,7);
    18e4:	ab e5       	ldi	r26, 0x5B	; 91
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	eb e5       	ldi	r30, 0x5B	; 91
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 68       	ori	r24, 0x80	; 128
    18f0:	8c 93       	st	X, r24
    18f2:	5e c0       	rjmp	.+188    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
			case EXTI_u8_ANY_LOGICAL_CHANGE:
				CLR_BIT(EXTI_u8_MCUCR,3);
    18f4:	a5 e5       	ldi	r26, 0x55	; 85
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e5       	ldi	r30, 0x55	; 85
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	87 7f       	andi	r24, 0xF7	; 247
    1900:	8c 93       	st	X, r24
				SET_BIT(EXTI_u8_MCUCR,2);
    1902:	a5 e5       	ldi	r26, 0x55	; 85
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e5       	ldi	r30, 0x55	; 85
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	84 60       	ori	r24, 0x04	; 4
    190e:	8c 93       	st	X, r24
				/* Enable EXTI1 */
				SET_BIT(EXTI_u8_GICR,7);
    1910:	ab e5       	ldi	r26, 0x5B	; 91
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	eb e5       	ldi	r30, 0x5B	; 91
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	8c 93       	st	X, r24
    191e:	48 c0       	rjmp	.+144    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
			case EXTI_u8_LOW_LEVEL:
				CLR_BIT(EXTI_u8_MCUCR,3);
    1920:	a5 e5       	ldi	r26, 0x55	; 85
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e5       	ldi	r30, 0x55	; 85
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	87 7f       	andi	r24, 0xF7	; 247
    192c:	8c 93       	st	X, r24
				CLR_BIT(EXTI_u8_MCUCR,2);
    192e:	a5 e5       	ldi	r26, 0x55	; 85
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e5       	ldi	r30, 0x55	; 85
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8b 7f       	andi	r24, 0xFB	; 251
    193a:	8c 93       	st	X, r24
				/* Enable EXTI1 */
				SET_BIT(EXTI_u8_GICR,7);
    193c:	ab e5       	ldi	r26, 0x5B	; 91
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e5       	ldi	r30, 0x5B	; 91
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 68       	ori	r24, 0x80	; 128
    1948:	8c 93       	st	X, r24
    194a:	32 c0       	rjmp	.+100    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    194c:	19 82       	std	Y+1, r1	; 0x01
    194e:	30 c0       	rjmp	.+96     	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
			}
			break;
			case EXTI_u8_INT2:
				switch(Copy_u8EdgeIndex)
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3d 83       	std	Y+5, r19	; 0x05
    1958:	2c 83       	std	Y+4, r18	; 0x04
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	9d 81       	ldd	r25, Y+5	; 0x05
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	31 f0       	breq	.+12     	; 0x196e <EXTI_u8EXTIEnable+0x24e>
    1962:	2c 81       	ldd	r18, Y+4	; 0x04
    1964:	3d 81       	ldd	r19, Y+5	; 0x05
    1966:	21 30       	cpi	r18, 0x01	; 1
    1968:	31 05       	cpc	r19, r1
    196a:	81 f0       	breq	.+32     	; 0x198c <EXTI_u8EXTIEnable+0x26c>
    196c:	1e c0       	rjmp	.+60     	; 0x19aa <EXTI_u8EXTIEnable+0x28a>
				{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCSR,6);
    196e:	a4 e5       	ldi	r26, 0x54	; 84
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e4 e5       	ldi	r30, 0x54	; 84
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 64       	ori	r24, 0x40	; 64
    197a:	8c 93       	st	X, r24
					/* Enable EXTI2 */
					SET_BIT(EXTI_u8_GICR,5);
    197c:	ab e5       	ldi	r26, 0x5B	; 91
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	eb e5       	ldi	r30, 0x5B	; 91
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 62       	ori	r24, 0x20	; 32
    1988:	8c 93       	st	X, r24
    198a:	12 c0       	rjmp	.+36     	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
					break;
				case EXTI_u8_FALLING_EDGE:
					CLR_BIT(EXTI_u8_MCUCSR,6);
    198c:	a4 e5       	ldi	r26, 0x54	; 84
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e4 e5       	ldi	r30, 0x54	; 84
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7b       	andi	r24, 0xBF	; 191
    1998:	8c 93       	st	X, r24
					/* Enable EXTI2 */
					SET_BIT(EXTI_u8_GICR,5);
    199a:	ab e5       	ldi	r26, 0x5B	; 91
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	eb e5       	ldi	r30, 0x5B	; 91
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 62       	ori	r24, 0x20	; 32
    19a6:	8c 93       	st	X, r24
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
					break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    19aa:	19 82       	std	Y+1, r1	; 0x01
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				}
				break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    19ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b2:	2b 96       	adiw	r28, 0x0b	; 11
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <EXTI_u8EXTIDisable>:

u8 EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <EXTI_u8EXTIDisable+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <EXTI_u8EXTIDisable+0x8>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndex)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3c 83       	std	Y+4, r19	; 0x04
    19de:	2b 83       	std	Y+3, r18	; 0x03
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	89 f0       	breq	.+34     	; 0x1a0c <EXTI_u8EXTIDisable+0x48>
    19ea:	2b 81       	ldd	r18, Y+3	; 0x03
    19ec:	3c 81       	ldd	r19, Y+4	; 0x04
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	a1 f0       	breq	.+40     	; 0x1a1c <EXTI_u8EXTIDisable+0x58>
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	c1 f4       	brne	.+48     	; 0x1a2c <EXTI_u8EXTIDisable+0x68>
	{
	case EXTI_u8_INT0:
		/* Disable EXTI0 */
		CLR_BIT(EXTI_u8_GICR,6);
    19fc:	ab e5       	ldi	r26, 0x5B	; 91
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	eb e5       	ldi	r30, 0x5B	; 91
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8f 7b       	andi	r24, 0xBF	; 191
    1a08:	8c 93       	st	X, r24
    1a0a:	11 c0       	rjmp	.+34     	; 0x1a2e <EXTI_u8EXTIDisable+0x6a>
		break;
	case EXTI_u8_INT1:
		/* Disable EXTI1 */
		CLR_BIT(EXTI_u8_GICR,7);
    1a0c:	ab e5       	ldi	r26, 0x5B	; 91
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	eb e5       	ldi	r30, 0x5B	; 91
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	8f 77       	andi	r24, 0x7F	; 127
    1a18:	8c 93       	st	X, r24
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <EXTI_u8EXTIDisable+0x6a>
		break;
	case EXTI_u8_INT2:
		/* Disable EXTI2 */
		CLR_BIT(EXTI_u8_GICR,5);
    1a1c:	ab e5       	ldi	r26, 0x5B	; 91
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	eb e5       	ldi	r30, 0x5B	; 91
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 7d       	andi	r24, 0xDF	; 223
    1a28:	8c 93       	st	X, r24
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <EXTI_u8EXTIDisable+0x6a>
		break;
	default: Local_u8ErrorState = STD_TYPES_NOK;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <EXTI_u8EXTISetEdge>:
u8 EXTI_u8EXTISetEdge(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	2b 97       	sbiw	r28, 0x0b	; 11
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    1a54:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndex)
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3b 87       	std	Y+11, r19	; 0x0b
    1a62:	2a 87       	std	Y+10, r18	; 0x0a
    1a64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <EXTI_u8EXTISetEdge+0x32>
    1a6e:	61 c0       	rjmp	.+194    	; 0x1b32 <EXTI_u8EXTISetEdge+0xf4>
    1a70:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a72:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <EXTI_u8EXTISetEdge+0x3e>
    1a7a:	b8 c0       	rjmp	.+368    	; 0x1bec <EXTI_u8EXTISetEdge+0x1ae>
    1a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <EXTI_u8EXTISetEdge+0x48>
    1a84:	d4 c0       	rjmp	.+424    	; 0x1c2e <EXTI_u8EXTISetEdge+0x1f0>
	{
	case EXTI_u8_INT0:
		switch(Copy_u8EdgeIndex)
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	39 87       	std	Y+9, r19	; 0x09
    1a8e:	28 87       	std	Y+8, r18	; 0x08
    1a90:	88 85       	ldd	r24, Y+8	; 0x08
    1a92:	99 85       	ldd	r25, Y+9	; 0x09
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	e9 f0       	breq	.+58     	; 0x1ad4 <EXTI_u8EXTISetEdge+0x96>
    1a9a:	28 85       	ldd	r18, Y+8	; 0x08
    1a9c:	39 85       	ldd	r19, Y+9	; 0x09
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <EXTI_u8EXTISetEdge+0x70>
    1aa4:	88 85       	ldd	r24, Y+8	; 0x08
    1aa6:	99 85       	ldd	r25, Y+9	; 0x09
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	61 f0       	breq	.+24     	; 0x1ac4 <EXTI_u8EXTISetEdge+0x86>
    1aac:	40 c0       	rjmp	.+128    	; 0x1b2e <EXTI_u8EXTISetEdge+0xf0>
    1aae:	28 85       	ldd	r18, Y+8	; 0x08
    1ab0:	39 85       	ldd	r19, Y+9	; 0x09
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	e9 f0       	breq	.+58     	; 0x1af2 <EXTI_u8EXTISetEdge+0xb4>
    1ab8:	88 85       	ldd	r24, Y+8	; 0x08
    1aba:	99 85       	ldd	r25, Y+9	; 0x09
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	39 f1       	breq	.+78     	; 0x1b10 <EXTI_u8EXTISetEdge+0xd2>
    1ac2:	35 c0       	rjmp	.+106    	; 0x1b2e <EXTI_u8EXTISetEdge+0xf0>
		{
		case EXTI_u8_RAISING_EDGE:
			/* Enable EXTI0 */
			SET_BIT(EXTI_u8_GICR,6);
    1ac4:	ab e5       	ldi	r26, 0x5B	; 91
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	eb e5       	ldi	r30, 0x5B	; 91
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	80 64       	ori	r24, 0x40	; 64
    1ad0:	8c 93       	st	X, r24
    1ad2:	ae c0       	rjmp	.+348    	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
			break;
		case EXTI_u8_FALLING_EDGE:
			SET_BIT(EXTI_u8_MCUCR,1);
    1ad4:	a5 e5       	ldi	r26, 0x55	; 85
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e5       	ldi	r30, 0x55	; 85
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	82 60       	ori	r24, 0x02	; 2
    1ae0:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR,0);
    1ae2:	a5 e5       	ldi	r26, 0x55	; 85
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e5       	ldi	r30, 0x55	; 85
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	8e 7f       	andi	r24, 0xFE	; 254
    1aee:	8c 93       	st	X, r24
    1af0:	9f c0       	rjmp	.+318    	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
			break;
		case EXTI_u8_ANY_LOGICAL_CHANGE:
			CLR_BIT(EXTI_u8_MCUCR,1);
    1af2:	a5 e5       	ldi	r26, 0x55	; 85
    1af4:	b0 e0       	ldi	r27, 0x00	; 0
    1af6:	e5 e5       	ldi	r30, 0x55	; 85
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	8d 7f       	andi	r24, 0xFD	; 253
    1afe:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR,0);
    1b00:	a5 e5       	ldi	r26, 0x55	; 85
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e5       	ldi	r30, 0x55	; 85
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	81 60       	ori	r24, 0x01	; 1
    1b0c:	8c 93       	st	X, r24
    1b0e:	90 c0       	rjmp	.+288    	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
			break;
		case EXTI_u8_LOW_LEVEL:
			CLR_BIT(EXTI_u8_MCUCR,1);
    1b10:	a5 e5       	ldi	r26, 0x55	; 85
    1b12:	b0 e0       	ldi	r27, 0x00	; 0
    1b14:	e5 e5       	ldi	r30, 0x55	; 85
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	80 81       	ld	r24, Z
    1b1a:	8d 7f       	andi	r24, 0xFD	; 253
    1b1c:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR,0);
    1b1e:	a5 e5       	ldi	r26, 0x55	; 85
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e5       	ldi	r30, 0x55	; 85
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8e 7f       	andi	r24, 0xFE	; 254
    1b2a:	8c 93       	st	X, r24
    1b2c:	81 c0       	rjmp	.+258    	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
			break;
		default: Local_u8ErrorState = STD_TYPES_NOK;
    1b2e:	19 82       	std	Y+1, r1	; 0x01
    1b30:	7f c0       	rjmp	.+254    	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
		}
		break;
		case EXTI_u8_INT1:
			switch(Copy_u8EdgeIndex)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	3f 83       	std	Y+7, r19	; 0x07
    1b3a:	2e 83       	std	Y+6, r18	; 0x06
    1b3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b40:	81 30       	cpi	r24, 0x01	; 1
    1b42:	91 05       	cpc	r25, r1
    1b44:	21 f1       	breq	.+72     	; 0x1b8e <EXTI_u8EXTISetEdge+0x150>
    1b46:	2e 81       	ldd	r18, Y+6	; 0x06
    1b48:	3f 81       	ldd	r19, Y+7	; 0x07
    1b4a:	22 30       	cpi	r18, 0x02	; 2
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	2c f4       	brge	.+10     	; 0x1b5a <EXTI_u8EXTISetEdge+0x11c>
    1b50:	8e 81       	ldd	r24, Y+6	; 0x06
    1b52:	9f 81       	ldd	r25, Y+7	; 0x07
    1b54:	00 97       	sbiw	r24, 0x00	; 0
    1b56:	61 f0       	breq	.+24     	; 0x1b70 <EXTI_u8EXTISetEdge+0x132>
    1b58:	47 c0       	rjmp	.+142    	; 0x1be8 <EXTI_u8EXTISetEdge+0x1aa>
    1b5a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b5c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b5e:	22 30       	cpi	r18, 0x02	; 2
    1b60:	31 05       	cpc	r19, r1
    1b62:	21 f1       	breq	.+72     	; 0x1bac <EXTI_u8EXTISetEdge+0x16e>
    1b64:	8e 81       	ldd	r24, Y+6	; 0x06
    1b66:	9f 81       	ldd	r25, Y+7	; 0x07
    1b68:	83 30       	cpi	r24, 0x03	; 3
    1b6a:	91 05       	cpc	r25, r1
    1b6c:	71 f1       	breq	.+92     	; 0x1bca <EXTI_u8EXTISetEdge+0x18c>
    1b6e:	3c c0       	rjmp	.+120    	; 0x1be8 <EXTI_u8EXTISetEdge+0x1aa>
			{
			case EXTI_u8_RAISING_EDGE:
				SET_BIT(EXTI_u8_MCUCR,3);
    1b70:	a5 e5       	ldi	r26, 0x55	; 85
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e5 e5       	ldi	r30, 0x55	; 85
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	88 60       	ori	r24, 0x08	; 8
    1b7c:	8c 93       	st	X, r24
				SET_BIT(EXTI_u8_MCUCR,2);
    1b7e:	a5 e5       	ldi	r26, 0x55	; 85
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e5       	ldi	r30, 0x55	; 85
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	84 60       	ori	r24, 0x04	; 4
    1b8a:	8c 93       	st	X, r24
    1b8c:	51 c0       	rjmp	.+162    	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
				break;
			case EXTI_u8_FALLING_EDGE:
				SET_BIT(EXTI_u8_MCUCR,3);
    1b8e:	a5 e5       	ldi	r26, 0x55	; 85
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e5 e5       	ldi	r30, 0x55	; 85
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	88 60       	ori	r24, 0x08	; 8
    1b9a:	8c 93       	st	X, r24
				CLR_BIT(EXTI_u8_MCUCR,2);;
    1b9c:	a5 e5       	ldi	r26, 0x55	; 85
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e5 e5       	ldi	r30, 0x55	; 85
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	8b 7f       	andi	r24, 0xFB	; 251
    1ba8:	8c 93       	st	X, r24
    1baa:	42 c0       	rjmp	.+132    	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
				break;
			case EXTI_u8_ANY_LOGICAL_CHANGE:
				CLR_BIT(EXTI_u8_MCUCR,3);
    1bac:	a5 e5       	ldi	r26, 0x55	; 85
    1bae:	b0 e0       	ldi	r27, 0x00	; 0
    1bb0:	e5 e5       	ldi	r30, 0x55	; 85
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	87 7f       	andi	r24, 0xF7	; 247
    1bb8:	8c 93       	st	X, r24
				SET_BIT(EXTI_u8_MCUCR,2);
    1bba:	a5 e5       	ldi	r26, 0x55	; 85
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e5 e5       	ldi	r30, 0x55	; 85
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	84 60       	ori	r24, 0x04	; 4
    1bc6:	8c 93       	st	X, r24
    1bc8:	33 c0       	rjmp	.+102    	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
				break;
			case EXTI_u8_LOW_LEVEL:
				CLR_BIT(EXTI_u8_MCUCR,3);
    1bca:	a5 e5       	ldi	r26, 0x55	; 85
    1bcc:	b0 e0       	ldi	r27, 0x00	; 0
    1bce:	e5 e5       	ldi	r30, 0x55	; 85
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	80 81       	ld	r24, Z
    1bd4:	87 7f       	andi	r24, 0xF7	; 247
    1bd6:	8c 93       	st	X, r24
				CLR_BIT(EXTI_u8_MCUCR,2);
    1bd8:	a5 e5       	ldi	r26, 0x55	; 85
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e5 e5       	ldi	r30, 0x55	; 85
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8b 7f       	andi	r24, 0xFB	; 251
    1be4:	8c 93       	st	X, r24
    1be6:	24 c0       	rjmp	.+72     	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
				break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    1be8:	19 82       	std	Y+1, r1	; 0x01
    1bea:	22 c0       	rjmp	.+68     	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
			}
			break;
			case EXTI_u8_INT2:
				switch(Copy_u8EdgeIndex)
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	3d 83       	std	Y+5, r19	; 0x05
    1bf4:	2c 83       	std	Y+4, r18	; 0x04
    1bf6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bfa:	00 97       	sbiw	r24, 0x00	; 0
    1bfc:	31 f0       	breq	.+12     	; 0x1c0a <EXTI_u8EXTISetEdge+0x1cc>
    1bfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1c00:	3d 81       	ldd	r19, Y+5	; 0x05
    1c02:	21 30       	cpi	r18, 0x01	; 1
    1c04:	31 05       	cpc	r19, r1
    1c06:	49 f0       	breq	.+18     	; 0x1c1a <EXTI_u8EXTISetEdge+0x1dc>
    1c08:	10 c0       	rjmp	.+32     	; 0x1c2a <EXTI_u8EXTISetEdge+0x1ec>
				{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCSR,6);
    1c0a:	a4 e5       	ldi	r26, 0x54	; 84
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e4 e5       	ldi	r30, 0x54	; 84
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	80 64       	ori	r24, 0x40	; 64
    1c16:	8c 93       	st	X, r24
    1c18:	0b c0       	rjmp	.+22     	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
					break;
				case EXTI_u8_FALLING_EDGE:
					CLR_BIT(EXTI_u8_MCUCSR,6);
    1c1a:	a4 e5       	ldi	r26, 0x54	; 84
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e4 e5       	ldi	r30, 0x54	; 84
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7b       	andi	r24, 0xBF	; 191
    1c26:	8c 93       	st	X, r24
    1c28:	03 c0       	rjmp	.+6      	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
					break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    1c2a:	19 82       	std	Y+1, r1	; 0x01
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <EXTI_u8EXTISetEdge+0x1f2>
				}
				break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    1c2e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c32:	2b 96       	adiw	r28, 0x0b	; 11
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	f8 94       	cli
    1c38:	de bf       	out	0x3e, r29	; 62
    1c3a:	0f be       	out	0x3f, r0	; 63
    1c3c:	cd bf       	out	0x3d, r28	; 61
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <EXTI_u8EXTISetCallBack>:

u8 EXTI_u8EXTISetCallBack(u8 Copy_u8EXTIIndex, void (*Copy_pf)(void))
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <EXTI_u8EXTISetCallBack+0x6>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <EXTI_u8EXTISetCallBack+0x8>
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
    1c50:	8a 83       	std	Y+2, r24	; 0x02
    1c52:	7c 83       	std	Y+4, r23	; 0x04
    1c54:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndex) <= EXTI_u8_INT2 && (Copy_pf != NULL))
    1c5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5c:	83 30       	cpi	r24, 0x03	; 3
    1c5e:	88 f4       	brcc	.+34     	; 0x1c82 <EXTI_u8EXTISetCallBack+0x3e>
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	00 97       	sbiw	r24, 0x00	; 0
    1c66:	69 f0       	breq	.+26     	; 0x1c82 <EXTI_u8EXTISetCallBack+0x3e>
	{
		EXTI_ApfExtI[Copy_u8EXTIIndex] = Copy_pf;
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	fc 01       	movw	r30, r24
    1c74:	e4 57       	subi	r30, 0x74	; 116
    1c76:	fe 4f       	sbci	r31, 0xFE	; 254
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	91 83       	std	Z+1, r25	; 0x01
    1c7e:	80 83       	st	Z, r24
    1c80:	01 c0       	rjmp	.+2      	; 0x1c84 <EXTI_u8EXTISetCallBack+0x40>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1c82:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	cf 91       	pop	r28
    1c90:	df 91       	pop	r29
    1c92:	08 95       	ret

00001c94 <__vector_1>:

/* Prototype for ISR of EXTI0 */

void __vector_1(void)    __attribute__((signal));
void __vector_1(void)
{
    1c94:	1f 92       	push	r1
    1c96:	0f 92       	push	r0
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	0f 92       	push	r0
    1c9c:	11 24       	eor	r1, r1
    1c9e:	2f 93       	push	r18
    1ca0:	3f 93       	push	r19
    1ca2:	4f 93       	push	r20
    1ca4:	5f 93       	push	r21
    1ca6:	6f 93       	push	r22
    1ca8:	7f 93       	push	r23
    1caa:	8f 93       	push	r24
    1cac:	9f 93       	push	r25
    1cae:	af 93       	push	r26
    1cb0:	bf 93       	push	r27
    1cb2:	ef 93       	push	r30
    1cb4:	ff 93       	push	r31
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExtI[EXTI_u8_INT0] != NULL)
    1cbe:	80 91 8c 01 	lds	r24, 0x018C
    1cc2:	90 91 8d 01 	lds	r25, 0x018D
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	29 f0       	breq	.+10     	; 0x1cd4 <__vector_1+0x40>
	{
		EXTI_ApfExtI[EXTI_u8_INT0]();
    1cca:	e0 91 8c 01 	lds	r30, 0x018C
    1cce:	f0 91 8d 01 	lds	r31, 0x018D
    1cd2:	09 95       	icall
	}
}
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	ff 91       	pop	r31
    1cda:	ef 91       	pop	r30
    1cdc:	bf 91       	pop	r27
    1cde:	af 91       	pop	r26
    1ce0:	9f 91       	pop	r25
    1ce2:	8f 91       	pop	r24
    1ce4:	7f 91       	pop	r23
    1ce6:	6f 91       	pop	r22
    1ce8:	5f 91       	pop	r21
    1cea:	4f 91       	pop	r20
    1cec:	3f 91       	pop	r19
    1cee:	2f 91       	pop	r18
    1cf0:	0f 90       	pop	r0
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	0f 90       	pop	r0
    1cf6:	1f 90       	pop	r1
    1cf8:	18 95       	reti

00001cfa <__vector_2>:

/* Prototype for ISR of EXTI1 */
void __vector_2(void)    __attribute__((signal));
void __vector_2(void)
{
    1cfa:	1f 92       	push	r1
    1cfc:	0f 92       	push	r0
    1cfe:	0f b6       	in	r0, 0x3f	; 63
    1d00:	0f 92       	push	r0
    1d02:	11 24       	eor	r1, r1
    1d04:	2f 93       	push	r18
    1d06:	3f 93       	push	r19
    1d08:	4f 93       	push	r20
    1d0a:	5f 93       	push	r21
    1d0c:	6f 93       	push	r22
    1d0e:	7f 93       	push	r23
    1d10:	8f 93       	push	r24
    1d12:	9f 93       	push	r25
    1d14:	af 93       	push	r26
    1d16:	bf 93       	push	r27
    1d18:	ef 93       	push	r30
    1d1a:	ff 93       	push	r31
    1d1c:	df 93       	push	r29
    1d1e:	cf 93       	push	r28
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExtI[EXTI_u8_INT1] != NULL)
    1d24:	80 91 8e 01 	lds	r24, 0x018E
    1d28:	90 91 8f 01 	lds	r25, 0x018F
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	29 f0       	breq	.+10     	; 0x1d3a <__vector_2+0x40>
	{
		EXTI_ApfExtI[EXTI_u8_INT1]();
    1d30:	e0 91 8e 01 	lds	r30, 0x018E
    1d34:	f0 91 8f 01 	lds	r31, 0x018F
    1d38:	09 95       	icall
	}
}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	ff 91       	pop	r31
    1d40:	ef 91       	pop	r30
    1d42:	bf 91       	pop	r27
    1d44:	af 91       	pop	r26
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	7f 91       	pop	r23
    1d4c:	6f 91       	pop	r22
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <__vector_3>:

/* Prototype for ISR of EXTI2 */
void __vector_3(void)    __attribute__((signal));
void __vector_3(void)
{
    1d60:	1f 92       	push	r1
    1d62:	0f 92       	push	r0
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	0f 92       	push	r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	2f 93       	push	r18
    1d6c:	3f 93       	push	r19
    1d6e:	4f 93       	push	r20
    1d70:	5f 93       	push	r21
    1d72:	6f 93       	push	r22
    1d74:	7f 93       	push	r23
    1d76:	8f 93       	push	r24
    1d78:	9f 93       	push	r25
    1d7a:	af 93       	push	r26
    1d7c:	bf 93       	push	r27
    1d7e:	ef 93       	push	r30
    1d80:	ff 93       	push	r31
    1d82:	df 93       	push	r29
    1d84:	cf 93       	push	r28
    1d86:	cd b7       	in	r28, 0x3d	; 61
    1d88:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExtI[EXTI_u8_INT2] != NULL)
    1d8a:	80 91 90 01 	lds	r24, 0x0190
    1d8e:	90 91 91 01 	lds	r25, 0x0191
    1d92:	00 97       	sbiw	r24, 0x00	; 0
    1d94:	29 f0       	breq	.+10     	; 0x1da0 <__vector_3+0x40>
	{
		EXTI_ApfExtI[EXTI_u8_INT2]();
    1d96:	e0 91 90 01 	lds	r30, 0x0190
    1d9a:	f0 91 91 01 	lds	r31, 0x0191
    1d9e:	09 95       	icall
	}
}
    1da0:	cf 91       	pop	r28
    1da2:	df 91       	pop	r29
    1da4:	ff 91       	pop	r31
    1da6:	ef 91       	pop	r30
    1da8:	bf 91       	pop	r27
    1daa:	af 91       	pop	r26
    1dac:	9f 91       	pop	r25
    1dae:	8f 91       	pop	r24
    1db0:	7f 91       	pop	r23
    1db2:	6f 91       	pop	r22
    1db4:	5f 91       	pop	r21
    1db6:	4f 91       	pop	r20
    1db8:	3f 91       	pop	r19
    1dba:	2f 91       	pop	r18
    1dbc:	0f 90       	pop	r0
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	0f 90       	pop	r0
    1dc2:	1f 90       	pop	r1
    1dc4:	18 95       	reti

00001dc6 <GI_voidEnableGI>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidEnableGI(void)
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
    1dce:	af e5       	ldi	r26, 0x5F	; 95
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	ef e5       	ldi	r30, 0x5F	; 95
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	80 68       	ori	r24, 0x80	; 128
    1dda:	8c 93       	st	X, r24
}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <GI_voidDisableGI>:

void GI_voidDisableGI(void)
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
    1dea:	af e5       	ldi	r26, 0x5F	; 95
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	ef e5       	ldi	r30, 0x5F	; 95
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	80 81       	ld	r24, Z
    1df4:	8f 77       	andi	r24, 0x7F	; 127
    1df6:	8c 93       	st	X, r24
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    1dfe:	0f 93       	push	r16
    1e00:	1f 93       	push	r17
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	cd b7       	in	r28, 0x3d	; 61
    1e08:	de b7       	in	r29, 0x3e	; 62
    1e0a:	cc 54       	subi	r28, 0x4C	; 76
    1e0c:	d0 40       	sbci	r29, 0x00	; 0
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e7 5b       	subi	r30, 0xB7	; 183
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	ac e0       	ldi	r26, 0x0C	; 12
    1e24:	b2 e4       	ldi	r27, 0x42	; 66
    1e26:	80 83       	st	Z, r24
    1e28:	91 83       	std	Z+1, r25	; 0x01
    1e2a:	a2 83       	std	Z+2, r26	; 0x02
    1e2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2e:	8e 01       	movw	r16, r28
    1e30:	0b 5b       	subi	r16, 0xBB	; 187
    1e32:	1f 4f       	sbci	r17, 0xFF	; 255
    1e34:	fe 01       	movw	r30, r28
    1e36:	e7 5b       	subi	r30, 0xB7	; 183
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	60 81       	ld	r22, Z
    1e3c:	71 81       	ldd	r23, Z+1	; 0x01
    1e3e:	82 81       	ldd	r24, Z+2	; 0x02
    1e40:	93 81       	ldd	r25, Z+3	; 0x03
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	4a ef       	ldi	r20, 0xFA	; 250
    1e48:	54 e4       	ldi	r21, 0x44	; 68
    1e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4e:	dc 01       	movw	r26, r24
    1e50:	cb 01       	movw	r24, r22
    1e52:	f8 01       	movw	r30, r16
    1e54:	80 83       	st	Z, r24
    1e56:	91 83       	std	Z+1, r25	; 0x01
    1e58:	a2 83       	std	Z+2, r26	; 0x02
    1e5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	eb 5b       	subi	r30, 0xBB	; 187
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	20 e0       	ldi	r18, 0x00	; 0
    1e6c:	30 e0       	ldi	r19, 0x00	; 0
    1e6e:	40 e8       	ldi	r20, 0x80	; 128
    1e70:	5f e3       	ldi	r21, 0x3F	; 63
    1e72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e76:	88 23       	and	r24, r24
    1e78:	44 f4       	brge	.+16     	; 0x1e8a <LCD_voidInit+0x8c>
		__ticks = 1;
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ed 5b       	subi	r30, 0xBD	; 189
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	91 83       	std	Z+1, r25	; 0x01
    1e86:	80 83       	st	Z, r24
    1e88:	64 c0       	rjmp	.+200    	; 0x1f52 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1e8a:	fe 01       	movw	r30, r28
    1e8c:	eb 5b       	subi	r30, 0xBB	; 187
    1e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e90:	60 81       	ld	r22, Z
    1e92:	71 81       	ldd	r23, Z+1	; 0x01
    1e94:	82 81       	ldd	r24, Z+2	; 0x02
    1e96:	93 81       	ldd	r25, Z+3	; 0x03
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	3f ef       	ldi	r19, 0xFF	; 255
    1e9c:	4f e7       	ldi	r20, 0x7F	; 127
    1e9e:	57 e4       	ldi	r21, 0x47	; 71
    1ea0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea4:	18 16       	cp	r1, r24
    1ea6:	0c f0       	brlt	.+2      	; 0x1eaa <LCD_voidInit+0xac>
    1ea8:	43 c0       	rjmp	.+134    	; 0x1f30 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e7 5b       	subi	r30, 0xB7	; 183
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	60 81       	ld	r22, Z
    1eb2:	71 81       	ldd	r23, Z+1	; 0x01
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	93 81       	ldd	r25, Z+3	; 0x03
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e2       	ldi	r20, 0x20	; 32
    1ebe:	51 e4       	ldi	r21, 0x41	; 65
    1ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	8e 01       	movw	r16, r28
    1eca:	0d 5b       	subi	r16, 0xBD	; 189
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	bc 01       	movw	r22, r24
    1ed0:	cd 01       	movw	r24, r26
    1ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ed6:	dc 01       	movw	r26, r24
    1ed8:	cb 01       	movw	r24, r22
    1eda:	f8 01       	movw	r30, r16
    1edc:	91 83       	std	Z+1, r25	; 0x01
    1ede:	80 83       	st	Z, r24
    1ee0:	1f c0       	rjmp	.+62     	; 0x1f20 <LCD_voidInit+0x122>
    1ee2:	fe 01       	movw	r30, r28
    1ee4:	ef 5b       	subi	r30, 0xBF	; 191
    1ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee8:	88 ec       	ldi	r24, 0xC8	; 200
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	91 83       	std	Z+1, r25	; 0x01
    1eee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	ef 5b       	subi	r30, 0xBF	; 191
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 81       	ld	r24, Z
    1ef8:	91 81       	ldd	r25, Z+1	; 0x01
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <LCD_voidInit+0xfc>
    1efe:	fe 01       	movw	r30, r28
    1f00:	ef 5b       	subi	r30, 0xBF	; 191
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f08:	de 01       	movw	r26, r28
    1f0a:	ad 5b       	subi	r26, 0xBD	; 189
    1f0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1f0e:	fe 01       	movw	r30, r28
    1f10:	ed 5b       	subi	r30, 0xBD	; 189
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	80 81       	ld	r24, Z
    1f16:	91 81       	ldd	r25, Z+1	; 0x01
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	11 96       	adiw	r26, 0x01	; 1
    1f1c:	9c 93       	st	X, r25
    1f1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	fe 01       	movw	r30, r28
    1f22:	ed 5b       	subi	r30, 0xBD	; 189
    1f24:	ff 4f       	sbci	r31, 0xFF	; 255
    1f26:	80 81       	ld	r24, Z
    1f28:	91 81       	ldd	r25, Z+1	; 0x01
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	d1 f6       	brne	.-76     	; 0x1ee2 <LCD_voidInit+0xe4>
    1f2e:	24 c0       	rjmp	.+72     	; 0x1f78 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	8e 01       	movw	r16, r28
    1f32:	0d 5b       	subi	r16, 0xBD	; 189
    1f34:	1f 4f       	sbci	r17, 0xFF	; 255
    1f36:	fe 01       	movw	r30, r28
    1f38:	eb 5b       	subi	r30, 0xBB	; 187
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	60 81       	ld	r22, Z
    1f3e:	71 81       	ldd	r23, Z+1	; 0x01
    1f40:	82 81       	ldd	r24, Z+2	; 0x02
    1f42:	93 81       	ldd	r25, Z+3	; 0x03
    1f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f48:	dc 01       	movw	r26, r24
    1f4a:	cb 01       	movw	r24, r22
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	91 83       	std	Z+1, r25	; 0x01
    1f50:	80 83       	st	Z, r24
    1f52:	fe 01       	movw	r30, r28
    1f54:	ed 5b       	subi	r30, 0xBD	; 189
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ff 96       	adiw	r30, 0x3f	; 63
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	80 83       	st	Z, r24
    1f64:	fe 01       	movw	r30, r28
    1f66:	ff 96       	adiw	r30, 0x3f	; 63
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <LCD_voidInit+0x16e>
    1f70:	fe 01       	movw	r30, r28
    1f72:	ff 96       	adiw	r30, 0x3f	; 63
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    1f78:	88 e3       	ldi	r24, 0x38	; 56
    1f7a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	a0 e2       	ldi	r26, 0x20	; 32
    1f84:	b2 e4       	ldi	r27, 0x42	; 66
    1f86:	8b af       	std	Y+59, r24	; 0x3b
    1f88:	9c af       	std	Y+60, r25	; 0x3c
    1f8a:	ad af       	std	Y+61, r26	; 0x3d
    1f8c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f8e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f90:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f92:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f94:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f96:	2b ea       	ldi	r18, 0xAB	; 171
    1f98:	3a ea       	ldi	r19, 0xAA	; 170
    1f9a:	4a e2       	ldi	r20, 0x2A	; 42
    1f9c:	50 e4       	ldi	r21, 0x40	; 64
    1f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8f ab       	std	Y+55, r24	; 0x37
    1fa8:	98 af       	std	Y+56, r25	; 0x38
    1faa:	a9 af       	std	Y+57, r26	; 0x39
    1fac:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1fae:	6f a9       	ldd	r22, Y+55	; 0x37
    1fb0:	78 ad       	ldd	r23, Y+56	; 0x38
    1fb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1fb4:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e8       	ldi	r20, 0x80	; 128
    1fbc:	5f e3       	ldi	r21, 0x3F	; 63
    1fbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fc2:	88 23       	and	r24, r24
    1fc4:	1c f4       	brge	.+6      	; 0x1fcc <LCD_voidInit+0x1ce>
		__ticks = 1;
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	8e ab       	std	Y+54, r24	; 0x36
    1fca:	91 c0       	rjmp	.+290    	; 0x20ee <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1fcc:	6f a9       	ldd	r22, Y+55	; 0x37
    1fce:	78 ad       	ldd	r23, Y+56	; 0x38
    1fd0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fd2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	4f e7       	ldi	r20, 0x7F	; 127
    1fda:	53 e4       	ldi	r21, 0x43	; 67
    1fdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fe0:	18 16       	cp	r1, r24
    1fe2:	0c f0       	brlt	.+2      	; 0x1fe6 <LCD_voidInit+0x1e8>
    1fe4:	7b c0       	rjmp	.+246    	; 0x20dc <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1fe6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1fe8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a e7       	ldi	r20, 0x7A	; 122
    1ff4:	54 e4       	ldi	r21, 0x44	; 68
    1ff6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	8a ab       	std	Y+50, r24	; 0x32
    2000:	9b ab       	std	Y+51, r25	; 0x33
    2002:	ac ab       	std	Y+52, r26	; 0x34
    2004:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2006:	6a a9       	ldd	r22, Y+50	; 0x32
    2008:	7b a9       	ldd	r23, Y+51	; 0x33
    200a:	8c a9       	ldd	r24, Y+52	; 0x34
    200c:	9d a9       	ldd	r25, Y+53	; 0x35
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	4a ef       	ldi	r20, 0xFA	; 250
    2014:	54 e4       	ldi	r21, 0x44	; 68
    2016:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	8e a7       	std	Y+46, r24	; 0x2e
    2020:	9f a7       	std	Y+47, r25	; 0x2f
    2022:	a8 ab       	std	Y+48, r26	; 0x30
    2024:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2026:	6e a5       	ldd	r22, Y+46	; 0x2e
    2028:	7f a5       	ldd	r23, Y+47	; 0x2f
    202a:	88 a9       	ldd	r24, Y+48	; 0x30
    202c:	99 a9       	ldd	r25, Y+49	; 0x31
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e8       	ldi	r20, 0x80	; 128
    2034:	5f e3       	ldi	r21, 0x3F	; 63
    2036:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    203a:	88 23       	and	r24, r24
    203c:	2c f4       	brge	.+10     	; 0x2048 <LCD_voidInit+0x24a>
		__ticks = 1;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9d a7       	std	Y+45, r25	; 0x2d
    2044:	8c a7       	std	Y+44, r24	; 0x2c
    2046:	3f c0       	rjmp	.+126    	; 0x20c6 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2048:	6e a5       	ldd	r22, Y+46	; 0x2e
    204a:	7f a5       	ldd	r23, Y+47	; 0x2f
    204c:	88 a9       	ldd	r24, Y+48	; 0x30
    204e:	99 a9       	ldd	r25, Y+49	; 0x31
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	3f ef       	ldi	r19, 0xFF	; 255
    2054:	4f e7       	ldi	r20, 0x7F	; 127
    2056:	57 e4       	ldi	r21, 0x47	; 71
    2058:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    205c:	18 16       	cp	r1, r24
    205e:	4c f5       	brge	.+82     	; 0x20b2 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	6a a9       	ldd	r22, Y+50	; 0x32
    2062:	7b a9       	ldd	r23, Y+51	; 0x33
    2064:	8c a9       	ldd	r24, Y+52	; 0x34
    2066:	9d a9       	ldd	r25, Y+53	; 0x35
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	40 e2       	ldi	r20, 0x20	; 32
    206e:	51 e4       	ldi	r21, 0x41	; 65
    2070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	bc 01       	movw	r22, r24
    207a:	cd 01       	movw	r24, r26
    207c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9d a7       	std	Y+45, r25	; 0x2d
    2086:	8c a7       	std	Y+44, r24	; 0x2c
    2088:	0f c0       	rjmp	.+30     	; 0x20a8 <LCD_voidInit+0x2aa>
    208a:	88 ec       	ldi	r24, 0xC8	; 200
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	9b a7       	std	Y+43, r25	; 0x2b
    2090:	8a a7       	std	Y+42, r24	; 0x2a
    2092:	8a a5       	ldd	r24, Y+42	; 0x2a
    2094:	9b a5       	ldd	r25, Y+43	; 0x2b
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	f1 f7       	brne	.-4      	; 0x2096 <LCD_voidInit+0x298>
    209a:	9b a7       	std	Y+43, r25	; 0x2b
    209c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    209e:	8c a5       	ldd	r24, Y+44	; 0x2c
    20a0:	9d a5       	ldd	r25, Y+45	; 0x2d
    20a2:	01 97       	sbiw	r24, 0x01	; 1
    20a4:	9d a7       	std	Y+45, r25	; 0x2d
    20a6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    20aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	69 f7       	brne	.-38     	; 0x208a <LCD_voidInit+0x28c>
    20b0:	24 c0       	rjmp	.+72     	; 0x20fa <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	6e a5       	ldd	r22, Y+46	; 0x2e
    20b4:	7f a5       	ldd	r23, Y+47	; 0x2f
    20b6:	88 a9       	ldd	r24, Y+48	; 0x30
    20b8:	99 a9       	ldd	r25, Y+49	; 0x31
    20ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	9d a7       	std	Y+45, r25	; 0x2d
    20c4:	8c a7       	std	Y+44, r24	; 0x2c
    20c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    20c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    20ca:	99 a7       	std	Y+41, r25	; 0x29
    20cc:	88 a7       	std	Y+40, r24	; 0x28
    20ce:	88 a5       	ldd	r24, Y+40	; 0x28
    20d0:	99 a5       	ldd	r25, Y+41	; 0x29
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <LCD_voidInit+0x2d4>
    20d6:	99 a7       	std	Y+41, r25	; 0x29
    20d8:	88 a7       	std	Y+40, r24	; 0x28
    20da:	0f c0       	rjmp	.+30     	; 0x20fa <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20dc:	6f a9       	ldd	r22, Y+55	; 0x37
    20de:	78 ad       	ldd	r23, Y+56	; 0x38
    20e0:	89 ad       	ldd	r24, Y+57	; 0x39
    20e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	8e ab       	std	Y+54, r24	; 0x36
    20ee:	8e a9       	ldd	r24, Y+54	; 0x36
    20f0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20f2:	8f a1       	ldd	r24, Y+39	; 0x27
    20f4:	8a 95       	dec	r24
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_voidInit+0x2f6>
    20f8:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    20fa:	8e e0       	ldi	r24, 0x0E	; 14
    20fc:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
    2100:	80 e0       	ldi	r24, 0x00	; 0
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	a0 e2       	ldi	r26, 0x20	; 32
    2106:	b2 e4       	ldi	r27, 0x42	; 66
    2108:	8b a3       	std	Y+35, r24	; 0x23
    210a:	9c a3       	std	Y+36, r25	; 0x24
    210c:	ad a3       	std	Y+37, r26	; 0x25
    210e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2110:	6b a1       	ldd	r22, Y+35	; 0x23
    2112:	7c a1       	ldd	r23, Y+36	; 0x24
    2114:	8d a1       	ldd	r24, Y+37	; 0x25
    2116:	9e a1       	ldd	r25, Y+38	; 0x26
    2118:	2b ea       	ldi	r18, 0xAB	; 171
    211a:	3a ea       	ldi	r19, 0xAA	; 170
    211c:	4a e2       	ldi	r20, 0x2A	; 42
    211e:	50 e4       	ldi	r21, 0x40	; 64
    2120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	8f 8f       	std	Y+31, r24	; 0x1f
    212a:	98 a3       	std	Y+32, r25	; 0x20
    212c:	a9 a3       	std	Y+33, r26	; 0x21
    212e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2130:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2132:	78 a1       	ldd	r23, Y+32	; 0x20
    2134:	89 a1       	ldd	r24, Y+33	; 0x21
    2136:	9a a1       	ldd	r25, Y+34	; 0x22
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e8       	ldi	r20, 0x80	; 128
    213e:	5f e3       	ldi	r21, 0x3F	; 63
    2140:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2144:	88 23       	and	r24, r24
    2146:	1c f4       	brge	.+6      	; 0x214e <LCD_voidInit+0x350>
		__ticks = 1;
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	8e 8f       	std	Y+30, r24	; 0x1e
    214c:	91 c0       	rjmp	.+290    	; 0x2270 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    214e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2150:	78 a1       	ldd	r23, Y+32	; 0x20
    2152:	89 a1       	ldd	r24, Y+33	; 0x21
    2154:	9a a1       	ldd	r25, Y+34	; 0x22
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	4f e7       	ldi	r20, 0x7F	; 127
    215c:	53 e4       	ldi	r21, 0x43	; 67
    215e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2162:	18 16       	cp	r1, r24
    2164:	0c f0       	brlt	.+2      	; 0x2168 <LCD_voidInit+0x36a>
    2166:	7b c0       	rjmp	.+246    	; 0x225e <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2168:	6b a1       	ldd	r22, Y+35	; 0x23
    216a:	7c a1       	ldd	r23, Y+36	; 0x24
    216c:	8d a1       	ldd	r24, Y+37	; 0x25
    216e:	9e a1       	ldd	r25, Y+38	; 0x26
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a e7       	ldi	r20, 0x7A	; 122
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	8a 8f       	std	Y+26, r24	; 0x1a
    2182:	9b 8f       	std	Y+27, r25	; 0x1b
    2184:	ac 8f       	std	Y+28, r26	; 0x1c
    2186:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2188:	6a 8d       	ldd	r22, Y+26	; 0x1a
    218a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    218c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    218e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	4a ef       	ldi	r20, 0xFA	; 250
    2196:	54 e4       	ldi	r21, 0x44	; 68
    2198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	8e 8b       	std	Y+22, r24	; 0x16
    21a2:	9f 8b       	std	Y+23, r25	; 0x17
    21a4:	a8 8f       	std	Y+24, r26	; 0x18
    21a6:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    21a8:	6e 89       	ldd	r22, Y+22	; 0x16
    21aa:	7f 89       	ldd	r23, Y+23	; 0x17
    21ac:	88 8d       	ldd	r24, Y+24	; 0x18
    21ae:	99 8d       	ldd	r25, Y+25	; 0x19
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5f e3       	ldi	r21, 0x3F	; 63
    21b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21bc:	88 23       	and	r24, r24
    21be:	2c f4       	brge	.+10     	; 0x21ca <LCD_voidInit+0x3cc>
		__ticks = 1;
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	9d 8b       	std	Y+21, r25	; 0x15
    21c6:	8c 8b       	std	Y+20, r24	; 0x14
    21c8:	3f c0       	rjmp	.+126    	; 0x2248 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    21ca:	6e 89       	ldd	r22, Y+22	; 0x16
    21cc:	7f 89       	ldd	r23, Y+23	; 0x17
    21ce:	88 8d       	ldd	r24, Y+24	; 0x18
    21d0:	99 8d       	ldd	r25, Y+25	; 0x19
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	3f ef       	ldi	r19, 0xFF	; 255
    21d6:	4f e7       	ldi	r20, 0x7F	; 127
    21d8:	57 e4       	ldi	r21, 0x47	; 71
    21da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21de:	18 16       	cp	r1, r24
    21e0:	4c f5       	brge	.+82     	; 0x2234 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21e2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21e4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e2       	ldi	r20, 0x20	; 32
    21f0:	51 e4       	ldi	r21, 0x41	; 65
    21f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	9d 8b       	std	Y+21, r25	; 0x15
    2208:	8c 8b       	std	Y+20, r24	; 0x14
    220a:	0f c0       	rjmp	.+30     	; 0x222a <LCD_voidInit+0x42c>
    220c:	88 ec       	ldi	r24, 0xC8	; 200
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	9b 8b       	std	Y+19, r25	; 0x13
    2212:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2214:	8a 89       	ldd	r24, Y+18	; 0x12
    2216:	9b 89       	ldd	r25, Y+19	; 0x13
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_voidInit+0x41a>
    221c:	9b 8b       	std	Y+19, r25	; 0x13
    221e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2220:	8c 89       	ldd	r24, Y+20	; 0x14
    2222:	9d 89       	ldd	r25, Y+21	; 0x15
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	9d 8b       	std	Y+21, r25	; 0x15
    2228:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    222a:	8c 89       	ldd	r24, Y+20	; 0x14
    222c:	9d 89       	ldd	r25, Y+21	; 0x15
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	69 f7       	brne	.-38     	; 0x220c <LCD_voidInit+0x40e>
    2232:	24 c0       	rjmp	.+72     	; 0x227c <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2234:	6e 89       	ldd	r22, Y+22	; 0x16
    2236:	7f 89       	ldd	r23, Y+23	; 0x17
    2238:	88 8d       	ldd	r24, Y+24	; 0x18
    223a:	99 8d       	ldd	r25, Y+25	; 0x19
    223c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	9d 8b       	std	Y+21, r25	; 0x15
    2246:	8c 8b       	std	Y+20, r24	; 0x14
    2248:	8c 89       	ldd	r24, Y+20	; 0x14
    224a:	9d 89       	ldd	r25, Y+21	; 0x15
    224c:	99 8b       	std	Y+17, r25	; 0x11
    224e:	88 8b       	std	Y+16, r24	; 0x10
    2250:	88 89       	ldd	r24, Y+16	; 0x10
    2252:	99 89       	ldd	r25, Y+17	; 0x11
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <LCD_voidInit+0x456>
    2258:	99 8b       	std	Y+17, r25	; 0x11
    225a:	88 8b       	std	Y+16, r24	; 0x10
    225c:	0f c0       	rjmp	.+30     	; 0x227c <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    225e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2260:	78 a1       	ldd	r23, Y+32	; 0x20
    2262:	89 a1       	ldd	r24, Y+33	; 0x21
    2264:	9a a1       	ldd	r25, Y+34	; 0x22
    2266:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	8e 8f       	std	Y+30, r24	; 0x1e
    2270:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2272:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2274:	8f 85       	ldd	r24, Y+15	; 0x0f
    2276:	8a 95       	dec	r24
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_voidInit+0x478>
    227a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 e0       	ldi	r26, 0x00	; 0
    2288:	b0 e4       	ldi	r27, 0x40	; 64
    228a:	8b 87       	std	Y+11, r24	; 0x0b
    228c:	9c 87       	std	Y+12, r25	; 0x0c
    228e:	ad 87       	std	Y+13, r26	; 0x0d
    2290:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2292:	6b 85       	ldd	r22, Y+11	; 0x0b
    2294:	7c 85       	ldd	r23, Y+12	; 0x0c
    2296:	8d 85       	ldd	r24, Y+13	; 0x0d
    2298:	9e 85       	ldd	r25, Y+14	; 0x0e
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4a ef       	ldi	r20, 0xFA	; 250
    22a0:	54 e4       	ldi	r21, 0x44	; 68
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	8f 83       	std	Y+7, r24	; 0x07
    22ac:	98 87       	std	Y+8, r25	; 0x08
    22ae:	a9 87       	std	Y+9, r26	; 0x09
    22b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b2:	6f 81       	ldd	r22, Y+7	; 0x07
    22b4:	78 85       	ldd	r23, Y+8	; 0x08
    22b6:	89 85       	ldd	r24, Y+9	; 0x09
    22b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <LCD_voidInit+0x4d6>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	3f c0       	rjmp	.+126    	; 0x2352 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    22d4:	6f 81       	ldd	r22, Y+7	; 0x07
    22d6:	78 85       	ldd	r23, Y+8	; 0x08
    22d8:	89 85       	ldd	r24, Y+9	; 0x09
    22da:	9a 85       	ldd	r25, Y+10	; 0x0a
    22dc:	20 e0       	ldi	r18, 0x00	; 0
    22de:	3f ef       	ldi	r19, 0xFF	; 255
    22e0:	4f e7       	ldi	r20, 0x7F	; 127
    22e2:	57 e4       	ldi	r21, 0x47	; 71
    22e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e8:	18 16       	cp	r1, r24
    22ea:	4c f5       	brge	.+82     	; 0x233e <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	40 e2       	ldi	r20, 0x20	; 32
    22fa:	51 e4       	ldi	r21, 0x41	; 65
    22fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2300:	dc 01       	movw	r26, r24
    2302:	cb 01       	movw	r24, r22
    2304:	bc 01       	movw	r22, r24
    2306:	cd 01       	movw	r24, r26
    2308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	9e 83       	std	Y+6, r25	; 0x06
    2312:	8d 83       	std	Y+5, r24	; 0x05
    2314:	0f c0       	rjmp	.+30     	; 0x2334 <LCD_voidInit+0x536>
    2316:	88 ec       	ldi	r24, 0xC8	; 200
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	9c 83       	std	Y+4, r25	; 0x04
    231c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_voidInit+0x524>
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    232a:	8d 81       	ldd	r24, Y+5	; 0x05
    232c:	9e 81       	ldd	r25, Y+6	; 0x06
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	00 97       	sbiw	r24, 0x00	; 0
    233a:	69 f7       	brne	.-38     	; 0x2316 <LCD_voidInit+0x518>
    233c:	14 c0       	rjmp	.+40     	; 0x2366 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233e:	6f 81       	ldd	r22, Y+7	; 0x07
    2340:	78 85       	ldd	r23, Y+8	; 0x08
    2342:	89 85       	ldd	r24, Y+9	; 0x09
    2344:	9a 85       	ldd	r25, Y+10	; 0x0a
    2346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	9e 83       	std	Y+6, r25	; 0x06
    2350:	8d 83       	std	Y+5, r24	; 0x05
    2352:	8d 81       	ldd	r24, Y+5	; 0x05
    2354:	9e 81       	ldd	r25, Y+6	; 0x06
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	9a 81       	ldd	r25, Y+2	; 0x02
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	f1 f7       	brne	.-4      	; 0x235e <LCD_voidInit+0x560>
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    2366:	86 e0       	ldi	r24, 0x06	; 6
    2368:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>


}
    236c:	c4 5b       	subi	r28, 0xB4	; 180
    236e:	df 4f       	sbci	r29, 0xFF	; 255
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	08 95       	ret

00002384 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	e1 97       	sbiw	r28, 0x31	; 49
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	60 e0       	ldi	r22, 0x00	; 0
    239e:	40 e0       	ldi	r20, 0x00	; 0
    23a0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	61 e0       	ldi	r22, 0x01	; 1
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    23ae:	83 e0       	ldi	r24, 0x03	; 3
    23b0:	69 a9       	ldd	r22, Y+49	; 0x31
    23b2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	62 e0       	ldi	r22, 0x02	; 2
    23ba:	41 e0       	ldi	r20, 0x01	; 1
    23bc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	a0 e8       	ldi	r26, 0x80	; 128
    23c6:	bf e3       	ldi	r27, 0x3F	; 63
    23c8:	8d a7       	std	Y+45, r24	; 0x2d
    23ca:	9e a7       	std	Y+46, r25	; 0x2e
    23cc:	af a7       	std	Y+47, r26	; 0x2f
    23ce:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23d0:	6d a5       	ldd	r22, Y+45	; 0x2d
    23d2:	7e a5       	ldd	r23, Y+46	; 0x2e
    23d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    23d6:	98 a9       	ldd	r25, Y+48	; 0x30
    23d8:	2b ea       	ldi	r18, 0xAB	; 171
    23da:	3a ea       	ldi	r19, 0xAA	; 170
    23dc:	4a e2       	ldi	r20, 0x2A	; 42
    23de:	50 e4       	ldi	r21, 0x40	; 64
    23e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	89 a7       	std	Y+41, r24	; 0x29
    23ea:	9a a7       	std	Y+42, r25	; 0x2a
    23ec:	ab a7       	std	Y+43, r26	; 0x2b
    23ee:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    23f0:	69 a5       	ldd	r22, Y+41	; 0x29
    23f2:	7a a5       	ldd	r23, Y+42	; 0x2a
    23f4:	8b a5       	ldd	r24, Y+43	; 0x2b
    23f6:	9c a5       	ldd	r25, Y+44	; 0x2c
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	1c f4       	brge	.+6      	; 0x240e <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	88 a7       	std	Y+40, r24	; 0x28
    240c:	91 c0       	rjmp	.+290    	; 0x2530 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    240e:	69 a5       	ldd	r22, Y+41	; 0x29
    2410:	7a a5       	ldd	r23, Y+42	; 0x2a
    2412:	8b a5       	ldd	r24, Y+43	; 0x2b
    2414:	9c a5       	ldd	r25, Y+44	; 0x2c
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	4f e7       	ldi	r20, 0x7F	; 127
    241c:	53 e4       	ldi	r21, 0x43	; 67
    241e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2422:	18 16       	cp	r1, r24
    2424:	0c f0       	brlt	.+2      	; 0x2428 <LCD_voidSendCmnd+0xa4>
    2426:	7b c0       	rjmp	.+246    	; 0x251e <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2428:	6d a5       	ldd	r22, Y+45	; 0x2d
    242a:	7e a5       	ldd	r23, Y+46	; 0x2e
    242c:	8f a5       	ldd	r24, Y+47	; 0x2f
    242e:	98 a9       	ldd	r25, Y+48	; 0x30
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a e7       	ldi	r20, 0x7A	; 122
    2436:	54 e4       	ldi	r21, 0x44	; 68
    2438:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	8c a3       	std	Y+36, r24	; 0x24
    2442:	9d a3       	std	Y+37, r25	; 0x25
    2444:	ae a3       	std	Y+38, r26	; 0x26
    2446:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2448:	6c a1       	ldd	r22, Y+36	; 0x24
    244a:	7d a1       	ldd	r23, Y+37	; 0x25
    244c:	8e a1       	ldd	r24, Y+38	; 0x26
    244e:	9f a1       	ldd	r25, Y+39	; 0x27
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	4a ef       	ldi	r20, 0xFA	; 250
    2456:	54 e4       	ldi	r21, 0x44	; 68
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	88 a3       	std	Y+32, r24	; 0x20
    2462:	99 a3       	std	Y+33, r25	; 0x21
    2464:	aa a3       	std	Y+34, r26	; 0x22
    2466:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2468:	68 a1       	ldd	r22, Y+32	; 0x20
    246a:	79 a1       	ldd	r23, Y+33	; 0x21
    246c:	8a a1       	ldd	r24, Y+34	; 0x22
    246e:	9b a1       	ldd	r25, Y+35	; 0x23
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	40 e8       	ldi	r20, 0x80	; 128
    2476:	5f e3       	ldi	r21, 0x3F	; 63
    2478:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    247c:	88 23       	and	r24, r24
    247e:	2c f4       	brge	.+10     	; 0x248a <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9f 8f       	std	Y+31, r25	; 0x1f
    2486:	8e 8f       	std	Y+30, r24	; 0x1e
    2488:	3f c0       	rjmp	.+126    	; 0x2508 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    248a:	68 a1       	ldd	r22, Y+32	; 0x20
    248c:	79 a1       	ldd	r23, Y+33	; 0x21
    248e:	8a a1       	ldd	r24, Y+34	; 0x22
    2490:	9b a1       	ldd	r25, Y+35	; 0x23
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	3f ef       	ldi	r19, 0xFF	; 255
    2496:	4f e7       	ldi	r20, 0x7F	; 127
    2498:	57 e4       	ldi	r21, 0x47	; 71
    249a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    249e:	18 16       	cp	r1, r24
    24a0:	4c f5       	brge	.+82     	; 0x24f4 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24a2:	6c a1       	ldd	r22, Y+36	; 0x24
    24a4:	7d a1       	ldd	r23, Y+37	; 0x25
    24a6:	8e a1       	ldd	r24, Y+38	; 0x26
    24a8:	9f a1       	ldd	r25, Y+39	; 0x27
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	30 e0       	ldi	r19, 0x00	; 0
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	51 e4       	ldi	r21, 0x41	; 65
    24b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	bc 01       	movw	r22, r24
    24bc:	cd 01       	movw	r24, r26
    24be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	9f 8f       	std	Y+31, r25	; 0x1f
    24c8:	8e 8f       	std	Y+30, r24	; 0x1e
    24ca:	0f c0       	rjmp	.+30     	; 0x24ea <LCD_voidSendCmnd+0x166>
    24cc:	88 ec       	ldi	r24, 0xC8	; 200
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9d 8f       	std	Y+29, r25	; 0x1d
    24d2:	8c 8f       	std	Y+28, r24	; 0x1c
    24d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_voidSendCmnd+0x154>
    24dc:	9d 8f       	std	Y+29, r25	; 0x1d
    24de:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24e2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24e4:	01 97       	sbiw	r24, 0x01	; 1
    24e6:	9f 8f       	std	Y+31, r25	; 0x1f
    24e8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24ee:	00 97       	sbiw	r24, 0x00	; 0
    24f0:	69 f7       	brne	.-38     	; 0x24cc <LCD_voidSendCmnd+0x148>
    24f2:	24 c0       	rjmp	.+72     	; 0x253c <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f4:	68 a1       	ldd	r22, Y+32	; 0x20
    24f6:	79 a1       	ldd	r23, Y+33	; 0x21
    24f8:	8a a1       	ldd	r24, Y+34	; 0x22
    24fa:	9b a1       	ldd	r25, Y+35	; 0x23
    24fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	9f 8f       	std	Y+31, r25	; 0x1f
    2506:	8e 8f       	std	Y+30, r24	; 0x1e
    2508:	8e 8d       	ldd	r24, Y+30	; 0x1e
    250a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    250c:	9b 8f       	std	Y+27, r25	; 0x1b
    250e:	8a 8f       	std	Y+26, r24	; 0x1a
    2510:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2512:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2514:	01 97       	sbiw	r24, 0x01	; 1
    2516:	f1 f7       	brne	.-4      	; 0x2514 <LCD_voidSendCmnd+0x190>
    2518:	9b 8f       	std	Y+27, r25	; 0x1b
    251a:	8a 8f       	std	Y+26, r24	; 0x1a
    251c:	0f c0       	rjmp	.+30     	; 0x253c <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    251e:	69 a5       	ldd	r22, Y+41	; 0x29
    2520:	7a a5       	ldd	r23, Y+42	; 0x2a
    2522:	8b a5       	ldd	r24, Y+43	; 0x2b
    2524:	9c a5       	ldd	r25, Y+44	; 0x2c
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	88 a7       	std	Y+40, r24	; 0x28
    2530:	88 a5       	ldd	r24, Y+40	; 0x28
    2532:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2534:	89 8d       	ldd	r24, Y+25	; 0x19
    2536:	8a 95       	dec	r24
    2538:	f1 f7       	brne	.-4      	; 0x2536 <LCD_voidSendCmnd+0x1b2>
    253a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	62 e0       	ldi	r22, 0x02	; 2
    2540:	40 e0       	ldi	r20, 0x00	; 0
    2542:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	a0 e8       	ldi	r26, 0x80	; 128
    254c:	bf e3       	ldi	r27, 0x3F	; 63
    254e:	8d 8b       	std	Y+21, r24	; 0x15
    2550:	9e 8b       	std	Y+22, r25	; 0x16
    2552:	af 8b       	std	Y+23, r26	; 0x17
    2554:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2556:	6d 89       	ldd	r22, Y+21	; 0x15
    2558:	7e 89       	ldd	r23, Y+22	; 0x16
    255a:	8f 89       	ldd	r24, Y+23	; 0x17
    255c:	98 8d       	ldd	r25, Y+24	; 0x18
    255e:	2b ea       	ldi	r18, 0xAB	; 171
    2560:	3a ea       	ldi	r19, 0xAA	; 170
    2562:	4a e2       	ldi	r20, 0x2A	; 42
    2564:	50 e4       	ldi	r21, 0x40	; 64
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	89 8b       	std	Y+17, r24	; 0x11
    2570:	9a 8b       	std	Y+18, r25	; 0x12
    2572:	ab 8b       	std	Y+19, r26	; 0x13
    2574:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2576:	69 89       	ldd	r22, Y+17	; 0x11
    2578:	7a 89       	ldd	r23, Y+18	; 0x12
    257a:	8b 89       	ldd	r24, Y+19	; 0x13
    257c:	9c 89       	ldd	r25, Y+20	; 0x14
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	40 e8       	ldi	r20, 0x80	; 128
    2584:	5f e3       	ldi	r21, 0x3F	; 63
    2586:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    258a:	88 23       	and	r24, r24
    258c:	1c f4       	brge	.+6      	; 0x2594 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    258e:	81 e0       	ldi	r24, 0x01	; 1
    2590:	88 8b       	std	Y+16, r24	; 0x10
    2592:	91 c0       	rjmp	.+290    	; 0x26b6 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    2594:	69 89       	ldd	r22, Y+17	; 0x11
    2596:	7a 89       	ldd	r23, Y+18	; 0x12
    2598:	8b 89       	ldd	r24, Y+19	; 0x13
    259a:	9c 89       	ldd	r25, Y+20	; 0x14
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4f e7       	ldi	r20, 0x7F	; 127
    25a2:	53 e4       	ldi	r21, 0x43	; 67
    25a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a8:	18 16       	cp	r1, r24
    25aa:	0c f0       	brlt	.+2      	; 0x25ae <LCD_voidSendCmnd+0x22a>
    25ac:	7b c0       	rjmp	.+246    	; 0x26a4 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    25ae:	6d 89       	ldd	r22, Y+21	; 0x15
    25b0:	7e 89       	ldd	r23, Y+22	; 0x16
    25b2:	8f 89       	ldd	r24, Y+23	; 0x17
    25b4:	98 8d       	ldd	r25, Y+24	; 0x18
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4a e7       	ldi	r20, 0x7A	; 122
    25bc:	54 e4       	ldi	r21, 0x44	; 68
    25be:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8c 87       	std	Y+12, r24	; 0x0c
    25c8:	9d 87       	std	Y+13, r25	; 0x0d
    25ca:	ae 87       	std	Y+14, r26	; 0x0e
    25cc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ce:	6c 85       	ldd	r22, Y+12	; 0x0c
    25d0:	7d 85       	ldd	r23, Y+13	; 0x0d
    25d2:	8e 85       	ldd	r24, Y+14	; 0x0e
    25d4:	9f 85       	ldd	r25, Y+15	; 0x0f
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a ef       	ldi	r20, 0xFA	; 250
    25dc:	54 e4       	ldi	r21, 0x44	; 68
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	88 87       	std	Y+8, r24	; 0x08
    25e8:	99 87       	std	Y+9, r25	; 0x09
    25ea:	aa 87       	std	Y+10, r26	; 0x0a
    25ec:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25ee:	68 85       	ldd	r22, Y+8	; 0x08
    25f0:	79 85       	ldd	r23, Y+9	; 0x09
    25f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    25f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e8       	ldi	r20, 0x80	; 128
    25fc:	5f e3       	ldi	r21, 0x3F	; 63
    25fe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2602:	88 23       	and	r24, r24
    2604:	2c f4       	brge	.+10     	; 0x2610 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	9f 83       	std	Y+7, r25	; 0x07
    260c:	8e 83       	std	Y+6, r24	; 0x06
    260e:	3f c0       	rjmp	.+126    	; 0x268e <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    2610:	68 85       	ldd	r22, Y+8	; 0x08
    2612:	79 85       	ldd	r23, Y+9	; 0x09
    2614:	8a 85       	ldd	r24, Y+10	; 0x0a
    2616:	9b 85       	ldd	r25, Y+11	; 0x0b
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	4c f5       	brge	.+82     	; 0x267a <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2628:	6c 85       	ldd	r22, Y+12	; 0x0c
    262a:	7d 85       	ldd	r23, Y+13	; 0x0d
    262c:	8e 85       	ldd	r24, Y+14	; 0x0e
    262e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e2       	ldi	r20, 0x20	; 32
    2636:	51 e4       	ldi	r21, 0x41	; 65
    2638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	9f 83       	std	Y+7, r25	; 0x07
    264e:	8e 83       	std	Y+6, r24	; 0x06
    2650:	0f c0       	rjmp	.+30     	; 0x2670 <LCD_voidSendCmnd+0x2ec>
    2652:	88 ec       	ldi	r24, 0xC8	; 200
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	9d 83       	std	Y+5, r25	; 0x05
    2658:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    265a:	8c 81       	ldd	r24, Y+4	; 0x04
    265c:	9d 81       	ldd	r25, Y+5	; 0x05
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <LCD_voidSendCmnd+0x2da>
    2662:	9d 83       	std	Y+5, r25	; 0x05
    2664:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2666:	8e 81       	ldd	r24, Y+6	; 0x06
    2668:	9f 81       	ldd	r25, Y+7	; 0x07
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	9f 83       	std	Y+7, r25	; 0x07
    266e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2670:	8e 81       	ldd	r24, Y+6	; 0x06
    2672:	9f 81       	ldd	r25, Y+7	; 0x07
    2674:	00 97       	sbiw	r24, 0x00	; 0
    2676:	69 f7       	brne	.-38     	; 0x2652 <LCD_voidSendCmnd+0x2ce>
    2678:	24 c0       	rjmp	.+72     	; 0x26c2 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    267a:	68 85       	ldd	r22, Y+8	; 0x08
    267c:	79 85       	ldd	r23, Y+9	; 0x09
    267e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2680:	9b 85       	ldd	r25, Y+11	; 0x0b
    2682:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	9f 83       	std	Y+7, r25	; 0x07
    268c:	8e 83       	std	Y+6, r24	; 0x06
    268e:	8e 81       	ldd	r24, Y+6	; 0x06
    2690:	9f 81       	ldd	r25, Y+7	; 0x07
    2692:	9b 83       	std	Y+3, r25	; 0x03
    2694:	8a 83       	std	Y+2, r24	; 0x02
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	9b 81       	ldd	r25, Y+3	; 0x03
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	f1 f7       	brne	.-4      	; 0x269a <LCD_voidSendCmnd+0x316>
    269e:	9b 83       	std	Y+3, r25	; 0x03
    26a0:	8a 83       	std	Y+2, r24	; 0x02
    26a2:	0f c0       	rjmp	.+30     	; 0x26c2 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26a4:	69 89       	ldd	r22, Y+17	; 0x11
    26a6:	7a 89       	ldd	r23, Y+18	; 0x12
    26a8:	8b 89       	ldd	r24, Y+19	; 0x13
    26aa:	9c 89       	ldd	r25, Y+20	; 0x14
    26ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	88 8b       	std	Y+16, r24	; 0x10
    26b6:	88 89       	ldd	r24, Y+16	; 0x10
    26b8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	8a 95       	dec	r24
    26be:	f1 f7       	brne	.-4      	; 0x26bc <LCD_voidSendCmnd+0x338>
    26c0:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    26c2:	e1 96       	adiw	r28, 0x31	; 49
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	cf 91       	pop	r28
    26d0:	df 91       	pop	r29
    26d2:	08 95       	ret

000026d4 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    26d4:	df 93       	push	r29
    26d6:	cf 93       	push	r28
    26d8:	cd b7       	in	r28, 0x3d	; 61
    26da:	de b7       	in	r29, 0x3e	; 62
    26dc:	e1 97       	sbiw	r28, 0x31	; 49
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	60 e0       	ldi	r22, 0x00	; 0
    26ee:	41 e0       	ldi	r20, 0x01	; 1
    26f0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    26fe:	83 e0       	ldi	r24, 0x03	; 3
    2700:	69 a9       	ldd	r22, Y+49	; 0x31
    2702:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	62 e0       	ldi	r22, 0x02	; 2
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    2710:	80 e0       	ldi	r24, 0x00	; 0
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	a0 e8       	ldi	r26, 0x80	; 128
    2716:	bf e3       	ldi	r27, 0x3F	; 63
    2718:	8d a7       	std	Y+45, r24	; 0x2d
    271a:	9e a7       	std	Y+46, r25	; 0x2e
    271c:	af a7       	std	Y+47, r26	; 0x2f
    271e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2720:	6d a5       	ldd	r22, Y+45	; 0x2d
    2722:	7e a5       	ldd	r23, Y+46	; 0x2e
    2724:	8f a5       	ldd	r24, Y+47	; 0x2f
    2726:	98 a9       	ldd	r25, Y+48	; 0x30
    2728:	2b ea       	ldi	r18, 0xAB	; 171
    272a:	3a ea       	ldi	r19, 0xAA	; 170
    272c:	4a e2       	ldi	r20, 0x2A	; 42
    272e:	50 e4       	ldi	r21, 0x40	; 64
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	89 a7       	std	Y+41, r24	; 0x29
    273a:	9a a7       	std	Y+42, r25	; 0x2a
    273c:	ab a7       	std	Y+43, r26	; 0x2b
    273e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2740:	69 a5       	ldd	r22, Y+41	; 0x29
    2742:	7a a5       	ldd	r23, Y+42	; 0x2a
    2744:	8b a5       	ldd	r24, Y+43	; 0x2b
    2746:	9c a5       	ldd	r25, Y+44	; 0x2c
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	1c f4       	brge	.+6      	; 0x275e <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	88 a7       	std	Y+40, r24	; 0x28
    275c:	91 c0       	rjmp	.+290    	; 0x2880 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    275e:	69 a5       	ldd	r22, Y+41	; 0x29
    2760:	7a a5       	ldd	r23, Y+42	; 0x2a
    2762:	8b a5       	ldd	r24, Y+43	; 0x2b
    2764:	9c a5       	ldd	r25, Y+44	; 0x2c
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4f e7       	ldi	r20, 0x7F	; 127
    276c:	53 e4       	ldi	r21, 0x43	; 67
    276e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2772:	18 16       	cp	r1, r24
    2774:	0c f0       	brlt	.+2      	; 0x2778 <LCD_voidSendChar+0xa4>
    2776:	7b c0       	rjmp	.+246    	; 0x286e <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2778:	6d a5       	ldd	r22, Y+45	; 0x2d
    277a:	7e a5       	ldd	r23, Y+46	; 0x2e
    277c:	8f a5       	ldd	r24, Y+47	; 0x2f
    277e:	98 a9       	ldd	r25, Y+48	; 0x30
    2780:	20 e0       	ldi	r18, 0x00	; 0
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	4a e7       	ldi	r20, 0x7A	; 122
    2786:	54 e4       	ldi	r21, 0x44	; 68
    2788:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	8c a3       	std	Y+36, r24	; 0x24
    2792:	9d a3       	std	Y+37, r25	; 0x25
    2794:	ae a3       	std	Y+38, r26	; 0x26
    2796:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	6c a1       	ldd	r22, Y+36	; 0x24
    279a:	7d a1       	ldd	r23, Y+37	; 0x25
    279c:	8e a1       	ldd	r24, Y+38	; 0x26
    279e:	9f a1       	ldd	r25, Y+39	; 0x27
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a ef       	ldi	r20, 0xFA	; 250
    27a6:	54 e4       	ldi	r21, 0x44	; 68
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	88 a3       	std	Y+32, r24	; 0x20
    27b2:	99 a3       	std	Y+33, r25	; 0x21
    27b4:	aa a3       	std	Y+34, r26	; 0x22
    27b6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    27b8:	68 a1       	ldd	r22, Y+32	; 0x20
    27ba:	79 a1       	ldd	r23, Y+33	; 0x21
    27bc:	8a a1       	ldd	r24, Y+34	; 0x22
    27be:	9b a1       	ldd	r25, Y+35	; 0x23
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <LCD_voidSendChar+0x106>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9f 8f       	std	Y+31, r25	; 0x1f
    27d6:	8e 8f       	std	Y+30, r24	; 0x1e
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    27da:	68 a1       	ldd	r22, Y+32	; 0x20
    27dc:	79 a1       	ldd	r23, Y+33	; 0x21
    27de:	8a a1       	ldd	r24, Y+34	; 0x22
    27e0:	9b a1       	ldd	r25, Y+35	; 0x23
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	6c a1       	ldd	r22, Y+36	; 0x24
    27f4:	7d a1       	ldd	r23, Y+37	; 0x25
    27f6:	8e a1       	ldd	r24, Y+38	; 0x26
    27f8:	9f a1       	ldd	r25, Y+39	; 0x27
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9f 8f       	std	Y+31, r25	; 0x1f
    2818:	8e 8f       	std	Y+30, r24	; 0x1e
    281a:	0f c0       	rjmp	.+30     	; 0x283a <LCD_voidSendChar+0x166>
    281c:	88 ec       	ldi	r24, 0xC8	; 200
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9d 8f       	std	Y+29, r25	; 0x1d
    2822:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2824:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2826:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <LCD_voidSendChar+0x154>
    282c:	9d 8f       	std	Y+29, r25	; 0x1d
    282e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2832:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9f 8f       	std	Y+31, r25	; 0x1f
    2838:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    283c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <LCD_voidSendChar+0x148>
    2842:	24 c0       	rjmp	.+72     	; 0x288c <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	68 a1       	ldd	r22, Y+32	; 0x20
    2846:	79 a1       	ldd	r23, Y+33	; 0x21
    2848:	8a a1       	ldd	r24, Y+34	; 0x22
    284a:	9b a1       	ldd	r25, Y+35	; 0x23
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9f 8f       	std	Y+31, r25	; 0x1f
    2856:	8e 8f       	std	Y+30, r24	; 0x1e
    2858:	8e 8d       	ldd	r24, Y+30	; 0x1e
    285a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    285c:	9b 8f       	std	Y+27, r25	; 0x1b
    285e:	8a 8f       	std	Y+26, r24	; 0x1a
    2860:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2862:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_voidSendChar+0x190>
    2868:	9b 8f       	std	Y+27, r25	; 0x1b
    286a:	8a 8f       	std	Y+26, r24	; 0x1a
    286c:	0f c0       	rjmp	.+30     	; 0x288c <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    286e:	69 a5       	ldd	r22, Y+41	; 0x29
    2870:	7a a5       	ldd	r23, Y+42	; 0x2a
    2872:	8b a5       	ldd	r24, Y+43	; 0x2b
    2874:	9c a5       	ldd	r25, Y+44	; 0x2c
    2876:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    287a:	dc 01       	movw	r26, r24
    287c:	cb 01       	movw	r24, r22
    287e:	88 a7       	std	Y+40, r24	; 0x28
    2880:	88 a5       	ldd	r24, Y+40	; 0x28
    2882:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2884:	89 8d       	ldd	r24, Y+25	; 0x19
    2886:	8a 95       	dec	r24
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_voidSendChar+0x1b2>
    288a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	62 e0       	ldi	r22, 0x02	; 2
    2890:	40 e0       	ldi	r20, 0x00	; 0
    2892:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e8       	ldi	r26, 0x80	; 128
    289c:	bf e3       	ldi	r27, 0x3F	; 63
    289e:	8d 8b       	std	Y+21, r24	; 0x15
    28a0:	9e 8b       	std	Y+22, r25	; 0x16
    28a2:	af 8b       	std	Y+23, r26	; 0x17
    28a4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28a6:	6d 89       	ldd	r22, Y+21	; 0x15
    28a8:	7e 89       	ldd	r23, Y+22	; 0x16
    28aa:	8f 89       	ldd	r24, Y+23	; 0x17
    28ac:	98 8d       	ldd	r25, Y+24	; 0x18
    28ae:	2b ea       	ldi	r18, 0xAB	; 171
    28b0:	3a ea       	ldi	r19, 0xAA	; 170
    28b2:	4a e2       	ldi	r20, 0x2A	; 42
    28b4:	50 e4       	ldi	r21, 0x40	; 64
    28b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	89 8b       	std	Y+17, r24	; 0x11
    28c0:	9a 8b       	std	Y+18, r25	; 0x12
    28c2:	ab 8b       	std	Y+19, r26	; 0x13
    28c4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28c6:	69 89       	ldd	r22, Y+17	; 0x11
    28c8:	7a 89       	ldd	r23, Y+18	; 0x12
    28ca:	8b 89       	ldd	r24, Y+19	; 0x13
    28cc:	9c 89       	ldd	r25, Y+20	; 0x14
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e8       	ldi	r20, 0x80	; 128
    28d4:	5f e3       	ldi	r21, 0x3F	; 63
    28d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28da:	88 23       	and	r24, r24
    28dc:	1c f4       	brge	.+6      	; 0x28e4 <LCD_voidSendChar+0x210>
		__ticks = 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	88 8b       	std	Y+16, r24	; 0x10
    28e2:	91 c0       	rjmp	.+290    	; 0x2a06 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    28e4:	69 89       	ldd	r22, Y+17	; 0x11
    28e6:	7a 89       	ldd	r23, Y+18	; 0x12
    28e8:	8b 89       	ldd	r24, Y+19	; 0x13
    28ea:	9c 89       	ldd	r25, Y+20	; 0x14
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	4f e7       	ldi	r20, 0x7F	; 127
    28f2:	53 e4       	ldi	r21, 0x43	; 67
    28f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28f8:	18 16       	cp	r1, r24
    28fa:	0c f0       	brlt	.+2      	; 0x28fe <LCD_voidSendChar+0x22a>
    28fc:	7b c0       	rjmp	.+246    	; 0x29f4 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    28fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2900:	7e 89       	ldd	r23, Y+22	; 0x16
    2902:	8f 89       	ldd	r24, Y+23	; 0x17
    2904:	98 8d       	ldd	r25, Y+24	; 0x18
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	4a e7       	ldi	r20, 0x7A	; 122
    290c:	54 e4       	ldi	r21, 0x44	; 68
    290e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2912:	dc 01       	movw	r26, r24
    2914:	cb 01       	movw	r24, r22
    2916:	8c 87       	std	Y+12, r24	; 0x0c
    2918:	9d 87       	std	Y+13, r25	; 0x0d
    291a:	ae 87       	std	Y+14, r26	; 0x0e
    291c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2920:	7d 85       	ldd	r23, Y+13	; 0x0d
    2922:	8e 85       	ldd	r24, Y+14	; 0x0e
    2924:	9f 85       	ldd	r25, Y+15	; 0x0f
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	4a ef       	ldi	r20, 0xFA	; 250
    292c:	54 e4       	ldi	r21, 0x44	; 68
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	88 87       	std	Y+8, r24	; 0x08
    2938:	99 87       	std	Y+9, r25	; 0x09
    293a:	aa 87       	std	Y+10, r26	; 0x0a
    293c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    293e:	68 85       	ldd	r22, Y+8	; 0x08
    2940:	79 85       	ldd	r23, Y+9	; 0x09
    2942:	8a 85       	ldd	r24, Y+10	; 0x0a
    2944:	9b 85       	ldd	r25, Y+11	; 0x0b
    2946:	20 e0       	ldi	r18, 0x00	; 0
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	40 e8       	ldi	r20, 0x80	; 128
    294c:	5f e3       	ldi	r21, 0x3F	; 63
    294e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2952:	88 23       	and	r24, r24
    2954:	2c f4       	brge	.+10     	; 0x2960 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2956:	81 e0       	ldi	r24, 0x01	; 1
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	9f 83       	std	Y+7, r25	; 0x07
    295c:	8e 83       	std	Y+6, r24	; 0x06
    295e:	3f c0       	rjmp	.+126    	; 0x29de <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2960:	68 85       	ldd	r22, Y+8	; 0x08
    2962:	79 85       	ldd	r23, Y+9	; 0x09
    2964:	8a 85       	ldd	r24, Y+10	; 0x0a
    2966:	9b 85       	ldd	r25, Y+11	; 0x0b
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	3f ef       	ldi	r19, 0xFF	; 255
    296c:	4f e7       	ldi	r20, 0x7F	; 127
    296e:	57 e4       	ldi	r21, 0x47	; 71
    2970:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2974:	18 16       	cp	r1, r24
    2976:	4c f5       	brge	.+82     	; 0x29ca <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2978:	6c 85       	ldd	r22, Y+12	; 0x0c
    297a:	7d 85       	ldd	r23, Y+13	; 0x0d
    297c:	8e 85       	ldd	r24, Y+14	; 0x0e
    297e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	40 e2       	ldi	r20, 0x20	; 32
    2986:	51 e4       	ldi	r21, 0x41	; 65
    2988:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	bc 01       	movw	r22, r24
    2992:	cd 01       	movw	r24, r26
    2994:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2998:	dc 01       	movw	r26, r24
    299a:	cb 01       	movw	r24, r22
    299c:	9f 83       	std	Y+7, r25	; 0x07
    299e:	8e 83       	std	Y+6, r24	; 0x06
    29a0:	0f c0       	rjmp	.+30     	; 0x29c0 <LCD_voidSendChar+0x2ec>
    29a2:	88 ec       	ldi	r24, 0xC8	; 200
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	9d 83       	std	Y+5, r25	; 0x05
    29a8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	9d 81       	ldd	r25, Y+5	; 0x05
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <LCD_voidSendChar+0x2da>
    29b2:	9d 83       	std	Y+5, r25	; 0x05
    29b4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b6:	8e 81       	ldd	r24, Y+6	; 0x06
    29b8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	9f 83       	std	Y+7, r25	; 0x07
    29be:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c0:	8e 81       	ldd	r24, Y+6	; 0x06
    29c2:	9f 81       	ldd	r25, Y+7	; 0x07
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	69 f7       	brne	.-38     	; 0x29a2 <LCD_voidSendChar+0x2ce>
    29c8:	24 c0       	rjmp	.+72     	; 0x2a12 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ca:	68 85       	ldd	r22, Y+8	; 0x08
    29cc:	79 85       	ldd	r23, Y+9	; 0x09
    29ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	9f 83       	std	Y+7, r25	; 0x07
    29dc:	8e 83       	std	Y+6, r24	; 0x06
    29de:	8e 81       	ldd	r24, Y+6	; 0x06
    29e0:	9f 81       	ldd	r25, Y+7	; 0x07
    29e2:	9b 83       	std	Y+3, r25	; 0x03
    29e4:	8a 83       	std	Y+2, r24	; 0x02
    29e6:	8a 81       	ldd	r24, Y+2	; 0x02
    29e8:	9b 81       	ldd	r25, Y+3	; 0x03
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	f1 f7       	brne	.-4      	; 0x29ea <LCD_voidSendChar+0x316>
    29ee:	9b 83       	std	Y+3, r25	; 0x03
    29f0:	8a 83       	std	Y+2, r24	; 0x02
    29f2:	0f c0       	rjmp	.+30     	; 0x2a12 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    29f4:	69 89       	ldd	r22, Y+17	; 0x11
    29f6:	7a 89       	ldd	r23, Y+18	; 0x12
    29f8:	8b 89       	ldd	r24, Y+19	; 0x13
    29fa:	9c 89       	ldd	r25, Y+20	; 0x14
    29fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a00:	dc 01       	movw	r26, r24
    2a02:	cb 01       	movw	r24, r22
    2a04:	88 8b       	std	Y+16, r24	; 0x10
    2a06:	88 89       	ldd	r24, Y+16	; 0x10
    2a08:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	8a 95       	dec	r24
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_voidSendChar+0x338>
    2a10:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    2a12:	e1 96       	adiw	r28, 0x31	; 49
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <LCD_voidWriteString+0x6>
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	9a 83       	std	Y+2, r25	; 0x02
    2a30:	89 83       	std	Y+1, r24	; 0x01
    2a32:	0a c0       	rjmp	.+20     	; 0x2a48 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    2a34:	e9 81       	ldd	r30, Y+1	; 0x01
    2a36:	fa 81       	ldd	r31, Y+2	; 0x02
    2a38:	80 81       	ld	r24, Z
    2a3a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    2a3e:	89 81       	ldd	r24, Y+1	; 0x01
    2a40:	9a 81       	ldd	r25, Y+2	; 0x02
    2a42:	01 96       	adiw	r24, 0x01	; 1
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	80 81       	ld	r24, Z
    2a4e:	88 23       	and	r24, r24
    2a50:	89 f7       	brne	.-30     	; 0x2a34 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    2a52:	0f 90       	pop	r0
    2a54:	0f 90       	pop	r0
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    2a5c:	0f 93       	push	r16
    2a5e:	1f 93       	push	r17
    2a60:	df 93       	push	r29
    2a62:	cf 93       	push	r28
    2a64:	cd b7       	in	r28, 0x3d	; 61
    2a66:	de b7       	in	r29, 0x3e	; 62
    2a68:	65 97       	sbiw	r28, 0x15	; 21
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	6a 8b       	std	Y+18, r22	; 0x12
    2a76:	7b 8b       	std	Y+19, r23	; 0x13
    2a78:	8c 8b       	std	Y+20, r24	; 0x14
    2a7a:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    2a7c:	8f ef       	ldi	r24, 0xFF	; 255
    2a7e:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    2a80:	8a 89       	ldd	r24, Y+18	; 0x12
    2a82:	9b 89       	ldd	r25, Y+19	; 0x13
    2a84:	ac 89       	ldd	r26, Y+20	; 0x14
    2a86:	bd 89       	ldd	r27, Y+21	; 0x15
    2a88:	00 97       	sbiw	r24, 0x00	; 0
    2a8a:	a1 05       	cpc	r26, r1
    2a8c:	b1 05       	cpc	r27, r1
    2a8e:	99 f5       	brne	.+102    	; 0x2af6 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    2a90:	80 e3       	ldi	r24, 0x30	; 48
    2a92:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2a96:	4e c0       	rjmp	.+156    	; 0x2b34 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2a98:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	08 2f       	mov	r16, r24
    2aa2:	11 27       	eor	r17, r17
    2aa4:	07 fd       	sbrc	r16, 7
    2aa6:	10 95       	com	r17
    2aa8:	8a 89       	ldd	r24, Y+18	; 0x12
    2aaa:	9b 89       	ldd	r25, Y+19	; 0x13
    2aac:	ac 89       	ldd	r26, Y+20	; 0x14
    2aae:	bd 89       	ldd	r27, Y+21	; 0x15
    2ab0:	2a e0       	ldi	r18, 0x0A	; 10
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e0       	ldi	r20, 0x00	; 0
    2ab6:	50 e0       	ldi	r21, 0x00	; 0
    2ab8:	bc 01       	movw	r22, r24
    2aba:	cd 01       	movw	r24, r26
    2abc:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__udivmodsi4>
    2ac0:	dc 01       	movw	r26, r24
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	ce 01       	movw	r24, r28
    2ac8:	03 96       	adiw	r24, 0x03	; 3
    2aca:	fc 01       	movw	r30, r24
    2acc:	e0 0f       	add	r30, r16
    2ace:	f1 1f       	adc	r31, r17
    2ad0:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    2ad2:	8a 89       	ldd	r24, Y+18	; 0x12
    2ad4:	9b 89       	ldd	r25, Y+19	; 0x13
    2ad6:	ac 89       	ldd	r26, Y+20	; 0x14
    2ad8:	bd 89       	ldd	r27, Y+21	; 0x15
    2ada:	2a e0       	ldi	r18, 0x0A	; 10
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e0       	ldi	r20, 0x00	; 0
    2ae0:	50 e0       	ldi	r21, 0x00	; 0
    2ae2:	bc 01       	movw	r22, r24
    2ae4:	cd 01       	movw	r24, r26
    2ae6:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__udivmodsi4>
    2aea:	da 01       	movw	r26, r20
    2aec:	c9 01       	movw	r24, r18
    2aee:	8a 8b       	std	Y+18, r24	; 0x12
    2af0:	9b 8b       	std	Y+19, r25	; 0x13
    2af2:	ac 8b       	std	Y+20, r26	; 0x14
    2af4:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    2af6:	8a 89       	ldd	r24, Y+18	; 0x12
    2af8:	9b 89       	ldd	r25, Y+19	; 0x13
    2afa:	ac 89       	ldd	r26, Y+20	; 0x14
    2afc:	bd 89       	ldd	r27, Y+21	; 0x15
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	a1 05       	cpc	r26, r1
    2b02:	b1 05       	cpc	r27, r1
    2b04:	49 f6       	brne	.-110    	; 0x2a98 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	89 83       	std	Y+1, r24	; 0x01
    2b0a:	11 c0       	rjmp	.+34     	; 0x2b2e <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    2b0c:	89 81       	ldd	r24, Y+1	; 0x01
    2b0e:	28 2f       	mov	r18, r24
    2b10:	33 27       	eor	r19, r19
    2b12:	27 fd       	sbrc	r18, 7
    2b14:	30 95       	com	r19
    2b16:	ce 01       	movw	r24, r28
    2b18:	03 96       	adiw	r24, 0x03	; 3
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	e2 0f       	add	r30, r18
    2b1e:	f3 1f       	adc	r31, r19
    2b20:	80 81       	ld	r24, Z
    2b22:	80 5d       	subi	r24, 0xD0	; 208
    2b24:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2b28:	89 81       	ldd	r24, Y+1	; 0x01
    2b2a:	81 50       	subi	r24, 0x01	; 1
    2b2c:	89 83       	std	Y+1, r24	; 0x01
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	88 23       	and	r24, r24
    2b32:	64 f7       	brge	.-40     	; 0x2b0c <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    2b34:	65 96       	adiw	r28, 0x15	; 21
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	f8 94       	cli
    2b3a:	de bf       	out	0x3e, r29	; 62
    2b3c:	0f be       	out	0x3f, r0	; 63
    2b3e:	cd bf       	out	0x3d, r28	; 61
    2b40:	cf 91       	pop	r28
    2b42:	df 91       	pop	r29
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	08 95       	ret

00002b4a <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <LCD_u8GoToXY+0x6>
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <LCD_u8GoToXY+0x8>
    2b52:	0f 92       	push	r0
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	8a 83       	std	Y+2, r24	; 0x02
    2b5a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	88 32       	cpi	r24, 0x28	; 40
    2b64:	d8 f4       	brcc	.+54     	; 0x2b9c <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	3d 83       	std	Y+5, r19	; 0x05
    2b6e:	2c 83       	std	Y+4, r18	; 0x04
    2b70:	8c 81       	ldd	r24, Y+4	; 0x04
    2b72:	9d 81       	ldd	r25, Y+5	; 0x05
    2b74:	81 30       	cpi	r24, 0x01	; 1
    2b76:	91 05       	cpc	r25, r1
    2b78:	31 f0       	breq	.+12     	; 0x2b86 <LCD_u8GoToXY+0x3c>
    2b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b7e:	22 30       	cpi	r18, 0x02	; 2
    2b80:	31 05       	cpc	r19, r1
    2b82:	31 f0       	breq	.+12     	; 0x2b90 <LCD_u8GoToXY+0x46>
    2b84:	0a c0       	rjmp	.+20     	; 0x2b9a <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	80 58       	subi	r24, 0x80	; 128
    2b8a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
    2b8e:	06 c0       	rjmp	.+12     	; 0x2b9c <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	80 54       	subi	r24, 0x40	; 64
    2b94:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
    2b98:	01 c0       	rjmp	.+2      	; 0x2b9c <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2b9a:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	0f 90       	pop	r0
    2ba8:	cf 91       	pop	r28
    2baa:	df 91       	pop	r29
    2bac:	08 95       	ret

00002bae <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    2bae:	df 93       	push	r29
    2bb0:	cf 93       	push	r28
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	2e 97       	sbiw	r28, 0x0e	; 14
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
    2bc8:	80 e0       	ldi	r24, 0x00	; 0
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	a0 ea       	ldi	r26, 0xA0	; 160
    2bce:	b1 e4       	ldi	r27, 0x41	; 65
    2bd0:	8b 87       	std	Y+11, r24	; 0x0b
    2bd2:	9c 87       	std	Y+12, r25	; 0x0c
    2bd4:	ad 87       	std	Y+13, r26	; 0x0d
    2bd6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bda:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bde:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be0:	20 e0       	ldi	r18, 0x00	; 0
    2be2:	30 e0       	ldi	r19, 0x00	; 0
    2be4:	4a ef       	ldi	r20, 0xFA	; 250
    2be6:	54 e4       	ldi	r21, 0x44	; 68
    2be8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bec:	dc 01       	movw	r26, r24
    2bee:	cb 01       	movw	r24, r22
    2bf0:	8f 83       	std	Y+7, r24	; 0x07
    2bf2:	98 87       	std	Y+8, r25	; 0x08
    2bf4:	a9 87       	std	Y+9, r26	; 0x09
    2bf6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf8:	6f 81       	ldd	r22, Y+7	; 0x07
    2bfa:	78 85       	ldd	r23, Y+8	; 0x08
    2bfc:	89 85       	ldd	r24, Y+9	; 0x09
    2bfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e8       	ldi	r20, 0x80	; 128
    2c06:	5f e3       	ldi	r21, 0x3F	; 63
    2c08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c0c:	88 23       	and	r24, r24
    2c0e:	2c f4       	brge	.+10     	; 0x2c1a <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2c10:	81 e0       	ldi	r24, 0x01	; 1
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	9e 83       	std	Y+6, r25	; 0x06
    2c16:	8d 83       	std	Y+5, r24	; 0x05
    2c18:	3f c0       	rjmp	.+126    	; 0x2c98 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2c1a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1c:	78 85       	ldd	r23, Y+8	; 0x08
    2c1e:	89 85       	ldd	r24, Y+9	; 0x09
    2c20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	3f ef       	ldi	r19, 0xFF	; 255
    2c26:	4f e7       	ldi	r20, 0x7F	; 127
    2c28:	57 e4       	ldi	r21, 0x47	; 71
    2c2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c2e:	18 16       	cp	r1, r24
    2c30:	4c f5       	brge	.+82     	; 0x2c84 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c32:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c34:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c36:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c38:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	51 e4       	ldi	r21, 0x41	; 65
    2c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	bc 01       	movw	r22, r24
    2c4c:	cd 01       	movw	r24, r26
    2c4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c52:	dc 01       	movw	r26, r24
    2c54:	cb 01       	movw	r24, r22
    2c56:	9e 83       	std	Y+6, r25	; 0x06
    2c58:	8d 83       	std	Y+5, r24	; 0x05
    2c5a:	0f c0       	rjmp	.+30     	; 0x2c7a <LCD_voidClearScreen+0xcc>
    2c5c:	88 ec       	ldi	r24, 0xC8	; 200
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9c 83       	std	Y+4, r25	; 0x04
    2c62:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c64:	8b 81       	ldd	r24, Y+3	; 0x03
    2c66:	9c 81       	ldd	r25, Y+4	; 0x04
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <LCD_voidClearScreen+0xba>
    2c6c:	9c 83       	std	Y+4, r25	; 0x04
    2c6e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c70:	8d 81       	ldd	r24, Y+5	; 0x05
    2c72:	9e 81       	ldd	r25, Y+6	; 0x06
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	9e 83       	std	Y+6, r25	; 0x06
    2c78:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	00 97       	sbiw	r24, 0x00	; 0
    2c80:	69 f7       	brne	.-38     	; 0x2c5c <LCD_voidClearScreen+0xae>
    2c82:	14 c0       	rjmp	.+40     	; 0x2cac <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c84:	6f 81       	ldd	r22, Y+7	; 0x07
    2c86:	78 85       	ldd	r23, Y+8	; 0x08
    2c88:	89 85       	ldd	r24, Y+9	; 0x09
    2c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c90:	dc 01       	movw	r26, r24
    2c92:	cb 01       	movw	r24, r22
    2c94:	9e 83       	std	Y+6, r25	; 0x06
    2c96:	8d 83       	std	Y+5, r24	; 0x05
    2c98:	8d 81       	ldd	r24, Y+5	; 0x05
    2c9a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9c:	9a 83       	std	Y+2, r25	; 0x02
    2c9e:	89 83       	std	Y+1, r24	; 0x01
    2ca0:	89 81       	ldd	r24, Y+1	; 0x01
    2ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca4:	01 97       	sbiw	r24, 0x01	; 1
    2ca6:	f1 f7       	brne	.-4      	; 0x2ca4 <LCD_voidClearScreen+0xf6>
    2ca8:	9a 83       	std	Y+2, r25	; 0x02
    2caa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2cac:	2e 96       	adiw	r28, 0x0e	; 14
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	cf 91       	pop	r28
    2cba:	df 91       	pop	r29
    2cbc:	08 95       	ret

00002cbe <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2cbe:	df 93       	push	r29
    2cc0:	cf 93       	push	r28
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	2a 97       	sbiw	r28, 0x0a	; 10
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	8c 83       	std	Y+4, r24	; 0x04
    2cd4:	7e 83       	std	Y+6, r23	; 0x06
    2cd6:	6d 83       	std	Y+5, r22	; 0x05
    2cd8:	4f 83       	std	Y+7, r20	; 0x07
    2cda:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    2ce0:	88 e0       	ldi	r24, 0x08	; 8
    2ce2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	3a 87       	std	Y+10, r19	; 0x0a
    2cec:	29 87       	std	Y+9, r18	; 0x09
    2cee:	89 85       	ldd	r24, Y+9	; 0x09
    2cf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf2:	83 30       	cpi	r24, 0x03	; 3
    2cf4:	91 05       	cpc	r25, r1
    2cf6:	09 f4       	brne	.+2      	; 0x2cfa <LCD_voidWriteSpecialChar+0x3c>
    2cf8:	8c c0       	rjmp	.+280    	; 0x2e12 <LCD_voidWriteSpecialChar+0x154>
    2cfa:	29 85       	ldd	r18, Y+9	; 0x09
    2cfc:	3a 85       	ldd	r19, Y+10	; 0x0a
    2cfe:	24 30       	cpi	r18, 0x04	; 4
    2d00:	31 05       	cpc	r19, r1
    2d02:	8c f4       	brge	.+34     	; 0x2d26 <LCD_voidWriteSpecialChar+0x68>
    2d04:	89 85       	ldd	r24, Y+9	; 0x09
    2d06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	09 f4       	brne	.+2      	; 0x2d10 <LCD_voidWriteSpecialChar+0x52>
    2d0e:	43 c0       	rjmp	.+134    	; 0x2d96 <LCD_voidWriteSpecialChar+0xd8>
    2d10:	29 85       	ldd	r18, Y+9	; 0x09
    2d12:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d14:	22 30       	cpi	r18, 0x02	; 2
    2d16:	31 05       	cpc	r19, r1
    2d18:	0c f0       	brlt	.+2      	; 0x2d1c <LCD_voidWriteSpecialChar+0x5e>
    2d1a:	5c c0       	rjmp	.+184    	; 0x2dd4 <LCD_voidWriteSpecialChar+0x116>
    2d1c:	89 85       	ldd	r24, Y+9	; 0x09
    2d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	d1 f0       	breq	.+52     	; 0x2d58 <LCD_voidWriteSpecialChar+0x9a>
    2d24:	11 c1       	rjmp	.+546    	; 0x2f48 <LCD_voidWriteSpecialChar+0x28a>
    2d26:	29 85       	ldd	r18, Y+9	; 0x09
    2d28:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d2a:	25 30       	cpi	r18, 0x05	; 5
    2d2c:	31 05       	cpc	r19, r1
    2d2e:	09 f4       	brne	.+2      	; 0x2d32 <LCD_voidWriteSpecialChar+0x74>
    2d30:	ae c0       	rjmp	.+348    	; 0x2e8e <LCD_voidWriteSpecialChar+0x1d0>
    2d32:	89 85       	ldd	r24, Y+9	; 0x09
    2d34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d36:	85 30       	cpi	r24, 0x05	; 5
    2d38:	91 05       	cpc	r25, r1
    2d3a:	0c f4       	brge	.+2      	; 0x2d3e <LCD_voidWriteSpecialChar+0x80>
    2d3c:	89 c0       	rjmp	.+274    	; 0x2e50 <LCD_voidWriteSpecialChar+0x192>
    2d3e:	29 85       	ldd	r18, Y+9	; 0x09
    2d40:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d42:	26 30       	cpi	r18, 0x06	; 6
    2d44:	31 05       	cpc	r19, r1
    2d46:	09 f4       	brne	.+2      	; 0x2d4a <LCD_voidWriteSpecialChar+0x8c>
    2d48:	c1 c0       	rjmp	.+386    	; 0x2ecc <LCD_voidWriteSpecialChar+0x20e>
    2d4a:	89 85       	ldd	r24, Y+9	; 0x09
    2d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4e:	87 30       	cpi	r24, 0x07	; 7
    2d50:	91 05       	cpc	r25, r1
    2d52:	09 f4       	brne	.+2      	; 0x2d56 <LCD_voidWriteSpecialChar+0x98>
    2d54:	da c0       	rjmp	.+436    	; 0x2f0a <LCD_voidWriteSpecialChar+0x24c>
    2d56:	f8 c0       	rjmp	.+496    	; 0x2f48 <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2d58:	80 e4       	ldi	r24, 0x40	; 64
    2d5a:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2d5e:	19 82       	std	Y+1, r1	; 0x01
    2d60:	0e c0       	rjmp	.+28     	; 0x2d7e <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	28 2f       	mov	r18, r24
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	e2 0f       	add	r30, r18
    2d70:	f3 1f       	adc	r31, r19
    2d72:	80 81       	ld	r24, Z
    2d74:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	8f 5f       	subi	r24, 0xFF	; 255
    2d7c:	89 83       	std	Y+1, r24	; 0x01
    2d7e:	99 81       	ldd	r25, Y+1	; 0x01
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	98 17       	cp	r25, r24
    2d84:	70 f3       	brcs	.-36     	; 0x2d62 <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2d86:	8f 81       	ldd	r24, Y+7	; 0x07
    2d88:	68 85       	ldd	r22, Y+8	; 0x08
    2d8a:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d90:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2d94:	da c0       	rjmp	.+436    	; 0x2f4a <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2d96:	88 e4       	ldi	r24, 0x48	; 72
    2d98:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2d9c:	19 82       	std	Y+1, r1	; 0x01
    2d9e:	0e c0       	rjmp	.+28     	; 0x2dbc <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	28 2f       	mov	r18, r24
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	8d 81       	ldd	r24, Y+5	; 0x05
    2da8:	9e 81       	ldd	r25, Y+6	; 0x06
    2daa:	fc 01       	movw	r30, r24
    2dac:	e2 0f       	add	r30, r18
    2dae:	f3 1f       	adc	r31, r19
    2db0:	80 81       	ld	r24, Z
    2db2:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    2db6:	89 81       	ldd	r24, Y+1	; 0x01
    2db8:	8f 5f       	subi	r24, 0xFF	; 255
    2dba:	89 83       	std	Y+1, r24	; 0x01
    2dbc:	99 81       	ldd	r25, Y+1	; 0x01
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	98 17       	cp	r25, r24
    2dc2:	70 f3       	brcs	.-36     	; 0x2da0 <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    2dc6:	68 85       	ldd	r22, Y+8	; 0x08
    2dc8:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dce:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2dd2:	bb c0       	rjmp	.+374    	; 0x2f4a <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    2dd4:	80 e5       	ldi	r24, 0x50	; 80
    2dd6:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2dda:	19 82       	std	Y+1, r1	; 0x01
    2ddc:	0e c0       	rjmp	.+28     	; 0x2dfa <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2dde:	89 81       	ldd	r24, Y+1	; 0x01
    2de0:	28 2f       	mov	r18, r24
    2de2:	30 e0       	ldi	r19, 0x00	; 0
    2de4:	8d 81       	ldd	r24, Y+5	; 0x05
    2de6:	9e 81       	ldd	r25, Y+6	; 0x06
    2de8:	fc 01       	movw	r30, r24
    2dea:	e2 0f       	add	r30, r18
    2dec:	f3 1f       	adc	r31, r19
    2dee:	80 81       	ld	r24, Z
    2df0:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    2df4:	89 81       	ldd	r24, Y+1	; 0x01
    2df6:	8f 5f       	subi	r24, 0xFF	; 255
    2df8:	89 83       	std	Y+1, r24	; 0x01
    2dfa:	99 81       	ldd	r25, Y+1	; 0x01
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	98 17       	cp	r25, r24
    2e00:	70 f3       	brcs	.-36     	; 0x2dde <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2e02:	8f 81       	ldd	r24, Y+7	; 0x07
    2e04:	68 85       	ldd	r22, Y+8	; 0x08
    2e06:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2e10:	9c c0       	rjmp	.+312    	; 0x2f4a <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    2e12:	88 e5       	ldi	r24, 0x58	; 88
    2e14:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2e18:	19 82       	std	Y+1, r1	; 0x01
    2e1a:	0e c0       	rjmp	.+28     	; 0x2e38 <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	8d 81       	ldd	r24, Y+5	; 0x05
    2e24:	9e 81       	ldd	r25, Y+6	; 0x06
    2e26:	fc 01       	movw	r30, r24
    2e28:	e2 0f       	add	r30, r18
    2e2a:	f3 1f       	adc	r31, r19
    2e2c:	80 81       	ld	r24, Z
    2e2e:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    2e32:	89 81       	ldd	r24, Y+1	; 0x01
    2e34:	8f 5f       	subi	r24, 0xFF	; 255
    2e36:	89 83       	std	Y+1, r24	; 0x01
    2e38:	99 81       	ldd	r25, Y+1	; 0x01
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	98 17       	cp	r25, r24
    2e3e:	70 f3       	brcs	.-36     	; 0x2e1c <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2e40:	8f 81       	ldd	r24, Y+7	; 0x07
    2e42:	68 85       	ldd	r22, Y+8	; 0x08
    2e44:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2e48:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4a:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2e4e:	7d c0       	rjmp	.+250    	; 0x2f4a <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    2e50:	80 e6       	ldi	r24, 0x60	; 96
    2e52:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2e56:	19 82       	std	Y+1, r1	; 0x01
    2e58:	0e c0       	rjmp	.+28     	; 0x2e76 <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2e5a:	89 81       	ldd	r24, Y+1	; 0x01
    2e5c:	28 2f       	mov	r18, r24
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	8d 81       	ldd	r24, Y+5	; 0x05
    2e62:	9e 81       	ldd	r25, Y+6	; 0x06
    2e64:	fc 01       	movw	r30, r24
    2e66:	e2 0f       	add	r30, r18
    2e68:	f3 1f       	adc	r31, r19
    2e6a:	80 81       	ld	r24, Z
    2e6c:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	8f 5f       	subi	r24, 0xFF	; 255
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	99 81       	ldd	r25, Y+1	; 0x01
    2e78:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7a:	98 17       	cp	r25, r24
    2e7c:	70 f3       	brcs	.-36     	; 0x2e5a <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2e7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e80:	68 85       	ldd	r22, Y+8	; 0x08
    2e82:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2e86:	8c 81       	ldd	r24, Y+4	; 0x04
    2e88:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2e8c:	5e c0       	rjmp	.+188    	; 0x2f4a <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    2e8e:	88 e6       	ldi	r24, 0x68	; 104
    2e90:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2e94:	19 82       	std	Y+1, r1	; 0x01
    2e96:	0e c0       	rjmp	.+28     	; 0x2eb4 <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	28 2f       	mov	r18, r24
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	e2 0f       	add	r30, r18
    2ea6:	f3 1f       	adc	r31, r19
    2ea8:	80 81       	ld	r24, Z
    2eaa:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    2eae:	89 81       	ldd	r24, Y+1	; 0x01
    2eb0:	8f 5f       	subi	r24, 0xFF	; 255
    2eb2:	89 83       	std	Y+1, r24	; 0x01
    2eb4:	99 81       	ldd	r25, Y+1	; 0x01
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	98 17       	cp	r25, r24
    2eba:	70 f3       	brcs	.-36     	; 0x2e98 <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ebe:	68 85       	ldd	r22, Y+8	; 0x08
    2ec0:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2ec4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2eca:	3f c0       	rjmp	.+126    	; 0x2f4a <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    2ecc:	80 e7       	ldi	r24, 0x70	; 112
    2ece:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2ed2:	19 82       	std	Y+1, r1	; 0x01
    2ed4:	0e c0       	rjmp	.+28     	; 0x2ef2 <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2ed6:	89 81       	ldd	r24, Y+1	; 0x01
    2ed8:	28 2f       	mov	r18, r24
    2eda:	30 e0       	ldi	r19, 0x00	; 0
    2edc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ede:	9e 81       	ldd	r25, Y+6	; 0x06
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	e2 0f       	add	r30, r18
    2ee4:	f3 1f       	adc	r31, r19
    2ee6:	80 81       	ld	r24, Z
    2ee8:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	8f 5f       	subi	r24, 0xFF	; 255
    2ef0:	89 83       	std	Y+1, r24	; 0x01
    2ef2:	99 81       	ldd	r25, Y+1	; 0x01
    2ef4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ef6:	98 17       	cp	r25, r24
    2ef8:	70 f3       	brcs	.-36     	; 0x2ed6 <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2efa:	8f 81       	ldd	r24, Y+7	; 0x07
    2efc:	68 85       	ldd	r22, Y+8	; 0x08
    2efe:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f02:	8c 81       	ldd	r24, Y+4	; 0x04
    2f04:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2f08:	20 c0       	rjmp	.+64     	; 0x2f4a <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    2f0a:	88 e7       	ldi	r24, 0x78	; 120
    2f0c:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2f10:	19 82       	std	Y+1, r1	; 0x01
    2f12:	0e c0       	rjmp	.+28     	; 0x2f30 <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2f14:	89 81       	ldd	r24, Y+1	; 0x01
    2f16:	28 2f       	mov	r18, r24
    2f18:	30 e0       	ldi	r19, 0x00	; 0
    2f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1e:	fc 01       	movw	r30, r24
    2f20:	e2 0f       	add	r30, r18
    2f22:	f3 1f       	adc	r31, r19
    2f24:	80 81       	ld	r24, Z
    2f26:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	8f 5f       	subi	r24, 0xFF	; 255
    2f2e:	89 83       	std	Y+1, r24	; 0x01
    2f30:	99 81       	ldd	r25, Y+1	; 0x01
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	98 17       	cp	r25, r24
    2f36:	70 f3       	brcs	.-36     	; 0x2f14 <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2f38:	8f 81       	ldd	r24, Y+7	; 0x07
    2f3a:	68 85       	ldd	r22, Y+8	; 0x08
    2f3c:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f40:	8c 81       	ldd	r24, Y+4	; 0x04
    2f42:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <LCD_voidSendChar>
    2f46:	01 c0       	rjmp	.+2      	; 0x2f4a <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    2f48:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    2f4a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2f4c:	2a 96       	adiw	r28, 0x0a	; 10
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62
    2f66:	e1 97       	sbiw	r28, 0x31	; 49
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	de bf       	out	0x3e, r29	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	cd bf       	out	0x3d, r28	; 61
    2f72:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	40 e0       	ldi	r20, 0x00	; 0
    2f7a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	61 e0       	ldi	r22, 0x01	; 1
    2f82:	40 e0       	ldi	r20, 0x00	; 0
    2f84:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    2f88:	89 a9       	ldd	r24, Y+49	; 0x31
    2f8a:	98 2f       	mov	r25, r24
    2f8c:	92 95       	swap	r25
    2f8e:	90 7f       	andi	r25, 0xF0	; 240
    2f90:	83 e0       	ldi	r24, 0x03	; 3
    2f92:	69 2f       	mov	r22, r25
    2f94:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2f98:	80 e0       	ldi	r24, 0x00	; 0
    2f9a:	62 e0       	ldi	r22, 0x02	; 2
    2f9c:	41 e0       	ldi	r20, 0x01	; 1
    2f9e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e8       	ldi	r26, 0x80	; 128
    2fa8:	bf e3       	ldi	r27, 0x3F	; 63
    2faa:	8d a7       	std	Y+45, r24	; 0x2d
    2fac:	9e a7       	std	Y+46, r25	; 0x2e
    2fae:	af a7       	std	Y+47, r26	; 0x2f
    2fb0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fb2:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fb4:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fb8:	98 a9       	ldd	r25, Y+48	; 0x30
    2fba:	2b ea       	ldi	r18, 0xAB	; 171
    2fbc:	3a ea       	ldi	r19, 0xAA	; 170
    2fbe:	4a e2       	ldi	r20, 0x2A	; 42
    2fc0:	50 e4       	ldi	r21, 0x40	; 64
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	89 a7       	std	Y+41, r24	; 0x29
    2fcc:	9a a7       	std	Y+42, r25	; 0x2a
    2fce:	ab a7       	std	Y+43, r26	; 0x2b
    2fd0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2fd2:	69 a5       	ldd	r22, Y+41	; 0x29
    2fd4:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	1c f4       	brge	.+6      	; 0x2ff0 <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	88 a7       	std	Y+40, r24	; 0x28
    2fee:	91 c0       	rjmp	.+290    	; 0x3112 <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    2ff0:	69 a5       	ldd	r22, Y+41	; 0x29
    2ff2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2ff4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ff6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	53 e4       	ldi	r21, 0x43	; 67
    3000:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	0c f0       	brlt	.+2      	; 0x300a <LCD_voidSendHalfCmnd+0xac>
    3008:	7b c0       	rjmp	.+246    	; 0x3100 <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    300a:	6d a5       	ldd	r22, Y+45	; 0x2d
    300c:	7e a5       	ldd	r23, Y+46	; 0x2e
    300e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3010:	98 a9       	ldd	r25, Y+48	; 0x30
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	4a e7       	ldi	r20, 0x7A	; 122
    3018:	54 e4       	ldi	r21, 0x44	; 68
    301a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	8c a3       	std	Y+36, r24	; 0x24
    3024:	9d a3       	std	Y+37, r25	; 0x25
    3026:	ae a3       	std	Y+38, r26	; 0x26
    3028:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    302a:	6c a1       	ldd	r22, Y+36	; 0x24
    302c:	7d a1       	ldd	r23, Y+37	; 0x25
    302e:	8e a1       	ldd	r24, Y+38	; 0x26
    3030:	9f a1       	ldd	r25, Y+39	; 0x27
    3032:	20 e0       	ldi	r18, 0x00	; 0
    3034:	30 e0       	ldi	r19, 0x00	; 0
    3036:	4a ef       	ldi	r20, 0xFA	; 250
    3038:	54 e4       	ldi	r21, 0x44	; 68
    303a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	88 a3       	std	Y+32, r24	; 0x20
    3044:	99 a3       	std	Y+33, r25	; 0x21
    3046:	aa a3       	std	Y+34, r26	; 0x22
    3048:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    304a:	68 a1       	ldd	r22, Y+32	; 0x20
    304c:	79 a1       	ldd	r23, Y+33	; 0x21
    304e:	8a a1       	ldd	r24, Y+34	; 0x22
    3050:	9b a1       	ldd	r25, Y+35	; 0x23
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	30 e0       	ldi	r19, 0x00	; 0
    3056:	40 e8       	ldi	r20, 0x80	; 128
    3058:	5f e3       	ldi	r21, 0x3F	; 63
    305a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    305e:	88 23       	and	r24, r24
    3060:	2c f4       	brge	.+10     	; 0x306c <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	9f 8f       	std	Y+31, r25	; 0x1f
    3068:	8e 8f       	std	Y+30, r24	; 0x1e
    306a:	3f c0       	rjmp	.+126    	; 0x30ea <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    306c:	68 a1       	ldd	r22, Y+32	; 0x20
    306e:	79 a1       	ldd	r23, Y+33	; 0x21
    3070:	8a a1       	ldd	r24, Y+34	; 0x22
    3072:	9b a1       	ldd	r25, Y+35	; 0x23
    3074:	20 e0       	ldi	r18, 0x00	; 0
    3076:	3f ef       	ldi	r19, 0xFF	; 255
    3078:	4f e7       	ldi	r20, 0x7F	; 127
    307a:	57 e4       	ldi	r21, 0x47	; 71
    307c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3080:	18 16       	cp	r1, r24
    3082:	4c f5       	brge	.+82     	; 0x30d6 <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3084:	6c a1       	ldd	r22, Y+36	; 0x24
    3086:	7d a1       	ldd	r23, Y+37	; 0x25
    3088:	8e a1       	ldd	r24, Y+38	; 0x26
    308a:	9f a1       	ldd	r25, Y+39	; 0x27
    308c:	20 e0       	ldi	r18, 0x00	; 0
    308e:	30 e0       	ldi	r19, 0x00	; 0
    3090:	40 e2       	ldi	r20, 0x20	; 32
    3092:	51 e4       	ldi	r21, 0x41	; 65
    3094:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	bc 01       	movw	r22, r24
    309e:	cd 01       	movw	r24, r26
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9f 8f       	std	Y+31, r25	; 0x1f
    30aa:	8e 8f       	std	Y+30, r24	; 0x1e
    30ac:	0f c0       	rjmp	.+30     	; 0x30cc <LCD_voidSendHalfCmnd+0x16e>
    30ae:	88 ec       	ldi	r24, 0xC8	; 200
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	9d 8f       	std	Y+29, r25	; 0x1d
    30b4:	8c 8f       	std	Y+28, r24	; 0x1c
    30b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30ba:	01 97       	sbiw	r24, 0x01	; 1
    30bc:	f1 f7       	brne	.-4      	; 0x30ba <LCD_voidSendHalfCmnd+0x15c>
    30be:	9d 8f       	std	Y+29, r25	; 0x1d
    30c0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	9f 8f       	std	Y+31, r25	; 0x1f
    30ca:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30ce:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30d0:	00 97       	sbiw	r24, 0x00	; 0
    30d2:	69 f7       	brne	.-38     	; 0x30ae <LCD_voidSendHalfCmnd+0x150>
    30d4:	24 c0       	rjmp	.+72     	; 0x311e <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30d6:	68 a1       	ldd	r22, Y+32	; 0x20
    30d8:	79 a1       	ldd	r23, Y+33	; 0x21
    30da:	8a a1       	ldd	r24, Y+34	; 0x22
    30dc:	9b a1       	ldd	r25, Y+35	; 0x23
    30de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e2:	dc 01       	movw	r26, r24
    30e4:	cb 01       	movw	r24, r22
    30e6:	9f 8f       	std	Y+31, r25	; 0x1f
    30e8:	8e 8f       	std	Y+30, r24	; 0x1e
    30ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30ee:	9b 8f       	std	Y+27, r25	; 0x1b
    30f0:	8a 8f       	std	Y+26, r24	; 0x1a
    30f2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30f4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	f1 f7       	brne	.-4      	; 0x30f6 <LCD_voidSendHalfCmnd+0x198>
    30fa:	9b 8f       	std	Y+27, r25	; 0x1b
    30fc:	8a 8f       	std	Y+26, r24	; 0x1a
    30fe:	0f c0       	rjmp	.+30     	; 0x311e <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3100:	69 a5       	ldd	r22, Y+41	; 0x29
    3102:	7a a5       	ldd	r23, Y+42	; 0x2a
    3104:	8b a5       	ldd	r24, Y+43	; 0x2b
    3106:	9c a5       	ldd	r25, Y+44	; 0x2c
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	88 a7       	std	Y+40, r24	; 0x28
    3112:	88 a5       	ldd	r24, Y+40	; 0x28
    3114:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3116:	89 8d       	ldd	r24, Y+25	; 0x19
    3118:	8a 95       	dec	r24
    311a:	f1 f7       	brne	.-4      	; 0x3118 <LCD_voidSendHalfCmnd+0x1ba>
    311c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	62 e0       	ldi	r22, 0x02	; 2
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	a0 e8       	ldi	r26, 0x80	; 128
    312e:	bf e3       	ldi	r27, 0x3F	; 63
    3130:	8d 8b       	std	Y+21, r24	; 0x15
    3132:	9e 8b       	std	Y+22, r25	; 0x16
    3134:	af 8b       	std	Y+23, r26	; 0x17
    3136:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3138:	6d 89       	ldd	r22, Y+21	; 0x15
    313a:	7e 89       	ldd	r23, Y+22	; 0x16
    313c:	8f 89       	ldd	r24, Y+23	; 0x17
    313e:	98 8d       	ldd	r25, Y+24	; 0x18
    3140:	2b ea       	ldi	r18, 0xAB	; 171
    3142:	3a ea       	ldi	r19, 0xAA	; 170
    3144:	4a e2       	ldi	r20, 0x2A	; 42
    3146:	50 e4       	ldi	r21, 0x40	; 64
    3148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	89 8b       	std	Y+17, r24	; 0x11
    3152:	9a 8b       	std	Y+18, r25	; 0x12
    3154:	ab 8b       	std	Y+19, r26	; 0x13
    3156:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3158:	69 89       	ldd	r22, Y+17	; 0x11
    315a:	7a 89       	ldd	r23, Y+18	; 0x12
    315c:	8b 89       	ldd	r24, Y+19	; 0x13
    315e:	9c 89       	ldd	r25, Y+20	; 0x14
    3160:	20 e0       	ldi	r18, 0x00	; 0
    3162:	30 e0       	ldi	r19, 0x00	; 0
    3164:	40 e8       	ldi	r20, 0x80	; 128
    3166:	5f e3       	ldi	r21, 0x3F	; 63
    3168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    316c:	88 23       	and	r24, r24
    316e:	1c f4       	brge	.+6      	; 0x3176 <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	88 8b       	std	Y+16, r24	; 0x10
    3174:	91 c0       	rjmp	.+290    	; 0x3298 <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    3176:	69 89       	ldd	r22, Y+17	; 0x11
    3178:	7a 89       	ldd	r23, Y+18	; 0x12
    317a:	8b 89       	ldd	r24, Y+19	; 0x13
    317c:	9c 89       	ldd	r25, Y+20	; 0x14
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	30 e0       	ldi	r19, 0x00	; 0
    3182:	4f e7       	ldi	r20, 0x7F	; 127
    3184:	53 e4       	ldi	r21, 0x43	; 67
    3186:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    318a:	18 16       	cp	r1, r24
    318c:	0c f0       	brlt	.+2      	; 0x3190 <LCD_voidSendHalfCmnd+0x232>
    318e:	7b c0       	rjmp	.+246    	; 0x3286 <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    3190:	6d 89       	ldd	r22, Y+21	; 0x15
    3192:	7e 89       	ldd	r23, Y+22	; 0x16
    3194:	8f 89       	ldd	r24, Y+23	; 0x17
    3196:	98 8d       	ldd	r25, Y+24	; 0x18
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	4a e7       	ldi	r20, 0x7A	; 122
    319e:	54 e4       	ldi	r21, 0x44	; 68
    31a0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	8c 87       	std	Y+12, r24	; 0x0c
    31aa:	9d 87       	std	Y+13, r25	; 0x0d
    31ac:	ae 87       	std	Y+14, r26	; 0x0e
    31ae:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31b0:	6c 85       	ldd	r22, Y+12	; 0x0c
    31b2:	7d 85       	ldd	r23, Y+13	; 0x0d
    31b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    31b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    31b8:	20 e0       	ldi	r18, 0x00	; 0
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	4a ef       	ldi	r20, 0xFA	; 250
    31be:	54 e4       	ldi	r21, 0x44	; 68
    31c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c4:	dc 01       	movw	r26, r24
    31c6:	cb 01       	movw	r24, r22
    31c8:	88 87       	std	Y+8, r24	; 0x08
    31ca:	99 87       	std	Y+9, r25	; 0x09
    31cc:	aa 87       	std	Y+10, r26	; 0x0a
    31ce:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31d0:	68 85       	ldd	r22, Y+8	; 0x08
    31d2:	79 85       	ldd	r23, Y+9	; 0x09
    31d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    31d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    31d8:	20 e0       	ldi	r18, 0x00	; 0
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	40 e8       	ldi	r20, 0x80	; 128
    31de:	5f e3       	ldi	r21, 0x3F	; 63
    31e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31e4:	88 23       	and	r24, r24
    31e6:	2c f4       	brge	.+10     	; 0x31f2 <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	9f 83       	std	Y+7, r25	; 0x07
    31ee:	8e 83       	std	Y+6, r24	; 0x06
    31f0:	3f c0       	rjmp	.+126    	; 0x3270 <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    31f2:	68 85       	ldd	r22, Y+8	; 0x08
    31f4:	79 85       	ldd	r23, Y+9	; 0x09
    31f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31fa:	20 e0       	ldi	r18, 0x00	; 0
    31fc:	3f ef       	ldi	r19, 0xFF	; 255
    31fe:	4f e7       	ldi	r20, 0x7F	; 127
    3200:	57 e4       	ldi	r21, 0x47	; 71
    3202:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3206:	18 16       	cp	r1, r24
    3208:	4c f5       	brge	.+82     	; 0x325c <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    320a:	6c 85       	ldd	r22, Y+12	; 0x0c
    320c:	7d 85       	ldd	r23, Y+13	; 0x0d
    320e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3210:	9f 85       	ldd	r25, Y+15	; 0x0f
    3212:	20 e0       	ldi	r18, 0x00	; 0
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	40 e2       	ldi	r20, 0x20	; 32
    3218:	51 e4       	ldi	r21, 0x41	; 65
    321a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321e:	dc 01       	movw	r26, r24
    3220:	cb 01       	movw	r24, r22
    3222:	bc 01       	movw	r22, r24
    3224:	cd 01       	movw	r24, r26
    3226:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	9f 83       	std	Y+7, r25	; 0x07
    3230:	8e 83       	std	Y+6, r24	; 0x06
    3232:	0f c0       	rjmp	.+30     	; 0x3252 <LCD_voidSendHalfCmnd+0x2f4>
    3234:	88 ec       	ldi	r24, 0xC8	; 200
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	9d 83       	std	Y+5, r25	; 0x05
    323a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    323c:	8c 81       	ldd	r24, Y+4	; 0x04
    323e:	9d 81       	ldd	r25, Y+5	; 0x05
    3240:	01 97       	sbiw	r24, 0x01	; 1
    3242:	f1 f7       	brne	.-4      	; 0x3240 <LCD_voidSendHalfCmnd+0x2e2>
    3244:	9d 83       	std	Y+5, r25	; 0x05
    3246:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3248:	8e 81       	ldd	r24, Y+6	; 0x06
    324a:	9f 81       	ldd	r25, Y+7	; 0x07
    324c:	01 97       	sbiw	r24, 0x01	; 1
    324e:	9f 83       	std	Y+7, r25	; 0x07
    3250:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3252:	8e 81       	ldd	r24, Y+6	; 0x06
    3254:	9f 81       	ldd	r25, Y+7	; 0x07
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	69 f7       	brne	.-38     	; 0x3234 <LCD_voidSendHalfCmnd+0x2d6>
    325a:	24 c0       	rjmp	.+72     	; 0x32a4 <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    325c:	68 85       	ldd	r22, Y+8	; 0x08
    325e:	79 85       	ldd	r23, Y+9	; 0x09
    3260:	8a 85       	ldd	r24, Y+10	; 0x0a
    3262:	9b 85       	ldd	r25, Y+11	; 0x0b
    3264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3268:	dc 01       	movw	r26, r24
    326a:	cb 01       	movw	r24, r22
    326c:	9f 83       	std	Y+7, r25	; 0x07
    326e:	8e 83       	std	Y+6, r24	; 0x06
    3270:	8e 81       	ldd	r24, Y+6	; 0x06
    3272:	9f 81       	ldd	r25, Y+7	; 0x07
    3274:	9b 83       	std	Y+3, r25	; 0x03
    3276:	8a 83       	std	Y+2, r24	; 0x02
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	9b 81       	ldd	r25, Y+3	; 0x03
    327c:	01 97       	sbiw	r24, 0x01	; 1
    327e:	f1 f7       	brne	.-4      	; 0x327c <LCD_voidSendHalfCmnd+0x31e>
    3280:	9b 83       	std	Y+3, r25	; 0x03
    3282:	8a 83       	std	Y+2, r24	; 0x02
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3286:	69 89       	ldd	r22, Y+17	; 0x11
    3288:	7a 89       	ldd	r23, Y+18	; 0x12
    328a:	8b 89       	ldd	r24, Y+19	; 0x13
    328c:	9c 89       	ldd	r25, Y+20	; 0x14
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	88 8b       	std	Y+16, r24	; 0x10
    3298:	88 89       	ldd	r24, Y+16	; 0x10
    329a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	8a 95       	dec	r24
    32a0:	f1 f7       	brne	.-4      	; 0x329e <LCD_voidSendHalfCmnd+0x340>
    32a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
    32a4:	e1 96       	adiw	r28, 0x31	; 49
    32a6:	0f b6       	in	r0, 0x3f	; 63
    32a8:	f8 94       	cli
    32aa:	de bf       	out	0x3e, r29	; 62
    32ac:	0f be       	out	0x3f, r0	; 63
    32ae:	cd bf       	out	0x3d, r28	; 61
    32b0:	cf 91       	pop	r28
    32b2:	df 91       	pop	r29
    32b4:	08 95       	ret

000032b6 <TIMERS_voidTimer0Init>:
static void (*TIMERS_pfTimer1CTC_COMPA)(void) = NULL;
static void (*TIMERS_pfTimer1CAPT)(void) = NULL;
static void (*TIMERS_pfTimer1CTC_COMPB)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
    32b6:	df 93       	push	r29
    32b8:	cf 93       	push	r28
    32ba:	cd b7       	in	r28, 0x3d	; 61
    32bc:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Phase Correct PWM Mode */
	SET_BIT(TIMERS_u8_TCCR0_REG,6);
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_PWM_FAST_PWM_MODE
	/* Select Mode => Fast PWM Mode */
	SET_BIT(TIMERS_u8_TCCR0_REG,6);
    32be:	a3 e5       	ldi	r26, 0x53	; 83
    32c0:	b0 e0       	ldi	r27, 0x00	; 0
    32c2:	e3 e5       	ldi	r30, 0x53	; 83
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	80 64       	ori	r24, 0x40	; 64
    32ca:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    32cc:	a3 e5       	ldi	r26, 0x53	; 83
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	e3 e5       	ldi	r30, 0x53	; 83
    32d2:	f0 e0       	ldi	r31, 0x00	; 0
    32d4:	80 81       	ld	r24, Z
    32d6:	88 60       	ori	r24, 0x08	; 8
    32d8:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMERS_u8_TIMER0_COMPARE_MATCH_OCR0;
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_PWM_FAST_PWM_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMERS_u8_TIMER0_COMPARE_MATCH_OCR0;
    32da:	ec e5       	ldi	r30, 0x5C	; 92
    32dc:	f0 e0       	ldi	r31, 0x00	; 0
    32de:	80 e4       	ldi	r24, 0x40	; 64
    32e0:	80 83       	st	Z, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
#elif TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_SET
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
	SET_BIT(TIMERS_u8_TCCR0_REG,4);
#elif TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_NON_INVERTING
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
    32e2:	a3 e5       	ldi	r26, 0x53	; 83
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e3 e5       	ldi	r30, 0x53	; 83
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	80 62       	ori	r24, 0x20	; 32
    32ee:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
    32f0:	a3 e5       	ldi	r26, 0x53	; 83
    32f2:	b0 e0       	ldi	r27, 0x00	; 0
    32f4:	e3 e5       	ldi	r30, 0x53	; 83
    32f6:	f0 e0       	ldi	r31, 0x00	; 0
    32f8:	80 81       	ld	r24, Z
    32fa:	8f 7e       	andi	r24, 0xEF	; 239
    32fc:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#elif TIMERS_u8_TIMER0_CLOCK_SOURCE == TIMERS_u8_TIMER0_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    32fe:	a3 e5       	ldi	r26, 0x53	; 83
    3300:	b0 e0       	ldi	r27, 0x00	; 0
    3302:	e3 e5       	ldi	r30, 0x53	; 83
    3304:	f0 e0       	ldi	r31, 0x00	; 0
    3306:	80 81       	ld	r24, Z
    3308:	8b 7f       	andi	r24, 0xFB	; 251
    330a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
    330c:	a3 e5       	ldi	r26, 0x53	; 83
    330e:	b0 e0       	ldi	r27, 0x00	; 0
    3310:	e3 e5       	ldi	r30, 0x53	; 83
    3312:	f0 e0       	ldi	r31, 0x00	; 0
    3314:	80 81       	ld	r24, Z
    3316:	82 60       	ori	r24, 0x02	; 2
    3318:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
    331a:	a3 e5       	ldi	r26, 0x53	; 83
    331c:	b0 e0       	ldi	r27, 0x00	; 0
    331e:	e3 e5       	ldi	r30, 0x53	; 83
    3320:	f0 e0       	ldi	r31, 0x00	; 0
    3322:	80 81       	ld	r24, Z
    3324:	8e 7f       	andi	r24, 0xFE	; 254
    3326:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,2);
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#endif

}
    3328:	cf 91       	pop	r28
    332a:	df 91       	pop	r29
    332c:	08 95       	ret

0000332e <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void)
{
    332e:	df 93       	push	r29
    3330:	cf 93       	push	r28
    3332:	cd b7       	in	r28, 0x3d	; 61
    3334:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode  */
#if TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_NORMAL_MODE
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    3336:	af e4       	ldi	r26, 0x4F	; 79
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	ef e4       	ldi	r30, 0x4F	; 79
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	8e 7f       	andi	r24, 0xFE	; 254
    3342:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,1);
    3344:	af e4       	ldi	r26, 0x4F	; 79
    3346:	b0 e0       	ldi	r27, 0x00	; 0
    3348:	ef e4       	ldi	r30, 0x4F	; 79
    334a:	f0 e0       	ldi	r31, 0x00	; 0
    334c:	80 81       	ld	r24, Z
    334e:	8d 7f       	andi	r24, 0xFD	; 253
    3350:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,3);
    3352:	ae e4       	ldi	r26, 0x4E	; 78
    3354:	b0 e0       	ldi	r27, 0x00	; 0
    3356:	ee e4       	ldi	r30, 0x4E	; 78
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	80 81       	ld	r24, Z
    335c:	87 7f       	andi	r24, 0xF7	; 247
    335e:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,4);
    3360:	ae e4       	ldi	r26, 0x4E	; 78
    3362:	b0 e0       	ldi	r27, 0x00	; 0
    3364:	ee e4       	ldi	r30, 0x4E	; 78
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	80 81       	ld	r24, Z
    336a:	8f 7e       	andi	r24, 0xEF	; 239
    336c:	8c 93       	st	X, r24
#endif

	/* Select INT  */
#if TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_NORMAL_MODE
	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,2);
    336e:	a9 e5       	ldi	r26, 0x59	; 89
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	e9 e5       	ldi	r30, 0x59	; 89
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	84 60       	ori	r24, 0x04	; 4
    337a:	8c 93       	st	X, r24
#endif


#if TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_NORMAL_MODE
	/* Set Preload Value */
	TIMERS_u16_TCNT1_REG = TIMERS_u16_TIMER1_PRELOAD_VALUE;
    337c:	ec e4       	ldi	r30, 0x4C	; 76
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	11 82       	std	Z+1, r1	; 0x01
    3382:	10 82       	st	Z, r1
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_CHANNEL == TIMERS_u8_TIMER1_CHANNEL_A
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
    3384:	ea e4       	ldi	r30, 0x4A	; 74
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	87 ee       	ldi	r24, 0xE7	; 231
    338a:	93 e0       	ldi	r25, 0x03	; 3
    338c:	91 83       	std	Z+1, r25	; 0x01
    338e:	80 83       	st	Z, r24
#if TIMERS_u8_TIMER1_ICU_EDGE == TIMERS_u8_Timer1_DISCONNECTED

#elif TIMERS_u8_TIMER1_ICU_EDGE == TIMERS_u8_Timer1_FALLING_EDGE
	CLR_BIT(TIMERS_u8_TCCR1B_REG,6);
#elif TIMERS_u8_TIMER1_ICU_EDGE == TIMERS_u8_Timer1_RAISING_EDGE
	SET_BIT(TIMERS_u8_TCCR1B_REG,6);
    3390:	ae e4       	ldi	r26, 0x4E	; 78
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	ee e4       	ldi	r30, 0x4E	; 78
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	80 64       	ori	r24, 0x40	; 64
    339c:	8c 93       	st	X, r24
#endif
	/* Compare Match Output Mode unit A */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    339e:	af e4       	ldi	r26, 0x4F	; 79
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	ef e4       	ldi	r30, 0x4F	; 79
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	8f 7b       	andi	r24, 0xBF	; 191
    33aa:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,7);
    33ac:	af e4       	ldi	r26, 0x4F	; 79
    33ae:	b0 e0       	ldi	r27, 0x00	; 0
    33b0:	ef e4       	ldi	r30, 0x4F	; 79
    33b2:	f0 e0       	ldi	r31, 0x00	; 0
    33b4:	80 81       	ld	r24, Z
    33b6:	8f 77       	andi	r24, 0x7F	; 127
    33b8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#endif
	/* Compare Match Output Mode unit B */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_B == TIMERS_u8_TIMER1_OC1B_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,4);
    33ba:	af e4       	ldi	r26, 0x4F	; 79
    33bc:	b0 e0       	ldi	r27, 0x00	; 0
    33be:	ef e4       	ldi	r30, 0x4F	; 79
    33c0:	f0 e0       	ldi	r31, 0x00	; 0
    33c2:	80 81       	ld	r24, Z
    33c4:	8f 7e       	andi	r24, 0xEF	; 239
    33c6:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,5);
    33c8:	af e4       	ldi	r26, 0x4F	; 79
    33ca:	b0 e0       	ldi	r27, 0x00	; 0
    33cc:	ef e4       	ldi	r30, 0x4F	; 79
    33ce:	f0 e0       	ldi	r31, 0x00	; 0
    33d0:	80 81       	ld	r24, Z
    33d2:	8f 7d       	andi	r24, 0xDF	; 223
    33d4:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
	CLR_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    33d6:	ae e4       	ldi	r26, 0x4E	; 78
    33d8:	b0 e0       	ldi	r27, 0x00	; 0
    33da:	ee e4       	ldi	r30, 0x4E	; 78
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	8b 7f       	andi	r24, 0xFB	; 251
    33e2:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    33e4:	ae e4       	ldi	r26, 0x4E	; 78
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	ee e4       	ldi	r30, 0x4E	; 78
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	80 81       	ld	r24, Z
    33ee:	82 60       	ori	r24, 0x02	; 2
    33f0:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    33f2:	ae e4       	ldi	r26, 0x4E	; 78
    33f4:	b0 e0       	ldi	r27, 0x00	; 0
    33f6:	ee e4       	ldi	r30, 0x4E	; 78
    33f8:	f0 e0       	ldi	r31, 0x00	; 0
    33fa:	80 81       	ld	r24, Z
    33fc:	8e 7f       	andi	r24, 0xFE	; 254
    33fe:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_T1_PIN_RISING_EDGE
	SET_BIT(TIMERS_u8_TCCR1B_REG,2);
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#endif
}
    3400:	cf 91       	pop	r28
    3402:	df 91       	pop	r29
    3404:	08 95       	ret

00003406 <TIMERS_voidTimer1SetCompareMatchValueUnitA>:
void TIMERS_voidTimer1SetCompareMatchValueUnitA(u16 Copy_u16OCR1AValue)
{
    3406:	df 93       	push	r29
    3408:	cf 93       	push	r28
    340a:	00 d0       	rcall	.+0      	; 0x340c <TIMERS_voidTimer1SetCompareMatchValueUnitA+0x6>
    340c:	cd b7       	in	r28, 0x3d	; 61
    340e:	de b7       	in	r29, 0x3e	; 62
    3410:	9a 83       	std	Y+2, r25	; 0x02
    3412:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u16OCR1AValue;
    3414:	ea e4       	ldi	r30, 0x4A	; 74
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	9a 81       	ldd	r25, Y+2	; 0x02
    341c:	91 83       	std	Z+1, r25	; 0x01
    341e:	80 83       	st	Z, r24
}
    3420:	0f 90       	pop	r0
    3422:	0f 90       	pop	r0
    3424:	cf 91       	pop	r28
    3426:	df 91       	pop	r29
    3428:	08 95       	ret

0000342a <TIMERS_voidTimer1SetCompareMatchValueUnitB>:

void TIMERS_voidTimer1SetCompareMatchValueUnitB(u16 Copy_u16OCR1BValue)
{
    342a:	df 93       	push	r29
    342c:	cf 93       	push	r28
    342e:	00 d0       	rcall	.+0      	; 0x3430 <TIMERS_voidTimer1SetCompareMatchValueUnitB+0x6>
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62
    3434:	9a 83       	std	Y+2, r25	; 0x02
    3436:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1B_REG = Copy_u16OCR1BValue;
    3438:	e8 e4       	ldi	r30, 0x48	; 72
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	89 81       	ldd	r24, Y+1	; 0x01
    343e:	9a 81       	ldd	r25, Y+2	; 0x02
    3440:	91 83       	std	Z+1, r25	; 0x01
    3442:	80 83       	st	Z, r24
}
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <TIMERS_u8GetTCNT0Value>:
u8 TIMERS_u8GetTCNT0Value(u8 * Copy_pu8Value)
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	00 d0       	rcall	.+0      	; 0x3454 <TIMERS_u8GetTCNT0Value+0x6>
    3454:	0f 92       	push	r0
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	9b 83       	std	Y+3, r25	; 0x03
    345c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL)
    3462:	8a 81       	ldd	r24, Y+2	; 0x02
    3464:	9b 81       	ldd	r25, Y+3	; 0x03
    3466:	00 97       	sbiw	r24, 0x00	; 0
    3468:	39 f0       	breq	.+14     	; 0x3478 <TIMERS_u8GetTCNT0Value+0x2a>
	{
		*Copy_pu8Value = TIMERS_u8_TCNT0_REG;
    346a:	e2 e5       	ldi	r30, 0x52	; 82
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	ea 81       	ldd	r30, Y+2	; 0x02
    3472:	fb 81       	ldd	r31, Y+3	; 0x03
    3474:	80 83       	st	Z, r24
    3476:	01 c0       	rjmp	.+2      	; 0x347a <TIMERS_u8GetTCNT0Value+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3478:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    347a:	89 81       	ldd	r24, Y+1	; 0x01
}
    347c:	0f 90       	pop	r0
    347e:	0f 90       	pop	r0
    3480:	0f 90       	pop	r0
    3482:	cf 91       	pop	r28
    3484:	df 91       	pop	r29
    3486:	08 95       	ret

00003488 <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
    3488:	df 93       	push	r29
    348a:	cf 93       	push	r28
    348c:	0f 92       	push	r0
    348e:	cd b7       	in	r28, 0x3d	; 61
    3490:	de b7       	in	r29, 0x3e	; 62
    3492:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    3494:	ec e5       	ldi	r30, 0x5C	; 92
    3496:	f0 e0       	ldi	r31, 0x00	; 0
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	80 83       	st	Z, r24
}
    349c:	0f 90       	pop	r0
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	08 95       	ret

000034a4 <TIMERS_voidTimer1SetICR1Value>:
void TIMERS_voidTimer1SetICR1Value(u16 Copy_u16ICR1Value)
{
    34a4:	df 93       	push	r29
    34a6:	cf 93       	push	r28
    34a8:	00 d0       	rcall	.+0      	; 0x34aa <TIMERS_voidTimer1SetICR1Value+0x6>
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
    34ae:	9a 83       	std	Y+2, r25	; 0x02
    34b0:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16ICR1Value;
    34b2:	e6 e4       	ldi	r30, 0x46	; 70
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	89 81       	ldd	r24, Y+1	; 0x01
    34b8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ba:	91 83       	std	Z+1, r25	; 0x01
    34bc:	80 83       	st	Z, r24
}
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	cf 91       	pop	r28
    34c4:	df 91       	pop	r29
    34c6:	08 95       	ret

000034c8 <TIMERS_u8GetTCNT1Value>:

u8 TIMERS_u8GetTCNT1Value(u16 * Copy_pu16Value)
{
    34c8:	df 93       	push	r29
    34ca:	cf 93       	push	r28
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <TIMERS_u8GetTCNT1Value+0x6>
    34ce:	0f 92       	push	r0
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	9b 83       	std	Y+3, r25	; 0x03
    34d6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16Value != NULL)
    34dc:	8a 81       	ldd	r24, Y+2	; 0x02
    34de:	9b 81       	ldd	r25, Y+3	; 0x03
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	49 f0       	breq	.+18     	; 0x34f6 <TIMERS_u8GetTCNT1Value+0x2e>
	{
		*Copy_pu16Value = TIMERS_u16_TCNT1_REG;
    34e4:	ec e4       	ldi	r30, 0x4C	; 76
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	91 81       	ldd	r25, Z+1	; 0x01
    34ec:	ea 81       	ldd	r30, Y+2	; 0x02
    34ee:	fb 81       	ldd	r31, Y+3	; 0x03
    34f0:	91 83       	std	Z+1, r25	; 0x01
    34f2:	80 83       	st	Z, r24
    34f4:	01 c0       	rjmp	.+2      	; 0x34f8 <TIMERS_u8GetTCNT1Value+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    34f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34fa:	0f 90       	pop	r0
    34fc:	0f 90       	pop	r0
    34fe:	0f 90       	pop	r0
    3500:	cf 91       	pop	r28
    3502:	df 91       	pop	r29
    3504:	08 95       	ret

00003506 <TIMERS_u8SetTCNT1Value>:

void TIMERS_u8SetTCNT1Value(u16  Copy_u16TCNT1Value)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	00 d0       	rcall	.+0      	; 0x350c <TIMERS_u8SetTCNT1Value+0x6>
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
    3510:	9a 83       	std	Y+2, r25	; 0x02
    3512:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u16TCNT1Value;
    3514:	ec e4       	ldi	r30, 0x4C	; 76
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	9a 81       	ldd	r25, Y+2	; 0x02
    351c:	91 83       	std	Z+1, r25	; 0x01
    351e:	80 83       	st	Z, r24
}
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <TIMERS_u8Timer0SetCallBack>:

u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	00 d0       	rcall	.+0      	; 0x3530 <TIMERS_u8Timer0SetCallBack+0x6>
    3530:	0f 92       	push	r0
    3532:	cd b7       	in	r28, 0x3d	; 61
    3534:	de b7       	in	r29, 0x3e	; 62
    3536:	9b 83       	std	Y+3, r25	; 0x03
    3538:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    353e:	8a 81       	ldd	r24, Y+2	; 0x02
    3540:	9b 81       	ldd	r25, Y+3	; 0x03
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	39 f0       	breq	.+14     	; 0x3554 <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	90 93 93 01 	sts	0x0193, r25
    354e:	80 93 92 01 	sts	0x0192, r24
    3552:	01 c0       	rjmp	.+2      	; 0x3556 <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3554:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    3556:	89 81       	ldd	r24, Y+1	; 0x01
}
    3558:	0f 90       	pop	r0
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	cf 91       	pop	r28
    3560:	df 91       	pop	r29
    3562:	08 95       	ret

00003564 <TIMERS_u8Timer0CTCSetCallBack>:

u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	00 d0       	rcall	.+0      	; 0x356a <TIMERS_u8Timer0CTCSetCallBack+0x6>
    356a:	0f 92       	push	r0
    356c:	cd b7       	in	r28, 0x3d	; 61
    356e:	de b7       	in	r29, 0x3e	; 62
    3570:	9b 83       	std	Y+3, r25	; 0x03
    3572:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	9b 81       	ldd	r25, Y+3	; 0x03
    357c:	00 97       	sbiw	r24, 0x00	; 0
    357e:	39 f0       	breq	.+14     	; 0x358e <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
    3580:	8a 81       	ldd	r24, Y+2	; 0x02
    3582:	9b 81       	ldd	r25, Y+3	; 0x03
    3584:	90 93 95 01 	sts	0x0195, r25
    3588:	80 93 94 01 	sts	0x0194, r24
    358c:	01 c0       	rjmp	.+2      	; 0x3590 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    358e:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    3590:	89 81       	ldd	r24, Y+1	; 0x01
}
    3592:	0f 90       	pop	r0
    3594:	0f 90       	pop	r0
    3596:	0f 90       	pop	r0
    3598:	cf 91       	pop	r28
    359a:	df 91       	pop	r29
    359c:	08 95       	ret

0000359e <TIMERS_u8Timer1SetCallBack>:


u8 TIMERS_u8Timer1SetCallBack(void(*Copy_pf)(void))
{
    359e:	df 93       	push	r29
    35a0:	cf 93       	push	r28
    35a2:	00 d0       	rcall	.+0      	; 0x35a4 <TIMERS_u8Timer1SetCallBack+0x6>
    35a4:	0f 92       	push	r0
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62
    35aa:	9b 83       	std	Y+3, r25	; 0x03
    35ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    35b2:	8a 81       	ldd	r24, Y+2	; 0x02
    35b4:	9b 81       	ldd	r25, Y+3	; 0x03
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	39 f0       	breq	.+14     	; 0x35c8 <TIMERS_u8Timer1SetCallBack+0x2a>
	{
		TIMERS_pfTimer1OVF = Copy_pf;
    35ba:	8a 81       	ldd	r24, Y+2	; 0x02
    35bc:	9b 81       	ldd	r25, Y+3	; 0x03
    35be:	90 93 97 01 	sts	0x0197, r25
    35c2:	80 93 96 01 	sts	0x0196, r24
    35c6:	01 c0       	rjmp	.+2      	; 0x35ca <TIMERS_u8Timer1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    35c8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	08 95       	ret

000035d8 <TIMERS_u8Timer1COMPASetCallBack>:

u8 TIMERS_u8Timer1COMPASetCallBack(void(*Copy_pf)(void))
{
    35d8:	df 93       	push	r29
    35da:	cf 93       	push	r28
    35dc:	00 d0       	rcall	.+0      	; 0x35de <TIMERS_u8Timer1COMPASetCallBack+0x6>
    35de:	0f 92       	push	r0
    35e0:	cd b7       	in	r28, 0x3d	; 61
    35e2:	de b7       	in	r29, 0x3e	; 62
    35e4:	9b 83       	std	Y+3, r25	; 0x03
    35e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    35e8:	81 e0       	ldi	r24, 0x01	; 1
    35ea:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    35ec:	8a 81       	ldd	r24, Y+2	; 0x02
    35ee:	9b 81       	ldd	r25, Y+3	; 0x03
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	39 f0       	breq	.+14     	; 0x3602 <TIMERS_u8Timer1COMPASetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPA = Copy_pf;
    35f4:	8a 81       	ldd	r24, Y+2	; 0x02
    35f6:	9b 81       	ldd	r25, Y+3	; 0x03
    35f8:	90 93 99 01 	sts	0x0199, r25
    35fc:	80 93 98 01 	sts	0x0198, r24
    3600:	01 c0       	rjmp	.+2      	; 0x3604 <TIMERS_u8Timer1COMPASetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3602:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3604:	89 81       	ldd	r24, Y+1	; 0x01
}
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <TIMERS_u8Timer1COMPBSetCallBack>:

u8 TIMERS_u8Timer1COMPBSetCallBack(void(*Copy_pf)(void))
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	00 d0       	rcall	.+0      	; 0x3618 <TIMERS_u8Timer1COMPBSetCallBack+0x6>
    3618:	0f 92       	push	r0
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	9b 83       	std	Y+3, r25	; 0x03
    3620:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3626:	8a 81       	ldd	r24, Y+2	; 0x02
    3628:	9b 81       	ldd	r25, Y+3	; 0x03
    362a:	00 97       	sbiw	r24, 0x00	; 0
    362c:	39 f0       	breq	.+14     	; 0x363c <TIMERS_u8Timer1COMPBSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPB = Copy_pf;
    362e:	8a 81       	ldd	r24, Y+2	; 0x02
    3630:	9b 81       	ldd	r25, Y+3	; 0x03
    3632:	90 93 9d 01 	sts	0x019D, r25
    3636:	80 93 9c 01 	sts	0x019C, r24
    363a:	01 c0       	rjmp	.+2      	; 0x363e <TIMERS_u8Timer1COMPBSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    363c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    363e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <TIMERS_u8Timer1CAPTSetCallBack>:

u8 TIMERS_u8Timer1CAPTSetCallBack(void(*Copy_pf)(void))
{
    364c:	df 93       	push	r29
    364e:	cf 93       	push	r28
    3650:	00 d0       	rcall	.+0      	; 0x3652 <TIMERS_u8Timer1CAPTSetCallBack+0x6>
    3652:	0f 92       	push	r0
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	9b 83       	std	Y+3, r25	; 0x03
    365a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	9b 81       	ldd	r25, Y+3	; 0x03
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	39 f0       	breq	.+14     	; 0x3676 <TIMERS_u8Timer1CAPTSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CAPT = Copy_pf;
    3668:	8a 81       	ldd	r24, Y+2	; 0x02
    366a:	9b 81       	ldd	r25, Y+3	; 0x03
    366c:	90 93 9b 01 	sts	0x019B, r25
    3670:	80 93 9a 01 	sts	0x019A, r24
    3674:	01 c0       	rjmp	.+2      	; 0x3678 <TIMERS_u8Timer1CAPTSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3676:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3678:	89 81       	ldd	r24, Y+1	; 0x01
}
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	cf 91       	pop	r28
    3682:	df 91       	pop	r29
    3684:	08 95       	ret

00003686 <TIMERS_voidTimer1CAPTINTEnable>:
void TIMERS_voidTimer1CAPTINTEnable(void)
{
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	cd b7       	in	r28, 0x3d	; 61
    368c:	de b7       	in	r29, 0x3e	; 62
	/* Enable Interrupt ICR1 */
	SET_BIT(TIMERS_u8_TIMSK_REG,5);
    368e:	a9 e5       	ldi	r26, 0x59	; 89
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	e9 e5       	ldi	r30, 0x59	; 89
    3694:	f0 e0       	ldi	r31, 0x00	; 0
    3696:	80 81       	ld	r24, Z
    3698:	80 62       	ori	r24, 0x20	; 32
    369a:	8c 93       	st	X, r24
}
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	08 95       	ret

000036a2 <__vector_9>:

/* Prototype for ISR TIMER1 OVF */
void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    36a2:	1f 92       	push	r1
    36a4:	0f 92       	push	r0
    36a6:	0f b6       	in	r0, 0x3f	; 63
    36a8:	0f 92       	push	r0
    36aa:	11 24       	eor	r1, r1
    36ac:	2f 93       	push	r18
    36ae:	3f 93       	push	r19
    36b0:	4f 93       	push	r20
    36b2:	5f 93       	push	r21
    36b4:	6f 93       	push	r22
    36b6:	7f 93       	push	r23
    36b8:	8f 93       	push	r24
    36ba:	9f 93       	push	r25
    36bc:	af 93       	push	r26
    36be:	bf 93       	push	r27
    36c0:	ef 93       	push	r30
    36c2:	ff 93       	push	r31
    36c4:	df 93       	push	r29
    36c6:	cf 93       	push	r28
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    36cc:	80 91 9e 01 	lds	r24, 0x019E
    36d0:	90 91 9f 01 	lds	r25, 0x019F
    36d4:	01 96       	adiw	r24, 0x01	; 1
    36d6:	90 93 9f 01 	sts	0x019F, r25
    36da:	80 93 9e 01 	sts	0x019E, r24
	if(Local_u16CounterOVF == 3907)
    36de:	80 91 9e 01 	lds	r24, 0x019E
    36e2:	90 91 9f 01 	lds	r25, 0x019F
    36e6:	2f e0       	ldi	r18, 0x0F	; 15
    36e8:	83 34       	cpi	r24, 0x43	; 67
    36ea:	92 07       	cpc	r25, r18
    36ec:	a9 f4       	brne	.+42     	; 0x3718 <__vector_9+0x76>
	{
		/* Update Preload Value */
		TIMERS_u16_TCNT1_REG = 192;
    36ee:	ec e4       	ldi	r30, 0x4C	; 76
    36f0:	f0 e0       	ldi	r31, 0x00	; 0
    36f2:	80 ec       	ldi	r24, 0xC0	; 192
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	91 83       	std	Z+1, r25	; 0x01
    36f8:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    36fa:	10 92 9f 01 	sts	0x019F, r1
    36fe:	10 92 9e 01 	sts	0x019E, r1
		/* Call App Function */
		if(TIMERS_pfTimer1OVF != NULL)
    3702:	80 91 96 01 	lds	r24, 0x0196
    3706:	90 91 97 01 	lds	r25, 0x0197
    370a:	00 97       	sbiw	r24, 0x00	; 0
    370c:	29 f0       	breq	.+10     	; 0x3718 <__vector_9+0x76>
		{
			TIMERS_pfTimer1OVF();
    370e:	e0 91 96 01 	lds	r30, 0x0196
    3712:	f0 91 97 01 	lds	r31, 0x0197
    3716:	09 95       	icall
		}
	}
}
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	ff 91       	pop	r31
    371e:	ef 91       	pop	r30
    3720:	bf 91       	pop	r27
    3722:	af 91       	pop	r26
    3724:	9f 91       	pop	r25
    3726:	8f 91       	pop	r24
    3728:	7f 91       	pop	r23
    372a:	6f 91       	pop	r22
    372c:	5f 91       	pop	r21
    372e:	4f 91       	pop	r20
    3730:	3f 91       	pop	r19
    3732:	2f 91       	pop	r18
    3734:	0f 90       	pop	r0
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	0f 90       	pop	r0
    373a:	1f 90       	pop	r1
    373c:	18 95       	reti

0000373e <__vector_8>:


/* Prototype for ISR TIMER1 COMPB */
void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    373e:	1f 92       	push	r1
    3740:	0f 92       	push	r0
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	0f 92       	push	r0
    3746:	11 24       	eor	r1, r1
    3748:	2f 93       	push	r18
    374a:	3f 93       	push	r19
    374c:	4f 93       	push	r20
    374e:	5f 93       	push	r21
    3750:	6f 93       	push	r22
    3752:	7f 93       	push	r23
    3754:	8f 93       	push	r24
    3756:	9f 93       	push	r25
    3758:	af 93       	push	r26
    375a:	bf 93       	push	r27
    375c:	ef 93       	push	r30
    375e:	ff 93       	push	r31
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    3768:	80 91 a0 01 	lds	r24, 0x01A0
    376c:	90 91 a1 01 	lds	r25, 0x01A1
    3770:	01 96       	adiw	r24, 0x01	; 1
    3772:	90 93 a1 01 	sts	0x01A1, r25
    3776:	80 93 a0 01 	sts	0x01A0, r24
	if(Local_u16CounterCTC == 10000)
    377a:	80 91 a0 01 	lds	r24, 0x01A0
    377e:	90 91 a1 01 	lds	r25, 0x01A1
    3782:	27 e2       	ldi	r18, 0x27	; 39
    3784:	80 31       	cpi	r24, 0x10	; 16
    3786:	92 07       	cpc	r25, r18
    3788:	79 f4       	brne	.+30     	; 0x37a8 <__vector_8+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    378a:	10 92 a1 01 	sts	0x01A1, r1
    378e:	10 92 a0 01 	sts	0x01A0, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPB != NULL)
    3792:	80 91 9c 01 	lds	r24, 0x019C
    3796:	90 91 9d 01 	lds	r25, 0x019D
    379a:	00 97       	sbiw	r24, 0x00	; 0
    379c:	29 f0       	breq	.+10     	; 0x37a8 <__vector_8+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPB();
    379e:	e0 91 9c 01 	lds	r30, 0x019C
    37a2:	f0 91 9d 01 	lds	r31, 0x019D
    37a6:	09 95       	icall
		}
	}
}
    37a8:	cf 91       	pop	r28
    37aa:	df 91       	pop	r29
    37ac:	ff 91       	pop	r31
    37ae:	ef 91       	pop	r30
    37b0:	bf 91       	pop	r27
    37b2:	af 91       	pop	r26
    37b4:	9f 91       	pop	r25
    37b6:	8f 91       	pop	r24
    37b8:	7f 91       	pop	r23
    37ba:	6f 91       	pop	r22
    37bc:	5f 91       	pop	r21
    37be:	4f 91       	pop	r20
    37c0:	3f 91       	pop	r19
    37c2:	2f 91       	pop	r18
    37c4:	0f 90       	pop	r0
    37c6:	0f be       	out	0x3f, r0	; 63
    37c8:	0f 90       	pop	r0
    37ca:	1f 90       	pop	r1
    37cc:	18 95       	reti

000037ce <__vector_7>:

/* Prototype for ISR TIMER1 COMPA */
void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    37ce:	1f 92       	push	r1
    37d0:	0f 92       	push	r0
    37d2:	0f b6       	in	r0, 0x3f	; 63
    37d4:	0f 92       	push	r0
    37d6:	11 24       	eor	r1, r1
    37d8:	2f 93       	push	r18
    37da:	3f 93       	push	r19
    37dc:	4f 93       	push	r20
    37de:	5f 93       	push	r21
    37e0:	6f 93       	push	r22
    37e2:	7f 93       	push	r23
    37e4:	8f 93       	push	r24
    37e6:	9f 93       	push	r25
    37e8:	af 93       	push	r26
    37ea:	bf 93       	push	r27
    37ec:	ef 93       	push	r30
    37ee:	ff 93       	push	r31
    37f0:	df 93       	push	r29
    37f2:	cf 93       	push	r28
    37f4:	cd b7       	in	r28, 0x3d	; 61
    37f6:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    37f8:	80 91 a2 01 	lds	r24, 0x01A2
    37fc:	90 91 a3 01 	lds	r25, 0x01A3
    3800:	01 96       	adiw	r24, 0x01	; 1
    3802:	90 93 a3 01 	sts	0x01A3, r25
    3806:	80 93 a2 01 	sts	0x01A2, r24
	if(Local_u16CounterCTC == 10000)
    380a:	80 91 a2 01 	lds	r24, 0x01A2
    380e:	90 91 a3 01 	lds	r25, 0x01A3
    3812:	27 e2       	ldi	r18, 0x27	; 39
    3814:	80 31       	cpi	r24, 0x10	; 16
    3816:	92 07       	cpc	r25, r18
    3818:	79 f4       	brne	.+30     	; 0x3838 <__vector_7+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    381a:	10 92 a3 01 	sts	0x01A3, r1
    381e:	10 92 a2 01 	sts	0x01A2, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPA != NULL)
    3822:	80 91 98 01 	lds	r24, 0x0198
    3826:	90 91 99 01 	lds	r25, 0x0199
    382a:	00 97       	sbiw	r24, 0x00	; 0
    382c:	29 f0       	breq	.+10     	; 0x3838 <__vector_7+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPA();
    382e:	e0 91 98 01 	lds	r30, 0x0198
    3832:	f0 91 99 01 	lds	r31, 0x0199
    3836:	09 95       	icall
		}
	}
}
    3838:	cf 91       	pop	r28
    383a:	df 91       	pop	r29
    383c:	ff 91       	pop	r31
    383e:	ef 91       	pop	r30
    3840:	bf 91       	pop	r27
    3842:	af 91       	pop	r26
    3844:	9f 91       	pop	r25
    3846:	8f 91       	pop	r24
    3848:	7f 91       	pop	r23
    384a:	6f 91       	pop	r22
    384c:	5f 91       	pop	r21
    384e:	4f 91       	pop	r20
    3850:	3f 91       	pop	r19
    3852:	2f 91       	pop	r18
    3854:	0f 90       	pop	r0
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	0f 90       	pop	r0
    385a:	1f 90       	pop	r1
    385c:	18 95       	reti

0000385e <__vector_6>:

/* Prototype for ISR TIMER1 CAPT */
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    385e:	1f 92       	push	r1
    3860:	0f 92       	push	r0
    3862:	0f b6       	in	r0, 0x3f	; 63
    3864:	0f 92       	push	r0
    3866:	11 24       	eor	r1, r1
    3868:	2f 93       	push	r18
    386a:	3f 93       	push	r19
    386c:	4f 93       	push	r20
    386e:	5f 93       	push	r21
    3870:	6f 93       	push	r22
    3872:	7f 93       	push	r23
    3874:	8f 93       	push	r24
    3876:	9f 93       	push	r25
    3878:	af 93       	push	r26
    387a:	bf 93       	push	r27
    387c:	ef 93       	push	r30
    387e:	ff 93       	push	r31
    3880:	df 93       	push	r29
    3882:	cf 93       	push	r28
    3884:	cd b7       	in	r28, 0x3d	; 61
    3886:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCAPT = 0;
	Local_u16CounterCAPT++;
    3888:	80 91 a4 01 	lds	r24, 0x01A4
    388c:	90 91 a5 01 	lds	r25, 0x01A5
    3890:	01 96       	adiw	r24, 0x01	; 1
    3892:	90 93 a5 01 	sts	0x01A5, r25
    3896:	80 93 a4 01 	sts	0x01A4, r24
	if(Local_u16CounterCAPT == 10000)
    389a:	80 91 a4 01 	lds	r24, 0x01A4
    389e:	90 91 a5 01 	lds	r25, 0x01A5
    38a2:	27 e2       	ldi	r18, 0x27	; 39
    38a4:	80 31       	cpi	r24, 0x10	; 16
    38a6:	92 07       	cpc	r25, r18
    38a8:	79 f4       	brne	.+30     	; 0x38c8 <__vector_6+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCAPT = 0;
    38aa:	10 92 a5 01 	sts	0x01A5, r1
    38ae:	10 92 a4 01 	sts	0x01A4, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CAPT != NULL)
    38b2:	80 91 9a 01 	lds	r24, 0x019A
    38b6:	90 91 9b 01 	lds	r25, 0x019B
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	29 f0       	breq	.+10     	; 0x38c8 <__vector_6+0x6a>
		{
			TIMERS_pfTimer1CAPT();
    38be:	e0 91 9a 01 	lds	r30, 0x019A
    38c2:	f0 91 9b 01 	lds	r31, 0x019B
    38c6:	09 95       	icall
		}
	}
}
    38c8:	cf 91       	pop	r28
    38ca:	df 91       	pop	r29
    38cc:	ff 91       	pop	r31
    38ce:	ef 91       	pop	r30
    38d0:	bf 91       	pop	r27
    38d2:	af 91       	pop	r26
    38d4:	9f 91       	pop	r25
    38d6:	8f 91       	pop	r24
    38d8:	7f 91       	pop	r23
    38da:	6f 91       	pop	r22
    38dc:	5f 91       	pop	r21
    38de:	4f 91       	pop	r20
    38e0:	3f 91       	pop	r19
    38e2:	2f 91       	pop	r18
    38e4:	0f 90       	pop	r0
    38e6:	0f be       	out	0x3f, r0	; 63
    38e8:	0f 90       	pop	r0
    38ea:	1f 90       	pop	r1
    38ec:	18 95       	reti

000038ee <__vector_11>:

/* Prototype for ISR TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    38ee:	1f 92       	push	r1
    38f0:	0f 92       	push	r0
    38f2:	0f b6       	in	r0, 0x3f	; 63
    38f4:	0f 92       	push	r0
    38f6:	11 24       	eor	r1, r1
    38f8:	2f 93       	push	r18
    38fa:	3f 93       	push	r19
    38fc:	4f 93       	push	r20
    38fe:	5f 93       	push	r21
    3900:	6f 93       	push	r22
    3902:	7f 93       	push	r23
    3904:	8f 93       	push	r24
    3906:	9f 93       	push	r25
    3908:	af 93       	push	r26
    390a:	bf 93       	push	r27
    390c:	ef 93       	push	r30
    390e:	ff 93       	push	r31
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	cd b7       	in	r28, 0x3d	; 61
    3916:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    3918:	80 91 a6 01 	lds	r24, 0x01A6
    391c:	90 91 a7 01 	lds	r25, 0x01A7
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	90 93 a7 01 	sts	0x01A7, r25
    3926:	80 93 a6 01 	sts	0x01A6, r24
	if(Local_u16CounterOVF == 3907)
    392a:	80 91 a6 01 	lds	r24, 0x01A6
    392e:	90 91 a7 01 	lds	r25, 0x01A7
    3932:	2f e0       	ldi	r18, 0x0F	; 15
    3934:	83 34       	cpi	r24, 0x43	; 67
    3936:	92 07       	cpc	r25, r18
    3938:	99 f4       	brne	.+38     	; 0x3960 <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    393a:	e2 e5       	ldi	r30, 0x52	; 82
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	80 ec       	ldi	r24, 0xC0	; 192
    3940:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    3942:	10 92 a7 01 	sts	0x01A7, r1
    3946:	10 92 a6 01 	sts	0x01A6, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
    394a:	80 91 92 01 	lds	r24, 0x0192
    394e:	90 91 93 01 	lds	r25, 0x0193
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	29 f0       	breq	.+10     	; 0x3960 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    3956:	e0 91 92 01 	lds	r30, 0x0192
    395a:	f0 91 93 01 	lds	r31, 0x0193
    395e:	09 95       	icall
		}
	}
}
    3960:	cf 91       	pop	r28
    3962:	df 91       	pop	r29
    3964:	ff 91       	pop	r31
    3966:	ef 91       	pop	r30
    3968:	bf 91       	pop	r27
    396a:	af 91       	pop	r26
    396c:	9f 91       	pop	r25
    396e:	8f 91       	pop	r24
    3970:	7f 91       	pop	r23
    3972:	6f 91       	pop	r22
    3974:	5f 91       	pop	r21
    3976:	4f 91       	pop	r20
    3978:	3f 91       	pop	r19
    397a:	2f 91       	pop	r18
    397c:	0f 90       	pop	r0
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	0f 90       	pop	r0
    3982:	1f 90       	pop	r1
    3984:	18 95       	reti

00003986 <__vector_10>:

/* Prototype for ISR TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    3986:	1f 92       	push	r1
    3988:	0f 92       	push	r0
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	0f 92       	push	r0
    398e:	11 24       	eor	r1, r1
    3990:	2f 93       	push	r18
    3992:	3f 93       	push	r19
    3994:	4f 93       	push	r20
    3996:	5f 93       	push	r21
    3998:	6f 93       	push	r22
    399a:	7f 93       	push	r23
    399c:	8f 93       	push	r24
    399e:	9f 93       	push	r25
    39a0:	af 93       	push	r26
    39a2:	bf 93       	push	r27
    39a4:	ef 93       	push	r30
    39a6:	ff 93       	push	r31
    39a8:	df 93       	push	r29
    39aa:	cf 93       	push	r28
    39ac:	cd b7       	in	r28, 0x3d	; 61
    39ae:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    39b0:	80 91 a8 01 	lds	r24, 0x01A8
    39b4:	90 91 a9 01 	lds	r25, 0x01A9
    39b8:	01 96       	adiw	r24, 0x01	; 1
    39ba:	90 93 a9 01 	sts	0x01A9, r25
    39be:	80 93 a8 01 	sts	0x01A8, r24
	if(Local_u16CounterCTC == 10000)
    39c2:	80 91 a8 01 	lds	r24, 0x01A8
    39c6:	90 91 a9 01 	lds	r25, 0x01A9
    39ca:	27 e2       	ldi	r18, 0x27	; 39
    39cc:	80 31       	cpi	r24, 0x10	; 16
    39ce:	92 07       	cpc	r25, r18
    39d0:	79 f4       	brne	.+30     	; 0x39f0 <__vector_10+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    39d2:	10 92 a9 01 	sts	0x01A9, r1
    39d6:	10 92 a8 01 	sts	0x01A8, r1
		/* Call App Function */
		if(TIMERS_pfTimer0CTC != NULL)
    39da:	80 91 94 01 	lds	r24, 0x0194
    39de:	90 91 95 01 	lds	r25, 0x0195
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	29 f0       	breq	.+10     	; 0x39f0 <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
    39e6:	e0 91 94 01 	lds	r30, 0x0194
    39ea:	f0 91 95 01 	lds	r31, 0x0195
    39ee:	09 95       	icall
		}
	}
}
    39f0:	cf 91       	pop	r28
    39f2:	df 91       	pop	r29
    39f4:	ff 91       	pop	r31
    39f6:	ef 91       	pop	r30
    39f8:	bf 91       	pop	r27
    39fa:	af 91       	pop	r26
    39fc:	9f 91       	pop	r25
    39fe:	8f 91       	pop	r24
    3a00:	7f 91       	pop	r23
    3a02:	6f 91       	pop	r22
    3a04:	5f 91       	pop	r21
    3a06:	4f 91       	pop	r20
    3a08:	3f 91       	pop	r19
    3a0a:	2f 91       	pop	r18
    3a0c:	0f 90       	pop	r0
    3a0e:	0f be       	out	0x3f, r0	; 63
    3a10:	0f 90       	pop	r0
    3a12:	1f 90       	pop	r1
    3a14:	18 95       	reti

00003a16 <main>:

/* Functions */
void ICU_SW(void);

int main(void)
{
    3a16:	ef 92       	push	r14
    3a18:	ff 92       	push	r15
    3a1a:	0f 93       	push	r16
    3a1c:	1f 93       	push	r17
    3a1e:	df 93       	push	r29
    3a20:	cf 93       	push	r28
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	6d 97       	sbiw	r28, 0x1d	; 29
    3a28:	0f b6       	in	r0, 0x3f	; 63
    3a2a:	f8 94       	cli
    3a2c:	de bf       	out	0x3e, r29	; 62
    3a2e:	0f be       	out	0x3f, r0	; 63
    3a30:	cd bf       	out	0x3d, r28	; 61
	/* Initialization */
	DIO_voidInit();
    3a32:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidInit>
	EXTI_u8EXTIEnable(EXTI_u8_INT2,EXTI_u8_RAISING_EDGE);
    3a36:	82 e0       	ldi	r24, 0x02	; 2
    3a38:	60 e0       	ldi	r22, 0x00	; 0
    3a3a:	0e 94 90 0b 	call	0x1720	; 0x1720 <EXTI_u8EXTIEnable>
	EXTI_u8EXTISetCallBack(EXTI_u8_INT2,&ICU_SW);
    3a3e:	23 e9       	ldi	r18, 0x93	; 147
    3a40:	3e e1       	ldi	r19, 0x1E	; 30
    3a42:	82 e0       	ldi	r24, 0x02	; 2
    3a44:	b9 01       	movw	r22, r18
    3a46:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <EXTI_u8EXTISetCallBack>
	LCD_voidInit();
    3a4a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <LCD_voidInit>
	TIMERS_voidTimer0Init(); //generate PWM
    3a4e:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <TIMERS_voidTimer0Init>
	TIMERS_voidTimer1Init(); //Measure Periods (Counter)
    3a52:	0e 94 97 19 	call	0x332e	; 0x332e <TIMERS_voidTimer1Init>
	GI_voidEnableGI();
    3a56:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <GI_voidEnableGI>
	u8 DutyCycle = 0;
    3a5a:	1d 8e       	std	Y+29, r1	; 0x1d
		//		DutyCycle = (u32)((f32)(ON_Ticks / Period_Ticks) * 100);
		//		LCD_u8GoToXY(LCD_u8_LINE1,0);
		//		LCD_voidWriteString((u8*) "Duty Cycle = ");
		//		LCD_voidWriteNumber((u32)DutyCycle);
		/* Busy Wait Condition */
		if((Period_Ticks != 0) && (ON_Ticks != 0))
    3a5c:	80 91 aa 01 	lds	r24, 0x01AA
    3a60:	90 91 ab 01 	lds	r25, 0x01AB
    3a64:	00 97       	sbiw	r24, 0x00	; 0
    3a66:	d1 f3       	breq	.-12     	; 0x3a5c <main+0x46>
    3a68:	80 91 ac 01 	lds	r24, 0x01AC
    3a6c:	90 91 ad 01 	lds	r25, 0x01AD
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	a1 f3       	breq	.-24     	; 0x3a5c <main+0x46>
		{
			LCD_u8GoToXY(LCD_u8_LINE1, 0);
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	60 e0       	ldi	r22, 0x00	; 0
    3a78:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
			LCD_voidWriteString((u8*) "PeriodTicks=");
    3a7c:	80 e6       	ldi	r24, 0x60	; 96
    3a7e:	90 e0       	ldi	r25, 0x00	; 0
    3a80:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_voidWriteString>
			LCD_voidWriteNumber((u32)Period_Ticks);
    3a84:	80 91 aa 01 	lds	r24, 0x01AA
    3a88:	90 91 ab 01 	lds	r25, 0x01AB
    3a8c:	cc 01       	movw	r24, r24
    3a8e:	a0 e0       	ldi	r26, 0x00	; 0
    3a90:	b0 e0       	ldi	r27, 0x00	; 0
    3a92:	bc 01       	movw	r22, r24
    3a94:	cd 01       	movw	r24, r26
    3a96:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidWriteNumber>
			LCD_u8GoToXY(LCD_u8_LINE2, 0);
    3a9a:	82 e0       	ldi	r24, 0x02	; 2
    3a9c:	60 e0       	ldi	r22, 0x00	; 0
    3a9e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
			LCD_voidWriteString((u8*) "ONTicks=");
    3aa2:	8d e6       	ldi	r24, 0x6D	; 109
    3aa4:	90 e0       	ldi	r25, 0x00	; 0
    3aa6:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_voidWriteString>
			LCD_voidWriteNumber((u32)ON_Ticks);
    3aaa:	80 91 ac 01 	lds	r24, 0x01AC
    3aae:	90 91 ad 01 	lds	r25, 0x01AD
    3ab2:	cc 01       	movw	r24, r24
    3ab4:	a0 e0       	ldi	r26, 0x00	; 0
    3ab6:	b0 e0       	ldi	r27, 0x00	; 0
    3ab8:	bc 01       	movw	r22, r24
    3aba:	cd 01       	movw	r24, r26
    3abc:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidWriteNumber>
    3ac0:	80 e0       	ldi	r24, 0x00	; 0
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	aa e7       	ldi	r26, 0x7A	; 122
    3ac6:	b4 e4       	ldi	r27, 0x44	; 68
    3ac8:	89 8f       	std	Y+25, r24	; 0x19
    3aca:	9a 8f       	std	Y+26, r25	; 0x1a
    3acc:	ab 8f       	std	Y+27, r26	; 0x1b
    3ace:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ad0:	69 8d       	ldd	r22, Y+25	; 0x19
    3ad2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ad4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ad6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ad8:	20 e0       	ldi	r18, 0x00	; 0
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	4a ef       	ldi	r20, 0xFA	; 250
    3ade:	54 e4       	ldi	r21, 0x44	; 68
    3ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ae4:	dc 01       	movw	r26, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	8d 8b       	std	Y+21, r24	; 0x15
    3aea:	9e 8b       	std	Y+22, r25	; 0x16
    3aec:	af 8b       	std	Y+23, r26	; 0x17
    3aee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3af0:	6d 89       	ldd	r22, Y+21	; 0x15
    3af2:	7e 89       	ldd	r23, Y+22	; 0x16
    3af4:	8f 89       	ldd	r24, Y+23	; 0x17
    3af6:	98 8d       	ldd	r25, Y+24	; 0x18
    3af8:	20 e0       	ldi	r18, 0x00	; 0
    3afa:	30 e0       	ldi	r19, 0x00	; 0
    3afc:	40 e8       	ldi	r20, 0x80	; 128
    3afe:	5f e3       	ldi	r21, 0x3F	; 63
    3b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b04:	88 23       	and	r24, r24
    3b06:	2c f4       	brge	.+10     	; 0x3b12 <main+0xfc>
		__ticks = 1;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	90 e0       	ldi	r25, 0x00	; 0
    3b0c:	9c 8b       	std	Y+20, r25	; 0x14
    3b0e:	8b 8b       	std	Y+19, r24	; 0x13
    3b10:	3f c0       	rjmp	.+126    	; 0x3b90 <main+0x17a>
	else if (__tmp > 65535)
    3b12:	6d 89       	ldd	r22, Y+21	; 0x15
    3b14:	7e 89       	ldd	r23, Y+22	; 0x16
    3b16:	8f 89       	ldd	r24, Y+23	; 0x17
    3b18:	98 8d       	ldd	r25, Y+24	; 0x18
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	3f ef       	ldi	r19, 0xFF	; 255
    3b1e:	4f e7       	ldi	r20, 0x7F	; 127
    3b20:	57 e4       	ldi	r21, 0x47	; 71
    3b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b26:	18 16       	cp	r1, r24
    3b28:	4c f5       	brge	.+82     	; 0x3b7c <main+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b2a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b2c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b32:	20 e0       	ldi	r18, 0x00	; 0
    3b34:	30 e0       	ldi	r19, 0x00	; 0
    3b36:	40 e2       	ldi	r20, 0x20	; 32
    3b38:	51 e4       	ldi	r21, 0x41	; 65
    3b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	bc 01       	movw	r22, r24
    3b44:	cd 01       	movw	r24, r26
    3b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
    3b4e:	9c 8b       	std	Y+20, r25	; 0x14
    3b50:	8b 8b       	std	Y+19, r24	; 0x13
    3b52:	0f c0       	rjmp	.+30     	; 0x3b72 <main+0x15c>
    3b54:	88 ec       	ldi	r24, 0xC8	; 200
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	9a 8b       	std	Y+18, r25	; 0x12
    3b5a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3b5c:	89 89       	ldd	r24, Y+17	; 0x11
    3b5e:	9a 89       	ldd	r25, Y+18	; 0x12
    3b60:	01 97       	sbiw	r24, 0x01	; 1
    3b62:	f1 f7       	brne	.-4      	; 0x3b60 <main+0x14a>
    3b64:	9a 8b       	std	Y+18, r25	; 0x12
    3b66:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b68:	8b 89       	ldd	r24, Y+19	; 0x13
    3b6a:	9c 89       	ldd	r25, Y+20	; 0x14
    3b6c:	01 97       	sbiw	r24, 0x01	; 1
    3b6e:	9c 8b       	std	Y+20, r25	; 0x14
    3b70:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b72:	8b 89       	ldd	r24, Y+19	; 0x13
    3b74:	9c 89       	ldd	r25, Y+20	; 0x14
    3b76:	00 97       	sbiw	r24, 0x00	; 0
    3b78:	69 f7       	brne	.-38     	; 0x3b54 <main+0x13e>
    3b7a:	14 c0       	rjmp	.+40     	; 0x3ba4 <main+0x18e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b7c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b7e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b80:	8f 89       	ldd	r24, Y+23	; 0x17
    3b82:	98 8d       	ldd	r25, Y+24	; 0x18
    3b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	9c 8b       	std	Y+20, r25	; 0x14
    3b8e:	8b 8b       	std	Y+19, r24	; 0x13
    3b90:	8b 89       	ldd	r24, Y+19	; 0x13
    3b92:	9c 89       	ldd	r25, Y+20	; 0x14
    3b94:	98 8b       	std	Y+16, r25	; 0x10
    3b96:	8f 87       	std	Y+15, r24	; 0x0f
    3b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b9a:	98 89       	ldd	r25, Y+16	; 0x10
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	f1 f7       	brne	.-4      	; 0x3b9c <main+0x186>
    3ba0:	98 8b       	std	Y+16, r25	; 0x10
    3ba2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(1000);
			LCD_voidClearScreen();
    3ba4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
			DutyCycle = (u32)((f32)ON_Ticks / Period_Ticks * 100);
    3ba8:	80 91 ac 01 	lds	r24, 0x01AC
    3bac:	90 91 ad 01 	lds	r25, 0x01AD
    3bb0:	cc 01       	movw	r24, r24
    3bb2:	a0 e0       	ldi	r26, 0x00	; 0
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	bc 01       	movw	r22, r24
    3bb8:	cd 01       	movw	r24, r26
    3bba:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3bbe:	7b 01       	movw	r14, r22
    3bc0:	8c 01       	movw	r16, r24
    3bc2:	80 91 aa 01 	lds	r24, 0x01AA
    3bc6:	90 91 ab 01 	lds	r25, 0x01AB
    3bca:	cc 01       	movw	r24, r24
    3bcc:	a0 e0       	ldi	r26, 0x00	; 0
    3bce:	b0 e0       	ldi	r27, 0x00	; 0
    3bd0:	bc 01       	movw	r22, r24
    3bd2:	cd 01       	movw	r24, r26
    3bd4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3bd8:	9b 01       	movw	r18, r22
    3bda:	ac 01       	movw	r20, r24
    3bdc:	c8 01       	movw	r24, r16
    3bde:	b7 01       	movw	r22, r14
    3be0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	bc 01       	movw	r22, r24
    3bea:	cd 01       	movw	r24, r26
    3bec:	20 e0       	ldi	r18, 0x00	; 0
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	48 ec       	ldi	r20, 0xC8	; 200
    3bf2:	52 e4       	ldi	r21, 0x42	; 66
    3bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bf8:	dc 01       	movw	r26, r24
    3bfa:	cb 01       	movw	r24, r22
    3bfc:	bc 01       	movw	r22, r24
    3bfe:	cd 01       	movw	r24, r26
    3c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c04:	dc 01       	movw	r26, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	8d 8f       	std	Y+29, r24	; 0x1d
			LCD_u8GoToXY(LCD_u8_LINE1, 0);
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	60 e0       	ldi	r22, 0x00	; 0
    3c0e:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <LCD_u8GoToXY>
			LCD_voidWriteString((u8*) "Duty Cycle = ");
    3c12:	86 e7       	ldi	r24, 0x76	; 118
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	0e 94 12 15 	call	0x2a24	; 0x2a24 <LCD_voidWriteString>
			LCD_voidWriteNumber((u32)DutyCycle);
    3c1a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3c1c:	88 2f       	mov	r24, r24
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	a0 e0       	ldi	r26, 0x00	; 0
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	bc 01       	movw	r22, r24
    3c26:	cd 01       	movw	r24, r26
    3c28:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <LCD_voidWriteNumber>
    3c2c:	80 e0       	ldi	r24, 0x00	; 0
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	aa e7       	ldi	r26, 0x7A	; 122
    3c32:	b4 e4       	ldi	r27, 0x44	; 68
    3c34:	8b 87       	std	Y+11, r24	; 0x0b
    3c36:	9c 87       	std	Y+12, r25	; 0x0c
    3c38:	ad 87       	std	Y+13, r26	; 0x0d
    3c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c44:	20 e0       	ldi	r18, 0x00	; 0
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	4a ef       	ldi	r20, 0xFA	; 250
    3c4a:	54 e4       	ldi	r21, 0x44	; 68
    3c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c50:	dc 01       	movw	r26, r24
    3c52:	cb 01       	movw	r24, r22
    3c54:	8f 83       	std	Y+7, r24	; 0x07
    3c56:	98 87       	std	Y+8, r25	; 0x08
    3c58:	a9 87       	std	Y+9, r26	; 0x09
    3c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5e:	78 85       	ldd	r23, Y+8	; 0x08
    3c60:	89 85       	ldd	r24, Y+9	; 0x09
    3c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c64:	20 e0       	ldi	r18, 0x00	; 0
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e8       	ldi	r20, 0x80	; 128
    3c6a:	5f e3       	ldi	r21, 0x3F	; 63
    3c6c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c70:	88 23       	and	r24, r24
    3c72:	2c f4       	brge	.+10     	; 0x3c7e <main+0x268>
		__ticks = 1;
    3c74:	81 e0       	ldi	r24, 0x01	; 1
    3c76:	90 e0       	ldi	r25, 0x00	; 0
    3c78:	9e 83       	std	Y+6, r25	; 0x06
    3c7a:	8d 83       	std	Y+5, r24	; 0x05
    3c7c:	3f c0       	rjmp	.+126    	; 0x3cfc <main+0x2e6>
	else if (__tmp > 65535)
    3c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c80:	78 85       	ldd	r23, Y+8	; 0x08
    3c82:	89 85       	ldd	r24, Y+9	; 0x09
    3c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	3f ef       	ldi	r19, 0xFF	; 255
    3c8a:	4f e7       	ldi	r20, 0x7F	; 127
    3c8c:	57 e4       	ldi	r21, 0x47	; 71
    3c8e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c92:	18 16       	cp	r1, r24
    3c94:	4c f5       	brge	.+82     	; 0x3ce8 <main+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9e:	20 e0       	ldi	r18, 0x00	; 0
    3ca0:	30 e0       	ldi	r19, 0x00	; 0
    3ca2:	40 e2       	ldi	r20, 0x20	; 32
    3ca4:	51 e4       	ldi	r21, 0x41	; 65
    3ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	bc 01       	movw	r22, r24
    3cb0:	cd 01       	movw	r24, r26
    3cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	cb 01       	movw	r24, r22
    3cba:	9e 83       	std	Y+6, r25	; 0x06
    3cbc:	8d 83       	std	Y+5, r24	; 0x05
    3cbe:	0f c0       	rjmp	.+30     	; 0x3cde <main+0x2c8>
    3cc0:	88 ec       	ldi	r24, 0xC8	; 200
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	9c 83       	std	Y+4, r25	; 0x04
    3cc6:	8b 83       	std	Y+3, r24	; 0x03
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <main+0x2b6>
    3cd0:	9c 83       	std	Y+4, r25	; 0x04
    3cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	9e 83       	std	Y+6, r25	; 0x06
    3cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cde:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	69 f7       	brne	.-38     	; 0x3cc0 <main+0x2aa>
    3ce6:	14 c0       	rjmp	.+40     	; 0x3d10 <main+0x2fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    3cea:	78 85       	ldd	r23, Y+8	; 0x08
    3cec:	89 85       	ldd	r24, Y+9	; 0x09
    3cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	8d 83       	std	Y+5, r24	; 0x05
    3cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    3d00:	9a 83       	std	Y+2, r25	; 0x02
    3d02:	89 83       	std	Y+1, r24	; 0x01
    3d04:	89 81       	ldd	r24, Y+1	; 0x01
    3d06:	9a 81       	ldd	r25, Y+2	; 0x02
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <main+0x2f2>
    3d0c:	9a 83       	std	Y+2, r25	; 0x02
    3d0e:	89 83       	std	Y+1, r24	; 0x01
			 _delay_ms(1000);
			LCD_voidClearScreen();
    3d10:	0e 94 d7 15 	call	0x2bae	; 0x2bae <LCD_voidClearScreen>
			// Reset the values for the next measurement cycle
			Period_Ticks = 0;
    3d14:	10 92 ab 01 	sts	0x01AB, r1
    3d18:	10 92 aa 01 	sts	0x01AA, r1
			ON_Ticks = 0;
    3d1c:	10 92 ad 01 	sts	0x01AD, r1
    3d20:	10 92 ac 01 	sts	0x01AC, r1
    3d24:	9b ce       	rjmp	.-714    	; 0x3a5c <main+0x46>

00003d26 <ICU_SW>:

	}
	return 0;
}
void ICU_SW(void)
{
    3d26:	df 93       	push	r29
    3d28:	cf 93       	push	r28
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 Local_u8Counter = 0;
	Local_u8Counter++;
    3d2e:	80 91 ae 01 	lds	r24, 0x01AE
    3d32:	8f 5f       	subi	r24, 0xFF	; 255
    3d34:	80 93 ae 01 	sts	0x01AE, r24
	/* First Raising Edge */
	if(Local_u8Counter == 1)
    3d38:	80 91 ae 01 	lds	r24, 0x01AE
    3d3c:	81 30       	cpi	r24, 0x01	; 1
    3d3e:	29 f4       	brne	.+10     	; 0x3d4a <ICU_SW+0x24>
	{
		/* Timer starts Counting */
		TIMERS_u8SetTCNT1Value(0);
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	0e 94 83 1a 	call	0x3506	; 0x3506 <TIMERS_u8SetTCNT1Value>
    3d48:	2b c0       	rjmp	.+86     	; 0x3da0 <ICU_SW+0x7a>
	}
	/* Second Raising Edge */
	else if (Local_u8Counter == 2)
    3d4a:	80 91 ae 01 	lds	r24, 0x01AE
    3d4e:	82 30       	cpi	r24, 0x02	; 2
    3d50:	49 f4       	brne	.+18     	; 0x3d64 <ICU_SW+0x3e>
	{
		/* Read Timer1 */
		TIMERS_u8GetTCNT1Value(&Period_Ticks);
    3d52:	8a ea       	ldi	r24, 0xAA	; 170
    3d54:	91 e0       	ldi	r25, 0x01	; 1
    3d56:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <TIMERS_u8GetTCNT1Value>
		/* Change Trigger */
		EXTI_u8EXTISetEdge(EXTI_u8_INT2, EXTI_u8_FALLING_EDGE);
    3d5a:	82 e0       	ldi	r24, 0x02	; 2
    3d5c:	61 e0       	ldi	r22, 0x01	; 1
    3d5e:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <EXTI_u8EXTISetEdge>
    3d62:	1e c0       	rjmp	.+60     	; 0x3da0 <ICU_SW+0x7a>
	}
	/* Falling Edge */
	else if (Local_u8Counter == 3)
    3d64:	80 91 ae 01 	lds	r24, 0x01AE
    3d68:	83 30       	cpi	r24, 0x03	; 3
    3d6a:	d1 f4       	brne	.+52     	; 0x3da0 <ICU_SW+0x7a>
	{
		/* Read Timer1 */
		TIMERS_u8GetTCNT1Value(&ON_Ticks);
    3d6c:	8c ea       	ldi	r24, 0xAC	; 172
    3d6e:	91 e0       	ldi	r25, 0x01	; 1
    3d70:	0e 94 64 1a 	call	0x34c8	; 0x34c8 <TIMERS_u8GetTCNT1Value>
		ON_Ticks -= Period_Ticks;
    3d74:	20 91 ac 01 	lds	r18, 0x01AC
    3d78:	30 91 ad 01 	lds	r19, 0x01AD
    3d7c:	80 91 aa 01 	lds	r24, 0x01AA
    3d80:	90 91 ab 01 	lds	r25, 0x01AB
    3d84:	a9 01       	movw	r20, r18
    3d86:	48 1b       	sub	r20, r24
    3d88:	59 0b       	sbc	r21, r25
    3d8a:	ca 01       	movw	r24, r20
    3d8c:	90 93 ad 01 	sts	0x01AD, r25
    3d90:	80 93 ac 01 	sts	0x01AC, r24
		/* Disable INT */ // ONCE
		//EXTI_u8EXTIDisable(EXTI_u8_INT2);
		Local_u8Counter = 0;
    3d94:	10 92 ae 01 	sts	0x01AE, r1
		//Continuous Reading
		/* Change Trigger back to Rising Edge */
		EXTI_u8EXTISetEdge(EXTI_u8_INT2, EXTI_u8_RAISING_EDGE);
    3d98:	82 e0       	ldi	r24, 0x02	; 2
    3d9a:	60 e0       	ldi	r22, 0x00	; 0
    3d9c:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <EXTI_u8EXTISetEdge>
	}

}
    3da0:	cf 91       	pop	r28
    3da2:	df 91       	pop	r29
    3da4:	08 95       	ret

00003da6 <__udivmodsi4>:
    3da6:	a1 e2       	ldi	r26, 0x21	; 33
    3da8:	1a 2e       	mov	r1, r26
    3daa:	aa 1b       	sub	r26, r26
    3dac:	bb 1b       	sub	r27, r27
    3dae:	fd 01       	movw	r30, r26
    3db0:	0d c0       	rjmp	.+26     	; 0x3dcc <__udivmodsi4_ep>

00003db2 <__udivmodsi4_loop>:
    3db2:	aa 1f       	adc	r26, r26
    3db4:	bb 1f       	adc	r27, r27
    3db6:	ee 1f       	adc	r30, r30
    3db8:	ff 1f       	adc	r31, r31
    3dba:	a2 17       	cp	r26, r18
    3dbc:	b3 07       	cpc	r27, r19
    3dbe:	e4 07       	cpc	r30, r20
    3dc0:	f5 07       	cpc	r31, r21
    3dc2:	20 f0       	brcs	.+8      	; 0x3dcc <__udivmodsi4_ep>
    3dc4:	a2 1b       	sub	r26, r18
    3dc6:	b3 0b       	sbc	r27, r19
    3dc8:	e4 0b       	sbc	r30, r20
    3dca:	f5 0b       	sbc	r31, r21

00003dcc <__udivmodsi4_ep>:
    3dcc:	66 1f       	adc	r22, r22
    3dce:	77 1f       	adc	r23, r23
    3dd0:	88 1f       	adc	r24, r24
    3dd2:	99 1f       	adc	r25, r25
    3dd4:	1a 94       	dec	r1
    3dd6:	69 f7       	brne	.-38     	; 0x3db2 <__udivmodsi4_loop>
    3dd8:	60 95       	com	r22
    3dda:	70 95       	com	r23
    3ddc:	80 95       	com	r24
    3dde:	90 95       	com	r25
    3de0:	9b 01       	movw	r18, r22
    3de2:	ac 01       	movw	r20, r24
    3de4:	bd 01       	movw	r22, r26
    3de6:	cf 01       	movw	r24, r30
    3de8:	08 95       	ret

00003dea <__prologue_saves__>:
    3dea:	2f 92       	push	r2
    3dec:	3f 92       	push	r3
    3dee:	4f 92       	push	r4
    3df0:	5f 92       	push	r5
    3df2:	6f 92       	push	r6
    3df4:	7f 92       	push	r7
    3df6:	8f 92       	push	r8
    3df8:	9f 92       	push	r9
    3dfa:	af 92       	push	r10
    3dfc:	bf 92       	push	r11
    3dfe:	cf 92       	push	r12
    3e00:	df 92       	push	r13
    3e02:	ef 92       	push	r14
    3e04:	ff 92       	push	r15
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	ca 1b       	sub	r28, r26
    3e14:	db 0b       	sbc	r29, r27
    3e16:	0f b6       	in	r0, 0x3f	; 63
    3e18:	f8 94       	cli
    3e1a:	de bf       	out	0x3e, r29	; 62
    3e1c:	0f be       	out	0x3f, r0	; 63
    3e1e:	cd bf       	out	0x3d, r28	; 61
    3e20:	09 94       	ijmp

00003e22 <__epilogue_restores__>:
    3e22:	2a 88       	ldd	r2, Y+18	; 0x12
    3e24:	39 88       	ldd	r3, Y+17	; 0x11
    3e26:	48 88       	ldd	r4, Y+16	; 0x10
    3e28:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e30:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e32:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e34:	b9 84       	ldd	r11, Y+9	; 0x09
    3e36:	c8 84       	ldd	r12, Y+8	; 0x08
    3e38:	df 80       	ldd	r13, Y+7	; 0x07
    3e3a:	ee 80       	ldd	r14, Y+6	; 0x06
    3e3c:	fd 80       	ldd	r15, Y+5	; 0x05
    3e3e:	0c 81       	ldd	r16, Y+4	; 0x04
    3e40:	1b 81       	ldd	r17, Y+3	; 0x03
    3e42:	aa 81       	ldd	r26, Y+2	; 0x02
    3e44:	b9 81       	ldd	r27, Y+1	; 0x01
    3e46:	ce 0f       	add	r28, r30
    3e48:	d1 1d       	adc	r29, r1
    3e4a:	0f b6       	in	r0, 0x3f	; 63
    3e4c:	f8 94       	cli
    3e4e:	de bf       	out	0x3e, r29	; 62
    3e50:	0f be       	out	0x3f, r0	; 63
    3e52:	cd bf       	out	0x3d, r28	; 61
    3e54:	ed 01       	movw	r28, r26
    3e56:	08 95       	ret

00003e58 <_exit>:
    3e58:	f8 94       	cli

00003e5a <__stop_program>:
    3e5a:	ff cf       	rjmp	.-2      	; 0x3e5a <__stop_program>
