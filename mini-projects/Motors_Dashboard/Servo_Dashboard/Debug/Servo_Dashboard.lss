
Servo_Dashboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000066ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000232  00800060  000066ce  00006762  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800292  00800292  00006994  2**0
                  ALLOC
  3 .stab         00005ae4  00000000  00000000  00006994  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015cc  00000000  00000000  0000c478  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000da44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  0000dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  0000ddd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  00011557  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00012730  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  000128f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  00012be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000135b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 23 2e 	jmp	0x5c46	; 0x5c46 <__vector_6>
      1c:	0c 94 db 2d 	jmp	0x5bb6	; 0x5bb6 <__vector_7>
      20:	0c 94 93 2d 	jmp	0x5b26	; 0x5b26 <__vector_8>
      24:	0c 94 45 2d 	jmp	0x5a8a	; 0x5a8a <__vector_9>
      28:	0c 94 b7 2e 	jmp	0x5d6e	; 0x5d6e <__vector_10>
      2c:	0c 94 6b 2e 	jmp	0x5cd6	; 0x5cd6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f6 e6       	ldi	r31, 0x66	; 102
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 39       	cpi	r26, 0x92	; 146
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e9       	ldi	r26, 0x92	; 146
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3b       	cpi	r26, 0xBF	; 191
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ff 2e 	call	0x5dfe	; 0x5dfe <main>
      8a:	0c 94 65 33 	jmp	0x66ca	; 0x66ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b2 32 	jmp	0x6564	; 0x6564 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ce 32 	jmp	0x659c	; 0x659c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 be 32 	jmp	0x657c	; 0x657c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 da 32 	jmp	0x65b4	; 0x65b4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 be 32 	jmp	0x657c	; 0x657c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 da 32 	jmp	0x65b4	; 0x65b4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b2 32 	jmp	0x6564	; 0x6564 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ce 32 	jmp	0x659c	; 0x659c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ba 32 	jmp	0x6574	; 0x6574 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 d6 32 	jmp	0x65ac	; 0x65ac <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 be 32 	jmp	0x657c	; 0x657c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 da 32 	jmp	0x65b4	; 0x65b4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 be 32 	jmp	0x657c	; 0x657c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 da 32 	jmp	0x65b4	; 0x65b4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 be 32 	jmp	0x657c	; 0x657c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 da 32 	jmp	0x65b4	; 0x65b4 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 bb 32 	jmp	0x6576	; 0x6576 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 d7 32 	jmp	0x65ae	; 0x65ae <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 c2 32 	jmp	0x6584	; 0x6584 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 de 32 	jmp	0x65bc	; 0x65bc <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e7 58       	subi	r30, 0x87	; 135
     a94:	fe 4f       	sbci	r31, 0xFE	; 254
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     e00:	ea e3       	ldi	r30, 0x3A	; 58
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	8f e0       	ldi	r24, 0x0F	; 15
     e06:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     e08:	e7 e3       	ldi	r30, 0x37	; 55
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	8f e3       	ldi	r24, 0x3F	; 63
     e0e:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     e10:	e4 e3       	ldi	r30, 0x34	; 52
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	8f ef       	ldi	r24, 0xFF	; 255
     e16:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     e18:	e1 e3       	ldi	r30, 0x31	; 49
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	87 e2       	ldi	r24, 0x27	; 39
     e1e:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     e20:	eb e3       	ldi	r30, 0x3B	; 59
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	80 83       	st	Z, r24

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     e28:	e8 e3       	ldi	r30, 0x38	; 56
     e2a:	f0 e0       	ldi	r31, 0x00	; 0
     e2c:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     e2e:	e5 e3       	ldi	r30, 0x35	; 53
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     e34:	e2 e3       	ldi	r30, 0x32	; 50
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	10 82       	st	Z, r1

}
     e3a:	cf 91       	pop	r28
     e3c:	df 91       	pop	r29
     e3e:	08 95       	ret

00000e40 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     e40:	df 93       	push	r29
     e42:	cf 93       	push	r28
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	2e 97       	sbiw	r28, 0x0e	; 14
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	6b 83       	std	Y+3, r22	; 0x03
     e58:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	84 30       	cpi	r24, 0x04	; 4
     e62:	08 f0       	brcs	.+2      	; 0xe66 <DIO_u8SetPinDirection+0x26>
     e64:	0d c1       	rjmp	.+538    	; 0x1080 <DIO_u8SetPinDirection+0x240>
     e66:	8b 81       	ldd	r24, Y+3	; 0x03
     e68:	88 30       	cpi	r24, 0x08	; 8
     e6a:	08 f0       	brcs	.+2      	; 0xe6e <DIO_u8SetPinDirection+0x2e>
     e6c:	09 c1       	rjmp	.+530    	; 0x1080 <DIO_u8SetPinDirection+0x240>
     e6e:	8c 81       	ldd	r24, Y+4	; 0x04
     e70:	88 23       	and	r24, r24
     e72:	21 f0       	breq	.+8      	; 0xe7c <DIO_u8SetPinDirection+0x3c>
     e74:	8c 81       	ldd	r24, Y+4	; 0x04
     e76:	81 30       	cpi	r24, 0x01	; 1
     e78:	09 f0       	breq	.+2      	; 0xe7c <DIO_u8SetPinDirection+0x3c>
     e7a:	02 c1       	rjmp	.+516    	; 0x1080 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	3e 87       	std	Y+14, r19	; 0x0e
     e84:	2d 87       	std	Y+13, r18	; 0x0d
     e86:	8d 85       	ldd	r24, Y+13	; 0x0d
     e88:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8a:	81 30       	cpi	r24, 0x01	; 1
     e8c:	91 05       	cpc	r25, r1
     e8e:	09 f4       	brne	.+2      	; 0xe92 <DIO_u8SetPinDirection+0x52>
     e90:	4f c0       	rjmp	.+158    	; 0xf30 <DIO_u8SetPinDirection+0xf0>
     e92:	2d 85       	ldd	r18, Y+13	; 0x0d
     e94:	3e 85       	ldd	r19, Y+14	; 0x0e
     e96:	22 30       	cpi	r18, 0x02	; 2
     e98:	31 05       	cpc	r19, r1
     e9a:	2c f4       	brge	.+10     	; 0xea6 <DIO_u8SetPinDirection+0x66>
     e9c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e9e:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea0:	00 97       	sbiw	r24, 0x00	; 0
     ea2:	71 f0       	breq	.+28     	; 0xec0 <DIO_u8SetPinDirection+0x80>
     ea4:	ee c0       	rjmp	.+476    	; 0x1082 <DIO_u8SetPinDirection+0x242>
     ea6:	2d 85       	ldd	r18, Y+13	; 0x0d
     ea8:	3e 85       	ldd	r19, Y+14	; 0x0e
     eaa:	22 30       	cpi	r18, 0x02	; 2
     eac:	31 05       	cpc	r19, r1
     eae:	09 f4       	brne	.+2      	; 0xeb2 <DIO_u8SetPinDirection+0x72>
     eb0:	77 c0       	rjmp	.+238    	; 0xfa0 <DIO_u8SetPinDirection+0x160>
     eb2:	8d 85       	ldd	r24, Y+13	; 0x0d
     eb4:	9e 85       	ldd	r25, Y+14	; 0x0e
     eb6:	83 30       	cpi	r24, 0x03	; 3
     eb8:	91 05       	cpc	r25, r1
     eba:	09 f4       	brne	.+2      	; 0xebe <DIO_u8SetPinDirection+0x7e>
     ebc:	a9 c0       	rjmp	.+338    	; 0x1010 <DIO_u8SetPinDirection+0x1d0>
     ebe:	e1 c0       	rjmp	.+450    	; 0x1082 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	3c 87       	std	Y+12, r19	; 0x0c
     ec8:	2b 87       	std	Y+11, r18	; 0x0b
     eca:	8b 85       	ldd	r24, Y+11	; 0x0b
     ecc:	9c 85       	ldd	r25, Y+12	; 0x0c
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	31 f0       	breq	.+12     	; 0xede <DIO_u8SetPinDirection+0x9e>
     ed2:	2b 85       	ldd	r18, Y+11	; 0x0b
     ed4:	3c 85       	ldd	r19, Y+12	; 0x0c
     ed6:	21 30       	cpi	r18, 0x01	; 1
     ed8:	31 05       	cpc	r19, r1
     eda:	b1 f0       	breq	.+44     	; 0xf08 <DIO_u8SetPinDirection+0xc8>
     edc:	d2 c0       	rjmp	.+420    	; 0x1082 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     ede:	aa e3       	ldi	r26, 0x3A	; 58
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	ea e3       	ldi	r30, 0x3A	; 58
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_u8SetPinDirection+0xbc>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_u8SetPinDirection+0xb8>
     f00:	80 95       	com	r24
     f02:	84 23       	and	r24, r20
     f04:	8c 93       	st	X, r24
     f06:	bd c0       	rjmp	.+378    	; 0x1082 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     f08:	aa e3       	ldi	r26, 0x3A	; 58
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ea e3       	ldi	r30, 0x3A	; 58
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_u8SetPinDirection+0xe6>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_u8SetPinDirection+0xe2>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	a9 c0       	rjmp	.+338    	; 0x1082 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	3a 87       	std	Y+10, r19	; 0x0a
     f38:	29 87       	std	Y+9, r18	; 0x09
     f3a:	89 85       	ldd	r24, Y+9	; 0x09
     f3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	31 f0       	breq	.+12     	; 0xf4e <DIO_u8SetPinDirection+0x10e>
     f42:	29 85       	ldd	r18, Y+9	; 0x09
     f44:	3a 85       	ldd	r19, Y+10	; 0x0a
     f46:	21 30       	cpi	r18, 0x01	; 1
     f48:	31 05       	cpc	r19, r1
     f4a:	b1 f0       	breq	.+44     	; 0xf78 <DIO_u8SetPinDirection+0x138>
     f4c:	9a c0       	rjmp	.+308    	; 0x1082 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     f4e:	a7 e3       	ldi	r26, 0x37	; 55
     f50:	b0 e0       	ldi	r27, 0x00	; 0
     f52:	e7 e3       	ldi	r30, 0x37	; 55
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	48 2f       	mov	r20, r24
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	02 2e       	mov	r0, r18
     f66:	02 c0       	rjmp	.+4      	; 0xf6c <DIO_u8SetPinDirection+0x12c>
     f68:	88 0f       	add	r24, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	0a 94       	dec	r0
     f6e:	e2 f7       	brpl	.-8      	; 0xf68 <DIO_u8SetPinDirection+0x128>
     f70:	80 95       	com	r24
     f72:	84 23       	and	r24, r20
     f74:	8c 93       	st	X, r24
     f76:	85 c0       	rjmp	.+266    	; 0x1082 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     f78:	a7 e3       	ldi	r26, 0x37	; 55
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e7 e3       	ldi	r30, 0x37	; 55
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	48 2f       	mov	r20, r24
     f84:	8b 81       	ldd	r24, Y+3	; 0x03
     f86:	28 2f       	mov	r18, r24
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_u8SetPinDirection+0x156>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_u8SetPinDirection+0x152>
     f9a:	84 2b       	or	r24, r20
     f9c:	8c 93       	st	X, r24
     f9e:	71 c0       	rjmp	.+226    	; 0x1082 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     fa0:	8b 81       	ldd	r24, Y+3	; 0x03
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	38 87       	std	Y+8, r19	; 0x08
     fa8:	2f 83       	std	Y+7, r18	; 0x07
     faa:	8f 81       	ldd	r24, Y+7	; 0x07
     fac:	98 85       	ldd	r25, Y+8	; 0x08
     fae:	00 97       	sbiw	r24, 0x00	; 0
     fb0:	31 f0       	breq	.+12     	; 0xfbe <DIO_u8SetPinDirection+0x17e>
     fb2:	2f 81       	ldd	r18, Y+7	; 0x07
     fb4:	38 85       	ldd	r19, Y+8	; 0x08
     fb6:	21 30       	cpi	r18, 0x01	; 1
     fb8:	31 05       	cpc	r19, r1
     fba:	b1 f0       	breq	.+44     	; 0xfe8 <DIO_u8SetPinDirection+0x1a8>
     fbc:	62 c0       	rjmp	.+196    	; 0x1082 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     fbe:	a4 e3       	ldi	r26, 0x34	; 52
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e4 e3       	ldi	r30, 0x34	; 52
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_u8SetPinDirection+0x19c>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_u8SetPinDirection+0x198>
     fe0:	80 95       	com	r24
     fe2:	84 23       	and	r24, r20
     fe4:	8c 93       	st	X, r24
     fe6:	4d c0       	rjmp	.+154    	; 0x1082 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     fe8:	a4 e3       	ldi	r26, 0x34	; 52
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e4 e3       	ldi	r30, 0x34	; 52
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	48 2f       	mov	r20, r24
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	02 2e       	mov	r0, r18
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <DIO_u8SetPinDirection+0x1c6>
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <DIO_u8SetPinDirection+0x1c2>
    100a:	84 2b       	or	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	39 c0       	rjmp	.+114    	; 0x1082 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3e 83       	std	Y+6, r19	; 0x06
    1018:	2d 83       	std	Y+5, r18	; 0x05
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	31 f0       	breq	.+12     	; 0x102e <DIO_u8SetPinDirection+0x1ee>
    1022:	2d 81       	ldd	r18, Y+5	; 0x05
    1024:	3e 81       	ldd	r19, Y+6	; 0x06
    1026:	21 30       	cpi	r18, 0x01	; 1
    1028:	31 05       	cpc	r19, r1
    102a:	b1 f0       	breq	.+44     	; 0x1058 <DIO_u8SetPinDirection+0x218>
    102c:	2a c0       	rjmp	.+84     	; 0x1082 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    102e:	a1 e3       	ldi	r26, 0x31	; 49
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e1 e3       	ldi	r30, 0x31	; 49
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_u8SetPinDirection+0x20c>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_u8SetPinDirection+0x208>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	15 c0       	rjmp	.+42     	; 0x1082 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    1058:	a1 e3       	ldi	r26, 0x31	; 49
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e1 e3       	ldi	r30, 0x31	; 49
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <DIO_u8SetPinDirection+0x236>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <DIO_u8SetPinDirection+0x232>
    107a:	84 2b       	or	r24, r20
    107c:	8c 93       	st	X, r24
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1080:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
}
    1084:	2e 96       	adiw	r28, 0x0e	; 14
    1086:	0f b6       	in	r0, 0x3f	; 63
    1088:	f8 94       	cli
    108a:	de bf       	out	0x3e, r29	; 62
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	cd bf       	out	0x3d, r28	; 61
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	2e 97       	sbiw	r28, 0x0e	; 14
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	f8 94       	cli
    10a4:	de bf       	out	0x3e, r29	; 62
    10a6:	0f be       	out	0x3f, r0	; 63
    10a8:	cd bf       	out	0x3d, r28	; 61
    10aa:	8a 83       	std	Y+2, r24	; 0x02
    10ac:	6b 83       	std	Y+3, r22	; 0x03
    10ae:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	88 30       	cpi	r24, 0x08	; 8
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <DIO_u8SetPinValue+0x26>
    10ba:	0c c1       	rjmp	.+536    	; 0x12d4 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
    10bc:	8a 81       	ldd	r24, Y+2	; 0x02
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3e 87       	std	Y+14, r19	; 0x0e
    10c4:	2d 87       	std	Y+13, r18	; 0x0d
    10c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	91 05       	cpc	r25, r1
    10ce:	09 f4       	brne	.+2      	; 0x10d2 <DIO_u8SetPinValue+0x3c>
    10d0:	51 c0       	rjmp	.+162    	; 0x1174 <DIO_u8SetPinValue+0xde>
    10d2:	2d 85       	ldd	r18, Y+13	; 0x0d
    10d4:	3e 85       	ldd	r19, Y+14	; 0x0e
    10d6:	22 30       	cpi	r18, 0x02	; 2
    10d8:	31 05       	cpc	r19, r1
    10da:	2c f4       	brge	.+10     	; 0x10e6 <DIO_u8SetPinValue+0x50>
    10dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    10de:	9e 85       	ldd	r25, Y+14	; 0x0e
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	71 f0       	breq	.+28     	; 0x1100 <DIO_u8SetPinValue+0x6a>
    10e4:	f5 c0       	rjmp	.+490    	; 0x12d0 <DIO_u8SetPinValue+0x23a>
    10e6:	2d 85       	ldd	r18, Y+13	; 0x0d
    10e8:	3e 85       	ldd	r19, Y+14	; 0x0e
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	09 f4       	brne	.+2      	; 0x10f2 <DIO_u8SetPinValue+0x5c>
    10f0:	7b c0       	rjmp	.+246    	; 0x11e8 <DIO_u8SetPinValue+0x152>
    10f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f6:	83 30       	cpi	r24, 0x03	; 3
    10f8:	91 05       	cpc	r25, r1
    10fa:	09 f4       	brne	.+2      	; 0x10fe <DIO_u8SetPinValue+0x68>
    10fc:	af c0       	rjmp	.+350    	; 0x125c <DIO_u8SetPinValue+0x1c6>
    10fe:	e8 c0       	rjmp	.+464    	; 0x12d0 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3c 87       	std	Y+12, r19	; 0x0c
    1108:	2b 87       	std	Y+11, r18	; 0x0b
    110a:	8b 85       	ldd	r24, Y+11	; 0x0b
    110c:	9c 85       	ldd	r25, Y+12	; 0x0c
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	31 f0       	breq	.+12     	; 0x111e <DIO_u8SetPinValue+0x88>
    1112:	2b 85       	ldd	r18, Y+11	; 0x0b
    1114:	3c 85       	ldd	r19, Y+12	; 0x0c
    1116:	21 30       	cpi	r18, 0x01	; 1
    1118:	31 05       	cpc	r19, r1
    111a:	b1 f0       	breq	.+44     	; 0x1148 <DIO_u8SetPinValue+0xb2>
    111c:	29 c0       	rjmp	.+82     	; 0x1170 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    111e:	ab e3       	ldi	r26, 0x3B	; 59
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	eb e3       	ldi	r30, 0x3B	; 59
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_u8SetPinValue+0xa6>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_u8SetPinValue+0xa2>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	c7 c0       	rjmp	.+398    	; 0x12d6 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1148:	ab e3       	ldi	r26, 0x3B	; 59
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	eb e3       	ldi	r30, 0x3B	; 59
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8SetPinValue+0xd0>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8SetPinValue+0xcc>
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	b3 c0       	rjmp	.+358    	; 0x12d6 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1170:	19 82       	std	Y+1, r1	; 0x01
    1172:	b1 c0       	rjmp	.+354    	; 0x12d6 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	3a 87       	std	Y+10, r19	; 0x0a
    117c:	29 87       	std	Y+9, r18	; 0x09
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	31 f0       	breq	.+12     	; 0x1192 <DIO_u8SetPinValue+0xfc>
    1186:	29 85       	ldd	r18, Y+9	; 0x09
    1188:	3a 85       	ldd	r19, Y+10	; 0x0a
    118a:	21 30       	cpi	r18, 0x01	; 1
    118c:	31 05       	cpc	r19, r1
    118e:	b1 f0       	breq	.+44     	; 0x11bc <DIO_u8SetPinValue+0x126>
    1190:	29 c0       	rjmp	.+82     	; 0x11e4 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1192:	a8 e3       	ldi	r26, 0x38	; 56
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e8 e3       	ldi	r30, 0x38	; 56
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8SetPinValue+0x11a>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8SetPinValue+0x116>
    11b4:	80 95       	com	r24
    11b6:	84 23       	and	r24, r20
    11b8:	8c 93       	st	X, r24
    11ba:	8d c0       	rjmp	.+282    	; 0x12d6 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    11bc:	a8 e3       	ldi	r26, 0x38	; 56
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e8 e3       	ldi	r30, 0x38	; 56
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <DIO_u8SetPinValue+0x144>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <DIO_u8SetPinValue+0x140>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	79 c0       	rjmp	.+242    	; 0x12d6 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    11e4:	19 82       	std	Y+1, r1	; 0x01
    11e6:	77 c0       	rjmp	.+238    	; 0x12d6 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    11e8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	38 87       	std	Y+8, r19	; 0x08
    11f0:	2f 83       	std	Y+7, r18	; 0x07
    11f2:	8f 81       	ldd	r24, Y+7	; 0x07
    11f4:	98 85       	ldd	r25, Y+8	; 0x08
    11f6:	00 97       	sbiw	r24, 0x00	; 0
    11f8:	31 f0       	breq	.+12     	; 0x1206 <DIO_u8SetPinValue+0x170>
    11fa:	2f 81       	ldd	r18, Y+7	; 0x07
    11fc:	38 85       	ldd	r19, Y+8	; 0x08
    11fe:	21 30       	cpi	r18, 0x01	; 1
    1200:	31 05       	cpc	r19, r1
    1202:	b1 f0       	breq	.+44     	; 0x1230 <DIO_u8SetPinValue+0x19a>
    1204:	29 c0       	rjmp	.+82     	; 0x1258 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1206:	a5 e3       	ldi	r26, 0x35	; 53
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e3       	ldi	r30, 0x35	; 53
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 2e       	mov	r0, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_u8SetPinValue+0x18e>
    1220:	88 0f       	add	r24, r24
    1222:	99 1f       	adc	r25, r25
    1224:	0a 94       	dec	r0
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_u8SetPinValue+0x18a>
    1228:	80 95       	com	r24
    122a:	84 23       	and	r24, r20
    122c:	8c 93       	st	X, r24
    122e:	53 c0       	rjmp	.+166    	; 0x12d6 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1230:	a5 e3       	ldi	r26, 0x35	; 53
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <DIO_u8SetPinValue+0x1b8>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <DIO_u8SetPinValue+0x1b4>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	3f c0       	rjmp	.+126    	; 0x12d6 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1258:	19 82       	std	Y+1, r1	; 0x01
    125a:	3d c0       	rjmp	.+122    	; 0x12d6 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    125c:	8c 81       	ldd	r24, Y+4	; 0x04
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	3e 83       	std	Y+6, r19	; 0x06
    1264:	2d 83       	std	Y+5, r18	; 0x05
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	31 f0       	breq	.+12     	; 0x127a <DIO_u8SetPinValue+0x1e4>
    126e:	2d 81       	ldd	r18, Y+5	; 0x05
    1270:	3e 81       	ldd	r19, Y+6	; 0x06
    1272:	21 30       	cpi	r18, 0x01	; 1
    1274:	31 05       	cpc	r19, r1
    1276:	b1 f0       	breq	.+44     	; 0x12a4 <DIO_u8SetPinValue+0x20e>
    1278:	29 c0       	rjmp	.+82     	; 0x12cc <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    127a:	a2 e3       	ldi	r26, 0x32	; 50
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e2 e3       	ldi	r30, 0x32	; 50
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	48 2f       	mov	r20, r24
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	02 2e       	mov	r0, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8SetPinValue+0x202>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8SetPinValue+0x1fe>
    129c:	80 95       	com	r24
    129e:	84 23       	and	r24, r20
    12a0:	8c 93       	st	X, r24
    12a2:	19 c0       	rjmp	.+50     	; 0x12d6 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    12a4:	a2 e3       	ldi	r26, 0x32	; 50
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e2 e3       	ldi	r30, 0x32	; 50
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_u8SetPinValue+0x22c>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_u8SetPinValue+0x228>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	05 c0       	rjmp	.+10     	; 0x12d6 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    12cc:	19 82       	std	Y+1, r1	; 0x01
    12ce:	03 c0       	rjmp	.+6      	; 0x12d6 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    12d0:	19 82       	std	Y+1, r1	; 0x01
    12d2:	01 c0       	rjmp	.+2      	; 0x12d6 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12d8:	2e 96       	adiw	r28, 0x0e	; 14
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
    12f2:	28 97       	sbiw	r28, 0x08	; 8
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	de bf       	out	0x3e, r29	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	cd bf       	out	0x3d, r28	; 61
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    1300:	6c 83       	std	Y+4, r22	; 0x04
    1302:	5e 83       	std	Y+6, r21	; 0x06
    1304:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	84 30       	cpi	r24, 0x04	; 4
    130e:	08 f0       	brcs	.+2      	; 0x1312 <DIO_u8GetPinValue+0x28>
    1310:	a1 c0       	rjmp	.+322    	; 0x1454 <DIO_u8GetPinValue+0x16a>
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	88 30       	cpi	r24, 0x08	; 8
    1316:	08 f0       	brcs	.+2      	; 0x131a <DIO_u8GetPinValue+0x30>
    1318:	9d c0       	rjmp	.+314    	; 0x1454 <DIO_u8GetPinValue+0x16a>
    131a:	8d 81       	ldd	r24, Y+5	; 0x05
    131c:	9e 81       	ldd	r25, Y+6	; 0x06
    131e:	00 97       	sbiw	r24, 0x00	; 0
    1320:	09 f4       	brne	.+2      	; 0x1324 <DIO_u8GetPinValue+0x3a>
    1322:	98 c0       	rjmp	.+304    	; 0x1454 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	38 87       	std	Y+8, r19	; 0x08
    132c:	2f 83       	std	Y+7, r18	; 0x07
    132e:	4f 81       	ldd	r20, Y+7	; 0x07
    1330:	58 85       	ldd	r21, Y+8	; 0x08
    1332:	41 30       	cpi	r20, 0x01	; 1
    1334:	51 05       	cpc	r21, r1
    1336:	a9 f1       	breq	.+106    	; 0x13a2 <DIO_u8GetPinValue+0xb8>
    1338:	8f 81       	ldd	r24, Y+7	; 0x07
    133a:	98 85       	ldd	r25, Y+8	; 0x08
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	91 05       	cpc	r25, r1
    1340:	34 f4       	brge	.+12     	; 0x134e <DIO_u8GetPinValue+0x64>
    1342:	2f 81       	ldd	r18, Y+7	; 0x07
    1344:	38 85       	ldd	r19, Y+8	; 0x08
    1346:	21 15       	cp	r18, r1
    1348:	31 05       	cpc	r19, r1
    134a:	71 f0       	breq	.+28     	; 0x1368 <DIO_u8GetPinValue+0x7e>
    134c:	81 c0       	rjmp	.+258    	; 0x1450 <DIO_u8GetPinValue+0x166>
    134e:	4f 81       	ldd	r20, Y+7	; 0x07
    1350:	58 85       	ldd	r21, Y+8	; 0x08
    1352:	42 30       	cpi	r20, 0x02	; 2
    1354:	51 05       	cpc	r21, r1
    1356:	09 f4       	brne	.+2      	; 0x135a <DIO_u8GetPinValue+0x70>
    1358:	41 c0       	rjmp	.+130    	; 0x13dc <DIO_u8GetPinValue+0xf2>
    135a:	8f 81       	ldd	r24, Y+7	; 0x07
    135c:	98 85       	ldd	r25, Y+8	; 0x08
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <DIO_u8GetPinValue+0x7c>
    1364:	58 c0       	rjmp	.+176    	; 0x1416 <DIO_u8GetPinValue+0x12c>
    1366:	74 c0       	rjmp	.+232    	; 0x1450 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    1368:	e9 e3       	ldi	r30, 0x39	; 57
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	80 81       	ld	r24, Z
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	8c 81       	ldd	r24, Y+4	; 0x04
    1374:	88 2f       	mov	r24, r24
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	a9 01       	movw	r20, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_u8GetPinValue+0x96>
    137c:	55 95       	asr	r21
    137e:	47 95       	ror	r20
    1380:	8a 95       	dec	r24
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_u8GetPinValue+0x92>
    1384:	ca 01       	movw	r24, r20
    1386:	81 70       	andi	r24, 0x01	; 1
    1388:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	88 23       	and	r24, r24
    138e:	21 f4       	brne	.+8      	; 0x1398 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1390:	ed 81       	ldd	r30, Y+5	; 0x05
    1392:	fe 81       	ldd	r31, Y+6	; 0x06
    1394:	10 82       	st	Z, r1
    1396:	5f c0       	rjmp	.+190    	; 0x1456 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1398:	ed 81       	ldd	r30, Y+5	; 0x05
    139a:	fe 81       	ldd	r31, Y+6	; 0x06
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 83       	st	Z, r24
    13a0:	5a c0       	rjmp	.+180    	; 0x1456 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    13a2:	e6 e3       	ldi	r30, 0x36	; 54
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	8c 81       	ldd	r24, Y+4	; 0x04
    13ae:	88 2f       	mov	r24, r24
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	a9 01       	movw	r20, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_u8GetPinValue+0xd0>
    13b6:	55 95       	asr	r21
    13b8:	47 95       	ror	r20
    13ba:	8a 95       	dec	r24
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_u8GetPinValue+0xcc>
    13be:	ca 01       	movw	r24, r20
    13c0:	81 70       	andi	r24, 0x01	; 1
    13c2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	88 23       	and	r24, r24
    13c8:	21 f4       	brne	.+8      	; 0x13d2 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    13ca:	ed 81       	ldd	r30, Y+5	; 0x05
    13cc:	fe 81       	ldd	r31, Y+6	; 0x06
    13ce:	10 82       	st	Z, r1
    13d0:	42 c0       	rjmp	.+132    	; 0x1456 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    13d2:	ed 81       	ldd	r30, Y+5	; 0x05
    13d4:	fe 81       	ldd	r31, Y+6	; 0x06
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	80 83       	st	Z, r24
    13da:	3d c0       	rjmp	.+122    	; 0x1456 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    13dc:	e3 e3       	ldi	r30, 0x33	; 51
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a9 01       	movw	r20, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_u8GetPinValue+0x10a>
    13f0:	55 95       	asr	r21
    13f2:	47 95       	ror	r20
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_u8GetPinValue+0x106>
    13f8:	ca 01       	movw	r24, r20
    13fa:	81 70       	andi	r24, 0x01	; 1
    13fc:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    13fe:	89 81       	ldd	r24, Y+1	; 0x01
    1400:	88 23       	and	r24, r24
    1402:	21 f4       	brne	.+8      	; 0x140c <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1404:	ed 81       	ldd	r30, Y+5	; 0x05
    1406:	fe 81       	ldd	r31, Y+6	; 0x06
    1408:	10 82       	st	Z, r1
    140a:	25 c0       	rjmp	.+74     	; 0x1456 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    140c:	ed 81       	ldd	r30, Y+5	; 0x05
    140e:	fe 81       	ldd	r31, Y+6	; 0x06
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	80 83       	st	Z, r24
    1414:	20 c0       	rjmp	.+64     	; 0x1456 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1416:	e0 e3       	ldi	r30, 0x30	; 48
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	8c 81       	ldd	r24, Y+4	; 0x04
    1422:	88 2f       	mov	r24, r24
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a9 01       	movw	r20, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <DIO_u8GetPinValue+0x144>
    142a:	55 95       	asr	r21
    142c:	47 95       	ror	r20
    142e:	8a 95       	dec	r24
    1430:	e2 f7       	brpl	.-8      	; 0x142a <DIO_u8GetPinValue+0x140>
    1432:	ca 01       	movw	r24, r20
    1434:	81 70       	andi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	88 23       	and	r24, r24
    143c:	21 f4       	brne	.+8      	; 0x1446 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    143e:	ed 81       	ldd	r30, Y+5	; 0x05
    1440:	fe 81       	ldd	r31, Y+6	; 0x06
    1442:	10 82       	st	Z, r1
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1446:	ed 81       	ldd	r30, Y+5	; 0x05
    1448:	fe 81       	ldd	r31, Y+6	; 0x06
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	80 83       	st	Z, r24
    144e:	03 c0       	rjmp	.+6      	; 0x1456 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    1450:	1a 82       	std	Y+2, r1	; 0x02
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1454:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1458:	28 96       	adiw	r28, 0x08	; 8
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	2d 97       	sbiw	r28, 0x0d	; 13
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	8a 83       	std	Y+2, r24	; 0x02
    1480:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    1486:	8b 81       	ldd	r24, Y+3	; 0x03
    1488:	88 23       	and	r24, r24
    148a:	21 f0       	breq	.+8      	; 0x1494 <DIO_u8SetPortDirection+0x2a>
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	81 30       	cpi	r24, 0x01	; 1
    1490:	09 f0       	breq	.+2      	; 0x1494 <DIO_u8SetPortDirection+0x2a>
    1492:	82 c0       	rjmp	.+260    	; 0x1598 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    1494:	8a 81       	ldd	r24, Y+2	; 0x02
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	3d 87       	std	Y+13, r19	; 0x0d
    149c:	2c 87       	std	Y+12, r18	; 0x0c
    149e:	8c 85       	ldd	r24, Y+12	; 0x0c
    14a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	91 05       	cpc	r25, r1
    14a6:	71 f1       	breq	.+92     	; 0x1504 <DIO_u8SetPortDirection+0x9a>
    14a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    14ac:	22 30       	cpi	r18, 0x02	; 2
    14ae:	31 05       	cpc	r19, r1
    14b0:	2c f4       	brge	.+10     	; 0x14bc <DIO_u8SetPortDirection+0x52>
    14b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    14b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	69 f0       	breq	.+26     	; 0x14d4 <DIO_u8SetPortDirection+0x6a>
    14ba:	6c c0       	rjmp	.+216    	; 0x1594 <DIO_u8SetPortDirection+0x12a>
    14bc:	2c 85       	ldd	r18, Y+12	; 0x0c
    14be:	3d 85       	ldd	r19, Y+13	; 0x0d
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	b9 f1       	breq	.+110    	; 0x1534 <DIO_u8SetPortDirection+0xca>
    14c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    14c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    14ca:	83 30       	cpi	r24, 0x03	; 3
    14cc:	91 05       	cpc	r25, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <DIO_u8SetPortDirection+0x68>
    14d0:	49 c0       	rjmp	.+146    	; 0x1564 <DIO_u8SetPortDirection+0xfa>
    14d2:	60 c0       	rjmp	.+192    	; 0x1594 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	3b 87       	std	Y+11, r19	; 0x0b
    14dc:	2a 87       	std	Y+10, r18	; 0x0a
    14de:	8a 85       	ldd	r24, Y+10	; 0x0a
    14e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	31 f0       	breq	.+12     	; 0x14f2 <DIO_u8SetPortDirection+0x88>
    14e6:	2a 85       	ldd	r18, Y+10	; 0x0a
    14e8:	3b 85       	ldd	r19, Y+11	; 0x0b
    14ea:	21 30       	cpi	r18, 0x01	; 1
    14ec:	31 05       	cpc	r19, r1
    14ee:	29 f0       	breq	.+10     	; 0x14fa <DIO_u8SetPortDirection+0x90>
    14f0:	54 c0       	rjmp	.+168    	; 0x159a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    14f2:	ea e3       	ldi	r30, 0x3A	; 58
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	10 82       	st	Z, r1
    14f8:	50 c0       	rjmp	.+160    	; 0x159a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    14fa:	ea e3       	ldi	r30, 0x3A	; 58
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8f ef       	ldi	r24, 0xFF	; 255
    1500:	80 83       	st	Z, r24
    1502:	4b c0       	rjmp	.+150    	; 0x159a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	39 87       	std	Y+9, r19	; 0x09
    150c:	28 87       	std	Y+8, r18	; 0x08
    150e:	88 85       	ldd	r24, Y+8	; 0x08
    1510:	99 85       	ldd	r25, Y+9	; 0x09
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	31 f0       	breq	.+12     	; 0x1522 <DIO_u8SetPortDirection+0xb8>
    1516:	28 85       	ldd	r18, Y+8	; 0x08
    1518:	39 85       	ldd	r19, Y+9	; 0x09
    151a:	21 30       	cpi	r18, 0x01	; 1
    151c:	31 05       	cpc	r19, r1
    151e:	29 f0       	breq	.+10     	; 0x152a <DIO_u8SetPortDirection+0xc0>
    1520:	3c c0       	rjmp	.+120    	; 0x159a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    1522:	e7 e3       	ldi	r30, 0x37	; 55
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	10 82       	st	Z, r1
    1528:	38 c0       	rjmp	.+112    	; 0x159a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    152a:	e7 e3       	ldi	r30, 0x37	; 55
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	80 83       	st	Z, r24
    1532:	33 c0       	rjmp	.+102    	; 0x159a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	3f 83       	std	Y+7, r19	; 0x07
    153c:	2e 83       	std	Y+6, r18	; 0x06
    153e:	8e 81       	ldd	r24, Y+6	; 0x06
    1540:	9f 81       	ldd	r25, Y+7	; 0x07
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	31 f0       	breq	.+12     	; 0x1552 <DIO_u8SetPortDirection+0xe8>
    1546:	2e 81       	ldd	r18, Y+6	; 0x06
    1548:	3f 81       	ldd	r19, Y+7	; 0x07
    154a:	21 30       	cpi	r18, 0x01	; 1
    154c:	31 05       	cpc	r19, r1
    154e:	29 f0       	breq	.+10     	; 0x155a <DIO_u8SetPortDirection+0xf0>
    1550:	24 c0       	rjmp	.+72     	; 0x159a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    1552:	e4 e3       	ldi	r30, 0x34	; 52
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	10 82       	st	Z, r1
    1558:	20 c0       	rjmp	.+64     	; 0x159a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    155a:	e4 e3       	ldi	r30, 0x34	; 52
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	8f ef       	ldi	r24, 0xFF	; 255
    1560:	80 83       	st	Z, r24
    1562:	1b c0       	rjmp	.+54     	; 0x159a <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	28 2f       	mov	r18, r24
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	3d 83       	std	Y+5, r19	; 0x05
    156c:	2c 83       	std	Y+4, r18	; 0x04
    156e:	8c 81       	ldd	r24, Y+4	; 0x04
    1570:	9d 81       	ldd	r25, Y+5	; 0x05
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	31 f0       	breq	.+12     	; 0x1582 <DIO_u8SetPortDirection+0x118>
    1576:	2c 81       	ldd	r18, Y+4	; 0x04
    1578:	3d 81       	ldd	r19, Y+5	; 0x05
    157a:	21 30       	cpi	r18, 0x01	; 1
    157c:	31 05       	cpc	r19, r1
    157e:	29 f0       	breq	.+10     	; 0x158a <DIO_u8SetPortDirection+0x120>
    1580:	0c c0       	rjmp	.+24     	; 0x159a <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    1582:	e1 e3       	ldi	r30, 0x31	; 49
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	10 82       	st	Z, r1
    1588:	08 c0       	rjmp	.+16     	; 0x159a <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    158a:	e1 e3       	ldi	r30, 0x31	; 49
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	80 83       	st	Z, r24
    1592:	03 c0       	rjmp	.+6      	; 0x159a <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1594:	19 82       	std	Y+1, r1	; 0x01
    1596:	01 c0       	rjmp	.+2      	; 0x159a <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1598:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    159a:	89 81       	ldd	r24, Y+1	; 0x01
}
    159c:	2d 96       	adiw	r28, 0x0d	; 13
    159e:	0f b6       	in	r0, 0x3f	; 63
    15a0:	f8 94       	cli
    15a2:	de bf       	out	0x3e, r29	; 62
    15a4:	0f be       	out	0x3f, r0	; 63
    15a6:	cd bf       	out	0x3d, r28	; 61
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <DIO_u8SetPortValue+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <DIO_u8SetPortValue+0x8>
    15b6:	0f 92       	push	r0
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	8a 83       	std	Y+2, r24	; 0x02
    15be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	3d 83       	std	Y+5, r19	; 0x05
    15cc:	2c 83       	std	Y+4, r18	; 0x04
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	81 30       	cpi	r24, 0x01	; 1
    15d4:	91 05       	cpc	r25, r1
    15d6:	d1 f0       	breq	.+52     	; 0x160c <DIO_u8SetPortValue+0x5e>
    15d8:	2c 81       	ldd	r18, Y+4	; 0x04
    15da:	3d 81       	ldd	r19, Y+5	; 0x05
    15dc:	22 30       	cpi	r18, 0x02	; 2
    15de:	31 05       	cpc	r19, r1
    15e0:	2c f4       	brge	.+10     	; 0x15ec <DIO_u8SetPortValue+0x3e>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	61 f0       	breq	.+24     	; 0x1602 <DIO_u8SetPortValue+0x54>
    15ea:	1f c0       	rjmp	.+62     	; 0x162a <DIO_u8SetPortValue+0x7c>
    15ec:	2c 81       	ldd	r18, Y+4	; 0x04
    15ee:	3d 81       	ldd	r19, Y+5	; 0x05
    15f0:	22 30       	cpi	r18, 0x02	; 2
    15f2:	31 05       	cpc	r19, r1
    15f4:	81 f0       	breq	.+32     	; 0x1616 <DIO_u8SetPortValue+0x68>
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	9d 81       	ldd	r25, Y+5	; 0x05
    15fa:	83 30       	cpi	r24, 0x03	; 3
    15fc:	91 05       	cpc	r25, r1
    15fe:	81 f0       	breq	.+32     	; 0x1620 <DIO_u8SetPortValue+0x72>
    1600:	14 c0       	rjmp	.+40     	; 0x162a <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    1602:	eb e3       	ldi	r30, 0x3B	; 59
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	80 83       	st	Z, r24
    160a:	10 c0       	rjmp	.+32     	; 0x162c <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    160c:	e8 e3       	ldi	r30, 0x38	; 56
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	80 83       	st	Z, r24
    1614:	0b c0       	rjmp	.+22     	; 0x162c <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    1616:	e5 e3       	ldi	r30, 0x35	; 53
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	80 83       	st	Z, r24
    161e:	06 c0       	rjmp	.+12     	; 0x162c <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    1620:	e2 e3       	ldi	r30, 0x32	; 50
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	80 83       	st	Z, r24
    1628:	01 c0       	rjmp	.+2      	; 0x162c <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    162a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    162c:	89 81       	ldd	r24, Y+1	; 0x01
}
    162e:	0f 90       	pop	r0
    1630:	0f 90       	pop	r0
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	00 d0       	rcall	.+0      	; 0x1644 <DIO_u8GetPortValue+0x6>
    1644:	00 d0       	rcall	.+0      	; 0x1646 <DIO_u8GetPortValue+0x8>
    1646:	00 d0       	rcall	.+0      	; 0x1648 <DIO_u8GetPortValue+0xa>
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	8a 83       	std	Y+2, r24	; 0x02
    164e:	7c 83       	std	Y+4, r23	; 0x04
    1650:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	9c 81       	ldd	r25, Y+4	; 0x04
    165a:	00 97       	sbiw	r24, 0x00	; 0
    165c:	e9 f1       	breq	.+122    	; 0x16d8 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    165e:	8a 81       	ldd	r24, Y+2	; 0x02
    1660:	28 2f       	mov	r18, r24
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	3e 83       	std	Y+6, r19	; 0x06
    1666:	2d 83       	std	Y+5, r18	; 0x05
    1668:	8d 81       	ldd	r24, Y+5	; 0x05
    166a:	9e 81       	ldd	r25, Y+6	; 0x06
    166c:	81 30       	cpi	r24, 0x01	; 1
    166e:	91 05       	cpc	r25, r1
    1670:	e1 f0       	breq	.+56     	; 0x16aa <DIO_u8GetPortValue+0x6c>
    1672:	2d 81       	ldd	r18, Y+5	; 0x05
    1674:	3e 81       	ldd	r19, Y+6	; 0x06
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	2c f4       	brge	.+10     	; 0x1686 <DIO_u8GetPortValue+0x48>
    167c:	8d 81       	ldd	r24, Y+5	; 0x05
    167e:	9e 81       	ldd	r25, Y+6	; 0x06
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	61 f0       	breq	.+24     	; 0x169c <DIO_u8GetPortValue+0x5e>
    1684:	27 c0       	rjmp	.+78     	; 0x16d4 <DIO_u8GetPortValue+0x96>
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	3e 81       	ldd	r19, Y+6	; 0x06
    168a:	22 30       	cpi	r18, 0x02	; 2
    168c:	31 05       	cpc	r19, r1
    168e:	a1 f0       	breq	.+40     	; 0x16b8 <DIO_u8GetPortValue+0x7a>
    1690:	8d 81       	ldd	r24, Y+5	; 0x05
    1692:	9e 81       	ldd	r25, Y+6	; 0x06
    1694:	83 30       	cpi	r24, 0x03	; 3
    1696:	91 05       	cpc	r25, r1
    1698:	b1 f0       	breq	.+44     	; 0x16c6 <DIO_u8GetPortValue+0x88>
    169a:	1c c0       	rjmp	.+56     	; 0x16d4 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    169c:	e9 e3       	ldi	r30, 0x39	; 57
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	eb 81       	ldd	r30, Y+3	; 0x03
    16a4:	fc 81       	ldd	r31, Y+4	; 0x04
    16a6:	80 83       	st	Z, r24
    16a8:	18 c0       	rjmp	.+48     	; 0x16da <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    16aa:	e6 e3       	ldi	r30, 0x36	; 54
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	eb 81       	ldd	r30, Y+3	; 0x03
    16b2:	fc 81       	ldd	r31, Y+4	; 0x04
    16b4:	80 83       	st	Z, r24
    16b6:	11 c0       	rjmp	.+34     	; 0x16da <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    16b8:	e3 e3       	ldi	r30, 0x33	; 51
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	eb 81       	ldd	r30, Y+3	; 0x03
    16c0:	fc 81       	ldd	r31, Y+4	; 0x04
    16c2:	80 83       	st	Z, r24
    16c4:	0a c0       	rjmp	.+20     	; 0x16da <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    16c6:	e0 e3       	ldi	r30, 0x30	; 48
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	eb 81       	ldd	r30, Y+3	; 0x03
    16ce:	fc 81       	ldd	r31, Y+4	; 0x04
    16d0:	80 83       	st	Z, r24
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    16d4:	19 82       	std	Y+1, r1	; 0x01
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    16d8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    16da:	89 81       	ldd	r24, Y+1	; 0x01
    16dc:	26 96       	adiw	r28, 0x06	; 6
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <Dashboard_FrameOne>:

u8 Local_u8Ind = 0;
u8 Local_Au8digits[6] = {0};
u8 Local_Au8digitsServo[6] = {0};
void Dashboard_FrameOne(void)
{
    16ee:	0f 93       	push	r16
    16f0:	1f 93       	push	r17
    16f2:	df 93       	push	r29
    16f4:	cf 93       	push	r28
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	c7 54       	subi	r28, 0x47	; 71
    16fc:	d0 40       	sbci	r29, 0x00	; 0
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;

	LCD_voidClearScreen();
    1708:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    170c:	fe 01       	movw	r30, r28
    170e:	ed 5b       	subi	r30, 0xBD	; 189
    1710:	ff 4f       	sbci	r31, 0xFF	; 255
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	a0 ea       	ldi	r26, 0xA0	; 160
    1718:	b1 e4       	ldi	r27, 0x41	; 65
    171a:	80 83       	st	Z, r24
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	a2 83       	std	Z+2, r26	; 0x02
    1720:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1722:	8e 01       	movw	r16, r28
    1724:	01 5c       	subi	r16, 0xC1	; 193
    1726:	1f 4f       	sbci	r17, 0xFF	; 255
    1728:	fe 01       	movw	r30, r28
    172a:	ed 5b       	subi	r30, 0xBD	; 189
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	60 81       	ld	r22, Z
    1730:	71 81       	ldd	r23, Z+1	; 0x01
    1732:	82 81       	ldd	r24, Z+2	; 0x02
    1734:	93 81       	ldd	r25, Z+3	; 0x03
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	4a ef       	ldi	r20, 0xFA	; 250
    173c:	54 e4       	ldi	r21, 0x44	; 68
    173e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1742:	dc 01       	movw	r26, r24
    1744:	cb 01       	movw	r24, r22
    1746:	f8 01       	movw	r30, r16
    1748:	80 83       	st	Z, r24
    174a:	91 83       	std	Z+1, r25	; 0x01
    174c:	a2 83       	std	Z+2, r26	; 0x02
    174e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1750:	fe 01       	movw	r30, r28
    1752:	ff 96       	adiw	r30, 0x3f	; 63
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	20 e0       	ldi	r18, 0x00	; 0
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	40 e8       	ldi	r20, 0x80	; 128
    1762:	5f e3       	ldi	r21, 0x3F	; 63
    1764:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1768:	88 23       	and	r24, r24
    176a:	2c f4       	brge	.+10     	; 0x1776 <Dashboard_FrameOne+0x88>
		__ticks = 1;
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	9e af       	std	Y+62, r25	; 0x3e
    1772:	8d af       	std	Y+61, r24	; 0x3d
    1774:	46 c0       	rjmp	.+140    	; 0x1802 <Dashboard_FrameOne+0x114>
	else if (__tmp > 65535)
    1776:	fe 01       	movw	r30, r28
    1778:	ff 96       	adiw	r30, 0x3f	; 63
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	82 81       	ldd	r24, Z+2	; 0x02
    1780:	93 81       	ldd	r25, Z+3	; 0x03
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	64 f5       	brge	.+88     	; 0x17ea <Dashboard_FrameOne+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	fe 01       	movw	r30, r28
    1794:	ed 5b       	subi	r30, 0xBD	; 189
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	60 81       	ld	r22, Z
    179a:	71 81       	ldd	r23, Z+1	; 0x01
    179c:	82 81       	ldd	r24, Z+2	; 0x02
    179e:	93 81       	ldd	r25, Z+3	; 0x03
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e2       	ldi	r20, 0x20	; 32
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	9e af       	std	Y+62, r25	; 0x3e
    17be:	8d af       	std	Y+61, r24	; 0x3d
    17c0:	0f c0       	rjmp	.+30     	; 0x17e0 <Dashboard_FrameOne+0xf2>
    17c2:	88 ec       	ldi	r24, 0xC8	; 200
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	9c af       	std	Y+60, r25	; 0x3c
    17c8:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    17cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    17ce:	01 97       	sbiw	r24, 0x01	; 1
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <Dashboard_FrameOne+0xe0>
    17d2:	9c af       	std	Y+60, r25	; 0x3c
    17d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9e af       	std	Y+62, r25	; 0x3e
    17de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17e4:	00 97       	sbiw	r24, 0x00	; 0
    17e6:	69 f7       	brne	.-38     	; 0x17c2 <Dashboard_FrameOne+0xd4>
    17e8:	16 c0       	rjmp	.+44     	; 0x1816 <Dashboard_FrameOne+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17ea:	fe 01       	movw	r30, r28
    17ec:	ff 96       	adiw	r30, 0x3f	; 63
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	9e af       	std	Y+62, r25	; 0x3e
    1800:	8d af       	std	Y+61, r24	; 0x3d
    1802:	8d ad       	ldd	r24, Y+61	; 0x3d
    1804:	9e ad       	ldd	r25, Y+62	; 0x3e
    1806:	9a af       	std	Y+58, r25	; 0x3a
    1808:	89 af       	std	Y+57, r24	; 0x39
    180a:	89 ad       	ldd	r24, Y+57	; 0x39
    180c:	9a ad       	ldd	r25, Y+58	; 0x3a
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <Dashboard_FrameOne+0x120>
    1812:	9a af       	std	Y+58, r25	; 0x3a
    1814:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_voidWriteString((u8*)" Choose Type of ");
    1816:	80 e6       	ldi	r24, 0x60	; 96
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,7);
    181e:	82 e0       	ldi	r24, 0x02	; 2
    1820:	67 e0       	ldi	r22, 0x07	; 7
    1822:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)" Motor ");
    1826:	81 e7       	ldi	r24, 0x71	; 113
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	aa e7       	ldi	r26, 0x7A	; 122
    1834:	b4 e4       	ldi	r27, 0x44	; 68
    1836:	8d ab       	std	Y+53, r24	; 0x35
    1838:	9e ab       	std	Y+54, r25	; 0x36
    183a:	af ab       	std	Y+55, r26	; 0x37
    183c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    183e:	6d a9       	ldd	r22, Y+53	; 0x35
    1840:	7e a9       	ldd	r23, Y+54	; 0x36
    1842:	8f a9       	ldd	r24, Y+55	; 0x37
    1844:	98 ad       	ldd	r25, Y+56	; 0x38
    1846:	20 e0       	ldi	r18, 0x00	; 0
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	4a ef       	ldi	r20, 0xFA	; 250
    184c:	54 e4       	ldi	r21, 0x44	; 68
    184e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	89 ab       	std	Y+49, r24	; 0x31
    1858:	9a ab       	std	Y+50, r25	; 0x32
    185a:	ab ab       	std	Y+51, r26	; 0x33
    185c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    185e:	69 a9       	ldd	r22, Y+49	; 0x31
    1860:	7a a9       	ldd	r23, Y+50	; 0x32
    1862:	8b a9       	ldd	r24, Y+51	; 0x33
    1864:	9c a9       	ldd	r25, Y+52	; 0x34
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e8       	ldi	r20, 0x80	; 128
    186c:	5f e3       	ldi	r21, 0x3F	; 63
    186e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1872:	88 23       	and	r24, r24
    1874:	2c f4       	brge	.+10     	; 0x1880 <Dashboard_FrameOne+0x192>
		__ticks = 1;
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	98 ab       	std	Y+48, r25	; 0x30
    187c:	8f a7       	std	Y+47, r24	; 0x2f
    187e:	3f c0       	rjmp	.+126    	; 0x18fe <Dashboard_FrameOne+0x210>
	else if (__tmp > 65535)
    1880:	69 a9       	ldd	r22, Y+49	; 0x31
    1882:	7a a9       	ldd	r23, Y+50	; 0x32
    1884:	8b a9       	ldd	r24, Y+51	; 0x33
    1886:	9c a9       	ldd	r25, Y+52	; 0x34
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	3f ef       	ldi	r19, 0xFF	; 255
    188c:	4f e7       	ldi	r20, 0x7F	; 127
    188e:	57 e4       	ldi	r21, 0x47	; 71
    1890:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1894:	18 16       	cp	r1, r24
    1896:	4c f5       	brge	.+82     	; 0x18ea <Dashboard_FrameOne+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1898:	6d a9       	ldd	r22, Y+53	; 0x35
    189a:	7e a9       	ldd	r23, Y+54	; 0x36
    189c:	8f a9       	ldd	r24, Y+55	; 0x37
    189e:	98 ad       	ldd	r25, Y+56	; 0x38
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	51 e4       	ldi	r21, 0x41	; 65
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	bc 01       	movw	r22, r24
    18b2:	cd 01       	movw	r24, r26
    18b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	98 ab       	std	Y+48, r25	; 0x30
    18be:	8f a7       	std	Y+47, r24	; 0x2f
    18c0:	0f c0       	rjmp	.+30     	; 0x18e0 <Dashboard_FrameOne+0x1f2>
    18c2:	88 ec       	ldi	r24, 0xC8	; 200
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9e a7       	std	Y+46, r25	; 0x2e
    18c8:	8d a7       	std	Y+45, r24	; 0x2d
    18ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    18cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    18ce:	01 97       	sbiw	r24, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <Dashboard_FrameOne+0x1e0>
    18d2:	9e a7       	std	Y+46, r25	; 0x2e
    18d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18d8:	98 a9       	ldd	r25, Y+48	; 0x30
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	98 ab       	std	Y+48, r25	; 0x30
    18de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    18e2:	98 a9       	ldd	r25, Y+48	; 0x30
    18e4:	00 97       	sbiw	r24, 0x00	; 0
    18e6:	69 f7       	brne	.-38     	; 0x18c2 <Dashboard_FrameOne+0x1d4>
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <Dashboard_FrameOne+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18ea:	69 a9       	ldd	r22, Y+49	; 0x31
    18ec:	7a a9       	ldd	r23, Y+50	; 0x32
    18ee:	8b a9       	ldd	r24, Y+51	; 0x33
    18f0:	9c a9       	ldd	r25, Y+52	; 0x34
    18f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f6:	dc 01       	movw	r26, r24
    18f8:	cb 01       	movw	r24, r22
    18fa:	98 ab       	std	Y+48, r25	; 0x30
    18fc:	8f a7       	std	Y+47, r24	; 0x2f
    18fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1900:	98 a9       	ldd	r25, Y+48	; 0x30
    1902:	9c a7       	std	Y+44, r25	; 0x2c
    1904:	8b a7       	std	Y+43, r24	; 0x2b
    1906:	8b a5       	ldd	r24, Y+43	; 0x2b
    1908:	9c a5       	ldd	r25, Y+44	; 0x2c
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <Dashboard_FrameOne+0x21c>
    190e:	9c a7       	std	Y+44, r25	; 0x2c
    1910:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	LCD_voidClearScreen();
    1912:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	a0 ea       	ldi	r26, 0xA0	; 160
    191c:	b1 e4       	ldi	r27, 0x41	; 65
    191e:	8f a3       	std	Y+39, r24	; 0x27
    1920:	98 a7       	std	Y+40, r25	; 0x28
    1922:	a9 a7       	std	Y+41, r26	; 0x29
    1924:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1926:	6f a1       	ldd	r22, Y+39	; 0x27
    1928:	78 a5       	ldd	r23, Y+40	; 0x28
    192a:	89 a5       	ldd	r24, Y+41	; 0x29
    192c:	9a a5       	ldd	r25, Y+42	; 0x2a
    192e:	20 e0       	ldi	r18, 0x00	; 0
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	4a ef       	ldi	r20, 0xFA	; 250
    1934:	54 e4       	ldi	r21, 0x44	; 68
    1936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    193a:	dc 01       	movw	r26, r24
    193c:	cb 01       	movw	r24, r22
    193e:	8b a3       	std	Y+35, r24	; 0x23
    1940:	9c a3       	std	Y+36, r25	; 0x24
    1942:	ad a3       	std	Y+37, r26	; 0x25
    1944:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1946:	6b a1       	ldd	r22, Y+35	; 0x23
    1948:	7c a1       	ldd	r23, Y+36	; 0x24
    194a:	8d a1       	ldd	r24, Y+37	; 0x25
    194c:	9e a1       	ldd	r25, Y+38	; 0x26
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	40 e8       	ldi	r20, 0x80	; 128
    1954:	5f e3       	ldi	r21, 0x3F	; 63
    1956:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    195a:	88 23       	and	r24, r24
    195c:	2c f4       	brge	.+10     	; 0x1968 <Dashboard_FrameOne+0x27a>
		__ticks = 1;
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	9a a3       	std	Y+34, r25	; 0x22
    1964:	89 a3       	std	Y+33, r24	; 0x21
    1966:	3f c0       	rjmp	.+126    	; 0x19e6 <Dashboard_FrameOne+0x2f8>
	else if (__tmp > 65535)
    1968:	6b a1       	ldd	r22, Y+35	; 0x23
    196a:	7c a1       	ldd	r23, Y+36	; 0x24
    196c:	8d a1       	ldd	r24, Y+37	; 0x25
    196e:	9e a1       	ldd	r25, Y+38	; 0x26
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	3f ef       	ldi	r19, 0xFF	; 255
    1974:	4f e7       	ldi	r20, 0x7F	; 127
    1976:	57 e4       	ldi	r21, 0x47	; 71
    1978:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    197c:	18 16       	cp	r1, r24
    197e:	4c f5       	brge	.+82     	; 0x19d2 <Dashboard_FrameOne+0x2e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	6f a1       	ldd	r22, Y+39	; 0x27
    1982:	78 a5       	ldd	r23, Y+40	; 0x28
    1984:	89 a5       	ldd	r24, Y+41	; 0x29
    1986:	9a a5       	ldd	r25, Y+42	; 0x2a
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	40 e2       	ldi	r20, 0x20	; 32
    198e:	51 e4       	ldi	r21, 0x41	; 65
    1990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1994:	dc 01       	movw	r26, r24
    1996:	cb 01       	movw	r24, r22
    1998:	bc 01       	movw	r22, r24
    199a:	cd 01       	movw	r24, r26
    199c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19a0:	dc 01       	movw	r26, r24
    19a2:	cb 01       	movw	r24, r22
    19a4:	9a a3       	std	Y+34, r25	; 0x22
    19a6:	89 a3       	std	Y+33, r24	; 0x21
    19a8:	0f c0       	rjmp	.+30     	; 0x19c8 <Dashboard_FrameOne+0x2da>
    19aa:	88 ec       	ldi	r24, 0xC8	; 200
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	98 a3       	std	Y+32, r25	; 0x20
    19b0:	8f 8f       	std	Y+31, r24	; 0x1f
    19b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    19b4:	98 a1       	ldd	r25, Y+32	; 0x20
    19b6:	01 97       	sbiw	r24, 0x01	; 1
    19b8:	f1 f7       	brne	.-4      	; 0x19b6 <Dashboard_FrameOne+0x2c8>
    19ba:	98 a3       	std	Y+32, r25	; 0x20
    19bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19be:	89 a1       	ldd	r24, Y+33	; 0x21
    19c0:	9a a1       	ldd	r25, Y+34	; 0x22
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	9a a3       	std	Y+34, r25	; 0x22
    19c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c8:	89 a1       	ldd	r24, Y+33	; 0x21
    19ca:	9a a1       	ldd	r25, Y+34	; 0x22
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	69 f7       	brne	.-38     	; 0x19aa <Dashboard_FrameOne+0x2bc>
    19d0:	14 c0       	rjmp	.+40     	; 0x19fa <Dashboard_FrameOne+0x30c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d2:	6b a1       	ldd	r22, Y+35	; 0x23
    19d4:	7c a1       	ldd	r23, Y+36	; 0x24
    19d6:	8d a1       	ldd	r24, Y+37	; 0x25
    19d8:	9e a1       	ldd	r25, Y+38	; 0x26
    19da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	9a a3       	std	Y+34, r25	; 0x22
    19e4:	89 a3       	std	Y+33, r24	; 0x21
    19e6:	89 a1       	ldd	r24, Y+33	; 0x21
    19e8:	9a a1       	ldd	r25, Y+34	; 0x22
    19ea:	9e 8f       	std	Y+30, r25	; 0x1e
    19ec:	8d 8f       	std	Y+29, r24	; 0x1d
    19ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f1 f7       	brne	.-4      	; 0x19f2 <Dashboard_FrameOne+0x304>
    19f6:	9e 8f       	std	Y+30, r25	; 0x1e
    19f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-DC");
    19fa:	89 e7       	ldi	r24, 0x79	; 121
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-Stepper");
    1a0a:	8e e7       	ldi	r24, 0x7E	; 126
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE1,9);
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	69 e0       	ldi	r22, 0x09	; 9
    1a16:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"3-Servo");
    1a1a:	88 e8       	ldi	r24, 0x88	; 136
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,9);
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	69 e0       	ldi	r22, 0x09	; 9
    1a26:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"4-Exit");
    1a2a:	80 e9       	ldi	r24, 0x90	; 144
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>

	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    1a32:	ce 01       	movw	r24, r28
    1a34:	89 5b       	subi	r24, 0xB9	; 185
    1a36:	9f 4f       	sbci	r25, 0xFF	; 255
    1a38:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e9 5b       	subi	r30, 0xB9	; 185
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	80 81       	ld	r24, Z
    1a44:	8f 3f       	cpi	r24, 0xFF	; 255
    1a46:	a9 f3       	breq	.-22     	; 0x1a32 <Dashboard_FrameOne+0x344>
		{
			if(Local_u8Key == '1') // If pressed key is '1'
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e9 5b       	subi	r30, 0xB9	; 185
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 81       	ld	r24, Z
    1a50:	81 33       	cpi	r24, 0x31	; 49
    1a52:	19 f4       	brne	.+6      	; 0x1a5a <Dashboard_FrameOne+0x36c>
			{
				Dashboard_FrameTwo();
    1a54:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <Dashboard_FrameTwo>
    1a58:	ec cf       	rjmp	.-40     	; 0x1a32 <Dashboard_FrameOne+0x344>
			}
			else if(Local_u8Key == '2') // If pressed key is '2'
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e9 5b       	subi	r30, 0xB9	; 185
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	80 81       	ld	r24, Z
    1a62:	82 33       	cpi	r24, 0x32	; 50
    1a64:	19 f4       	brne	.+6      	; 0x1a6c <Dashboard_FrameOne+0x37e>
			{
				Dashboard_FrameThree();
    1a66:	0e 94 d5 10 	call	0x21aa	; 0x21aa <Dashboard_FrameThree>
    1a6a:	e3 cf       	rjmp	.-58     	; 0x1a32 <Dashboard_FrameOne+0x344>
			}
			else if(Local_u8Key == '3') // If pressed key is '3'
    1a6c:	fe 01       	movw	r30, r28
    1a6e:	e9 5b       	subi	r30, 0xB9	; 185
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	83 33       	cpi	r24, 0x33	; 51
    1a76:	19 f4       	brne	.+6      	; 0x1a7e <Dashboard_FrameOne+0x390>
			{
				Dashboard_FrameSix();
    1a78:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <Dashboard_FrameSix>
    1a7c:	da cf       	rjmp	.-76     	; 0x1a32 <Dashboard_FrameOne+0x344>
			}
			else if (Local_u8Key == '4') // If pressed key is '2'
    1a7e:	fe 01       	movw	r30, r28
    1a80:	e9 5b       	subi	r30, 0xB9	; 185
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	80 81       	ld	r24, Z
    1a86:	84 33       	cpi	r24, 0x34	; 52
    1a88:	a1 f6       	brne	.-88     	; 0x1a32 <Dashboard_FrameOne+0x344>
			{
				LCD_voidClearScreen();
    1a8a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a0 ea       	ldi	r26, 0xA0	; 160
    1a94:	b1 e4       	ldi	r27, 0x41	; 65
    1a96:	89 8f       	std	Y+25, r24	; 0x19
    1a98:	9a 8f       	std	Y+26, r25	; 0x1a
    1a9a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9e:	69 8d       	ldd	r22, Y+25	; 0x19
    1aa0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aa2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aa4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a ef       	ldi	r20, 0xFA	; 250
    1aac:	54 e4       	ldi	r21, 0x44	; 68
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8d 8b       	std	Y+21, r24	; 0x15
    1ab8:	9e 8b       	std	Y+22, r25	; 0x16
    1aba:	af 8b       	std	Y+23, r26	; 0x17
    1abc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1abe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e8       	ldi	r20, 0x80	; 128
    1acc:	5f e3       	ldi	r21, 0x3F	; 63
    1ace:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ad2:	88 23       	and	r24, r24
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <Dashboard_FrameOne+0x3f2>
		__ticks = 1;
    1ad6:	81 e0       	ldi	r24, 0x01	; 1
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	9c 8b       	std	Y+20, r25	; 0x14
    1adc:	8b 8b       	std	Y+19, r24	; 0x13
    1ade:	3f c0       	rjmp	.+126    	; 0x1b5e <Dashboard_FrameOne+0x470>
	else if (__tmp > 65535)
    1ae0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ae2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ae4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ae6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	3f ef       	ldi	r19, 0xFF	; 255
    1aec:	4f e7       	ldi	r20, 0x7F	; 127
    1aee:	57 e4       	ldi	r21, 0x47	; 71
    1af0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1af4:	18 16       	cp	r1, r24
    1af6:	4c f5       	brge	.+82     	; 0x1b4a <Dashboard_FrameOne+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af8:	69 8d       	ldd	r22, Y+25	; 0x19
    1afa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1afc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1afe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	40 e2       	ldi	r20, 0x20	; 32
    1b06:	51 e4       	ldi	r21, 0x41	; 65
    1b08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0c:	dc 01       	movw	r26, r24
    1b0e:	cb 01       	movw	r24, r22
    1b10:	bc 01       	movw	r22, r24
    1b12:	cd 01       	movw	r24, r26
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
    1b20:	0f c0       	rjmp	.+30     	; 0x1b40 <Dashboard_FrameOne+0x452>
    1b22:	88 ec       	ldi	r24, 0xC8	; 200
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	9a 8b       	std	Y+18, r25	; 0x12
    1b28:	89 8b       	std	Y+17, r24	; 0x11
    1b2a:	89 89       	ldd	r24, Y+17	; 0x11
    1b2c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <Dashboard_FrameOne+0x440>
    1b32:	9a 8b       	std	Y+18, r25	; 0x12
    1b34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b36:	8b 89       	ldd	r24, Y+19	; 0x13
    1b38:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3a:	01 97       	sbiw	r24, 0x01	; 1
    1b3c:	9c 8b       	std	Y+20, r25	; 0x14
    1b3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b40:	8b 89       	ldd	r24, Y+19	; 0x13
    1b42:	9c 89       	ldd	r25, Y+20	; 0x14
    1b44:	00 97       	sbiw	r24, 0x00	; 0
    1b46:	69 f7       	brne	.-38     	; 0x1b22 <Dashboard_FrameOne+0x434>
    1b48:	14 c0       	rjmp	.+40     	; 0x1b72 <Dashboard_FrameOne+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b4c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b50:	98 8d       	ldd	r25, Y+24	; 0x18
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	9c 8b       	std	Y+20, r25	; 0x14
    1b5c:	8b 8b       	std	Y+19, r24	; 0x13
    1b5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b60:	9c 89       	ldd	r25, Y+20	; 0x14
    1b62:	98 8b       	std	Y+16, r25	; 0x10
    1b64:	8f 87       	std	Y+15, r24	; 0x0f
    1b66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b68:	98 89       	ldd	r25, Y+16	; 0x10
    1b6a:	01 97       	sbiw	r24, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <Dashboard_FrameOne+0x47c>
    1b6e:	98 8b       	std	Y+16, r25	; 0x10
    1b70:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidWriteString((u8*)"GoodLuck!");
    1b72:	87 e9       	ldi	r24, 0x97	; 151
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	90 e8       	ldi	r25, 0x80	; 128
    1b7e:	ab e3       	ldi	r26, 0x3B	; 59
    1b80:	b5 e4       	ldi	r27, 0x45	; 69
    1b82:	8b 87       	std	Y+11, r24	; 0x0b
    1b84:	9c 87       	std	Y+12, r25	; 0x0c
    1b86:	ad 87       	std	Y+13, r26	; 0x0d
    1b88:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b90:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4a ef       	ldi	r20, 0xFA	; 250
    1b98:	54 e4       	ldi	r21, 0x44	; 68
    1b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	8f 83       	std	Y+7, r24	; 0x07
    1ba4:	98 87       	std	Y+8, r25	; 0x08
    1ba6:	a9 87       	std	Y+9, r26	; 0x09
    1ba8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1baa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bac:	78 85       	ldd	r23, Y+8	; 0x08
    1bae:	89 85       	ldd	r24, Y+9	; 0x09
    1bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	40 e8       	ldi	r20, 0x80	; 128
    1bb8:	5f e3       	ldi	r21, 0x3F	; 63
    1bba:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bbe:	88 23       	and	r24, r24
    1bc0:	2c f4       	brge	.+10     	; 0x1bcc <Dashboard_FrameOne+0x4de>
		__ticks = 1;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	9e 83       	std	Y+6, r25	; 0x06
    1bc8:	8d 83       	std	Y+5, r24	; 0x05
    1bca:	3f c0       	rjmp	.+126    	; 0x1c4a <Dashboard_FrameOne+0x55c>
	else if (__tmp > 65535)
    1bcc:	6f 81       	ldd	r22, Y+7	; 0x07
    1bce:	78 85       	ldd	r23, Y+8	; 0x08
    1bd0:	89 85       	ldd	r24, Y+9	; 0x09
    1bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd4:	20 e0       	ldi	r18, 0x00	; 0
    1bd6:	3f ef       	ldi	r19, 0xFF	; 255
    1bd8:	4f e7       	ldi	r20, 0x7F	; 127
    1bda:	57 e4       	ldi	r21, 0x47	; 71
    1bdc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be0:	18 16       	cp	r1, r24
    1be2:	4c f5       	brge	.+82     	; 0x1c36 <Dashboard_FrameOne+0x548>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e2       	ldi	r20, 0x20	; 32
    1bf2:	51 e4       	ldi	r21, 0x41	; 65
    1bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	bc 01       	movw	r22, r24
    1bfe:	cd 01       	movw	r24, r26
    1c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	8d 83       	std	Y+5, r24	; 0x05
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <Dashboard_FrameOne+0x53e>
    1c0e:	88 ec       	ldi	r24, 0xC8	; 200
    1c10:	90 e0       	ldi	r25, 0x00	; 0
    1c12:	9c 83       	std	Y+4, r25	; 0x04
    1c14:	8b 83       	std	Y+3, r24	; 0x03
    1c16:	8b 81       	ldd	r24, Y+3	; 0x03
    1c18:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <Dashboard_FrameOne+0x52c>
    1c1e:	9c 83       	std	Y+4, r25	; 0x04
    1c20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	9e 83       	std	Y+6, r25	; 0x06
    1c2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	69 f7       	brne	.-38     	; 0x1c0e <Dashboard_FrameOne+0x520>
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <Dashboard_FrameOne+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c36:	6f 81       	ldd	r22, Y+7	; 0x07
    1c38:	78 85       	ldd	r23, Y+8	; 0x08
    1c3a:	89 85       	ldd	r24, Y+9	; 0x09
    1c3c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c42:	dc 01       	movw	r26, r24
    1c44:	cb 01       	movw	r24, r22
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	9a 83       	std	Y+2, r25	; 0x02
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
    1c54:	9a 81       	ldd	r25, Y+2	; 0x02
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	f1 f7       	brne	.-4      	; 0x1c56 <Dashboard_FrameOne+0x568>
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	ff cf       	rjmp	.-2      	; 0x1c5e <Dashboard_FrameOne+0x570>

00001c60 <Dashboard_FrameTwo>:
			}
		}
	}
}
void Dashboard_FrameTwo(void)
{
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	c8 54       	subi	r28, 0x48	; 72
    1c6e:	d0 40       	sbci	r29, 0x00	; 0
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u8 Local_Angle;
	LCD_voidClearScreen();
    1c7a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ed 5b       	subi	r30, 0xBD	; 189
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a0 ea       	ldi	r26, 0xA0	; 160
    1c8a:	b1 e4       	ldi	r27, 0x41	; 65
    1c8c:	80 83       	st	Z, r24
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	a2 83       	std	Z+2, r26	; 0x02
    1c92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	8e 01       	movw	r16, r28
    1c96:	01 5c       	subi	r16, 0xC1	; 193
    1c98:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ed 5b       	subi	r30, 0xBD	; 189
    1c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca0:	60 81       	ld	r22, Z
    1ca2:	71 81       	ldd	r23, Z+1	; 0x01
    1ca4:	82 81       	ldd	r24, Z+2	; 0x02
    1ca6:	93 81       	ldd	r25, Z+3	; 0x03
    1ca8:	20 e0       	ldi	r18, 0x00	; 0
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	4a ef       	ldi	r20, 0xFA	; 250
    1cae:	54 e4       	ldi	r21, 0x44	; 68
    1cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb4:	dc 01       	movw	r26, r24
    1cb6:	cb 01       	movw	r24, r22
    1cb8:	f8 01       	movw	r30, r16
    1cba:	80 83       	st	Z, r24
    1cbc:	91 83       	std	Z+1, r25	; 0x01
    1cbe:	a2 83       	std	Z+2, r26	; 0x02
    1cc0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	ff 96       	adiw	r30, 0x3f	; 63
    1cc6:	60 81       	ld	r22, Z
    1cc8:	71 81       	ldd	r23, Z+1	; 0x01
    1cca:	82 81       	ldd	r24, Z+2	; 0x02
    1ccc:	93 81       	ldd	r25, Z+3	; 0x03
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e8       	ldi	r20, 0x80	; 128
    1cd4:	5f e3       	ldi	r21, 0x3F	; 63
    1cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cda:	88 23       	and	r24, r24
    1cdc:	2c f4       	brge	.+10     	; 0x1ce8 <Dashboard_FrameTwo+0x88>
		__ticks = 1;
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	9e af       	std	Y+62, r25	; 0x3e
    1ce4:	8d af       	std	Y+61, r24	; 0x3d
    1ce6:	46 c0       	rjmp	.+140    	; 0x1d74 <Dashboard_FrameTwo+0x114>
	else if (__tmp > 65535)
    1ce8:	fe 01       	movw	r30, r28
    1cea:	ff 96       	adiw	r30, 0x3f	; 63
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	64 f5       	brge	.+88     	; 0x1d5c <Dashboard_FrameTwo+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	fe 01       	movw	r30, r28
    1d06:	ed 5b       	subi	r30, 0xBD	; 189
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9e af       	std	Y+62, r25	; 0x3e
    1d30:	8d af       	std	Y+61, r24	; 0x3d
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <Dashboard_FrameTwo+0xf2>
    1d34:	88 ec       	ldi	r24, 0xC8	; 200
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9c af       	std	Y+60, r25	; 0x3c
    1d3a:	8b af       	std	Y+59, r24	; 0x3b
    1d3c:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d3e:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <Dashboard_FrameTwo+0xe0>
    1d44:	9c af       	std	Y+60, r25	; 0x3c
    1d46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9e af       	std	Y+62, r25	; 0x3e
    1d50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d54:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <Dashboard_FrameTwo+0xd4>
    1d5a:	16 c0       	rjmp	.+44     	; 0x1d88 <Dashboard_FrameTwo+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ff 96       	adiw	r30, 0x3f	; 63
    1d60:	60 81       	ld	r22, Z
    1d62:	71 81       	ldd	r23, Z+1	; 0x01
    1d64:	82 81       	ldd	r24, Z+2	; 0x02
    1d66:	93 81       	ldd	r25, Z+3	; 0x03
    1d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	9e af       	std	Y+62, r25	; 0x3e
    1d72:	8d af       	std	Y+61, r24	; 0x3d
    1d74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d78:	9a af       	std	Y+58, r25	; 0x3a
    1d7a:	89 af       	std	Y+57, r24	; 0x39
    1d7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1d7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d80:	01 97       	sbiw	r24, 0x01	; 1
    1d82:	f1 f7       	brne	.-4      	; 0x1d80 <Dashboard_FrameTwo+0x120>
    1d84:	9a af       	std	Y+58, r25	; 0x3a
    1d86:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-RotateCW");
    1d88:	81 ea       	ldi	r24, 0xA1	; 161
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	60 e0       	ldi	r22, 0x00	; 0
    1d94:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-RotateCCW");
    1d98:	8c ea       	ldi	r24, 0xAC	; 172
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE1,10);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	6a e0       	ldi	r22, 0x0A	; 10
    1da4:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"3-Back");
    1da8:	88 eb       	ldi	r24, 0xB8	; 184
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    1db0:	ce 01       	movw	r24, r28
    1db2:	88 5b       	subi	r24, 0xB8	; 184
    1db4:	9f 4f       	sbci	r25, 0xFF	; 255
    1db6:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e8 5b       	subi	r30, 0xB8	; 184
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	80 81       	ld	r24, Z
    1dc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1dc4:	a9 f3       	breq	.-22     	; 0x1db0 <Dashboard_FrameTwo+0x150>
		{
			if(Local_u8Key == '1') // If pressed key is '1'
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	e8 5b       	subi	r30, 0xB8	; 184
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	81 33       	cpi	r24, 0x31	; 49
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <Dashboard_FrameTwo+0x174>
    1dd2:	ed c0       	rjmp	.+474    	; 0x1fae <Dashboard_FrameTwo+0x34e>
			{
				LCD_voidClearScreen();
    1dd4:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 ea       	ldi	r26, 0xA0	; 160
    1dde:	b1 e4       	ldi	r27, 0x41	; 65
    1de0:	8d ab       	std	Y+53, r24	; 0x35
    1de2:	9e ab       	std	Y+54, r25	; 0x36
    1de4:	af ab       	std	Y+55, r26	; 0x37
    1de6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6d a9       	ldd	r22, Y+53	; 0x35
    1dea:	7e a9       	ldd	r23, Y+54	; 0x36
    1dec:	8f a9       	ldd	r24, Y+55	; 0x37
    1dee:	98 ad       	ldd	r25, Y+56	; 0x38
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a ef       	ldi	r20, 0xFA	; 250
    1df6:	54 e4       	ldi	r21, 0x44	; 68
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	89 ab       	std	Y+49, r24	; 0x31
    1e02:	9a ab       	std	Y+50, r25	; 0x32
    1e04:	ab ab       	std	Y+51, r26	; 0x33
    1e06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e08:	69 a9       	ldd	r22, Y+49	; 0x31
    1e0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <Dashboard_FrameTwo+0x1ca>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	98 ab       	std	Y+48, r25	; 0x30
    1e26:	8f a7       	std	Y+47, r24	; 0x2f
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <Dashboard_FrameTwo+0x248>
	else if (__tmp > 65535)
    1e2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1e2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1e2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1e30:	9c a9       	ldd	r25, Y+52	; 0x34
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <Dashboard_FrameTwo+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6d a9       	ldd	r22, Y+53	; 0x35
    1e44:	7e a9       	ldd	r23, Y+54	; 0x36
    1e46:	8f a9       	ldd	r24, Y+55	; 0x37
    1e48:	98 ad       	ldd	r25, Y+56	; 0x38
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	98 ab       	std	Y+48, r25	; 0x30
    1e68:	8f a7       	std	Y+47, r24	; 0x2f
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <Dashboard_FrameTwo+0x22a>
    1e6c:	88 ec       	ldi	r24, 0xC8	; 200
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9e a7       	std	Y+46, r25	; 0x2e
    1e72:	8d a7       	std	Y+45, r24	; 0x2d
    1e74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <Dashboard_FrameTwo+0x218>
    1e7c:	9e a7       	std	Y+46, r25	; 0x2e
    1e7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e82:	98 a9       	ldd	r25, Y+48	; 0x30
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	98 ab       	std	Y+48, r25	; 0x30
    1e88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <Dashboard_FrameTwo+0x20c>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <Dashboard_FrameTwo+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	69 a9       	ldd	r22, Y+49	; 0x31
    1e96:	7a a9       	ldd	r23, Y+50	; 0x32
    1e98:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	98 ab       	std	Y+48, r25	; 0x30
    1ea6:	8f a7       	std	Y+47, r24	; 0x2f
    1ea8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eaa:	98 a9       	ldd	r25, Y+48	; 0x30
    1eac:	9c a7       	std	Y+44, r25	; 0x2c
    1eae:	8b a7       	std	Y+43, r24	; 0x2b
    1eb0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1eb2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <Dashboard_FrameTwo+0x254>
    1eb8:	9c a7       	std	Y+44, r25	; 0x2c
    1eba:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CW ....");
    1ebc:	8f eb       	ldi	r24, 0xBF	; 191
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
				H_BRIDGE_voidRotateCW();
    1ec4:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <H_BRIDGE_voidRotateCW>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	90 e4       	ldi	r25, 0x40	; 64
    1ecc:	ac e9       	ldi	r26, 0x9C	; 156
    1ece:	b5 e4       	ldi	r27, 0x45	; 69
    1ed0:	8f a3       	std	Y+39, r24	; 0x27
    1ed2:	98 a7       	std	Y+40, r25	; 0x28
    1ed4:	a9 a7       	std	Y+41, r26	; 0x29
    1ed6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed8:	6f a1       	ldd	r22, Y+39	; 0x27
    1eda:	78 a5       	ldd	r23, Y+40	; 0x28
    1edc:	89 a5       	ldd	r24, Y+41	; 0x29
    1ede:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a ef       	ldi	r20, 0xFA	; 250
    1ee6:	54 e4       	ldi	r21, 0x44	; 68
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	8b a3       	std	Y+35, r24	; 0x23
    1ef2:	9c a3       	std	Y+36, r25	; 0x24
    1ef4:	ad a3       	std	Y+37, r26	; 0x25
    1ef6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ef8:	6b a1       	ldd	r22, Y+35	; 0x23
    1efa:	7c a1       	ldd	r23, Y+36	; 0x24
    1efc:	8d a1       	ldd	r24, Y+37	; 0x25
    1efe:	9e a1       	ldd	r25, Y+38	; 0x26
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	40 e8       	ldi	r20, 0x80	; 128
    1f06:	5f e3       	ldi	r21, 0x3F	; 63
    1f08:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	2c f4       	brge	.+10     	; 0x1f1a <Dashboard_FrameTwo+0x2ba>
		__ticks = 1;
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	9a a3       	std	Y+34, r25	; 0x22
    1f16:	89 a3       	std	Y+33, r24	; 0x21
    1f18:	3f c0       	rjmp	.+126    	; 0x1f98 <Dashboard_FrameTwo+0x338>
	else if (__tmp > 65535)
    1f1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1f1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1f1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1f20:	9e a1       	ldd	r25, Y+38	; 0x26
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	3f ef       	ldi	r19, 0xFF	; 255
    1f26:	4f e7       	ldi	r20, 0x7F	; 127
    1f28:	57 e4       	ldi	r21, 0x47	; 71
    1f2a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f2e:	18 16       	cp	r1, r24
    1f30:	4c f5       	brge	.+82     	; 0x1f84 <Dashboard_FrameTwo+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f32:	6f a1       	ldd	r22, Y+39	; 0x27
    1f34:	78 a5       	ldd	r23, Y+40	; 0x28
    1f36:	89 a5       	ldd	r24, Y+41	; 0x29
    1f38:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e2       	ldi	r20, 0x20	; 32
    1f40:	51 e4       	ldi	r21, 0x41	; 65
    1f42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f46:	dc 01       	movw	r26, r24
    1f48:	cb 01       	movw	r24, r22
    1f4a:	bc 01       	movw	r22, r24
    1f4c:	cd 01       	movw	r24, r26
    1f4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	9a a3       	std	Y+34, r25	; 0x22
    1f58:	89 a3       	std	Y+33, r24	; 0x21
    1f5a:	0f c0       	rjmp	.+30     	; 0x1f7a <Dashboard_FrameTwo+0x31a>
    1f5c:	88 ec       	ldi	r24, 0xC8	; 200
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	98 a3       	std	Y+32, r25	; 0x20
    1f62:	8f 8f       	std	Y+31, r24	; 0x1f
    1f64:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f66:	98 a1       	ldd	r25, Y+32	; 0x20
    1f68:	01 97       	sbiw	r24, 0x01	; 1
    1f6a:	f1 f7       	brne	.-4      	; 0x1f68 <Dashboard_FrameTwo+0x308>
    1f6c:	98 a3       	std	Y+32, r25	; 0x20
    1f6e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f70:	89 a1       	ldd	r24, Y+33	; 0x21
    1f72:	9a a1       	ldd	r25, Y+34	; 0x22
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	9a a3       	std	Y+34, r25	; 0x22
    1f78:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	69 f7       	brne	.-38     	; 0x1f5c <Dashboard_FrameTwo+0x2fc>
    1f82:	14 c0       	rjmp	.+40     	; 0x1fac <Dashboard_FrameTwo+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f84:	6b a1       	ldd	r22, Y+35	; 0x23
    1f86:	7c a1       	ldd	r23, Y+36	; 0x24
    1f88:	8d a1       	ldd	r24, Y+37	; 0x25
    1f8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f90:	dc 01       	movw	r26, r24
    1f92:	cb 01       	movw	r24, r22
    1f94:	9a a3       	std	Y+34, r25	; 0x22
    1f96:	89 a3       	std	Y+33, r24	; 0x21
    1f98:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9c:	9e 8f       	std	Y+30, r25	; 0x1e
    1f9e:	8d 8f       	std	Y+29, r24	; 0x1d
    1fa0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1fa2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <Dashboard_FrameTwo+0x344>
    1fa8:	9e 8f       	std	Y+30, r25	; 0x1e
    1faa:	8d 8f       	std	Y+29, r24	; 0x1d
    1fac:	ff cf       	rjmp	.-2      	; 0x1fac <Dashboard_FrameTwo+0x34c>
				_delay_ms(5000);
				while(1);
			}
			else if (Local_u8Key == '2') // If pressed key is '2'
    1fae:	fe 01       	movw	r30, r28
    1fb0:	e8 5b       	subi	r30, 0xB8	; 184
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	82 33       	cpi	r24, 0x32	; 50
    1fb8:	09 f0       	breq	.+2      	; 0x1fbc <Dashboard_FrameTwo+0x35c>
    1fba:	ed c0       	rjmp	.+474    	; 0x2196 <Dashboard_FrameTwo+0x536>
			{
				LCD_voidClearScreen();
    1fbc:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 ea       	ldi	r26, 0xA0	; 160
    1fc6:	b1 e4       	ldi	r27, 0x41	; 65
    1fc8:	89 8f       	std	Y+25, r24	; 0x19
    1fca:	9a 8f       	std	Y+26, r25	; 0x1a
    1fcc:	ab 8f       	std	Y+27, r26	; 0x1b
    1fce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a ef       	ldi	r20, 0xFA	; 250
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8d 8b       	std	Y+21, r24	; 0x15
    1fea:	9e 8b       	std	Y+22, r25	; 0x16
    1fec:	af 8b       	std	Y+23, r26	; 0x17
    1fee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ff0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ff2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ff4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ff6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <Dashboard_FrameTwo+0x3b2>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <Dashboard_FrameTwo+0x430>
	else if (__tmp > 65535)
    2012:	6d 89       	ldd	r22, Y+21	; 0x15
    2014:	7e 89       	ldd	r23, Y+22	; 0x16
    2016:	8f 89       	ldd	r24, Y+23	; 0x17
    2018:	98 8d       	ldd	r25, Y+24	; 0x18
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <Dashboard_FrameTwo+0x41c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	69 8d       	ldd	r22, Y+25	; 0x19
    202c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    202e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	9c 8b       	std	Y+20, r25	; 0x14
    2050:	8b 8b       	std	Y+19, r24	; 0x13
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <Dashboard_FrameTwo+0x412>
    2054:	88 ec       	ldi	r24, 0xC8	; 200
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9a 8b       	std	Y+18, r25	; 0x12
    205a:	89 8b       	std	Y+17, r24	; 0x11
    205c:	89 89       	ldd	r24, Y+17	; 0x11
    205e:	9a 89       	ldd	r25, Y+18	; 0x12
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <Dashboard_FrameTwo+0x400>
    2064:	9a 8b       	std	Y+18, r25	; 0x12
    2066:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8b 89       	ldd	r24, Y+19	; 0x13
    206a:	9c 89       	ldd	r25, Y+20	; 0x14
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8b 89       	ldd	r24, Y+19	; 0x13
    2074:	9c 89       	ldd	r25, Y+20	; 0x14
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <Dashboard_FrameTwo+0x3f4>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <Dashboard_FrameTwo+0x444>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	6d 89       	ldd	r22, Y+21	; 0x15
    207e:	7e 89       	ldd	r23, Y+22	; 0x16
    2080:	8f 89       	ldd	r24, Y+23	; 0x17
    2082:	98 8d       	ldd	r25, Y+24	; 0x18
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	9c 8b       	std	Y+20, r25	; 0x14
    208e:	8b 8b       	std	Y+19, r24	; 0x13
    2090:	8b 89       	ldd	r24, Y+19	; 0x13
    2092:	9c 89       	ldd	r25, Y+20	; 0x14
    2094:	98 8b       	std	Y+16, r25	; 0x10
    2096:	8f 87       	std	Y+15, r24	; 0x0f
    2098:	8f 85       	ldd	r24, Y+15	; 0x0f
    209a:	98 89       	ldd	r25, Y+16	; 0x10
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <Dashboard_FrameTwo+0x43c>
    20a0:	98 8b       	std	Y+16, r25	; 0x10
    20a2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CCW ....");
    20a4:	8f ec       	ldi	r24, 0xCF	; 207
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
				H_BRIDGE_voidRotateCCW();
    20ac:	0e 94 99 15 	call	0x2b32	; 0x2b32 <H_BRIDGE_voidRotateCCW>
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	90 e4       	ldi	r25, 0x40	; 64
    20b4:	ac e9       	ldi	r26, 0x9C	; 156
    20b6:	b5 e4       	ldi	r27, 0x45	; 69
    20b8:	8b 87       	std	Y+11, r24	; 0x0b
    20ba:	9c 87       	std	Y+12, r25	; 0x0c
    20bc:	ad 87       	std	Y+13, r26	; 0x0d
    20be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a ef       	ldi	r20, 0xFA	; 250
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8f 83       	std	Y+7, r24	; 0x07
    20da:	98 87       	std	Y+8, r25	; 0x08
    20dc:	a9 87       	std	Y+9, r26	; 0x09
    20de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20e0:	6f 81       	ldd	r22, Y+7	; 0x07
    20e2:	78 85       	ldd	r23, Y+8	; 0x08
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e8       	ldi	r20, 0x80	; 128
    20ee:	5f e3       	ldi	r21, 0x3F	; 63
    20f0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20f4:	88 23       	and	r24, r24
    20f6:	2c f4       	brge	.+10     	; 0x2102 <Dashboard_FrameTwo+0x4a2>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9e 83       	std	Y+6, r25	; 0x06
    20fe:	8d 83       	std	Y+5, r24	; 0x05
    2100:	3f c0       	rjmp	.+126    	; 0x2180 <Dashboard_FrameTwo+0x520>
	else if (__tmp > 65535)
    2102:	6f 81       	ldd	r22, Y+7	; 0x07
    2104:	78 85       	ldd	r23, Y+8	; 0x08
    2106:	89 85       	ldd	r24, Y+9	; 0x09
    2108:	9a 85       	ldd	r25, Y+10	; 0x0a
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	3f ef       	ldi	r19, 0xFF	; 255
    210e:	4f e7       	ldi	r20, 0x7F	; 127
    2110:	57 e4       	ldi	r21, 0x47	; 71
    2112:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2116:	18 16       	cp	r1, r24
    2118:	4c f5       	brge	.+82     	; 0x216c <Dashboard_FrameTwo+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    211a:	6b 85       	ldd	r22, Y+11	; 0x0b
    211c:	7c 85       	ldd	r23, Y+12	; 0x0c
    211e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2120:	9e 85       	ldd	r25, Y+14	; 0x0e
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	51 e4       	ldi	r21, 0x41	; 65
    212a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	9e 83       	std	Y+6, r25	; 0x06
    2140:	8d 83       	std	Y+5, r24	; 0x05
    2142:	0f c0       	rjmp	.+30     	; 0x2162 <Dashboard_FrameTwo+0x502>
    2144:	88 ec       	ldi	r24, 0xC8	; 200
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9c 83       	std	Y+4, r25	; 0x04
    214a:	8b 83       	std	Y+3, r24	; 0x03
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	01 97       	sbiw	r24, 0x01	; 1
    2152:	f1 f7       	brne	.-4      	; 0x2150 <Dashboard_FrameTwo+0x4f0>
    2154:	9c 83       	std	Y+4, r25	; 0x04
    2156:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2158:	8d 81       	ldd	r24, Y+5	; 0x05
    215a:	9e 81       	ldd	r25, Y+6	; 0x06
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2162:	8d 81       	ldd	r24, Y+5	; 0x05
    2164:	9e 81       	ldd	r25, Y+6	; 0x06
    2166:	00 97       	sbiw	r24, 0x00	; 0
    2168:	69 f7       	brne	.-38     	; 0x2144 <Dashboard_FrameTwo+0x4e4>
    216a:	14 c0       	rjmp	.+40     	; 0x2194 <Dashboard_FrameTwo+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	9e 83       	std	Y+6, r25	; 0x06
    217e:	8d 83       	std	Y+5, r24	; 0x05
    2180:	8d 81       	ldd	r24, Y+5	; 0x05
    2182:	9e 81       	ldd	r25, Y+6	; 0x06
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	01 97       	sbiw	r24, 0x01	; 1
    218e:	f1 f7       	brne	.-4      	; 0x218c <Dashboard_FrameTwo+0x52c>
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	ff cf       	rjmp	.-2      	; 0x2194 <Dashboard_FrameTwo+0x534>
				_delay_ms(5000);
				while(1);
			}
			else if(Local_u8Key == '3' ) // If pressed key is '3'
    2196:	fe 01       	movw	r30, r28
    2198:	e8 5b       	subi	r30, 0xB8	; 184
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	83 33       	cpi	r24, 0x33	; 51
    21a0:	09 f0       	breq	.+2      	; 0x21a4 <Dashboard_FrameTwo+0x544>
    21a2:	06 ce       	rjmp	.-1012   	; 0x1db0 <Dashboard_FrameTwo+0x150>
			{
				Dashboard_FrameOne();
    21a4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <Dashboard_FrameOne>
    21a8:	03 ce       	rjmp	.-1018   	; 0x1db0 <Dashboard_FrameTwo+0x150>

000021aa <Dashboard_FrameThree>:
	}

}

void Dashboard_FrameThree()
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	2f 97       	sbiw	r28, 0x0f	; 15
    21b4:	0f b6       	in	r0, 0x3f	; 63
    21b6:	f8 94       	cli
    21b8:	de bf       	out	0x3e, r29	; 62
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	LCD_voidClearScreen();
    21be:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	a0 ea       	ldi	r26, 0xA0	; 160
    21c8:	b1 e4       	ldi	r27, 0x41	; 65
    21ca:	8b 87       	std	Y+11, r24	; 0x0b
    21cc:	9c 87       	std	Y+12, r25	; 0x0c
    21ce:	ad 87       	std	Y+13, r26	; 0x0d
    21d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    21d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    21da:	20 e0       	ldi	r18, 0x00	; 0
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4a ef       	ldi	r20, 0xFA	; 250
    21e0:	54 e4       	ldi	r21, 0x44	; 68
    21e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	8f 83       	std	Y+7, r24	; 0x07
    21ec:	98 87       	std	Y+8, r25	; 0x08
    21ee:	a9 87       	std	Y+9, r26	; 0x09
    21f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21f2:	6f 81       	ldd	r22, Y+7	; 0x07
    21f4:	78 85       	ldd	r23, Y+8	; 0x08
    21f6:	89 85       	ldd	r24, Y+9	; 0x09
    21f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21fa:	20 e0       	ldi	r18, 0x00	; 0
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	40 e8       	ldi	r20, 0x80	; 128
    2200:	5f e3       	ldi	r21, 0x3F	; 63
    2202:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2206:	88 23       	and	r24, r24
    2208:	2c f4       	brge	.+10     	; 0x2214 <Dashboard_FrameThree+0x6a>
		__ticks = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	9e 83       	std	Y+6, r25	; 0x06
    2210:	8d 83       	std	Y+5, r24	; 0x05
    2212:	3f c0       	rjmp	.+126    	; 0x2292 <Dashboard_FrameThree+0xe8>
	else if (__tmp > 65535)
    2214:	6f 81       	ldd	r22, Y+7	; 0x07
    2216:	78 85       	ldd	r23, Y+8	; 0x08
    2218:	89 85       	ldd	r24, Y+9	; 0x09
    221a:	9a 85       	ldd	r25, Y+10	; 0x0a
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	3f ef       	ldi	r19, 0xFF	; 255
    2220:	4f e7       	ldi	r20, 0x7F	; 127
    2222:	57 e4       	ldi	r21, 0x47	; 71
    2224:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2228:	18 16       	cp	r1, r24
    222a:	4c f5       	brge	.+82     	; 0x227e <Dashboard_FrameThree+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222c:	6b 85       	ldd	r22, Y+11	; 0x0b
    222e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2230:	8d 85       	ldd	r24, Y+13	; 0x0d
    2232:	9e 85       	ldd	r25, Y+14	; 0x0e
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	40 e2       	ldi	r20, 0x20	; 32
    223a:	51 e4       	ldi	r21, 0x41	; 65
    223c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	bc 01       	movw	r22, r24
    2246:	cd 01       	movw	r24, r26
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	9e 83       	std	Y+6, r25	; 0x06
    2252:	8d 83       	std	Y+5, r24	; 0x05
    2254:	0f c0       	rjmp	.+30     	; 0x2274 <Dashboard_FrameThree+0xca>
    2256:	88 ec       	ldi	r24, 0xC8	; 200
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9c 83       	std	Y+4, r25	; 0x04
    225c:	8b 83       	std	Y+3, r24	; 0x03
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <Dashboard_FrameThree+0xb8>
    2266:	9c 83       	std	Y+4, r25	; 0x04
    2268:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226a:	8d 81       	ldd	r24, Y+5	; 0x05
    226c:	9e 81       	ldd	r25, Y+6	; 0x06
    226e:	01 97       	sbiw	r24, 0x01	; 1
    2270:	9e 83       	std	Y+6, r25	; 0x06
    2272:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2274:	8d 81       	ldd	r24, Y+5	; 0x05
    2276:	9e 81       	ldd	r25, Y+6	; 0x06
    2278:	00 97       	sbiw	r24, 0x00	; 0
    227a:	69 f7       	brne	.-38     	; 0x2256 <Dashboard_FrameThree+0xac>
    227c:	14 c0       	rjmp	.+40     	; 0x22a6 <Dashboard_FrameThree+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227e:	6f 81       	ldd	r22, Y+7	; 0x07
    2280:	78 85       	ldd	r23, Y+8	; 0x08
    2282:	89 85       	ldd	r24, Y+9	; 0x09
    2284:	9a 85       	ldd	r25, Y+10	; 0x0a
    2286:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228a:	dc 01       	movw	r26, r24
    228c:	cb 01       	movw	r24, r22
    228e:	9e 83       	std	Y+6, r25	; 0x06
    2290:	8d 83       	std	Y+5, r24	; 0x05
    2292:	8d 81       	ldd	r24, Y+5	; 0x05
    2294:	9e 81       	ldd	r25, Y+6	; 0x06
    2296:	9a 83       	std	Y+2, r25	; 0x02
    2298:	89 83       	std	Y+1, r24	; 0x01
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	9a 81       	ldd	r25, Y+2	; 0x02
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <Dashboard_FrameThree+0xf4>
    22a2:	9a 83       	std	Y+2, r25	; 0x02
    22a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_voidWriteString((u8*)"1-RotateCW");
    22a6:	81 ea       	ldi	r24, 0xA1	; 161
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    22ae:	82 e0       	ldi	r24, 0x02	; 2
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"2-RotateCCW");
    22b6:	8c ea       	ldi	r24, 0xAC	; 172
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE1,10);
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	6a e0       	ldi	r22, 0x0A	; 10
    22c2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	LCD_voidWriteString((u8*)"3-Back");
    22c6:	88 eb       	ldi	r24, 0xB8	; 184
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    22ce:	ce 01       	movw	r24, r28
    22d0:	0f 96       	adiw	r24, 0x0f	; 15
    22d2:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)// If a key is pressed
    22d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22d8:	8f 3f       	cpi	r24, 0xFF	; 255
    22da:	c9 f3       	breq	.-14     	; 0x22ce <Dashboard_FrameThree+0x124>
		{
			if(Local_u8Key == '1') // If pressed key is '1' CW
    22dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22de:	81 33       	cpi	r24, 0x31	; 49
    22e0:	19 f4       	brne	.+6      	; 0x22e8 <Dashboard_FrameThree+0x13e>
			{
				Dashboard_FrameFour();
    22e2:	0e 94 80 11 	call	0x2300	; 0x2300 <Dashboard_FrameFour>
    22e6:	f3 cf       	rjmp	.-26     	; 0x22ce <Dashboard_FrameThree+0x124>
			}
			else if(Local_u8Key == '2') // If pressed key is '2' CCW
    22e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    22ea:	82 33       	cpi	r24, 0x32	; 50
    22ec:	19 f4       	brne	.+6      	; 0x22f4 <Dashboard_FrameThree+0x14a>
			{
				Dashboard_FrameFive();
    22ee:	0e 94 a8 12 	call	0x2550	; 0x2550 <Dashboard_FrameFive>
    22f2:	ed cf       	rjmp	.-38     	; 0x22ce <Dashboard_FrameThree+0x124>
			}
			else if (Local_u8Key == '3')
    22f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    22f6:	83 33       	cpi	r24, 0x33	; 51
    22f8:	51 f7       	brne	.-44     	; 0x22ce <Dashboard_FrameThree+0x124>
			{
				Dashboard_FrameOne();
    22fa:	0e 94 77 0b 	call	0x16ee	; 0x16ee <Dashboard_FrameOne>
    22fe:	e7 cf       	rjmp	.-50     	; 0x22ce <Dashboard_FrameThree+0x124>

00002300 <Dashboard_FrameFour>:
			}
		}
	}
}
void Dashboard_FrameFour(void)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	6f 97       	sbiw	r28, 0x1f	; 31
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	de bf       	out	0x3e, r29	; 62
    2310:	0f be       	out	0x3f, r0	; 63
    2312:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u16 Local_u16Angle;
	LCD_voidClearScreen();
    2314:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	a0 ea       	ldi	r26, 0xA0	; 160
    231e:	b1 e4       	ldi	r27, 0x41	; 65
    2320:	89 8f       	std	Y+25, r24	; 0x19
    2322:	9a 8f       	std	Y+26, r25	; 0x1a
    2324:	ab 8f       	std	Y+27, r26	; 0x1b
    2326:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	69 8d       	ldd	r22, Y+25	; 0x19
    232a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    232c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    232e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	4a ef       	ldi	r20, 0xFA	; 250
    2336:	54 e4       	ldi	r21, 0x44	; 68
    2338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	8d 8b       	std	Y+21, r24	; 0x15
    2342:	9e 8b       	std	Y+22, r25	; 0x16
    2344:	af 8b       	std	Y+23, r26	; 0x17
    2346:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2348:	6d 89       	ldd	r22, Y+21	; 0x15
    234a:	7e 89       	ldd	r23, Y+22	; 0x16
    234c:	8f 89       	ldd	r24, Y+23	; 0x17
    234e:	98 8d       	ldd	r25, Y+24	; 0x18
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e8       	ldi	r20, 0x80	; 128
    2356:	5f e3       	ldi	r21, 0x3F	; 63
    2358:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    235c:	88 23       	and	r24, r24
    235e:	2c f4       	brge	.+10     	; 0x236a <Dashboard_FrameFour+0x6a>
		__ticks = 1;
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	3f c0       	rjmp	.+126    	; 0x23e8 <Dashboard_FrameFour+0xe8>
	else if (__tmp > 65535)
    236a:	6d 89       	ldd	r22, Y+21	; 0x15
    236c:	7e 89       	ldd	r23, Y+22	; 0x16
    236e:	8f 89       	ldd	r24, Y+23	; 0x17
    2370:	98 8d       	ldd	r25, Y+24	; 0x18
    2372:	20 e0       	ldi	r18, 0x00	; 0
    2374:	3f ef       	ldi	r19, 0xFF	; 255
    2376:	4f e7       	ldi	r20, 0x7F	; 127
    2378:	57 e4       	ldi	r21, 0x47	; 71
    237a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    237e:	18 16       	cp	r1, r24
    2380:	4c f5       	brge	.+82     	; 0x23d4 <Dashboard_FrameFour+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2382:	69 8d       	ldd	r22, Y+25	; 0x19
    2384:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2386:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2388:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	40 e2       	ldi	r20, 0x20	; 32
    2390:	51 e4       	ldi	r21, 0x41	; 65
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	bc 01       	movw	r22, r24
    239c:	cd 01       	movw	r24, r26
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	9c 8b       	std	Y+20, r25	; 0x14
    23a8:	8b 8b       	std	Y+19, r24	; 0x13
    23aa:	0f c0       	rjmp	.+30     	; 0x23ca <Dashboard_FrameFour+0xca>
    23ac:	88 ec       	ldi	r24, 0xC8	; 200
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	9a 8b       	std	Y+18, r25	; 0x12
    23b2:	89 8b       	std	Y+17, r24	; 0x11
    23b4:	89 89       	ldd	r24, Y+17	; 0x11
    23b6:	9a 89       	ldd	r25, Y+18	; 0x12
    23b8:	01 97       	sbiw	r24, 0x01	; 1
    23ba:	f1 f7       	brne	.-4      	; 0x23b8 <Dashboard_FrameFour+0xb8>
    23bc:	9a 8b       	std	Y+18, r25	; 0x12
    23be:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c0:	8b 89       	ldd	r24, Y+19	; 0x13
    23c2:	9c 89       	ldd	r25, Y+20	; 0x14
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	69 f7       	brne	.-38     	; 0x23ac <Dashboard_FrameFour+0xac>
    23d2:	14 c0       	rjmp	.+40     	; 0x23fc <Dashboard_FrameFour+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e0:	dc 01       	movw	r26, r24
    23e2:	cb 01       	movw	r24, r22
    23e4:	9c 8b       	std	Y+20, r25	; 0x14
    23e6:	8b 8b       	std	Y+19, r24	; 0x13
    23e8:	8b 89       	ldd	r24, Y+19	; 0x13
    23ea:	9c 89       	ldd	r25, Y+20	; 0x14
    23ec:	98 8b       	std	Y+16, r25	; 0x10
    23ee:	8f 87       	std	Y+15, r24	; 0x0f
    23f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f2:	98 89       	ldd	r25, Y+16	; 0x10
    23f4:	01 97       	sbiw	r24, 0x01	; 1
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <Dashboard_FrameFour+0xf4>
    23f8:	98 8b       	std	Y+16, r25	; 0x10
    23fa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_voidWriteString((u8*)"Angle = ");
    23fc:	80 ee       	ldi	r24, 0xE0	; 224
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key);
    2404:	ce 01       	movw	r24, r28
    2406:	4d 96       	adiw	r24, 0x1d	; 29
    2408:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)// If a key is pressed
    240c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    240e:	8f 3f       	cpi	r24, 0xFF	; 255
    2410:	c9 f3       	breq	.-14     	; 0x2404 <Dashboard_FrameFour+0x104>
		{
			if(Local_u8Key == '=') // If pressed key is '='
    2412:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2414:	8d 33       	cpi	r24, 0x3D	; 61
    2416:	09 f0       	breq	.+2      	; 0x241a <Dashboard_FrameFour+0x11a>
    2418:	8f c0       	rjmp	.+286    	; 0x2538 <Dashboard_FrameFour+0x238>
			{
				GetNumber((u8*)Local_Au8digits,&Local_u16Angle);
    241a:	83 e9       	ldi	r24, 0x93	; 147
    241c:	92 e0       	ldi	r25, 0x02	; 2
    241e:	9e 01       	movw	r18, r28
    2420:	22 5e       	subi	r18, 0xE2	; 226
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	b9 01       	movw	r22, r18
    2426:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <GetNumber>
				LCD_voidClearScreen();
    242a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    242e:	80 e0       	ldi	r24, 0x00	; 0
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 ea       	ldi	r26, 0xA0	; 160
    2434:	b1 e4       	ldi	r27, 0x41	; 65
    2436:	8b 87       	std	Y+11, r24	; 0x0b
    2438:	9c 87       	std	Y+12, r25	; 0x0c
    243a:	ad 87       	std	Y+13, r26	; 0x0d
    243c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2440:	7c 85       	ldd	r23, Y+12	; 0x0c
    2442:	8d 85       	ldd	r24, Y+13	; 0x0d
    2444:	9e 85       	ldd	r25, Y+14	; 0x0e
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	4a ef       	ldi	r20, 0xFA	; 250
    244c:	54 e4       	ldi	r21, 0x44	; 68
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	8f 83       	std	Y+7, r24	; 0x07
    2458:	98 87       	std	Y+8, r25	; 0x08
    245a:	a9 87       	std	Y+9, r26	; 0x09
    245c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    245e:	6f 81       	ldd	r22, Y+7	; 0x07
    2460:	78 85       	ldd	r23, Y+8	; 0x08
    2462:	89 85       	ldd	r24, Y+9	; 0x09
    2464:	9a 85       	ldd	r25, Y+10	; 0x0a
    2466:	20 e0       	ldi	r18, 0x00	; 0
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	40 e8       	ldi	r20, 0x80	; 128
    246c:	5f e3       	ldi	r21, 0x3F	; 63
    246e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2472:	88 23       	and	r24, r24
    2474:	2c f4       	brge	.+10     	; 0x2480 <Dashboard_FrameFour+0x180>
		__ticks = 1;
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	3f c0       	rjmp	.+126    	; 0x24fe <Dashboard_FrameFour+0x1fe>
	else if (__tmp > 65535)
    2480:	6f 81       	ldd	r22, Y+7	; 0x07
    2482:	78 85       	ldd	r23, Y+8	; 0x08
    2484:	89 85       	ldd	r24, Y+9	; 0x09
    2486:	9a 85       	ldd	r25, Y+10	; 0x0a
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	3f ef       	ldi	r19, 0xFF	; 255
    248c:	4f e7       	ldi	r20, 0x7F	; 127
    248e:	57 e4       	ldi	r21, 0x47	; 71
    2490:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2494:	18 16       	cp	r1, r24
    2496:	4c f5       	brge	.+82     	; 0x24ea <Dashboard_FrameFour+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2498:	6b 85       	ldd	r22, Y+11	; 0x0b
    249a:	7c 85       	ldd	r23, Y+12	; 0x0c
    249c:	8d 85       	ldd	r24, Y+13	; 0x0d
    249e:	9e 85       	ldd	r25, Y+14	; 0x0e
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	40 e2       	ldi	r20, 0x20	; 32
    24a6:	51 e4       	ldi	r21, 0x41	; 65
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	bc 01       	movw	r22, r24
    24b2:	cd 01       	movw	r24, r26
    24b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b8:	dc 01       	movw	r26, r24
    24ba:	cb 01       	movw	r24, r22
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	0f c0       	rjmp	.+30     	; 0x24e0 <Dashboard_FrameFour+0x1e0>
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	9c 83       	std	Y+4, r25	; 0x04
    24c8:	8b 83       	std	Y+3, r24	; 0x03
    24ca:	8b 81       	ldd	r24, Y+3	; 0x03
    24cc:	9c 81       	ldd	r25, Y+4	; 0x04
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	f1 f7       	brne	.-4      	; 0x24ce <Dashboard_FrameFour+0x1ce>
    24d2:	9c 83       	std	Y+4, r25	; 0x04
    24d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	01 97       	sbiw	r24, 0x01	; 1
    24dc:	9e 83       	std	Y+6, r25	; 0x06
    24de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e0:	8d 81       	ldd	r24, Y+5	; 0x05
    24e2:	9e 81       	ldd	r25, Y+6	; 0x06
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	69 f7       	brne	.-38     	; 0x24c2 <Dashboard_FrameFour+0x1c2>
    24e8:	14 c0       	rjmp	.+40     	; 0x2512 <Dashboard_FrameFour+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ea:	6f 81       	ldd	r22, Y+7	; 0x07
    24ec:	78 85       	ldd	r23, Y+8	; 0x08
    24ee:	89 85       	ldd	r24, Y+9	; 0x09
    24f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	9e 83       	std	Y+6, r25	; 0x06
    24fc:	8d 83       	std	Y+5, r24	; 0x05
    24fe:	8d 81       	ldd	r24, Y+5	; 0x05
    2500:	9e 81       	ldd	r25, Y+6	; 0x06
    2502:	9a 83       	std	Y+2, r25	; 0x02
    2504:	89 83       	std	Y+1, r24	; 0x01
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	9a 81       	ldd	r25, Y+2	; 0x02
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	f1 f7       	brne	.-4      	; 0x250a <Dashboard_FrameFour+0x20a>
    250e:	9a 83       	std	Y+2, r25	; 0x02
    2510:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CW ....");
    2512:	8f eb       	ldi	r24, 0xBF	; 191
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
				STEPPER_u8Move(STEPPER_u8_CW,Local_u16Angle);
    251a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    251c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	b9 01       	movw	r22, r18
    2522:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <STEPPER_u8Move>
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
			}
		}
	}

}
    2526:	6f 96       	adiw	r28, 0x1f	; 31
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	de bf       	out	0x3e, r29	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	cd bf       	out	0x3d, r28	; 61
    2532:	cf 91       	pop	r28
    2534:	df 91       	pop	r29
    2536:	08 95       	ret
				STEPPER_u8Move(STEPPER_u8_CW,Local_u16Angle);
				break;
			}
			else
			{
				addToBuffer((u8*)Local_Au8digits,Local_u8Key); // Append pressed key to buffer
    2538:	8d 8d       	ldd	r24, Y+29	; 0x1d
    253a:	28 2f       	mov	r18, r24
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	83 e9       	ldi	r24, 0x93	; 147
    2540:	92 e0       	ldi	r25, 0x02	; 2
    2542:	b9 01       	movw	r22, r18
    2544:	0e 94 5d 15 	call	0x2aba	; 0x2aba <addToBuffer>
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
    2548:	8d 8d       	ldd	r24, Y+29	; 0x1d
    254a:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    254e:	5a cf       	rjmp	.-332    	; 0x2404 <Dashboard_FrameFour+0x104>

00002550 <Dashboard_FrameFive>:
		}
	}

}
void Dashboard_FrameFive(void)
{
    2550:	df 93       	push	r29
    2552:	cf 93       	push	r28
    2554:	cd b7       	in	r28, 0x3d	; 61
    2556:	de b7       	in	r29, 0x3e	; 62
    2558:	6f 97       	sbiw	r28, 0x1f	; 31
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	f8 94       	cli
    255e:	de bf       	out	0x3e, r29	; 62
    2560:	0f be       	out	0x3f, r0	; 63
    2562:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u16 Local_u16Angle;
	LCD_voidClearScreen();
    2564:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    2568:	80 e0       	ldi	r24, 0x00	; 0
    256a:	90 e0       	ldi	r25, 0x00	; 0
    256c:	a0 ea       	ldi	r26, 0xA0	; 160
    256e:	b1 e4       	ldi	r27, 0x41	; 65
    2570:	89 8f       	std	Y+25, r24	; 0x19
    2572:	9a 8f       	std	Y+26, r25	; 0x1a
    2574:	ab 8f       	std	Y+27, r26	; 0x1b
    2576:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2578:	69 8d       	ldd	r22, Y+25	; 0x19
    257a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    257c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    257e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	4a ef       	ldi	r20, 0xFA	; 250
    2586:	54 e4       	ldi	r21, 0x44	; 68
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	8d 8b       	std	Y+21, r24	; 0x15
    2592:	9e 8b       	std	Y+22, r25	; 0x16
    2594:	af 8b       	std	Y+23, r26	; 0x17
    2596:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2598:	6d 89       	ldd	r22, Y+21	; 0x15
    259a:	7e 89       	ldd	r23, Y+22	; 0x16
    259c:	8f 89       	ldd	r24, Y+23	; 0x17
    259e:	98 8d       	ldd	r25, Y+24	; 0x18
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	40 e8       	ldi	r20, 0x80	; 128
    25a6:	5f e3       	ldi	r21, 0x3F	; 63
    25a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25ac:	88 23       	and	r24, r24
    25ae:	2c f4       	brge	.+10     	; 0x25ba <Dashboard_FrameFive+0x6a>
		__ticks = 1;
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	9c 8b       	std	Y+20, r25	; 0x14
    25b6:	8b 8b       	std	Y+19, r24	; 0x13
    25b8:	3f c0       	rjmp	.+126    	; 0x2638 <Dashboard_FrameFive+0xe8>
	else if (__tmp > 65535)
    25ba:	6d 89       	ldd	r22, Y+21	; 0x15
    25bc:	7e 89       	ldd	r23, Y+22	; 0x16
    25be:	8f 89       	ldd	r24, Y+23	; 0x17
    25c0:	98 8d       	ldd	r25, Y+24	; 0x18
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	4c f5       	brge	.+82     	; 0x2624 <Dashboard_FrameFive+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d2:	69 8d       	ldd	r22, Y+25	; 0x19
    25d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	40 e2       	ldi	r20, 0x20	; 32
    25e0:	51 e4       	ldi	r21, 0x41	; 65
    25e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e6:	dc 01       	movw	r26, r24
    25e8:	cb 01       	movw	r24, r22
    25ea:	bc 01       	movw	r22, r24
    25ec:	cd 01       	movw	r24, r26
    25ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f2:	dc 01       	movw	r26, r24
    25f4:	cb 01       	movw	r24, r22
    25f6:	9c 8b       	std	Y+20, r25	; 0x14
    25f8:	8b 8b       	std	Y+19, r24	; 0x13
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <Dashboard_FrameFive+0xca>
    25fc:	88 ec       	ldi	r24, 0xC8	; 200
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9a 8b       	std	Y+18, r25	; 0x12
    2602:	89 8b       	std	Y+17, r24	; 0x11
    2604:	89 89       	ldd	r24, Y+17	; 0x11
    2606:	9a 89       	ldd	r25, Y+18	; 0x12
    2608:	01 97       	sbiw	r24, 0x01	; 1
    260a:	f1 f7       	brne	.-4      	; 0x2608 <Dashboard_FrameFive+0xb8>
    260c:	9a 8b       	std	Y+18, r25	; 0x12
    260e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2610:	8b 89       	ldd	r24, Y+19	; 0x13
    2612:	9c 89       	ldd	r25, Y+20	; 0x14
    2614:	01 97       	sbiw	r24, 0x01	; 1
    2616:	9c 8b       	std	Y+20, r25	; 0x14
    2618:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261a:	8b 89       	ldd	r24, Y+19	; 0x13
    261c:	9c 89       	ldd	r25, Y+20	; 0x14
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	69 f7       	brne	.-38     	; 0x25fc <Dashboard_FrameFive+0xac>
    2622:	14 c0       	rjmp	.+40     	; 0x264c <Dashboard_FrameFive+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2624:	6d 89       	ldd	r22, Y+21	; 0x15
    2626:	7e 89       	ldd	r23, Y+22	; 0x16
    2628:	8f 89       	ldd	r24, Y+23	; 0x17
    262a:	98 8d       	ldd	r25, Y+24	; 0x18
    262c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	9c 8b       	std	Y+20, r25	; 0x14
    2636:	8b 8b       	std	Y+19, r24	; 0x13
    2638:	8b 89       	ldd	r24, Y+19	; 0x13
    263a:	9c 89       	ldd	r25, Y+20	; 0x14
    263c:	98 8b       	std	Y+16, r25	; 0x10
    263e:	8f 87       	std	Y+15, r24	; 0x0f
    2640:	8f 85       	ldd	r24, Y+15	; 0x0f
    2642:	98 89       	ldd	r25, Y+16	; 0x10
    2644:	01 97       	sbiw	r24, 0x01	; 1
    2646:	f1 f7       	brne	.-4      	; 0x2644 <Dashboard_FrameFive+0xf4>
    2648:	98 8b       	std	Y+16, r25	; 0x10
    264a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_voidWriteString((u8*)"Angle = ");
    264c:	80 ee       	ldi	r24, 0xE0	; 224
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key);
    2654:	ce 01       	movw	r24, r28
    2656:	4d 96       	adiw	r24, 0x1d	; 29
    2658:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)// If a key is pressed
    265c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    265e:	8f 3f       	cpi	r24, 0xFF	; 255
    2660:	c9 f3       	breq	.-14     	; 0x2654 <Dashboard_FrameFive+0x104>
		{
			if(Local_u8Key == '=') // If pressed key is '='
    2662:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2664:	8d 33       	cpi	r24, 0x3D	; 61
    2666:	09 f0       	breq	.+2      	; 0x266a <Dashboard_FrameFive+0x11a>
    2668:	8f c0       	rjmp	.+286    	; 0x2788 <Dashboard_FrameFive+0x238>
			{
				GetNumber(Local_Au8digits,&Local_u16Angle);
    266a:	83 e9       	ldi	r24, 0x93	; 147
    266c:	92 e0       	ldi	r25, 0x02	; 2
    266e:	9e 01       	movw	r18, r28
    2670:	22 5e       	subi	r18, 0xE2	; 226
    2672:	3f 4f       	sbci	r19, 0xFF	; 255
    2674:	b9 01       	movw	r22, r18
    2676:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <GetNumber>
				LCD_voidClearScreen();
    267a:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a0 ea       	ldi	r26, 0xA0	; 160
    2684:	b1 e4       	ldi	r27, 0x41	; 65
    2686:	8b 87       	std	Y+11, r24	; 0x0b
    2688:	9c 87       	std	Y+12, r25	; 0x0c
    268a:	ad 87       	std	Y+13, r26	; 0x0d
    268c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2690:	7c 85       	ldd	r23, Y+12	; 0x0c
    2692:	8d 85       	ldd	r24, Y+13	; 0x0d
    2694:	9e 85       	ldd	r25, Y+14	; 0x0e
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a ef       	ldi	r20, 0xFA	; 250
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8f 83       	std	Y+7, r24	; 0x07
    26a8:	98 87       	std	Y+8, r25	; 0x08
    26aa:	a9 87       	std	Y+9, r26	; 0x09
    26ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26ae:	6f 81       	ldd	r22, Y+7	; 0x07
    26b0:	78 85       	ldd	r23, Y+8	; 0x08
    26b2:	89 85       	ldd	r24, Y+9	; 0x09
    26b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <Dashboard_FrameFive+0x180>
		__ticks = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9e 83       	std	Y+6, r25	; 0x06
    26cc:	8d 83       	std	Y+5, r24	; 0x05
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <Dashboard_FrameFive+0x1fe>
	else if (__tmp > 65535)
    26d0:	6f 81       	ldd	r22, Y+7	; 0x07
    26d2:	78 85       	ldd	r23, Y+8	; 0x08
    26d4:	89 85       	ldd	r24, Y+9	; 0x09
    26d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	57 e4       	ldi	r21, 0x47	; 71
    26e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	4c f5       	brge	.+82     	; 0x273a <Dashboard_FrameFive+0x1ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    26ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9e 83       	std	Y+6, r25	; 0x06
    270e:	8d 83       	std	Y+5, r24	; 0x05
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <Dashboard_FrameFive+0x1e0>
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	9c 83       	std	Y+4, r25	; 0x04
    2718:	8b 83       	std	Y+3, r24	; 0x03
    271a:	8b 81       	ldd	r24, Y+3	; 0x03
    271c:	9c 81       	ldd	r25, Y+4	; 0x04
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <Dashboard_FrameFive+0x1ce>
    2722:	9c 83       	std	Y+4, r25	; 0x04
    2724:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	8d 81       	ldd	r24, Y+5	; 0x05
    2728:	9e 81       	ldd	r25, Y+6	; 0x06
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <Dashboard_FrameFive+0x1c2>
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <Dashboard_FrameFive+0x212>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	6f 81       	ldd	r22, Y+7	; 0x07
    273c:	78 85       	ldd	r23, Y+8	; 0x08
    273e:	89 85       	ldd	r24, Y+9	; 0x09
    2740:	9a 85       	ldd	r25, Y+10	; 0x0a
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9e 83       	std	Y+6, r25	; 0x06
    274c:	8d 83       	std	Y+5, r24	; 0x05
    274e:	8d 81       	ldd	r24, Y+5	; 0x05
    2750:	9e 81       	ldd	r25, Y+6	; 0x06
    2752:	9a 83       	std	Y+2, r25	; 0x02
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	9a 81       	ldd	r25, Y+2	; 0x02
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <Dashboard_FrameFive+0x20a>
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(20);
				LCD_voidWriteString((u8*)" Rotate CCW ....");
    2762:	8f ec       	ldi	r24, 0xCF	; 207
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
				STEPPER_u8Move(STEPPER_u8_CCW,Local_u16Angle);
    276a:	2e 8d       	ldd	r18, Y+30	; 0x1e
    276c:	3f 8d       	ldd	r19, Y+31	; 0x1f
    276e:	82 e0       	ldi	r24, 0x02	; 2
    2770:	b9 01       	movw	r22, r18
    2772:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <STEPPER_u8Move>
				addToBuffer((u8*)Local_Au8digits,Local_u8Key); // Append pressed key to buffer
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
			}
		}
	}
}
    2776:	6f 96       	adiw	r28, 0x1f	; 31
    2778:	0f b6       	in	r0, 0x3f	; 63
    277a:	f8 94       	cli
    277c:	de bf       	out	0x3e, r29	; 62
    277e:	0f be       	out	0x3f, r0	; 63
    2780:	cd bf       	out	0x3d, r28	; 61
    2782:	cf 91       	pop	r28
    2784:	df 91       	pop	r29
    2786:	08 95       	ret

				break;
			}
			else
			{
				addToBuffer((u8*)Local_Au8digits,Local_u8Key); // Append pressed key to buffer
    2788:	8d 8d       	ldd	r24, Y+29	; 0x1d
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	83 e9       	ldi	r24, 0x93	; 147
    2790:	92 e0       	ldi	r25, 0x02	; 2
    2792:	b9 01       	movw	r22, r18
    2794:	0e 94 5d 15 	call	0x2aba	; 0x2aba <addToBuffer>
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
    2798:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279a:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    279e:	5a cf       	rjmp	.-332    	; 0x2654 <Dashboard_FrameFive+0x104>

000027a0 <Dashboard_FrameSix>:
			}
		}
	}
}
void Dashboard_FrameSix(void)
{
    27a0:	df 93       	push	r29
    27a2:	cf 93       	push	r28
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	6f 97       	sbiw	r28, 0x1f	; 31
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key;
	u16 Local_u16Angle;
	SERVO_voidInit();
    27b4:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <SERVO_voidInit>
	LCD_voidClearScreen();
    27b8:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    27bc:	80 e0       	ldi	r24, 0x00	; 0
    27be:	90 e0       	ldi	r25, 0x00	; 0
    27c0:	a0 ea       	ldi	r26, 0xA0	; 160
    27c2:	b1 e4       	ldi	r27, 0x41	; 65
    27c4:	89 8f       	std	Y+25, r24	; 0x19
    27c6:	9a 8f       	std	Y+26, r25	; 0x1a
    27c8:	ab 8f       	std	Y+27, r26	; 0x1b
    27ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27cc:	69 8d       	ldd	r22, Y+25	; 0x19
    27ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	4a ef       	ldi	r20, 0xFA	; 250
    27da:	54 e4       	ldi	r21, 0x44	; 68
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	8d 8b       	std	Y+21, r24	; 0x15
    27e6:	9e 8b       	std	Y+22, r25	; 0x16
    27e8:	af 8b       	std	Y+23, r26	; 0x17
    27ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27ec:	6d 89       	ldd	r22, Y+21	; 0x15
    27ee:	7e 89       	ldd	r23, Y+22	; 0x16
    27f0:	8f 89       	ldd	r24, Y+23	; 0x17
    27f2:	98 8d       	ldd	r25, Y+24	; 0x18
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	40 e8       	ldi	r20, 0x80	; 128
    27fa:	5f e3       	ldi	r21, 0x3F	; 63
    27fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2800:	88 23       	and	r24, r24
    2802:	2c f4       	brge	.+10     	; 0x280e <Dashboard_FrameSix+0x6e>
		__ticks = 1;
    2804:	81 e0       	ldi	r24, 0x01	; 1
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9c 8b       	std	Y+20, r25	; 0x14
    280a:	8b 8b       	std	Y+19, r24	; 0x13
    280c:	3f c0       	rjmp	.+126    	; 0x288c <Dashboard_FrameSix+0xec>
	else if (__tmp > 65535)
    280e:	6d 89       	ldd	r22, Y+21	; 0x15
    2810:	7e 89       	ldd	r23, Y+22	; 0x16
    2812:	8f 89       	ldd	r24, Y+23	; 0x17
    2814:	98 8d       	ldd	r25, Y+24	; 0x18
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	3f ef       	ldi	r19, 0xFF	; 255
    281a:	4f e7       	ldi	r20, 0x7F	; 127
    281c:	57 e4       	ldi	r21, 0x47	; 71
    281e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2822:	18 16       	cp	r1, r24
    2824:	4c f5       	brge	.+82     	; 0x2878 <Dashboard_FrameSix+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2826:	69 8d       	ldd	r22, Y+25	; 0x19
    2828:	7a 8d       	ldd	r23, Y+26	; 0x1a
    282a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    282c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	40 e2       	ldi	r20, 0x20	; 32
    2834:	51 e4       	ldi	r21, 0x41	; 65
    2836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	bc 01       	movw	r22, r24
    2840:	cd 01       	movw	r24, r26
    2842:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	9c 8b       	std	Y+20, r25	; 0x14
    284c:	8b 8b       	std	Y+19, r24	; 0x13
    284e:	0f c0       	rjmp	.+30     	; 0x286e <Dashboard_FrameSix+0xce>
    2850:	88 ec       	ldi	r24, 0xC8	; 200
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	9a 8b       	std	Y+18, r25	; 0x12
    2856:	89 8b       	std	Y+17, r24	; 0x11
    2858:	89 89       	ldd	r24, Y+17	; 0x11
    285a:	9a 89       	ldd	r25, Y+18	; 0x12
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	f1 f7       	brne	.-4      	; 0x285c <Dashboard_FrameSix+0xbc>
    2860:	9a 8b       	std	Y+18, r25	; 0x12
    2862:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2864:	8b 89       	ldd	r24, Y+19	; 0x13
    2866:	9c 89       	ldd	r25, Y+20	; 0x14
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	9c 8b       	std	Y+20, r25	; 0x14
    286c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    286e:	8b 89       	ldd	r24, Y+19	; 0x13
    2870:	9c 89       	ldd	r25, Y+20	; 0x14
    2872:	00 97       	sbiw	r24, 0x00	; 0
    2874:	69 f7       	brne	.-38     	; 0x2850 <Dashboard_FrameSix+0xb0>
    2876:	14 c0       	rjmp	.+40     	; 0x28a0 <Dashboard_FrameSix+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2878:	6d 89       	ldd	r22, Y+21	; 0x15
    287a:	7e 89       	ldd	r23, Y+22	; 0x16
    287c:	8f 89       	ldd	r24, Y+23	; 0x17
    287e:	98 8d       	ldd	r25, Y+24	; 0x18
    2880:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	9c 8b       	std	Y+20, r25	; 0x14
    288a:	8b 8b       	std	Y+19, r24	; 0x13
    288c:	8b 89       	ldd	r24, Y+19	; 0x13
    288e:	9c 89       	ldd	r25, Y+20	; 0x14
    2890:	98 8b       	std	Y+16, r25	; 0x10
    2892:	8f 87       	std	Y+15, r24	; 0x0f
    2894:	8f 85       	ldd	r24, Y+15	; 0x0f
    2896:	98 89       	ldd	r25, Y+16	; 0x10
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	f1 f7       	brne	.-4      	; 0x2898 <Dashboard_FrameSix+0xf8>
    289c:	98 8b       	std	Y+16, r25	; 0x10
    289e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	LCD_voidWriteString((u8*)"Angle = ");
    28a0:	80 ee       	ldi	r24, 0xE0	; 224
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	SERVO_voidInit();
    28a8:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <SERVO_voidInit>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key);
    28ac:	ce 01       	movw	r24, r28
    28ae:	4d 96       	adiw	r24, 0x1d	; 29
    28b0:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)// If a key is pressed
    28b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28b6:	8f 3f       	cpi	r24, 0xFF	; 255
    28b8:	c9 f3       	breq	.-14     	; 0x28ac <Dashboard_FrameSix+0x10c>
		{
			if(Local_u8Key == '=') // If pressed key is '='
    28ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28bc:	8d 33       	cpi	r24, 0x3D	; 61
    28be:	09 f0       	breq	.+2      	; 0x28c2 <Dashboard_FrameSix+0x122>
    28c0:	8d c0       	rjmp	.+282    	; 0x29dc <Dashboard_FrameSix+0x23c>
			{
				GetNumber(Local_Au8digitsServo,&Local_u16Angle);
    28c2:	89 e9       	ldi	r24, 0x99	; 153
    28c4:	92 e0       	ldi	r25, 0x02	; 2
    28c6:	9e 01       	movw	r18, r28
    28c8:	22 5e       	subi	r18, 0xE2	; 226
    28ca:	3f 4f       	sbci	r19, 0xFF	; 255
    28cc:	b9 01       	movw	r22, r18
    28ce:	0e 94 fa 14 	call	0x29f4	; 0x29f4 <GetNumber>
				LCD_voidClearScreen();
    28d2:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	a0 ea       	ldi	r26, 0xA0	; 160
    28dc:	b1 e4       	ldi	r27, 0x41	; 65
    28de:	8b 87       	std	Y+11, r24	; 0x0b
    28e0:	9c 87       	std	Y+12, r25	; 0x0c
    28e2:	ad 87       	std	Y+13, r26	; 0x0d
    28e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	4a ef       	ldi	r20, 0xFA	; 250
    28f4:	54 e4       	ldi	r21, 0x44	; 68
    28f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28fa:	dc 01       	movw	r26, r24
    28fc:	cb 01       	movw	r24, r22
    28fe:	8f 83       	std	Y+7, r24	; 0x07
    2900:	98 87       	std	Y+8, r25	; 0x08
    2902:	a9 87       	std	Y+9, r26	; 0x09
    2904:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2906:	6f 81       	ldd	r22, Y+7	; 0x07
    2908:	78 85       	ldd	r23, Y+8	; 0x08
    290a:	89 85       	ldd	r24, Y+9	; 0x09
    290c:	9a 85       	ldd	r25, Y+10	; 0x0a
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e8       	ldi	r20, 0x80	; 128
    2914:	5f e3       	ldi	r21, 0x3F	; 63
    2916:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    291a:	88 23       	and	r24, r24
    291c:	2c f4       	brge	.+10     	; 0x2928 <Dashboard_FrameSix+0x188>
		__ticks = 1;
    291e:	81 e0       	ldi	r24, 0x01	; 1
    2920:	90 e0       	ldi	r25, 0x00	; 0
    2922:	9e 83       	std	Y+6, r25	; 0x06
    2924:	8d 83       	std	Y+5, r24	; 0x05
    2926:	3f c0       	rjmp	.+126    	; 0x29a6 <Dashboard_FrameSix+0x206>
	else if (__tmp > 65535)
    2928:	6f 81       	ldd	r22, Y+7	; 0x07
    292a:	78 85       	ldd	r23, Y+8	; 0x08
    292c:	89 85       	ldd	r24, Y+9	; 0x09
    292e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	3f ef       	ldi	r19, 0xFF	; 255
    2934:	4f e7       	ldi	r20, 0x7F	; 127
    2936:	57 e4       	ldi	r21, 0x47	; 71
    2938:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    293c:	18 16       	cp	r1, r24
    293e:	4c f5       	brge	.+82     	; 0x2992 <Dashboard_FrameSix+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2940:	6b 85       	ldd	r22, Y+11	; 0x0b
    2942:	7c 85       	ldd	r23, Y+12	; 0x0c
    2944:	8d 85       	ldd	r24, Y+13	; 0x0d
    2946:	9e 85       	ldd	r25, Y+14	; 0x0e
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e2       	ldi	r20, 0x20	; 32
    294e:	51 e4       	ldi	r21, 0x41	; 65
    2950:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	bc 01       	movw	r22, r24
    295a:	cd 01       	movw	r24, r26
    295c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	9e 83       	std	Y+6, r25	; 0x06
    2966:	8d 83       	std	Y+5, r24	; 0x05
    2968:	0f c0       	rjmp	.+30     	; 0x2988 <Dashboard_FrameSix+0x1e8>
    296a:	88 ec       	ldi	r24, 0xC8	; 200
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	9c 83       	std	Y+4, r25	; 0x04
    2970:	8b 83       	std	Y+3, r24	; 0x03
    2972:	8b 81       	ldd	r24, Y+3	; 0x03
    2974:	9c 81       	ldd	r25, Y+4	; 0x04
    2976:	01 97       	sbiw	r24, 0x01	; 1
    2978:	f1 f7       	brne	.-4      	; 0x2976 <Dashboard_FrameSix+0x1d6>
    297a:	9c 83       	std	Y+4, r25	; 0x04
    297c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297e:	8d 81       	ldd	r24, Y+5	; 0x05
    2980:	9e 81       	ldd	r25, Y+6	; 0x06
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	00 97       	sbiw	r24, 0x00	; 0
    298e:	69 f7       	brne	.-38     	; 0x296a <Dashboard_FrameSix+0x1ca>
    2990:	14 c0       	rjmp	.+40     	; 0x29ba <Dashboard_FrameSix+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2992:	6f 81       	ldd	r22, Y+7	; 0x07
    2994:	78 85       	ldd	r23, Y+8	; 0x08
    2996:	89 85       	ldd	r24, Y+9	; 0x09
    2998:	9a 85       	ldd	r25, Y+10	; 0x0a
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	9e 83       	std	Y+6, r25	; 0x06
    29a4:	8d 83       	std	Y+5, r24	; 0x05
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	9a 83       	std	Y+2, r25	; 0x02
    29ac:	89 83       	std	Y+1, r24	; 0x01
    29ae:	89 81       	ldd	r24, Y+1	; 0x01
    29b0:	9a 81       	ldd	r25, Y+2	; 0x02
    29b2:	01 97       	sbiw	r24, 0x01	; 1
    29b4:	f1 f7       	brne	.-4      	; 0x29b2 <Dashboard_FrameSix+0x212>
    29b6:	9a 83       	std	Y+2, r25	; 0x02
    29b8:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(20);
				LCD_voidWriteString((u8*)"Servo Rotate ... ");
    29ba:	89 ee       	ldi	r24, 0xE9	; 233
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
				SERVO_voidRotate(Local_u16Angle);
    29c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    29c6:	0e 94 a4 25 	call	0x4b48	; 0x4b48 <SERVO_voidRotate>
				addToBuffer((u8*)Local_Au8digitsServo,Local_u8Key); // Append pressed key to buffer
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
			}
		}
	}
}
    29ca:	6f 96       	adiw	r28, 0x1f	; 31
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	cf 91       	pop	r28
    29d8:	df 91       	pop	r29
    29da:	08 95       	ret
				SERVO_voidRotate(Local_u16Angle);
				break;
			}
			else
			{
				addToBuffer((u8*)Local_Au8digitsServo,Local_u8Key); // Append pressed key to buffer
    29dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29de:	28 2f       	mov	r18, r24
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	89 e9       	ldi	r24, 0x99	; 153
    29e4:	92 e0       	ldi	r25, 0x02	; 2
    29e6:	b9 01       	movw	r22, r18
    29e8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <addToBuffer>
				LCD_voidSendChar(Local_u8Key); // Display pressed key on LCD
    29ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29ee:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    29f2:	5c cf       	rjmp	.-328    	; 0x28ac <Dashboard_FrameSix+0x10c>

000029f4 <GetNumber>:
			}
		}
	}
}
void GetNumber(u8 *buffer,u16 *result)
{
    29f4:	df 93       	push	r29
    29f6:	cf 93       	push	r28
    29f8:	cd b7       	in	r28, 0x3d	; 61
    29fa:	de b7       	in	r29, 0x3e	; 62
    29fc:	27 97       	sbiw	r28, 0x07	; 7
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	9d 83       	std	Y+5, r25	; 0x05
    2a0a:	8c 83       	std	Y+4, r24	; 0x04
    2a0c:	7f 83       	std	Y+7, r23	; 0x07
    2a0e:	6e 83       	std	Y+6, r22	; 0x06
	u16 num = 0;// Variable to store current number
    2a10:	1b 82       	std	Y+3, r1	; 0x03
    2a12:	1a 82       	std	Y+2, r1	; 0x02
	u8 i = 0;
    2a14:	19 82       	std	Y+1, r1	; 0x01
    2a16:	36 c0       	rjmp	.+108    	; 0x2a84 <GetNumber+0x90>
	while(*(buffer+i) != '\0') // Loop until end of buffer is reached
	{
		if (buffer[i] >= '0' && buffer[i] <= '9')
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a20:	9d 81       	ldd	r25, Y+5	; 0x05
    2a22:	fc 01       	movw	r30, r24
    2a24:	e2 0f       	add	r30, r18
    2a26:	f3 1f       	adc	r31, r19
    2a28:	80 81       	ld	r24, Z
    2a2a:	80 33       	cpi	r24, 0x30	; 48
    2a2c:	40 f1       	brcs	.+80     	; 0x2a7e <GetNumber+0x8a>
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	8c 81       	ldd	r24, Y+4	; 0x04
    2a36:	9d 81       	ldd	r25, Y+5	; 0x05
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e2 0f       	add	r30, r18
    2a3c:	f3 1f       	adc	r31, r19
    2a3e:	80 81       	ld	r24, Z
    2a40:	8a 33       	cpi	r24, 0x3A	; 58
    2a42:	e8 f4       	brcc	.+58     	; 0x2a7e <GetNumber+0x8a>
		{
			// Build the number digit by digit
			num = num * 10 + (buffer[i] - '0');
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	9b 81       	ldd	r25, Y+3	; 0x03
    2a48:	9c 01       	movw	r18, r24
    2a4a:	22 0f       	add	r18, r18
    2a4c:	33 1f       	adc	r19, r19
    2a4e:	c9 01       	movw	r24, r18
    2a50:	88 0f       	add	r24, r24
    2a52:	99 1f       	adc	r25, r25
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	a9 01       	movw	r20, r18
    2a5a:	48 0f       	add	r20, r24
    2a5c:	59 1f       	adc	r21, r25
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	28 2f       	mov	r18, r24
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	8c 81       	ldd	r24, Y+4	; 0x04
    2a66:	9d 81       	ldd	r25, Y+5	; 0x05
    2a68:	fc 01       	movw	r30, r24
    2a6a:	e2 0f       	add	r30, r18
    2a6c:	f3 1f       	adc	r31, r19
    2a6e:	80 81       	ld	r24, Z
    2a70:	88 2f       	mov	r24, r24
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	84 0f       	add	r24, r20
    2a76:	95 1f       	adc	r25, r21
    2a78:	c0 97       	sbiw	r24, 0x30	; 48
    2a7a:	9b 83       	std	Y+3, r25	; 0x03
    2a7c:	8a 83       	std	Y+2, r24	; 0x02
		}
		i++;
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	8f 5f       	subi	r24, 0xFF	; 255
    2a82:	89 83       	std	Y+1, r24	; 0x01
}
void GetNumber(u8 *buffer,u16 *result)
{
	u16 num = 0;// Variable to store current number
	u8 i = 0;
	while(*(buffer+i) != '\0') // Loop until end of buffer is reached
    2a84:	89 81       	ldd	r24, Y+1	; 0x01
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a8e:	fc 01       	movw	r30, r24
    2a90:	e2 0f       	add	r30, r18
    2a92:	f3 1f       	adc	r31, r19
    2a94:	80 81       	ld	r24, Z
    2a96:	88 23       	and	r24, r24
    2a98:	09 f0       	breq	.+2      	; 0x2a9c <GetNumber+0xa8>
    2a9a:	be cf       	rjmp	.-132    	; 0x2a18 <GetNumber+0x24>
			// Build the number digit by digit
			num = num * 10 + (buffer[i] - '0');
		}
		i++;
	}
	*result = num;
    2a9c:	ee 81       	ldd	r30, Y+6	; 0x06
    2a9e:	ff 81       	ldd	r31, Y+7	; 0x07
    2aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	80 83       	st	Z, r24
}
    2aa8:	27 96       	adiw	r28, 0x07	; 7
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	cf 91       	pop	r28
    2ab6:	df 91       	pop	r29
    2ab8:	08 95       	ret

00002aba <addToBuffer>:
void addToBuffer(u8 *buffer,u8 key)
{
    2aba:	df 93       	push	r29
    2abc:	cf 93       	push	r28
    2abe:	00 d0       	rcall	.+0      	; 0x2ac0 <addToBuffer+0x6>
    2ac0:	0f 92       	push	r0
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	9a 83       	std	Y+2, r25	; 0x02
    2ac8:	89 83       	std	Y+1, r24	; 0x01
    2aca:	6b 83       	std	Y+3, r22	; 0x03
	if(Local_u8Ind < 5) // Make sure buffer index is within range
    2acc:	80 91 92 02 	lds	r24, 0x0292
    2ad0:	85 30       	cpi	r24, 0x05	; 5
    2ad2:	d0 f4       	brcc	.+52     	; 0x2b08 <addToBuffer+0x4e>
	{
		*(buffer+Local_u8Ind) = key; // Store the character in buffer
    2ad4:	80 91 92 02 	lds	r24, 0x0292
    2ad8:	28 2f       	mov	r18, r24
    2ada:	30 e0       	ldi	r19, 0x00	; 0
    2adc:	89 81       	ldd	r24, Y+1	; 0x01
    2ade:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	e2 0f       	add	r30, r18
    2ae4:	f3 1f       	adc	r31, r19
    2ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae8:	80 83       	st	Z, r24
		Local_u8Ind++; // Increment buffer index
    2aea:	80 91 92 02 	lds	r24, 0x0292
    2aee:	8f 5f       	subi	r24, 0xFF	; 255
    2af0:	80 93 92 02 	sts	0x0292, r24
		*(buffer+Local_u8Ind) = '\0';// Null-terminate buffer
    2af4:	80 91 92 02 	lds	r24, 0x0292
    2af8:	28 2f       	mov	r18, r24
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	9a 81       	ldd	r25, Y+2	; 0x02
    2b00:	fc 01       	movw	r30, r24
    2b02:	e2 0f       	add	r30, r18
    2b04:	f3 1f       	adc	r31, r19
    2b06:	10 82       	st	Z, r1
	}
}
    2b08:	0f 90       	pop	r0
    2b0a:	0f 90       	pop	r0
    2b0c:	0f 90       	pop	r0
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <H_BRIDGE_voidRotateCW>:

#include "H_Bridge.h"


void H_BRIDGE_voidRotateCW(void)
{
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_LOW);
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	64 e0       	ldi	r22, 0x04	; 4
    2b20:	40 e0       	ldi	r20, 0x00	; 0
    2b22:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_HIGH);
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	65 e0       	ldi	r22, 0x05	; 5
    2b2a:	41 e0       	ldi	r20, 0x01	; 1
    2b2c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    2b30:	f5 cf       	rjmp	.-22     	; 0x2b1c <H_BRIDGE_voidRotateCW+0x8>

00002b32 <H_BRIDGE_voidRotateCCW>:
	}
}
void H_BRIDGE_voidRotateCCW(void)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN1,DIO_u8_LOW);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	65 e0       	ldi	r22, 0x05	; 5
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
		DIO_u8SetPinValue(H_BRIDGE_u8_PORT,H_BRIDGE_u8_PIN0,DIO_u8_HIGH);
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	64 e0       	ldi	r22, 0x04	; 4
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    2b4e:	f5 cf       	rjmp	.-22     	; 0x2b3a <H_BRIDGE_voidRotateCCW+0x8>

00002b50 <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    2b50:	df 93       	push	r29
    2b52:	cf 93       	push	r28
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	66 97       	sbiw	r28, 0x16	; 22
    2b5a:	0f b6       	in	r0, 0x3f	; 63
    2b5c:	f8 94       	cli
    2b5e:	de bf       	out	0x3e, r29	; 62
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	cd bf       	out	0x3d, r28	; 61
    2b64:	9e 8b       	std	Y+22, r25	; 0x16
    2b66:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b68:	81 e0       	ldi	r24, 0x01	; 1
    2b6a:	8b 8b       	std	Y+19, r24	; 0x13
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    2b6c:	18 8a       	std	Y+16, r1	; 0x10
	if(Copy_pu8ReturnedKey != NULL)
    2b6e:	8d 89       	ldd	r24, Y+21	; 0x15
    2b70:	9e 89       	ldd	r25, Y+22	; 0x16
    2b72:	00 97       	sbiw	r24, 0x00	; 0
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <KPD_u8GetKeyState+0x28>
    2b76:	f0 c0       	rjmp	.+480    	; 0x2d58 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    2b78:	ed 89       	ldd	r30, Y+21	; 0x15
    2b7a:	fe 89       	ldd	r31, Y+22	; 0x16
    2b7c:	8f ef       	ldi	r24, 0xFF	; 255
    2b7e:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    2b80:	1a 8a       	std	Y+18, r1	; 0x12
    2b82:	e5 c0       	rjmp	.+458    	; 0x2d4e <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    2b84:	8a 89       	ldd	r24, Y+18	; 0x12
    2b86:	88 2f       	mov	r24, r24
    2b88:	90 e0       	ldi	r25, 0x00	; 0
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e7 57       	subi	r30, 0x77	; 119
    2b8e:	fd 4f       	sbci	r31, 0xFD	; 253
    2b90:	90 81       	ld	r25, Z
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	69 2f       	mov	r22, r25
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    2b9c:	19 8a       	std	Y+17, r1	; 0x11
    2b9e:	c1 c0       	rjmp	.+386    	; 0x2d22 <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    2ba0:	89 89       	ldd	r24, Y+17	; 0x11
    2ba2:	88 2f       	mov	r24, r24
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	e3 57       	subi	r30, 0x73	; 115
    2baa:	fd 4f       	sbci	r31, 0xFD	; 253
    2bac:	90 81       	ld	r25, Z
    2bae:	9e 01       	movw	r18, r28
    2bb0:	2c 5e       	subi	r18, 0xEC	; 236
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	69 2f       	mov	r22, r25
    2bb8:	a9 01       	movw	r20, r18
    2bba:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    2bbe:	8c 89       	ldd	r24, Y+20	; 0x14
    2bc0:	88 23       	and	r24, r24
    2bc2:	09 f0       	breq	.+2      	; 0x2bc6 <KPD_u8GetKeyState+0x76>
    2bc4:	ab c0       	rjmp	.+342    	; 0x2d1c <KPD_u8GetKeyState+0x1cc>
    2bc6:	80 e0       	ldi	r24, 0x00	; 0
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	a0 ea       	ldi	r26, 0xA0	; 160
    2bcc:	b1 e4       	ldi	r27, 0x41	; 65
    2bce:	8b 87       	std	Y+11, r24	; 0x0b
    2bd0:	9c 87       	std	Y+12, r25	; 0x0c
    2bd2:	ad 87       	std	Y+13, r26	; 0x0d
    2bd4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bda:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bde:	20 e0       	ldi	r18, 0x00	; 0
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	4a ef       	ldi	r20, 0xFA	; 250
    2be4:	54 e4       	ldi	r21, 0x44	; 68
    2be6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bea:	dc 01       	movw	r26, r24
    2bec:	cb 01       	movw	r24, r22
    2bee:	8f 83       	std	Y+7, r24	; 0x07
    2bf0:	98 87       	std	Y+8, r25	; 0x08
    2bf2:	a9 87       	std	Y+9, r26	; 0x09
    2bf4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf8:	78 85       	ldd	r23, Y+8	; 0x08
    2bfa:	89 85       	ldd	r24, Y+9	; 0x09
    2bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e8       	ldi	r20, 0x80	; 128
    2c04:	5f e3       	ldi	r21, 0x3F	; 63
    2c06:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c0a:	88 23       	and	r24, r24
    2c0c:	2c f4       	brge	.+10     	; 0x2c18 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	9e 83       	std	Y+6, r25	; 0x06
    2c14:	8d 83       	std	Y+5, r24	; 0x05
    2c16:	3f c0       	rjmp	.+126    	; 0x2c96 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    2c18:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1a:	78 85       	ldd	r23, Y+8	; 0x08
    2c1c:	89 85       	ldd	r24, Y+9	; 0x09
    2c1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	3f ef       	ldi	r19, 0xFF	; 255
    2c24:	4f e7       	ldi	r20, 0x7F	; 127
    2c26:	57 e4       	ldi	r21, 0x47	; 71
    2c28:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c2c:	18 16       	cp	r1, r24
    2c2e:	4c f5       	brge	.+82     	; 0x2c82 <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	40 e2       	ldi	r20, 0x20	; 32
    2c3e:	51 e4       	ldi	r21, 0x41	; 65
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	bc 01       	movw	r22, r24
    2c4a:	cd 01       	movw	r24, r26
    2c4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	9e 83       	std	Y+6, r25	; 0x06
    2c56:	8d 83       	std	Y+5, r24	; 0x05
    2c58:	0f c0       	rjmp	.+30     	; 0x2c78 <KPD_u8GetKeyState+0x128>
    2c5a:	88 ec       	ldi	r24, 0xC8	; 200
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	9c 83       	std	Y+4, r25	; 0x04
    2c60:	8b 83       	std	Y+3, r24	; 0x03
    2c62:	8b 81       	ldd	r24, Y+3	; 0x03
    2c64:	9c 81       	ldd	r25, Y+4	; 0x04
    2c66:	01 97       	sbiw	r24, 0x01	; 1
    2c68:	f1 f7       	brne	.-4      	; 0x2c66 <KPD_u8GetKeyState+0x116>
    2c6a:	9c 83       	std	Y+4, r25	; 0x04
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c70:	9e 81       	ldd	r25, Y+6	; 0x06
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	9e 83       	std	Y+6, r25	; 0x06
    2c76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c78:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7c:	00 97       	sbiw	r24, 0x00	; 0
    2c7e:	69 f7       	brne	.-38     	; 0x2c5a <KPD_u8GetKeyState+0x10a>
    2c80:	14 c0       	rjmp	.+40     	; 0x2caa <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c82:	6f 81       	ldd	r22, Y+7	; 0x07
    2c84:	78 85       	ldd	r23, Y+8	; 0x08
    2c86:	89 85       	ldd	r24, Y+9	; 0x09
    2c88:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	9e 83       	std	Y+6, r25	; 0x06
    2c94:	8d 83       	std	Y+5, r24	; 0x05
    2c96:	8d 81       	ldd	r24, Y+5	; 0x05
    2c98:	9e 81       	ldd	r25, Y+6	; 0x06
    2c9a:	9a 83       	std	Y+2, r25	; 0x02
    2c9c:	89 83       	std	Y+1, r24	; 0x01
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <KPD_u8GetKeyState+0x152>
    2ca6:	9a 83       	std	Y+2, r25	; 0x02
    2ca8:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    2caa:	89 89       	ldd	r24, Y+17	; 0x11
    2cac:	88 2f       	mov	r24, r24
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	fc 01       	movw	r30, r24
    2cb2:	e3 57       	subi	r30, 0x73	; 115
    2cb4:	fd 4f       	sbci	r31, 0xFD	; 253
    2cb6:	90 81       	ld	r25, Z
    2cb8:	9e 01       	movw	r18, r28
    2cba:	2c 5e       	subi	r18, 0xEC	; 236
    2cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbe:	80 e0       	ldi	r24, 0x00	; 0
    2cc0:	69 2f       	mov	r22, r25
    2cc2:	a9 01       	movw	r20, r18
    2cc4:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_u8GetPinValue>
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    2cca:	89 89       	ldd	r24, Y+17	; 0x11
    2ccc:	88 2f       	mov	r24, r24
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	e3 57       	subi	r30, 0x73	; 115
    2cd4:	fd 4f       	sbci	r31, 0xFD	; 253
    2cd6:	90 81       	ld	r25, Z
    2cd8:	9e 01       	movw	r18, r28
    2cda:	2c 5e       	subi	r18, 0xEC	; 236
    2cdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	69 2f       	mov	r22, r25
    2ce2:	a9 01       	movw	r20, r18
    2ce4:	0e 94 75 09 	call	0x12ea	; 0x12ea <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    2ce8:	8c 89       	ldd	r24, Y+20	; 0x14
    2cea:	88 23       	and	r24, r24
    2cec:	71 f3       	breq	.-36     	; 0x2cca <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    2cee:	8a 89       	ldd	r24, Y+18	; 0x12
    2cf0:	48 2f       	mov	r20, r24
    2cf2:	50 e0       	ldi	r21, 0x00	; 0
    2cf4:	89 89       	ldd	r24, Y+17	; 0x11
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	ca 01       	movw	r24, r20
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	82 0f       	add	r24, r18
    2d06:	93 1f       	adc	r25, r19
    2d08:	fc 01       	movw	r30, r24
    2d0a:	e7 58       	subi	r30, 0x87	; 135
    2d0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2d0e:	80 81       	ld	r24, Z
    2d10:	ed 89       	ldd	r30, Y+21	; 0x15
    2d12:	fe 89       	ldd	r31, Y+22	; 0x16
    2d14:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    2d16:	81 e0       	ldi	r24, 0x01	; 1
    2d18:	88 8b       	std	Y+16, r24	; 0x10
    2d1a:	07 c0       	rjmp	.+14     	; 0x2d2a <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    2d1c:	89 89       	ldd	r24, Y+17	; 0x11
    2d1e:	8f 5f       	subi	r24, 0xFF	; 255
    2d20:	89 8b       	std	Y+17, r24	; 0x11
    2d22:	89 89       	ldd	r24, Y+17	; 0x11
    2d24:	84 30       	cpi	r24, 0x04	; 4
    2d26:	08 f4       	brcc	.+2      	; 0x2d2a <KPD_u8GetKeyState+0x1da>
    2d28:	3b cf       	rjmp	.-394    	; 0x2ba0 <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row*/
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    2d2a:	8a 89       	ldd	r24, Y+18	; 0x12
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	fc 01       	movw	r30, r24
    2d32:	e7 57       	subi	r30, 0x77	; 119
    2d34:	fd 4f       	sbci	r31, 0xFD	; 253
    2d36:	90 81       	ld	r25, Z
    2d38:	80 e0       	ldi	r24, 0x00	; 0
    2d3a:	69 2f       	mov	r22, r25
    2d3c:	41 e0       	ldi	r20, 0x01	; 1
    2d3e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    2d42:	88 89       	ldd	r24, Y+16	; 0x10
    2d44:	81 30       	cpi	r24, 0x01	; 1
    2d46:	49 f0       	breq	.+18     	; 0x2d5a <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    2d48:	8a 89       	ldd	r24, Y+18	; 0x12
    2d4a:	8f 5f       	subi	r24, 0xFF	; 255
    2d4c:	8a 8b       	std	Y+18, r24	; 0x12
    2d4e:	8a 89       	ldd	r24, Y+18	; 0x12
    2d50:	84 30       	cpi	r24, 0x04	; 4
    2d52:	08 f4       	brcc	.+2      	; 0x2d56 <KPD_u8GetKeyState+0x206>
    2d54:	17 cf       	rjmp	.-466    	; 0x2b84 <KPD_u8GetKeyState+0x34>
    2d56:	01 c0       	rjmp	.+2      	; 0x2d5a <KPD_u8GetKeyState+0x20a>


	}
	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    2d58:	1f 86       	std	Y+15, r1	; 0x0f
	}
	return Local_u8ErrorState;
    2d5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5c:	66 96       	adiw	r28, 0x16	; 22
    2d5e:	0f b6       	in	r0, 0x3f	; 63
    2d60:	f8 94       	cli
    2d62:	de bf       	out	0x3e, r29	; 62
    2d64:	0f be       	out	0x3f, r0	; 63
    2d66:	cd bf       	out	0x3d, r28	; 61
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    2d6e:	0f 93       	push	r16
    2d70:	1f 93       	push	r17
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	cd b7       	in	r28, 0x3d	; 61
    2d78:	de b7       	in	r29, 0x3e	; 62
    2d7a:	cc 54       	subi	r28, 0x4C	; 76
    2d7c:	d0 40       	sbci	r29, 0x00	; 0
    2d7e:	0f b6       	in	r0, 0x3f	; 63
    2d80:	f8 94       	cli
    2d82:	de bf       	out	0x3e, r29	; 62
    2d84:	0f be       	out	0x3f, r0	; 63
    2d86:	cd bf       	out	0x3d, r28	; 61
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e7 5b       	subi	r30, 0xB7	; 183
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	ac e0       	ldi	r26, 0x0C	; 12
    2d94:	b2 e4       	ldi	r27, 0x42	; 66
    2d96:	80 83       	st	Z, r24
    2d98:	91 83       	std	Z+1, r25	; 0x01
    2d9a:	a2 83       	std	Z+2, r26	; 0x02
    2d9c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9e:	8e 01       	movw	r16, r28
    2da0:	0b 5b       	subi	r16, 0xBB	; 187
    2da2:	1f 4f       	sbci	r17, 0xFF	; 255
    2da4:	fe 01       	movw	r30, r28
    2da6:	e7 5b       	subi	r30, 0xB7	; 183
    2da8:	ff 4f       	sbci	r31, 0xFF	; 255
    2daa:	60 81       	ld	r22, Z
    2dac:	71 81       	ldd	r23, Z+1	; 0x01
    2dae:	82 81       	ldd	r24, Z+2	; 0x02
    2db0:	93 81       	ldd	r25, Z+3	; 0x03
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	4a ef       	ldi	r20, 0xFA	; 250
    2db8:	54 e4       	ldi	r21, 0x44	; 68
    2dba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dbe:	dc 01       	movw	r26, r24
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	f8 01       	movw	r30, r16
    2dc4:	80 83       	st	Z, r24
    2dc6:	91 83       	std	Z+1, r25	; 0x01
    2dc8:	a2 83       	std	Z+2, r26	; 0x02
    2dca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2dcc:	fe 01       	movw	r30, r28
    2dce:	eb 5b       	subi	r30, 0xBB	; 187
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	60 81       	ld	r22, Z
    2dd4:	71 81       	ldd	r23, Z+1	; 0x01
    2dd6:	82 81       	ldd	r24, Z+2	; 0x02
    2dd8:	93 81       	ldd	r25, Z+3	; 0x03
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e8       	ldi	r20, 0x80	; 128
    2de0:	5f e3       	ldi	r21, 0x3F	; 63
    2de2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2de6:	88 23       	and	r24, r24
    2de8:	44 f4       	brge	.+16     	; 0x2dfa <LCD_voidInit+0x8c>
		__ticks = 1;
    2dea:	fe 01       	movw	r30, r28
    2dec:	ed 5b       	subi	r30, 0xBD	; 189
    2dee:	ff 4f       	sbci	r31, 0xFF	; 255
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	91 83       	std	Z+1, r25	; 0x01
    2df6:	80 83       	st	Z, r24
    2df8:	64 c0       	rjmp	.+200    	; 0x2ec2 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	eb 5b       	subi	r30, 0xBB	; 187
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	60 81       	ld	r22, Z
    2e02:	71 81       	ldd	r23, Z+1	; 0x01
    2e04:	82 81       	ldd	r24, Z+2	; 0x02
    2e06:	93 81       	ldd	r25, Z+3	; 0x03
    2e08:	20 e0       	ldi	r18, 0x00	; 0
    2e0a:	3f ef       	ldi	r19, 0xFF	; 255
    2e0c:	4f e7       	ldi	r20, 0x7F	; 127
    2e0e:	57 e4       	ldi	r21, 0x47	; 71
    2e10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e14:	18 16       	cp	r1, r24
    2e16:	0c f0       	brlt	.+2      	; 0x2e1a <LCD_voidInit+0xac>
    2e18:	43 c0       	rjmp	.+134    	; 0x2ea0 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e7 5b       	subi	r30, 0xB7	; 183
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	20 e0       	ldi	r18, 0x00	; 0
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	40 e2       	ldi	r20, 0x20	; 32
    2e2e:	51 e4       	ldi	r21, 0x41	; 65
    2e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e34:	dc 01       	movw	r26, r24
    2e36:	cb 01       	movw	r24, r22
    2e38:	8e 01       	movw	r16, r28
    2e3a:	0d 5b       	subi	r16, 0xBD	; 189
    2e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e3e:	bc 01       	movw	r22, r24
    2e40:	cd 01       	movw	r24, r26
    2e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e46:	dc 01       	movw	r26, r24
    2e48:	cb 01       	movw	r24, r22
    2e4a:	f8 01       	movw	r30, r16
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	80 83       	st	Z, r24
    2e50:	1f c0       	rjmp	.+62     	; 0x2e90 <LCD_voidInit+0x122>
    2e52:	fe 01       	movw	r30, r28
    2e54:	ef 5b       	subi	r30, 0xBF	; 191
    2e56:	ff 4f       	sbci	r31, 0xFF	; 255
    2e58:	88 ec       	ldi	r24, 0xC8	; 200
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	80 83       	st	Z, r24
    2e60:	fe 01       	movw	r30, r28
    2e62:	ef 5b       	subi	r30, 0xBF	; 191
    2e64:	ff 4f       	sbci	r31, 0xFF	; 255
    2e66:	80 81       	ld	r24, Z
    2e68:	91 81       	ldd	r25, Z+1	; 0x01
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_voidInit+0xfc>
    2e6e:	fe 01       	movw	r30, r28
    2e70:	ef 5b       	subi	r30, 0xBF	; 191
    2e72:	ff 4f       	sbci	r31, 0xFF	; 255
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e78:	de 01       	movw	r26, r28
    2e7a:	ad 5b       	subi	r26, 0xBD	; 189
    2e7c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e7e:	fe 01       	movw	r30, r28
    2e80:	ed 5b       	subi	r30, 0xBD	; 189
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	11 96       	adiw	r26, 0x01	; 1
    2e8c:	9c 93       	st	X, r25
    2e8e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e90:	fe 01       	movw	r30, r28
    2e92:	ed 5b       	subi	r30, 0xBD	; 189
    2e94:	ff 4f       	sbci	r31, 0xFF	; 255
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	d1 f6       	brne	.-76     	; 0x2e52 <LCD_voidInit+0xe4>
    2e9e:	24 c0       	rjmp	.+72     	; 0x2ee8 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ea0:	8e 01       	movw	r16, r28
    2ea2:	0d 5b       	subi	r16, 0xBD	; 189
    2ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	eb 5b       	subi	r30, 0xBB	; 187
    2eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    2eac:	60 81       	ld	r22, Z
    2eae:	71 81       	ldd	r23, Z+1	; 0x01
    2eb0:	82 81       	ldd	r24, Z+2	; 0x02
    2eb2:	93 81       	ldd	r25, Z+3	; 0x03
    2eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb8:	dc 01       	movw	r26, r24
    2eba:	cb 01       	movw	r24, r22
    2ebc:	f8 01       	movw	r30, r16
    2ebe:	91 83       	std	Z+1, r25	; 0x01
    2ec0:	80 83       	st	Z, r24
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	ed 5b       	subi	r30, 0xBD	; 189
    2ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec8:	80 81       	ld	r24, Z
    2eca:	91 81       	ldd	r25, Z+1	; 0x01
    2ecc:	fe 01       	movw	r30, r28
    2ece:	ff 96       	adiw	r30, 0x3f	; 63
    2ed0:	91 83       	std	Z+1, r25	; 0x01
    2ed2:	80 83       	st	Z, r24
    2ed4:	fe 01       	movw	r30, r28
    2ed6:	ff 96       	adiw	r30, 0x3f	; 63
    2ed8:	80 81       	ld	r24, Z
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	01 97       	sbiw	r24, 0x01	; 1
    2ede:	f1 f7       	brne	.-4      	; 0x2edc <LCD_voidInit+0x16e>
    2ee0:	fe 01       	movw	r30, r28
    2ee2:	ff 96       	adiw	r30, 0x3f	; 63
    2ee4:	91 83       	std	Z+1, r25	; 0x01
    2ee6:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    2ee8:	88 e3       	ldi	r24, 0x38	; 56
    2eea:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
    2eee:	80 e0       	ldi	r24, 0x00	; 0
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	a0 e2       	ldi	r26, 0x20	; 32
    2ef4:	b2 e4       	ldi	r27, 0x42	; 66
    2ef6:	8b af       	std	Y+59, r24	; 0x3b
    2ef8:	9c af       	std	Y+60, r25	; 0x3c
    2efa:	ad af       	std	Y+61, r26	; 0x3d
    2efc:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2efe:	6b ad       	ldd	r22, Y+59	; 0x3b
    2f00:	7c ad       	ldd	r23, Y+60	; 0x3c
    2f02:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f04:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f06:	2b ea       	ldi	r18, 0xAB	; 171
    2f08:	3a ea       	ldi	r19, 0xAA	; 170
    2f0a:	4a e2       	ldi	r20, 0x2A	; 42
    2f0c:	50 e4       	ldi	r21, 0x40	; 64
    2f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	8f ab       	std	Y+55, r24	; 0x37
    2f18:	98 af       	std	Y+56, r25	; 0x38
    2f1a:	a9 af       	std	Y+57, r26	; 0x39
    2f1c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2f1e:	6f a9       	ldd	r22, Y+55	; 0x37
    2f20:	78 ad       	ldd	r23, Y+56	; 0x38
    2f22:	89 ad       	ldd	r24, Y+57	; 0x39
    2f24:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	40 e8       	ldi	r20, 0x80	; 128
    2f2c:	5f e3       	ldi	r21, 0x3F	; 63
    2f2e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f32:	88 23       	and	r24, r24
    2f34:	1c f4       	brge	.+6      	; 0x2f3c <LCD_voidInit+0x1ce>
		__ticks = 1;
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	8e ab       	std	Y+54, r24	; 0x36
    2f3a:	91 c0       	rjmp	.+290    	; 0x305e <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2f3c:	6f a9       	ldd	r22, Y+55	; 0x37
    2f3e:	78 ad       	ldd	r23, Y+56	; 0x38
    2f40:	89 ad       	ldd	r24, Y+57	; 0x39
    2f42:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	4f e7       	ldi	r20, 0x7F	; 127
    2f4a:	53 e4       	ldi	r21, 0x43	; 67
    2f4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f50:	18 16       	cp	r1, r24
    2f52:	0c f0       	brlt	.+2      	; 0x2f56 <LCD_voidInit+0x1e8>
    2f54:	7b c0       	rjmp	.+246    	; 0x304c <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    2f56:	6b ad       	ldd	r22, Y+59	; 0x3b
    2f58:	7c ad       	ldd	r23, Y+60	; 0x3c
    2f5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	4a e7       	ldi	r20, 0x7A	; 122
    2f64:	54 e4       	ldi	r21, 0x44	; 68
    2f66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f6a:	dc 01       	movw	r26, r24
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	8a ab       	std	Y+50, r24	; 0x32
    2f70:	9b ab       	std	Y+51, r25	; 0x33
    2f72:	ac ab       	std	Y+52, r26	; 0x34
    2f74:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f76:	6a a9       	ldd	r22, Y+50	; 0x32
    2f78:	7b a9       	ldd	r23, Y+51	; 0x33
    2f7a:	8c a9       	ldd	r24, Y+52	; 0x34
    2f7c:	9d a9       	ldd	r25, Y+53	; 0x35
    2f7e:	20 e0       	ldi	r18, 0x00	; 0
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	4a ef       	ldi	r20, 0xFA	; 250
    2f84:	54 e4       	ldi	r21, 0x44	; 68
    2f86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	8e a7       	std	Y+46, r24	; 0x2e
    2f90:	9f a7       	std	Y+47, r25	; 0x2f
    2f92:	a8 ab       	std	Y+48, r26	; 0x30
    2f94:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2f96:	6e a5       	ldd	r22, Y+46	; 0x2e
    2f98:	7f a5       	ldd	r23, Y+47	; 0x2f
    2f9a:	88 a9       	ldd	r24, Y+48	; 0x30
    2f9c:	99 a9       	ldd	r25, Y+49	; 0x31
    2f9e:	20 e0       	ldi	r18, 0x00	; 0
    2fa0:	30 e0       	ldi	r19, 0x00	; 0
    2fa2:	40 e8       	ldi	r20, 0x80	; 128
    2fa4:	5f e3       	ldi	r21, 0x3F	; 63
    2fa6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2faa:	88 23       	and	r24, r24
    2fac:	2c f4       	brge	.+10     	; 0x2fb8 <LCD_voidInit+0x24a>
		__ticks = 1;
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	9d a7       	std	Y+45, r25	; 0x2d
    2fb4:	8c a7       	std	Y+44, r24	; 0x2c
    2fb6:	3f c0       	rjmp	.+126    	; 0x3036 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2fb8:	6e a5       	ldd	r22, Y+46	; 0x2e
    2fba:	7f a5       	ldd	r23, Y+47	; 0x2f
    2fbc:	88 a9       	ldd	r24, Y+48	; 0x30
    2fbe:	99 a9       	ldd	r25, Y+49	; 0x31
    2fc0:	20 e0       	ldi	r18, 0x00	; 0
    2fc2:	3f ef       	ldi	r19, 0xFF	; 255
    2fc4:	4f e7       	ldi	r20, 0x7F	; 127
    2fc6:	57 e4       	ldi	r21, 0x47	; 71
    2fc8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fcc:	18 16       	cp	r1, r24
    2fce:	4c f5       	brge	.+82     	; 0x3022 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fd0:	6a a9       	ldd	r22, Y+50	; 0x32
    2fd2:	7b a9       	ldd	r23, Y+51	; 0x33
    2fd4:	8c a9       	ldd	r24, Y+52	; 0x34
    2fd6:	9d a9       	ldd	r25, Y+53	; 0x35
    2fd8:	20 e0       	ldi	r18, 0x00	; 0
    2fda:	30 e0       	ldi	r19, 0x00	; 0
    2fdc:	40 e2       	ldi	r20, 0x20	; 32
    2fde:	51 e4       	ldi	r21, 0x41	; 65
    2fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe4:	dc 01       	movw	r26, r24
    2fe6:	cb 01       	movw	r24, r22
    2fe8:	bc 01       	movw	r22, r24
    2fea:	cd 01       	movw	r24, r26
    2fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ff0:	dc 01       	movw	r26, r24
    2ff2:	cb 01       	movw	r24, r22
    2ff4:	9d a7       	std	Y+45, r25	; 0x2d
    2ff6:	8c a7       	std	Y+44, r24	; 0x2c
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <LCD_voidInit+0x2aa>
    2ffa:	88 ec       	ldi	r24, 0xC8	; 200
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	9b a7       	std	Y+43, r25	; 0x2b
    3000:	8a a7       	std	Y+42, r24	; 0x2a
    3002:	8a a5       	ldd	r24, Y+42	; 0x2a
    3004:	9b a5       	ldd	r25, Y+43	; 0x2b
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <LCD_voidInit+0x298>
    300a:	9b a7       	std	Y+43, r25	; 0x2b
    300c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    300e:	8c a5       	ldd	r24, Y+44	; 0x2c
    3010:	9d a5       	ldd	r25, Y+45	; 0x2d
    3012:	01 97       	sbiw	r24, 0x01	; 1
    3014:	9d a7       	std	Y+45, r25	; 0x2d
    3016:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3018:	8c a5       	ldd	r24, Y+44	; 0x2c
    301a:	9d a5       	ldd	r25, Y+45	; 0x2d
    301c:	00 97       	sbiw	r24, 0x00	; 0
    301e:	69 f7       	brne	.-38     	; 0x2ffa <LCD_voidInit+0x28c>
    3020:	24 c0       	rjmp	.+72     	; 0x306a <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3022:	6e a5       	ldd	r22, Y+46	; 0x2e
    3024:	7f a5       	ldd	r23, Y+47	; 0x2f
    3026:	88 a9       	ldd	r24, Y+48	; 0x30
    3028:	99 a9       	ldd	r25, Y+49	; 0x31
    302a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302e:	dc 01       	movw	r26, r24
    3030:	cb 01       	movw	r24, r22
    3032:	9d a7       	std	Y+45, r25	; 0x2d
    3034:	8c a7       	std	Y+44, r24	; 0x2c
    3036:	8c a5       	ldd	r24, Y+44	; 0x2c
    3038:	9d a5       	ldd	r25, Y+45	; 0x2d
    303a:	99 a7       	std	Y+41, r25	; 0x29
    303c:	88 a7       	std	Y+40, r24	; 0x28
    303e:	88 a5       	ldd	r24, Y+40	; 0x28
    3040:	99 a5       	ldd	r25, Y+41	; 0x29
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <LCD_voidInit+0x2d4>
    3046:	99 a7       	std	Y+41, r25	; 0x29
    3048:	88 a7       	std	Y+40, r24	; 0x28
    304a:	0f c0       	rjmp	.+30     	; 0x306a <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    304c:	6f a9       	ldd	r22, Y+55	; 0x37
    304e:	78 ad       	ldd	r23, Y+56	; 0x38
    3050:	89 ad       	ldd	r24, Y+57	; 0x39
    3052:	9a ad       	ldd	r25, Y+58	; 0x3a
    3054:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3058:	dc 01       	movw	r26, r24
    305a:	cb 01       	movw	r24, r22
    305c:	8e ab       	std	Y+54, r24	; 0x36
    305e:	8e a9       	ldd	r24, Y+54	; 0x36
    3060:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3062:	8f a1       	ldd	r24, Y+39	; 0x27
    3064:	8a 95       	dec	r24
    3066:	f1 f7       	brne	.-4      	; 0x3064 <LCD_voidInit+0x2f6>
    3068:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    306a:	8e e0       	ldi	r24, 0x0E	; 14
    306c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
    3070:	80 e0       	ldi	r24, 0x00	; 0
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	a0 e2       	ldi	r26, 0x20	; 32
    3076:	b2 e4       	ldi	r27, 0x42	; 66
    3078:	8b a3       	std	Y+35, r24	; 0x23
    307a:	9c a3       	std	Y+36, r25	; 0x24
    307c:	ad a3       	std	Y+37, r26	; 0x25
    307e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3080:	6b a1       	ldd	r22, Y+35	; 0x23
    3082:	7c a1       	ldd	r23, Y+36	; 0x24
    3084:	8d a1       	ldd	r24, Y+37	; 0x25
    3086:	9e a1       	ldd	r25, Y+38	; 0x26
    3088:	2b ea       	ldi	r18, 0xAB	; 171
    308a:	3a ea       	ldi	r19, 0xAA	; 170
    308c:	4a e2       	ldi	r20, 0x2A	; 42
    308e:	50 e4       	ldi	r21, 0x40	; 64
    3090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	8f 8f       	std	Y+31, r24	; 0x1f
    309a:	98 a3       	std	Y+32, r25	; 0x20
    309c:	a9 a3       	std	Y+33, r26	; 0x21
    309e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    30a0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    30a2:	78 a1       	ldd	r23, Y+32	; 0x20
    30a4:	89 a1       	ldd	r24, Y+33	; 0x21
    30a6:	9a a1       	ldd	r25, Y+34	; 0x22
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e8       	ldi	r20, 0x80	; 128
    30ae:	5f e3       	ldi	r21, 0x3F	; 63
    30b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30b4:	88 23       	and	r24, r24
    30b6:	1c f4       	brge	.+6      	; 0x30be <LCD_voidInit+0x350>
		__ticks = 1;
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	8e 8f       	std	Y+30, r24	; 0x1e
    30bc:	91 c0       	rjmp	.+290    	; 0x31e0 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    30be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    30c0:	78 a1       	ldd	r23, Y+32	; 0x20
    30c2:	89 a1       	ldd	r24, Y+33	; 0x21
    30c4:	9a a1       	ldd	r25, Y+34	; 0x22
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	30 e0       	ldi	r19, 0x00	; 0
    30ca:	4f e7       	ldi	r20, 0x7F	; 127
    30cc:	53 e4       	ldi	r21, 0x43	; 67
    30ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30d2:	18 16       	cp	r1, r24
    30d4:	0c f0       	brlt	.+2      	; 0x30d8 <LCD_voidInit+0x36a>
    30d6:	7b c0       	rjmp	.+246    	; 0x31ce <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    30d8:	6b a1       	ldd	r22, Y+35	; 0x23
    30da:	7c a1       	ldd	r23, Y+36	; 0x24
    30dc:	8d a1       	ldd	r24, Y+37	; 0x25
    30de:	9e a1       	ldd	r25, Y+38	; 0x26
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	4a e7       	ldi	r20, 0x7A	; 122
    30e6:	54 e4       	ldi	r21, 0x44	; 68
    30e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30ec:	dc 01       	movw	r26, r24
    30ee:	cb 01       	movw	r24, r22
    30f0:	8a 8f       	std	Y+26, r24	; 0x1a
    30f2:	9b 8f       	std	Y+27, r25	; 0x1b
    30f4:	ac 8f       	std	Y+28, r26	; 0x1c
    30f6:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    30fa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    30fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30fe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	30 e0       	ldi	r19, 0x00	; 0
    3104:	4a ef       	ldi	r20, 0xFA	; 250
    3106:	54 e4       	ldi	r21, 0x44	; 68
    3108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	8e 8b       	std	Y+22, r24	; 0x16
    3112:	9f 8b       	std	Y+23, r25	; 0x17
    3114:	a8 8f       	std	Y+24, r26	; 0x18
    3116:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3118:	6e 89       	ldd	r22, Y+22	; 0x16
    311a:	7f 89       	ldd	r23, Y+23	; 0x17
    311c:	88 8d       	ldd	r24, Y+24	; 0x18
    311e:	99 8d       	ldd	r25, Y+25	; 0x19
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	40 e8       	ldi	r20, 0x80	; 128
    3126:	5f e3       	ldi	r21, 0x3F	; 63
    3128:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    312c:	88 23       	and	r24, r24
    312e:	2c f4       	brge	.+10     	; 0x313a <LCD_voidInit+0x3cc>
		__ticks = 1;
    3130:	81 e0       	ldi	r24, 0x01	; 1
    3132:	90 e0       	ldi	r25, 0x00	; 0
    3134:	9d 8b       	std	Y+21, r25	; 0x15
    3136:	8c 8b       	std	Y+20, r24	; 0x14
    3138:	3f c0       	rjmp	.+126    	; 0x31b8 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    313a:	6e 89       	ldd	r22, Y+22	; 0x16
    313c:	7f 89       	ldd	r23, Y+23	; 0x17
    313e:	88 8d       	ldd	r24, Y+24	; 0x18
    3140:	99 8d       	ldd	r25, Y+25	; 0x19
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	3f ef       	ldi	r19, 0xFF	; 255
    3146:	4f e7       	ldi	r20, 0x7F	; 127
    3148:	57 e4       	ldi	r21, 0x47	; 71
    314a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    314e:	18 16       	cp	r1, r24
    3150:	4c f5       	brge	.+82     	; 0x31a4 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3152:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3154:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3156:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3158:	9d 8d       	ldd	r25, Y+29	; 0x1d
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	40 e2       	ldi	r20, 0x20	; 32
    3160:	51 e4       	ldi	r21, 0x41	; 65
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	9d 8b       	std	Y+21, r25	; 0x15
    3178:	8c 8b       	std	Y+20, r24	; 0x14
    317a:	0f c0       	rjmp	.+30     	; 0x319a <LCD_voidInit+0x42c>
    317c:	88 ec       	ldi	r24, 0xC8	; 200
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	9b 8b       	std	Y+19, r25	; 0x13
    3182:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3184:	8a 89       	ldd	r24, Y+18	; 0x12
    3186:	9b 89       	ldd	r25, Y+19	; 0x13
    3188:	01 97       	sbiw	r24, 0x01	; 1
    318a:	f1 f7       	brne	.-4      	; 0x3188 <LCD_voidInit+0x41a>
    318c:	9b 8b       	std	Y+19, r25	; 0x13
    318e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3190:	8c 89       	ldd	r24, Y+20	; 0x14
    3192:	9d 89       	ldd	r25, Y+21	; 0x15
    3194:	01 97       	sbiw	r24, 0x01	; 1
    3196:	9d 8b       	std	Y+21, r25	; 0x15
    3198:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    319a:	8c 89       	ldd	r24, Y+20	; 0x14
    319c:	9d 89       	ldd	r25, Y+21	; 0x15
    319e:	00 97       	sbiw	r24, 0x00	; 0
    31a0:	69 f7       	brne	.-38     	; 0x317c <LCD_voidInit+0x40e>
    31a2:	24 c0       	rjmp	.+72     	; 0x31ec <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a4:	6e 89       	ldd	r22, Y+22	; 0x16
    31a6:	7f 89       	ldd	r23, Y+23	; 0x17
    31a8:	88 8d       	ldd	r24, Y+24	; 0x18
    31aa:	99 8d       	ldd	r25, Y+25	; 0x19
    31ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	9d 8b       	std	Y+21, r25	; 0x15
    31b6:	8c 8b       	std	Y+20, r24	; 0x14
    31b8:	8c 89       	ldd	r24, Y+20	; 0x14
    31ba:	9d 89       	ldd	r25, Y+21	; 0x15
    31bc:	99 8b       	std	Y+17, r25	; 0x11
    31be:	88 8b       	std	Y+16, r24	; 0x10
    31c0:	88 89       	ldd	r24, Y+16	; 0x10
    31c2:	99 89       	ldd	r25, Y+17	; 0x11
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <LCD_voidInit+0x456>
    31c8:	99 8b       	std	Y+17, r25	; 0x11
    31ca:	88 8b       	std	Y+16, r24	; 0x10
    31cc:	0f c0       	rjmp	.+30     	; 0x31ec <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31d0:	78 a1       	ldd	r23, Y+32	; 0x20
    31d2:	89 a1       	ldd	r24, Y+33	; 0x21
    31d4:	9a a1       	ldd	r25, Y+34	; 0x22
    31d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	8e 8f       	std	Y+30, r24	; 0x1e
    31e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    31e2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    31e6:	8a 95       	dec	r24
    31e8:	f1 f7       	brne	.-4      	; 0x31e6 <LCD_voidInit+0x478>
    31ea:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
    31f2:	80 e0       	ldi	r24, 0x00	; 0
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	a0 e0       	ldi	r26, 0x00	; 0
    31f8:	b0 e4       	ldi	r27, 0x40	; 64
    31fa:	8b 87       	std	Y+11, r24	; 0x0b
    31fc:	9c 87       	std	Y+12, r25	; 0x0c
    31fe:	ad 87       	std	Y+13, r26	; 0x0d
    3200:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3202:	6b 85       	ldd	r22, Y+11	; 0x0b
    3204:	7c 85       	ldd	r23, Y+12	; 0x0c
    3206:	8d 85       	ldd	r24, Y+13	; 0x0d
    3208:	9e 85       	ldd	r25, Y+14	; 0x0e
    320a:	20 e0       	ldi	r18, 0x00	; 0
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	4a ef       	ldi	r20, 0xFA	; 250
    3210:	54 e4       	ldi	r21, 0x44	; 68
    3212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3216:	dc 01       	movw	r26, r24
    3218:	cb 01       	movw	r24, r22
    321a:	8f 83       	std	Y+7, r24	; 0x07
    321c:	98 87       	std	Y+8, r25	; 0x08
    321e:	a9 87       	std	Y+9, r26	; 0x09
    3220:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3222:	6f 81       	ldd	r22, Y+7	; 0x07
    3224:	78 85       	ldd	r23, Y+8	; 0x08
    3226:	89 85       	ldd	r24, Y+9	; 0x09
    3228:	9a 85       	ldd	r25, Y+10	; 0x0a
    322a:	20 e0       	ldi	r18, 0x00	; 0
    322c:	30 e0       	ldi	r19, 0x00	; 0
    322e:	40 e8       	ldi	r20, 0x80	; 128
    3230:	5f e3       	ldi	r21, 0x3F	; 63
    3232:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3236:	88 23       	and	r24, r24
    3238:	2c f4       	brge	.+10     	; 0x3244 <LCD_voidInit+0x4d6>
		__ticks = 1;
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	9e 83       	std	Y+6, r25	; 0x06
    3240:	8d 83       	std	Y+5, r24	; 0x05
    3242:	3f c0       	rjmp	.+126    	; 0x32c2 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    3244:	6f 81       	ldd	r22, Y+7	; 0x07
    3246:	78 85       	ldd	r23, Y+8	; 0x08
    3248:	89 85       	ldd	r24, Y+9	; 0x09
    324a:	9a 85       	ldd	r25, Y+10	; 0x0a
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	3f ef       	ldi	r19, 0xFF	; 255
    3250:	4f e7       	ldi	r20, 0x7F	; 127
    3252:	57 e4       	ldi	r21, 0x47	; 71
    3254:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3258:	18 16       	cp	r1, r24
    325a:	4c f5       	brge	.+82     	; 0x32ae <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    325c:	6b 85       	ldd	r22, Y+11	; 0x0b
    325e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3260:	8d 85       	ldd	r24, Y+13	; 0x0d
    3262:	9e 85       	ldd	r25, Y+14	; 0x0e
    3264:	20 e0       	ldi	r18, 0x00	; 0
    3266:	30 e0       	ldi	r19, 0x00	; 0
    3268:	40 e2       	ldi	r20, 0x20	; 32
    326a:	51 e4       	ldi	r21, 0x41	; 65
    326c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3270:	dc 01       	movw	r26, r24
    3272:	cb 01       	movw	r24, r22
    3274:	bc 01       	movw	r22, r24
    3276:	cd 01       	movw	r24, r26
    3278:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	9e 83       	std	Y+6, r25	; 0x06
    3282:	8d 83       	std	Y+5, r24	; 0x05
    3284:	0f c0       	rjmp	.+30     	; 0x32a4 <LCD_voidInit+0x536>
    3286:	88 ec       	ldi	r24, 0xC8	; 200
    3288:	90 e0       	ldi	r25, 0x00	; 0
    328a:	9c 83       	std	Y+4, r25	; 0x04
    328c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    328e:	8b 81       	ldd	r24, Y+3	; 0x03
    3290:	9c 81       	ldd	r25, Y+4	; 0x04
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <LCD_voidInit+0x524>
    3296:	9c 83       	std	Y+4, r25	; 0x04
    3298:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	00 97       	sbiw	r24, 0x00	; 0
    32aa:	69 f7       	brne	.-38     	; 0x3286 <LCD_voidInit+0x518>
    32ac:	14 c0       	rjmp	.+40     	; 0x32d6 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ae:	6f 81       	ldd	r22, Y+7	; 0x07
    32b0:	78 85       	ldd	r23, Y+8	; 0x08
    32b2:	89 85       	ldd	r24, Y+9	; 0x09
    32b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	9e 83       	std	Y+6, r25	; 0x06
    32c0:	8d 83       	std	Y+5, r24	; 0x05
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	9e 81       	ldd	r25, Y+6	; 0x06
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
    32ce:	01 97       	sbiw	r24, 0x01	; 1
    32d0:	f1 f7       	brne	.-4      	; 0x32ce <LCD_voidInit+0x560>
    32d2:	9a 83       	std	Y+2, r25	; 0x02
    32d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    32d6:	86 e0       	ldi	r24, 0x06	; 6
    32d8:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>


}
    32dc:	c4 5b       	subi	r28, 0xB4	; 180
    32de:	df 4f       	sbci	r29, 0xFF	; 255
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	1f 91       	pop	r17
    32f0:	0f 91       	pop	r16
    32f2:	08 95       	ret

000032f4 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	e1 97       	sbiw	r28, 0x31	; 49
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
    3308:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    330a:	83 e0       	ldi	r24, 0x03	; 3
    330c:	60 e0       	ldi	r22, 0x00	; 0
    330e:	40 e0       	ldi	r20, 0x00	; 0
    3310:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    3314:	83 e0       	ldi	r24, 0x03	; 3
    3316:	61 e0       	ldi	r22, 0x01	; 1
    3318:	40 e0       	ldi	r20, 0x00	; 0
    331a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    331e:	82 e0       	ldi	r24, 0x02	; 2
    3320:	69 a9       	ldd	r22, Y+49	; 0x31
    3322:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    3326:	83 e0       	ldi	r24, 0x03	; 3
    3328:	62 e0       	ldi	r22, 0x02	; 2
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    3330:	80 e0       	ldi	r24, 0x00	; 0
    3332:	90 e0       	ldi	r25, 0x00	; 0
    3334:	a0 e8       	ldi	r26, 0x80	; 128
    3336:	bf e3       	ldi	r27, 0x3F	; 63
    3338:	8d a7       	std	Y+45, r24	; 0x2d
    333a:	9e a7       	std	Y+46, r25	; 0x2e
    333c:	af a7       	std	Y+47, r26	; 0x2f
    333e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3340:	6d a5       	ldd	r22, Y+45	; 0x2d
    3342:	7e a5       	ldd	r23, Y+46	; 0x2e
    3344:	8f a5       	ldd	r24, Y+47	; 0x2f
    3346:	98 a9       	ldd	r25, Y+48	; 0x30
    3348:	2b ea       	ldi	r18, 0xAB	; 171
    334a:	3a ea       	ldi	r19, 0xAA	; 170
    334c:	4a e2       	ldi	r20, 0x2A	; 42
    334e:	50 e4       	ldi	r21, 0x40	; 64
    3350:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3354:	dc 01       	movw	r26, r24
    3356:	cb 01       	movw	r24, r22
    3358:	89 a7       	std	Y+41, r24	; 0x29
    335a:	9a a7       	std	Y+42, r25	; 0x2a
    335c:	ab a7       	std	Y+43, r26	; 0x2b
    335e:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3360:	69 a5       	ldd	r22, Y+41	; 0x29
    3362:	7a a5       	ldd	r23, Y+42	; 0x2a
    3364:	8b a5       	ldd	r24, Y+43	; 0x2b
    3366:	9c a5       	ldd	r25, Y+44	; 0x2c
    3368:	20 e0       	ldi	r18, 0x00	; 0
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	40 e8       	ldi	r20, 0x80	; 128
    336e:	5f e3       	ldi	r21, 0x3F	; 63
    3370:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3374:	88 23       	and	r24, r24
    3376:	1c f4       	brge	.+6      	; 0x337e <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    3378:	81 e0       	ldi	r24, 0x01	; 1
    337a:	88 a7       	std	Y+40, r24	; 0x28
    337c:	91 c0       	rjmp	.+290    	; 0x34a0 <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    337e:	69 a5       	ldd	r22, Y+41	; 0x29
    3380:	7a a5       	ldd	r23, Y+42	; 0x2a
    3382:	8b a5       	ldd	r24, Y+43	; 0x2b
    3384:	9c a5       	ldd	r25, Y+44	; 0x2c
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	4f e7       	ldi	r20, 0x7F	; 127
    338c:	53 e4       	ldi	r21, 0x43	; 67
    338e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3392:	18 16       	cp	r1, r24
    3394:	0c f0       	brlt	.+2      	; 0x3398 <LCD_voidSendCmnd+0xa4>
    3396:	7b c0       	rjmp	.+246    	; 0x348e <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    3398:	6d a5       	ldd	r22, Y+45	; 0x2d
    339a:	7e a5       	ldd	r23, Y+46	; 0x2e
    339c:	8f a5       	ldd	r24, Y+47	; 0x2f
    339e:	98 a9       	ldd	r25, Y+48	; 0x30
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	4a e7       	ldi	r20, 0x7A	; 122
    33a6:	54 e4       	ldi	r21, 0x44	; 68
    33a8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    33ac:	dc 01       	movw	r26, r24
    33ae:	cb 01       	movw	r24, r22
    33b0:	8c a3       	std	Y+36, r24	; 0x24
    33b2:	9d a3       	std	Y+37, r25	; 0x25
    33b4:	ae a3       	std	Y+38, r26	; 0x26
    33b6:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b8:	6c a1       	ldd	r22, Y+36	; 0x24
    33ba:	7d a1       	ldd	r23, Y+37	; 0x25
    33bc:	8e a1       	ldd	r24, Y+38	; 0x26
    33be:	9f a1       	ldd	r25, Y+39	; 0x27
    33c0:	20 e0       	ldi	r18, 0x00	; 0
    33c2:	30 e0       	ldi	r19, 0x00	; 0
    33c4:	4a ef       	ldi	r20, 0xFA	; 250
    33c6:	54 e4       	ldi	r21, 0x44	; 68
    33c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	88 a3       	std	Y+32, r24	; 0x20
    33d2:	99 a3       	std	Y+33, r25	; 0x21
    33d4:	aa a3       	std	Y+34, r26	; 0x22
    33d6:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    33d8:	68 a1       	ldd	r22, Y+32	; 0x20
    33da:	79 a1       	ldd	r23, Y+33	; 0x21
    33dc:	8a a1       	ldd	r24, Y+34	; 0x22
    33de:	9b a1       	ldd	r25, Y+35	; 0x23
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	40 e8       	ldi	r20, 0x80	; 128
    33e6:	5f e3       	ldi	r21, 0x3F	; 63
    33e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33ec:	88 23       	and	r24, r24
    33ee:	2c f4       	brge	.+10     	; 0x33fa <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    33f0:	81 e0       	ldi	r24, 0x01	; 1
    33f2:	90 e0       	ldi	r25, 0x00	; 0
    33f4:	9f 8f       	std	Y+31, r25	; 0x1f
    33f6:	8e 8f       	std	Y+30, r24	; 0x1e
    33f8:	3f c0       	rjmp	.+126    	; 0x3478 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    33fa:	68 a1       	ldd	r22, Y+32	; 0x20
    33fc:	79 a1       	ldd	r23, Y+33	; 0x21
    33fe:	8a a1       	ldd	r24, Y+34	; 0x22
    3400:	9b a1       	ldd	r25, Y+35	; 0x23
    3402:	20 e0       	ldi	r18, 0x00	; 0
    3404:	3f ef       	ldi	r19, 0xFF	; 255
    3406:	4f e7       	ldi	r20, 0x7F	; 127
    3408:	57 e4       	ldi	r21, 0x47	; 71
    340a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    340e:	18 16       	cp	r1, r24
    3410:	4c f5       	brge	.+82     	; 0x3464 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3412:	6c a1       	ldd	r22, Y+36	; 0x24
    3414:	7d a1       	ldd	r23, Y+37	; 0x25
    3416:	8e a1       	ldd	r24, Y+38	; 0x26
    3418:	9f a1       	ldd	r25, Y+39	; 0x27
    341a:	20 e0       	ldi	r18, 0x00	; 0
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	40 e2       	ldi	r20, 0x20	; 32
    3420:	51 e4       	ldi	r21, 0x41	; 65
    3422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3432:	dc 01       	movw	r26, r24
    3434:	cb 01       	movw	r24, r22
    3436:	9f 8f       	std	Y+31, r25	; 0x1f
    3438:	8e 8f       	std	Y+30, r24	; 0x1e
    343a:	0f c0       	rjmp	.+30     	; 0x345a <LCD_voidSendCmnd+0x166>
    343c:	88 ec       	ldi	r24, 0xC8	; 200
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	9d 8f       	std	Y+29, r25	; 0x1d
    3442:	8c 8f       	std	Y+28, r24	; 0x1c
    3444:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3446:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3448:	01 97       	sbiw	r24, 0x01	; 1
    344a:	f1 f7       	brne	.-4      	; 0x3448 <LCD_voidSendCmnd+0x154>
    344c:	9d 8f       	std	Y+29, r25	; 0x1d
    344e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3450:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3452:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3454:	01 97       	sbiw	r24, 0x01	; 1
    3456:	9f 8f       	std	Y+31, r25	; 0x1f
    3458:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    345a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    345c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    345e:	00 97       	sbiw	r24, 0x00	; 0
    3460:	69 f7       	brne	.-38     	; 0x343c <LCD_voidSendCmnd+0x148>
    3462:	24 c0       	rjmp	.+72     	; 0x34ac <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3464:	68 a1       	ldd	r22, Y+32	; 0x20
    3466:	79 a1       	ldd	r23, Y+33	; 0x21
    3468:	8a a1       	ldd	r24, Y+34	; 0x22
    346a:	9b a1       	ldd	r25, Y+35	; 0x23
    346c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	9f 8f       	std	Y+31, r25	; 0x1f
    3476:	8e 8f       	std	Y+30, r24	; 0x1e
    3478:	8e 8d       	ldd	r24, Y+30	; 0x1e
    347a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    347c:	9b 8f       	std	Y+27, r25	; 0x1b
    347e:	8a 8f       	std	Y+26, r24	; 0x1a
    3480:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3482:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	f1 f7       	brne	.-4      	; 0x3484 <LCD_voidSendCmnd+0x190>
    3488:	9b 8f       	std	Y+27, r25	; 0x1b
    348a:	8a 8f       	std	Y+26, r24	; 0x1a
    348c:	0f c0       	rjmp	.+30     	; 0x34ac <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    348e:	69 a5       	ldd	r22, Y+41	; 0x29
    3490:	7a a5       	ldd	r23, Y+42	; 0x2a
    3492:	8b a5       	ldd	r24, Y+43	; 0x2b
    3494:	9c a5       	ldd	r25, Y+44	; 0x2c
    3496:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349a:	dc 01       	movw	r26, r24
    349c:	cb 01       	movw	r24, r22
    349e:	88 a7       	std	Y+40, r24	; 0x28
    34a0:	88 a5       	ldd	r24, Y+40	; 0x28
    34a2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    34a4:	89 8d       	ldd	r24, Y+25	; 0x19
    34a6:	8a 95       	dec	r24
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <LCD_voidSendCmnd+0x1b2>
    34aa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    34ac:	83 e0       	ldi	r24, 0x03	; 3
    34ae:	62 e0       	ldi	r22, 0x02	; 2
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    34b6:	80 e0       	ldi	r24, 0x00	; 0
    34b8:	90 e0       	ldi	r25, 0x00	; 0
    34ba:	a0 e8       	ldi	r26, 0x80	; 128
    34bc:	bf e3       	ldi	r27, 0x3F	; 63
    34be:	8d 8b       	std	Y+21, r24	; 0x15
    34c0:	9e 8b       	std	Y+22, r25	; 0x16
    34c2:	af 8b       	std	Y+23, r26	; 0x17
    34c4:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34c6:	6d 89       	ldd	r22, Y+21	; 0x15
    34c8:	7e 89       	ldd	r23, Y+22	; 0x16
    34ca:	8f 89       	ldd	r24, Y+23	; 0x17
    34cc:	98 8d       	ldd	r25, Y+24	; 0x18
    34ce:	2b ea       	ldi	r18, 0xAB	; 171
    34d0:	3a ea       	ldi	r19, 0xAA	; 170
    34d2:	4a e2       	ldi	r20, 0x2A	; 42
    34d4:	50 e4       	ldi	r21, 0x40	; 64
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	89 8b       	std	Y+17, r24	; 0x11
    34e0:	9a 8b       	std	Y+18, r25	; 0x12
    34e2:	ab 8b       	std	Y+19, r26	; 0x13
    34e4:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    34e6:	69 89       	ldd	r22, Y+17	; 0x11
    34e8:	7a 89       	ldd	r23, Y+18	; 0x12
    34ea:	8b 89       	ldd	r24, Y+19	; 0x13
    34ec:	9c 89       	ldd	r25, Y+20	; 0x14
    34ee:	20 e0       	ldi	r18, 0x00	; 0
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e8       	ldi	r20, 0x80	; 128
    34f4:	5f e3       	ldi	r21, 0x3F	; 63
    34f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34fa:	88 23       	and	r24, r24
    34fc:	1c f4       	brge	.+6      	; 0x3504 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	88 8b       	std	Y+16, r24	; 0x10
    3502:	91 c0       	rjmp	.+290    	; 0x3626 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    3504:	69 89       	ldd	r22, Y+17	; 0x11
    3506:	7a 89       	ldd	r23, Y+18	; 0x12
    3508:	8b 89       	ldd	r24, Y+19	; 0x13
    350a:	9c 89       	ldd	r25, Y+20	; 0x14
    350c:	20 e0       	ldi	r18, 0x00	; 0
    350e:	30 e0       	ldi	r19, 0x00	; 0
    3510:	4f e7       	ldi	r20, 0x7F	; 127
    3512:	53 e4       	ldi	r21, 0x43	; 67
    3514:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3518:	18 16       	cp	r1, r24
    351a:	0c f0       	brlt	.+2      	; 0x351e <LCD_voidSendCmnd+0x22a>
    351c:	7b c0       	rjmp	.+246    	; 0x3614 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    351e:	6d 89       	ldd	r22, Y+21	; 0x15
    3520:	7e 89       	ldd	r23, Y+22	; 0x16
    3522:	8f 89       	ldd	r24, Y+23	; 0x17
    3524:	98 8d       	ldd	r25, Y+24	; 0x18
    3526:	20 e0       	ldi	r18, 0x00	; 0
    3528:	30 e0       	ldi	r19, 0x00	; 0
    352a:	4a e7       	ldi	r20, 0x7A	; 122
    352c:	54 e4       	ldi	r21, 0x44	; 68
    352e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	8c 87       	std	Y+12, r24	; 0x0c
    3538:	9d 87       	std	Y+13, r25	; 0x0d
    353a:	ae 87       	std	Y+14, r26	; 0x0e
    353c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    353e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3540:	7d 85       	ldd	r23, Y+13	; 0x0d
    3542:	8e 85       	ldd	r24, Y+14	; 0x0e
    3544:	9f 85       	ldd	r25, Y+15	; 0x0f
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	4a ef       	ldi	r20, 0xFA	; 250
    354c:	54 e4       	ldi	r21, 0x44	; 68
    354e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	88 87       	std	Y+8, r24	; 0x08
    3558:	99 87       	std	Y+9, r25	; 0x09
    355a:	aa 87       	std	Y+10, r26	; 0x0a
    355c:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    355e:	68 85       	ldd	r22, Y+8	; 0x08
    3560:	79 85       	ldd	r23, Y+9	; 0x09
    3562:	8a 85       	ldd	r24, Y+10	; 0x0a
    3564:	9b 85       	ldd	r25, Y+11	; 0x0b
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	30 e0       	ldi	r19, 0x00	; 0
    356a:	40 e8       	ldi	r20, 0x80	; 128
    356c:	5f e3       	ldi	r21, 0x3F	; 63
    356e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3572:	88 23       	and	r24, r24
    3574:	2c f4       	brge	.+10     	; 0x3580 <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    3576:	81 e0       	ldi	r24, 0x01	; 1
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	9f 83       	std	Y+7, r25	; 0x07
    357c:	8e 83       	std	Y+6, r24	; 0x06
    357e:	3f c0       	rjmp	.+126    	; 0x35fe <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    3580:	68 85       	ldd	r22, Y+8	; 0x08
    3582:	79 85       	ldd	r23, Y+9	; 0x09
    3584:	8a 85       	ldd	r24, Y+10	; 0x0a
    3586:	9b 85       	ldd	r25, Y+11	; 0x0b
    3588:	20 e0       	ldi	r18, 0x00	; 0
    358a:	3f ef       	ldi	r19, 0xFF	; 255
    358c:	4f e7       	ldi	r20, 0x7F	; 127
    358e:	57 e4       	ldi	r21, 0x47	; 71
    3590:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3594:	18 16       	cp	r1, r24
    3596:	4c f5       	brge	.+82     	; 0x35ea <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3598:	6c 85       	ldd	r22, Y+12	; 0x0c
    359a:	7d 85       	ldd	r23, Y+13	; 0x0d
    359c:	8e 85       	ldd	r24, Y+14	; 0x0e
    359e:	9f 85       	ldd	r25, Y+15	; 0x0f
    35a0:	20 e0       	ldi	r18, 0x00	; 0
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	40 e2       	ldi	r20, 0x20	; 32
    35a6:	51 e4       	ldi	r21, 0x41	; 65
    35a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	9f 83       	std	Y+7, r25	; 0x07
    35be:	8e 83       	std	Y+6, r24	; 0x06
    35c0:	0f c0       	rjmp	.+30     	; 0x35e0 <LCD_voidSendCmnd+0x2ec>
    35c2:	88 ec       	ldi	r24, 0xC8	; 200
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	9d 83       	std	Y+5, r25	; 0x05
    35c8:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35ca:	8c 81       	ldd	r24, Y+4	; 0x04
    35cc:	9d 81       	ldd	r25, Y+5	; 0x05
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <LCD_voidSendCmnd+0x2da>
    35d2:	9d 83       	std	Y+5, r25	; 0x05
    35d4:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d6:	8e 81       	ldd	r24, Y+6	; 0x06
    35d8:	9f 81       	ldd	r25, Y+7	; 0x07
    35da:	01 97       	sbiw	r24, 0x01	; 1
    35dc:	9f 83       	std	Y+7, r25	; 0x07
    35de:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e0:	8e 81       	ldd	r24, Y+6	; 0x06
    35e2:	9f 81       	ldd	r25, Y+7	; 0x07
    35e4:	00 97       	sbiw	r24, 0x00	; 0
    35e6:	69 f7       	brne	.-38     	; 0x35c2 <LCD_voidSendCmnd+0x2ce>
    35e8:	24 c0       	rjmp	.+72     	; 0x3632 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ea:	68 85       	ldd	r22, Y+8	; 0x08
    35ec:	79 85       	ldd	r23, Y+9	; 0x09
    35ee:	8a 85       	ldd	r24, Y+10	; 0x0a
    35f0:	9b 85       	ldd	r25, Y+11	; 0x0b
    35f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f6:	dc 01       	movw	r26, r24
    35f8:	cb 01       	movw	r24, r22
    35fa:	9f 83       	std	Y+7, r25	; 0x07
    35fc:	8e 83       	std	Y+6, r24	; 0x06
    35fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3600:	9f 81       	ldd	r25, Y+7	; 0x07
    3602:	9b 83       	std	Y+3, r25	; 0x03
    3604:	8a 83       	std	Y+2, r24	; 0x02
    3606:	8a 81       	ldd	r24, Y+2	; 0x02
    3608:	9b 81       	ldd	r25, Y+3	; 0x03
    360a:	01 97       	sbiw	r24, 0x01	; 1
    360c:	f1 f7       	brne	.-4      	; 0x360a <LCD_voidSendCmnd+0x316>
    360e:	9b 83       	std	Y+3, r25	; 0x03
    3610:	8a 83       	std	Y+2, r24	; 0x02
    3612:	0f c0       	rjmp	.+30     	; 0x3632 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3614:	69 89       	ldd	r22, Y+17	; 0x11
    3616:	7a 89       	ldd	r23, Y+18	; 0x12
    3618:	8b 89       	ldd	r24, Y+19	; 0x13
    361a:	9c 89       	ldd	r25, Y+20	; 0x14
    361c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	88 8b       	std	Y+16, r24	; 0x10
    3626:	88 89       	ldd	r24, Y+16	; 0x10
    3628:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	8a 95       	dec	r24
    362e:	f1 f7       	brne	.-4      	; 0x362c <LCD_voidSendCmnd+0x338>
    3630:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    3632:	e1 96       	adiw	r28, 0x31	; 49
    3634:	0f b6       	in	r0, 0x3f	; 63
    3636:	f8 94       	cli
    3638:	de bf       	out	0x3e, r29	; 62
    363a:	0f be       	out	0x3f, r0	; 63
    363c:	cd bf       	out	0x3d, r28	; 61
    363e:	cf 91       	pop	r28
    3640:	df 91       	pop	r29
    3642:	08 95       	ret

00003644 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    3644:	df 93       	push	r29
    3646:	cf 93       	push	r28
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	e1 97       	sbiw	r28, 0x31	; 49
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    365a:	83 e0       	ldi	r24, 0x03	; 3
    365c:	60 e0       	ldi	r22, 0x00	; 0
    365e:	41 e0       	ldi	r20, 0x01	; 1
    3660:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    3664:	83 e0       	ldi	r24, 0x03	; 3
    3666:	61 e0       	ldi	r22, 0x01	; 1
    3668:	40 e0       	ldi	r20, 0x00	; 0
    366a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    366e:	82 e0       	ldi	r24, 0x02	; 2
    3670:	69 a9       	ldd	r22, Y+49	; 0x31
    3672:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    3676:	83 e0       	ldi	r24, 0x03	; 3
    3678:	62 e0       	ldi	r22, 0x02	; 2
    367a:	41 e0       	ldi	r20, 0x01	; 1
    367c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	a0 e8       	ldi	r26, 0x80	; 128
    3686:	bf e3       	ldi	r27, 0x3F	; 63
    3688:	8d a7       	std	Y+45, r24	; 0x2d
    368a:	9e a7       	std	Y+46, r25	; 0x2e
    368c:	af a7       	std	Y+47, r26	; 0x2f
    368e:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3690:	6d a5       	ldd	r22, Y+45	; 0x2d
    3692:	7e a5       	ldd	r23, Y+46	; 0x2e
    3694:	8f a5       	ldd	r24, Y+47	; 0x2f
    3696:	98 a9       	ldd	r25, Y+48	; 0x30
    3698:	2b ea       	ldi	r18, 0xAB	; 171
    369a:	3a ea       	ldi	r19, 0xAA	; 170
    369c:	4a e2       	ldi	r20, 0x2A	; 42
    369e:	50 e4       	ldi	r21, 0x40	; 64
    36a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36a4:	dc 01       	movw	r26, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	89 a7       	std	Y+41, r24	; 0x29
    36aa:	9a a7       	std	Y+42, r25	; 0x2a
    36ac:	ab a7       	std	Y+43, r26	; 0x2b
    36ae:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    36b0:	69 a5       	ldd	r22, Y+41	; 0x29
    36b2:	7a a5       	ldd	r23, Y+42	; 0x2a
    36b4:	8b a5       	ldd	r24, Y+43	; 0x2b
    36b6:	9c a5       	ldd	r25, Y+44	; 0x2c
    36b8:	20 e0       	ldi	r18, 0x00	; 0
    36ba:	30 e0       	ldi	r19, 0x00	; 0
    36bc:	40 e8       	ldi	r20, 0x80	; 128
    36be:	5f e3       	ldi	r21, 0x3F	; 63
    36c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36c4:	88 23       	and	r24, r24
    36c6:	1c f4       	brge	.+6      	; 0x36ce <LCD_voidSendChar+0x8a>
		__ticks = 1;
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	88 a7       	std	Y+40, r24	; 0x28
    36cc:	91 c0       	rjmp	.+290    	; 0x37f0 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    36ce:	69 a5       	ldd	r22, Y+41	; 0x29
    36d0:	7a a5       	ldd	r23, Y+42	; 0x2a
    36d2:	8b a5       	ldd	r24, Y+43	; 0x2b
    36d4:	9c a5       	ldd	r25, Y+44	; 0x2c
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	4f e7       	ldi	r20, 0x7F	; 127
    36dc:	53 e4       	ldi	r21, 0x43	; 67
    36de:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36e2:	18 16       	cp	r1, r24
    36e4:	0c f0       	brlt	.+2      	; 0x36e8 <LCD_voidSendChar+0xa4>
    36e6:	7b c0       	rjmp	.+246    	; 0x37de <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    36e8:	6d a5       	ldd	r22, Y+45	; 0x2d
    36ea:	7e a5       	ldd	r23, Y+46	; 0x2e
    36ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ee:	98 a9       	ldd	r25, Y+48	; 0x30
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	4a e7       	ldi	r20, 0x7A	; 122
    36f6:	54 e4       	ldi	r21, 0x44	; 68
    36f8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	8c a3       	std	Y+36, r24	; 0x24
    3702:	9d a3       	std	Y+37, r25	; 0x25
    3704:	ae a3       	std	Y+38, r26	; 0x26
    3706:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3708:	6c a1       	ldd	r22, Y+36	; 0x24
    370a:	7d a1       	ldd	r23, Y+37	; 0x25
    370c:	8e a1       	ldd	r24, Y+38	; 0x26
    370e:	9f a1       	ldd	r25, Y+39	; 0x27
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	4a ef       	ldi	r20, 0xFA	; 250
    3716:	54 e4       	ldi	r21, 0x44	; 68
    3718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371c:	dc 01       	movw	r26, r24
    371e:	cb 01       	movw	r24, r22
    3720:	88 a3       	std	Y+32, r24	; 0x20
    3722:	99 a3       	std	Y+33, r25	; 0x21
    3724:	aa a3       	std	Y+34, r26	; 0x22
    3726:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3728:	68 a1       	ldd	r22, Y+32	; 0x20
    372a:	79 a1       	ldd	r23, Y+33	; 0x21
    372c:	8a a1       	ldd	r24, Y+34	; 0x22
    372e:	9b a1       	ldd	r25, Y+35	; 0x23
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	40 e8       	ldi	r20, 0x80	; 128
    3736:	5f e3       	ldi	r21, 0x3F	; 63
    3738:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    373c:	88 23       	and	r24, r24
    373e:	2c f4       	brge	.+10     	; 0x374a <LCD_voidSendChar+0x106>
		__ticks = 1;
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	9f 8f       	std	Y+31, r25	; 0x1f
    3746:	8e 8f       	std	Y+30, r24	; 0x1e
    3748:	3f c0       	rjmp	.+126    	; 0x37c8 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    374a:	68 a1       	ldd	r22, Y+32	; 0x20
    374c:	79 a1       	ldd	r23, Y+33	; 0x21
    374e:	8a a1       	ldd	r24, Y+34	; 0x22
    3750:	9b a1       	ldd	r25, Y+35	; 0x23
    3752:	20 e0       	ldi	r18, 0x00	; 0
    3754:	3f ef       	ldi	r19, 0xFF	; 255
    3756:	4f e7       	ldi	r20, 0x7F	; 127
    3758:	57 e4       	ldi	r21, 0x47	; 71
    375a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    375e:	18 16       	cp	r1, r24
    3760:	4c f5       	brge	.+82     	; 0x37b4 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3762:	6c a1       	ldd	r22, Y+36	; 0x24
    3764:	7d a1       	ldd	r23, Y+37	; 0x25
    3766:	8e a1       	ldd	r24, Y+38	; 0x26
    3768:	9f a1       	ldd	r25, Y+39	; 0x27
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	40 e2       	ldi	r20, 0x20	; 32
    3770:	51 e4       	ldi	r21, 0x41	; 65
    3772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3776:	dc 01       	movw	r26, r24
    3778:	cb 01       	movw	r24, r22
    377a:	bc 01       	movw	r22, r24
    377c:	cd 01       	movw	r24, r26
    377e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3782:	dc 01       	movw	r26, r24
    3784:	cb 01       	movw	r24, r22
    3786:	9f 8f       	std	Y+31, r25	; 0x1f
    3788:	8e 8f       	std	Y+30, r24	; 0x1e
    378a:	0f c0       	rjmp	.+30     	; 0x37aa <LCD_voidSendChar+0x166>
    378c:	88 ec       	ldi	r24, 0xC8	; 200
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	9d 8f       	std	Y+29, r25	; 0x1d
    3792:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3794:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3796:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3798:	01 97       	sbiw	r24, 0x01	; 1
    379a:	f1 f7       	brne	.-4      	; 0x3798 <LCD_voidSendChar+0x154>
    379c:	9d 8f       	std	Y+29, r25	; 0x1d
    379e:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37a2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37a4:	01 97       	sbiw	r24, 0x01	; 1
    37a6:	9f 8f       	std	Y+31, r25	; 0x1f
    37a8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37aa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37ac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37ae:	00 97       	sbiw	r24, 0x00	; 0
    37b0:	69 f7       	brne	.-38     	; 0x378c <LCD_voidSendChar+0x148>
    37b2:	24 c0       	rjmp	.+72     	; 0x37fc <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b4:	68 a1       	ldd	r22, Y+32	; 0x20
    37b6:	79 a1       	ldd	r23, Y+33	; 0x21
    37b8:	8a a1       	ldd	r24, Y+34	; 0x22
    37ba:	9b a1       	ldd	r25, Y+35	; 0x23
    37bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c0:	dc 01       	movw	r26, r24
    37c2:	cb 01       	movw	r24, r22
    37c4:	9f 8f       	std	Y+31, r25	; 0x1f
    37c6:	8e 8f       	std	Y+30, r24	; 0x1e
    37c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37ca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37cc:	9b 8f       	std	Y+27, r25	; 0x1b
    37ce:	8a 8f       	std	Y+26, r24	; 0x1a
    37d0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37d2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37d4:	01 97       	sbiw	r24, 0x01	; 1
    37d6:	f1 f7       	brne	.-4      	; 0x37d4 <LCD_voidSendChar+0x190>
    37d8:	9b 8f       	std	Y+27, r25	; 0x1b
    37da:	8a 8f       	std	Y+26, r24	; 0x1a
    37dc:	0f c0       	rjmp	.+30     	; 0x37fc <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37de:	69 a5       	ldd	r22, Y+41	; 0x29
    37e0:	7a a5       	ldd	r23, Y+42	; 0x2a
    37e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    37e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    37e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	88 a7       	std	Y+40, r24	; 0x28
    37f0:	88 a5       	ldd	r24, Y+40	; 0x28
    37f2:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37f4:	89 8d       	ldd	r24, Y+25	; 0x19
    37f6:	8a 95       	dec	r24
    37f8:	f1 f7       	brne	.-4      	; 0x37f6 <LCD_voidSendChar+0x1b2>
    37fa:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    37fc:	83 e0       	ldi	r24, 0x03	; 3
    37fe:	62 e0       	ldi	r22, 0x02	; 2
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	90 e0       	ldi	r25, 0x00	; 0
    380a:	a0 e8       	ldi	r26, 0x80	; 128
    380c:	bf e3       	ldi	r27, 0x3F	; 63
    380e:	8d 8b       	std	Y+21, r24	; 0x15
    3810:	9e 8b       	std	Y+22, r25	; 0x16
    3812:	af 8b       	std	Y+23, r26	; 0x17
    3814:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3816:	6d 89       	ldd	r22, Y+21	; 0x15
    3818:	7e 89       	ldd	r23, Y+22	; 0x16
    381a:	8f 89       	ldd	r24, Y+23	; 0x17
    381c:	98 8d       	ldd	r25, Y+24	; 0x18
    381e:	2b ea       	ldi	r18, 0xAB	; 171
    3820:	3a ea       	ldi	r19, 0xAA	; 170
    3822:	4a e2       	ldi	r20, 0x2A	; 42
    3824:	50 e4       	ldi	r21, 0x40	; 64
    3826:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	89 8b       	std	Y+17, r24	; 0x11
    3830:	9a 8b       	std	Y+18, r25	; 0x12
    3832:	ab 8b       	std	Y+19, r26	; 0x13
    3834:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3836:	69 89       	ldd	r22, Y+17	; 0x11
    3838:	7a 89       	ldd	r23, Y+18	; 0x12
    383a:	8b 89       	ldd	r24, Y+19	; 0x13
    383c:	9c 89       	ldd	r25, Y+20	; 0x14
    383e:	20 e0       	ldi	r18, 0x00	; 0
    3840:	30 e0       	ldi	r19, 0x00	; 0
    3842:	40 e8       	ldi	r20, 0x80	; 128
    3844:	5f e3       	ldi	r21, 0x3F	; 63
    3846:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    384a:	88 23       	and	r24, r24
    384c:	1c f4       	brge	.+6      	; 0x3854 <LCD_voidSendChar+0x210>
		__ticks = 1;
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	88 8b       	std	Y+16, r24	; 0x10
    3852:	91 c0       	rjmp	.+290    	; 0x3976 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    3854:	69 89       	ldd	r22, Y+17	; 0x11
    3856:	7a 89       	ldd	r23, Y+18	; 0x12
    3858:	8b 89       	ldd	r24, Y+19	; 0x13
    385a:	9c 89       	ldd	r25, Y+20	; 0x14
    385c:	20 e0       	ldi	r18, 0x00	; 0
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	4f e7       	ldi	r20, 0x7F	; 127
    3862:	53 e4       	ldi	r21, 0x43	; 67
    3864:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3868:	18 16       	cp	r1, r24
    386a:	0c f0       	brlt	.+2      	; 0x386e <LCD_voidSendChar+0x22a>
    386c:	7b c0       	rjmp	.+246    	; 0x3964 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    386e:	6d 89       	ldd	r22, Y+21	; 0x15
    3870:	7e 89       	ldd	r23, Y+22	; 0x16
    3872:	8f 89       	ldd	r24, Y+23	; 0x17
    3874:	98 8d       	ldd	r25, Y+24	; 0x18
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	4a e7       	ldi	r20, 0x7A	; 122
    387c:	54 e4       	ldi	r21, 0x44	; 68
    387e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	8c 87       	std	Y+12, r24	; 0x0c
    3888:	9d 87       	std	Y+13, r25	; 0x0d
    388a:	ae 87       	std	Y+14, r26	; 0x0e
    388c:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    388e:	6c 85       	ldd	r22, Y+12	; 0x0c
    3890:	7d 85       	ldd	r23, Y+13	; 0x0d
    3892:	8e 85       	ldd	r24, Y+14	; 0x0e
    3894:	9f 85       	ldd	r25, Y+15	; 0x0f
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	4a ef       	ldi	r20, 0xFA	; 250
    389c:	54 e4       	ldi	r21, 0x44	; 68
    389e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a2:	dc 01       	movw	r26, r24
    38a4:	cb 01       	movw	r24, r22
    38a6:	88 87       	std	Y+8, r24	; 0x08
    38a8:	99 87       	std	Y+9, r25	; 0x09
    38aa:	aa 87       	std	Y+10, r26	; 0x0a
    38ac:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    38ae:	68 85       	ldd	r22, Y+8	; 0x08
    38b0:	79 85       	ldd	r23, Y+9	; 0x09
    38b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    38b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    38b6:	20 e0       	ldi	r18, 0x00	; 0
    38b8:	30 e0       	ldi	r19, 0x00	; 0
    38ba:	40 e8       	ldi	r20, 0x80	; 128
    38bc:	5f e3       	ldi	r21, 0x3F	; 63
    38be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38c2:	88 23       	and	r24, r24
    38c4:	2c f4       	brge	.+10     	; 0x38d0 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	9f 83       	std	Y+7, r25	; 0x07
    38cc:	8e 83       	std	Y+6, r24	; 0x06
    38ce:	3f c0       	rjmp	.+126    	; 0x394e <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    38d0:	68 85       	ldd	r22, Y+8	; 0x08
    38d2:	79 85       	ldd	r23, Y+9	; 0x09
    38d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    38d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	3f ef       	ldi	r19, 0xFF	; 255
    38dc:	4f e7       	ldi	r20, 0x7F	; 127
    38de:	57 e4       	ldi	r21, 0x47	; 71
    38e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38e4:	18 16       	cp	r1, r24
    38e6:	4c f5       	brge	.+82     	; 0x393a <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    38ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    38ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    38ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	40 e2       	ldi	r20, 0x20	; 32
    38f6:	51 e4       	ldi	r21, 0x41	; 65
    38f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38fc:	dc 01       	movw	r26, r24
    38fe:	cb 01       	movw	r24, r22
    3900:	bc 01       	movw	r22, r24
    3902:	cd 01       	movw	r24, r26
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	9f 83       	std	Y+7, r25	; 0x07
    390e:	8e 83       	std	Y+6, r24	; 0x06
    3910:	0f c0       	rjmp	.+30     	; 0x3930 <LCD_voidSendChar+0x2ec>
    3912:	88 ec       	ldi	r24, 0xC8	; 200
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9d 83       	std	Y+5, r25	; 0x05
    3918:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    391a:	8c 81       	ldd	r24, Y+4	; 0x04
    391c:	9d 81       	ldd	r25, Y+5	; 0x05
    391e:	01 97       	sbiw	r24, 0x01	; 1
    3920:	f1 f7       	brne	.-4      	; 0x391e <LCD_voidSendChar+0x2da>
    3922:	9d 83       	std	Y+5, r25	; 0x05
    3924:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3926:	8e 81       	ldd	r24, Y+6	; 0x06
    3928:	9f 81       	ldd	r25, Y+7	; 0x07
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	9f 83       	std	Y+7, r25	; 0x07
    392e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3930:	8e 81       	ldd	r24, Y+6	; 0x06
    3932:	9f 81       	ldd	r25, Y+7	; 0x07
    3934:	00 97       	sbiw	r24, 0x00	; 0
    3936:	69 f7       	brne	.-38     	; 0x3912 <LCD_voidSendChar+0x2ce>
    3938:	24 c0       	rjmp	.+72     	; 0x3982 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393a:	68 85       	ldd	r22, Y+8	; 0x08
    393c:	79 85       	ldd	r23, Y+9	; 0x09
    393e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3940:	9b 85       	ldd	r25, Y+11	; 0x0b
    3942:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	9f 83       	std	Y+7, r25	; 0x07
    394c:	8e 83       	std	Y+6, r24	; 0x06
    394e:	8e 81       	ldd	r24, Y+6	; 0x06
    3950:	9f 81       	ldd	r25, Y+7	; 0x07
    3952:	9b 83       	std	Y+3, r25	; 0x03
    3954:	8a 83       	std	Y+2, r24	; 0x02
    3956:	8a 81       	ldd	r24, Y+2	; 0x02
    3958:	9b 81       	ldd	r25, Y+3	; 0x03
    395a:	01 97       	sbiw	r24, 0x01	; 1
    395c:	f1 f7       	brne	.-4      	; 0x395a <LCD_voidSendChar+0x316>
    395e:	9b 83       	std	Y+3, r25	; 0x03
    3960:	8a 83       	std	Y+2, r24	; 0x02
    3962:	0f c0       	rjmp	.+30     	; 0x3982 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3964:	69 89       	ldd	r22, Y+17	; 0x11
    3966:	7a 89       	ldd	r23, Y+18	; 0x12
    3968:	8b 89       	ldd	r24, Y+19	; 0x13
    396a:	9c 89       	ldd	r25, Y+20	; 0x14
    396c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	88 8b       	std	Y+16, r24	; 0x10
    3976:	88 89       	ldd	r24, Y+16	; 0x10
    3978:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    397a:	89 81       	ldd	r24, Y+1	; 0x01
    397c:	8a 95       	dec	r24
    397e:	f1 f7       	brne	.-4      	; 0x397c <LCD_voidSendChar+0x338>
    3980:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    3982:	e1 96       	adiw	r28, 0x31	; 49
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	f8 94       	cli
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	cd bf       	out	0x3d, r28	; 61
    398e:	cf 91       	pop	r28
    3990:	df 91       	pop	r29
    3992:	08 95       	ret

00003994 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    3994:	df 93       	push	r29
    3996:	cf 93       	push	r28
    3998:	00 d0       	rcall	.+0      	; 0x399a <LCD_voidWriteString+0x6>
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    399e:	9a 83       	std	Y+2, r25	; 0x02
    39a0:	89 83       	std	Y+1, r24	; 0x01
    39a2:	0a c0       	rjmp	.+20     	; 0x39b8 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    39a4:	e9 81       	ldd	r30, Y+1	; 0x01
    39a6:	fa 81       	ldd	r31, Y+2	; 0x02
    39a8:	80 81       	ld	r24, Z
    39aa:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	9a 81       	ldd	r25, Y+2	; 0x02
    39b2:	01 96       	adiw	r24, 0x01	; 1
    39b4:	9a 83       	std	Y+2, r25	; 0x02
    39b6:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    39b8:	e9 81       	ldd	r30, Y+1	; 0x01
    39ba:	fa 81       	ldd	r31, Y+2	; 0x02
    39bc:	80 81       	ld	r24, Z
    39be:	88 23       	and	r24, r24
    39c0:	89 f7       	brne	.-30     	; 0x39a4 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    39c2:	0f 90       	pop	r0
    39c4:	0f 90       	pop	r0
    39c6:	cf 91       	pop	r28
    39c8:	df 91       	pop	r29
    39ca:	08 95       	ret

000039cc <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	df 93       	push	r29
    39d2:	cf 93       	push	r28
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	65 97       	sbiw	r28, 0x15	; 21
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	6a 8b       	std	Y+18, r22	; 0x12
    39e6:	7b 8b       	std	Y+19, r23	; 0x13
    39e8:	8c 8b       	std	Y+20, r24	; 0x14
    39ea:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    39ec:	8f ef       	ldi	r24, 0xFF	; 255
    39ee:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    39f0:	8a 89       	ldd	r24, Y+18	; 0x12
    39f2:	9b 89       	ldd	r25, Y+19	; 0x13
    39f4:	ac 89       	ldd	r26, Y+20	; 0x14
    39f6:	bd 89       	ldd	r27, Y+21	; 0x15
    39f8:	00 97       	sbiw	r24, 0x00	; 0
    39fa:	a1 05       	cpc	r26, r1
    39fc:	b1 05       	cpc	r27, r1
    39fe:	99 f5       	brne	.+102    	; 0x3a66 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    3a00:	80 e3       	ldi	r24, 0x30	; 48
    3a02:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3a06:	4e c0       	rjmp	.+156    	; 0x3aa4 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	8f 5f       	subi	r24, 0xFF	; 255
    3a0c:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    3a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a10:	08 2f       	mov	r16, r24
    3a12:	11 27       	eor	r17, r17
    3a14:	07 fd       	sbrc	r16, 7
    3a16:	10 95       	com	r17
    3a18:	8a 89       	ldd	r24, Y+18	; 0x12
    3a1a:	9b 89       	ldd	r25, Y+19	; 0x13
    3a1c:	ac 89       	ldd	r26, Y+20	; 0x14
    3a1e:	bd 89       	ldd	r27, Y+21	; 0x15
    3a20:	2a e0       	ldi	r18, 0x0A	; 10
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	40 e0       	ldi	r20, 0x00	; 0
    3a26:	50 e0       	ldi	r21, 0x00	; 0
    3a28:	bc 01       	movw	r22, r24
    3a2a:	cd 01       	movw	r24, r26
    3a2c:	0e 94 90 32 	call	0x6520	; 0x6520 <__udivmodsi4>
    3a30:	dc 01       	movw	r26, r24
    3a32:	cb 01       	movw	r24, r22
    3a34:	28 2f       	mov	r18, r24
    3a36:	ce 01       	movw	r24, r28
    3a38:	03 96       	adiw	r24, 0x03	; 3
    3a3a:	fc 01       	movw	r30, r24
    3a3c:	e0 0f       	add	r30, r16
    3a3e:	f1 1f       	adc	r31, r17
    3a40:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    3a42:	8a 89       	ldd	r24, Y+18	; 0x12
    3a44:	9b 89       	ldd	r25, Y+19	; 0x13
    3a46:	ac 89       	ldd	r26, Y+20	; 0x14
    3a48:	bd 89       	ldd	r27, Y+21	; 0x15
    3a4a:	2a e0       	ldi	r18, 0x0A	; 10
    3a4c:	30 e0       	ldi	r19, 0x00	; 0
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	50 e0       	ldi	r21, 0x00	; 0
    3a52:	bc 01       	movw	r22, r24
    3a54:	cd 01       	movw	r24, r26
    3a56:	0e 94 90 32 	call	0x6520	; 0x6520 <__udivmodsi4>
    3a5a:	da 01       	movw	r26, r20
    3a5c:	c9 01       	movw	r24, r18
    3a5e:	8a 8b       	std	Y+18, r24	; 0x12
    3a60:	9b 8b       	std	Y+19, r25	; 0x13
    3a62:	ac 8b       	std	Y+20, r26	; 0x14
    3a64:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    3a66:	8a 89       	ldd	r24, Y+18	; 0x12
    3a68:	9b 89       	ldd	r25, Y+19	; 0x13
    3a6a:	ac 89       	ldd	r26, Y+20	; 0x14
    3a6c:	bd 89       	ldd	r27, Y+21	; 0x15
    3a6e:	00 97       	sbiw	r24, 0x00	; 0
    3a70:	a1 05       	cpc	r26, r1
    3a72:	b1 05       	cpc	r27, r1
    3a74:	49 f6       	brne	.-110    	; 0x3a08 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    3a76:	8a 81       	ldd	r24, Y+2	; 0x02
    3a78:	89 83       	std	Y+1, r24	; 0x01
    3a7a:	11 c0       	rjmp	.+34     	; 0x3a9e <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    3a7c:	89 81       	ldd	r24, Y+1	; 0x01
    3a7e:	28 2f       	mov	r18, r24
    3a80:	33 27       	eor	r19, r19
    3a82:	27 fd       	sbrc	r18, 7
    3a84:	30 95       	com	r19
    3a86:	ce 01       	movw	r24, r28
    3a88:	03 96       	adiw	r24, 0x03	; 3
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	e2 0f       	add	r30, r18
    3a8e:	f3 1f       	adc	r31, r19
    3a90:	80 81       	ld	r24, Z
    3a92:	80 5d       	subi	r24, 0xD0	; 208
    3a94:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    3a98:	89 81       	ldd	r24, Y+1	; 0x01
    3a9a:	81 50       	subi	r24, 0x01	; 1
    3a9c:	89 83       	std	Y+1, r24	; 0x01
    3a9e:	89 81       	ldd	r24, Y+1	; 0x01
    3aa0:	88 23       	and	r24, r24
    3aa2:	64 f7       	brge	.-40     	; 0x3a7c <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    3aa4:	65 96       	adiw	r28, 0x15	; 21
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	f8 94       	cli
    3aaa:	de bf       	out	0x3e, r29	; 62
    3aac:	0f be       	out	0x3f, r0	; 63
    3aae:	cd bf       	out	0x3d, r28	; 61
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
    3ab8:	08 95       	ret

00003aba <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3aba:	df 93       	push	r29
    3abc:	cf 93       	push	r28
    3abe:	00 d0       	rcall	.+0      	; 0x3ac0 <LCD_u8GoToXY+0x6>
    3ac0:	00 d0       	rcall	.+0      	; 0x3ac2 <LCD_u8GoToXY+0x8>
    3ac2:	0f 92       	push	r0
    3ac4:	cd b7       	in	r28, 0x3d	; 61
    3ac6:	de b7       	in	r29, 0x3e	; 62
    3ac8:	8a 83       	std	Y+2, r24	; 0x02
    3aca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3acc:	81 e0       	ldi	r24, 0x01	; 1
    3ace:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    3ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad2:	88 32       	cpi	r24, 0x28	; 40
    3ad4:	d8 f4       	brcc	.+54     	; 0x3b0c <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    3ad6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ad8:	28 2f       	mov	r18, r24
    3ada:	30 e0       	ldi	r19, 0x00	; 0
    3adc:	3d 83       	std	Y+5, r19	; 0x05
    3ade:	2c 83       	std	Y+4, r18	; 0x04
    3ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    3ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    3ae4:	81 30       	cpi	r24, 0x01	; 1
    3ae6:	91 05       	cpc	r25, r1
    3ae8:	31 f0       	breq	.+12     	; 0x3af6 <LCD_u8GoToXY+0x3c>
    3aea:	2c 81       	ldd	r18, Y+4	; 0x04
    3aec:	3d 81       	ldd	r19, Y+5	; 0x05
    3aee:	22 30       	cpi	r18, 0x02	; 2
    3af0:	31 05       	cpc	r19, r1
    3af2:	31 f0       	breq	.+12     	; 0x3b00 <LCD_u8GoToXY+0x46>
    3af4:	0a c0       	rjmp	.+20     	; 0x3b0a <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    3af6:	8b 81       	ldd	r24, Y+3	; 0x03
    3af8:	80 58       	subi	r24, 0x80	; 128
    3afa:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
    3afe:	06 c0       	rjmp	.+12     	; 0x3b0c <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    3b00:	8b 81       	ldd	r24, Y+3	; 0x03
    3b02:	80 54       	subi	r24, 0x40	; 64
    3b04:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
    3b08:	01 c0       	rjmp	.+2      	; 0x3b0c <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    3b0a:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    3b0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b0e:	0f 90       	pop	r0
    3b10:	0f 90       	pop	r0
    3b12:	0f 90       	pop	r0
    3b14:	0f 90       	pop	r0
    3b16:	0f 90       	pop	r0
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret

00003b1e <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
}
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	08 95       	ret

00003b32 <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    3b32:	df 93       	push	r29
    3b34:	cf 93       	push	r28
    3b36:	cd b7       	in	r28, 0x3d	; 61
    3b38:	de b7       	in	r29, 0x3e	; 62
    3b3a:	2a 97       	sbiw	r28, 0x0a	; 10
    3b3c:	0f b6       	in	r0, 0x3f	; 63
    3b3e:	f8 94       	cli
    3b40:	de bf       	out	0x3e, r29	; 62
    3b42:	0f be       	out	0x3f, r0	; 63
    3b44:	cd bf       	out	0x3d, r28	; 61
    3b46:	8c 83       	std	Y+4, r24	; 0x04
    3b48:	7e 83       	std	Y+6, r23	; 0x06
    3b4a:	6d 83       	std	Y+5, r22	; 0x05
    3b4c:	4f 83       	std	Y+7, r20	; 0x07
    3b4e:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3b50:	81 e0       	ldi	r24, 0x01	; 1
    3b52:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    3b54:	88 e0       	ldi	r24, 0x08	; 8
    3b56:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    3b58:	8c 81       	ldd	r24, Y+4	; 0x04
    3b5a:	28 2f       	mov	r18, r24
    3b5c:	30 e0       	ldi	r19, 0x00	; 0
    3b5e:	3a 87       	std	Y+10, r19	; 0x0a
    3b60:	29 87       	std	Y+9, r18	; 0x09
    3b62:	89 85       	ldd	r24, Y+9	; 0x09
    3b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b66:	83 30       	cpi	r24, 0x03	; 3
    3b68:	91 05       	cpc	r25, r1
    3b6a:	09 f4       	brne	.+2      	; 0x3b6e <LCD_voidWriteSpecialChar+0x3c>
    3b6c:	8c c0       	rjmp	.+280    	; 0x3c86 <LCD_voidWriteSpecialChar+0x154>
    3b6e:	29 85       	ldd	r18, Y+9	; 0x09
    3b70:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b72:	24 30       	cpi	r18, 0x04	; 4
    3b74:	31 05       	cpc	r19, r1
    3b76:	8c f4       	brge	.+34     	; 0x3b9a <LCD_voidWriteSpecialChar+0x68>
    3b78:	89 85       	ldd	r24, Y+9	; 0x09
    3b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b7c:	81 30       	cpi	r24, 0x01	; 1
    3b7e:	91 05       	cpc	r25, r1
    3b80:	09 f4       	brne	.+2      	; 0x3b84 <LCD_voidWriteSpecialChar+0x52>
    3b82:	43 c0       	rjmp	.+134    	; 0x3c0a <LCD_voidWriteSpecialChar+0xd8>
    3b84:	29 85       	ldd	r18, Y+9	; 0x09
    3b86:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b88:	22 30       	cpi	r18, 0x02	; 2
    3b8a:	31 05       	cpc	r19, r1
    3b8c:	0c f0       	brlt	.+2      	; 0x3b90 <LCD_voidWriteSpecialChar+0x5e>
    3b8e:	5c c0       	rjmp	.+184    	; 0x3c48 <LCD_voidWriteSpecialChar+0x116>
    3b90:	89 85       	ldd	r24, Y+9	; 0x09
    3b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	d1 f0       	breq	.+52     	; 0x3bcc <LCD_voidWriteSpecialChar+0x9a>
    3b98:	11 c1       	rjmp	.+546    	; 0x3dbc <LCD_voidWriteSpecialChar+0x28a>
    3b9a:	29 85       	ldd	r18, Y+9	; 0x09
    3b9c:	3a 85       	ldd	r19, Y+10	; 0x0a
    3b9e:	25 30       	cpi	r18, 0x05	; 5
    3ba0:	31 05       	cpc	r19, r1
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <LCD_voidWriteSpecialChar+0x74>
    3ba4:	ae c0       	rjmp	.+348    	; 0x3d02 <LCD_voidWriteSpecialChar+0x1d0>
    3ba6:	89 85       	ldd	r24, Y+9	; 0x09
    3ba8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3baa:	85 30       	cpi	r24, 0x05	; 5
    3bac:	91 05       	cpc	r25, r1
    3bae:	0c f4       	brge	.+2      	; 0x3bb2 <LCD_voidWriteSpecialChar+0x80>
    3bb0:	89 c0       	rjmp	.+274    	; 0x3cc4 <LCD_voidWriteSpecialChar+0x192>
    3bb2:	29 85       	ldd	r18, Y+9	; 0x09
    3bb4:	3a 85       	ldd	r19, Y+10	; 0x0a
    3bb6:	26 30       	cpi	r18, 0x06	; 6
    3bb8:	31 05       	cpc	r19, r1
    3bba:	09 f4       	brne	.+2      	; 0x3bbe <LCD_voidWriteSpecialChar+0x8c>
    3bbc:	c1 c0       	rjmp	.+386    	; 0x3d40 <LCD_voidWriteSpecialChar+0x20e>
    3bbe:	89 85       	ldd	r24, Y+9	; 0x09
    3bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bc2:	87 30       	cpi	r24, 0x07	; 7
    3bc4:	91 05       	cpc	r25, r1
    3bc6:	09 f4       	brne	.+2      	; 0x3bca <LCD_voidWriteSpecialChar+0x98>
    3bc8:	da c0       	rjmp	.+436    	; 0x3d7e <LCD_voidWriteSpecialChar+0x24c>
    3bca:	f8 c0       	rjmp	.+496    	; 0x3dbc <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    3bcc:	80 e4       	ldi	r24, 0x40	; 64
    3bce:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3bd2:	19 82       	std	Y+1, r1	; 0x01
    3bd4:	0e c0       	rjmp	.+28     	; 0x3bf2 <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3bd6:	89 81       	ldd	r24, Y+1	; 0x01
    3bd8:	28 2f       	mov	r18, r24
    3bda:	30 e0       	ldi	r19, 0x00	; 0
    3bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3bde:	9e 81       	ldd	r25, Y+6	; 0x06
    3be0:	fc 01       	movw	r30, r24
    3be2:	e2 0f       	add	r30, r18
    3be4:	f3 1f       	adc	r31, r19
    3be6:	80 81       	ld	r24, Z
    3be8:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    3bec:	89 81       	ldd	r24, Y+1	; 0x01
    3bee:	8f 5f       	subi	r24, 0xFF	; 255
    3bf0:	89 83       	std	Y+1, r24	; 0x01
    3bf2:	99 81       	ldd	r25, Y+1	; 0x01
    3bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bf6:	98 17       	cp	r25, r24
    3bf8:	70 f3       	brcs	.-36     	; 0x3bd6 <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3bfa:	8f 81       	ldd	r24, Y+7	; 0x07
    3bfc:	68 85       	ldd	r22, Y+8	; 0x08
    3bfe:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3c02:	8c 81       	ldd	r24, Y+4	; 0x04
    3c04:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3c08:	da c0       	rjmp	.+436    	; 0x3dbe <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    3c0a:	88 e4       	ldi	r24, 0x48	; 72
    3c0c:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3c10:	19 82       	std	Y+1, r1	; 0x01
    3c12:	0e c0       	rjmp	.+28     	; 0x3c30 <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3c14:	89 81       	ldd	r24, Y+1	; 0x01
    3c16:	28 2f       	mov	r18, r24
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1e:	fc 01       	movw	r30, r24
    3c20:	e2 0f       	add	r30, r18
    3c22:	f3 1f       	adc	r31, r19
    3c24:	80 81       	ld	r24, Z
    3c26:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	8f 5f       	subi	r24, 0xFF	; 255
    3c2e:	89 83       	std	Y+1, r24	; 0x01
    3c30:	99 81       	ldd	r25, Y+1	; 0x01
    3c32:	8a 81       	ldd	r24, Y+2	; 0x02
    3c34:	98 17       	cp	r25, r24
    3c36:	70 f3       	brcs	.-36     	; 0x3c14 <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3c38:	8f 81       	ldd	r24, Y+7	; 0x07
    3c3a:	68 85       	ldd	r22, Y+8	; 0x08
    3c3c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3c40:	8c 81       	ldd	r24, Y+4	; 0x04
    3c42:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3c46:	bb c0       	rjmp	.+374    	; 0x3dbe <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    3c48:	80 e5       	ldi	r24, 0x50	; 80
    3c4a:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3c4e:	19 82       	std	Y+1, r1	; 0x01
    3c50:	0e c0       	rjmp	.+28     	; 0x3c6e <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3c52:	89 81       	ldd	r24, Y+1	; 0x01
    3c54:	28 2f       	mov	r18, r24
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	8d 81       	ldd	r24, Y+5	; 0x05
    3c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5c:	fc 01       	movw	r30, r24
    3c5e:	e2 0f       	add	r30, r18
    3c60:	f3 1f       	adc	r31, r19
    3c62:	80 81       	ld	r24, Z
    3c64:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	8f 5f       	subi	r24, 0xFF	; 255
    3c6c:	89 83       	std	Y+1, r24	; 0x01
    3c6e:	99 81       	ldd	r25, Y+1	; 0x01
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	98 17       	cp	r25, r24
    3c74:	70 f3       	brcs	.-36     	; 0x3c52 <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3c76:	8f 81       	ldd	r24, Y+7	; 0x07
    3c78:	68 85       	ldd	r22, Y+8	; 0x08
    3c7a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3c7e:	8c 81       	ldd	r24, Y+4	; 0x04
    3c80:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3c84:	9c c0       	rjmp	.+312    	; 0x3dbe <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    3c86:	88 e5       	ldi	r24, 0x58	; 88
    3c88:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3c8c:	19 82       	std	Y+1, r1	; 0x01
    3c8e:	0e c0       	rjmp	.+28     	; 0x3cac <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	28 2f       	mov	r18, r24
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	8d 81       	ldd	r24, Y+5	; 0x05
    3c98:	9e 81       	ldd	r25, Y+6	; 0x06
    3c9a:	fc 01       	movw	r30, r24
    3c9c:	e2 0f       	add	r30, r18
    3c9e:	f3 1f       	adc	r31, r19
    3ca0:	80 81       	ld	r24, Z
    3ca2:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    3ca6:	89 81       	ldd	r24, Y+1	; 0x01
    3ca8:	8f 5f       	subi	r24, 0xFF	; 255
    3caa:	89 83       	std	Y+1, r24	; 0x01
    3cac:	99 81       	ldd	r25, Y+1	; 0x01
    3cae:	8a 81       	ldd	r24, Y+2	; 0x02
    3cb0:	98 17       	cp	r25, r24
    3cb2:	70 f3       	brcs	.-36     	; 0x3c90 <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    3cb6:	68 85       	ldd	r22, Y+8	; 0x08
    3cb8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    3cbe:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3cc2:	7d c0       	rjmp	.+250    	; 0x3dbe <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    3cc4:	80 e6       	ldi	r24, 0x60	; 96
    3cc6:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3cca:	19 82       	std	Y+1, r1	; 0x01
    3ccc:	0e c0       	rjmp	.+28     	; 0x3cea <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3cce:	89 81       	ldd	r24, Y+1	; 0x01
    3cd0:	28 2f       	mov	r18, r24
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd8:	fc 01       	movw	r30, r24
    3cda:	e2 0f       	add	r30, r18
    3cdc:	f3 1f       	adc	r31, r19
    3cde:	80 81       	ld	r24, Z
    3ce0:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    3ce4:	89 81       	ldd	r24, Y+1	; 0x01
    3ce6:	8f 5f       	subi	r24, 0xFF	; 255
    3ce8:	89 83       	std	Y+1, r24	; 0x01
    3cea:	99 81       	ldd	r25, Y+1	; 0x01
    3cec:	8a 81       	ldd	r24, Y+2	; 0x02
    3cee:	98 17       	cp	r25, r24
    3cf0:	70 f3       	brcs	.-36     	; 0x3cce <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3cf2:	8f 81       	ldd	r24, Y+7	; 0x07
    3cf4:	68 85       	ldd	r22, Y+8	; 0x08
    3cf6:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    3cfc:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3d00:	5e c0       	rjmp	.+188    	; 0x3dbe <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    3d02:	88 e6       	ldi	r24, 0x68	; 104
    3d04:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3d08:	19 82       	std	Y+1, r1	; 0x01
    3d0a:	0e c0       	rjmp	.+28     	; 0x3d28 <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3d0c:	89 81       	ldd	r24, Y+1	; 0x01
    3d0e:	28 2f       	mov	r18, r24
    3d10:	30 e0       	ldi	r19, 0x00	; 0
    3d12:	8d 81       	ldd	r24, Y+5	; 0x05
    3d14:	9e 81       	ldd	r25, Y+6	; 0x06
    3d16:	fc 01       	movw	r30, r24
    3d18:	e2 0f       	add	r30, r18
    3d1a:	f3 1f       	adc	r31, r19
    3d1c:	80 81       	ld	r24, Z
    3d1e:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	8f 5f       	subi	r24, 0xFF	; 255
    3d26:	89 83       	std	Y+1, r24	; 0x01
    3d28:	99 81       	ldd	r25, Y+1	; 0x01
    3d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d2c:	98 17       	cp	r25, r24
    3d2e:	70 f3       	brcs	.-36     	; 0x3d0c <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3d30:	8f 81       	ldd	r24, Y+7	; 0x07
    3d32:	68 85       	ldd	r22, Y+8	; 0x08
    3d34:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3d38:	8c 81       	ldd	r24, Y+4	; 0x04
    3d3a:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3d3e:	3f c0       	rjmp	.+126    	; 0x3dbe <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    3d40:	80 e7       	ldi	r24, 0x70	; 112
    3d42:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3d46:	19 82       	std	Y+1, r1	; 0x01
    3d48:	0e c0       	rjmp	.+28     	; 0x3d66 <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3d4a:	89 81       	ldd	r24, Y+1	; 0x01
    3d4c:	28 2f       	mov	r18, r24
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	8d 81       	ldd	r24, Y+5	; 0x05
    3d52:	9e 81       	ldd	r25, Y+6	; 0x06
    3d54:	fc 01       	movw	r30, r24
    3d56:	e2 0f       	add	r30, r18
    3d58:	f3 1f       	adc	r31, r19
    3d5a:	80 81       	ld	r24, Z
    3d5c:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	8f 5f       	subi	r24, 0xFF	; 255
    3d64:	89 83       	std	Y+1, r24	; 0x01
    3d66:	99 81       	ldd	r25, Y+1	; 0x01
    3d68:	8a 81       	ldd	r24, Y+2	; 0x02
    3d6a:	98 17       	cp	r25, r24
    3d6c:	70 f3       	brcs	.-36     	; 0x3d4a <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3d6e:	8f 81       	ldd	r24, Y+7	; 0x07
    3d70:	68 85       	ldd	r22, Y+8	; 0x08
    3d72:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3d76:	8c 81       	ldd	r24, Y+4	; 0x04
    3d78:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3d7c:	20 c0       	rjmp	.+64     	; 0x3dbe <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    3d7e:	88 e7       	ldi	r24, 0x78	; 120
    3d80:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    3d84:	19 82       	std	Y+1, r1	; 0x01
    3d86:	0e c0       	rjmp	.+28     	; 0x3da4 <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    3d88:	89 81       	ldd	r24, Y+1	; 0x01
    3d8a:	28 2f       	mov	r18, r24
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d90:	9e 81       	ldd	r25, Y+6	; 0x06
    3d92:	fc 01       	movw	r30, r24
    3d94:	e2 0f       	add	r30, r18
    3d96:	f3 1f       	adc	r31, r19
    3d98:	80 81       	ld	r24, Z
    3d9a:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	8f 5f       	subi	r24, 0xFF	; 255
    3da2:	89 83       	std	Y+1, r24	; 0x01
    3da4:	99 81       	ldd	r25, Y+1	; 0x01
    3da6:	8a 81       	ldd	r24, Y+2	; 0x02
    3da8:	98 17       	cp	r25, r24
    3daa:	70 f3       	brcs	.-36     	; 0x3d88 <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    3dac:	8f 81       	ldd	r24, Y+7	; 0x07
    3dae:	68 85       	ldd	r22, Y+8	; 0x08
    3db0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    3db4:	8c 81       	ldd	r24, Y+4	; 0x04
    3db6:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    3dba:	01 c0       	rjmp	.+2      	; 0x3dbe <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    3dbc:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    3dbe:	8b 81       	ldd	r24, Y+3	; 0x03
}
    3dc0:	2a 96       	adiw	r28, 0x0a	; 10
    3dc2:	0f b6       	in	r0, 0x3f	; 63
    3dc4:	f8 94       	cli
    3dc6:	de bf       	out	0x3e, r29	; 62
    3dc8:	0f be       	out	0x3f, r0	; 63
    3dca:	cd bf       	out	0x3d, r28	; 61
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	08 95       	ret

00003dd2 <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    3dd2:	df 93       	push	r29
    3dd4:	cf 93       	push	r28
    3dd6:	cd b7       	in	r28, 0x3d	; 61
    3dd8:	de b7       	in	r29, 0x3e	; 62
    3dda:	e1 97       	sbiw	r28, 0x31	; 49
    3ddc:	0f b6       	in	r0, 0x3f	; 63
    3dde:	f8 94       	cli
    3de0:	de bf       	out	0x3e, r29	; 62
    3de2:	0f be       	out	0x3f, r0	; 63
    3de4:	cd bf       	out	0x3d, r28	; 61
    3de6:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    3de8:	83 e0       	ldi	r24, 0x03	; 3
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	40 e0       	ldi	r20, 0x00	; 0
    3dee:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    3df2:	83 e0       	ldi	r24, 0x03	; 3
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	40 e0       	ldi	r20, 0x00	; 0
    3df8:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    3dfc:	89 a9       	ldd	r24, Y+49	; 0x31
    3dfe:	98 2f       	mov	r25, r24
    3e00:	92 95       	swap	r25
    3e02:	90 7f       	andi	r25, 0xF0	; 240
    3e04:	82 e0       	ldi	r24, 0x02	; 2
    3e06:	69 2f       	mov	r22, r25
    3e08:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    3e0c:	83 e0       	ldi	r24, 0x03	; 3
    3e0e:	62 e0       	ldi	r22, 0x02	; 2
    3e10:	41 e0       	ldi	r20, 0x01	; 1
    3e12:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    3e16:	80 e0       	ldi	r24, 0x00	; 0
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	a0 e8       	ldi	r26, 0x80	; 128
    3e1c:	bf e3       	ldi	r27, 0x3F	; 63
    3e1e:	8d a7       	std	Y+45, r24	; 0x2d
    3e20:	9e a7       	std	Y+46, r25	; 0x2e
    3e22:	af a7       	std	Y+47, r26	; 0x2f
    3e24:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e26:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e28:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    3e2e:	2b ea       	ldi	r18, 0xAB	; 171
    3e30:	3a ea       	ldi	r19, 0xAA	; 170
    3e32:	4a e2       	ldi	r20, 0x2A	; 42
    3e34:	50 e4       	ldi	r21, 0x40	; 64
    3e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e3a:	dc 01       	movw	r26, r24
    3e3c:	cb 01       	movw	r24, r22
    3e3e:	89 a7       	std	Y+41, r24	; 0x29
    3e40:	9a a7       	std	Y+42, r25	; 0x2a
    3e42:	ab a7       	std	Y+43, r26	; 0x2b
    3e44:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    3e46:	69 a5       	ldd	r22, Y+41	; 0x29
    3e48:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e4a:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e4c:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e4e:	20 e0       	ldi	r18, 0x00	; 0
    3e50:	30 e0       	ldi	r19, 0x00	; 0
    3e52:	40 e8       	ldi	r20, 0x80	; 128
    3e54:	5f e3       	ldi	r21, 0x3F	; 63
    3e56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3e5a:	88 23       	and	r24, r24
    3e5c:	1c f4       	brge	.+6      	; 0x3e64 <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	88 a7       	std	Y+40, r24	; 0x28
    3e62:	91 c0       	rjmp	.+290    	; 0x3f86 <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    3e64:	69 a5       	ldd	r22, Y+41	; 0x29
    3e66:	7a a5       	ldd	r23, Y+42	; 0x2a
    3e68:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e6a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e6c:	20 e0       	ldi	r18, 0x00	; 0
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	4f e7       	ldi	r20, 0x7F	; 127
    3e72:	53 e4       	ldi	r21, 0x43	; 67
    3e74:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e78:	18 16       	cp	r1, r24
    3e7a:	0c f0       	brlt	.+2      	; 0x3e7e <LCD_voidSendHalfCmnd+0xac>
    3e7c:	7b c0       	rjmp	.+246    	; 0x3f74 <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    3e7e:	6d a5       	ldd	r22, Y+45	; 0x2d
    3e80:	7e a5       	ldd	r23, Y+46	; 0x2e
    3e82:	8f a5       	ldd	r24, Y+47	; 0x2f
    3e84:	98 a9       	ldd	r25, Y+48	; 0x30
    3e86:	20 e0       	ldi	r18, 0x00	; 0
    3e88:	30 e0       	ldi	r19, 0x00	; 0
    3e8a:	4a e7       	ldi	r20, 0x7A	; 122
    3e8c:	54 e4       	ldi	r21, 0x44	; 68
    3e8e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e92:	dc 01       	movw	r26, r24
    3e94:	cb 01       	movw	r24, r22
    3e96:	8c a3       	std	Y+36, r24	; 0x24
    3e98:	9d a3       	std	Y+37, r25	; 0x25
    3e9a:	ae a3       	std	Y+38, r26	; 0x26
    3e9c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9e:	6c a1       	ldd	r22, Y+36	; 0x24
    3ea0:	7d a1       	ldd	r23, Y+37	; 0x25
    3ea2:	8e a1       	ldd	r24, Y+38	; 0x26
    3ea4:	9f a1       	ldd	r25, Y+39	; 0x27
    3ea6:	20 e0       	ldi	r18, 0x00	; 0
    3ea8:	30 e0       	ldi	r19, 0x00	; 0
    3eaa:	4a ef       	ldi	r20, 0xFA	; 250
    3eac:	54 e4       	ldi	r21, 0x44	; 68
    3eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	88 a3       	std	Y+32, r24	; 0x20
    3eb8:	99 a3       	std	Y+33, r25	; 0x21
    3eba:	aa a3       	std	Y+34, r26	; 0x22
    3ebc:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3ebe:	68 a1       	ldd	r22, Y+32	; 0x20
    3ec0:	79 a1       	ldd	r23, Y+33	; 0x21
    3ec2:	8a a1       	ldd	r24, Y+34	; 0x22
    3ec4:	9b a1       	ldd	r25, Y+35	; 0x23
    3ec6:	20 e0       	ldi	r18, 0x00	; 0
    3ec8:	30 e0       	ldi	r19, 0x00	; 0
    3eca:	40 e8       	ldi	r20, 0x80	; 128
    3ecc:	5f e3       	ldi	r21, 0x3F	; 63
    3ece:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ed2:	88 23       	and	r24, r24
    3ed4:	2c f4       	brge	.+10     	; 0x3ee0 <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    3ed6:	81 e0       	ldi	r24, 0x01	; 1
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	9f 8f       	std	Y+31, r25	; 0x1f
    3edc:	8e 8f       	std	Y+30, r24	; 0x1e
    3ede:	3f c0       	rjmp	.+126    	; 0x3f5e <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    3ee0:	68 a1       	ldd	r22, Y+32	; 0x20
    3ee2:	79 a1       	ldd	r23, Y+33	; 0x21
    3ee4:	8a a1       	ldd	r24, Y+34	; 0x22
    3ee6:	9b a1       	ldd	r25, Y+35	; 0x23
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	3f ef       	ldi	r19, 0xFF	; 255
    3eec:	4f e7       	ldi	r20, 0x7F	; 127
    3eee:	57 e4       	ldi	r21, 0x47	; 71
    3ef0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ef4:	18 16       	cp	r1, r24
    3ef6:	4c f5       	brge	.+82     	; 0x3f4a <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef8:	6c a1       	ldd	r22, Y+36	; 0x24
    3efa:	7d a1       	ldd	r23, Y+37	; 0x25
    3efc:	8e a1       	ldd	r24, Y+38	; 0x26
    3efe:	9f a1       	ldd	r25, Y+39	; 0x27
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	40 e2       	ldi	r20, 0x20	; 32
    3f06:	51 e4       	ldi	r21, 0x41	; 65
    3f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0c:	dc 01       	movw	r26, r24
    3f0e:	cb 01       	movw	r24, r22
    3f10:	bc 01       	movw	r22, r24
    3f12:	cd 01       	movw	r24, r26
    3f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f18:	dc 01       	movw	r26, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	9f 8f       	std	Y+31, r25	; 0x1f
    3f1e:	8e 8f       	std	Y+30, r24	; 0x1e
    3f20:	0f c0       	rjmp	.+30     	; 0x3f40 <LCD_voidSendHalfCmnd+0x16e>
    3f22:	88 ec       	ldi	r24, 0xC8	; 200
    3f24:	90 e0       	ldi	r25, 0x00	; 0
    3f26:	9d 8f       	std	Y+29, r25	; 0x1d
    3f28:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f2a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3f2c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3f2e:	01 97       	sbiw	r24, 0x01	; 1
    3f30:	f1 f7       	brne	.-4      	; 0x3f2e <LCD_voidSendHalfCmnd+0x15c>
    3f32:	9d 8f       	std	Y+29, r25	; 0x1d
    3f34:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f36:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f38:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	9f 8f       	std	Y+31, r25	; 0x1f
    3f3e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f40:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f42:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f44:	00 97       	sbiw	r24, 0x00	; 0
    3f46:	69 f7       	brne	.-38     	; 0x3f22 <LCD_voidSendHalfCmnd+0x150>
    3f48:	24 c0       	rjmp	.+72     	; 0x3f92 <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f4a:	68 a1       	ldd	r22, Y+32	; 0x20
    3f4c:	79 a1       	ldd	r23, Y+33	; 0x21
    3f4e:	8a a1       	ldd	r24, Y+34	; 0x22
    3f50:	9b a1       	ldd	r25, Y+35	; 0x23
    3f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f56:	dc 01       	movw	r26, r24
    3f58:	cb 01       	movw	r24, r22
    3f5a:	9f 8f       	std	Y+31, r25	; 0x1f
    3f5c:	8e 8f       	std	Y+30, r24	; 0x1e
    3f5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f60:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3f62:	9b 8f       	std	Y+27, r25	; 0x1b
    3f64:	8a 8f       	std	Y+26, r24	; 0x1a
    3f66:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3f68:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3f6a:	01 97       	sbiw	r24, 0x01	; 1
    3f6c:	f1 f7       	brne	.-4      	; 0x3f6a <LCD_voidSendHalfCmnd+0x198>
    3f6e:	9b 8f       	std	Y+27, r25	; 0x1b
    3f70:	8a 8f       	std	Y+26, r24	; 0x1a
    3f72:	0f c0       	rjmp	.+30     	; 0x3f92 <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f74:	69 a5       	ldd	r22, Y+41	; 0x29
    3f76:	7a a5       	ldd	r23, Y+42	; 0x2a
    3f78:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f7a:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	88 a7       	std	Y+40, r24	; 0x28
    3f86:	88 a5       	ldd	r24, Y+40	; 0x28
    3f88:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f8a:	89 8d       	ldd	r24, Y+25	; 0x19
    3f8c:	8a 95       	dec	r24
    3f8e:	f1 f7       	brne	.-4      	; 0x3f8c <LCD_voidSendHalfCmnd+0x1ba>
    3f90:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    3f92:	83 e0       	ldi	r24, 0x03	; 3
    3f94:	62 e0       	ldi	r22, 0x02	; 2
    3f96:	40 e0       	ldi	r20, 0x00	; 0
    3f98:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	90 e0       	ldi	r25, 0x00	; 0
    3fa0:	a0 e8       	ldi	r26, 0x80	; 128
    3fa2:	bf e3       	ldi	r27, 0x3F	; 63
    3fa4:	8d 8b       	std	Y+21, r24	; 0x15
    3fa6:	9e 8b       	std	Y+22, r25	; 0x16
    3fa8:	af 8b       	std	Y+23, r26	; 0x17
    3faa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3fac:	6d 89       	ldd	r22, Y+21	; 0x15
    3fae:	7e 89       	ldd	r23, Y+22	; 0x16
    3fb0:	8f 89       	ldd	r24, Y+23	; 0x17
    3fb2:	98 8d       	ldd	r25, Y+24	; 0x18
    3fb4:	2b ea       	ldi	r18, 0xAB	; 171
    3fb6:	3a ea       	ldi	r19, 0xAA	; 170
    3fb8:	4a e2       	ldi	r20, 0x2A	; 42
    3fba:	50 e4       	ldi	r21, 0x40	; 64
    3fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	89 8b       	std	Y+17, r24	; 0x11
    3fc6:	9a 8b       	std	Y+18, r25	; 0x12
    3fc8:	ab 8b       	std	Y+19, r26	; 0x13
    3fca:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3fcc:	69 89       	ldd	r22, Y+17	; 0x11
    3fce:	7a 89       	ldd	r23, Y+18	; 0x12
    3fd0:	8b 89       	ldd	r24, Y+19	; 0x13
    3fd2:	9c 89       	ldd	r25, Y+20	; 0x14
    3fd4:	20 e0       	ldi	r18, 0x00	; 0
    3fd6:	30 e0       	ldi	r19, 0x00	; 0
    3fd8:	40 e8       	ldi	r20, 0x80	; 128
    3fda:	5f e3       	ldi	r21, 0x3F	; 63
    3fdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3fe0:	88 23       	and	r24, r24
    3fe2:	1c f4       	brge	.+6      	; 0x3fea <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	88 8b       	std	Y+16, r24	; 0x10
    3fe8:	91 c0       	rjmp	.+290    	; 0x410c <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    3fea:	69 89       	ldd	r22, Y+17	; 0x11
    3fec:	7a 89       	ldd	r23, Y+18	; 0x12
    3fee:	8b 89       	ldd	r24, Y+19	; 0x13
    3ff0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ff2:	20 e0       	ldi	r18, 0x00	; 0
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	4f e7       	ldi	r20, 0x7F	; 127
    3ff8:	53 e4       	ldi	r21, 0x43	; 67
    3ffa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ffe:	18 16       	cp	r1, r24
    4000:	0c f0       	brlt	.+2      	; 0x4004 <LCD_voidSendHalfCmnd+0x232>
    4002:	7b c0       	rjmp	.+246    	; 0x40fa <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    4004:	6d 89       	ldd	r22, Y+21	; 0x15
    4006:	7e 89       	ldd	r23, Y+22	; 0x16
    4008:	8f 89       	ldd	r24, Y+23	; 0x17
    400a:	98 8d       	ldd	r25, Y+24	; 0x18
    400c:	20 e0       	ldi	r18, 0x00	; 0
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	4a e7       	ldi	r20, 0x7A	; 122
    4012:	54 e4       	ldi	r21, 0x44	; 68
    4014:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    4018:	dc 01       	movw	r26, r24
    401a:	cb 01       	movw	r24, r22
    401c:	8c 87       	std	Y+12, r24	; 0x0c
    401e:	9d 87       	std	Y+13, r25	; 0x0d
    4020:	ae 87       	std	Y+14, r26	; 0x0e
    4022:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4024:	6c 85       	ldd	r22, Y+12	; 0x0c
    4026:	7d 85       	ldd	r23, Y+13	; 0x0d
    4028:	8e 85       	ldd	r24, Y+14	; 0x0e
    402a:	9f 85       	ldd	r25, Y+15	; 0x0f
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	30 e0       	ldi	r19, 0x00	; 0
    4030:	4a ef       	ldi	r20, 0xFA	; 250
    4032:	54 e4       	ldi	r21, 0x44	; 68
    4034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4038:	dc 01       	movw	r26, r24
    403a:	cb 01       	movw	r24, r22
    403c:	88 87       	std	Y+8, r24	; 0x08
    403e:	99 87       	std	Y+9, r25	; 0x09
    4040:	aa 87       	std	Y+10, r26	; 0x0a
    4042:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    4044:	68 85       	ldd	r22, Y+8	; 0x08
    4046:	79 85       	ldd	r23, Y+9	; 0x09
    4048:	8a 85       	ldd	r24, Y+10	; 0x0a
    404a:	9b 85       	ldd	r25, Y+11	; 0x0b
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	40 e8       	ldi	r20, 0x80	; 128
    4052:	5f e3       	ldi	r21, 0x3F	; 63
    4054:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4058:	88 23       	and	r24, r24
    405a:	2c f4       	brge	.+10     	; 0x4066 <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	90 e0       	ldi	r25, 0x00	; 0
    4060:	9f 83       	std	Y+7, r25	; 0x07
    4062:	8e 83       	std	Y+6, r24	; 0x06
    4064:	3f c0       	rjmp	.+126    	; 0x40e4 <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    4066:	68 85       	ldd	r22, Y+8	; 0x08
    4068:	79 85       	ldd	r23, Y+9	; 0x09
    406a:	8a 85       	ldd	r24, Y+10	; 0x0a
    406c:	9b 85       	ldd	r25, Y+11	; 0x0b
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	3f ef       	ldi	r19, 0xFF	; 255
    4072:	4f e7       	ldi	r20, 0x7F	; 127
    4074:	57 e4       	ldi	r21, 0x47	; 71
    4076:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    407a:	18 16       	cp	r1, r24
    407c:	4c f5       	brge	.+82     	; 0x40d0 <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    407e:	6c 85       	ldd	r22, Y+12	; 0x0c
    4080:	7d 85       	ldd	r23, Y+13	; 0x0d
    4082:	8e 85       	ldd	r24, Y+14	; 0x0e
    4084:	9f 85       	ldd	r25, Y+15	; 0x0f
    4086:	20 e0       	ldi	r18, 0x00	; 0
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e2       	ldi	r20, 0x20	; 32
    408c:	51 e4       	ldi	r21, 0x41	; 65
    408e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4092:	dc 01       	movw	r26, r24
    4094:	cb 01       	movw	r24, r22
    4096:	bc 01       	movw	r22, r24
    4098:	cd 01       	movw	r24, r26
    409a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409e:	dc 01       	movw	r26, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	9f 83       	std	Y+7, r25	; 0x07
    40a4:	8e 83       	std	Y+6, r24	; 0x06
    40a6:	0f c0       	rjmp	.+30     	; 0x40c6 <LCD_voidSendHalfCmnd+0x2f4>
    40a8:	88 ec       	ldi	r24, 0xC8	; 200
    40aa:	90 e0       	ldi	r25, 0x00	; 0
    40ac:	9d 83       	std	Y+5, r25	; 0x05
    40ae:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    40b0:	8c 81       	ldd	r24, Y+4	; 0x04
    40b2:	9d 81       	ldd	r25, Y+5	; 0x05
    40b4:	01 97       	sbiw	r24, 0x01	; 1
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <LCD_voidSendHalfCmnd+0x2e2>
    40b8:	9d 83       	std	Y+5, r25	; 0x05
    40ba:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40bc:	8e 81       	ldd	r24, Y+6	; 0x06
    40be:	9f 81       	ldd	r25, Y+7	; 0x07
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	9f 83       	std	Y+7, r25	; 0x07
    40c4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40c6:	8e 81       	ldd	r24, Y+6	; 0x06
    40c8:	9f 81       	ldd	r25, Y+7	; 0x07
    40ca:	00 97       	sbiw	r24, 0x00	; 0
    40cc:	69 f7       	brne	.-38     	; 0x40a8 <LCD_voidSendHalfCmnd+0x2d6>
    40ce:	24 c0       	rjmp	.+72     	; 0x4118 <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40d0:	68 85       	ldd	r22, Y+8	; 0x08
    40d2:	79 85       	ldd	r23, Y+9	; 0x09
    40d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    40d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    40d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	9f 83       	std	Y+7, r25	; 0x07
    40e2:	8e 83       	std	Y+6, r24	; 0x06
    40e4:	8e 81       	ldd	r24, Y+6	; 0x06
    40e6:	9f 81       	ldd	r25, Y+7	; 0x07
    40e8:	9b 83       	std	Y+3, r25	; 0x03
    40ea:	8a 83       	std	Y+2, r24	; 0x02
    40ec:	8a 81       	ldd	r24, Y+2	; 0x02
    40ee:	9b 81       	ldd	r25, Y+3	; 0x03
    40f0:	01 97       	sbiw	r24, 0x01	; 1
    40f2:	f1 f7       	brne	.-4      	; 0x40f0 <LCD_voidSendHalfCmnd+0x31e>
    40f4:	9b 83       	std	Y+3, r25	; 0x03
    40f6:	8a 83       	std	Y+2, r24	; 0x02
    40f8:	0f c0       	rjmp	.+30     	; 0x4118 <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    40fa:	69 89       	ldd	r22, Y+17	; 0x11
    40fc:	7a 89       	ldd	r23, Y+18	; 0x12
    40fe:	8b 89       	ldd	r24, Y+19	; 0x13
    4100:	9c 89       	ldd	r25, Y+20	; 0x14
    4102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4106:	dc 01       	movw	r26, r24
    4108:	cb 01       	movw	r24, r22
    410a:	88 8b       	std	Y+16, r24	; 0x10
    410c:	88 89       	ldd	r24, Y+16	; 0x10
    410e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	8a 95       	dec	r24
    4114:	f1 f7       	brne	.-4      	; 0x4112 <LCD_voidSendHalfCmnd+0x340>
    4116:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
    4118:	e1 96       	adiw	r28, 0x31	; 49
    411a:	0f b6       	in	r0, 0x3f	; 63
    411c:	f8 94       	cli
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	0f be       	out	0x3f, r0	; 63
    4122:	cd bf       	out	0x3d, r28	; 61
    4124:	cf 91       	pop	r28
    4126:	df 91       	pop	r29
    4128:	08 95       	ret

0000412a <appenedToBuffer>:
u8 Local_u8Index = 0; // Index for buffer
u8 Local_Au8InputBuffer[6] = {0}; // Buffer to store input
u8 trials = 0;
/* Function to append a key to buffer */
void appenedToBuffer(u8 *buffer,u8 key)
{
    412a:	df 93       	push	r29
    412c:	cf 93       	push	r28
    412e:	00 d0       	rcall	.+0      	; 0x4130 <appenedToBuffer+0x6>
    4130:	0f 92       	push	r0
    4132:	cd b7       	in	r28, 0x3d	; 61
    4134:	de b7       	in	r29, 0x3e	; 62
    4136:	9a 83       	std	Y+2, r25	; 0x02
    4138:	89 83       	std	Y+1, r24	; 0x01
    413a:	6b 83       	std	Y+3, r22	; 0x03
	if(Local_u8Index < 5) // Make sure buffer index is within range
    413c:	80 91 9f 02 	lds	r24, 0x029F
    4140:	85 30       	cpi	r24, 0x05	; 5
    4142:	d0 f4       	brcc	.+52     	; 0x4178 <appenedToBuffer+0x4e>
	{
		*(buffer+Local_u8Index) = key; // Store the character in buffer
    4144:	80 91 9f 02 	lds	r24, 0x029F
    4148:	28 2f       	mov	r18, r24
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	9a 81       	ldd	r25, Y+2	; 0x02
    4150:	fc 01       	movw	r30, r24
    4152:	e2 0f       	add	r30, r18
    4154:	f3 1f       	adc	r31, r19
    4156:	8b 81       	ldd	r24, Y+3	; 0x03
    4158:	80 83       	st	Z, r24
		Local_u8Index++; // Increment buffer index
    415a:	80 91 9f 02 	lds	r24, 0x029F
    415e:	8f 5f       	subi	r24, 0xFF	; 255
    4160:	80 93 9f 02 	sts	0x029F, r24
		*(buffer+Local_u8Index) = '\0';// Null-terminate buffer
    4164:	80 91 9f 02 	lds	r24, 0x029F
    4168:	28 2f       	mov	r18, r24
    416a:	30 e0       	ldi	r19, 0x00	; 0
    416c:	89 81       	ldd	r24, Y+1	; 0x01
    416e:	9a 81       	ldd	r25, Y+2	; 0x02
    4170:	fc 01       	movw	r30, r24
    4172:	e2 0f       	add	r30, r18
    4174:	f3 1f       	adc	r31, r19
    4176:	10 82       	st	Z, r1
	}
}
    4178:	0f 90       	pop	r0
    417a:	0f 90       	pop	r0
    417c:	0f 90       	pop	r0
    417e:	cf 91       	pop	r28
    4180:	df 91       	pop	r29
    4182:	08 95       	ret

00004184 <ClearBuffer>:
/* Function to clear buffer */
void ClearBuffer(u8 *buffer,u8 size)
{
    4184:	df 93       	push	r29
    4186:	cf 93       	push	r28
    4188:	00 d0       	rcall	.+0      	; 0x418a <ClearBuffer+0x6>
    418a:	00 d0       	rcall	.+0      	; 0x418c <ClearBuffer+0x8>
    418c:	cd b7       	in	r28, 0x3d	; 61
    418e:	de b7       	in	r29, 0x3e	; 62
    4190:	9b 83       	std	Y+3, r25	; 0x03
    4192:	8a 83       	std	Y+2, r24	; 0x02
    4194:	6c 83       	std	Y+4, r22	; 0x04
	u8 i;
	for (i = 0; i < size; i++)// Loop through buffer
    4196:	19 82       	std	Y+1, r1	; 0x01
    4198:	0c c0       	rjmp	.+24     	; 0x41b2 <ClearBuffer+0x2e>
	{
		buffer[i] = '\0';// Set each element to null character
    419a:	89 81       	ldd	r24, Y+1	; 0x01
    419c:	28 2f       	mov	r18, r24
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	8a 81       	ldd	r24, Y+2	; 0x02
    41a2:	9b 81       	ldd	r25, Y+3	; 0x03
    41a4:	fc 01       	movw	r30, r24
    41a6:	e2 0f       	add	r30, r18
    41a8:	f3 1f       	adc	r31, r19
    41aa:	10 82       	st	Z, r1
}
/* Function to clear buffer */
void ClearBuffer(u8 *buffer,u8 size)
{
	u8 i;
	for (i = 0; i < size; i++)// Loop through buffer
    41ac:	89 81       	ldd	r24, Y+1	; 0x01
    41ae:	8f 5f       	subi	r24, 0xFF	; 255
    41b0:	89 83       	std	Y+1, r24	; 0x01
    41b2:	99 81       	ldd	r25, Y+1	; 0x01
    41b4:	8c 81       	ldd	r24, Y+4	; 0x04
    41b6:	98 17       	cp	r25, r24
    41b8:	80 f3       	brcs	.-32     	; 0x419a <ClearBuffer+0x16>
	{
		buffer[i] = '\0';// Set each element to null character
	}
}
    41ba:	0f 90       	pop	r0
    41bc:	0f 90       	pop	r0
    41be:	0f 90       	pop	r0
    41c0:	0f 90       	pop	r0
    41c2:	cf 91       	pop	r28
    41c4:	df 91       	pop	r29
    41c6:	08 95       	ret

000041c8 <CheckPassword>:
void CheckPassword(u8* buffer,u8* password,u8* Result)
{
    41c8:	df 93       	push	r29
    41ca:	cf 93       	push	r28
    41cc:	cd b7       	in	r28, 0x3d	; 61
    41ce:	de b7       	in	r29, 0x3e	; 62
    41d0:	28 97       	sbiw	r28, 0x08	; 8
    41d2:	0f b6       	in	r0, 0x3f	; 63
    41d4:	f8 94       	cli
    41d6:	de bf       	out	0x3e, r29	; 62
    41d8:	0f be       	out	0x3f, r0	; 63
    41da:	cd bf       	out	0x3d, r28	; 61
    41dc:	9c 83       	std	Y+4, r25	; 0x04
    41de:	8b 83       	std	Y+3, r24	; 0x03
    41e0:	7e 83       	std	Y+6, r23	; 0x06
    41e2:	6d 83       	std	Y+5, r22	; 0x05
    41e4:	58 87       	std	Y+8, r21	; 0x08
    41e6:	4f 83       	std	Y+7, r20	; 0x07
	u8 i = 0; // Loop counter
    41e8:	1a 82       	std	Y+2, r1	; 0x02
	u8 Password_Flag = 0; // 0 mean incorrect
    41ea:	19 82       	std	Y+1, r1	; 0x01
    41ec:	1c c0       	rjmp	.+56     	; 0x4226 <CheckPassword+0x5e>
	while((*(buffer+i) != '\0') && (*(password+i)!= '\0'))
	{
		if(buffer[i] == password[i])
    41ee:	8a 81       	ldd	r24, Y+2	; 0x02
    41f0:	28 2f       	mov	r18, r24
    41f2:	30 e0       	ldi	r19, 0x00	; 0
    41f4:	8b 81       	ldd	r24, Y+3	; 0x03
    41f6:	9c 81       	ldd	r25, Y+4	; 0x04
    41f8:	fc 01       	movw	r30, r24
    41fa:	e2 0f       	add	r30, r18
    41fc:	f3 1f       	adc	r31, r19
    41fe:	40 81       	ld	r20, Z
    4200:	8a 81       	ldd	r24, Y+2	; 0x02
    4202:	28 2f       	mov	r18, r24
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	8d 81       	ldd	r24, Y+5	; 0x05
    4208:	9e 81       	ldd	r25, Y+6	; 0x06
    420a:	fc 01       	movw	r30, r24
    420c:	e2 0f       	add	r30, r18
    420e:	f3 1f       	adc	r31, r19
    4210:	80 81       	ld	r24, Z
    4212:	48 17       	cp	r20, r24
    4214:	31 f4       	brne	.+12     	; 0x4222 <CheckPassword+0x5a>
		{
			Password_Flag = 1;
    4216:	81 e0       	ldi	r24, 0x01	; 1
    4218:	89 83       	std	Y+1, r24	; 0x01
		else
		{
			Password_Flag = 0;
			break;
		}
		i++;
    421a:	8a 81       	ldd	r24, Y+2	; 0x02
    421c:	8f 5f       	subi	r24, 0xFF	; 255
    421e:	8a 83       	std	Y+2, r24	; 0x02
    4220:	02 c0       	rjmp	.+4      	; 0x4226 <CheckPassword+0x5e>
		{
			Password_Flag = 1;
		}
		else
		{
			Password_Flag = 0;
    4222:	19 82       	std	Y+1, r1	; 0x01
    4224:	16 c0       	rjmp	.+44     	; 0x4252 <CheckPassword+0x8a>
}
void CheckPassword(u8* buffer,u8* password,u8* Result)
{
	u8 i = 0; // Loop counter
	u8 Password_Flag = 0; // 0 mean incorrect
	while((*(buffer+i) != '\0') && (*(password+i)!= '\0'))
    4226:	8a 81       	ldd	r24, Y+2	; 0x02
    4228:	28 2f       	mov	r18, r24
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	8b 81       	ldd	r24, Y+3	; 0x03
    422e:	9c 81       	ldd	r25, Y+4	; 0x04
    4230:	fc 01       	movw	r30, r24
    4232:	e2 0f       	add	r30, r18
    4234:	f3 1f       	adc	r31, r19
    4236:	80 81       	ld	r24, Z
    4238:	88 23       	and	r24, r24
    423a:	59 f0       	breq	.+22     	; 0x4252 <CheckPassword+0x8a>
    423c:	8a 81       	ldd	r24, Y+2	; 0x02
    423e:	28 2f       	mov	r18, r24
    4240:	30 e0       	ldi	r19, 0x00	; 0
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	fc 01       	movw	r30, r24
    4248:	e2 0f       	add	r30, r18
    424a:	f3 1f       	adc	r31, r19
    424c:	80 81       	ld	r24, Z
    424e:	88 23       	and	r24, r24
    4250:	71 f6       	brne	.-100    	; 0x41ee <CheckPassword+0x26>
			Password_Flag = 0;
			break;
		}
		i++;
	}
	*Result = Password_Flag;
    4252:	ef 81       	ldd	r30, Y+7	; 0x07
    4254:	f8 85       	ldd	r31, Y+8	; 0x08
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	80 83       	st	Z, r24
}
    425a:	28 96       	adiw	r28, 0x08	; 8
    425c:	0f b6       	in	r0, 0x3f	; 63
    425e:	f8 94       	cli
    4260:	de bf       	out	0x3e, r29	; 62
    4262:	0f be       	out	0x3f, r0	; 63
    4264:	cd bf       	out	0x3d, r28	; 61
    4266:	cf 91       	pop	r28
    4268:	df 91       	pop	r29
    426a:	08 95       	ret

0000426c <login_system>:
void login_system(const u8* password, u8* flag)
{
    426c:	0f 93       	push	r16
    426e:	1f 93       	push	r17
    4270:	df 93       	push	r29
    4272:	cf 93       	push	r28
    4274:	cd b7       	in	r28, 0x3d	; 61
    4276:	de b7       	in	r29, 0x3e	; 62
    4278:	c8 56       	subi	r28, 0x68	; 104
    427a:	d0 40       	sbci	r29, 0x00	; 0
    427c:	0f b6       	in	r0, 0x3f	; 63
    427e:	f8 94       	cli
    4280:	de bf       	out	0x3e, r29	; 62
    4282:	0f be       	out	0x3f, r0	; 63
    4284:	cd bf       	out	0x3d, r28	; 61
    4286:	fe 01       	movw	r30, r28
    4288:	eb 59       	subi	r30, 0x9B	; 155
    428a:	ff 4f       	sbci	r31, 0xFF	; 255
    428c:	91 83       	std	Z+1, r25	; 0x01
    428e:	80 83       	st	Z, r24
    4290:	fe 01       	movw	r30, r28
    4292:	e9 59       	subi	r30, 0x99	; 153
    4294:	ff 4f       	sbci	r31, 0xFF	; 255
    4296:	71 83       	std	Z+1, r23	; 0x01
    4298:	60 83       	st	Z, r22
	u8 Local_u8Key;
	u8 Local_u8Result;
	LCD_voidWriteString((u8*)"Enter Password: ");
    429a:	8b ef       	ldi	r24, 0xFB	; 251
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
	LCD_u8GoToXY(LCD_u8_LINE2,0);
    42a2:	82 e0       	ldi	r24, 0x02	; 2
    42a4:	60 e0       	ldi	r22, 0x00	; 0
    42a6:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
	while(1)
	{
		if(trials < 3)
    42aa:	80 91 a6 02 	lds	r24, 0x02A6
    42ae:	83 30       	cpi	r24, 0x03	; 3
    42b0:	08 f0       	brcs	.+2      	; 0x42b4 <login_system+0x48>
    42b2:	b1 c3       	rjmp	.+1890   	; 0x4a16 <login_system+0x7aa>
		{
			KPD_u8GetKeyState(&Local_u8Key); // Get state of pressed key
    42b4:	ce 01       	movw	r24, r28
    42b6:	8d 59       	subi	r24, 0x9D	; 157
    42b8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ba:	0e 94 a8 15 	call	0x2b50	; 0x2b50 <KPD_u8GetKeyState>
			if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED) // If a key is pressed
    42be:	fe 01       	movw	r30, r28
    42c0:	ed 59       	subi	r30, 0x9D	; 157
    42c2:	ff 4f       	sbci	r31, 0xFF	; 255
    42c4:	80 81       	ld	r24, Z
    42c6:	8f 3f       	cpi	r24, 0xFF	; 255
    42c8:	81 f3       	breq	.-32     	; 0x42aa <login_system+0x3e>
			{
				if(Local_u8Key == '=') // If pressed key is '='
    42ca:	fe 01       	movw	r30, r28
    42cc:	ed 59       	subi	r30, 0x9D	; 157
    42ce:	ff 4f       	sbci	r31, 0xFF	; 255
    42d0:	80 81       	ld	r24, Z
    42d2:	8d 33       	cpi	r24, 0x3D	; 61
    42d4:	09 f0       	breq	.+2      	; 0x42d8 <login_system+0x6c>
    42d6:	92 c3       	rjmp	.+1828   	; 0x49fc <login_system+0x790>
				{
					CheckPassword(Local_Au8InputBuffer,password,&Local_u8Result);
    42d8:	fe 01       	movw	r30, r28
    42da:	eb 59       	subi	r30, 0x9B	; 155
    42dc:	ff 4f       	sbci	r31, 0xFF	; 255
    42de:	40 81       	ld	r20, Z
    42e0:	51 81       	ldd	r21, Z+1	; 0x01
    42e2:	80 ea       	ldi	r24, 0xA0	; 160
    42e4:	92 e0       	ldi	r25, 0x02	; 2
    42e6:	9e 01       	movw	r18, r28
    42e8:	2c 59       	subi	r18, 0x9C	; 156
    42ea:	3f 4f       	sbci	r19, 0xFF	; 255
    42ec:	ba 01       	movw	r22, r20
    42ee:	a9 01       	movw	r20, r18
    42f0:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <CheckPassword>
					if(Local_u8Result)
    42f4:	fe 01       	movw	r30, r28
    42f6:	ec 59       	subi	r30, 0x9C	; 156
    42f8:	ff 4f       	sbci	r31, 0xFF	; 255
    42fa:	80 81       	ld	r24, Z
    42fc:	88 23       	and	r24, r24
    42fe:	09 f4       	brne	.+2      	; 0x4302 <login_system+0x96>
    4300:	c2 c0       	rjmp	.+388    	; 0x4486 <login_system+0x21a>
					{
						LCD_voidClearScreen();
    4302:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    4306:	fe 01       	movw	r30, r28
    4308:	e1 5a       	subi	r30, 0xA1	; 161
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	80 e0       	ldi	r24, 0x00	; 0
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	a0 ea       	ldi	r26, 0xA0	; 160
    4312:	b1 e4       	ldi	r27, 0x41	; 65
    4314:	80 83       	st	Z, r24
    4316:	91 83       	std	Z+1, r25	; 0x01
    4318:	a2 83       	std	Z+2, r26	; 0x02
    431a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431c:	8e 01       	movw	r16, r28
    431e:	05 5a       	subi	r16, 0xA5	; 165
    4320:	1f 4f       	sbci	r17, 0xFF	; 255
    4322:	fe 01       	movw	r30, r28
    4324:	e1 5a       	subi	r30, 0xA1	; 161
    4326:	ff 4f       	sbci	r31, 0xFF	; 255
    4328:	60 81       	ld	r22, Z
    432a:	71 81       	ldd	r23, Z+1	; 0x01
    432c:	82 81       	ldd	r24, Z+2	; 0x02
    432e:	93 81       	ldd	r25, Z+3	; 0x03
    4330:	20 e0       	ldi	r18, 0x00	; 0
    4332:	30 e0       	ldi	r19, 0x00	; 0
    4334:	4a ef       	ldi	r20, 0xFA	; 250
    4336:	54 e4       	ldi	r21, 0x44	; 68
    4338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    433c:	dc 01       	movw	r26, r24
    433e:	cb 01       	movw	r24, r22
    4340:	f8 01       	movw	r30, r16
    4342:	80 83       	st	Z, r24
    4344:	91 83       	std	Z+1, r25	; 0x01
    4346:	a2 83       	std	Z+2, r26	; 0x02
    4348:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    434a:	fe 01       	movw	r30, r28
    434c:	e5 5a       	subi	r30, 0xA5	; 165
    434e:	ff 4f       	sbci	r31, 0xFF	; 255
    4350:	60 81       	ld	r22, Z
    4352:	71 81       	ldd	r23, Z+1	; 0x01
    4354:	82 81       	ldd	r24, Z+2	; 0x02
    4356:	93 81       	ldd	r25, Z+3	; 0x03
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	40 e8       	ldi	r20, 0x80	; 128
    435e:	5f e3       	ldi	r21, 0x3F	; 63
    4360:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4364:	88 23       	and	r24, r24
    4366:	44 f4       	brge	.+16     	; 0x4378 <login_system+0x10c>
		__ticks = 1;
    4368:	fe 01       	movw	r30, r28
    436a:	e7 5a       	subi	r30, 0xA7	; 167
    436c:	ff 4f       	sbci	r31, 0xFF	; 255
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	91 83       	std	Z+1, r25	; 0x01
    4374:	80 83       	st	Z, r24
    4376:	64 c0       	rjmp	.+200    	; 0x4440 <login_system+0x1d4>
	else if (__tmp > 65535)
    4378:	fe 01       	movw	r30, r28
    437a:	e5 5a       	subi	r30, 0xA5	; 165
    437c:	ff 4f       	sbci	r31, 0xFF	; 255
    437e:	60 81       	ld	r22, Z
    4380:	71 81       	ldd	r23, Z+1	; 0x01
    4382:	82 81       	ldd	r24, Z+2	; 0x02
    4384:	93 81       	ldd	r25, Z+3	; 0x03
    4386:	20 e0       	ldi	r18, 0x00	; 0
    4388:	3f ef       	ldi	r19, 0xFF	; 255
    438a:	4f e7       	ldi	r20, 0x7F	; 127
    438c:	57 e4       	ldi	r21, 0x47	; 71
    438e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4392:	18 16       	cp	r1, r24
    4394:	0c f0       	brlt	.+2      	; 0x4398 <login_system+0x12c>
    4396:	43 c0       	rjmp	.+134    	; 0x441e <login_system+0x1b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4398:	fe 01       	movw	r30, r28
    439a:	e1 5a       	subi	r30, 0xA1	; 161
    439c:	ff 4f       	sbci	r31, 0xFF	; 255
    439e:	60 81       	ld	r22, Z
    43a0:	71 81       	ldd	r23, Z+1	; 0x01
    43a2:	82 81       	ldd	r24, Z+2	; 0x02
    43a4:	93 81       	ldd	r25, Z+3	; 0x03
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	40 e2       	ldi	r20, 0x20	; 32
    43ac:	51 e4       	ldi	r21, 0x41	; 65
    43ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	8e 01       	movw	r16, r28
    43b8:	07 5a       	subi	r16, 0xA7	; 167
    43ba:	1f 4f       	sbci	r17, 0xFF	; 255
    43bc:	bc 01       	movw	r22, r24
    43be:	cd 01       	movw	r24, r26
    43c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43c4:	dc 01       	movw	r26, r24
    43c6:	cb 01       	movw	r24, r22
    43c8:	f8 01       	movw	r30, r16
    43ca:	91 83       	std	Z+1, r25	; 0x01
    43cc:	80 83       	st	Z, r24
    43ce:	1f c0       	rjmp	.+62     	; 0x440e <login_system+0x1a2>
    43d0:	fe 01       	movw	r30, r28
    43d2:	e9 5a       	subi	r30, 0xA9	; 169
    43d4:	ff 4f       	sbci	r31, 0xFF	; 255
    43d6:	88 ec       	ldi	r24, 0xC8	; 200
    43d8:	90 e0       	ldi	r25, 0x00	; 0
    43da:	91 83       	std	Z+1, r25	; 0x01
    43dc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    43de:	fe 01       	movw	r30, r28
    43e0:	e9 5a       	subi	r30, 0xA9	; 169
    43e2:	ff 4f       	sbci	r31, 0xFF	; 255
    43e4:	80 81       	ld	r24, Z
    43e6:	91 81       	ldd	r25, Z+1	; 0x01
    43e8:	01 97       	sbiw	r24, 0x01	; 1
    43ea:	f1 f7       	brne	.-4      	; 0x43e8 <login_system+0x17c>
    43ec:	fe 01       	movw	r30, r28
    43ee:	e9 5a       	subi	r30, 0xA9	; 169
    43f0:	ff 4f       	sbci	r31, 0xFF	; 255
    43f2:	91 83       	std	Z+1, r25	; 0x01
    43f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43f6:	de 01       	movw	r26, r28
    43f8:	a7 5a       	subi	r26, 0xA7	; 167
    43fa:	bf 4f       	sbci	r27, 0xFF	; 255
    43fc:	fe 01       	movw	r30, r28
    43fe:	e7 5a       	subi	r30, 0xA7	; 167
    4400:	ff 4f       	sbci	r31, 0xFF	; 255
    4402:	80 81       	ld	r24, Z
    4404:	91 81       	ldd	r25, Z+1	; 0x01
    4406:	01 97       	sbiw	r24, 0x01	; 1
    4408:	11 96       	adiw	r26, 0x01	; 1
    440a:	9c 93       	st	X, r25
    440c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    440e:	fe 01       	movw	r30, r28
    4410:	e7 5a       	subi	r30, 0xA7	; 167
    4412:	ff 4f       	sbci	r31, 0xFF	; 255
    4414:	80 81       	ld	r24, Z
    4416:	91 81       	ldd	r25, Z+1	; 0x01
    4418:	00 97       	sbiw	r24, 0x00	; 0
    441a:	d1 f6       	brne	.-76     	; 0x43d0 <login_system+0x164>
    441c:	27 c0       	rjmp	.+78     	; 0x446c <login_system+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    441e:	8e 01       	movw	r16, r28
    4420:	07 5a       	subi	r16, 0xA7	; 167
    4422:	1f 4f       	sbci	r17, 0xFF	; 255
    4424:	fe 01       	movw	r30, r28
    4426:	e5 5a       	subi	r30, 0xA5	; 165
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	60 81       	ld	r22, Z
    442c:	71 81       	ldd	r23, Z+1	; 0x01
    442e:	82 81       	ldd	r24, Z+2	; 0x02
    4430:	93 81       	ldd	r25, Z+3	; 0x03
    4432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	f8 01       	movw	r30, r16
    443c:	91 83       	std	Z+1, r25	; 0x01
    443e:	80 83       	st	Z, r24
    4440:	de 01       	movw	r26, r28
    4442:	ab 5a       	subi	r26, 0xAB	; 171
    4444:	bf 4f       	sbci	r27, 0xFF	; 255
    4446:	fe 01       	movw	r30, r28
    4448:	e7 5a       	subi	r30, 0xA7	; 167
    444a:	ff 4f       	sbci	r31, 0xFF	; 255
    444c:	80 81       	ld	r24, Z
    444e:	91 81       	ldd	r25, Z+1	; 0x01
    4450:	8d 93       	st	X+, r24
    4452:	9c 93       	st	X, r25
    4454:	fe 01       	movw	r30, r28
    4456:	eb 5a       	subi	r30, 0xAB	; 171
    4458:	ff 4f       	sbci	r31, 0xFF	; 255
    445a:	80 81       	ld	r24, Z
    445c:	91 81       	ldd	r25, Z+1	; 0x01
    445e:	01 97       	sbiw	r24, 0x01	; 1
    4460:	f1 f7       	brne	.-4      	; 0x445e <login_system+0x1f2>
    4462:	fe 01       	movw	r30, r28
    4464:	eb 5a       	subi	r30, 0xAB	; 171
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	91 83       	std	Z+1, r25	; 0x01
    446a:	80 83       	st	Z, r24
						_delay_ms(20);
						LCD_voidWriteString((u8*)"Correct Password!");
    446c:	8c e0       	ldi	r24, 0x0C	; 12
    446e:	91 e0       	ldi	r25, 0x01	; 1
    4470:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
						*flag = 1;
    4474:	fe 01       	movw	r30, r28
    4476:	e9 59       	subi	r30, 0x99	; 153
    4478:	ff 4f       	sbci	r31, 0xFF	; 255
    447a:	01 90       	ld	r0, Z+
    447c:	f0 81       	ld	r31, Z
    447e:	e0 2d       	mov	r30, r0
    4480:	81 e0       	ldi	r24, 0x01	; 1
    4482:	80 83       	st	Z, r24
    4484:	4c c3       	rjmp	.+1688   	; 0x4b1e <login_system+0x8b2>
						break;
					}
					else
					{
						LCD_voidClearScreen();
    4486:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    448a:	fe 01       	movw	r30, r28
    448c:	ef 5a       	subi	r30, 0xAF	; 175
    448e:	ff 4f       	sbci	r31, 0xFF	; 255
    4490:	80 e0       	ldi	r24, 0x00	; 0
    4492:	90 e0       	ldi	r25, 0x00	; 0
    4494:	a0 ea       	ldi	r26, 0xA0	; 160
    4496:	b1 e4       	ldi	r27, 0x41	; 65
    4498:	80 83       	st	Z, r24
    449a:	91 83       	std	Z+1, r25	; 0x01
    449c:	a2 83       	std	Z+2, r26	; 0x02
    449e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44a0:	8e 01       	movw	r16, r28
    44a2:	03 5b       	subi	r16, 0xB3	; 179
    44a4:	1f 4f       	sbci	r17, 0xFF	; 255
    44a6:	fe 01       	movw	r30, r28
    44a8:	ef 5a       	subi	r30, 0xAF	; 175
    44aa:	ff 4f       	sbci	r31, 0xFF	; 255
    44ac:	60 81       	ld	r22, Z
    44ae:	71 81       	ldd	r23, Z+1	; 0x01
    44b0:	82 81       	ldd	r24, Z+2	; 0x02
    44b2:	93 81       	ldd	r25, Z+3	; 0x03
    44b4:	20 e0       	ldi	r18, 0x00	; 0
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	4a ef       	ldi	r20, 0xFA	; 250
    44ba:	54 e4       	ldi	r21, 0x44	; 68
    44bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	f8 01       	movw	r30, r16
    44c6:	80 83       	st	Z, r24
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	a2 83       	std	Z+2, r26	; 0x02
    44cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44ce:	fe 01       	movw	r30, r28
    44d0:	e3 5b       	subi	r30, 0xB3	; 179
    44d2:	ff 4f       	sbci	r31, 0xFF	; 255
    44d4:	60 81       	ld	r22, Z
    44d6:	71 81       	ldd	r23, Z+1	; 0x01
    44d8:	82 81       	ldd	r24, Z+2	; 0x02
    44da:	93 81       	ldd	r25, Z+3	; 0x03
    44dc:	20 e0       	ldi	r18, 0x00	; 0
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	40 e8       	ldi	r20, 0x80	; 128
    44e2:	5f e3       	ldi	r21, 0x3F	; 63
    44e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44e8:	88 23       	and	r24, r24
    44ea:	44 f4       	brge	.+16     	; 0x44fc <login_system+0x290>
		__ticks = 1;
    44ec:	fe 01       	movw	r30, r28
    44ee:	e5 5b       	subi	r30, 0xB5	; 181
    44f0:	ff 4f       	sbci	r31, 0xFF	; 255
    44f2:	81 e0       	ldi	r24, 0x01	; 1
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	91 83       	std	Z+1, r25	; 0x01
    44f8:	80 83       	st	Z, r24
    44fa:	64 c0       	rjmp	.+200    	; 0x45c4 <login_system+0x358>
	else if (__tmp > 65535)
    44fc:	fe 01       	movw	r30, r28
    44fe:	e3 5b       	subi	r30, 0xB3	; 179
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	60 81       	ld	r22, Z
    4504:	71 81       	ldd	r23, Z+1	; 0x01
    4506:	82 81       	ldd	r24, Z+2	; 0x02
    4508:	93 81       	ldd	r25, Z+3	; 0x03
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	3f ef       	ldi	r19, 0xFF	; 255
    450e:	4f e7       	ldi	r20, 0x7F	; 127
    4510:	57 e4       	ldi	r21, 0x47	; 71
    4512:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4516:	18 16       	cp	r1, r24
    4518:	0c f0       	brlt	.+2      	; 0x451c <login_system+0x2b0>
    451a:	43 c0       	rjmp	.+134    	; 0x45a2 <login_system+0x336>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    451c:	fe 01       	movw	r30, r28
    451e:	ef 5a       	subi	r30, 0xAF	; 175
    4520:	ff 4f       	sbci	r31, 0xFF	; 255
    4522:	60 81       	ld	r22, Z
    4524:	71 81       	ldd	r23, Z+1	; 0x01
    4526:	82 81       	ldd	r24, Z+2	; 0x02
    4528:	93 81       	ldd	r25, Z+3	; 0x03
    452a:	20 e0       	ldi	r18, 0x00	; 0
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	40 e2       	ldi	r20, 0x20	; 32
    4530:	51 e4       	ldi	r21, 0x41	; 65
    4532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4536:	dc 01       	movw	r26, r24
    4538:	cb 01       	movw	r24, r22
    453a:	8e 01       	movw	r16, r28
    453c:	05 5b       	subi	r16, 0xB5	; 181
    453e:	1f 4f       	sbci	r17, 0xFF	; 255
    4540:	bc 01       	movw	r22, r24
    4542:	cd 01       	movw	r24, r26
    4544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4548:	dc 01       	movw	r26, r24
    454a:	cb 01       	movw	r24, r22
    454c:	f8 01       	movw	r30, r16
    454e:	91 83       	std	Z+1, r25	; 0x01
    4550:	80 83       	st	Z, r24
    4552:	1f c0       	rjmp	.+62     	; 0x4592 <login_system+0x326>
    4554:	fe 01       	movw	r30, r28
    4556:	e7 5b       	subi	r30, 0xB7	; 183
    4558:	ff 4f       	sbci	r31, 0xFF	; 255
    455a:	88 ec       	ldi	r24, 0xC8	; 200
    455c:	90 e0       	ldi	r25, 0x00	; 0
    455e:	91 83       	std	Z+1, r25	; 0x01
    4560:	80 83       	st	Z, r24
    4562:	fe 01       	movw	r30, r28
    4564:	e7 5b       	subi	r30, 0xB7	; 183
    4566:	ff 4f       	sbci	r31, 0xFF	; 255
    4568:	80 81       	ld	r24, Z
    456a:	91 81       	ldd	r25, Z+1	; 0x01
    456c:	01 97       	sbiw	r24, 0x01	; 1
    456e:	f1 f7       	brne	.-4      	; 0x456c <login_system+0x300>
    4570:	fe 01       	movw	r30, r28
    4572:	e7 5b       	subi	r30, 0xB7	; 183
    4574:	ff 4f       	sbci	r31, 0xFF	; 255
    4576:	91 83       	std	Z+1, r25	; 0x01
    4578:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    457a:	de 01       	movw	r26, r28
    457c:	a5 5b       	subi	r26, 0xB5	; 181
    457e:	bf 4f       	sbci	r27, 0xFF	; 255
    4580:	fe 01       	movw	r30, r28
    4582:	e5 5b       	subi	r30, 0xB5	; 181
    4584:	ff 4f       	sbci	r31, 0xFF	; 255
    4586:	80 81       	ld	r24, Z
    4588:	91 81       	ldd	r25, Z+1	; 0x01
    458a:	01 97       	sbiw	r24, 0x01	; 1
    458c:	11 96       	adiw	r26, 0x01	; 1
    458e:	9c 93       	st	X, r25
    4590:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4592:	fe 01       	movw	r30, r28
    4594:	e5 5b       	subi	r30, 0xB5	; 181
    4596:	ff 4f       	sbci	r31, 0xFF	; 255
    4598:	80 81       	ld	r24, Z
    459a:	91 81       	ldd	r25, Z+1	; 0x01
    459c:	00 97       	sbiw	r24, 0x00	; 0
    459e:	d1 f6       	brne	.-76     	; 0x4554 <login_system+0x2e8>
    45a0:	27 c0       	rjmp	.+78     	; 0x45f0 <login_system+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45a2:	8e 01       	movw	r16, r28
    45a4:	05 5b       	subi	r16, 0xB5	; 181
    45a6:	1f 4f       	sbci	r17, 0xFF	; 255
    45a8:	fe 01       	movw	r30, r28
    45aa:	e3 5b       	subi	r30, 0xB3	; 179
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	60 81       	ld	r22, Z
    45b0:	71 81       	ldd	r23, Z+1	; 0x01
    45b2:	82 81       	ldd	r24, Z+2	; 0x02
    45b4:	93 81       	ldd	r25, Z+3	; 0x03
    45b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ba:	dc 01       	movw	r26, r24
    45bc:	cb 01       	movw	r24, r22
    45be:	f8 01       	movw	r30, r16
    45c0:	91 83       	std	Z+1, r25	; 0x01
    45c2:	80 83       	st	Z, r24
    45c4:	de 01       	movw	r26, r28
    45c6:	a9 5b       	subi	r26, 0xB9	; 185
    45c8:	bf 4f       	sbci	r27, 0xFF	; 255
    45ca:	fe 01       	movw	r30, r28
    45cc:	e5 5b       	subi	r30, 0xB5	; 181
    45ce:	ff 4f       	sbci	r31, 0xFF	; 255
    45d0:	80 81       	ld	r24, Z
    45d2:	91 81       	ldd	r25, Z+1	; 0x01
    45d4:	8d 93       	st	X+, r24
    45d6:	9c 93       	st	X, r25
    45d8:	fe 01       	movw	r30, r28
    45da:	e9 5b       	subi	r30, 0xB9	; 185
    45dc:	ff 4f       	sbci	r31, 0xFF	; 255
    45de:	80 81       	ld	r24, Z
    45e0:	91 81       	ldd	r25, Z+1	; 0x01
    45e2:	01 97       	sbiw	r24, 0x01	; 1
    45e4:	f1 f7       	brne	.-4      	; 0x45e2 <login_system+0x376>
    45e6:	fe 01       	movw	r30, r28
    45e8:	e9 5b       	subi	r30, 0xB9	; 185
    45ea:	ff 4f       	sbci	r31, 0xFF	; 255
    45ec:	91 83       	std	Z+1, r25	; 0x01
    45ee:	80 83       	st	Z, r24
						_delay_ms(20);
						LCD_voidWriteString((u8*)"Wrong Password!");
    45f0:	8e e1       	ldi	r24, 0x1E	; 30
    45f2:	91 e0       	ldi	r25, 0x01	; 1
    45f4:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
    45f8:	fe 01       	movw	r30, r28
    45fa:	ed 5b       	subi	r30, 0xBD	; 189
    45fc:	ff 4f       	sbci	r31, 0xFF	; 255
    45fe:	80 e0       	ldi	r24, 0x00	; 0
    4600:	90 e0       	ldi	r25, 0x00	; 0
    4602:	aa e7       	ldi	r26, 0x7A	; 122
    4604:	b4 e4       	ldi	r27, 0x44	; 68
    4606:	80 83       	st	Z, r24
    4608:	91 83       	std	Z+1, r25	; 0x01
    460a:	a2 83       	std	Z+2, r26	; 0x02
    460c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    460e:	8e 01       	movw	r16, r28
    4610:	01 5c       	subi	r16, 0xC1	; 193
    4612:	1f 4f       	sbci	r17, 0xFF	; 255
    4614:	fe 01       	movw	r30, r28
    4616:	ed 5b       	subi	r30, 0xBD	; 189
    4618:	ff 4f       	sbci	r31, 0xFF	; 255
    461a:	60 81       	ld	r22, Z
    461c:	71 81       	ldd	r23, Z+1	; 0x01
    461e:	82 81       	ldd	r24, Z+2	; 0x02
    4620:	93 81       	ldd	r25, Z+3	; 0x03
    4622:	20 e0       	ldi	r18, 0x00	; 0
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	4a ef       	ldi	r20, 0xFA	; 250
    4628:	54 e4       	ldi	r21, 0x44	; 68
    462a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462e:	dc 01       	movw	r26, r24
    4630:	cb 01       	movw	r24, r22
    4632:	f8 01       	movw	r30, r16
    4634:	80 83       	st	Z, r24
    4636:	91 83       	std	Z+1, r25	; 0x01
    4638:	a2 83       	std	Z+2, r26	; 0x02
    463a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    463c:	fe 01       	movw	r30, r28
    463e:	ff 96       	adiw	r30, 0x3f	; 63
    4640:	60 81       	ld	r22, Z
    4642:	71 81       	ldd	r23, Z+1	; 0x01
    4644:	82 81       	ldd	r24, Z+2	; 0x02
    4646:	93 81       	ldd	r25, Z+3	; 0x03
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e8       	ldi	r20, 0x80	; 128
    464e:	5f e3       	ldi	r21, 0x3F	; 63
    4650:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4654:	88 23       	and	r24, r24
    4656:	2c f4       	brge	.+10     	; 0x4662 <login_system+0x3f6>
		__ticks = 1;
    4658:	81 e0       	ldi	r24, 0x01	; 1
    465a:	90 e0       	ldi	r25, 0x00	; 0
    465c:	9e af       	std	Y+62, r25	; 0x3e
    465e:	8d af       	std	Y+61, r24	; 0x3d
    4660:	46 c0       	rjmp	.+140    	; 0x46ee <login_system+0x482>
	else if (__tmp > 65535)
    4662:	fe 01       	movw	r30, r28
    4664:	ff 96       	adiw	r30, 0x3f	; 63
    4666:	60 81       	ld	r22, Z
    4668:	71 81       	ldd	r23, Z+1	; 0x01
    466a:	82 81       	ldd	r24, Z+2	; 0x02
    466c:	93 81       	ldd	r25, Z+3	; 0x03
    466e:	20 e0       	ldi	r18, 0x00	; 0
    4670:	3f ef       	ldi	r19, 0xFF	; 255
    4672:	4f e7       	ldi	r20, 0x7F	; 127
    4674:	57 e4       	ldi	r21, 0x47	; 71
    4676:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    467a:	18 16       	cp	r1, r24
    467c:	64 f5       	brge	.+88     	; 0x46d6 <login_system+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    467e:	fe 01       	movw	r30, r28
    4680:	ed 5b       	subi	r30, 0xBD	; 189
    4682:	ff 4f       	sbci	r31, 0xFF	; 255
    4684:	60 81       	ld	r22, Z
    4686:	71 81       	ldd	r23, Z+1	; 0x01
    4688:	82 81       	ldd	r24, Z+2	; 0x02
    468a:	93 81       	ldd	r25, Z+3	; 0x03
    468c:	20 e0       	ldi	r18, 0x00	; 0
    468e:	30 e0       	ldi	r19, 0x00	; 0
    4690:	40 e2       	ldi	r20, 0x20	; 32
    4692:	51 e4       	ldi	r21, 0x41	; 65
    4694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4698:	dc 01       	movw	r26, r24
    469a:	cb 01       	movw	r24, r22
    469c:	bc 01       	movw	r22, r24
    469e:	cd 01       	movw	r24, r26
    46a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46a4:	dc 01       	movw	r26, r24
    46a6:	cb 01       	movw	r24, r22
    46a8:	9e af       	std	Y+62, r25	; 0x3e
    46aa:	8d af       	std	Y+61, r24	; 0x3d
    46ac:	0f c0       	rjmp	.+30     	; 0x46cc <login_system+0x460>
    46ae:	88 ec       	ldi	r24, 0xC8	; 200
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	9c af       	std	Y+60, r25	; 0x3c
    46b4:	8b af       	std	Y+59, r24	; 0x3b
    46b6:	8b ad       	ldd	r24, Y+59	; 0x3b
    46b8:	9c ad       	ldd	r25, Y+60	; 0x3c
    46ba:	01 97       	sbiw	r24, 0x01	; 1
    46bc:	f1 f7       	brne	.-4      	; 0x46ba <login_system+0x44e>
    46be:	9c af       	std	Y+60, r25	; 0x3c
    46c0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    46c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    46c6:	01 97       	sbiw	r24, 0x01	; 1
    46c8:	9e af       	std	Y+62, r25	; 0x3e
    46ca:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    46ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    46d0:	00 97       	sbiw	r24, 0x00	; 0
    46d2:	69 f7       	brne	.-38     	; 0x46ae <login_system+0x442>
    46d4:	16 c0       	rjmp	.+44     	; 0x4702 <login_system+0x496>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46d6:	fe 01       	movw	r30, r28
    46d8:	ff 96       	adiw	r30, 0x3f	; 63
    46da:	60 81       	ld	r22, Z
    46dc:	71 81       	ldd	r23, Z+1	; 0x01
    46de:	82 81       	ldd	r24, Z+2	; 0x02
    46e0:	93 81       	ldd	r25, Z+3	; 0x03
    46e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46e6:	dc 01       	movw	r26, r24
    46e8:	cb 01       	movw	r24, r22
    46ea:	9e af       	std	Y+62, r25	; 0x3e
    46ec:	8d af       	std	Y+61, r24	; 0x3d
    46ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    46f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    46f2:	9a af       	std	Y+58, r25	; 0x3a
    46f4:	89 af       	std	Y+57, r24	; 0x39
    46f6:	89 ad       	ldd	r24, Y+57	; 0x39
    46f8:	9a ad       	ldd	r25, Y+58	; 0x3a
    46fa:	01 97       	sbiw	r24, 0x01	; 1
    46fc:	f1 f7       	brne	.-4      	; 0x46fa <login_system+0x48e>
    46fe:	9a af       	std	Y+58, r25	; 0x3a
    4700:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(1000);
						if(trials < 2) // display try again for twice only
    4702:	80 91 a6 02 	lds	r24, 0x02A6
    4706:	82 30       	cpi	r24, 0x02	; 2
    4708:	08 f0       	brcs	.+2      	; 0x470c <login_system+0x4a0>
    470a:	ea c0       	rjmp	.+468    	; 0x48e0 <login_system+0x674>
						{
							LCD_voidClearScreen();
    470c:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    4710:	80 e0       	ldi	r24, 0x00	; 0
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	a0 ea       	ldi	r26, 0xA0	; 160
    4716:	b1 e4       	ldi	r27, 0x41	; 65
    4718:	8d ab       	std	Y+53, r24	; 0x35
    471a:	9e ab       	std	Y+54, r25	; 0x36
    471c:	af ab       	std	Y+55, r26	; 0x37
    471e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4720:	6d a9       	ldd	r22, Y+53	; 0x35
    4722:	7e a9       	ldd	r23, Y+54	; 0x36
    4724:	8f a9       	ldd	r24, Y+55	; 0x37
    4726:	98 ad       	ldd	r25, Y+56	; 0x38
    4728:	20 e0       	ldi	r18, 0x00	; 0
    472a:	30 e0       	ldi	r19, 0x00	; 0
    472c:	4a ef       	ldi	r20, 0xFA	; 250
    472e:	54 e4       	ldi	r21, 0x44	; 68
    4730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4734:	dc 01       	movw	r26, r24
    4736:	cb 01       	movw	r24, r22
    4738:	89 ab       	std	Y+49, r24	; 0x31
    473a:	9a ab       	std	Y+50, r25	; 0x32
    473c:	ab ab       	std	Y+51, r26	; 0x33
    473e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4740:	69 a9       	ldd	r22, Y+49	; 0x31
    4742:	7a a9       	ldd	r23, Y+50	; 0x32
    4744:	8b a9       	ldd	r24, Y+51	; 0x33
    4746:	9c a9       	ldd	r25, Y+52	; 0x34
    4748:	20 e0       	ldi	r18, 0x00	; 0
    474a:	30 e0       	ldi	r19, 0x00	; 0
    474c:	40 e8       	ldi	r20, 0x80	; 128
    474e:	5f e3       	ldi	r21, 0x3F	; 63
    4750:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4754:	88 23       	and	r24, r24
    4756:	2c f4       	brge	.+10     	; 0x4762 <login_system+0x4f6>
		__ticks = 1;
    4758:	81 e0       	ldi	r24, 0x01	; 1
    475a:	90 e0       	ldi	r25, 0x00	; 0
    475c:	98 ab       	std	Y+48, r25	; 0x30
    475e:	8f a7       	std	Y+47, r24	; 0x2f
    4760:	3f c0       	rjmp	.+126    	; 0x47e0 <login_system+0x574>
	else if (__tmp > 65535)
    4762:	69 a9       	ldd	r22, Y+49	; 0x31
    4764:	7a a9       	ldd	r23, Y+50	; 0x32
    4766:	8b a9       	ldd	r24, Y+51	; 0x33
    4768:	9c a9       	ldd	r25, Y+52	; 0x34
    476a:	20 e0       	ldi	r18, 0x00	; 0
    476c:	3f ef       	ldi	r19, 0xFF	; 255
    476e:	4f e7       	ldi	r20, 0x7F	; 127
    4770:	57 e4       	ldi	r21, 0x47	; 71
    4772:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4776:	18 16       	cp	r1, r24
    4778:	4c f5       	brge	.+82     	; 0x47cc <login_system+0x560>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    477a:	6d a9       	ldd	r22, Y+53	; 0x35
    477c:	7e a9       	ldd	r23, Y+54	; 0x36
    477e:	8f a9       	ldd	r24, Y+55	; 0x37
    4780:	98 ad       	ldd	r25, Y+56	; 0x38
    4782:	20 e0       	ldi	r18, 0x00	; 0
    4784:	30 e0       	ldi	r19, 0x00	; 0
    4786:	40 e2       	ldi	r20, 0x20	; 32
    4788:	51 e4       	ldi	r21, 0x41	; 65
    478a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	bc 01       	movw	r22, r24
    4794:	cd 01       	movw	r24, r26
    4796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	98 ab       	std	Y+48, r25	; 0x30
    47a0:	8f a7       	std	Y+47, r24	; 0x2f
    47a2:	0f c0       	rjmp	.+30     	; 0x47c2 <login_system+0x556>
    47a4:	88 ec       	ldi	r24, 0xC8	; 200
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	9e a7       	std	Y+46, r25	; 0x2e
    47aa:	8d a7       	std	Y+45, r24	; 0x2d
    47ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    47ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    47b0:	01 97       	sbiw	r24, 0x01	; 1
    47b2:	f1 f7       	brne	.-4      	; 0x47b0 <login_system+0x544>
    47b4:	9e a7       	std	Y+46, r25	; 0x2e
    47b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    47ba:	98 a9       	ldd	r25, Y+48	; 0x30
    47bc:	01 97       	sbiw	r24, 0x01	; 1
    47be:	98 ab       	std	Y+48, r25	; 0x30
    47c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    47c4:	98 a9       	ldd	r25, Y+48	; 0x30
    47c6:	00 97       	sbiw	r24, 0x00	; 0
    47c8:	69 f7       	brne	.-38     	; 0x47a4 <login_system+0x538>
    47ca:	14 c0       	rjmp	.+40     	; 0x47f4 <login_system+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47cc:	69 a9       	ldd	r22, Y+49	; 0x31
    47ce:	7a a9       	ldd	r23, Y+50	; 0x32
    47d0:	8b a9       	ldd	r24, Y+51	; 0x33
    47d2:	9c a9       	ldd	r25, Y+52	; 0x34
    47d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d8:	dc 01       	movw	r26, r24
    47da:	cb 01       	movw	r24, r22
    47dc:	98 ab       	std	Y+48, r25	; 0x30
    47de:	8f a7       	std	Y+47, r24	; 0x2f
    47e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    47e2:	98 a9       	ldd	r25, Y+48	; 0x30
    47e4:	9c a7       	std	Y+44, r25	; 0x2c
    47e6:	8b a7       	std	Y+43, r24	; 0x2b
    47e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    47ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    47ec:	01 97       	sbiw	r24, 0x01	; 1
    47ee:	f1 f7       	brne	.-4      	; 0x47ec <login_system+0x580>
    47f0:	9c a7       	std	Y+44, r25	; 0x2c
    47f2:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(20);
							LCD_voidWriteString((u8*)"Try Again!");
    47f4:	8e e2       	ldi	r24, 0x2E	; 46
    47f6:	91 e0       	ldi	r25, 0x01	; 1
    47f8:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	aa e7       	ldi	r26, 0x7A	; 122
    4802:	b4 e4       	ldi	r27, 0x44	; 68
    4804:	8f a3       	std	Y+39, r24	; 0x27
    4806:	98 a7       	std	Y+40, r25	; 0x28
    4808:	a9 a7       	std	Y+41, r26	; 0x29
    480a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    480c:	6f a1       	ldd	r22, Y+39	; 0x27
    480e:	78 a5       	ldd	r23, Y+40	; 0x28
    4810:	89 a5       	ldd	r24, Y+41	; 0x29
    4812:	9a a5       	ldd	r25, Y+42	; 0x2a
    4814:	20 e0       	ldi	r18, 0x00	; 0
    4816:	30 e0       	ldi	r19, 0x00	; 0
    4818:	4a ef       	ldi	r20, 0xFA	; 250
    481a:	54 e4       	ldi	r21, 0x44	; 68
    481c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4820:	dc 01       	movw	r26, r24
    4822:	cb 01       	movw	r24, r22
    4824:	8b a3       	std	Y+35, r24	; 0x23
    4826:	9c a3       	std	Y+36, r25	; 0x24
    4828:	ad a3       	std	Y+37, r26	; 0x25
    482a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    482c:	6b a1       	ldd	r22, Y+35	; 0x23
    482e:	7c a1       	ldd	r23, Y+36	; 0x24
    4830:	8d a1       	ldd	r24, Y+37	; 0x25
    4832:	9e a1       	ldd	r25, Y+38	; 0x26
    4834:	20 e0       	ldi	r18, 0x00	; 0
    4836:	30 e0       	ldi	r19, 0x00	; 0
    4838:	40 e8       	ldi	r20, 0x80	; 128
    483a:	5f e3       	ldi	r21, 0x3F	; 63
    483c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4840:	88 23       	and	r24, r24
    4842:	2c f4       	brge	.+10     	; 0x484e <login_system+0x5e2>
		__ticks = 1;
    4844:	81 e0       	ldi	r24, 0x01	; 1
    4846:	90 e0       	ldi	r25, 0x00	; 0
    4848:	9a a3       	std	Y+34, r25	; 0x22
    484a:	89 a3       	std	Y+33, r24	; 0x21
    484c:	3f c0       	rjmp	.+126    	; 0x48cc <login_system+0x660>
	else if (__tmp > 65535)
    484e:	6b a1       	ldd	r22, Y+35	; 0x23
    4850:	7c a1       	ldd	r23, Y+36	; 0x24
    4852:	8d a1       	ldd	r24, Y+37	; 0x25
    4854:	9e a1       	ldd	r25, Y+38	; 0x26
    4856:	20 e0       	ldi	r18, 0x00	; 0
    4858:	3f ef       	ldi	r19, 0xFF	; 255
    485a:	4f e7       	ldi	r20, 0x7F	; 127
    485c:	57 e4       	ldi	r21, 0x47	; 71
    485e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4862:	18 16       	cp	r1, r24
    4864:	4c f5       	brge	.+82     	; 0x48b8 <login_system+0x64c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4866:	6f a1       	ldd	r22, Y+39	; 0x27
    4868:	78 a5       	ldd	r23, Y+40	; 0x28
    486a:	89 a5       	ldd	r24, Y+41	; 0x29
    486c:	9a a5       	ldd	r25, Y+42	; 0x2a
    486e:	20 e0       	ldi	r18, 0x00	; 0
    4870:	30 e0       	ldi	r19, 0x00	; 0
    4872:	40 e2       	ldi	r20, 0x20	; 32
    4874:	51 e4       	ldi	r21, 0x41	; 65
    4876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    487a:	dc 01       	movw	r26, r24
    487c:	cb 01       	movw	r24, r22
    487e:	bc 01       	movw	r22, r24
    4880:	cd 01       	movw	r24, r26
    4882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4886:	dc 01       	movw	r26, r24
    4888:	cb 01       	movw	r24, r22
    488a:	9a a3       	std	Y+34, r25	; 0x22
    488c:	89 a3       	std	Y+33, r24	; 0x21
    488e:	0f c0       	rjmp	.+30     	; 0x48ae <login_system+0x642>
    4890:	88 ec       	ldi	r24, 0xC8	; 200
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	98 a3       	std	Y+32, r25	; 0x20
    4896:	8f 8f       	std	Y+31, r24	; 0x1f
    4898:	8f 8d       	ldd	r24, Y+31	; 0x1f
    489a:	98 a1       	ldd	r25, Y+32	; 0x20
    489c:	01 97       	sbiw	r24, 0x01	; 1
    489e:	f1 f7       	brne	.-4      	; 0x489c <login_system+0x630>
    48a0:	98 a3       	std	Y+32, r25	; 0x20
    48a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48a4:	89 a1       	ldd	r24, Y+33	; 0x21
    48a6:	9a a1       	ldd	r25, Y+34	; 0x22
    48a8:	01 97       	sbiw	r24, 0x01	; 1
    48aa:	9a a3       	std	Y+34, r25	; 0x22
    48ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48ae:	89 a1       	ldd	r24, Y+33	; 0x21
    48b0:	9a a1       	ldd	r25, Y+34	; 0x22
    48b2:	00 97       	sbiw	r24, 0x00	; 0
    48b4:	69 f7       	brne	.-38     	; 0x4890 <login_system+0x624>
    48b6:	14 c0       	rjmp	.+40     	; 0x48e0 <login_system+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48b8:	6b a1       	ldd	r22, Y+35	; 0x23
    48ba:	7c a1       	ldd	r23, Y+36	; 0x24
    48bc:	8d a1       	ldd	r24, Y+37	; 0x25
    48be:	9e a1       	ldd	r25, Y+38	; 0x26
    48c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48c4:	dc 01       	movw	r26, r24
    48c6:	cb 01       	movw	r24, r22
    48c8:	9a a3       	std	Y+34, r25	; 0x22
    48ca:	89 a3       	std	Y+33, r24	; 0x21
    48cc:	89 a1       	ldd	r24, Y+33	; 0x21
    48ce:	9a a1       	ldd	r25, Y+34	; 0x22
    48d0:	9e 8f       	std	Y+30, r25	; 0x1e
    48d2:	8d 8f       	std	Y+29, r24	; 0x1d
    48d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    48d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    48d8:	01 97       	sbiw	r24, 0x01	; 1
    48da:	f1 f7       	brne	.-4      	; 0x48d8 <login_system+0x66c>
    48dc:	9e 8f       	std	Y+30, r25	; 0x1e
    48de:	8d 8f       	std	Y+29, r24	; 0x1d
							_delay_ms(1000);
						}
						trials++;
    48e0:	80 91 a6 02 	lds	r24, 0x02A6
    48e4:	8f 5f       	subi	r24, 0xFF	; 255
    48e6:	80 93 a6 02 	sts	0x02A6, r24
						Local_u8Index = 0;
    48ea:	10 92 9f 02 	sts	0x029F, r1
						ClearBuffer(Local_Au8InputBuffer,5);
    48ee:	80 ea       	ldi	r24, 0xA0	; 160
    48f0:	92 e0       	ldi	r25, 0x02	; 2
    48f2:	65 e0       	ldi	r22, 0x05	; 5
    48f4:	0e 94 c2 20 	call	0x4184	; 0x4184 <ClearBuffer>
						if(trials <= 2) // For Last trial that will not display try again
    48f8:	80 91 a6 02 	lds	r24, 0x02A6
    48fc:	83 30       	cpi	r24, 0x03	; 3
    48fe:	08 f0       	brcs	.+2      	; 0x4902 <login_system+0x696>
    4900:	d4 cc       	rjmp	.-1624   	; 0x42aa <login_system+0x3e>
						{
							LCD_voidClearScreen();
    4902:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    4906:	80 e0       	ldi	r24, 0x00	; 0
    4908:	90 e0       	ldi	r25, 0x00	; 0
    490a:	a0 ea       	ldi	r26, 0xA0	; 160
    490c:	b1 e4       	ldi	r27, 0x41	; 65
    490e:	89 8f       	std	Y+25, r24	; 0x19
    4910:	9a 8f       	std	Y+26, r25	; 0x1a
    4912:	ab 8f       	std	Y+27, r26	; 0x1b
    4914:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4916:	69 8d       	ldd	r22, Y+25	; 0x19
    4918:	7a 8d       	ldd	r23, Y+26	; 0x1a
    491a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    491c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    491e:	20 e0       	ldi	r18, 0x00	; 0
    4920:	30 e0       	ldi	r19, 0x00	; 0
    4922:	4a ef       	ldi	r20, 0xFA	; 250
    4924:	54 e4       	ldi	r21, 0x44	; 68
    4926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    492a:	dc 01       	movw	r26, r24
    492c:	cb 01       	movw	r24, r22
    492e:	8d 8b       	std	Y+21, r24	; 0x15
    4930:	9e 8b       	std	Y+22, r25	; 0x16
    4932:	af 8b       	std	Y+23, r26	; 0x17
    4934:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4936:	6d 89       	ldd	r22, Y+21	; 0x15
    4938:	7e 89       	ldd	r23, Y+22	; 0x16
    493a:	8f 89       	ldd	r24, Y+23	; 0x17
    493c:	98 8d       	ldd	r25, Y+24	; 0x18
    493e:	20 e0       	ldi	r18, 0x00	; 0
    4940:	30 e0       	ldi	r19, 0x00	; 0
    4942:	40 e8       	ldi	r20, 0x80	; 128
    4944:	5f e3       	ldi	r21, 0x3F	; 63
    4946:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    494a:	88 23       	and	r24, r24
    494c:	2c f4       	brge	.+10     	; 0x4958 <login_system+0x6ec>
		__ticks = 1;
    494e:	81 e0       	ldi	r24, 0x01	; 1
    4950:	90 e0       	ldi	r25, 0x00	; 0
    4952:	9c 8b       	std	Y+20, r25	; 0x14
    4954:	8b 8b       	std	Y+19, r24	; 0x13
    4956:	3f c0       	rjmp	.+126    	; 0x49d6 <login_system+0x76a>
	else if (__tmp > 65535)
    4958:	6d 89       	ldd	r22, Y+21	; 0x15
    495a:	7e 89       	ldd	r23, Y+22	; 0x16
    495c:	8f 89       	ldd	r24, Y+23	; 0x17
    495e:	98 8d       	ldd	r25, Y+24	; 0x18
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	3f ef       	ldi	r19, 0xFF	; 255
    4964:	4f e7       	ldi	r20, 0x7F	; 127
    4966:	57 e4       	ldi	r21, 0x47	; 71
    4968:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    496c:	18 16       	cp	r1, r24
    496e:	4c f5       	brge	.+82     	; 0x49c2 <login_system+0x756>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4970:	69 8d       	ldd	r22, Y+25	; 0x19
    4972:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4974:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4976:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4978:	20 e0       	ldi	r18, 0x00	; 0
    497a:	30 e0       	ldi	r19, 0x00	; 0
    497c:	40 e2       	ldi	r20, 0x20	; 32
    497e:	51 e4       	ldi	r21, 0x41	; 65
    4980:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4984:	dc 01       	movw	r26, r24
    4986:	cb 01       	movw	r24, r22
    4988:	bc 01       	movw	r22, r24
    498a:	cd 01       	movw	r24, r26
    498c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4990:	dc 01       	movw	r26, r24
    4992:	cb 01       	movw	r24, r22
    4994:	9c 8b       	std	Y+20, r25	; 0x14
    4996:	8b 8b       	std	Y+19, r24	; 0x13
    4998:	0f c0       	rjmp	.+30     	; 0x49b8 <login_system+0x74c>
    499a:	88 ec       	ldi	r24, 0xC8	; 200
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	9a 8b       	std	Y+18, r25	; 0x12
    49a0:	89 8b       	std	Y+17, r24	; 0x11
    49a2:	89 89       	ldd	r24, Y+17	; 0x11
    49a4:	9a 89       	ldd	r25, Y+18	; 0x12
    49a6:	01 97       	sbiw	r24, 0x01	; 1
    49a8:	f1 f7       	brne	.-4      	; 0x49a6 <login_system+0x73a>
    49aa:	9a 8b       	std	Y+18, r25	; 0x12
    49ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    49ae:	8b 89       	ldd	r24, Y+19	; 0x13
    49b0:	9c 89       	ldd	r25, Y+20	; 0x14
    49b2:	01 97       	sbiw	r24, 0x01	; 1
    49b4:	9c 8b       	std	Y+20, r25	; 0x14
    49b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49b8:	8b 89       	ldd	r24, Y+19	; 0x13
    49ba:	9c 89       	ldd	r25, Y+20	; 0x14
    49bc:	00 97       	sbiw	r24, 0x00	; 0
    49be:	69 f7       	brne	.-38     	; 0x499a <login_system+0x72e>
    49c0:	14 c0       	rjmp	.+40     	; 0x49ea <login_system+0x77e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49c2:	6d 89       	ldd	r22, Y+21	; 0x15
    49c4:	7e 89       	ldd	r23, Y+22	; 0x16
    49c6:	8f 89       	ldd	r24, Y+23	; 0x17
    49c8:	98 8d       	ldd	r25, Y+24	; 0x18
    49ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49ce:	dc 01       	movw	r26, r24
    49d0:	cb 01       	movw	r24, r22
    49d2:	9c 8b       	std	Y+20, r25	; 0x14
    49d4:	8b 8b       	std	Y+19, r24	; 0x13
    49d6:	8b 89       	ldd	r24, Y+19	; 0x13
    49d8:	9c 89       	ldd	r25, Y+20	; 0x14
    49da:	98 8b       	std	Y+16, r25	; 0x10
    49dc:	8f 87       	std	Y+15, r24	; 0x0f
    49de:	8f 85       	ldd	r24, Y+15	; 0x0f
    49e0:	98 89       	ldd	r25, Y+16	; 0x10
    49e2:	01 97       	sbiw	r24, 0x01	; 1
    49e4:	f1 f7       	brne	.-4      	; 0x49e2 <login_system+0x776>
    49e6:	98 8b       	std	Y+16, r25	; 0x10
    49e8:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(20);
							LCD_voidWriteString((u8*)"Enter Password: ");
    49ea:	8b ef       	ldi	r24, 0xFB	; 251
    49ec:	90 e0       	ldi	r25, 0x00	; 0
    49ee:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
							LCD_u8GoToXY(LCD_u8_LINE2,0);
    49f2:	82 e0       	ldi	r24, 0x02	; 2
    49f4:	60 e0       	ldi	r22, 0x00	; 0
    49f6:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
    49fa:	57 cc       	rjmp	.-1874   	; 0x42aa <login_system+0x3e>
						}
					}
				}
				else  // If pressed key is a number or operator
				{
					appenedToBuffer(Local_Au8InputBuffer,Local_u8Key); // Append pressed key to buffer
    49fc:	fe 01       	movw	r30, r28
    49fe:	ed 59       	subi	r30, 0x9D	; 157
    4a00:	ff 4f       	sbci	r31, 0xFF	; 255
    4a02:	20 81       	ld	r18, Z
    4a04:	80 ea       	ldi	r24, 0xA0	; 160
    4a06:	92 e0       	ldi	r25, 0x02	; 2
    4a08:	62 2f       	mov	r22, r18
    4a0a:	0e 94 95 20 	call	0x412a	; 0x412a <appenedToBuffer>
					LCD_voidSendChar('*'); // Display pressed key on LCD
    4a0e:	8a e2       	ldi	r24, 0x2A	; 42
    4a10:	0e 94 22 1b 	call	0x3644	; 0x3644 <LCD_voidSendChar>
    4a14:	4a cc       	rjmp	.-1900   	; 0x42aa <login_system+0x3e>
				}
			}
		}
		else if ( trials == 3) // to make sure this won't execute the else before trails run out
    4a16:	80 91 a6 02 	lds	r24, 0x02A6
    4a1a:	83 30       	cpi	r24, 0x03	; 3
    4a1c:	09 f0       	breq	.+2      	; 0x4a20 <login_system+0x7b4>
    4a1e:	45 cc       	rjmp	.-1910   	; 0x42aa <login_system+0x3e>
		{
			LCD_voidClearScreen();
    4a20:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    4a24:	80 e0       	ldi	r24, 0x00	; 0
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	a0 ea       	ldi	r26, 0xA0	; 160
    4a2a:	b1 e4       	ldi	r27, 0x41	; 65
    4a2c:	8b 87       	std	Y+11, r24	; 0x0b
    4a2e:	9c 87       	std	Y+12, r25	; 0x0c
    4a30:	ad 87       	std	Y+13, r26	; 0x0d
    4a32:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a34:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a36:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a38:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a3a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a3c:	20 e0       	ldi	r18, 0x00	; 0
    4a3e:	30 e0       	ldi	r19, 0x00	; 0
    4a40:	4a ef       	ldi	r20, 0xFA	; 250
    4a42:	54 e4       	ldi	r21, 0x44	; 68
    4a44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a48:	dc 01       	movw	r26, r24
    4a4a:	cb 01       	movw	r24, r22
    4a4c:	8f 83       	std	Y+7, r24	; 0x07
    4a4e:	98 87       	std	Y+8, r25	; 0x08
    4a50:	a9 87       	std	Y+9, r26	; 0x09
    4a52:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a54:	6f 81       	ldd	r22, Y+7	; 0x07
    4a56:	78 85       	ldd	r23, Y+8	; 0x08
    4a58:	89 85       	ldd	r24, Y+9	; 0x09
    4a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	40 e8       	ldi	r20, 0x80	; 128
    4a62:	5f e3       	ldi	r21, 0x3F	; 63
    4a64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4a68:	88 23       	and	r24, r24
    4a6a:	2c f4       	brge	.+10     	; 0x4a76 <login_system+0x80a>
		__ticks = 1;
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	90 e0       	ldi	r25, 0x00	; 0
    4a70:	9e 83       	std	Y+6, r25	; 0x06
    4a72:	8d 83       	std	Y+5, r24	; 0x05
    4a74:	3f c0       	rjmp	.+126    	; 0x4af4 <login_system+0x888>
	else if (__tmp > 65535)
    4a76:	6f 81       	ldd	r22, Y+7	; 0x07
    4a78:	78 85       	ldd	r23, Y+8	; 0x08
    4a7a:	89 85       	ldd	r24, Y+9	; 0x09
    4a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a7e:	20 e0       	ldi	r18, 0x00	; 0
    4a80:	3f ef       	ldi	r19, 0xFF	; 255
    4a82:	4f e7       	ldi	r20, 0x7F	; 127
    4a84:	57 e4       	ldi	r21, 0x47	; 71
    4a86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4a8a:	18 16       	cp	r1, r24
    4a8c:	4c f5       	brge	.+82     	; 0x4ae0 <login_system+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a8e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a90:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a92:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a94:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a96:	20 e0       	ldi	r18, 0x00	; 0
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	40 e2       	ldi	r20, 0x20	; 32
    4a9c:	51 e4       	ldi	r21, 0x41	; 65
    4a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa2:	dc 01       	movw	r26, r24
    4aa4:	cb 01       	movw	r24, r22
    4aa6:	bc 01       	movw	r22, r24
    4aa8:	cd 01       	movw	r24, r26
    4aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aae:	dc 01       	movw	r26, r24
    4ab0:	cb 01       	movw	r24, r22
    4ab2:	9e 83       	std	Y+6, r25	; 0x06
    4ab4:	8d 83       	std	Y+5, r24	; 0x05
    4ab6:	0f c0       	rjmp	.+30     	; 0x4ad6 <login_system+0x86a>
    4ab8:	88 ec       	ldi	r24, 0xC8	; 200
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	9c 83       	std	Y+4, r25	; 0x04
    4abe:	8b 83       	std	Y+3, r24	; 0x03
    4ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    4ac4:	01 97       	sbiw	r24, 0x01	; 1
    4ac6:	f1 f7       	brne	.-4      	; 0x4ac4 <login_system+0x858>
    4ac8:	9c 83       	std	Y+4, r25	; 0x04
    4aca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4acc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ace:	9e 81       	ldd	r25, Y+6	; 0x06
    4ad0:	01 97       	sbiw	r24, 0x01	; 1
    4ad2:	9e 83       	std	Y+6, r25	; 0x06
    4ad4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    4ada:	00 97       	sbiw	r24, 0x00	; 0
    4adc:	69 f7       	brne	.-38     	; 0x4ab8 <login_system+0x84c>
    4ade:	14 c0       	rjmp	.+40     	; 0x4b08 <login_system+0x89c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ae0:	6f 81       	ldd	r22, Y+7	; 0x07
    4ae2:	78 85       	ldd	r23, Y+8	; 0x08
    4ae4:	89 85       	ldd	r24, Y+9	; 0x09
    4ae6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4ae8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4aec:	dc 01       	movw	r26, r24
    4aee:	cb 01       	movw	r24, r22
    4af0:	9e 83       	std	Y+6, r25	; 0x06
    4af2:	8d 83       	std	Y+5, r24	; 0x05
    4af4:	8d 81       	ldd	r24, Y+5	; 0x05
    4af6:	9e 81       	ldd	r25, Y+6	; 0x06
    4af8:	9a 83       	std	Y+2, r25	; 0x02
    4afa:	89 83       	std	Y+1, r24	; 0x01
    4afc:	89 81       	ldd	r24, Y+1	; 0x01
    4afe:	9a 81       	ldd	r25, Y+2	; 0x02
    4b00:	01 97       	sbiw	r24, 0x01	; 1
    4b02:	f1 f7       	brne	.-4      	; 0x4b00 <login_system+0x894>
    4b04:	9a 83       	std	Y+2, r25	; 0x02
    4b06:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(20);
			LCD_voidWriteString((u8*)"Failed Login ");
    4b08:	89 e3       	ldi	r24, 0x39	; 57
    4b0a:	91 e0       	ldi	r25, 0x01	; 1
    4b0c:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
			*flag = 0;
    4b10:	fe 01       	movw	r30, r28
    4b12:	e9 59       	subi	r30, 0x99	; 153
    4b14:	ff 4f       	sbci	r31, 0xFF	; 255
    4b16:	01 90       	ld	r0, Z+
    4b18:	f0 81       	ld	r31, Z
    4b1a:	e0 2d       	mov	r30, r0
    4b1c:	10 82       	st	Z, r1
			break;
		}
	}
}
    4b1e:	c8 59       	subi	r28, 0x98	; 152
    4b20:	df 4f       	sbci	r29, 0xFF	; 255
    4b22:	0f b6       	in	r0, 0x3f	; 63
    4b24:	f8 94       	cli
    4b26:	de bf       	out	0x3e, r29	; 62
    4b28:	0f be       	out	0x3f, r0	; 63
    4b2a:	cd bf       	out	0x3d, r28	; 61
    4b2c:	cf 91       	pop	r28
    4b2e:	df 91       	pop	r29
    4b30:	1f 91       	pop	r17
    4b32:	0f 91       	pop	r16
    4b34:	08 95       	ret

00004b36 <SERVO_voidInit>:
#include "SERVO_config.h"
#include "SERVO_private.h"


void SERVO_voidInit(void)
{
    4b36:	df 93       	push	r29
    4b38:	cf 93       	push	r28
    4b3a:	cd b7       	in	r28, 0x3d	; 61
    4b3c:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    4b3e:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <TIMERS_voidTimer1Init>
}
    4b42:	cf 91       	pop	r28
    4b44:	df 91       	pop	r29
    4b46:	08 95       	ret

00004b48 <SERVO_voidRotate>:
void SERVO_voidRotate(u8 Copy_u8Angle)
{
    4b48:	df 93       	push	r29
    4b4a:	cf 93       	push	r28
    4b4c:	00 d0       	rcall	.+0      	; 0x4b4e <SERVO_voidRotate+0x6>
    4b4e:	0f 92       	push	r0
    4b50:	cd b7       	in	r28, 0x3d	; 61
    4b52:	de b7       	in	r29, 0x3e	; 62
    4b54:	8b 83       	std	Y+3, r24	; 0x03
	u16 OCRValue;
	OCRValue = 999 + ceil((f64)(Copy_u8Angle * (1000.0/180.0)));
    4b56:	8b 81       	ldd	r24, Y+3	; 0x03
    4b58:	88 2f       	mov	r24, r24
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	aa 27       	eor	r26, r26
    4b5e:	97 fd       	sbrc	r25, 7
    4b60:	a0 95       	com	r26
    4b62:	ba 2f       	mov	r27, r26
    4b64:	bc 01       	movw	r22, r24
    4b66:	cd 01       	movw	r24, r26
    4b68:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    4b6c:	dc 01       	movw	r26, r24
    4b6e:	cb 01       	movw	r24, r22
    4b70:	bc 01       	movw	r22, r24
    4b72:	cd 01       	movw	r24, r26
    4b74:	2c e1       	ldi	r18, 0x1C	; 28
    4b76:	37 ec       	ldi	r19, 0xC7	; 199
    4b78:	41 eb       	ldi	r20, 0xB1	; 177
    4b7a:	50 e4       	ldi	r21, 0x40	; 64
    4b7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b80:	dc 01       	movw	r26, r24
    4b82:	cb 01       	movw	r24, r22
    4b84:	bc 01       	movw	r22, r24
    4b86:	cd 01       	movw	r24, r26
    4b88:	0e 94 e9 32 	call	0x65d2	; 0x65d2 <ceil>
    4b8c:	dc 01       	movw	r26, r24
    4b8e:	cb 01       	movw	r24, r22
    4b90:	bc 01       	movw	r22, r24
    4b92:	cd 01       	movw	r24, r26
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 ec       	ldi	r19, 0xC0	; 192
    4b98:	49 e7       	ldi	r20, 0x79	; 121
    4b9a:	54 e4       	ldi	r21, 0x44	; 68
    4b9c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	bc 01       	movw	r22, r24
    4ba6:	cd 01       	movw	r24, r26
    4ba8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	9a 83       	std	Y+2, r25	; 0x02
    4bb2:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTimer1SetCompareMatchValueUnitA(OCRValue);
    4bb4:	89 81       	ldd	r24, Y+1	; 0x01
    4bb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bb8:	0e 94 36 2c 	call	0x586c	; 0x586c <TIMERS_voidTimer1SetCompareMatchValueUnitA>
}
    4bbc:	0f 90       	pop	r0
    4bbe:	0f 90       	pop	r0
    4bc0:	0f 90       	pop	r0
    4bc2:	cf 91       	pop	r28
    4bc4:	df 91       	pop	r29
    4bc6:	08 95       	ret

00004bc8 <STEPPER_u8Move>:
#include "STEPPER_interface.h"
#include "STEPPER_config.h"
#include "STEPPER_private.h"

u8 STEPPER_u8Move(u8 direction , u16 angle) // two phase excitation
{
    4bc8:	0f 93       	push	r16
    4bca:	1f 93       	push	r17
    4bcc:	df 93       	push	r29
    4bce:	cf 93       	push	r28
    4bd0:	cd b7       	in	r28, 0x3d	; 61
    4bd2:	de b7       	in	r29, 0x3e	; 62
    4bd4:	c9 57       	subi	r28, 0x79	; 121
    4bd6:	d0 40       	sbci	r29, 0x00	; 0
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	f8 94       	cli
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	0f be       	out	0x3f, r0	; 63
    4be0:	cd bf       	out	0x3d, r28	; 61
    4be2:	fe 01       	movw	r30, r28
    4be4:	e9 58       	subi	r30, 0x89	; 137
    4be6:	ff 4f       	sbci	r31, 0xFF	; 255
    4be8:	80 83       	st	Z, r24
    4bea:	fe 01       	movw	r30, r28
    4bec:	e8 58       	subi	r30, 0x88	; 136
    4bee:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf0:	71 83       	std	Z+1, r23	; 0x01
    4bf2:	60 83       	st	Z, r22
	u8 Local_u8ErrorState = STD_TYPES_OK;
    4bf4:	fe 01       	movw	r30, r28
    4bf6:	ea 58       	subi	r30, 0x8A	; 138
    4bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    4bfa:	81 e0       	ldi	r24, 0x01	; 1
    4bfc:	80 83       	st	Z, r24
	// Step Angle = 0.5 deg so No of steps for full step = 360/0.5 = 720
	u32 Local_u8NoOfiterations = (((u32) angle * 720) / (360 * 4)) ; // ((angle * 720) / (360*4))
    4bfe:	fe 01       	movw	r30, r28
    4c00:	e8 58       	subi	r30, 0x88	; 136
    4c02:	ff 4f       	sbci	r31, 0xFF	; 255
    4c04:	80 81       	ld	r24, Z
    4c06:	91 81       	ldd	r25, Z+1	; 0x01
    4c08:	cc 01       	movw	r24, r24
    4c0a:	a0 e0       	ldi	r26, 0x00	; 0
    4c0c:	b0 e0       	ldi	r27, 0x00	; 0
    4c0e:	20 ed       	ldi	r18, 0xD0	; 208
    4c10:	32 e0       	ldi	r19, 0x02	; 2
    4c12:	40 e0       	ldi	r20, 0x00	; 0
    4c14:	50 e0       	ldi	r21, 0x00	; 0
    4c16:	bc 01       	movw	r22, r24
    4c18:	cd 01       	movw	r24, r26
    4c1a:	0e 94 71 32 	call	0x64e2	; 0x64e2 <__mulsi3>
    4c1e:	dc 01       	movw	r26, r24
    4c20:	cb 01       	movw	r24, r22
    4c22:	8e 01       	movw	r16, r28
    4c24:	0e 58       	subi	r16, 0x8E	; 142
    4c26:	1f 4f       	sbci	r17, 0xFF	; 255
    4c28:	20 ea       	ldi	r18, 0xA0	; 160
    4c2a:	35 e0       	ldi	r19, 0x05	; 5
    4c2c:	40 e0       	ldi	r20, 0x00	; 0
    4c2e:	50 e0       	ldi	r21, 0x00	; 0
    4c30:	bc 01       	movw	r22, r24
    4c32:	cd 01       	movw	r24, r26
    4c34:	0e 94 90 32 	call	0x6520	; 0x6520 <__udivmodsi4>
    4c38:	da 01       	movw	r26, r20
    4c3a:	c9 01       	movw	r24, r18
    4c3c:	f8 01       	movw	r30, r16
    4c3e:	80 83       	st	Z, r24
    4c40:	91 83       	std	Z+1, r25	; 0x01
    4c42:	a2 83       	std	Z+2, r26	; 0x02
    4c44:	b3 83       	std	Z+3, r27	; 0x03
	u8 i;
#if STEPPER_u8_MODE == STEPPER_u8_DOUBLE_PHASE
	if(direction == STEPPER_u8_CCW)
    4c46:	fe 01       	movw	r30, r28
    4c48:	e9 58       	subi	r30, 0x89	; 137
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	80 81       	ld	r24, Z
    4c4e:	82 30       	cpi	r24, 0x02	; 2
    4c50:	09 f0       	breq	.+2      	; 0x4c54 <STEPPER_u8Move+0x8c>
    4c52:	12 c3       	rjmp	.+1572   	; 0x5278 <STEPPER_u8Move+0x6b0>
	{
		for(i = 0; i < Local_u8NoOfiterations;i++)
    4c54:	fe 01       	movw	r30, r28
    4c56:	ef 58       	subi	r30, 0x8F	; 143
    4c58:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5a:	10 82       	st	Z, r1
    4c5c:	f7 c2       	rjmp	.+1518   	; 0x524c <STEPPER_u8Move+0x684>
		{
			//Step 1 0x03 --> - step angle * 1
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	60 e0       	ldi	r22, 0x00	; 0
    4c62:	41 e0       	ldi	r20, 0x01	; 1
    4c64:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	61 e0       	ldi	r22, 0x01	; 1
    4c6c:	41 e0       	ldi	r20, 0x01	; 1
    4c6e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	62 e0       	ldi	r22, 0x02	; 2
    4c76:	40 e0       	ldi	r20, 0x00	; 0
    4c78:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    4c7c:	81 e0       	ldi	r24, 0x01	; 1
    4c7e:	63 e0       	ldi	r22, 0x03	; 3
    4c80:	40 e0       	ldi	r20, 0x00	; 0
    4c82:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    4c86:	fe 01       	movw	r30, r28
    4c88:	e3 59       	subi	r30, 0x93	; 147
    4c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8c:	80 e0       	ldi	r24, 0x00	; 0
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	a8 ec       	ldi	r26, 0xC8	; 200
    4c92:	b2 e4       	ldi	r27, 0x42	; 66
    4c94:	80 83       	st	Z, r24
    4c96:	91 83       	std	Z+1, r25	; 0x01
    4c98:	a2 83       	std	Z+2, r26	; 0x02
    4c9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c9c:	8e 01       	movw	r16, r28
    4c9e:	07 59       	subi	r16, 0x97	; 151
    4ca0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ca2:	fe 01       	movw	r30, r28
    4ca4:	e3 59       	subi	r30, 0x93	; 147
    4ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca8:	60 81       	ld	r22, Z
    4caa:	71 81       	ldd	r23, Z+1	; 0x01
    4cac:	82 81       	ldd	r24, Z+2	; 0x02
    4cae:	93 81       	ldd	r25, Z+3	; 0x03
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	4a ef       	ldi	r20, 0xFA	; 250
    4cb6:	54 e4       	ldi	r21, 0x44	; 68
    4cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	f8 01       	movw	r30, r16
    4cc2:	80 83       	st	Z, r24
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	a2 83       	std	Z+2, r26	; 0x02
    4cc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cca:	fe 01       	movw	r30, r28
    4ccc:	e7 59       	subi	r30, 0x97	; 151
    4cce:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd0:	60 81       	ld	r22, Z
    4cd2:	71 81       	ldd	r23, Z+1	; 0x01
    4cd4:	82 81       	ldd	r24, Z+2	; 0x02
    4cd6:	93 81       	ldd	r25, Z+3	; 0x03
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e8       	ldi	r20, 0x80	; 128
    4cde:	5f e3       	ldi	r21, 0x3F	; 63
    4ce0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4ce4:	88 23       	and	r24, r24
    4ce6:	44 f4       	brge	.+16     	; 0x4cf8 <STEPPER_u8Move+0x130>
		__ticks = 1;
    4ce8:	fe 01       	movw	r30, r28
    4cea:	e9 59       	subi	r30, 0x99	; 153
    4cec:	ff 4f       	sbci	r31, 0xFF	; 255
    4cee:	81 e0       	ldi	r24, 0x01	; 1
    4cf0:	90 e0       	ldi	r25, 0x00	; 0
    4cf2:	91 83       	std	Z+1, r25	; 0x01
    4cf4:	80 83       	st	Z, r24
    4cf6:	64 c0       	rjmp	.+200    	; 0x4dc0 <STEPPER_u8Move+0x1f8>
	else if (__tmp > 65535)
    4cf8:	fe 01       	movw	r30, r28
    4cfa:	e7 59       	subi	r30, 0x97	; 151
    4cfc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cfe:	60 81       	ld	r22, Z
    4d00:	71 81       	ldd	r23, Z+1	; 0x01
    4d02:	82 81       	ldd	r24, Z+2	; 0x02
    4d04:	93 81       	ldd	r25, Z+3	; 0x03
    4d06:	20 e0       	ldi	r18, 0x00	; 0
    4d08:	3f ef       	ldi	r19, 0xFF	; 255
    4d0a:	4f e7       	ldi	r20, 0x7F	; 127
    4d0c:	57 e4       	ldi	r21, 0x47	; 71
    4d0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4d12:	18 16       	cp	r1, r24
    4d14:	0c f0       	brlt	.+2      	; 0x4d18 <STEPPER_u8Move+0x150>
    4d16:	43 c0       	rjmp	.+134    	; 0x4d9e <STEPPER_u8Move+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d18:	fe 01       	movw	r30, r28
    4d1a:	e3 59       	subi	r30, 0x93	; 147
    4d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4d1e:	60 81       	ld	r22, Z
    4d20:	71 81       	ldd	r23, Z+1	; 0x01
    4d22:	82 81       	ldd	r24, Z+2	; 0x02
    4d24:	93 81       	ldd	r25, Z+3	; 0x03
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e2       	ldi	r20, 0x20	; 32
    4d2c:	51 e4       	ldi	r21, 0x41	; 65
    4d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	8e 01       	movw	r16, r28
    4d38:	09 59       	subi	r16, 0x99	; 153
    4d3a:	1f 4f       	sbci	r17, 0xFF	; 255
    4d3c:	bc 01       	movw	r22, r24
    4d3e:	cd 01       	movw	r24, r26
    4d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d44:	dc 01       	movw	r26, r24
    4d46:	cb 01       	movw	r24, r22
    4d48:	f8 01       	movw	r30, r16
    4d4a:	91 83       	std	Z+1, r25	; 0x01
    4d4c:	80 83       	st	Z, r24
    4d4e:	1f c0       	rjmp	.+62     	; 0x4d8e <STEPPER_u8Move+0x1c6>
    4d50:	fe 01       	movw	r30, r28
    4d52:	eb 59       	subi	r30, 0x9B	; 155
    4d54:	ff 4f       	sbci	r31, 0xFF	; 255
    4d56:	88 ec       	ldi	r24, 0xC8	; 200
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	91 83       	std	Z+1, r25	; 0x01
    4d5c:	80 83       	st	Z, r24
    4d5e:	fe 01       	movw	r30, r28
    4d60:	eb 59       	subi	r30, 0x9B	; 155
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	80 81       	ld	r24, Z
    4d66:	91 81       	ldd	r25, Z+1	; 0x01
    4d68:	01 97       	sbiw	r24, 0x01	; 1
    4d6a:	f1 f7       	brne	.-4      	; 0x4d68 <STEPPER_u8Move+0x1a0>
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	eb 59       	subi	r30, 0x9B	; 155
    4d70:	ff 4f       	sbci	r31, 0xFF	; 255
    4d72:	91 83       	std	Z+1, r25	; 0x01
    4d74:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d76:	de 01       	movw	r26, r28
    4d78:	a9 59       	subi	r26, 0x99	; 153
    4d7a:	bf 4f       	sbci	r27, 0xFF	; 255
    4d7c:	fe 01       	movw	r30, r28
    4d7e:	e9 59       	subi	r30, 0x99	; 153
    4d80:	ff 4f       	sbci	r31, 0xFF	; 255
    4d82:	80 81       	ld	r24, Z
    4d84:	91 81       	ldd	r25, Z+1	; 0x01
    4d86:	01 97       	sbiw	r24, 0x01	; 1
    4d88:	11 96       	adiw	r26, 0x01	; 1
    4d8a:	9c 93       	st	X, r25
    4d8c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d8e:	fe 01       	movw	r30, r28
    4d90:	e9 59       	subi	r30, 0x99	; 153
    4d92:	ff 4f       	sbci	r31, 0xFF	; 255
    4d94:	80 81       	ld	r24, Z
    4d96:	91 81       	ldd	r25, Z+1	; 0x01
    4d98:	00 97       	sbiw	r24, 0x00	; 0
    4d9a:	d1 f6       	brne	.-76     	; 0x4d50 <STEPPER_u8Move+0x188>
    4d9c:	27 c0       	rjmp	.+78     	; 0x4dec <STEPPER_u8Move+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d9e:	8e 01       	movw	r16, r28
    4da0:	09 59       	subi	r16, 0x99	; 153
    4da2:	1f 4f       	sbci	r17, 0xFF	; 255
    4da4:	fe 01       	movw	r30, r28
    4da6:	e7 59       	subi	r30, 0x97	; 151
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	60 81       	ld	r22, Z
    4dac:	71 81       	ldd	r23, Z+1	; 0x01
    4dae:	82 81       	ldd	r24, Z+2	; 0x02
    4db0:	93 81       	ldd	r25, Z+3	; 0x03
    4db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4db6:	dc 01       	movw	r26, r24
    4db8:	cb 01       	movw	r24, r22
    4dba:	f8 01       	movw	r30, r16
    4dbc:	91 83       	std	Z+1, r25	; 0x01
    4dbe:	80 83       	st	Z, r24
    4dc0:	de 01       	movw	r26, r28
    4dc2:	ad 59       	subi	r26, 0x9D	; 157
    4dc4:	bf 4f       	sbci	r27, 0xFF	; 255
    4dc6:	fe 01       	movw	r30, r28
    4dc8:	e9 59       	subi	r30, 0x99	; 153
    4dca:	ff 4f       	sbci	r31, 0xFF	; 255
    4dcc:	80 81       	ld	r24, Z
    4dce:	91 81       	ldd	r25, Z+1	; 0x01
    4dd0:	8d 93       	st	X+, r24
    4dd2:	9c 93       	st	X, r25
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	ed 59       	subi	r30, 0x9D	; 157
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	80 81       	ld	r24, Z
    4ddc:	91 81       	ldd	r25, Z+1	; 0x01
    4dde:	01 97       	sbiw	r24, 0x01	; 1
    4de0:	f1 f7       	brne	.-4      	; 0x4dde <STEPPER_u8Move+0x216>
    4de2:	fe 01       	movw	r30, r28
    4de4:	ed 59       	subi	r30, 0x9D	; 157
    4de6:	ff 4f       	sbci	r31, 0xFF	; 255
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	80 83       	st	Z, r24
			_delay_ms(100);
			//Step 2 0x06 --> - step angle * 2
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	60 e0       	ldi	r22, 0x00	; 0
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    4df6:	81 e0       	ldi	r24, 0x01	; 1
    4df8:	61 e0       	ldi	r22, 0x01	; 1
    4dfa:	41 e0       	ldi	r20, 0x01	; 1
    4dfc:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	62 e0       	ldi	r22, 0x02	; 2
    4e04:	41 e0       	ldi	r20, 0x01	; 1
    4e06:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    4e0a:	81 e0       	ldi	r24, 0x01	; 1
    4e0c:	63 e0       	ldi	r22, 0x03	; 3
    4e0e:	40 e0       	ldi	r20, 0x00	; 0
    4e10:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    4e14:	fe 01       	movw	r30, r28
    4e16:	e1 5a       	subi	r30, 0xA1	; 161
    4e18:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1a:	80 e0       	ldi	r24, 0x00	; 0
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	a8 ec       	ldi	r26, 0xC8	; 200
    4e20:	b2 e4       	ldi	r27, 0x42	; 66
    4e22:	80 83       	st	Z, r24
    4e24:	91 83       	std	Z+1, r25	; 0x01
    4e26:	a2 83       	std	Z+2, r26	; 0x02
    4e28:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e2a:	8e 01       	movw	r16, r28
    4e2c:	05 5a       	subi	r16, 0xA5	; 165
    4e2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e30:	fe 01       	movw	r30, r28
    4e32:	e1 5a       	subi	r30, 0xA1	; 161
    4e34:	ff 4f       	sbci	r31, 0xFF	; 255
    4e36:	60 81       	ld	r22, Z
    4e38:	71 81       	ldd	r23, Z+1	; 0x01
    4e3a:	82 81       	ldd	r24, Z+2	; 0x02
    4e3c:	93 81       	ldd	r25, Z+3	; 0x03
    4e3e:	20 e0       	ldi	r18, 0x00	; 0
    4e40:	30 e0       	ldi	r19, 0x00	; 0
    4e42:	4a ef       	ldi	r20, 0xFA	; 250
    4e44:	54 e4       	ldi	r21, 0x44	; 68
    4e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4a:	dc 01       	movw	r26, r24
    4e4c:	cb 01       	movw	r24, r22
    4e4e:	f8 01       	movw	r30, r16
    4e50:	80 83       	st	Z, r24
    4e52:	91 83       	std	Z+1, r25	; 0x01
    4e54:	a2 83       	std	Z+2, r26	; 0x02
    4e56:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e58:	fe 01       	movw	r30, r28
    4e5a:	e5 5a       	subi	r30, 0xA5	; 165
    4e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5e:	60 81       	ld	r22, Z
    4e60:	71 81       	ldd	r23, Z+1	; 0x01
    4e62:	82 81       	ldd	r24, Z+2	; 0x02
    4e64:	93 81       	ldd	r25, Z+3	; 0x03
    4e66:	20 e0       	ldi	r18, 0x00	; 0
    4e68:	30 e0       	ldi	r19, 0x00	; 0
    4e6a:	40 e8       	ldi	r20, 0x80	; 128
    4e6c:	5f e3       	ldi	r21, 0x3F	; 63
    4e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e72:	88 23       	and	r24, r24
    4e74:	44 f4       	brge	.+16     	; 0x4e86 <STEPPER_u8Move+0x2be>
		__ticks = 1;
    4e76:	fe 01       	movw	r30, r28
    4e78:	e7 5a       	subi	r30, 0xA7	; 167
    4e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7c:	81 e0       	ldi	r24, 0x01	; 1
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	91 83       	std	Z+1, r25	; 0x01
    4e82:	80 83       	st	Z, r24
    4e84:	64 c0       	rjmp	.+200    	; 0x4f4e <STEPPER_u8Move+0x386>
	else if (__tmp > 65535)
    4e86:	fe 01       	movw	r30, r28
    4e88:	e5 5a       	subi	r30, 0xA5	; 165
    4e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8c:	60 81       	ld	r22, Z
    4e8e:	71 81       	ldd	r23, Z+1	; 0x01
    4e90:	82 81       	ldd	r24, Z+2	; 0x02
    4e92:	93 81       	ldd	r25, Z+3	; 0x03
    4e94:	20 e0       	ldi	r18, 0x00	; 0
    4e96:	3f ef       	ldi	r19, 0xFF	; 255
    4e98:	4f e7       	ldi	r20, 0x7F	; 127
    4e9a:	57 e4       	ldi	r21, 0x47	; 71
    4e9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4ea0:	18 16       	cp	r1, r24
    4ea2:	0c f0       	brlt	.+2      	; 0x4ea6 <STEPPER_u8Move+0x2de>
    4ea4:	43 c0       	rjmp	.+134    	; 0x4f2c <STEPPER_u8Move+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea6:	fe 01       	movw	r30, r28
    4ea8:	e1 5a       	subi	r30, 0xA1	; 161
    4eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    4eac:	60 81       	ld	r22, Z
    4eae:	71 81       	ldd	r23, Z+1	; 0x01
    4eb0:	82 81       	ldd	r24, Z+2	; 0x02
    4eb2:	93 81       	ldd	r25, Z+3	; 0x03
    4eb4:	20 e0       	ldi	r18, 0x00	; 0
    4eb6:	30 e0       	ldi	r19, 0x00	; 0
    4eb8:	40 e2       	ldi	r20, 0x20	; 32
    4eba:	51 e4       	ldi	r21, 0x41	; 65
    4ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec0:	dc 01       	movw	r26, r24
    4ec2:	cb 01       	movw	r24, r22
    4ec4:	8e 01       	movw	r16, r28
    4ec6:	07 5a       	subi	r16, 0xA7	; 167
    4ec8:	1f 4f       	sbci	r17, 0xFF	; 255
    4eca:	bc 01       	movw	r22, r24
    4ecc:	cd 01       	movw	r24, r26
    4ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	cb 01       	movw	r24, r22
    4ed6:	f8 01       	movw	r30, r16
    4ed8:	91 83       	std	Z+1, r25	; 0x01
    4eda:	80 83       	st	Z, r24
    4edc:	1f c0       	rjmp	.+62     	; 0x4f1c <STEPPER_u8Move+0x354>
    4ede:	fe 01       	movw	r30, r28
    4ee0:	e9 5a       	subi	r30, 0xA9	; 169
    4ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee4:	88 ec       	ldi	r24, 0xC8	; 200
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
    4ee8:	91 83       	std	Z+1, r25	; 0x01
    4eea:	80 83       	st	Z, r24
    4eec:	fe 01       	movw	r30, r28
    4eee:	e9 5a       	subi	r30, 0xA9	; 169
    4ef0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef2:	80 81       	ld	r24, Z
    4ef4:	91 81       	ldd	r25, Z+1	; 0x01
    4ef6:	01 97       	sbiw	r24, 0x01	; 1
    4ef8:	f1 f7       	brne	.-4      	; 0x4ef6 <STEPPER_u8Move+0x32e>
    4efa:	fe 01       	movw	r30, r28
    4efc:	e9 5a       	subi	r30, 0xA9	; 169
    4efe:	ff 4f       	sbci	r31, 0xFF	; 255
    4f00:	91 83       	std	Z+1, r25	; 0x01
    4f02:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f04:	de 01       	movw	r26, r28
    4f06:	a7 5a       	subi	r26, 0xA7	; 167
    4f08:	bf 4f       	sbci	r27, 0xFF	; 255
    4f0a:	fe 01       	movw	r30, r28
    4f0c:	e7 5a       	subi	r30, 0xA7	; 167
    4f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f10:	80 81       	ld	r24, Z
    4f12:	91 81       	ldd	r25, Z+1	; 0x01
    4f14:	01 97       	sbiw	r24, 0x01	; 1
    4f16:	11 96       	adiw	r26, 0x01	; 1
    4f18:	9c 93       	st	X, r25
    4f1a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f1c:	fe 01       	movw	r30, r28
    4f1e:	e7 5a       	subi	r30, 0xA7	; 167
    4f20:	ff 4f       	sbci	r31, 0xFF	; 255
    4f22:	80 81       	ld	r24, Z
    4f24:	91 81       	ldd	r25, Z+1	; 0x01
    4f26:	00 97       	sbiw	r24, 0x00	; 0
    4f28:	d1 f6       	brne	.-76     	; 0x4ede <STEPPER_u8Move+0x316>
    4f2a:	27 c0       	rjmp	.+78     	; 0x4f7a <STEPPER_u8Move+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f2c:	8e 01       	movw	r16, r28
    4f2e:	07 5a       	subi	r16, 0xA7	; 167
    4f30:	1f 4f       	sbci	r17, 0xFF	; 255
    4f32:	fe 01       	movw	r30, r28
    4f34:	e5 5a       	subi	r30, 0xA5	; 165
    4f36:	ff 4f       	sbci	r31, 0xFF	; 255
    4f38:	60 81       	ld	r22, Z
    4f3a:	71 81       	ldd	r23, Z+1	; 0x01
    4f3c:	82 81       	ldd	r24, Z+2	; 0x02
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f44:	dc 01       	movw	r26, r24
    4f46:	cb 01       	movw	r24, r22
    4f48:	f8 01       	movw	r30, r16
    4f4a:	91 83       	std	Z+1, r25	; 0x01
    4f4c:	80 83       	st	Z, r24
    4f4e:	de 01       	movw	r26, r28
    4f50:	ab 5a       	subi	r26, 0xAB	; 171
    4f52:	bf 4f       	sbci	r27, 0xFF	; 255
    4f54:	fe 01       	movw	r30, r28
    4f56:	e7 5a       	subi	r30, 0xA7	; 167
    4f58:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5a:	80 81       	ld	r24, Z
    4f5c:	91 81       	ldd	r25, Z+1	; 0x01
    4f5e:	8d 93       	st	X+, r24
    4f60:	9c 93       	st	X, r25
    4f62:	fe 01       	movw	r30, r28
    4f64:	eb 5a       	subi	r30, 0xAB	; 171
    4f66:	ff 4f       	sbci	r31, 0xFF	; 255
    4f68:	80 81       	ld	r24, Z
    4f6a:	91 81       	ldd	r25, Z+1	; 0x01
    4f6c:	01 97       	sbiw	r24, 0x01	; 1
    4f6e:	f1 f7       	brne	.-4      	; 0x4f6c <STEPPER_u8Move+0x3a4>
    4f70:	fe 01       	movw	r30, r28
    4f72:	eb 5a       	subi	r30, 0xAB	; 171
    4f74:	ff 4f       	sbci	r31, 0xFF	; 255
    4f76:	91 83       	std	Z+1, r25	; 0x01
    4f78:	80 83       	st	Z, r24
			_delay_ms(100);
			//Step 1 0x0C --> - step angle * 3
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    4f7a:	81 e0       	ldi	r24, 0x01	; 1
    4f7c:	60 e0       	ldi	r22, 0x00	; 0
    4f7e:	40 e0       	ldi	r20, 0x00	; 0
    4f80:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	61 e0       	ldi	r22, 0x01	; 1
    4f88:	40 e0       	ldi	r20, 0x00	; 0
    4f8a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    4f8e:	81 e0       	ldi	r24, 0x01	; 1
    4f90:	62 e0       	ldi	r22, 0x02	; 2
    4f92:	41 e0       	ldi	r20, 0x01	; 1
    4f94:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    4f98:	81 e0       	ldi	r24, 0x01	; 1
    4f9a:	63 e0       	ldi	r22, 0x03	; 3
    4f9c:	41 e0       	ldi	r20, 0x01	; 1
    4f9e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    4fa2:	fe 01       	movw	r30, r28
    4fa4:	ef 5a       	subi	r30, 0xAF	; 175
    4fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa8:	80 e0       	ldi	r24, 0x00	; 0
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	a8 ec       	ldi	r26, 0xC8	; 200
    4fae:	b2 e4       	ldi	r27, 0x42	; 66
    4fb0:	80 83       	st	Z, r24
    4fb2:	91 83       	std	Z+1, r25	; 0x01
    4fb4:	a2 83       	std	Z+2, r26	; 0x02
    4fb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4fb8:	8e 01       	movw	r16, r28
    4fba:	03 5b       	subi	r16, 0xB3	; 179
    4fbc:	1f 4f       	sbci	r17, 0xFF	; 255
    4fbe:	fe 01       	movw	r30, r28
    4fc0:	ef 5a       	subi	r30, 0xAF	; 175
    4fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc4:	60 81       	ld	r22, Z
    4fc6:	71 81       	ldd	r23, Z+1	; 0x01
    4fc8:	82 81       	ldd	r24, Z+2	; 0x02
    4fca:	93 81       	ldd	r25, Z+3	; 0x03
    4fcc:	20 e0       	ldi	r18, 0x00	; 0
    4fce:	30 e0       	ldi	r19, 0x00	; 0
    4fd0:	4a ef       	ldi	r20, 0xFA	; 250
    4fd2:	54 e4       	ldi	r21, 0x44	; 68
    4fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd8:	dc 01       	movw	r26, r24
    4fda:	cb 01       	movw	r24, r22
    4fdc:	f8 01       	movw	r30, r16
    4fde:	80 83       	st	Z, r24
    4fe0:	91 83       	std	Z+1, r25	; 0x01
    4fe2:	a2 83       	std	Z+2, r26	; 0x02
    4fe4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	e3 5b       	subi	r30, 0xB3	; 179
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	60 81       	ld	r22, Z
    4fee:	71 81       	ldd	r23, Z+1	; 0x01
    4ff0:	82 81       	ldd	r24, Z+2	; 0x02
    4ff2:	93 81       	ldd	r25, Z+3	; 0x03
    4ff4:	20 e0       	ldi	r18, 0x00	; 0
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	40 e8       	ldi	r20, 0x80	; 128
    4ffa:	5f e3       	ldi	r21, 0x3F	; 63
    4ffc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5000:	88 23       	and	r24, r24
    5002:	44 f4       	brge	.+16     	; 0x5014 <STEPPER_u8Move+0x44c>
		__ticks = 1;
    5004:	fe 01       	movw	r30, r28
    5006:	e5 5b       	subi	r30, 0xB5	; 181
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	81 e0       	ldi	r24, 0x01	; 1
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	91 83       	std	Z+1, r25	; 0x01
    5010:	80 83       	st	Z, r24
    5012:	64 c0       	rjmp	.+200    	; 0x50dc <STEPPER_u8Move+0x514>
	else if (__tmp > 65535)
    5014:	fe 01       	movw	r30, r28
    5016:	e3 5b       	subi	r30, 0xB3	; 179
    5018:	ff 4f       	sbci	r31, 0xFF	; 255
    501a:	60 81       	ld	r22, Z
    501c:	71 81       	ldd	r23, Z+1	; 0x01
    501e:	82 81       	ldd	r24, Z+2	; 0x02
    5020:	93 81       	ldd	r25, Z+3	; 0x03
    5022:	20 e0       	ldi	r18, 0x00	; 0
    5024:	3f ef       	ldi	r19, 0xFF	; 255
    5026:	4f e7       	ldi	r20, 0x7F	; 127
    5028:	57 e4       	ldi	r21, 0x47	; 71
    502a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    502e:	18 16       	cp	r1, r24
    5030:	0c f0       	brlt	.+2      	; 0x5034 <STEPPER_u8Move+0x46c>
    5032:	43 c0       	rjmp	.+134    	; 0x50ba <STEPPER_u8Move+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5034:	fe 01       	movw	r30, r28
    5036:	ef 5a       	subi	r30, 0xAF	; 175
    5038:	ff 4f       	sbci	r31, 0xFF	; 255
    503a:	60 81       	ld	r22, Z
    503c:	71 81       	ldd	r23, Z+1	; 0x01
    503e:	82 81       	ldd	r24, Z+2	; 0x02
    5040:	93 81       	ldd	r25, Z+3	; 0x03
    5042:	20 e0       	ldi	r18, 0x00	; 0
    5044:	30 e0       	ldi	r19, 0x00	; 0
    5046:	40 e2       	ldi	r20, 0x20	; 32
    5048:	51 e4       	ldi	r21, 0x41	; 65
    504a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    504e:	dc 01       	movw	r26, r24
    5050:	cb 01       	movw	r24, r22
    5052:	8e 01       	movw	r16, r28
    5054:	05 5b       	subi	r16, 0xB5	; 181
    5056:	1f 4f       	sbci	r17, 0xFF	; 255
    5058:	bc 01       	movw	r22, r24
    505a:	cd 01       	movw	r24, r26
    505c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5060:	dc 01       	movw	r26, r24
    5062:	cb 01       	movw	r24, r22
    5064:	f8 01       	movw	r30, r16
    5066:	91 83       	std	Z+1, r25	; 0x01
    5068:	80 83       	st	Z, r24
    506a:	1f c0       	rjmp	.+62     	; 0x50aa <STEPPER_u8Move+0x4e2>
    506c:	fe 01       	movw	r30, r28
    506e:	e7 5b       	subi	r30, 0xB7	; 183
    5070:	ff 4f       	sbci	r31, 0xFF	; 255
    5072:	88 ec       	ldi	r24, 0xC8	; 200
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	91 83       	std	Z+1, r25	; 0x01
    5078:	80 83       	st	Z, r24
    507a:	fe 01       	movw	r30, r28
    507c:	e7 5b       	subi	r30, 0xB7	; 183
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	80 81       	ld	r24, Z
    5082:	91 81       	ldd	r25, Z+1	; 0x01
    5084:	01 97       	sbiw	r24, 0x01	; 1
    5086:	f1 f7       	brne	.-4      	; 0x5084 <STEPPER_u8Move+0x4bc>
    5088:	fe 01       	movw	r30, r28
    508a:	e7 5b       	subi	r30, 0xB7	; 183
    508c:	ff 4f       	sbci	r31, 0xFF	; 255
    508e:	91 83       	std	Z+1, r25	; 0x01
    5090:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5092:	de 01       	movw	r26, r28
    5094:	a5 5b       	subi	r26, 0xB5	; 181
    5096:	bf 4f       	sbci	r27, 0xFF	; 255
    5098:	fe 01       	movw	r30, r28
    509a:	e5 5b       	subi	r30, 0xB5	; 181
    509c:	ff 4f       	sbci	r31, 0xFF	; 255
    509e:	80 81       	ld	r24, Z
    50a0:	91 81       	ldd	r25, Z+1	; 0x01
    50a2:	01 97       	sbiw	r24, 0x01	; 1
    50a4:	11 96       	adiw	r26, 0x01	; 1
    50a6:	9c 93       	st	X, r25
    50a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50aa:	fe 01       	movw	r30, r28
    50ac:	e5 5b       	subi	r30, 0xB5	; 181
    50ae:	ff 4f       	sbci	r31, 0xFF	; 255
    50b0:	80 81       	ld	r24, Z
    50b2:	91 81       	ldd	r25, Z+1	; 0x01
    50b4:	00 97       	sbiw	r24, 0x00	; 0
    50b6:	d1 f6       	brne	.-76     	; 0x506c <STEPPER_u8Move+0x4a4>
    50b8:	27 c0       	rjmp	.+78     	; 0x5108 <STEPPER_u8Move+0x540>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50ba:	8e 01       	movw	r16, r28
    50bc:	05 5b       	subi	r16, 0xB5	; 181
    50be:	1f 4f       	sbci	r17, 0xFF	; 255
    50c0:	fe 01       	movw	r30, r28
    50c2:	e3 5b       	subi	r30, 0xB3	; 179
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	60 81       	ld	r22, Z
    50c8:	71 81       	ldd	r23, Z+1	; 0x01
    50ca:	82 81       	ldd	r24, Z+2	; 0x02
    50cc:	93 81       	ldd	r25, Z+3	; 0x03
    50ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50d2:	dc 01       	movw	r26, r24
    50d4:	cb 01       	movw	r24, r22
    50d6:	f8 01       	movw	r30, r16
    50d8:	91 83       	std	Z+1, r25	; 0x01
    50da:	80 83       	st	Z, r24
    50dc:	de 01       	movw	r26, r28
    50de:	a9 5b       	subi	r26, 0xB9	; 185
    50e0:	bf 4f       	sbci	r27, 0xFF	; 255
    50e2:	fe 01       	movw	r30, r28
    50e4:	e5 5b       	subi	r30, 0xB5	; 181
    50e6:	ff 4f       	sbci	r31, 0xFF	; 255
    50e8:	80 81       	ld	r24, Z
    50ea:	91 81       	ldd	r25, Z+1	; 0x01
    50ec:	8d 93       	st	X+, r24
    50ee:	9c 93       	st	X, r25
    50f0:	fe 01       	movw	r30, r28
    50f2:	e9 5b       	subi	r30, 0xB9	; 185
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	80 81       	ld	r24, Z
    50f8:	91 81       	ldd	r25, Z+1	; 0x01
    50fa:	01 97       	sbiw	r24, 0x01	; 1
    50fc:	f1 f7       	brne	.-4      	; 0x50fa <STEPPER_u8Move+0x532>
    50fe:	fe 01       	movw	r30, r28
    5100:	e9 5b       	subi	r30, 0xB9	; 185
    5102:	ff 4f       	sbci	r31, 0xFF	; 255
    5104:	91 83       	std	Z+1, r25	; 0x01
    5106:	80 83       	st	Z, r24
			_delay_ms(100);
			//Step 4 0x09 --> - step angle * 4
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    5108:	81 e0       	ldi	r24, 0x01	; 1
    510a:	60 e0       	ldi	r22, 0x00	; 0
    510c:	41 e0       	ldi	r20, 0x01	; 1
    510e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    5112:	81 e0       	ldi	r24, 0x01	; 1
    5114:	61 e0       	ldi	r22, 0x01	; 1
    5116:	40 e0       	ldi	r20, 0x00	; 0
    5118:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    511c:	81 e0       	ldi	r24, 0x01	; 1
    511e:	62 e0       	ldi	r22, 0x02	; 2
    5120:	40 e0       	ldi	r20, 0x00	; 0
    5122:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    5126:	81 e0       	ldi	r24, 0x01	; 1
    5128:	63 e0       	ldi	r22, 0x03	; 3
    512a:	41 e0       	ldi	r20, 0x01	; 1
    512c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    5130:	fe 01       	movw	r30, r28
    5132:	ed 5b       	subi	r30, 0xBD	; 189
    5134:	ff 4f       	sbci	r31, 0xFF	; 255
    5136:	80 e0       	ldi	r24, 0x00	; 0
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	a8 ec       	ldi	r26, 0xC8	; 200
    513c:	b2 e4       	ldi	r27, 0x42	; 66
    513e:	80 83       	st	Z, r24
    5140:	91 83       	std	Z+1, r25	; 0x01
    5142:	a2 83       	std	Z+2, r26	; 0x02
    5144:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5146:	8e 01       	movw	r16, r28
    5148:	01 5c       	subi	r16, 0xC1	; 193
    514a:	1f 4f       	sbci	r17, 0xFF	; 255
    514c:	fe 01       	movw	r30, r28
    514e:	ed 5b       	subi	r30, 0xBD	; 189
    5150:	ff 4f       	sbci	r31, 0xFF	; 255
    5152:	60 81       	ld	r22, Z
    5154:	71 81       	ldd	r23, Z+1	; 0x01
    5156:	82 81       	ldd	r24, Z+2	; 0x02
    5158:	93 81       	ldd	r25, Z+3	; 0x03
    515a:	20 e0       	ldi	r18, 0x00	; 0
    515c:	30 e0       	ldi	r19, 0x00	; 0
    515e:	4a ef       	ldi	r20, 0xFA	; 250
    5160:	54 e4       	ldi	r21, 0x44	; 68
    5162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5166:	dc 01       	movw	r26, r24
    5168:	cb 01       	movw	r24, r22
    516a:	f8 01       	movw	r30, r16
    516c:	80 83       	st	Z, r24
    516e:	91 83       	std	Z+1, r25	; 0x01
    5170:	a2 83       	std	Z+2, r26	; 0x02
    5172:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5174:	fe 01       	movw	r30, r28
    5176:	ff 96       	adiw	r30, 0x3f	; 63
    5178:	60 81       	ld	r22, Z
    517a:	71 81       	ldd	r23, Z+1	; 0x01
    517c:	82 81       	ldd	r24, Z+2	; 0x02
    517e:	93 81       	ldd	r25, Z+3	; 0x03
    5180:	20 e0       	ldi	r18, 0x00	; 0
    5182:	30 e0       	ldi	r19, 0x00	; 0
    5184:	40 e8       	ldi	r20, 0x80	; 128
    5186:	5f e3       	ldi	r21, 0x3F	; 63
    5188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    518c:	88 23       	and	r24, r24
    518e:	2c f4       	brge	.+10     	; 0x519a <STEPPER_u8Move+0x5d2>
		__ticks = 1;
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	90 e0       	ldi	r25, 0x00	; 0
    5194:	9e af       	std	Y+62, r25	; 0x3e
    5196:	8d af       	std	Y+61, r24	; 0x3d
    5198:	46 c0       	rjmp	.+140    	; 0x5226 <STEPPER_u8Move+0x65e>
	else if (__tmp > 65535)
    519a:	fe 01       	movw	r30, r28
    519c:	ff 96       	adiw	r30, 0x3f	; 63
    519e:	60 81       	ld	r22, Z
    51a0:	71 81       	ldd	r23, Z+1	; 0x01
    51a2:	82 81       	ldd	r24, Z+2	; 0x02
    51a4:	93 81       	ldd	r25, Z+3	; 0x03
    51a6:	20 e0       	ldi	r18, 0x00	; 0
    51a8:	3f ef       	ldi	r19, 0xFF	; 255
    51aa:	4f e7       	ldi	r20, 0x7F	; 127
    51ac:	57 e4       	ldi	r21, 0x47	; 71
    51ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    51b2:	18 16       	cp	r1, r24
    51b4:	64 f5       	brge	.+88     	; 0x520e <STEPPER_u8Move+0x646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51b6:	fe 01       	movw	r30, r28
    51b8:	ed 5b       	subi	r30, 0xBD	; 189
    51ba:	ff 4f       	sbci	r31, 0xFF	; 255
    51bc:	60 81       	ld	r22, Z
    51be:	71 81       	ldd	r23, Z+1	; 0x01
    51c0:	82 81       	ldd	r24, Z+2	; 0x02
    51c2:	93 81       	ldd	r25, Z+3	; 0x03
    51c4:	20 e0       	ldi	r18, 0x00	; 0
    51c6:	30 e0       	ldi	r19, 0x00	; 0
    51c8:	40 e2       	ldi	r20, 0x20	; 32
    51ca:	51 e4       	ldi	r21, 0x41	; 65
    51cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51d0:	dc 01       	movw	r26, r24
    51d2:	cb 01       	movw	r24, r22
    51d4:	bc 01       	movw	r22, r24
    51d6:	cd 01       	movw	r24, r26
    51d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51dc:	dc 01       	movw	r26, r24
    51de:	cb 01       	movw	r24, r22
    51e0:	9e af       	std	Y+62, r25	; 0x3e
    51e2:	8d af       	std	Y+61, r24	; 0x3d
    51e4:	0f c0       	rjmp	.+30     	; 0x5204 <STEPPER_u8Move+0x63c>
    51e6:	88 ec       	ldi	r24, 0xC8	; 200
    51e8:	90 e0       	ldi	r25, 0x00	; 0
    51ea:	9c af       	std	Y+60, r25	; 0x3c
    51ec:	8b af       	std	Y+59, r24	; 0x3b
    51ee:	8b ad       	ldd	r24, Y+59	; 0x3b
    51f0:	9c ad       	ldd	r25, Y+60	; 0x3c
    51f2:	01 97       	sbiw	r24, 0x01	; 1
    51f4:	f1 f7       	brne	.-4      	; 0x51f2 <STEPPER_u8Move+0x62a>
    51f6:	9c af       	std	Y+60, r25	; 0x3c
    51f8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    51fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    51fe:	01 97       	sbiw	r24, 0x01	; 1
    5200:	9e af       	std	Y+62, r25	; 0x3e
    5202:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5204:	8d ad       	ldd	r24, Y+61	; 0x3d
    5206:	9e ad       	ldd	r25, Y+62	; 0x3e
    5208:	00 97       	sbiw	r24, 0x00	; 0
    520a:	69 f7       	brne	.-38     	; 0x51e6 <STEPPER_u8Move+0x61e>
    520c:	16 c0       	rjmp	.+44     	; 0x523a <STEPPER_u8Move+0x672>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    520e:	fe 01       	movw	r30, r28
    5210:	ff 96       	adiw	r30, 0x3f	; 63
    5212:	60 81       	ld	r22, Z
    5214:	71 81       	ldd	r23, Z+1	; 0x01
    5216:	82 81       	ldd	r24, Z+2	; 0x02
    5218:	93 81       	ldd	r25, Z+3	; 0x03
    521a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    521e:	dc 01       	movw	r26, r24
    5220:	cb 01       	movw	r24, r22
    5222:	9e af       	std	Y+62, r25	; 0x3e
    5224:	8d af       	std	Y+61, r24	; 0x3d
    5226:	8d ad       	ldd	r24, Y+61	; 0x3d
    5228:	9e ad       	ldd	r25, Y+62	; 0x3e
    522a:	9a af       	std	Y+58, r25	; 0x3a
    522c:	89 af       	std	Y+57, r24	; 0x39
    522e:	89 ad       	ldd	r24, Y+57	; 0x39
    5230:	9a ad       	ldd	r25, Y+58	; 0x3a
    5232:	01 97       	sbiw	r24, 0x01	; 1
    5234:	f1 f7       	brne	.-4      	; 0x5232 <STEPPER_u8Move+0x66a>
    5236:	9a af       	std	Y+58, r25	; 0x3a
    5238:	89 af       	std	Y+57, r24	; 0x39
	u32 Local_u8NoOfiterations = (((u32) angle * 720) / (360 * 4)) ; // ((angle * 720) / (360*4))
	u8 i;
#if STEPPER_u8_MODE == STEPPER_u8_DOUBLE_PHASE
	if(direction == STEPPER_u8_CCW)
	{
		for(i = 0; i < Local_u8NoOfiterations;i++)
    523a:	de 01       	movw	r26, r28
    523c:	af 58       	subi	r26, 0x8F	; 143
    523e:	bf 4f       	sbci	r27, 0xFF	; 255
    5240:	fe 01       	movw	r30, r28
    5242:	ef 58       	subi	r30, 0x8F	; 143
    5244:	ff 4f       	sbci	r31, 0xFF	; 255
    5246:	80 81       	ld	r24, Z
    5248:	8f 5f       	subi	r24, 0xFF	; 255
    524a:	8c 93       	st	X, r24
    524c:	fe 01       	movw	r30, r28
    524e:	ef 58       	subi	r30, 0x8F	; 143
    5250:	ff 4f       	sbci	r31, 0xFF	; 255
    5252:	80 81       	ld	r24, Z
    5254:	28 2f       	mov	r18, r24
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	40 e0       	ldi	r20, 0x00	; 0
    525a:	50 e0       	ldi	r21, 0x00	; 0
    525c:	fe 01       	movw	r30, r28
    525e:	ee 58       	subi	r30, 0x8E	; 142
    5260:	ff 4f       	sbci	r31, 0xFF	; 255
    5262:	80 81       	ld	r24, Z
    5264:	91 81       	ldd	r25, Z+1	; 0x01
    5266:	a2 81       	ldd	r26, Z+2	; 0x02
    5268:	b3 81       	ldd	r27, Z+3	; 0x03
    526a:	28 17       	cp	r18, r24
    526c:	39 07       	cpc	r19, r25
    526e:	4a 07       	cpc	r20, r26
    5270:	5b 07       	cpc	r21, r27
    5272:	08 f4       	brcc	.+2      	; 0x5276 <STEPPER_u8Move+0x6ae>
    5274:	f4 cc       	rjmp	.-1560   	; 0x4c5e <STEPPER_u8Move+0x96>
    5276:	47 c2       	rjmp	.+1166   	; 0x5706 <STEPPER_u8Move+0xb3e>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
			_delay_ms(100);
		}
	}
	else if(direction == STEPPER_u8_CW)
    5278:	fe 01       	movw	r30, r28
    527a:	e9 58       	subi	r30, 0x89	; 137
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	80 81       	ld	r24, Z
    5280:	81 30       	cpi	r24, 0x01	; 1
    5282:	09 f0       	breq	.+2      	; 0x5286 <STEPPER_u8Move+0x6be>
    5284:	3c c2       	rjmp	.+1144   	; 0x56fe <STEPPER_u8Move+0xb36>
	{
		for(i = 0; i < Local_u8NoOfiterations;i++)
    5286:	fe 01       	movw	r30, r28
    5288:	ef 58       	subi	r30, 0x8F	; 143
    528a:	ff 4f       	sbci	r31, 0xFF	; 255
    528c:	10 82       	st	Z, r1
    528e:	21 c2       	rjmp	.+1090   	; 0x56d2 <STEPPER_u8Move+0xb0a>
		{
			//Step 1 0x0C --> step angle
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    5290:	81 e0       	ldi	r24, 0x01	; 1
    5292:	60 e0       	ldi	r22, 0x00	; 0
    5294:	40 e0       	ldi	r20, 0x00	; 0
    5296:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    529a:	81 e0       	ldi	r24, 0x01	; 1
    529c:	61 e0       	ldi	r22, 0x01	; 1
    529e:	40 e0       	ldi	r20, 0x00	; 0
    52a0:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	62 e0       	ldi	r22, 0x02	; 2
    52a8:	41 e0       	ldi	r20, 0x01	; 1
    52aa:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    52ae:	81 e0       	ldi	r24, 0x01	; 1
    52b0:	63 e0       	ldi	r22, 0x03	; 3
    52b2:	41 e0       	ldi	r20, 0x01	; 1
    52b4:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	a8 ec       	ldi	r26, 0xC8	; 200
    52be:	b2 e4       	ldi	r27, 0x42	; 66
    52c0:	8d ab       	std	Y+53, r24	; 0x35
    52c2:	9e ab       	std	Y+54, r25	; 0x36
    52c4:	af ab       	std	Y+55, r26	; 0x37
    52c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    52c8:	6d a9       	ldd	r22, Y+53	; 0x35
    52ca:	7e a9       	ldd	r23, Y+54	; 0x36
    52cc:	8f a9       	ldd	r24, Y+55	; 0x37
    52ce:	98 ad       	ldd	r25, Y+56	; 0x38
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	4a ef       	ldi	r20, 0xFA	; 250
    52d6:	54 e4       	ldi	r21, 0x44	; 68
    52d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	89 ab       	std	Y+49, r24	; 0x31
    52e2:	9a ab       	std	Y+50, r25	; 0x32
    52e4:	ab ab       	std	Y+51, r26	; 0x33
    52e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    52e8:	69 a9       	ldd	r22, Y+49	; 0x31
    52ea:	7a a9       	ldd	r23, Y+50	; 0x32
    52ec:	8b a9       	ldd	r24, Y+51	; 0x33
    52ee:	9c a9       	ldd	r25, Y+52	; 0x34
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	30 e0       	ldi	r19, 0x00	; 0
    52f4:	40 e8       	ldi	r20, 0x80	; 128
    52f6:	5f e3       	ldi	r21, 0x3F	; 63
    52f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    52fc:	88 23       	and	r24, r24
    52fe:	2c f4       	brge	.+10     	; 0x530a <STEPPER_u8Move+0x742>
		__ticks = 1;
    5300:	81 e0       	ldi	r24, 0x01	; 1
    5302:	90 e0       	ldi	r25, 0x00	; 0
    5304:	98 ab       	std	Y+48, r25	; 0x30
    5306:	8f a7       	std	Y+47, r24	; 0x2f
    5308:	3f c0       	rjmp	.+126    	; 0x5388 <STEPPER_u8Move+0x7c0>
	else if (__tmp > 65535)
    530a:	69 a9       	ldd	r22, Y+49	; 0x31
    530c:	7a a9       	ldd	r23, Y+50	; 0x32
    530e:	8b a9       	ldd	r24, Y+51	; 0x33
    5310:	9c a9       	ldd	r25, Y+52	; 0x34
    5312:	20 e0       	ldi	r18, 0x00	; 0
    5314:	3f ef       	ldi	r19, 0xFF	; 255
    5316:	4f e7       	ldi	r20, 0x7F	; 127
    5318:	57 e4       	ldi	r21, 0x47	; 71
    531a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    531e:	18 16       	cp	r1, r24
    5320:	4c f5       	brge	.+82     	; 0x5374 <STEPPER_u8Move+0x7ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5322:	6d a9       	ldd	r22, Y+53	; 0x35
    5324:	7e a9       	ldd	r23, Y+54	; 0x36
    5326:	8f a9       	ldd	r24, Y+55	; 0x37
    5328:	98 ad       	ldd	r25, Y+56	; 0x38
    532a:	20 e0       	ldi	r18, 0x00	; 0
    532c:	30 e0       	ldi	r19, 0x00	; 0
    532e:	40 e2       	ldi	r20, 0x20	; 32
    5330:	51 e4       	ldi	r21, 0x41	; 65
    5332:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5336:	dc 01       	movw	r26, r24
    5338:	cb 01       	movw	r24, r22
    533a:	bc 01       	movw	r22, r24
    533c:	cd 01       	movw	r24, r26
    533e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5342:	dc 01       	movw	r26, r24
    5344:	cb 01       	movw	r24, r22
    5346:	98 ab       	std	Y+48, r25	; 0x30
    5348:	8f a7       	std	Y+47, r24	; 0x2f
    534a:	0f c0       	rjmp	.+30     	; 0x536a <STEPPER_u8Move+0x7a2>
    534c:	88 ec       	ldi	r24, 0xC8	; 200
    534e:	90 e0       	ldi	r25, 0x00	; 0
    5350:	9e a7       	std	Y+46, r25	; 0x2e
    5352:	8d a7       	std	Y+45, r24	; 0x2d
    5354:	8d a5       	ldd	r24, Y+45	; 0x2d
    5356:	9e a5       	ldd	r25, Y+46	; 0x2e
    5358:	01 97       	sbiw	r24, 0x01	; 1
    535a:	f1 f7       	brne	.-4      	; 0x5358 <STEPPER_u8Move+0x790>
    535c:	9e a7       	std	Y+46, r25	; 0x2e
    535e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5360:	8f a5       	ldd	r24, Y+47	; 0x2f
    5362:	98 a9       	ldd	r25, Y+48	; 0x30
    5364:	01 97       	sbiw	r24, 0x01	; 1
    5366:	98 ab       	std	Y+48, r25	; 0x30
    5368:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    536a:	8f a5       	ldd	r24, Y+47	; 0x2f
    536c:	98 a9       	ldd	r25, Y+48	; 0x30
    536e:	00 97       	sbiw	r24, 0x00	; 0
    5370:	69 f7       	brne	.-38     	; 0x534c <STEPPER_u8Move+0x784>
    5372:	14 c0       	rjmp	.+40     	; 0x539c <STEPPER_u8Move+0x7d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5374:	69 a9       	ldd	r22, Y+49	; 0x31
    5376:	7a a9       	ldd	r23, Y+50	; 0x32
    5378:	8b a9       	ldd	r24, Y+51	; 0x33
    537a:	9c a9       	ldd	r25, Y+52	; 0x34
    537c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5380:	dc 01       	movw	r26, r24
    5382:	cb 01       	movw	r24, r22
    5384:	98 ab       	std	Y+48, r25	; 0x30
    5386:	8f a7       	std	Y+47, r24	; 0x2f
    5388:	8f a5       	ldd	r24, Y+47	; 0x2f
    538a:	98 a9       	ldd	r25, Y+48	; 0x30
    538c:	9c a7       	std	Y+44, r25	; 0x2c
    538e:	8b a7       	std	Y+43, r24	; 0x2b
    5390:	8b a5       	ldd	r24, Y+43	; 0x2b
    5392:	9c a5       	ldd	r25, Y+44	; 0x2c
    5394:	01 97       	sbiw	r24, 0x01	; 1
    5396:	f1 f7       	brne	.-4      	; 0x5394 <STEPPER_u8Move+0x7cc>
    5398:	9c a7       	std	Y+44, r25	; 0x2c
    539a:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(100);
			//Step 2 0x06 --> step angle * 2
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	60 e0       	ldi	r22, 0x00	; 0
    53a0:	40 e0       	ldi	r20, 0x00	; 0
    53a2:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    53a6:	81 e0       	ldi	r24, 0x01	; 1
    53a8:	61 e0       	ldi	r22, 0x01	; 1
    53aa:	41 e0       	ldi	r20, 0x01	; 1
    53ac:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    53b0:	81 e0       	ldi	r24, 0x01	; 1
    53b2:	62 e0       	ldi	r22, 0x02	; 2
    53b4:	41 e0       	ldi	r20, 0x01	; 1
    53b6:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    53ba:	81 e0       	ldi	r24, 0x01	; 1
    53bc:	63 e0       	ldi	r22, 0x03	; 3
    53be:	40 e0       	ldi	r20, 0x00	; 0
    53c0:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    53c4:	80 e0       	ldi	r24, 0x00	; 0
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	a8 ec       	ldi	r26, 0xC8	; 200
    53ca:	b2 e4       	ldi	r27, 0x42	; 66
    53cc:	8f a3       	std	Y+39, r24	; 0x27
    53ce:	98 a7       	std	Y+40, r25	; 0x28
    53d0:	a9 a7       	std	Y+41, r26	; 0x29
    53d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53d4:	6f a1       	ldd	r22, Y+39	; 0x27
    53d6:	78 a5       	ldd	r23, Y+40	; 0x28
    53d8:	89 a5       	ldd	r24, Y+41	; 0x29
    53da:	9a a5       	ldd	r25, Y+42	; 0x2a
    53dc:	20 e0       	ldi	r18, 0x00	; 0
    53de:	30 e0       	ldi	r19, 0x00	; 0
    53e0:	4a ef       	ldi	r20, 0xFA	; 250
    53e2:	54 e4       	ldi	r21, 0x44	; 68
    53e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53e8:	dc 01       	movw	r26, r24
    53ea:	cb 01       	movw	r24, r22
    53ec:	8b a3       	std	Y+35, r24	; 0x23
    53ee:	9c a3       	std	Y+36, r25	; 0x24
    53f0:	ad a3       	std	Y+37, r26	; 0x25
    53f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    53f4:	6b a1       	ldd	r22, Y+35	; 0x23
    53f6:	7c a1       	ldd	r23, Y+36	; 0x24
    53f8:	8d a1       	ldd	r24, Y+37	; 0x25
    53fa:	9e a1       	ldd	r25, Y+38	; 0x26
    53fc:	20 e0       	ldi	r18, 0x00	; 0
    53fe:	30 e0       	ldi	r19, 0x00	; 0
    5400:	40 e8       	ldi	r20, 0x80	; 128
    5402:	5f e3       	ldi	r21, 0x3F	; 63
    5404:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5408:	88 23       	and	r24, r24
    540a:	2c f4       	brge	.+10     	; 0x5416 <STEPPER_u8Move+0x84e>
		__ticks = 1;
    540c:	81 e0       	ldi	r24, 0x01	; 1
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	9a a3       	std	Y+34, r25	; 0x22
    5412:	89 a3       	std	Y+33, r24	; 0x21
    5414:	3f c0       	rjmp	.+126    	; 0x5494 <STEPPER_u8Move+0x8cc>
	else if (__tmp > 65535)
    5416:	6b a1       	ldd	r22, Y+35	; 0x23
    5418:	7c a1       	ldd	r23, Y+36	; 0x24
    541a:	8d a1       	ldd	r24, Y+37	; 0x25
    541c:	9e a1       	ldd	r25, Y+38	; 0x26
    541e:	20 e0       	ldi	r18, 0x00	; 0
    5420:	3f ef       	ldi	r19, 0xFF	; 255
    5422:	4f e7       	ldi	r20, 0x7F	; 127
    5424:	57 e4       	ldi	r21, 0x47	; 71
    5426:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    542a:	18 16       	cp	r1, r24
    542c:	4c f5       	brge	.+82     	; 0x5480 <STEPPER_u8Move+0x8b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    542e:	6f a1       	ldd	r22, Y+39	; 0x27
    5430:	78 a5       	ldd	r23, Y+40	; 0x28
    5432:	89 a5       	ldd	r24, Y+41	; 0x29
    5434:	9a a5       	ldd	r25, Y+42	; 0x2a
    5436:	20 e0       	ldi	r18, 0x00	; 0
    5438:	30 e0       	ldi	r19, 0x00	; 0
    543a:	40 e2       	ldi	r20, 0x20	; 32
    543c:	51 e4       	ldi	r21, 0x41	; 65
    543e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5442:	dc 01       	movw	r26, r24
    5444:	cb 01       	movw	r24, r22
    5446:	bc 01       	movw	r22, r24
    5448:	cd 01       	movw	r24, r26
    544a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    544e:	dc 01       	movw	r26, r24
    5450:	cb 01       	movw	r24, r22
    5452:	9a a3       	std	Y+34, r25	; 0x22
    5454:	89 a3       	std	Y+33, r24	; 0x21
    5456:	0f c0       	rjmp	.+30     	; 0x5476 <STEPPER_u8Move+0x8ae>
    5458:	88 ec       	ldi	r24, 0xC8	; 200
    545a:	90 e0       	ldi	r25, 0x00	; 0
    545c:	98 a3       	std	Y+32, r25	; 0x20
    545e:	8f 8f       	std	Y+31, r24	; 0x1f
    5460:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5462:	98 a1       	ldd	r25, Y+32	; 0x20
    5464:	01 97       	sbiw	r24, 0x01	; 1
    5466:	f1 f7       	brne	.-4      	; 0x5464 <STEPPER_u8Move+0x89c>
    5468:	98 a3       	std	Y+32, r25	; 0x20
    546a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    546c:	89 a1       	ldd	r24, Y+33	; 0x21
    546e:	9a a1       	ldd	r25, Y+34	; 0x22
    5470:	01 97       	sbiw	r24, 0x01	; 1
    5472:	9a a3       	std	Y+34, r25	; 0x22
    5474:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5476:	89 a1       	ldd	r24, Y+33	; 0x21
    5478:	9a a1       	ldd	r25, Y+34	; 0x22
    547a:	00 97       	sbiw	r24, 0x00	; 0
    547c:	69 f7       	brne	.-38     	; 0x5458 <STEPPER_u8Move+0x890>
    547e:	14 c0       	rjmp	.+40     	; 0x54a8 <STEPPER_u8Move+0x8e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5480:	6b a1       	ldd	r22, Y+35	; 0x23
    5482:	7c a1       	ldd	r23, Y+36	; 0x24
    5484:	8d a1       	ldd	r24, Y+37	; 0x25
    5486:	9e a1       	ldd	r25, Y+38	; 0x26
    5488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    548c:	dc 01       	movw	r26, r24
    548e:	cb 01       	movw	r24, r22
    5490:	9a a3       	std	Y+34, r25	; 0x22
    5492:	89 a3       	std	Y+33, r24	; 0x21
    5494:	89 a1       	ldd	r24, Y+33	; 0x21
    5496:	9a a1       	ldd	r25, Y+34	; 0x22
    5498:	9e 8f       	std	Y+30, r25	; 0x1e
    549a:	8d 8f       	std	Y+29, r24	; 0x1d
    549c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    549e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    54a0:	01 97       	sbiw	r24, 0x01	; 1
    54a2:	f1 f7       	brne	.-4      	; 0x54a0 <STEPPER_u8Move+0x8d8>
    54a4:	9e 8f       	std	Y+30, r25	; 0x1e
    54a6:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(100);
			//Step 3 0x03 --> step angle * 3
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    54a8:	81 e0       	ldi	r24, 0x01	; 1
    54aa:	60 e0       	ldi	r22, 0x00	; 0
    54ac:	41 e0       	ldi	r20, 0x01	; 1
    54ae:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    54b2:	81 e0       	ldi	r24, 0x01	; 1
    54b4:	61 e0       	ldi	r22, 0x01	; 1
    54b6:	41 e0       	ldi	r20, 0x01	; 1
    54b8:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	62 e0       	ldi	r22, 0x02	; 2
    54c0:	40 e0       	ldi	r20, 0x00	; 0
    54c2:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    54c6:	81 e0       	ldi	r24, 0x01	; 1
    54c8:	63 e0       	ldi	r22, 0x03	; 3
    54ca:	40 e0       	ldi	r20, 0x00	; 0
    54cc:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    54d0:	80 e0       	ldi	r24, 0x00	; 0
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	a8 ec       	ldi	r26, 0xC8	; 200
    54d6:	b2 e4       	ldi	r27, 0x42	; 66
    54d8:	89 8f       	std	Y+25, r24	; 0x19
    54da:	9a 8f       	std	Y+26, r25	; 0x1a
    54dc:	ab 8f       	std	Y+27, r26	; 0x1b
    54de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    54e0:	69 8d       	ldd	r22, Y+25	; 0x19
    54e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    54e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    54e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    54e8:	20 e0       	ldi	r18, 0x00	; 0
    54ea:	30 e0       	ldi	r19, 0x00	; 0
    54ec:	4a ef       	ldi	r20, 0xFA	; 250
    54ee:	54 e4       	ldi	r21, 0x44	; 68
    54f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    54f4:	dc 01       	movw	r26, r24
    54f6:	cb 01       	movw	r24, r22
    54f8:	8d 8b       	std	Y+21, r24	; 0x15
    54fa:	9e 8b       	std	Y+22, r25	; 0x16
    54fc:	af 8b       	std	Y+23, r26	; 0x17
    54fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5500:	6d 89       	ldd	r22, Y+21	; 0x15
    5502:	7e 89       	ldd	r23, Y+22	; 0x16
    5504:	8f 89       	ldd	r24, Y+23	; 0x17
    5506:	98 8d       	ldd	r25, Y+24	; 0x18
    5508:	20 e0       	ldi	r18, 0x00	; 0
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	40 e8       	ldi	r20, 0x80	; 128
    550e:	5f e3       	ldi	r21, 0x3F	; 63
    5510:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5514:	88 23       	and	r24, r24
    5516:	2c f4       	brge	.+10     	; 0x5522 <STEPPER_u8Move+0x95a>
		__ticks = 1;
    5518:	81 e0       	ldi	r24, 0x01	; 1
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	9c 8b       	std	Y+20, r25	; 0x14
    551e:	8b 8b       	std	Y+19, r24	; 0x13
    5520:	3f c0       	rjmp	.+126    	; 0x55a0 <STEPPER_u8Move+0x9d8>
	else if (__tmp > 65535)
    5522:	6d 89       	ldd	r22, Y+21	; 0x15
    5524:	7e 89       	ldd	r23, Y+22	; 0x16
    5526:	8f 89       	ldd	r24, Y+23	; 0x17
    5528:	98 8d       	ldd	r25, Y+24	; 0x18
    552a:	20 e0       	ldi	r18, 0x00	; 0
    552c:	3f ef       	ldi	r19, 0xFF	; 255
    552e:	4f e7       	ldi	r20, 0x7F	; 127
    5530:	57 e4       	ldi	r21, 0x47	; 71
    5532:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5536:	18 16       	cp	r1, r24
    5538:	4c f5       	brge	.+82     	; 0x558c <STEPPER_u8Move+0x9c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    553a:	69 8d       	ldd	r22, Y+25	; 0x19
    553c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    553e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5542:	20 e0       	ldi	r18, 0x00	; 0
    5544:	30 e0       	ldi	r19, 0x00	; 0
    5546:	40 e2       	ldi	r20, 0x20	; 32
    5548:	51 e4       	ldi	r21, 0x41	; 65
    554a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    554e:	dc 01       	movw	r26, r24
    5550:	cb 01       	movw	r24, r22
    5552:	bc 01       	movw	r22, r24
    5554:	cd 01       	movw	r24, r26
    5556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    555a:	dc 01       	movw	r26, r24
    555c:	cb 01       	movw	r24, r22
    555e:	9c 8b       	std	Y+20, r25	; 0x14
    5560:	8b 8b       	std	Y+19, r24	; 0x13
    5562:	0f c0       	rjmp	.+30     	; 0x5582 <STEPPER_u8Move+0x9ba>
    5564:	88 ec       	ldi	r24, 0xC8	; 200
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	9a 8b       	std	Y+18, r25	; 0x12
    556a:	89 8b       	std	Y+17, r24	; 0x11
    556c:	89 89       	ldd	r24, Y+17	; 0x11
    556e:	9a 89       	ldd	r25, Y+18	; 0x12
    5570:	01 97       	sbiw	r24, 0x01	; 1
    5572:	f1 f7       	brne	.-4      	; 0x5570 <STEPPER_u8Move+0x9a8>
    5574:	9a 8b       	std	Y+18, r25	; 0x12
    5576:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5578:	8b 89       	ldd	r24, Y+19	; 0x13
    557a:	9c 89       	ldd	r25, Y+20	; 0x14
    557c:	01 97       	sbiw	r24, 0x01	; 1
    557e:	9c 8b       	std	Y+20, r25	; 0x14
    5580:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5582:	8b 89       	ldd	r24, Y+19	; 0x13
    5584:	9c 89       	ldd	r25, Y+20	; 0x14
    5586:	00 97       	sbiw	r24, 0x00	; 0
    5588:	69 f7       	brne	.-38     	; 0x5564 <STEPPER_u8Move+0x99c>
    558a:	14 c0       	rjmp	.+40     	; 0x55b4 <STEPPER_u8Move+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    558c:	6d 89       	ldd	r22, Y+21	; 0x15
    558e:	7e 89       	ldd	r23, Y+22	; 0x16
    5590:	8f 89       	ldd	r24, Y+23	; 0x17
    5592:	98 8d       	ldd	r25, Y+24	; 0x18
    5594:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5598:	dc 01       	movw	r26, r24
    559a:	cb 01       	movw	r24, r22
    559c:	9c 8b       	std	Y+20, r25	; 0x14
    559e:	8b 8b       	std	Y+19, r24	; 0x13
    55a0:	8b 89       	ldd	r24, Y+19	; 0x13
    55a2:	9c 89       	ldd	r25, Y+20	; 0x14
    55a4:	98 8b       	std	Y+16, r25	; 0x10
    55a6:	8f 87       	std	Y+15, r24	; 0x0f
    55a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    55aa:	98 89       	ldd	r25, Y+16	; 0x10
    55ac:	01 97       	sbiw	r24, 0x01	; 1
    55ae:	f1 f7       	brne	.-4      	; 0x55ac <STEPPER_u8Move+0x9e4>
    55b0:	98 8b       	std	Y+16, r25	; 0x10
    55b2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			//Step 4 0x09 --> step angle * 4
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    55b4:	81 e0       	ldi	r24, 0x01	; 1
    55b6:	60 e0       	ldi	r22, 0x00	; 0
    55b8:	41 e0       	ldi	r20, 0x01	; 1
    55ba:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    55be:	81 e0       	ldi	r24, 0x01	; 1
    55c0:	61 e0       	ldi	r22, 0x01	; 1
    55c2:	40 e0       	ldi	r20, 0x00	; 0
    55c4:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    55c8:	81 e0       	ldi	r24, 0x01	; 1
    55ca:	62 e0       	ldi	r22, 0x02	; 2
    55cc:	40 e0       	ldi	r20, 0x00	; 0
    55ce:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    55d2:	81 e0       	ldi	r24, 0x01	; 1
    55d4:	63 e0       	ldi	r22, 0x03	; 3
    55d6:	41 e0       	ldi	r20, 0x01	; 1
    55d8:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_u8SetPinValue>
    55dc:	80 e0       	ldi	r24, 0x00	; 0
    55de:	90 e0       	ldi	r25, 0x00	; 0
    55e0:	a8 ec       	ldi	r26, 0xC8	; 200
    55e2:	b2 e4       	ldi	r27, 0x42	; 66
    55e4:	8b 87       	std	Y+11, r24	; 0x0b
    55e6:	9c 87       	std	Y+12, r25	; 0x0c
    55e8:	ad 87       	std	Y+13, r26	; 0x0d
    55ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    55ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    55ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    55f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    55f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    55f4:	20 e0       	ldi	r18, 0x00	; 0
    55f6:	30 e0       	ldi	r19, 0x00	; 0
    55f8:	4a ef       	ldi	r20, 0xFA	; 250
    55fa:	54 e4       	ldi	r21, 0x44	; 68
    55fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5600:	dc 01       	movw	r26, r24
    5602:	cb 01       	movw	r24, r22
    5604:	8f 83       	std	Y+7, r24	; 0x07
    5606:	98 87       	std	Y+8, r25	; 0x08
    5608:	a9 87       	std	Y+9, r26	; 0x09
    560a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    560c:	6f 81       	ldd	r22, Y+7	; 0x07
    560e:	78 85       	ldd	r23, Y+8	; 0x08
    5610:	89 85       	ldd	r24, Y+9	; 0x09
    5612:	9a 85       	ldd	r25, Y+10	; 0x0a
    5614:	20 e0       	ldi	r18, 0x00	; 0
    5616:	30 e0       	ldi	r19, 0x00	; 0
    5618:	40 e8       	ldi	r20, 0x80	; 128
    561a:	5f e3       	ldi	r21, 0x3F	; 63
    561c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5620:	88 23       	and	r24, r24
    5622:	2c f4       	brge	.+10     	; 0x562e <STEPPER_u8Move+0xa66>
		__ticks = 1;
    5624:	81 e0       	ldi	r24, 0x01	; 1
    5626:	90 e0       	ldi	r25, 0x00	; 0
    5628:	9e 83       	std	Y+6, r25	; 0x06
    562a:	8d 83       	std	Y+5, r24	; 0x05
    562c:	3f c0       	rjmp	.+126    	; 0x56ac <STEPPER_u8Move+0xae4>
	else if (__tmp > 65535)
    562e:	6f 81       	ldd	r22, Y+7	; 0x07
    5630:	78 85       	ldd	r23, Y+8	; 0x08
    5632:	89 85       	ldd	r24, Y+9	; 0x09
    5634:	9a 85       	ldd	r25, Y+10	; 0x0a
    5636:	20 e0       	ldi	r18, 0x00	; 0
    5638:	3f ef       	ldi	r19, 0xFF	; 255
    563a:	4f e7       	ldi	r20, 0x7F	; 127
    563c:	57 e4       	ldi	r21, 0x47	; 71
    563e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5642:	18 16       	cp	r1, r24
    5644:	4c f5       	brge	.+82     	; 0x5698 <STEPPER_u8Move+0xad0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5646:	6b 85       	ldd	r22, Y+11	; 0x0b
    5648:	7c 85       	ldd	r23, Y+12	; 0x0c
    564a:	8d 85       	ldd	r24, Y+13	; 0x0d
    564c:	9e 85       	ldd	r25, Y+14	; 0x0e
    564e:	20 e0       	ldi	r18, 0x00	; 0
    5650:	30 e0       	ldi	r19, 0x00	; 0
    5652:	40 e2       	ldi	r20, 0x20	; 32
    5654:	51 e4       	ldi	r21, 0x41	; 65
    5656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    565a:	dc 01       	movw	r26, r24
    565c:	cb 01       	movw	r24, r22
    565e:	bc 01       	movw	r22, r24
    5660:	cd 01       	movw	r24, r26
    5662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5666:	dc 01       	movw	r26, r24
    5668:	cb 01       	movw	r24, r22
    566a:	9e 83       	std	Y+6, r25	; 0x06
    566c:	8d 83       	std	Y+5, r24	; 0x05
    566e:	0f c0       	rjmp	.+30     	; 0x568e <STEPPER_u8Move+0xac6>
    5670:	88 ec       	ldi	r24, 0xC8	; 200
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	9c 83       	std	Y+4, r25	; 0x04
    5676:	8b 83       	std	Y+3, r24	; 0x03
    5678:	8b 81       	ldd	r24, Y+3	; 0x03
    567a:	9c 81       	ldd	r25, Y+4	; 0x04
    567c:	01 97       	sbiw	r24, 0x01	; 1
    567e:	f1 f7       	brne	.-4      	; 0x567c <STEPPER_u8Move+0xab4>
    5680:	9c 83       	std	Y+4, r25	; 0x04
    5682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5684:	8d 81       	ldd	r24, Y+5	; 0x05
    5686:	9e 81       	ldd	r25, Y+6	; 0x06
    5688:	01 97       	sbiw	r24, 0x01	; 1
    568a:	9e 83       	std	Y+6, r25	; 0x06
    568c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    568e:	8d 81       	ldd	r24, Y+5	; 0x05
    5690:	9e 81       	ldd	r25, Y+6	; 0x06
    5692:	00 97       	sbiw	r24, 0x00	; 0
    5694:	69 f7       	brne	.-38     	; 0x5670 <STEPPER_u8Move+0xaa8>
    5696:	14 c0       	rjmp	.+40     	; 0x56c0 <STEPPER_u8Move+0xaf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5698:	6f 81       	ldd	r22, Y+7	; 0x07
    569a:	78 85       	ldd	r23, Y+8	; 0x08
    569c:	89 85       	ldd	r24, Y+9	; 0x09
    569e:	9a 85       	ldd	r25, Y+10	; 0x0a
    56a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    56a4:	dc 01       	movw	r26, r24
    56a6:	cb 01       	movw	r24, r22
    56a8:	9e 83       	std	Y+6, r25	; 0x06
    56aa:	8d 83       	std	Y+5, r24	; 0x05
    56ac:	8d 81       	ldd	r24, Y+5	; 0x05
    56ae:	9e 81       	ldd	r25, Y+6	; 0x06
    56b0:	9a 83       	std	Y+2, r25	; 0x02
    56b2:	89 83       	std	Y+1, r24	; 0x01
    56b4:	89 81       	ldd	r24, Y+1	; 0x01
    56b6:	9a 81       	ldd	r25, Y+2	; 0x02
    56b8:	01 97       	sbiw	r24, 0x01	; 1
    56ba:	f1 f7       	brne	.-4      	; 0x56b8 <STEPPER_u8Move+0xaf0>
    56bc:	9a 83       	std	Y+2, r25	; 0x02
    56be:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
		}
	}
	else if(direction == STEPPER_u8_CW)
	{
		for(i = 0; i < Local_u8NoOfiterations;i++)
    56c0:	de 01       	movw	r26, r28
    56c2:	af 58       	subi	r26, 0x8F	; 143
    56c4:	bf 4f       	sbci	r27, 0xFF	; 255
    56c6:	fe 01       	movw	r30, r28
    56c8:	ef 58       	subi	r30, 0x8F	; 143
    56ca:	ff 4f       	sbci	r31, 0xFF	; 255
    56cc:	80 81       	ld	r24, Z
    56ce:	8f 5f       	subi	r24, 0xFF	; 255
    56d0:	8c 93       	st	X, r24
    56d2:	fe 01       	movw	r30, r28
    56d4:	ef 58       	subi	r30, 0x8F	; 143
    56d6:	ff 4f       	sbci	r31, 0xFF	; 255
    56d8:	80 81       	ld	r24, Z
    56da:	28 2f       	mov	r18, r24
    56dc:	30 e0       	ldi	r19, 0x00	; 0
    56de:	40 e0       	ldi	r20, 0x00	; 0
    56e0:	50 e0       	ldi	r21, 0x00	; 0
    56e2:	fe 01       	movw	r30, r28
    56e4:	ee 58       	subi	r30, 0x8E	; 142
    56e6:	ff 4f       	sbci	r31, 0xFF	; 255
    56e8:	80 81       	ld	r24, Z
    56ea:	91 81       	ldd	r25, Z+1	; 0x01
    56ec:	a2 81       	ldd	r26, Z+2	; 0x02
    56ee:	b3 81       	ldd	r27, Z+3	; 0x03
    56f0:	28 17       	cp	r18, r24
    56f2:	39 07       	cpc	r19, r25
    56f4:	4a 07       	cpc	r20, r26
    56f6:	5b 07       	cpc	r21, r27
    56f8:	08 f4       	brcc	.+2      	; 0x56fc <STEPPER_u8Move+0xb34>
    56fa:	ca cd       	rjmp	.-1132   	; 0x5290 <STEPPER_u8Move+0x6c8>
    56fc:	04 c0       	rjmp	.+8      	; 0x5706 <STEPPER_u8Move+0xb3e>
			_delay_ms(100);
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    56fe:	fe 01       	movw	r30, r28
    5700:	ea 58       	subi	r30, 0x8A	; 138
    5702:	ff 4f       	sbci	r31, 0xFF	; 255
    5704:	10 82       	st	Z, r1
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
	}
#endif
	return Local_u8ErrorState;
    5706:	fe 01       	movw	r30, r28
    5708:	ea 58       	subi	r30, 0x8A	; 138
    570a:	ff 4f       	sbci	r31, 0xFF	; 255
    570c:	80 81       	ld	r24, Z
}
    570e:	c7 58       	subi	r28, 0x87	; 135
    5710:	df 4f       	sbci	r29, 0xFF	; 255
    5712:	0f b6       	in	r0, 0x3f	; 63
    5714:	f8 94       	cli
    5716:	de bf       	out	0x3e, r29	; 62
    5718:	0f be       	out	0x3f, r0	; 63
    571a:	cd bf       	out	0x3d, r28	; 61
    571c:	cf 91       	pop	r28
    571e:	df 91       	pop	r29
    5720:	1f 91       	pop	r17
    5722:	0f 91       	pop	r16
    5724:	08 95       	ret

00005726 <TIMERS_voidTimer0Init>:
static void (*TIMERS_pfTimer1CTC_COMPA)(void) = NULL;
static void (*TIMERS_pfTimer1CAPT)(void) = NULL;
static void (*TIMERS_pfTimer1CTC_COMPB)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
    5726:	df 93       	push	r29
    5728:	cf 93       	push	r28
    572a:	cd b7       	in	r28, 0x3d	; 61
    572c:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Normal Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Select Mode => CTC Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
    572e:	a3 e5       	ldi	r26, 0x53	; 83
    5730:	b0 e0       	ldi	r27, 0x00	; 0
    5732:	e3 e5       	ldi	r30, 0x53	; 83
    5734:	f0 e0       	ldi	r31, 0x00	; 0
    5736:	80 81       	ld	r24, Z
    5738:	8f 7b       	andi	r24, 0xBF	; 191
    573a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    573c:	a3 e5       	ldi	r26, 0x53	; 83
    573e:	b0 e0       	ldi	r27, 0x00	; 0
    5740:	e3 e5       	ldi	r30, 0x53	; 83
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	80 81       	ld	r24, Z
    5746:	88 60       	ori	r24, 0x08	; 8
    5748:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,0);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Enable CTC Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,1);
    574a:	a9 e5       	ldi	r26, 0x59	; 89
    574c:	b0 e0       	ldi	r27, 0x00	; 0
    574e:	e9 e5       	ldi	r30, 0x59	; 89
    5750:	f0 e0       	ldi	r31, 0x00	; 0
    5752:	80 81       	ld	r24, Z
    5754:	82 60       	ori	r24, 0x02	; 2
    5756:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Set Preload Value */
	TIMERS_u8_TCNT0_REG = TIMERS_u8_TIMER0_PRELOAD_VALUE;
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMERS_u8_TIMER0_COMPARE_MATCH_OCR0;
    5758:	ec e5       	ldi	r30, 0x5C	; 92
    575a:	f0 e0       	ldi	r31, 0x00	; 0
    575c:	83 e6       	ldi	r24, 0x63	; 99
    575e:	80 83       	st	Z, r24
#endif

#if TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR0_REG,5);
    5760:	a3 e5       	ldi	r26, 0x53	; 83
    5762:	b0 e0       	ldi	r27, 0x00	; 0
    5764:	e3 e5       	ldi	r30, 0x53	; 83
    5766:	f0 e0       	ldi	r31, 0x00	; 0
    5768:	80 81       	ld	r24, Z
    576a:	8f 7d       	andi	r24, 0xDF	; 223
    576c:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
    576e:	a3 e5       	ldi	r26, 0x53	; 83
    5770:	b0 e0       	ldi	r27, 0x00	; 0
    5772:	e3 e5       	ldi	r30, 0x53	; 83
    5774:	f0 e0       	ldi	r31, 0x00	; 0
    5776:	80 81       	ld	r24, Z
    5778:	8f 7e       	andi	r24, 0xEF	; 239
    577a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#elif TIMERS_u8_TIMER0_CLOCK_SOURCE == TIMERS_u8_TIMER0_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    577c:	a3 e5       	ldi	r26, 0x53	; 83
    577e:	b0 e0       	ldi	r27, 0x00	; 0
    5780:	e3 e5       	ldi	r30, 0x53	; 83
    5782:	f0 e0       	ldi	r31, 0x00	; 0
    5784:	80 81       	ld	r24, Z
    5786:	8b 7f       	andi	r24, 0xFB	; 251
    5788:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
    578a:	a3 e5       	ldi	r26, 0x53	; 83
    578c:	b0 e0       	ldi	r27, 0x00	; 0
    578e:	e3 e5       	ldi	r30, 0x53	; 83
    5790:	f0 e0       	ldi	r31, 0x00	; 0
    5792:	80 81       	ld	r24, Z
    5794:	82 60       	ori	r24, 0x02	; 2
    5796:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
    5798:	a3 e5       	ldi	r26, 0x53	; 83
    579a:	b0 e0       	ldi	r27, 0x00	; 0
    579c:	e3 e5       	ldi	r30, 0x53	; 83
    579e:	f0 e0       	ldi	r31, 0x00	; 0
    57a0:	80 81       	ld	r24, Z
    57a2:	8e 7f       	andi	r24, 0xFE	; 254
    57a4:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,2);
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#endif

}
    57a6:	cf 91       	pop	r28
    57a8:	df 91       	pop	r29
    57aa:	08 95       	ret

000057ac <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void)
{
    57ac:	df 93       	push	r29
    57ae:	cf 93       	push	r28
    57b0:	cd b7       	in	r28, 0x3d	; 61
    57b2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
	CLR_BIT(TIMERS_u8_TCCR1A_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_FAST_PWM_ICR1_MODE
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    57b4:	af e4       	ldi	r26, 0x4F	; 79
    57b6:	b0 e0       	ldi	r27, 0x00	; 0
    57b8:	ef e4       	ldi	r30, 0x4F	; 79
    57ba:	f0 e0       	ldi	r31, 0x00	; 0
    57bc:	80 81       	ld	r24, Z
    57be:	8e 7f       	andi	r24, 0xFE	; 254
    57c0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
    57c2:	af e4       	ldi	r26, 0x4F	; 79
    57c4:	b0 e0       	ldi	r27, 0x00	; 0
    57c6:	ef e4       	ldi	r30, 0x4F	; 79
    57c8:	f0 e0       	ldi	r31, 0x00	; 0
    57ca:	80 81       	ld	r24, Z
    57cc:	82 60       	ori	r24, 0x02	; 2
    57ce:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
    57d0:	ae e4       	ldi	r26, 0x4E	; 78
    57d2:	b0 e0       	ldi	r27, 0x00	; 0
    57d4:	ee e4       	ldi	r30, 0x4E	; 78
    57d6:	f0 e0       	ldi	r31, 0x00	; 0
    57d8:	80 81       	ld	r24, Z
    57da:	88 60       	ori	r24, 0x08	; 8
    57dc:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
    57de:	ae e4       	ldi	r26, 0x4E	; 78
    57e0:	b0 e0       	ldi	r27, 0x00	; 0
    57e2:	ee e4       	ldi	r30, 0x4E	; 78
    57e4:	f0 e0       	ldi	r31, 0x00	; 0
    57e6:	80 81       	ld	r24, Z
    57e8:	80 61       	ori	r24, 0x10	; 16
    57ea:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_CTC_OCR1B_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_FAST_PWM_ICR1_MODE
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = TIMERS_u16_TIMER1_TOP_VALUE_ICR1;
    57ec:	e6 e4       	ldi	r30, 0x46	; 70
    57ee:	f0 e0       	ldi	r31, 0x00	; 0
    57f0:	8f e1       	ldi	r24, 0x1F	; 31
    57f2:	9e e4       	ldi	r25, 0x4E	; 78
    57f4:	91 83       	std	Z+1, r25	; 0x01
    57f6:	80 83       	st	Z, r24
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_CHANNEL == TIMERS_u8_TIMER1_CHANNEL_A
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
    57f8:	ea e4       	ldi	r30, 0x4A	; 74
    57fa:	f0 e0       	ldi	r31, 0x00	; 0
    57fc:	87 ee       	ldi	r24, 0xE7	; 231
    57fe:	93 e0       	ldi	r25, 0x03	; 3
    5800:	91 83       	std	Z+1, r25	; 0x01
    5802:	80 83       	st	Z, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#elif TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_SET
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#elif TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_NON_INVERTING
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    5804:	af e4       	ldi	r26, 0x4F	; 79
    5806:	b0 e0       	ldi	r27, 0x00	; 0
    5808:	ef e4       	ldi	r30, 0x4F	; 79
    580a:	f0 e0       	ldi	r31, 0x00	; 0
    580c:	80 81       	ld	r24, Z
    580e:	8f 7b       	andi	r24, 0xBF	; 191
    5810:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
    5812:	af e4       	ldi	r26, 0x4F	; 79
    5814:	b0 e0       	ldi	r27, 0x00	; 0
    5816:	ef e4       	ldi	r30, 0x4F	; 79
    5818:	f0 e0       	ldi	r31, 0x00	; 0
    581a:	80 81       	ld	r24, Z
    581c:	80 68       	ori	r24, 0x80	; 128
    581e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#endif
/* Compare Match Output Mode unit B */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_B == TIMERS_u8_TIMER1_OC1B_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,4);
    5820:	af e4       	ldi	r26, 0x4F	; 79
    5822:	b0 e0       	ldi	r27, 0x00	; 0
    5824:	ef e4       	ldi	r30, 0x4F	; 79
    5826:	f0 e0       	ldi	r31, 0x00	; 0
    5828:	80 81       	ld	r24, Z
    582a:	8f 7e       	andi	r24, 0xEF	; 239
    582c:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,5);
    582e:	af e4       	ldi	r26, 0x4F	; 79
    5830:	b0 e0       	ldi	r27, 0x00	; 0
    5832:	ef e4       	ldi	r30, 0x4F	; 79
    5834:	f0 e0       	ldi	r31, 0x00	; 0
    5836:	80 81       	ld	r24, Z
    5838:	8f 7d       	andi	r24, 0xDF	; 223
    583a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
	CLR_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    583c:	ae e4       	ldi	r26, 0x4E	; 78
    583e:	b0 e0       	ldi	r27, 0x00	; 0
    5840:	ee e4       	ldi	r30, 0x4E	; 78
    5842:	f0 e0       	ldi	r31, 0x00	; 0
    5844:	80 81       	ld	r24, Z
    5846:	8b 7f       	andi	r24, 0xFB	; 251
    5848:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
    584a:	ae e4       	ldi	r26, 0x4E	; 78
    584c:	b0 e0       	ldi	r27, 0x00	; 0
    584e:	ee e4       	ldi	r30, 0x4E	; 78
    5850:	f0 e0       	ldi	r31, 0x00	; 0
    5852:	80 81       	ld	r24, Z
    5854:	82 60       	ori	r24, 0x02	; 2
    5856:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
    5858:	ae e4       	ldi	r26, 0x4E	; 78
    585a:	b0 e0       	ldi	r27, 0x00	; 0
    585c:	ee e4       	ldi	r30, 0x4E	; 78
    585e:	f0 e0       	ldi	r31, 0x00	; 0
    5860:	80 81       	ld	r24, Z
    5862:	8e 7f       	andi	r24, 0xFE	; 254
    5864:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_T1_PIN_RISING_EDGE
	SET_BIT(TIMERS_u8_TCCR1B_REG,2);
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#endif
}
    5866:	cf 91       	pop	r28
    5868:	df 91       	pop	r29
    586a:	08 95       	ret

0000586c <TIMERS_voidTimer1SetCompareMatchValueUnitA>:
void TIMERS_voidTimer1SetCompareMatchValueUnitA(u16 Copy_u16OCR1AValue)
{
    586c:	df 93       	push	r29
    586e:	cf 93       	push	r28
    5870:	00 d0       	rcall	.+0      	; 0x5872 <TIMERS_voidTimer1SetCompareMatchValueUnitA+0x6>
    5872:	cd b7       	in	r28, 0x3d	; 61
    5874:	de b7       	in	r29, 0x3e	; 62
    5876:	9a 83       	std	Y+2, r25	; 0x02
    5878:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u16OCR1AValue;
    587a:	ea e4       	ldi	r30, 0x4A	; 74
    587c:	f0 e0       	ldi	r31, 0x00	; 0
    587e:	89 81       	ldd	r24, Y+1	; 0x01
    5880:	9a 81       	ldd	r25, Y+2	; 0x02
    5882:	91 83       	std	Z+1, r25	; 0x01
    5884:	80 83       	st	Z, r24
}
    5886:	0f 90       	pop	r0
    5888:	0f 90       	pop	r0
    588a:	cf 91       	pop	r28
    588c:	df 91       	pop	r29
    588e:	08 95       	ret

00005890 <TIMERS_voidTimer1SetCompareMatchValueUnitB>:

void TIMERS_voidTimer1SetCompareMatchValueUnitB(u16 Copy_u16OCR1BValue)
{
    5890:	df 93       	push	r29
    5892:	cf 93       	push	r28
    5894:	00 d0       	rcall	.+0      	; 0x5896 <TIMERS_voidTimer1SetCompareMatchValueUnitB+0x6>
    5896:	cd b7       	in	r28, 0x3d	; 61
    5898:	de b7       	in	r29, 0x3e	; 62
    589a:	9a 83       	std	Y+2, r25	; 0x02
    589c:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1B_REG = Copy_u16OCR1BValue;
    589e:	e8 e4       	ldi	r30, 0x48	; 72
    58a0:	f0 e0       	ldi	r31, 0x00	; 0
    58a2:	89 81       	ldd	r24, Y+1	; 0x01
    58a4:	9a 81       	ldd	r25, Y+2	; 0x02
    58a6:	91 83       	std	Z+1, r25	; 0x01
    58a8:	80 83       	st	Z, r24
}
    58aa:	0f 90       	pop	r0
    58ac:	0f 90       	pop	r0
    58ae:	cf 91       	pop	r28
    58b0:	df 91       	pop	r29
    58b2:	08 95       	ret

000058b4 <TIMERS_u8GetTCNT0Value>:
u8 TIMERS_u8GetTCNT0Value(u8 * Copy_pu8Value)
{
    58b4:	df 93       	push	r29
    58b6:	cf 93       	push	r28
    58b8:	00 d0       	rcall	.+0      	; 0x58ba <TIMERS_u8GetTCNT0Value+0x6>
    58ba:	0f 92       	push	r0
    58bc:	cd b7       	in	r28, 0x3d	; 61
    58be:	de b7       	in	r29, 0x3e	; 62
    58c0:	9b 83       	std	Y+3, r25	; 0x03
    58c2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    58c4:	81 e0       	ldi	r24, 0x01	; 1
    58c6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL)
    58c8:	8a 81       	ldd	r24, Y+2	; 0x02
    58ca:	9b 81       	ldd	r25, Y+3	; 0x03
    58cc:	00 97       	sbiw	r24, 0x00	; 0
    58ce:	39 f0       	breq	.+14     	; 0x58de <TIMERS_u8GetTCNT0Value+0x2a>
	{
		*Copy_pu8Value = TIMERS_u8_TCNT0_REG;
    58d0:	e2 e5       	ldi	r30, 0x52	; 82
    58d2:	f0 e0       	ldi	r31, 0x00	; 0
    58d4:	80 81       	ld	r24, Z
    58d6:	ea 81       	ldd	r30, Y+2	; 0x02
    58d8:	fb 81       	ldd	r31, Y+3	; 0x03
    58da:	80 83       	st	Z, r24
    58dc:	01 c0       	rjmp	.+2      	; 0x58e0 <TIMERS_u8GetTCNT0Value+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    58de:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    58e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    58e2:	0f 90       	pop	r0
    58e4:	0f 90       	pop	r0
    58e6:	0f 90       	pop	r0
    58e8:	cf 91       	pop	r28
    58ea:	df 91       	pop	r29
    58ec:	08 95       	ret

000058ee <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
    58ee:	df 93       	push	r29
    58f0:	cf 93       	push	r28
    58f2:	0f 92       	push	r0
    58f4:	cd b7       	in	r28, 0x3d	; 61
    58f6:	de b7       	in	r29, 0x3e	; 62
    58f8:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    58fa:	ec e5       	ldi	r30, 0x5C	; 92
    58fc:	f0 e0       	ldi	r31, 0x00	; 0
    58fe:	89 81       	ldd	r24, Y+1	; 0x01
    5900:	80 83       	st	Z, r24
}
    5902:	0f 90       	pop	r0
    5904:	cf 91       	pop	r28
    5906:	df 91       	pop	r29
    5908:	08 95       	ret

0000590a <TIMERS_voidTimer1SetICR1Value>:
void TIMERS_voidTimer1SetICR1Value(u16 Copy_u16ICR1Value)
{
    590a:	df 93       	push	r29
    590c:	cf 93       	push	r28
    590e:	00 d0       	rcall	.+0      	; 0x5910 <TIMERS_voidTimer1SetICR1Value+0x6>
    5910:	cd b7       	in	r28, 0x3d	; 61
    5912:	de b7       	in	r29, 0x3e	; 62
    5914:	9a 83       	std	Y+2, r25	; 0x02
    5916:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16ICR1Value;
    5918:	e6 e4       	ldi	r30, 0x46	; 70
    591a:	f0 e0       	ldi	r31, 0x00	; 0
    591c:	89 81       	ldd	r24, Y+1	; 0x01
    591e:	9a 81       	ldd	r25, Y+2	; 0x02
    5920:	91 83       	std	Z+1, r25	; 0x01
    5922:	80 83       	st	Z, r24
}
    5924:	0f 90       	pop	r0
    5926:	0f 90       	pop	r0
    5928:	cf 91       	pop	r28
    592a:	df 91       	pop	r29
    592c:	08 95       	ret

0000592e <TIMERS_u8Timer0SetCallBack>:
u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
    592e:	df 93       	push	r29
    5930:	cf 93       	push	r28
    5932:	00 d0       	rcall	.+0      	; 0x5934 <TIMERS_u8Timer0SetCallBack+0x6>
    5934:	0f 92       	push	r0
    5936:	cd b7       	in	r28, 0x3d	; 61
    5938:	de b7       	in	r29, 0x3e	; 62
    593a:	9b 83       	std	Y+3, r25	; 0x03
    593c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    593e:	81 e0       	ldi	r24, 0x01	; 1
    5940:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    5942:	8a 81       	ldd	r24, Y+2	; 0x02
    5944:	9b 81       	ldd	r25, Y+3	; 0x03
    5946:	00 97       	sbiw	r24, 0x00	; 0
    5948:	39 f0       	breq	.+14     	; 0x5958 <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
    594a:	8a 81       	ldd	r24, Y+2	; 0x02
    594c:	9b 81       	ldd	r25, Y+3	; 0x03
    594e:	90 93 a8 02 	sts	0x02A8, r25
    5952:	80 93 a7 02 	sts	0x02A7, r24
    5956:	01 c0       	rjmp	.+2      	; 0x595a <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    5958:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    595a:	89 81       	ldd	r24, Y+1	; 0x01
}
    595c:	0f 90       	pop	r0
    595e:	0f 90       	pop	r0
    5960:	0f 90       	pop	r0
    5962:	cf 91       	pop	r28
    5964:	df 91       	pop	r29
    5966:	08 95       	ret

00005968 <TIMERS_u8Timer0CTCSetCallBack>:

u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    5968:	df 93       	push	r29
    596a:	cf 93       	push	r28
    596c:	00 d0       	rcall	.+0      	; 0x596e <TIMERS_u8Timer0CTCSetCallBack+0x6>
    596e:	0f 92       	push	r0
    5970:	cd b7       	in	r28, 0x3d	; 61
    5972:	de b7       	in	r29, 0x3e	; 62
    5974:	9b 83       	std	Y+3, r25	; 0x03
    5976:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    5978:	81 e0       	ldi	r24, 0x01	; 1
    597a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    597c:	8a 81       	ldd	r24, Y+2	; 0x02
    597e:	9b 81       	ldd	r25, Y+3	; 0x03
    5980:	00 97       	sbiw	r24, 0x00	; 0
    5982:	39 f0       	breq	.+14     	; 0x5992 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
    5984:	8a 81       	ldd	r24, Y+2	; 0x02
    5986:	9b 81       	ldd	r25, Y+3	; 0x03
    5988:	90 93 aa 02 	sts	0x02AA, r25
    598c:	80 93 a9 02 	sts	0x02A9, r24
    5990:	01 c0       	rjmp	.+2      	; 0x5994 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    5992:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    5994:	89 81       	ldd	r24, Y+1	; 0x01
}
    5996:	0f 90       	pop	r0
    5998:	0f 90       	pop	r0
    599a:	0f 90       	pop	r0
    599c:	cf 91       	pop	r28
    599e:	df 91       	pop	r29
    59a0:	08 95       	ret

000059a2 <TIMERS_u8Timer1SetCallBack>:


u8 TIMERS_u8Timer1SetCallBack(void(*Copy_pf)(void))
{
    59a2:	df 93       	push	r29
    59a4:	cf 93       	push	r28
    59a6:	00 d0       	rcall	.+0      	; 0x59a8 <TIMERS_u8Timer1SetCallBack+0x6>
    59a8:	0f 92       	push	r0
    59aa:	cd b7       	in	r28, 0x3d	; 61
    59ac:	de b7       	in	r29, 0x3e	; 62
    59ae:	9b 83       	std	Y+3, r25	; 0x03
    59b0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    59b2:	81 e0       	ldi	r24, 0x01	; 1
    59b4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    59b6:	8a 81       	ldd	r24, Y+2	; 0x02
    59b8:	9b 81       	ldd	r25, Y+3	; 0x03
    59ba:	00 97       	sbiw	r24, 0x00	; 0
    59bc:	39 f0       	breq	.+14     	; 0x59cc <TIMERS_u8Timer1SetCallBack+0x2a>
	{
		TIMERS_pfTimer1OVF = Copy_pf;
    59be:	8a 81       	ldd	r24, Y+2	; 0x02
    59c0:	9b 81       	ldd	r25, Y+3	; 0x03
    59c2:	90 93 ac 02 	sts	0x02AC, r25
    59c6:	80 93 ab 02 	sts	0x02AB, r24
    59ca:	01 c0       	rjmp	.+2      	; 0x59ce <TIMERS_u8Timer1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    59cc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    59ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    59d0:	0f 90       	pop	r0
    59d2:	0f 90       	pop	r0
    59d4:	0f 90       	pop	r0
    59d6:	cf 91       	pop	r28
    59d8:	df 91       	pop	r29
    59da:	08 95       	ret

000059dc <TIMERS_u8Timer1COMPASetCallBack>:

u8 TIMERS_u8Timer1COMPASetCallBack(void(*Copy_pf)(void))
{
    59dc:	df 93       	push	r29
    59de:	cf 93       	push	r28
    59e0:	00 d0       	rcall	.+0      	; 0x59e2 <TIMERS_u8Timer1COMPASetCallBack+0x6>
    59e2:	0f 92       	push	r0
    59e4:	cd b7       	in	r28, 0x3d	; 61
    59e6:	de b7       	in	r29, 0x3e	; 62
    59e8:	9b 83       	std	Y+3, r25	; 0x03
    59ea:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    59ec:	81 e0       	ldi	r24, 0x01	; 1
    59ee:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    59f0:	8a 81       	ldd	r24, Y+2	; 0x02
    59f2:	9b 81       	ldd	r25, Y+3	; 0x03
    59f4:	00 97       	sbiw	r24, 0x00	; 0
    59f6:	39 f0       	breq	.+14     	; 0x5a06 <TIMERS_u8Timer1COMPASetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPA = Copy_pf;
    59f8:	8a 81       	ldd	r24, Y+2	; 0x02
    59fa:	9b 81       	ldd	r25, Y+3	; 0x03
    59fc:	90 93 ae 02 	sts	0x02AE, r25
    5a00:	80 93 ad 02 	sts	0x02AD, r24
    5a04:	01 c0       	rjmp	.+2      	; 0x5a08 <TIMERS_u8Timer1COMPASetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    5a06:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    5a08:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a0a:	0f 90       	pop	r0
    5a0c:	0f 90       	pop	r0
    5a0e:	0f 90       	pop	r0
    5a10:	cf 91       	pop	r28
    5a12:	df 91       	pop	r29
    5a14:	08 95       	ret

00005a16 <TIMERS_u8Timer1COMPBSetCallBack>:

u8 TIMERS_u8Timer1COMPBSetCallBack(void(*Copy_pf)(void))
{
    5a16:	df 93       	push	r29
    5a18:	cf 93       	push	r28
    5a1a:	00 d0       	rcall	.+0      	; 0x5a1c <TIMERS_u8Timer1COMPBSetCallBack+0x6>
    5a1c:	0f 92       	push	r0
    5a1e:	cd b7       	in	r28, 0x3d	; 61
    5a20:	de b7       	in	r29, 0x3e	; 62
    5a22:	9b 83       	std	Y+3, r25	; 0x03
    5a24:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    5a26:	81 e0       	ldi	r24, 0x01	; 1
    5a28:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    5a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    5a2e:	00 97       	sbiw	r24, 0x00	; 0
    5a30:	39 f0       	breq	.+14     	; 0x5a40 <TIMERS_u8Timer1COMPBSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPB = Copy_pf;
    5a32:	8a 81       	ldd	r24, Y+2	; 0x02
    5a34:	9b 81       	ldd	r25, Y+3	; 0x03
    5a36:	90 93 b2 02 	sts	0x02B2, r25
    5a3a:	80 93 b1 02 	sts	0x02B1, r24
    5a3e:	01 c0       	rjmp	.+2      	; 0x5a42 <TIMERS_u8Timer1COMPBSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    5a40:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    5a42:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a44:	0f 90       	pop	r0
    5a46:	0f 90       	pop	r0
    5a48:	0f 90       	pop	r0
    5a4a:	cf 91       	pop	r28
    5a4c:	df 91       	pop	r29
    5a4e:	08 95       	ret

00005a50 <TIMERS_u8Timer1CAPTSetCallBack>:

u8 TIMERS_u8Timer1CAPTSetCallBack(void(*Copy_pf)(void))
{
    5a50:	df 93       	push	r29
    5a52:	cf 93       	push	r28
    5a54:	00 d0       	rcall	.+0      	; 0x5a56 <TIMERS_u8Timer1CAPTSetCallBack+0x6>
    5a56:	0f 92       	push	r0
    5a58:	cd b7       	in	r28, 0x3d	; 61
    5a5a:	de b7       	in	r29, 0x3e	; 62
    5a5c:	9b 83       	std	Y+3, r25	; 0x03
    5a5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    5a60:	81 e0       	ldi	r24, 0x01	; 1
    5a62:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    5a64:	8a 81       	ldd	r24, Y+2	; 0x02
    5a66:	9b 81       	ldd	r25, Y+3	; 0x03
    5a68:	00 97       	sbiw	r24, 0x00	; 0
    5a6a:	39 f0       	breq	.+14     	; 0x5a7a <TIMERS_u8Timer1CAPTSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CAPT = Copy_pf;
    5a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a6e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a70:	90 93 b0 02 	sts	0x02B0, r25
    5a74:	80 93 af 02 	sts	0x02AF, r24
    5a78:	01 c0       	rjmp	.+2      	; 0x5a7c <TIMERS_u8Timer1CAPTSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    5a7a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    5a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a7e:	0f 90       	pop	r0
    5a80:	0f 90       	pop	r0
    5a82:	0f 90       	pop	r0
    5a84:	cf 91       	pop	r28
    5a86:	df 91       	pop	r29
    5a88:	08 95       	ret

00005a8a <__vector_9>:

/* Prototype for ISR TIMER1 OVF */
void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    5a8a:	1f 92       	push	r1
    5a8c:	0f 92       	push	r0
    5a8e:	0f b6       	in	r0, 0x3f	; 63
    5a90:	0f 92       	push	r0
    5a92:	11 24       	eor	r1, r1
    5a94:	2f 93       	push	r18
    5a96:	3f 93       	push	r19
    5a98:	4f 93       	push	r20
    5a9a:	5f 93       	push	r21
    5a9c:	6f 93       	push	r22
    5a9e:	7f 93       	push	r23
    5aa0:	8f 93       	push	r24
    5aa2:	9f 93       	push	r25
    5aa4:	af 93       	push	r26
    5aa6:	bf 93       	push	r27
    5aa8:	ef 93       	push	r30
    5aaa:	ff 93       	push	r31
    5aac:	df 93       	push	r29
    5aae:	cf 93       	push	r28
    5ab0:	cd b7       	in	r28, 0x3d	; 61
    5ab2:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    5ab4:	80 91 b3 02 	lds	r24, 0x02B3
    5ab8:	90 91 b4 02 	lds	r25, 0x02B4
    5abc:	01 96       	adiw	r24, 0x01	; 1
    5abe:	90 93 b4 02 	sts	0x02B4, r25
    5ac2:	80 93 b3 02 	sts	0x02B3, r24
	if(Local_u16CounterOVF == 3907)
    5ac6:	80 91 b3 02 	lds	r24, 0x02B3
    5aca:	90 91 b4 02 	lds	r25, 0x02B4
    5ace:	2f e0       	ldi	r18, 0x0F	; 15
    5ad0:	83 34       	cpi	r24, 0x43	; 67
    5ad2:	92 07       	cpc	r25, r18
    5ad4:	a9 f4       	brne	.+42     	; 0x5b00 <__vector_9+0x76>
	{
		/* Update Preload Value */
		TIMERS_u16_TCNT1_REG = 192;
    5ad6:	ec e4       	ldi	r30, 0x4C	; 76
    5ad8:	f0 e0       	ldi	r31, 0x00	; 0
    5ada:	80 ec       	ldi	r24, 0xC0	; 192
    5adc:	90 e0       	ldi	r25, 0x00	; 0
    5ade:	91 83       	std	Z+1, r25	; 0x01
    5ae0:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    5ae2:	10 92 b4 02 	sts	0x02B4, r1
    5ae6:	10 92 b3 02 	sts	0x02B3, r1
		/* Call App Function */
		if(TIMERS_pfTimer1OVF != NULL)
    5aea:	80 91 ab 02 	lds	r24, 0x02AB
    5aee:	90 91 ac 02 	lds	r25, 0x02AC
    5af2:	00 97       	sbiw	r24, 0x00	; 0
    5af4:	29 f0       	breq	.+10     	; 0x5b00 <__vector_9+0x76>
		{
			TIMERS_pfTimer1OVF();
    5af6:	e0 91 ab 02 	lds	r30, 0x02AB
    5afa:	f0 91 ac 02 	lds	r31, 0x02AC
    5afe:	09 95       	icall
		}
	}
}
    5b00:	cf 91       	pop	r28
    5b02:	df 91       	pop	r29
    5b04:	ff 91       	pop	r31
    5b06:	ef 91       	pop	r30
    5b08:	bf 91       	pop	r27
    5b0a:	af 91       	pop	r26
    5b0c:	9f 91       	pop	r25
    5b0e:	8f 91       	pop	r24
    5b10:	7f 91       	pop	r23
    5b12:	6f 91       	pop	r22
    5b14:	5f 91       	pop	r21
    5b16:	4f 91       	pop	r20
    5b18:	3f 91       	pop	r19
    5b1a:	2f 91       	pop	r18
    5b1c:	0f 90       	pop	r0
    5b1e:	0f be       	out	0x3f, r0	; 63
    5b20:	0f 90       	pop	r0
    5b22:	1f 90       	pop	r1
    5b24:	18 95       	reti

00005b26 <__vector_8>:


/* Prototype for ISR TIMER1 COMPB */
void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    5b26:	1f 92       	push	r1
    5b28:	0f 92       	push	r0
    5b2a:	0f b6       	in	r0, 0x3f	; 63
    5b2c:	0f 92       	push	r0
    5b2e:	11 24       	eor	r1, r1
    5b30:	2f 93       	push	r18
    5b32:	3f 93       	push	r19
    5b34:	4f 93       	push	r20
    5b36:	5f 93       	push	r21
    5b38:	6f 93       	push	r22
    5b3a:	7f 93       	push	r23
    5b3c:	8f 93       	push	r24
    5b3e:	9f 93       	push	r25
    5b40:	af 93       	push	r26
    5b42:	bf 93       	push	r27
    5b44:	ef 93       	push	r30
    5b46:	ff 93       	push	r31
    5b48:	df 93       	push	r29
    5b4a:	cf 93       	push	r28
    5b4c:	cd b7       	in	r28, 0x3d	; 61
    5b4e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    5b50:	80 91 b5 02 	lds	r24, 0x02B5
    5b54:	90 91 b6 02 	lds	r25, 0x02B6
    5b58:	01 96       	adiw	r24, 0x01	; 1
    5b5a:	90 93 b6 02 	sts	0x02B6, r25
    5b5e:	80 93 b5 02 	sts	0x02B5, r24
	if(Local_u16CounterCTC == 10000)
    5b62:	80 91 b5 02 	lds	r24, 0x02B5
    5b66:	90 91 b6 02 	lds	r25, 0x02B6
    5b6a:	27 e2       	ldi	r18, 0x27	; 39
    5b6c:	80 31       	cpi	r24, 0x10	; 16
    5b6e:	92 07       	cpc	r25, r18
    5b70:	79 f4       	brne	.+30     	; 0x5b90 <__vector_8+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    5b72:	10 92 b6 02 	sts	0x02B6, r1
    5b76:	10 92 b5 02 	sts	0x02B5, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPB != NULL)
    5b7a:	80 91 b1 02 	lds	r24, 0x02B1
    5b7e:	90 91 b2 02 	lds	r25, 0x02B2
    5b82:	00 97       	sbiw	r24, 0x00	; 0
    5b84:	29 f0       	breq	.+10     	; 0x5b90 <__vector_8+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPB();
    5b86:	e0 91 b1 02 	lds	r30, 0x02B1
    5b8a:	f0 91 b2 02 	lds	r31, 0x02B2
    5b8e:	09 95       	icall
		}
	}
}
    5b90:	cf 91       	pop	r28
    5b92:	df 91       	pop	r29
    5b94:	ff 91       	pop	r31
    5b96:	ef 91       	pop	r30
    5b98:	bf 91       	pop	r27
    5b9a:	af 91       	pop	r26
    5b9c:	9f 91       	pop	r25
    5b9e:	8f 91       	pop	r24
    5ba0:	7f 91       	pop	r23
    5ba2:	6f 91       	pop	r22
    5ba4:	5f 91       	pop	r21
    5ba6:	4f 91       	pop	r20
    5ba8:	3f 91       	pop	r19
    5baa:	2f 91       	pop	r18
    5bac:	0f 90       	pop	r0
    5bae:	0f be       	out	0x3f, r0	; 63
    5bb0:	0f 90       	pop	r0
    5bb2:	1f 90       	pop	r1
    5bb4:	18 95       	reti

00005bb6 <__vector_7>:

/* Prototype for ISR TIMER1 COMPA */
void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    5bb6:	1f 92       	push	r1
    5bb8:	0f 92       	push	r0
    5bba:	0f b6       	in	r0, 0x3f	; 63
    5bbc:	0f 92       	push	r0
    5bbe:	11 24       	eor	r1, r1
    5bc0:	2f 93       	push	r18
    5bc2:	3f 93       	push	r19
    5bc4:	4f 93       	push	r20
    5bc6:	5f 93       	push	r21
    5bc8:	6f 93       	push	r22
    5bca:	7f 93       	push	r23
    5bcc:	8f 93       	push	r24
    5bce:	9f 93       	push	r25
    5bd0:	af 93       	push	r26
    5bd2:	bf 93       	push	r27
    5bd4:	ef 93       	push	r30
    5bd6:	ff 93       	push	r31
    5bd8:	df 93       	push	r29
    5bda:	cf 93       	push	r28
    5bdc:	cd b7       	in	r28, 0x3d	; 61
    5bde:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    5be0:	80 91 b7 02 	lds	r24, 0x02B7
    5be4:	90 91 b8 02 	lds	r25, 0x02B8
    5be8:	01 96       	adiw	r24, 0x01	; 1
    5bea:	90 93 b8 02 	sts	0x02B8, r25
    5bee:	80 93 b7 02 	sts	0x02B7, r24
	if(Local_u16CounterCTC == 10000)
    5bf2:	80 91 b7 02 	lds	r24, 0x02B7
    5bf6:	90 91 b8 02 	lds	r25, 0x02B8
    5bfa:	27 e2       	ldi	r18, 0x27	; 39
    5bfc:	80 31       	cpi	r24, 0x10	; 16
    5bfe:	92 07       	cpc	r25, r18
    5c00:	79 f4       	brne	.+30     	; 0x5c20 <__vector_7+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    5c02:	10 92 b8 02 	sts	0x02B8, r1
    5c06:	10 92 b7 02 	sts	0x02B7, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPA != NULL)
    5c0a:	80 91 ad 02 	lds	r24, 0x02AD
    5c0e:	90 91 ae 02 	lds	r25, 0x02AE
    5c12:	00 97       	sbiw	r24, 0x00	; 0
    5c14:	29 f0       	breq	.+10     	; 0x5c20 <__vector_7+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPA();
    5c16:	e0 91 ad 02 	lds	r30, 0x02AD
    5c1a:	f0 91 ae 02 	lds	r31, 0x02AE
    5c1e:	09 95       	icall
		}
	}
}
    5c20:	cf 91       	pop	r28
    5c22:	df 91       	pop	r29
    5c24:	ff 91       	pop	r31
    5c26:	ef 91       	pop	r30
    5c28:	bf 91       	pop	r27
    5c2a:	af 91       	pop	r26
    5c2c:	9f 91       	pop	r25
    5c2e:	8f 91       	pop	r24
    5c30:	7f 91       	pop	r23
    5c32:	6f 91       	pop	r22
    5c34:	5f 91       	pop	r21
    5c36:	4f 91       	pop	r20
    5c38:	3f 91       	pop	r19
    5c3a:	2f 91       	pop	r18
    5c3c:	0f 90       	pop	r0
    5c3e:	0f be       	out	0x3f, r0	; 63
    5c40:	0f 90       	pop	r0
    5c42:	1f 90       	pop	r1
    5c44:	18 95       	reti

00005c46 <__vector_6>:

/* Prototype for ISR TIMER1 CAPT */
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    5c46:	1f 92       	push	r1
    5c48:	0f 92       	push	r0
    5c4a:	0f b6       	in	r0, 0x3f	; 63
    5c4c:	0f 92       	push	r0
    5c4e:	11 24       	eor	r1, r1
    5c50:	2f 93       	push	r18
    5c52:	3f 93       	push	r19
    5c54:	4f 93       	push	r20
    5c56:	5f 93       	push	r21
    5c58:	6f 93       	push	r22
    5c5a:	7f 93       	push	r23
    5c5c:	8f 93       	push	r24
    5c5e:	9f 93       	push	r25
    5c60:	af 93       	push	r26
    5c62:	bf 93       	push	r27
    5c64:	ef 93       	push	r30
    5c66:	ff 93       	push	r31
    5c68:	df 93       	push	r29
    5c6a:	cf 93       	push	r28
    5c6c:	cd b7       	in	r28, 0x3d	; 61
    5c6e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCAPT = 0;
	Local_u16CounterCAPT++;
    5c70:	80 91 b9 02 	lds	r24, 0x02B9
    5c74:	90 91 ba 02 	lds	r25, 0x02BA
    5c78:	01 96       	adiw	r24, 0x01	; 1
    5c7a:	90 93 ba 02 	sts	0x02BA, r25
    5c7e:	80 93 b9 02 	sts	0x02B9, r24
	if(Local_u16CounterCAPT == 10000)
    5c82:	80 91 b9 02 	lds	r24, 0x02B9
    5c86:	90 91 ba 02 	lds	r25, 0x02BA
    5c8a:	27 e2       	ldi	r18, 0x27	; 39
    5c8c:	80 31       	cpi	r24, 0x10	; 16
    5c8e:	92 07       	cpc	r25, r18
    5c90:	79 f4       	brne	.+30     	; 0x5cb0 <__vector_6+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCAPT = 0;
    5c92:	10 92 ba 02 	sts	0x02BA, r1
    5c96:	10 92 b9 02 	sts	0x02B9, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CAPT != NULL)
    5c9a:	80 91 af 02 	lds	r24, 0x02AF
    5c9e:	90 91 b0 02 	lds	r25, 0x02B0
    5ca2:	00 97       	sbiw	r24, 0x00	; 0
    5ca4:	29 f0       	breq	.+10     	; 0x5cb0 <__vector_6+0x6a>
		{
			TIMERS_pfTimer1CAPT();
    5ca6:	e0 91 af 02 	lds	r30, 0x02AF
    5caa:	f0 91 b0 02 	lds	r31, 0x02B0
    5cae:	09 95       	icall
		}
	}
}
    5cb0:	cf 91       	pop	r28
    5cb2:	df 91       	pop	r29
    5cb4:	ff 91       	pop	r31
    5cb6:	ef 91       	pop	r30
    5cb8:	bf 91       	pop	r27
    5cba:	af 91       	pop	r26
    5cbc:	9f 91       	pop	r25
    5cbe:	8f 91       	pop	r24
    5cc0:	7f 91       	pop	r23
    5cc2:	6f 91       	pop	r22
    5cc4:	5f 91       	pop	r21
    5cc6:	4f 91       	pop	r20
    5cc8:	3f 91       	pop	r19
    5cca:	2f 91       	pop	r18
    5ccc:	0f 90       	pop	r0
    5cce:	0f be       	out	0x3f, r0	; 63
    5cd0:	0f 90       	pop	r0
    5cd2:	1f 90       	pop	r1
    5cd4:	18 95       	reti

00005cd6 <__vector_11>:

/* Prototype for ISR TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    5cd6:	1f 92       	push	r1
    5cd8:	0f 92       	push	r0
    5cda:	0f b6       	in	r0, 0x3f	; 63
    5cdc:	0f 92       	push	r0
    5cde:	11 24       	eor	r1, r1
    5ce0:	2f 93       	push	r18
    5ce2:	3f 93       	push	r19
    5ce4:	4f 93       	push	r20
    5ce6:	5f 93       	push	r21
    5ce8:	6f 93       	push	r22
    5cea:	7f 93       	push	r23
    5cec:	8f 93       	push	r24
    5cee:	9f 93       	push	r25
    5cf0:	af 93       	push	r26
    5cf2:	bf 93       	push	r27
    5cf4:	ef 93       	push	r30
    5cf6:	ff 93       	push	r31
    5cf8:	df 93       	push	r29
    5cfa:	cf 93       	push	r28
    5cfc:	cd b7       	in	r28, 0x3d	; 61
    5cfe:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    5d00:	80 91 bb 02 	lds	r24, 0x02BB
    5d04:	90 91 bc 02 	lds	r25, 0x02BC
    5d08:	01 96       	adiw	r24, 0x01	; 1
    5d0a:	90 93 bc 02 	sts	0x02BC, r25
    5d0e:	80 93 bb 02 	sts	0x02BB, r24
	if(Local_u16CounterOVF == 3907)
    5d12:	80 91 bb 02 	lds	r24, 0x02BB
    5d16:	90 91 bc 02 	lds	r25, 0x02BC
    5d1a:	2f e0       	ldi	r18, 0x0F	; 15
    5d1c:	83 34       	cpi	r24, 0x43	; 67
    5d1e:	92 07       	cpc	r25, r18
    5d20:	99 f4       	brne	.+38     	; 0x5d48 <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    5d22:	e2 e5       	ldi	r30, 0x52	; 82
    5d24:	f0 e0       	ldi	r31, 0x00	; 0
    5d26:	80 ec       	ldi	r24, 0xC0	; 192
    5d28:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    5d2a:	10 92 bc 02 	sts	0x02BC, r1
    5d2e:	10 92 bb 02 	sts	0x02BB, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
    5d32:	80 91 a7 02 	lds	r24, 0x02A7
    5d36:	90 91 a8 02 	lds	r25, 0x02A8
    5d3a:	00 97       	sbiw	r24, 0x00	; 0
    5d3c:	29 f0       	breq	.+10     	; 0x5d48 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    5d3e:	e0 91 a7 02 	lds	r30, 0x02A7
    5d42:	f0 91 a8 02 	lds	r31, 0x02A8
    5d46:	09 95       	icall
		}
	}
}
    5d48:	cf 91       	pop	r28
    5d4a:	df 91       	pop	r29
    5d4c:	ff 91       	pop	r31
    5d4e:	ef 91       	pop	r30
    5d50:	bf 91       	pop	r27
    5d52:	af 91       	pop	r26
    5d54:	9f 91       	pop	r25
    5d56:	8f 91       	pop	r24
    5d58:	7f 91       	pop	r23
    5d5a:	6f 91       	pop	r22
    5d5c:	5f 91       	pop	r21
    5d5e:	4f 91       	pop	r20
    5d60:	3f 91       	pop	r19
    5d62:	2f 91       	pop	r18
    5d64:	0f 90       	pop	r0
    5d66:	0f be       	out	0x3f, r0	; 63
    5d68:	0f 90       	pop	r0
    5d6a:	1f 90       	pop	r1
    5d6c:	18 95       	reti

00005d6e <__vector_10>:

/* Prototype for ISR TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    5d6e:	1f 92       	push	r1
    5d70:	0f 92       	push	r0
    5d72:	0f b6       	in	r0, 0x3f	; 63
    5d74:	0f 92       	push	r0
    5d76:	11 24       	eor	r1, r1
    5d78:	2f 93       	push	r18
    5d7a:	3f 93       	push	r19
    5d7c:	4f 93       	push	r20
    5d7e:	5f 93       	push	r21
    5d80:	6f 93       	push	r22
    5d82:	7f 93       	push	r23
    5d84:	8f 93       	push	r24
    5d86:	9f 93       	push	r25
    5d88:	af 93       	push	r26
    5d8a:	bf 93       	push	r27
    5d8c:	ef 93       	push	r30
    5d8e:	ff 93       	push	r31
    5d90:	df 93       	push	r29
    5d92:	cf 93       	push	r28
    5d94:	cd b7       	in	r28, 0x3d	; 61
    5d96:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    5d98:	80 91 bd 02 	lds	r24, 0x02BD
    5d9c:	90 91 be 02 	lds	r25, 0x02BE
    5da0:	01 96       	adiw	r24, 0x01	; 1
    5da2:	90 93 be 02 	sts	0x02BE, r25
    5da6:	80 93 bd 02 	sts	0x02BD, r24
	if(Local_u16CounterCTC == 10000)
    5daa:	80 91 bd 02 	lds	r24, 0x02BD
    5dae:	90 91 be 02 	lds	r25, 0x02BE
    5db2:	27 e2       	ldi	r18, 0x27	; 39
    5db4:	80 31       	cpi	r24, 0x10	; 16
    5db6:	92 07       	cpc	r25, r18
    5db8:	79 f4       	brne	.+30     	; 0x5dd8 <__vector_10+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    5dba:	10 92 be 02 	sts	0x02BE, r1
    5dbe:	10 92 bd 02 	sts	0x02BD, r1
		/* Call App Function */
		if(TIMERS_pfTimer0CTC != NULL)
    5dc2:	80 91 a9 02 	lds	r24, 0x02A9
    5dc6:	90 91 aa 02 	lds	r25, 0x02AA
    5dca:	00 97       	sbiw	r24, 0x00	; 0
    5dcc:	29 f0       	breq	.+10     	; 0x5dd8 <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
    5dce:	e0 91 a9 02 	lds	r30, 0x02A9
    5dd2:	f0 91 aa 02 	lds	r31, 0x02AA
    5dd6:	09 95       	icall
		}
	}
}
    5dd8:	cf 91       	pop	r28
    5dda:	df 91       	pop	r29
    5ddc:	ff 91       	pop	r31
    5dde:	ef 91       	pop	r30
    5de0:	bf 91       	pop	r27
    5de2:	af 91       	pop	r26
    5de4:	9f 91       	pop	r25
    5de6:	8f 91       	pop	r24
    5de8:	7f 91       	pop	r23
    5dea:	6f 91       	pop	r22
    5dec:	5f 91       	pop	r21
    5dee:	4f 91       	pop	r20
    5df0:	3f 91       	pop	r19
    5df2:	2f 91       	pop	r18
    5df4:	0f 90       	pop	r0
    5df6:	0f be       	out	0x3f, r0	; 63
    5df8:	0f 90       	pop	r0
    5dfa:	1f 90       	pop	r1
    5dfc:	18 95       	reti

00005dfe <main>:
#include "Login_System.h"
#include "H_Bridge.h"
#include "Dashboard.h"

int main(void)
{
    5dfe:	0f 93       	push	r16
    5e00:	1f 93       	push	r17
    5e02:	df 93       	push	r29
    5e04:	cf 93       	push	r28
    5e06:	cd b7       	in	r28, 0x3d	; 61
    5e08:	de b7       	in	r29, 0x3e	; 62
    5e0a:	cf 55       	subi	r28, 0x5F	; 95
    5e0c:	d0 40       	sbci	r29, 0x00	; 0
    5e0e:	0f b6       	in	r0, 0x3f	; 63
    5e10:	f8 94       	cli
    5e12:	de bf       	out	0x3e, r29	; 62
    5e14:	0f be       	out	0x3f, r0	; 63
    5e16:	cd bf       	out	0x3d, r28	; 61
	u8 const password[] = "1234";
    5e18:	ce 01       	movw	r24, r28
    5e1a:	8b 5a       	subi	r24, 0xAB	; 171
    5e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1e:	6d 96       	adiw	r28, 0x1d	; 29
    5e20:	9f af       	std	Y+63, r25	; 0x3f
    5e22:	8e af       	std	Y+62, r24	; 0x3e
    5e24:	6d 97       	sbiw	r28, 0x1d	; 29
    5e26:	8c e6       	ldi	r24, 0x6C	; 108
    5e28:	91 e0       	ldi	r25, 0x01	; 1
    5e2a:	6f 96       	adiw	r28, 0x1f	; 31
    5e2c:	9f af       	std	Y+63, r25	; 0x3f
    5e2e:	8e af       	std	Y+62, r24	; 0x3e
    5e30:	6f 97       	sbiw	r28, 0x1f	; 31
    5e32:	95 e0       	ldi	r25, 0x05	; 5
    5e34:	a0 96       	adiw	r28, 0x20	; 32
    5e36:	9f af       	std	Y+63, r25	; 0x3f
    5e38:	a0 97       	sbiw	r28, 0x20	; 32
    5e3a:	6f 96       	adiw	r28, 0x1f	; 31
    5e3c:	ee ad       	ldd	r30, Y+62	; 0x3e
    5e3e:	ff ad       	ldd	r31, Y+63	; 0x3f
    5e40:	6f 97       	sbiw	r28, 0x1f	; 31
    5e42:	00 80       	ld	r0, Z
    5e44:	6f 96       	adiw	r28, 0x1f	; 31
    5e46:	8e ad       	ldd	r24, Y+62	; 0x3e
    5e48:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e4a:	6f 97       	sbiw	r28, 0x1f	; 31
    5e4c:	01 96       	adiw	r24, 0x01	; 1
    5e4e:	6f 96       	adiw	r28, 0x1f	; 31
    5e50:	9f af       	std	Y+63, r25	; 0x3f
    5e52:	8e af       	std	Y+62, r24	; 0x3e
    5e54:	6f 97       	sbiw	r28, 0x1f	; 31
    5e56:	6d 96       	adiw	r28, 0x1d	; 29
    5e58:	ee ad       	ldd	r30, Y+62	; 0x3e
    5e5a:	ff ad       	ldd	r31, Y+63	; 0x3f
    5e5c:	6d 97       	sbiw	r28, 0x1d	; 29
    5e5e:	00 82       	st	Z, r0
    5e60:	6d 96       	adiw	r28, 0x1d	; 29
    5e62:	8e ad       	ldd	r24, Y+62	; 0x3e
    5e64:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e66:	6d 97       	sbiw	r28, 0x1d	; 29
    5e68:	01 96       	adiw	r24, 0x01	; 1
    5e6a:	6d 96       	adiw	r28, 0x1d	; 29
    5e6c:	9f af       	std	Y+63, r25	; 0x3f
    5e6e:	8e af       	std	Y+62, r24	; 0x3e
    5e70:	6d 97       	sbiw	r28, 0x1d	; 29
    5e72:	a0 96       	adiw	r28, 0x20	; 32
    5e74:	9f ad       	ldd	r25, Y+63	; 0x3f
    5e76:	a0 97       	sbiw	r28, 0x20	; 32
    5e78:	91 50       	subi	r25, 0x01	; 1
    5e7a:	a0 96       	adiw	r28, 0x20	; 32
    5e7c:	9f af       	std	Y+63, r25	; 0x3f
    5e7e:	a0 97       	sbiw	r28, 0x20	; 32
    5e80:	a0 96       	adiw	r28, 0x20	; 32
    5e82:	ef ad       	ldd	r30, Y+63	; 0x3f
    5e84:	a0 97       	sbiw	r28, 0x20	; 32
    5e86:	ee 23       	and	r30, r30
    5e88:	c1 f6       	brne	.-80     	; 0x5e3a <main+0x3c>
	u8 flag;//To check login correct or wrong
	DIO_voidInit();
    5e8a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <DIO_voidInit>
	LCD_voidInit();
    5e8e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_voidInit>
	while(1)
	{
		login_system(password,&flag);
    5e92:	ce 01       	movw	r24, r28
    5e94:	8b 5a       	subi	r24, 0xAB	; 171
    5e96:	9f 4f       	sbci	r25, 0xFF	; 255
    5e98:	9e 01       	movw	r18, r28
    5e9a:	26 5a       	subi	r18, 0xA6	; 166
    5e9c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e9e:	b9 01       	movw	r22, r18
    5ea0:	0e 94 36 21 	call	0x426c	; 0x426c <login_system>
		if(flag)
    5ea4:	fe 01       	movw	r30, r28
    5ea6:	e6 5a       	subi	r30, 0xA6	; 166
    5ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    5eaa:	80 81       	ld	r24, Z
    5eac:	88 23       	and	r24, r24
    5eae:	09 f4       	brne	.+2      	; 0x5eb2 <main+0xb4>
    5eb0:	bb c1       	rjmp	.+886    	; 0x6228 <main+0x42a>
    5eb2:	fe 01       	movw	r30, r28
    5eb4:	ef 5a       	subi	r30, 0xAF	; 175
    5eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb8:	80 e0       	ldi	r24, 0x00	; 0
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	aa e7       	ldi	r26, 0x7A	; 122
    5ebe:	b4 e4       	ldi	r27, 0x44	; 68
    5ec0:	80 83       	st	Z, r24
    5ec2:	91 83       	std	Z+1, r25	; 0x01
    5ec4:	a2 83       	std	Z+2, r26	; 0x02
    5ec6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ec8:	8e 01       	movw	r16, r28
    5eca:	03 5b       	subi	r16, 0xB3	; 179
    5ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    5ece:	fe 01       	movw	r30, r28
    5ed0:	ef 5a       	subi	r30, 0xAF	; 175
    5ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed4:	60 81       	ld	r22, Z
    5ed6:	71 81       	ldd	r23, Z+1	; 0x01
    5ed8:	82 81       	ldd	r24, Z+2	; 0x02
    5eda:	93 81       	ldd	r25, Z+3	; 0x03
    5edc:	20 e0       	ldi	r18, 0x00	; 0
    5ede:	30 e0       	ldi	r19, 0x00	; 0
    5ee0:	4a ef       	ldi	r20, 0xFA	; 250
    5ee2:	54 e4       	ldi	r21, 0x44	; 68
    5ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ee8:	dc 01       	movw	r26, r24
    5eea:	cb 01       	movw	r24, r22
    5eec:	f8 01       	movw	r30, r16
    5eee:	80 83       	st	Z, r24
    5ef0:	91 83       	std	Z+1, r25	; 0x01
    5ef2:	a2 83       	std	Z+2, r26	; 0x02
    5ef4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ef6:	fe 01       	movw	r30, r28
    5ef8:	e3 5b       	subi	r30, 0xB3	; 179
    5efa:	ff 4f       	sbci	r31, 0xFF	; 255
    5efc:	60 81       	ld	r22, Z
    5efe:	71 81       	ldd	r23, Z+1	; 0x01
    5f00:	82 81       	ldd	r24, Z+2	; 0x02
    5f02:	93 81       	ldd	r25, Z+3	; 0x03
    5f04:	20 e0       	ldi	r18, 0x00	; 0
    5f06:	30 e0       	ldi	r19, 0x00	; 0
    5f08:	40 e8       	ldi	r20, 0x80	; 128
    5f0a:	5f e3       	ldi	r21, 0x3F	; 63
    5f0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5f10:	88 23       	and	r24, r24
    5f12:	44 f4       	brge	.+16     	; 0x5f24 <main+0x126>
		__ticks = 1;
    5f14:	fe 01       	movw	r30, r28
    5f16:	e5 5b       	subi	r30, 0xB5	; 181
    5f18:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1a:	81 e0       	ldi	r24, 0x01	; 1
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	91 83       	std	Z+1, r25	; 0x01
    5f20:	80 83       	st	Z, r24
    5f22:	64 c0       	rjmp	.+200    	; 0x5fec <main+0x1ee>
	else if (__tmp > 65535)
    5f24:	fe 01       	movw	r30, r28
    5f26:	e3 5b       	subi	r30, 0xB3	; 179
    5f28:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2a:	60 81       	ld	r22, Z
    5f2c:	71 81       	ldd	r23, Z+1	; 0x01
    5f2e:	82 81       	ldd	r24, Z+2	; 0x02
    5f30:	93 81       	ldd	r25, Z+3	; 0x03
    5f32:	20 e0       	ldi	r18, 0x00	; 0
    5f34:	3f ef       	ldi	r19, 0xFF	; 255
    5f36:	4f e7       	ldi	r20, 0x7F	; 127
    5f38:	57 e4       	ldi	r21, 0x47	; 71
    5f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5f3e:	18 16       	cp	r1, r24
    5f40:	0c f0       	brlt	.+2      	; 0x5f44 <main+0x146>
    5f42:	43 c0       	rjmp	.+134    	; 0x5fca <main+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f44:	fe 01       	movw	r30, r28
    5f46:	ef 5a       	subi	r30, 0xAF	; 175
    5f48:	ff 4f       	sbci	r31, 0xFF	; 255
    5f4a:	60 81       	ld	r22, Z
    5f4c:	71 81       	ldd	r23, Z+1	; 0x01
    5f4e:	82 81       	ldd	r24, Z+2	; 0x02
    5f50:	93 81       	ldd	r25, Z+3	; 0x03
    5f52:	20 e0       	ldi	r18, 0x00	; 0
    5f54:	30 e0       	ldi	r19, 0x00	; 0
    5f56:	40 e2       	ldi	r20, 0x20	; 32
    5f58:	51 e4       	ldi	r21, 0x41	; 65
    5f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f5e:	dc 01       	movw	r26, r24
    5f60:	cb 01       	movw	r24, r22
    5f62:	8e 01       	movw	r16, r28
    5f64:	05 5b       	subi	r16, 0xB5	; 181
    5f66:	1f 4f       	sbci	r17, 0xFF	; 255
    5f68:	bc 01       	movw	r22, r24
    5f6a:	cd 01       	movw	r24, r26
    5f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f70:	dc 01       	movw	r26, r24
    5f72:	cb 01       	movw	r24, r22
    5f74:	f8 01       	movw	r30, r16
    5f76:	91 83       	std	Z+1, r25	; 0x01
    5f78:	80 83       	st	Z, r24
    5f7a:	1f c0       	rjmp	.+62     	; 0x5fba <main+0x1bc>
    5f7c:	fe 01       	movw	r30, r28
    5f7e:	e7 5b       	subi	r30, 0xB7	; 183
    5f80:	ff 4f       	sbci	r31, 0xFF	; 255
    5f82:	88 ec       	ldi	r24, 0xC8	; 200
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	91 83       	std	Z+1, r25	; 0x01
    5f88:	80 83       	st	Z, r24
    5f8a:	fe 01       	movw	r30, r28
    5f8c:	e7 5b       	subi	r30, 0xB7	; 183
    5f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f90:	80 81       	ld	r24, Z
    5f92:	91 81       	ldd	r25, Z+1	; 0x01
    5f94:	01 97       	sbiw	r24, 0x01	; 1
    5f96:	f1 f7       	brne	.-4      	; 0x5f94 <main+0x196>
    5f98:	fe 01       	movw	r30, r28
    5f9a:	e7 5b       	subi	r30, 0xB7	; 183
    5f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f9e:	91 83       	std	Z+1, r25	; 0x01
    5fa0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fa2:	de 01       	movw	r26, r28
    5fa4:	a5 5b       	subi	r26, 0xB5	; 181
    5fa6:	bf 4f       	sbci	r27, 0xFF	; 255
    5fa8:	fe 01       	movw	r30, r28
    5faa:	e5 5b       	subi	r30, 0xB5	; 181
    5fac:	ff 4f       	sbci	r31, 0xFF	; 255
    5fae:	80 81       	ld	r24, Z
    5fb0:	91 81       	ldd	r25, Z+1	; 0x01
    5fb2:	01 97       	sbiw	r24, 0x01	; 1
    5fb4:	11 96       	adiw	r26, 0x01	; 1
    5fb6:	9c 93       	st	X, r25
    5fb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fba:	fe 01       	movw	r30, r28
    5fbc:	e5 5b       	subi	r30, 0xB5	; 181
    5fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc0:	80 81       	ld	r24, Z
    5fc2:	91 81       	ldd	r25, Z+1	; 0x01
    5fc4:	00 97       	sbiw	r24, 0x00	; 0
    5fc6:	d1 f6       	brne	.-76     	; 0x5f7c <main+0x17e>
    5fc8:	27 c0       	rjmp	.+78     	; 0x6018 <main+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fca:	8e 01       	movw	r16, r28
    5fcc:	05 5b       	subi	r16, 0xB5	; 181
    5fce:	1f 4f       	sbci	r17, 0xFF	; 255
    5fd0:	fe 01       	movw	r30, r28
    5fd2:	e3 5b       	subi	r30, 0xB3	; 179
    5fd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5fd6:	60 81       	ld	r22, Z
    5fd8:	71 81       	ldd	r23, Z+1	; 0x01
    5fda:	82 81       	ldd	r24, Z+2	; 0x02
    5fdc:	93 81       	ldd	r25, Z+3	; 0x03
    5fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5fe2:	dc 01       	movw	r26, r24
    5fe4:	cb 01       	movw	r24, r22
    5fe6:	f8 01       	movw	r30, r16
    5fe8:	91 83       	std	Z+1, r25	; 0x01
    5fea:	80 83       	st	Z, r24
    5fec:	de 01       	movw	r26, r28
    5fee:	a9 5b       	subi	r26, 0xB9	; 185
    5ff0:	bf 4f       	sbci	r27, 0xFF	; 255
    5ff2:	fe 01       	movw	r30, r28
    5ff4:	e5 5b       	subi	r30, 0xB5	; 181
    5ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff8:	80 81       	ld	r24, Z
    5ffa:	91 81       	ldd	r25, Z+1	; 0x01
    5ffc:	8d 93       	st	X+, r24
    5ffe:	9c 93       	st	X, r25
    6000:	fe 01       	movw	r30, r28
    6002:	e9 5b       	subi	r30, 0xB9	; 185
    6004:	ff 4f       	sbci	r31, 0xFF	; 255
    6006:	80 81       	ld	r24, Z
    6008:	91 81       	ldd	r25, Z+1	; 0x01
    600a:	01 97       	sbiw	r24, 0x01	; 1
    600c:	f1 f7       	brne	.-4      	; 0x600a <main+0x20c>
    600e:	fe 01       	movw	r30, r28
    6010:	e9 5b       	subi	r30, 0xB9	; 185
    6012:	ff 4f       	sbci	r31, 0xFF	; 255
    6014:	91 83       	std	Z+1, r25	; 0x01
    6016:	80 83       	st	Z, r24
		{
			_delay_ms(1000);
			LCD_voidClearScreen();
    6018:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    601c:	fe 01       	movw	r30, r28
    601e:	ed 5b       	subi	r30, 0xBD	; 189
    6020:	ff 4f       	sbci	r31, 0xFF	; 255
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	90 e0       	ldi	r25, 0x00	; 0
    6026:	a0 ea       	ldi	r26, 0xA0	; 160
    6028:	b1 e4       	ldi	r27, 0x41	; 65
    602a:	80 83       	st	Z, r24
    602c:	91 83       	std	Z+1, r25	; 0x01
    602e:	a2 83       	std	Z+2, r26	; 0x02
    6030:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6032:	8e 01       	movw	r16, r28
    6034:	01 5c       	subi	r16, 0xC1	; 193
    6036:	1f 4f       	sbci	r17, 0xFF	; 255
    6038:	fe 01       	movw	r30, r28
    603a:	ed 5b       	subi	r30, 0xBD	; 189
    603c:	ff 4f       	sbci	r31, 0xFF	; 255
    603e:	60 81       	ld	r22, Z
    6040:	71 81       	ldd	r23, Z+1	; 0x01
    6042:	82 81       	ldd	r24, Z+2	; 0x02
    6044:	93 81       	ldd	r25, Z+3	; 0x03
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	30 e0       	ldi	r19, 0x00	; 0
    604a:	4a ef       	ldi	r20, 0xFA	; 250
    604c:	54 e4       	ldi	r21, 0x44	; 68
    604e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6052:	dc 01       	movw	r26, r24
    6054:	cb 01       	movw	r24, r22
    6056:	f8 01       	movw	r30, r16
    6058:	80 83       	st	Z, r24
    605a:	91 83       	std	Z+1, r25	; 0x01
    605c:	a2 83       	std	Z+2, r26	; 0x02
    605e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6060:	fe 01       	movw	r30, r28
    6062:	ff 96       	adiw	r30, 0x3f	; 63
    6064:	60 81       	ld	r22, Z
    6066:	71 81       	ldd	r23, Z+1	; 0x01
    6068:	82 81       	ldd	r24, Z+2	; 0x02
    606a:	93 81       	ldd	r25, Z+3	; 0x03
    606c:	20 e0       	ldi	r18, 0x00	; 0
    606e:	30 e0       	ldi	r19, 0x00	; 0
    6070:	40 e8       	ldi	r20, 0x80	; 128
    6072:	5f e3       	ldi	r21, 0x3F	; 63
    6074:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6078:	88 23       	and	r24, r24
    607a:	2c f4       	brge	.+10     	; 0x6086 <main+0x288>
		__ticks = 1;
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	9e af       	std	Y+62, r25	; 0x3e
    6082:	8d af       	std	Y+61, r24	; 0x3d
    6084:	46 c0       	rjmp	.+140    	; 0x6112 <main+0x314>
	else if (__tmp > 65535)
    6086:	fe 01       	movw	r30, r28
    6088:	ff 96       	adiw	r30, 0x3f	; 63
    608a:	60 81       	ld	r22, Z
    608c:	71 81       	ldd	r23, Z+1	; 0x01
    608e:	82 81       	ldd	r24, Z+2	; 0x02
    6090:	93 81       	ldd	r25, Z+3	; 0x03
    6092:	20 e0       	ldi	r18, 0x00	; 0
    6094:	3f ef       	ldi	r19, 0xFF	; 255
    6096:	4f e7       	ldi	r20, 0x7F	; 127
    6098:	57 e4       	ldi	r21, 0x47	; 71
    609a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    609e:	18 16       	cp	r1, r24
    60a0:	64 f5       	brge	.+88     	; 0x60fa <main+0x2fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60a2:	fe 01       	movw	r30, r28
    60a4:	ed 5b       	subi	r30, 0xBD	; 189
    60a6:	ff 4f       	sbci	r31, 0xFF	; 255
    60a8:	60 81       	ld	r22, Z
    60aa:	71 81       	ldd	r23, Z+1	; 0x01
    60ac:	82 81       	ldd	r24, Z+2	; 0x02
    60ae:	93 81       	ldd	r25, Z+3	; 0x03
    60b0:	20 e0       	ldi	r18, 0x00	; 0
    60b2:	30 e0       	ldi	r19, 0x00	; 0
    60b4:	40 e2       	ldi	r20, 0x20	; 32
    60b6:	51 e4       	ldi	r21, 0x41	; 65
    60b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60bc:	dc 01       	movw	r26, r24
    60be:	cb 01       	movw	r24, r22
    60c0:	bc 01       	movw	r22, r24
    60c2:	cd 01       	movw	r24, r26
    60c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    60c8:	dc 01       	movw	r26, r24
    60ca:	cb 01       	movw	r24, r22
    60cc:	9e af       	std	Y+62, r25	; 0x3e
    60ce:	8d af       	std	Y+61, r24	; 0x3d
    60d0:	0f c0       	rjmp	.+30     	; 0x60f0 <main+0x2f2>
    60d2:	88 ec       	ldi	r24, 0xC8	; 200
    60d4:	90 e0       	ldi	r25, 0x00	; 0
    60d6:	9c af       	std	Y+60, r25	; 0x3c
    60d8:	8b af       	std	Y+59, r24	; 0x3b
    60da:	8b ad       	ldd	r24, Y+59	; 0x3b
    60dc:	9c ad       	ldd	r25, Y+60	; 0x3c
    60de:	01 97       	sbiw	r24, 0x01	; 1
    60e0:	f1 f7       	brne	.-4      	; 0x60de <main+0x2e0>
    60e2:	9c af       	std	Y+60, r25	; 0x3c
    60e4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    60e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    60ea:	01 97       	sbiw	r24, 0x01	; 1
    60ec:	9e af       	std	Y+62, r25	; 0x3e
    60ee:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    60f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    60f4:	00 97       	sbiw	r24, 0x00	; 0
    60f6:	69 f7       	brne	.-38     	; 0x60d2 <main+0x2d4>
    60f8:	16 c0       	rjmp	.+44     	; 0x6126 <main+0x328>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60fa:	fe 01       	movw	r30, r28
    60fc:	ff 96       	adiw	r30, 0x3f	; 63
    60fe:	60 81       	ld	r22, Z
    6100:	71 81       	ldd	r23, Z+1	; 0x01
    6102:	82 81       	ldd	r24, Z+2	; 0x02
    6104:	93 81       	ldd	r25, Z+3	; 0x03
    6106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    610a:	dc 01       	movw	r26, r24
    610c:	cb 01       	movw	r24, r22
    610e:	9e af       	std	Y+62, r25	; 0x3e
    6110:	8d af       	std	Y+61, r24	; 0x3d
    6112:	8d ad       	ldd	r24, Y+61	; 0x3d
    6114:	9e ad       	ldd	r25, Y+62	; 0x3e
    6116:	9a af       	std	Y+58, r25	; 0x3a
    6118:	89 af       	std	Y+57, r24	; 0x39
    611a:	89 ad       	ldd	r24, Y+57	; 0x39
    611c:	9a ad       	ldd	r25, Y+58	; 0x3a
    611e:	01 97       	sbiw	r24, 0x01	; 1
    6120:	f1 f7       	brne	.-4      	; 0x611e <main+0x320>
    6122:	9a af       	std	Y+58, r25	; 0x3a
    6124:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(20);
			LCD_voidWriteString((u8*)"Welcome To Motor");
    6126:	87 e4       	ldi	r24, 0x47	; 71
    6128:	91 e0       	ldi	r25, 0x01	; 1
    612a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
			LCD_u8GoToXY(LCD_u8_LINE2,0);
    612e:	82 e0       	ldi	r24, 0x02	; 2
    6130:	60 e0       	ldi	r22, 0x00	; 0
    6132:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_u8GoToXY>
			LCD_voidWriteString((u8*)"Dashboard");
    6136:	88 e5       	ldi	r24, 0x58	; 88
    6138:	91 e0       	ldi	r25, 0x01	; 1
    613a:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
    613e:	80 e0       	ldi	r24, 0x00	; 0
    6140:	90 e8       	ldi	r25, 0x80	; 128
    6142:	ab e3       	ldi	r26, 0x3B	; 59
    6144:	b5 e4       	ldi	r27, 0x45	; 69
    6146:	8d ab       	std	Y+53, r24	; 0x35
    6148:	9e ab       	std	Y+54, r25	; 0x36
    614a:	af ab       	std	Y+55, r26	; 0x37
    614c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    614e:	6d a9       	ldd	r22, Y+53	; 0x35
    6150:	7e a9       	ldd	r23, Y+54	; 0x36
    6152:	8f a9       	ldd	r24, Y+55	; 0x37
    6154:	98 ad       	ldd	r25, Y+56	; 0x38
    6156:	20 e0       	ldi	r18, 0x00	; 0
    6158:	30 e0       	ldi	r19, 0x00	; 0
    615a:	4a ef       	ldi	r20, 0xFA	; 250
    615c:	54 e4       	ldi	r21, 0x44	; 68
    615e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6162:	dc 01       	movw	r26, r24
    6164:	cb 01       	movw	r24, r22
    6166:	89 ab       	std	Y+49, r24	; 0x31
    6168:	9a ab       	std	Y+50, r25	; 0x32
    616a:	ab ab       	std	Y+51, r26	; 0x33
    616c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    616e:	69 a9       	ldd	r22, Y+49	; 0x31
    6170:	7a a9       	ldd	r23, Y+50	; 0x32
    6172:	8b a9       	ldd	r24, Y+51	; 0x33
    6174:	9c a9       	ldd	r25, Y+52	; 0x34
    6176:	20 e0       	ldi	r18, 0x00	; 0
    6178:	30 e0       	ldi	r19, 0x00	; 0
    617a:	40 e8       	ldi	r20, 0x80	; 128
    617c:	5f e3       	ldi	r21, 0x3F	; 63
    617e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6182:	88 23       	and	r24, r24
    6184:	2c f4       	brge	.+10     	; 0x6190 <main+0x392>
		__ticks = 1;
    6186:	81 e0       	ldi	r24, 0x01	; 1
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	98 ab       	std	Y+48, r25	; 0x30
    618c:	8f a7       	std	Y+47, r24	; 0x2f
    618e:	3f c0       	rjmp	.+126    	; 0x620e <main+0x410>
	else if (__tmp > 65535)
    6190:	69 a9       	ldd	r22, Y+49	; 0x31
    6192:	7a a9       	ldd	r23, Y+50	; 0x32
    6194:	8b a9       	ldd	r24, Y+51	; 0x33
    6196:	9c a9       	ldd	r25, Y+52	; 0x34
    6198:	20 e0       	ldi	r18, 0x00	; 0
    619a:	3f ef       	ldi	r19, 0xFF	; 255
    619c:	4f e7       	ldi	r20, 0x7F	; 127
    619e:	57 e4       	ldi	r21, 0x47	; 71
    61a0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    61a4:	18 16       	cp	r1, r24
    61a6:	4c f5       	brge	.+82     	; 0x61fa <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    61a8:	6d a9       	ldd	r22, Y+53	; 0x35
    61aa:	7e a9       	ldd	r23, Y+54	; 0x36
    61ac:	8f a9       	ldd	r24, Y+55	; 0x37
    61ae:	98 ad       	ldd	r25, Y+56	; 0x38
    61b0:	20 e0       	ldi	r18, 0x00	; 0
    61b2:	30 e0       	ldi	r19, 0x00	; 0
    61b4:	40 e2       	ldi	r20, 0x20	; 32
    61b6:	51 e4       	ldi	r21, 0x41	; 65
    61b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    61bc:	dc 01       	movw	r26, r24
    61be:	cb 01       	movw	r24, r22
    61c0:	bc 01       	movw	r22, r24
    61c2:	cd 01       	movw	r24, r26
    61c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61c8:	dc 01       	movw	r26, r24
    61ca:	cb 01       	movw	r24, r22
    61cc:	98 ab       	std	Y+48, r25	; 0x30
    61ce:	8f a7       	std	Y+47, r24	; 0x2f
    61d0:	0f c0       	rjmp	.+30     	; 0x61f0 <main+0x3f2>
    61d2:	88 ec       	ldi	r24, 0xC8	; 200
    61d4:	90 e0       	ldi	r25, 0x00	; 0
    61d6:	9e a7       	std	Y+46, r25	; 0x2e
    61d8:	8d a7       	std	Y+45, r24	; 0x2d
    61da:	8d a5       	ldd	r24, Y+45	; 0x2d
    61dc:	9e a5       	ldd	r25, Y+46	; 0x2e
    61de:	01 97       	sbiw	r24, 0x01	; 1
    61e0:	f1 f7       	brne	.-4      	; 0x61de <main+0x3e0>
    61e2:	9e a7       	std	Y+46, r25	; 0x2e
    61e4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    61e8:	98 a9       	ldd	r25, Y+48	; 0x30
    61ea:	01 97       	sbiw	r24, 0x01	; 1
    61ec:	98 ab       	std	Y+48, r25	; 0x30
    61ee:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    61f2:	98 a9       	ldd	r25, Y+48	; 0x30
    61f4:	00 97       	sbiw	r24, 0x00	; 0
    61f6:	69 f7       	brne	.-38     	; 0x61d2 <main+0x3d4>
    61f8:	14 c0       	rjmp	.+40     	; 0x6222 <main+0x424>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61fa:	69 a9       	ldd	r22, Y+49	; 0x31
    61fc:	7a a9       	ldd	r23, Y+50	; 0x32
    61fe:	8b a9       	ldd	r24, Y+51	; 0x33
    6200:	9c a9       	ldd	r25, Y+52	; 0x34
    6202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6206:	dc 01       	movw	r26, r24
    6208:	cb 01       	movw	r24, r22
    620a:	98 ab       	std	Y+48, r25	; 0x30
    620c:	8f a7       	std	Y+47, r24	; 0x2f
    620e:	8f a5       	ldd	r24, Y+47	; 0x2f
    6210:	98 a9       	ldd	r25, Y+48	; 0x30
    6212:	9c a7       	std	Y+44, r25	; 0x2c
    6214:	8b a7       	std	Y+43, r24	; 0x2b
    6216:	8b a5       	ldd	r24, Y+43	; 0x2b
    6218:	9c a5       	ldd	r25, Y+44	; 0x2c
    621a:	01 97       	sbiw	r24, 0x01	; 1
    621c:	f1 f7       	brne	.-4      	; 0x621a <main+0x41c>
    621e:	9c a7       	std	Y+44, r25	; 0x2c
    6220:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(3000);
			Dashboard_FrameOne();
    6222:	0e 94 77 0b 	call	0x16ee	; 0x16ee <Dashboard_FrameOne>
    6226:	ff cf       	rjmp	.-2      	; 0x6226 <main+0x428>
			while(1)
			{
			}
    6228:	80 e0       	ldi	r24, 0x00	; 0
    622a:	90 e0       	ldi	r25, 0x00	; 0
    622c:	aa e7       	ldi	r26, 0x7A	; 122
    622e:	b4 e4       	ldi	r27, 0x44	; 68
    6230:	8f a3       	std	Y+39, r24	; 0x27
    6232:	98 a7       	std	Y+40, r25	; 0x28
    6234:	a9 a7       	std	Y+41, r26	; 0x29
    6236:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6238:	6f a1       	ldd	r22, Y+39	; 0x27
    623a:	78 a5       	ldd	r23, Y+40	; 0x28
    623c:	89 a5       	ldd	r24, Y+41	; 0x29
    623e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6240:	20 e0       	ldi	r18, 0x00	; 0
    6242:	30 e0       	ldi	r19, 0x00	; 0
    6244:	4a ef       	ldi	r20, 0xFA	; 250
    6246:	54 e4       	ldi	r21, 0x44	; 68
    6248:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    624c:	dc 01       	movw	r26, r24
    624e:	cb 01       	movw	r24, r22
    6250:	8b a3       	std	Y+35, r24	; 0x23
    6252:	9c a3       	std	Y+36, r25	; 0x24
    6254:	ad a3       	std	Y+37, r26	; 0x25
    6256:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6258:	6b a1       	ldd	r22, Y+35	; 0x23
    625a:	7c a1       	ldd	r23, Y+36	; 0x24
    625c:	8d a1       	ldd	r24, Y+37	; 0x25
    625e:	9e a1       	ldd	r25, Y+38	; 0x26
    6260:	20 e0       	ldi	r18, 0x00	; 0
    6262:	30 e0       	ldi	r19, 0x00	; 0
    6264:	40 e8       	ldi	r20, 0x80	; 128
    6266:	5f e3       	ldi	r21, 0x3F	; 63
    6268:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    626c:	88 23       	and	r24, r24
    626e:	2c f4       	brge	.+10     	; 0x627a <main+0x47c>
		__ticks = 1;
    6270:	81 e0       	ldi	r24, 0x01	; 1
    6272:	90 e0       	ldi	r25, 0x00	; 0
    6274:	9a a3       	std	Y+34, r25	; 0x22
    6276:	89 a3       	std	Y+33, r24	; 0x21
    6278:	3f c0       	rjmp	.+126    	; 0x62f8 <main+0x4fa>
	else if (__tmp > 65535)
    627a:	6b a1       	ldd	r22, Y+35	; 0x23
    627c:	7c a1       	ldd	r23, Y+36	; 0x24
    627e:	8d a1       	ldd	r24, Y+37	; 0x25
    6280:	9e a1       	ldd	r25, Y+38	; 0x26
    6282:	20 e0       	ldi	r18, 0x00	; 0
    6284:	3f ef       	ldi	r19, 0xFF	; 255
    6286:	4f e7       	ldi	r20, 0x7F	; 127
    6288:	57 e4       	ldi	r21, 0x47	; 71
    628a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    628e:	18 16       	cp	r1, r24
    6290:	4c f5       	brge	.+82     	; 0x62e4 <main+0x4e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6292:	6f a1       	ldd	r22, Y+39	; 0x27
    6294:	78 a5       	ldd	r23, Y+40	; 0x28
    6296:	89 a5       	ldd	r24, Y+41	; 0x29
    6298:	9a a5       	ldd	r25, Y+42	; 0x2a
    629a:	20 e0       	ldi	r18, 0x00	; 0
    629c:	30 e0       	ldi	r19, 0x00	; 0
    629e:	40 e2       	ldi	r20, 0x20	; 32
    62a0:	51 e4       	ldi	r21, 0x41	; 65
    62a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62a6:	dc 01       	movw	r26, r24
    62a8:	cb 01       	movw	r24, r22
    62aa:	bc 01       	movw	r22, r24
    62ac:	cd 01       	movw	r24, r26
    62ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62b2:	dc 01       	movw	r26, r24
    62b4:	cb 01       	movw	r24, r22
    62b6:	9a a3       	std	Y+34, r25	; 0x22
    62b8:	89 a3       	std	Y+33, r24	; 0x21
    62ba:	0f c0       	rjmp	.+30     	; 0x62da <main+0x4dc>
    62bc:	88 ec       	ldi	r24, 0xC8	; 200
    62be:	90 e0       	ldi	r25, 0x00	; 0
    62c0:	98 a3       	std	Y+32, r25	; 0x20
    62c2:	8f 8f       	std	Y+31, r24	; 0x1f
    62c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    62c6:	98 a1       	ldd	r25, Y+32	; 0x20
    62c8:	01 97       	sbiw	r24, 0x01	; 1
    62ca:	f1 f7       	brne	.-4      	; 0x62c8 <main+0x4ca>
    62cc:	98 a3       	std	Y+32, r25	; 0x20
    62ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62d0:	89 a1       	ldd	r24, Y+33	; 0x21
    62d2:	9a a1       	ldd	r25, Y+34	; 0x22
    62d4:	01 97       	sbiw	r24, 0x01	; 1
    62d6:	9a a3       	std	Y+34, r25	; 0x22
    62d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62da:	89 a1       	ldd	r24, Y+33	; 0x21
    62dc:	9a a1       	ldd	r25, Y+34	; 0x22
    62de:	00 97       	sbiw	r24, 0x00	; 0
    62e0:	69 f7       	brne	.-38     	; 0x62bc <main+0x4be>
    62e2:	14 c0       	rjmp	.+40     	; 0x630c <main+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62e4:	6b a1       	ldd	r22, Y+35	; 0x23
    62e6:	7c a1       	ldd	r23, Y+36	; 0x24
    62e8:	8d a1       	ldd	r24, Y+37	; 0x25
    62ea:	9e a1       	ldd	r25, Y+38	; 0x26
    62ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62f0:	dc 01       	movw	r26, r24
    62f2:	cb 01       	movw	r24, r22
    62f4:	9a a3       	std	Y+34, r25	; 0x22
    62f6:	89 a3       	std	Y+33, r24	; 0x21
    62f8:	89 a1       	ldd	r24, Y+33	; 0x21
    62fa:	9a a1       	ldd	r25, Y+34	; 0x22
    62fc:	9e 8f       	std	Y+30, r25	; 0x1e
    62fe:	8d 8f       	std	Y+29, r24	; 0x1d
    6300:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6302:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6304:	01 97       	sbiw	r24, 0x01	; 1
    6306:	f1 f7       	brne	.-4      	; 0x6304 <main+0x506>
    6308:	9e 8f       	std	Y+30, r25	; 0x1e
    630a:	8d 8f       	std	Y+29, r24	; 0x1d
		}
		else
		{
			_delay_ms(1000);
			LCD_voidClearScreen();
    630c:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <LCD_voidClearScreen>
    6310:	80 e0       	ldi	r24, 0x00	; 0
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	a0 ea       	ldi	r26, 0xA0	; 160
    6316:	b1 e4       	ldi	r27, 0x41	; 65
    6318:	89 8f       	std	Y+25, r24	; 0x19
    631a:	9a 8f       	std	Y+26, r25	; 0x1a
    631c:	ab 8f       	std	Y+27, r26	; 0x1b
    631e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6320:	69 8d       	ldd	r22, Y+25	; 0x19
    6322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6328:	20 e0       	ldi	r18, 0x00	; 0
    632a:	30 e0       	ldi	r19, 0x00	; 0
    632c:	4a ef       	ldi	r20, 0xFA	; 250
    632e:	54 e4       	ldi	r21, 0x44	; 68
    6330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6334:	dc 01       	movw	r26, r24
    6336:	cb 01       	movw	r24, r22
    6338:	8d 8b       	std	Y+21, r24	; 0x15
    633a:	9e 8b       	std	Y+22, r25	; 0x16
    633c:	af 8b       	std	Y+23, r26	; 0x17
    633e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6340:	6d 89       	ldd	r22, Y+21	; 0x15
    6342:	7e 89       	ldd	r23, Y+22	; 0x16
    6344:	8f 89       	ldd	r24, Y+23	; 0x17
    6346:	98 8d       	ldd	r25, Y+24	; 0x18
    6348:	20 e0       	ldi	r18, 0x00	; 0
    634a:	30 e0       	ldi	r19, 0x00	; 0
    634c:	40 e8       	ldi	r20, 0x80	; 128
    634e:	5f e3       	ldi	r21, 0x3F	; 63
    6350:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6354:	88 23       	and	r24, r24
    6356:	2c f4       	brge	.+10     	; 0x6362 <main+0x564>
		__ticks = 1;
    6358:	81 e0       	ldi	r24, 0x01	; 1
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	9c 8b       	std	Y+20, r25	; 0x14
    635e:	8b 8b       	std	Y+19, r24	; 0x13
    6360:	3f c0       	rjmp	.+126    	; 0x63e0 <main+0x5e2>
	else if (__tmp > 65535)
    6362:	6d 89       	ldd	r22, Y+21	; 0x15
    6364:	7e 89       	ldd	r23, Y+22	; 0x16
    6366:	8f 89       	ldd	r24, Y+23	; 0x17
    6368:	98 8d       	ldd	r25, Y+24	; 0x18
    636a:	20 e0       	ldi	r18, 0x00	; 0
    636c:	3f ef       	ldi	r19, 0xFF	; 255
    636e:	4f e7       	ldi	r20, 0x7F	; 127
    6370:	57 e4       	ldi	r21, 0x47	; 71
    6372:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6376:	18 16       	cp	r1, r24
    6378:	4c f5       	brge	.+82     	; 0x63cc <main+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    637a:	69 8d       	ldd	r22, Y+25	; 0x19
    637c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    637e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6380:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6382:	20 e0       	ldi	r18, 0x00	; 0
    6384:	30 e0       	ldi	r19, 0x00	; 0
    6386:	40 e2       	ldi	r20, 0x20	; 32
    6388:	51 e4       	ldi	r21, 0x41	; 65
    638a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    638e:	dc 01       	movw	r26, r24
    6390:	cb 01       	movw	r24, r22
    6392:	bc 01       	movw	r22, r24
    6394:	cd 01       	movw	r24, r26
    6396:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    639a:	dc 01       	movw	r26, r24
    639c:	cb 01       	movw	r24, r22
    639e:	9c 8b       	std	Y+20, r25	; 0x14
    63a0:	8b 8b       	std	Y+19, r24	; 0x13
    63a2:	0f c0       	rjmp	.+30     	; 0x63c2 <main+0x5c4>
    63a4:	88 ec       	ldi	r24, 0xC8	; 200
    63a6:	90 e0       	ldi	r25, 0x00	; 0
    63a8:	9a 8b       	std	Y+18, r25	; 0x12
    63aa:	89 8b       	std	Y+17, r24	; 0x11
    63ac:	89 89       	ldd	r24, Y+17	; 0x11
    63ae:	9a 89       	ldd	r25, Y+18	; 0x12
    63b0:	01 97       	sbiw	r24, 0x01	; 1
    63b2:	f1 f7       	brne	.-4      	; 0x63b0 <main+0x5b2>
    63b4:	9a 8b       	std	Y+18, r25	; 0x12
    63b6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63b8:	8b 89       	ldd	r24, Y+19	; 0x13
    63ba:	9c 89       	ldd	r25, Y+20	; 0x14
    63bc:	01 97       	sbiw	r24, 0x01	; 1
    63be:	9c 8b       	std	Y+20, r25	; 0x14
    63c0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63c2:	8b 89       	ldd	r24, Y+19	; 0x13
    63c4:	9c 89       	ldd	r25, Y+20	; 0x14
    63c6:	00 97       	sbiw	r24, 0x00	; 0
    63c8:	69 f7       	brne	.-38     	; 0x63a4 <main+0x5a6>
    63ca:	14 c0       	rjmp	.+40     	; 0x63f4 <main+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63cc:	6d 89       	ldd	r22, Y+21	; 0x15
    63ce:	7e 89       	ldd	r23, Y+22	; 0x16
    63d0:	8f 89       	ldd	r24, Y+23	; 0x17
    63d2:	98 8d       	ldd	r25, Y+24	; 0x18
    63d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    63d8:	dc 01       	movw	r26, r24
    63da:	cb 01       	movw	r24, r22
    63dc:	9c 8b       	std	Y+20, r25	; 0x14
    63de:	8b 8b       	std	Y+19, r24	; 0x13
    63e0:	8b 89       	ldd	r24, Y+19	; 0x13
    63e2:	9c 89       	ldd	r25, Y+20	; 0x14
    63e4:	98 8b       	std	Y+16, r25	; 0x10
    63e6:	8f 87       	std	Y+15, r24	; 0x0f
    63e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    63ea:	98 89       	ldd	r25, Y+16	; 0x10
    63ec:	01 97       	sbiw	r24, 0x01	; 1
    63ee:	f1 f7       	brne	.-4      	; 0x63ec <main+0x5ee>
    63f0:	98 8b       	std	Y+16, r25	; 0x10
    63f2:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(20);
			LCD_voidWriteString((u8*)"GoodLuck!");
    63f4:	82 e6       	ldi	r24, 0x62	; 98
    63f6:	91 e0       	ldi	r25, 0x01	; 1
    63f8:	0e 94 ca 1c 	call	0x3994	; 0x3994 <LCD_voidWriteString>
    63fc:	80 e0       	ldi	r24, 0x00	; 0
    63fe:	90 e8       	ldi	r25, 0x80	; 128
    6400:	ab e3       	ldi	r26, 0x3B	; 59
    6402:	b5 e4       	ldi	r27, 0x45	; 69
    6404:	8b 87       	std	Y+11, r24	; 0x0b
    6406:	9c 87       	std	Y+12, r25	; 0x0c
    6408:	ad 87       	std	Y+13, r26	; 0x0d
    640a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    640c:	6b 85       	ldd	r22, Y+11	; 0x0b
    640e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6410:	8d 85       	ldd	r24, Y+13	; 0x0d
    6412:	9e 85       	ldd	r25, Y+14	; 0x0e
    6414:	20 e0       	ldi	r18, 0x00	; 0
    6416:	30 e0       	ldi	r19, 0x00	; 0
    6418:	4a ef       	ldi	r20, 0xFA	; 250
    641a:	54 e4       	ldi	r21, 0x44	; 68
    641c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6420:	dc 01       	movw	r26, r24
    6422:	cb 01       	movw	r24, r22
    6424:	8f 83       	std	Y+7, r24	; 0x07
    6426:	98 87       	std	Y+8, r25	; 0x08
    6428:	a9 87       	std	Y+9, r26	; 0x09
    642a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    642c:	6f 81       	ldd	r22, Y+7	; 0x07
    642e:	78 85       	ldd	r23, Y+8	; 0x08
    6430:	89 85       	ldd	r24, Y+9	; 0x09
    6432:	9a 85       	ldd	r25, Y+10	; 0x0a
    6434:	20 e0       	ldi	r18, 0x00	; 0
    6436:	30 e0       	ldi	r19, 0x00	; 0
    6438:	40 e8       	ldi	r20, 0x80	; 128
    643a:	5f e3       	ldi	r21, 0x3F	; 63
    643c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6440:	88 23       	and	r24, r24
    6442:	2c f4       	brge	.+10     	; 0x644e <main+0x650>
		__ticks = 1;
    6444:	81 e0       	ldi	r24, 0x01	; 1
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	9e 83       	std	Y+6, r25	; 0x06
    644a:	8d 83       	std	Y+5, r24	; 0x05
    644c:	3f c0       	rjmp	.+126    	; 0x64cc <main+0x6ce>
	else if (__tmp > 65535)
    644e:	6f 81       	ldd	r22, Y+7	; 0x07
    6450:	78 85       	ldd	r23, Y+8	; 0x08
    6452:	89 85       	ldd	r24, Y+9	; 0x09
    6454:	9a 85       	ldd	r25, Y+10	; 0x0a
    6456:	20 e0       	ldi	r18, 0x00	; 0
    6458:	3f ef       	ldi	r19, 0xFF	; 255
    645a:	4f e7       	ldi	r20, 0x7F	; 127
    645c:	57 e4       	ldi	r21, 0x47	; 71
    645e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6462:	18 16       	cp	r1, r24
    6464:	4c f5       	brge	.+82     	; 0x64b8 <main+0x6ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6466:	6b 85       	ldd	r22, Y+11	; 0x0b
    6468:	7c 85       	ldd	r23, Y+12	; 0x0c
    646a:	8d 85       	ldd	r24, Y+13	; 0x0d
    646c:	9e 85       	ldd	r25, Y+14	; 0x0e
    646e:	20 e0       	ldi	r18, 0x00	; 0
    6470:	30 e0       	ldi	r19, 0x00	; 0
    6472:	40 e2       	ldi	r20, 0x20	; 32
    6474:	51 e4       	ldi	r21, 0x41	; 65
    6476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    647a:	dc 01       	movw	r26, r24
    647c:	cb 01       	movw	r24, r22
    647e:	bc 01       	movw	r22, r24
    6480:	cd 01       	movw	r24, r26
    6482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6486:	dc 01       	movw	r26, r24
    6488:	cb 01       	movw	r24, r22
    648a:	9e 83       	std	Y+6, r25	; 0x06
    648c:	8d 83       	std	Y+5, r24	; 0x05
    648e:	0f c0       	rjmp	.+30     	; 0x64ae <main+0x6b0>
    6490:	88 ec       	ldi	r24, 0xC8	; 200
    6492:	90 e0       	ldi	r25, 0x00	; 0
    6494:	9c 83       	std	Y+4, r25	; 0x04
    6496:	8b 83       	std	Y+3, r24	; 0x03
    6498:	8b 81       	ldd	r24, Y+3	; 0x03
    649a:	9c 81       	ldd	r25, Y+4	; 0x04
    649c:	01 97       	sbiw	r24, 0x01	; 1
    649e:	f1 f7       	brne	.-4      	; 0x649c <main+0x69e>
    64a0:	9c 83       	std	Y+4, r25	; 0x04
    64a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64a4:	8d 81       	ldd	r24, Y+5	; 0x05
    64a6:	9e 81       	ldd	r25, Y+6	; 0x06
    64a8:	01 97       	sbiw	r24, 0x01	; 1
    64aa:	9e 83       	std	Y+6, r25	; 0x06
    64ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64ae:	8d 81       	ldd	r24, Y+5	; 0x05
    64b0:	9e 81       	ldd	r25, Y+6	; 0x06
    64b2:	00 97       	sbiw	r24, 0x00	; 0
    64b4:	69 f7       	brne	.-38     	; 0x6490 <main+0x692>
    64b6:	14 c0       	rjmp	.+40     	; 0x64e0 <main+0x6e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64b8:	6f 81       	ldd	r22, Y+7	; 0x07
    64ba:	78 85       	ldd	r23, Y+8	; 0x08
    64bc:	89 85       	ldd	r24, Y+9	; 0x09
    64be:	9a 85       	ldd	r25, Y+10	; 0x0a
    64c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64c4:	dc 01       	movw	r26, r24
    64c6:	cb 01       	movw	r24, r22
    64c8:	9e 83       	std	Y+6, r25	; 0x06
    64ca:	8d 83       	std	Y+5, r24	; 0x05
    64cc:	8d 81       	ldd	r24, Y+5	; 0x05
    64ce:	9e 81       	ldd	r25, Y+6	; 0x06
    64d0:	9a 83       	std	Y+2, r25	; 0x02
    64d2:	89 83       	std	Y+1, r24	; 0x01
    64d4:	89 81       	ldd	r24, Y+1	; 0x01
    64d6:	9a 81       	ldd	r25, Y+2	; 0x02
    64d8:	01 97       	sbiw	r24, 0x01	; 1
    64da:	f1 f7       	brne	.-4      	; 0x64d8 <main+0x6da>
    64dc:	9a 83       	std	Y+2, r25	; 0x02
    64de:	89 83       	std	Y+1, r24	; 0x01
    64e0:	ff cf       	rjmp	.-2      	; 0x64e0 <main+0x6e2>

000064e2 <__mulsi3>:
    64e2:	62 9f       	mul	r22, r18
    64e4:	d0 01       	movw	r26, r0
    64e6:	73 9f       	mul	r23, r19
    64e8:	f0 01       	movw	r30, r0
    64ea:	82 9f       	mul	r24, r18
    64ec:	e0 0d       	add	r30, r0
    64ee:	f1 1d       	adc	r31, r1
    64f0:	64 9f       	mul	r22, r20
    64f2:	e0 0d       	add	r30, r0
    64f4:	f1 1d       	adc	r31, r1
    64f6:	92 9f       	mul	r25, r18
    64f8:	f0 0d       	add	r31, r0
    64fa:	83 9f       	mul	r24, r19
    64fc:	f0 0d       	add	r31, r0
    64fe:	74 9f       	mul	r23, r20
    6500:	f0 0d       	add	r31, r0
    6502:	65 9f       	mul	r22, r21
    6504:	f0 0d       	add	r31, r0
    6506:	99 27       	eor	r25, r25
    6508:	72 9f       	mul	r23, r18
    650a:	b0 0d       	add	r27, r0
    650c:	e1 1d       	adc	r30, r1
    650e:	f9 1f       	adc	r31, r25
    6510:	63 9f       	mul	r22, r19
    6512:	b0 0d       	add	r27, r0
    6514:	e1 1d       	adc	r30, r1
    6516:	f9 1f       	adc	r31, r25
    6518:	bd 01       	movw	r22, r26
    651a:	cf 01       	movw	r24, r30
    651c:	11 24       	eor	r1, r1
    651e:	08 95       	ret

00006520 <__udivmodsi4>:
    6520:	a1 e2       	ldi	r26, 0x21	; 33
    6522:	1a 2e       	mov	r1, r26
    6524:	aa 1b       	sub	r26, r26
    6526:	bb 1b       	sub	r27, r27
    6528:	fd 01       	movw	r30, r26
    652a:	0d c0       	rjmp	.+26     	; 0x6546 <__udivmodsi4_ep>

0000652c <__udivmodsi4_loop>:
    652c:	aa 1f       	adc	r26, r26
    652e:	bb 1f       	adc	r27, r27
    6530:	ee 1f       	adc	r30, r30
    6532:	ff 1f       	adc	r31, r31
    6534:	a2 17       	cp	r26, r18
    6536:	b3 07       	cpc	r27, r19
    6538:	e4 07       	cpc	r30, r20
    653a:	f5 07       	cpc	r31, r21
    653c:	20 f0       	brcs	.+8      	; 0x6546 <__udivmodsi4_ep>
    653e:	a2 1b       	sub	r26, r18
    6540:	b3 0b       	sbc	r27, r19
    6542:	e4 0b       	sbc	r30, r20
    6544:	f5 0b       	sbc	r31, r21

00006546 <__udivmodsi4_ep>:
    6546:	66 1f       	adc	r22, r22
    6548:	77 1f       	adc	r23, r23
    654a:	88 1f       	adc	r24, r24
    654c:	99 1f       	adc	r25, r25
    654e:	1a 94       	dec	r1
    6550:	69 f7       	brne	.-38     	; 0x652c <__udivmodsi4_loop>
    6552:	60 95       	com	r22
    6554:	70 95       	com	r23
    6556:	80 95       	com	r24
    6558:	90 95       	com	r25
    655a:	9b 01       	movw	r18, r22
    655c:	ac 01       	movw	r20, r24
    655e:	bd 01       	movw	r22, r26
    6560:	cf 01       	movw	r24, r30
    6562:	08 95       	ret

00006564 <__prologue_saves__>:
    6564:	2f 92       	push	r2
    6566:	3f 92       	push	r3
    6568:	4f 92       	push	r4
    656a:	5f 92       	push	r5
    656c:	6f 92       	push	r6
    656e:	7f 92       	push	r7
    6570:	8f 92       	push	r8
    6572:	9f 92       	push	r9
    6574:	af 92       	push	r10
    6576:	bf 92       	push	r11
    6578:	cf 92       	push	r12
    657a:	df 92       	push	r13
    657c:	ef 92       	push	r14
    657e:	ff 92       	push	r15
    6580:	0f 93       	push	r16
    6582:	1f 93       	push	r17
    6584:	cf 93       	push	r28
    6586:	df 93       	push	r29
    6588:	cd b7       	in	r28, 0x3d	; 61
    658a:	de b7       	in	r29, 0x3e	; 62
    658c:	ca 1b       	sub	r28, r26
    658e:	db 0b       	sbc	r29, r27
    6590:	0f b6       	in	r0, 0x3f	; 63
    6592:	f8 94       	cli
    6594:	de bf       	out	0x3e, r29	; 62
    6596:	0f be       	out	0x3f, r0	; 63
    6598:	cd bf       	out	0x3d, r28	; 61
    659a:	09 94       	ijmp

0000659c <__epilogue_restores__>:
    659c:	2a 88       	ldd	r2, Y+18	; 0x12
    659e:	39 88       	ldd	r3, Y+17	; 0x11
    65a0:	48 88       	ldd	r4, Y+16	; 0x10
    65a2:	5f 84       	ldd	r5, Y+15	; 0x0f
    65a4:	6e 84       	ldd	r6, Y+14	; 0x0e
    65a6:	7d 84       	ldd	r7, Y+13	; 0x0d
    65a8:	8c 84       	ldd	r8, Y+12	; 0x0c
    65aa:	9b 84       	ldd	r9, Y+11	; 0x0b
    65ac:	aa 84       	ldd	r10, Y+10	; 0x0a
    65ae:	b9 84       	ldd	r11, Y+9	; 0x09
    65b0:	c8 84       	ldd	r12, Y+8	; 0x08
    65b2:	df 80       	ldd	r13, Y+7	; 0x07
    65b4:	ee 80       	ldd	r14, Y+6	; 0x06
    65b6:	fd 80       	ldd	r15, Y+5	; 0x05
    65b8:	0c 81       	ldd	r16, Y+4	; 0x04
    65ba:	1b 81       	ldd	r17, Y+3	; 0x03
    65bc:	aa 81       	ldd	r26, Y+2	; 0x02
    65be:	b9 81       	ldd	r27, Y+1	; 0x01
    65c0:	ce 0f       	add	r28, r30
    65c2:	d1 1d       	adc	r29, r1
    65c4:	0f b6       	in	r0, 0x3f	; 63
    65c6:	f8 94       	cli
    65c8:	de bf       	out	0x3e, r29	; 62
    65ca:	0f be       	out	0x3f, r0	; 63
    65cc:	cd bf       	out	0x3d, r28	; 61
    65ce:	ed 01       	movw	r28, r26
    65d0:	08 95       	ret

000065d2 <ceil>:
    65d2:	3b d0       	rcall	.+118    	; 0x664a <__fp_trunc>
    65d4:	80 f0       	brcs	.+32     	; 0x65f6 <ceil+0x24>
    65d6:	9f 37       	cpi	r25, 0x7F	; 127
    65d8:	40 f4       	brcc	.+16     	; 0x65ea <ceil+0x18>
    65da:	91 11       	cpse	r25, r1
    65dc:	0e f4       	brtc	.+2      	; 0x65e0 <ceil+0xe>
    65de:	4d c0       	rjmp	.+154    	; 0x667a <__fp_szero>
    65e0:	60 e0       	ldi	r22, 0x00	; 0
    65e2:	70 e0       	ldi	r23, 0x00	; 0
    65e4:	80 e8       	ldi	r24, 0x80	; 128
    65e6:	9f e3       	ldi	r25, 0x3F	; 63
    65e8:	08 95       	ret
    65ea:	26 f0       	brts	.+8      	; 0x65f4 <ceil+0x22>
    65ec:	1b 16       	cp	r1, r27
    65ee:	61 1d       	adc	r22, r1
    65f0:	71 1d       	adc	r23, r1
    65f2:	81 1d       	adc	r24, r1
    65f4:	01 c0       	rjmp	.+2      	; 0x65f8 <__fp_mintl>
    65f6:	1b c0       	rjmp	.+54     	; 0x662e <__fp_mpack>

000065f8 <__fp_mintl>:
    65f8:	88 23       	and	r24, r24
    65fa:	71 f4       	brne	.+28     	; 0x6618 <__fp_mintl+0x20>
    65fc:	77 23       	and	r23, r23
    65fe:	21 f0       	breq	.+8      	; 0x6608 <__fp_mintl+0x10>
    6600:	98 50       	subi	r25, 0x08	; 8
    6602:	87 2b       	or	r24, r23
    6604:	76 2f       	mov	r23, r22
    6606:	07 c0       	rjmp	.+14     	; 0x6616 <__fp_mintl+0x1e>
    6608:	66 23       	and	r22, r22
    660a:	11 f4       	brne	.+4      	; 0x6610 <__fp_mintl+0x18>
    660c:	99 27       	eor	r25, r25
    660e:	0d c0       	rjmp	.+26     	; 0x662a <__fp_mintl+0x32>
    6610:	90 51       	subi	r25, 0x10	; 16
    6612:	86 2b       	or	r24, r22
    6614:	70 e0       	ldi	r23, 0x00	; 0
    6616:	60 e0       	ldi	r22, 0x00	; 0
    6618:	2a f0       	brmi	.+10     	; 0x6624 <__fp_mintl+0x2c>
    661a:	9a 95       	dec	r25
    661c:	66 0f       	add	r22, r22
    661e:	77 1f       	adc	r23, r23
    6620:	88 1f       	adc	r24, r24
    6622:	da f7       	brpl	.-10     	; 0x661a <__fp_mintl+0x22>
    6624:	88 0f       	add	r24, r24
    6626:	96 95       	lsr	r25
    6628:	87 95       	ror	r24
    662a:	97 f9       	bld	r25, 7
    662c:	08 95       	ret

0000662e <__fp_mpack>:
    662e:	9f 3f       	cpi	r25, 0xFF	; 255
    6630:	31 f0       	breq	.+12     	; 0x663e <__fp_mpack_finite+0xc>

00006632 <__fp_mpack_finite>:
    6632:	91 50       	subi	r25, 0x01	; 1
    6634:	20 f4       	brcc	.+8      	; 0x663e <__fp_mpack_finite+0xc>
    6636:	87 95       	ror	r24
    6638:	77 95       	ror	r23
    663a:	67 95       	ror	r22
    663c:	b7 95       	ror	r27
    663e:	88 0f       	add	r24, r24
    6640:	91 1d       	adc	r25, r1
    6642:	96 95       	lsr	r25
    6644:	87 95       	ror	r24
    6646:	97 f9       	bld	r25, 7
    6648:	08 95       	ret

0000664a <__fp_trunc>:
    664a:	25 d0       	rcall	.+74     	; 0x6696 <__fp_splitA>
    664c:	a0 f0       	brcs	.+40     	; 0x6676 <__fp_trunc+0x2c>
    664e:	be e7       	ldi	r27, 0x7E	; 126
    6650:	b9 17       	cp	r27, r25
    6652:	88 f4       	brcc	.+34     	; 0x6676 <__fp_trunc+0x2c>
    6654:	bb 27       	eor	r27, r27
    6656:	9f 38       	cpi	r25, 0x8F	; 143
    6658:	60 f4       	brcc	.+24     	; 0x6672 <__fp_trunc+0x28>
    665a:	16 16       	cp	r1, r22
    665c:	b1 1d       	adc	r27, r1
    665e:	67 2f       	mov	r22, r23
    6660:	78 2f       	mov	r23, r24
    6662:	88 27       	eor	r24, r24
    6664:	98 5f       	subi	r25, 0xF8	; 248
    6666:	f7 cf       	rjmp	.-18     	; 0x6656 <__fp_trunc+0xc>
    6668:	86 95       	lsr	r24
    666a:	77 95       	ror	r23
    666c:	67 95       	ror	r22
    666e:	b1 1d       	adc	r27, r1
    6670:	93 95       	inc	r25
    6672:	96 39       	cpi	r25, 0x96	; 150
    6674:	c8 f3       	brcs	.-14     	; 0x6668 <__fp_trunc+0x1e>
    6676:	08 95       	ret

00006678 <__fp_zero>:
    6678:	e8 94       	clt

0000667a <__fp_szero>:
    667a:	bb 27       	eor	r27, r27
    667c:	66 27       	eor	r22, r22
    667e:	77 27       	eor	r23, r23
    6680:	cb 01       	movw	r24, r22
    6682:	97 f9       	bld	r25, 7
    6684:	08 95       	ret

00006686 <__fp_split3>:
    6686:	57 fd       	sbrc	r21, 7
    6688:	90 58       	subi	r25, 0x80	; 128
    668a:	44 0f       	add	r20, r20
    668c:	55 1f       	adc	r21, r21
    668e:	59 f0       	breq	.+22     	; 0x66a6 <__fp_splitA+0x10>
    6690:	5f 3f       	cpi	r21, 0xFF	; 255
    6692:	71 f0       	breq	.+28     	; 0x66b0 <__fp_splitA+0x1a>
    6694:	47 95       	ror	r20

00006696 <__fp_splitA>:
    6696:	88 0f       	add	r24, r24
    6698:	97 fb       	bst	r25, 7
    669a:	99 1f       	adc	r25, r25
    669c:	61 f0       	breq	.+24     	; 0x66b6 <__fp_splitA+0x20>
    669e:	9f 3f       	cpi	r25, 0xFF	; 255
    66a0:	79 f0       	breq	.+30     	; 0x66c0 <__fp_splitA+0x2a>
    66a2:	87 95       	ror	r24
    66a4:	08 95       	ret
    66a6:	12 16       	cp	r1, r18
    66a8:	13 06       	cpc	r1, r19
    66aa:	14 06       	cpc	r1, r20
    66ac:	55 1f       	adc	r21, r21
    66ae:	f2 cf       	rjmp	.-28     	; 0x6694 <__fp_split3+0xe>
    66b0:	46 95       	lsr	r20
    66b2:	f1 df       	rcall	.-30     	; 0x6696 <__fp_splitA>
    66b4:	08 c0       	rjmp	.+16     	; 0x66c6 <__fp_splitA+0x30>
    66b6:	16 16       	cp	r1, r22
    66b8:	17 06       	cpc	r1, r23
    66ba:	18 06       	cpc	r1, r24
    66bc:	99 1f       	adc	r25, r25
    66be:	f1 cf       	rjmp	.-30     	; 0x66a2 <__fp_splitA+0xc>
    66c0:	86 95       	lsr	r24
    66c2:	71 05       	cpc	r23, r1
    66c4:	61 05       	cpc	r22, r1
    66c6:	08 94       	sec
    66c8:	08 95       	ret

000066ca <_exit>:
    66ca:	f8 94       	cli

000066cc <__stop_program>:
    66cc:	ff cf       	rjmp	.-2      	; 0x66cc <__stop_program>
