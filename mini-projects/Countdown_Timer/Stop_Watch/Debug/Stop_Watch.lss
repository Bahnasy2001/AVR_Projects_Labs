
Stop_Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003420  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  00003420  000034b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  008000a8  008000a8  000034fc  2**0
                  ALLOC
  3 .stab         00002c88  00000000  00000000  000034fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000101b  00000000  00000000  00006184  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000719f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000072ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000748e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  000094d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a5d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b558  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b99a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c228  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__vector_10>
      2c:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ea       	ldi	r26, 0xA8	; 168
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <main>
      8a:	0c 94 0e 1a 	jmp	0x341c	; 0x341c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e8       	ldi	r26, 0x86	; 134
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d7 19 	jmp	0x33ae	; 0x33ae <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e8       	ldi	r24, 0x86	; 134
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 df 19 	jmp	0x33be	; 0x33be <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 e8       	ldi	r22, 0x86	; 134
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	80 83       	st	Z, r24

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1

}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2e 97       	sbiw	r28, 0x0e	; 14
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	8a 83       	std	Y+2, r24	; 0x02
     cfc:	6b 83       	std	Y+3, r22	; 0x03
     cfe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x26>
     d0a:	0d c1       	rjmp	.+538    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x2e>
     d12:	09 c1       	rjmp	.+530    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d20:	02 c1       	rjmp	.+516    	; 0xf26 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3e 87       	std	Y+14, r19	; 0x0e
     d2a:	2d 87       	std	Y+13, r18	; 0x0d
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_u8SetPinDirection+0x52>
     d36:	4f c0       	rjmp	.+158    	; 0xdd6 <DIO_u8SetPinDirection+0xf0>
     d38:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_u8SetPinDirection+0x66>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <DIO_u8SetPinDirection+0x80>
     d4a:	ee c0       	rjmp	.+476    	; 0xf28 <DIO_u8SetPinDirection+0x242>
     d4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_u8SetPinDirection+0x72>
     d56:	77 c0       	rjmp	.+238    	; 0xe46 <DIO_u8SetPinDirection+0x160>
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_u8SetPinDirection+0x7e>
     d62:	a9 c0       	rjmp	.+338    	; 0xeb6 <DIO_u8SetPinDirection+0x1d0>
     d64:	e1 c0       	rjmp	.+450    	; 0xf28 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3c 87       	std	Y+12, r19	; 0x0c
     d6e:	2b 87       	std	Y+11, r18	; 0x0b
     d70:	8b 85       	ldd	r24, Y+11	; 0x0b
     d72:	9c 85       	ldd	r25, Y+12	; 0x0c
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	31 f0       	breq	.+12     	; 0xd84 <DIO_u8SetPinDirection+0x9e>
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	21 30       	cpi	r18, 0x01	; 1
     d7e:	31 05       	cpc	r19, r1
     d80:	b1 f0       	breq	.+44     	; 0xdae <DIO_u8SetPinDirection+0xc8>
     d82:	d2 c0       	rjmp	.+420    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d84:	aa e3       	ldi	r26, 0x3A	; 58
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ea e3       	ldi	r30, 0x3A	; 58
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_u8SetPinDirection+0xbc>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_u8SetPinDirection+0xb8>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	bd c0       	rjmp	.+378    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     dae:	aa e3       	ldi	r26, 0x3A	; 58
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_u8SetPinDirection+0xe6>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_u8SetPinDirection+0xe2>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	a9 c0       	rjmp	.+338    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	3a 87       	std	Y+10, r19	; 0x0a
     dde:	29 87       	std	Y+9, r18	; 0x09
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	31 f0       	breq	.+12     	; 0xdf4 <DIO_u8SetPinDirection+0x10e>
     de8:	29 85       	ldd	r18, Y+9	; 0x09
     dea:	3a 85       	ldd	r19, Y+10	; 0x0a
     dec:	21 30       	cpi	r18, 0x01	; 1
     dee:	31 05       	cpc	r19, r1
     df0:	b1 f0       	breq	.+44     	; 0xe1e <DIO_u8SetPinDirection+0x138>
     df2:	9a c0       	rjmp	.+308    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     df4:	a7 e3       	ldi	r26, 0x37	; 55
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_u8SetPinDirection+0x12c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_u8SetPinDirection+0x128>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	85 c0       	rjmp	.+266    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e1e:	a7 e3       	ldi	r26, 0x37	; 55
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e3       	ldi	r30, 0x37	; 55
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_u8SetPinDirection+0x156>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_u8SetPinDirection+0x152>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	71 c0       	rjmp	.+226    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     e46:	8b 81       	ldd	r24, Y+3	; 0x03
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	38 87       	std	Y+8, r19	; 0x08
     e4e:	2f 83       	std	Y+7, r18	; 0x07
     e50:	8f 81       	ldd	r24, Y+7	; 0x07
     e52:	98 85       	ldd	r25, Y+8	; 0x08
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	31 f0       	breq	.+12     	; 0xe64 <DIO_u8SetPinDirection+0x17e>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	21 30       	cpi	r18, 0x01	; 1
     e5e:	31 05       	cpc	r19, r1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <DIO_u8SetPinDirection+0x1a8>
     e62:	62 c0       	rjmp	.+196    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x19c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0x198>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	4d c0       	rjmp	.+154    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinDirection+0x1c6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinDirection+0x1c2>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	39 c0       	rjmp	.+114    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3e 83       	std	Y+6, r19	; 0x06
     ebe:	2d 83       	std	Y+5, r18	; 0x05
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	31 f0       	breq	.+12     	; 0xed4 <DIO_u8SetPinDirection+0x1ee>
     ec8:	2d 81       	ldd	r18, Y+5	; 0x05
     eca:	3e 81       	ldd	r19, Y+6	; 0x06
     ecc:	21 30       	cpi	r18, 0x01	; 1
     ece:	31 05       	cpc	r19, r1
     ed0:	b1 f0       	breq	.+44     	; 0xefe <DIO_u8SetPinDirection+0x218>
     ed2:	2a c0       	rjmp	.+84     	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_u8SetPinDirection+0x20c>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_u8SetPinDirection+0x208>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     efe:	a1 e3       	ldi	r26, 0x31	; 49
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e1 e3       	ldi	r30, 0x31	; 49
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_u8SetPinDirection+0x236>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_u8SetPinDirection+0x232>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f26:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	2e 96       	adiw	r28, 0x0e	; 14
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2e 97       	sbiw	r28, 0x0e	; 14
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	6b 83       	std	Y+3, r22	; 0x03
     f54:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	88 30       	cpi	r24, 0x08	; 8
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <DIO_u8SetPinValue+0x26>
     f60:	0c c1       	rjmp	.+536    	; 0x117a <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3e 87       	std	Y+14, r19	; 0x0e
     f6a:	2d 87       	std	Y+13, r18	; 0x0d
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	91 05       	cpc	r25, r1
     f74:	09 f4       	brne	.+2      	; 0xf78 <DIO_u8SetPinValue+0x3c>
     f76:	51 c0       	rjmp	.+162    	; 0x101a <DIO_u8SetPinValue+0xde>
     f78:	2d 85       	ldd	r18, Y+13	; 0x0d
     f7a:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7c:	22 30       	cpi	r18, 0x02	; 2
     f7e:	31 05       	cpc	r19, r1
     f80:	2c f4       	brge	.+10     	; 0xf8c <DIO_u8SetPinValue+0x50>
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	71 f0       	breq	.+28     	; 0xfa6 <DIO_u8SetPinValue+0x6a>
     f8a:	f5 c0       	rjmp	.+490    	; 0x1176 <DIO_u8SetPinValue+0x23a>
     f8c:	2d 85       	ldd	r18, Y+13	; 0x0d
     f8e:	3e 85       	ldd	r19, Y+14	; 0x0e
     f90:	22 30       	cpi	r18, 0x02	; 2
     f92:	31 05       	cpc	r19, r1
     f94:	09 f4       	brne	.+2      	; 0xf98 <DIO_u8SetPinValue+0x5c>
     f96:	7b c0       	rjmp	.+246    	; 0x108e <DIO_u8SetPinValue+0x152>
     f98:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9c:	83 30       	cpi	r24, 0x03	; 3
     f9e:	91 05       	cpc	r25, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <DIO_u8SetPinValue+0x68>
     fa2:	af c0       	rjmp	.+350    	; 0x1102 <DIO_u8SetPinValue+0x1c6>
     fa4:	e8 c0       	rjmp	.+464    	; 0x1176 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	28 2f       	mov	r18, r24
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	3c 87       	std	Y+12, r19	; 0x0c
     fae:	2b 87       	std	Y+11, r18	; 0x0b
     fb0:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb2:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	31 f0       	breq	.+12     	; 0xfc4 <DIO_u8SetPinValue+0x88>
     fb8:	2b 85       	ldd	r18, Y+11	; 0x0b
     fba:	3c 85       	ldd	r19, Y+12	; 0x0c
     fbc:	21 30       	cpi	r18, 0x01	; 1
     fbe:	31 05       	cpc	r19, r1
     fc0:	b1 f0       	breq	.+44     	; 0xfee <DIO_u8SetPinValue+0xb2>
     fc2:	29 c0       	rjmp	.+82     	; 0x1016 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fc4:	ab e3       	ldi	r26, 0x3B	; 59
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	eb e3       	ldi	r30, 0x3B	; 59
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8b 81       	ldd	r24, Y+3	; 0x03
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_u8SetPinValue+0xa6>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_u8SetPinValue+0xa2>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	c7 c0       	rjmp	.+398    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fee:	ab e3       	ldi	r26, 0x3B	; 59
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	eb e3       	ldi	r30, 0x3B	; 59
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	48 2f       	mov	r20, r24
     ffa:	8b 81       	ldd	r24, Y+3	; 0x03
     ffc:	28 2f       	mov	r18, r24
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	02 2e       	mov	r0, r18
    1006:	02 c0       	rjmp	.+4      	; 0x100c <DIO_u8SetPinValue+0xd0>
    1008:	88 0f       	add	r24, r24
    100a:	99 1f       	adc	r25, r25
    100c:	0a 94       	dec	r0
    100e:	e2 f7       	brpl	.-8      	; 0x1008 <DIO_u8SetPinValue+0xcc>
    1010:	84 2b       	or	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	b3 c0       	rjmp	.+358    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	b1 c0       	rjmp	.+354    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	3a 87       	std	Y+10, r19	; 0x0a
    1022:	29 87       	std	Y+9, r18	; 0x09
    1024:	89 85       	ldd	r24, Y+9	; 0x09
    1026:	9a 85       	ldd	r25, Y+10	; 0x0a
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	31 f0       	breq	.+12     	; 0x1038 <DIO_u8SetPinValue+0xfc>
    102c:	29 85       	ldd	r18, Y+9	; 0x09
    102e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1030:	21 30       	cpi	r18, 0x01	; 1
    1032:	31 05       	cpc	r19, r1
    1034:	b1 f0       	breq	.+44     	; 0x1062 <DIO_u8SetPinValue+0x126>
    1036:	29 c0       	rjmp	.+82     	; 0x108a <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_u8SetPinValue+0x11a>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_u8SetPinValue+0x116>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	8d c0       	rjmp	.+282    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1062:	a8 e3       	ldi	r26, 0x38	; 56
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	e8 e3       	ldi	r30, 0x38	; 56
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	48 2f       	mov	r20, r24
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	28 2f       	mov	r18, r24
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 2e       	mov	r0, r18
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <DIO_u8SetPinValue+0x144>
    107c:	88 0f       	add	r24, r24
    107e:	99 1f       	adc	r25, r25
    1080:	0a 94       	dec	r0
    1082:	e2 f7       	brpl	.-8      	; 0x107c <DIO_u8SetPinValue+0x140>
    1084:	84 2b       	or	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	79 c0       	rjmp	.+242    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    108a:	19 82       	std	Y+1, r1	; 0x01
    108c:	77 c0       	rjmp	.+238    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	38 87       	std	Y+8, r19	; 0x08
    1096:	2f 83       	std	Y+7, r18	; 0x07
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	00 97       	sbiw	r24, 0x00	; 0
    109e:	31 f0       	breq	.+12     	; 0x10ac <DIO_u8SetPinValue+0x170>
    10a0:	2f 81       	ldd	r18, Y+7	; 0x07
    10a2:	38 85       	ldd	r19, Y+8	; 0x08
    10a4:	21 30       	cpi	r18, 0x01	; 1
    10a6:	31 05       	cpc	r19, r1
    10a8:	b1 f0       	breq	.+44     	; 0x10d6 <DIO_u8SetPinValue+0x19a>
    10aa:	29 c0       	rjmp	.+82     	; 0x10fe <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10ac:	a5 e3       	ldi	r26, 0x35	; 53
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e3       	ldi	r30, 0x35	; 53
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	48 2f       	mov	r20, r24
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_u8SetPinValue+0x18e>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_u8SetPinValue+0x18a>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	53 c0       	rjmp	.+166    	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10d6:	a5 e3       	ldi	r26, 0x35	; 53
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e5 e3       	ldi	r30, 0x35	; 53
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	48 2f       	mov	r20, r24
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	81 e0       	ldi	r24, 0x01	; 1
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	02 2e       	mov	r0, r18
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <DIO_u8SetPinValue+0x1b8>
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	0a 94       	dec	r0
    10f6:	e2 f7       	brpl	.-8      	; 0x10f0 <DIO_u8SetPinValue+0x1b4>
    10f8:	84 2b       	or	r24, r20
    10fa:	8c 93       	st	X, r24
    10fc:	3f c0       	rjmp	.+126    	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	3d c0       	rjmp	.+122    	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	3e 83       	std	Y+6, r19	; 0x06
    110a:	2d 83       	std	Y+5, r18	; 0x05
    110c:	8d 81       	ldd	r24, Y+5	; 0x05
    110e:	9e 81       	ldd	r25, Y+6	; 0x06
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	31 f0       	breq	.+12     	; 0x1120 <DIO_u8SetPinValue+0x1e4>
    1114:	2d 81       	ldd	r18, Y+5	; 0x05
    1116:	3e 81       	ldd	r19, Y+6	; 0x06
    1118:	21 30       	cpi	r18, 0x01	; 1
    111a:	31 05       	cpc	r19, r1
    111c:	b1 f0       	breq	.+44     	; 0x114a <DIO_u8SetPinValue+0x20e>
    111e:	29 c0       	rjmp	.+82     	; 0x1172 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1120:	a2 e3       	ldi	r26, 0x32	; 50
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e2 e3       	ldi	r30, 0x32	; 50
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	48 2f       	mov	r20, r24
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	28 2f       	mov	r18, r24
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_u8SetPinValue+0x202>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_u8SetPinValue+0x1fe>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	19 c0       	rjmp	.+50     	; 0x117c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    114a:	a2 e3       	ldi	r26, 0x32	; 50
    114c:	b0 e0       	ldi	r27, 0x00	; 0
    114e:	e2 e3       	ldi	r30, 0x32	; 50
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	02 2e       	mov	r0, r18
    1162:	02 c0       	rjmp	.+4      	; 0x1168 <DIO_u8SetPinValue+0x22c>
    1164:	88 0f       	add	r24, r24
    1166:	99 1f       	adc	r25, r25
    1168:	0a 94       	dec	r0
    116a:	e2 f7       	brpl	.-8      	; 0x1164 <DIO_u8SetPinValue+0x228>
    116c:	84 2b       	or	r24, r20
    116e:	8c 93       	st	X, r24
    1170:	05 c0       	rjmp	.+10     	; 0x117c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1172:	19 82       	std	Y+1, r1	; 0x01
    1174:	03 c0       	rjmp	.+6      	; 0x117c <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1176:	19 82       	std	Y+1, r1	; 0x01
    1178:	01 c0       	rjmp	.+2      	; 0x117c <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    117a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	2e 96       	adiw	r28, 0x0e	; 14
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	28 97       	sbiw	r28, 0x08	; 8
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	6c 83       	std	Y+4, r22	; 0x04
    11a8:	5e 83       	std	Y+6, r21	; 0x06
    11aa:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	84 30       	cpi	r24, 0x04	; 4
    11b4:	08 f0       	brcs	.+2      	; 0x11b8 <DIO_u8GetPinValue+0x28>
    11b6:	a1 c0       	rjmp	.+322    	; 0x12fa <DIO_u8GetPinValue+0x16a>
    11b8:	8c 81       	ldd	r24, Y+4	; 0x04
    11ba:	88 30       	cpi	r24, 0x08	; 8
    11bc:	08 f0       	brcs	.+2      	; 0x11c0 <DIO_u8GetPinValue+0x30>
    11be:	9d c0       	rjmp	.+314    	; 0x12fa <DIO_u8GetPinValue+0x16a>
    11c0:	8d 81       	ldd	r24, Y+5	; 0x05
    11c2:	9e 81       	ldd	r25, Y+6	; 0x06
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	09 f4       	brne	.+2      	; 0x11ca <DIO_u8GetPinValue+0x3a>
    11c8:	98 c0       	rjmp	.+304    	; 0x12fa <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	38 87       	std	Y+8, r19	; 0x08
    11d2:	2f 83       	std	Y+7, r18	; 0x07
    11d4:	4f 81       	ldd	r20, Y+7	; 0x07
    11d6:	58 85       	ldd	r21, Y+8	; 0x08
    11d8:	41 30       	cpi	r20, 0x01	; 1
    11da:	51 05       	cpc	r21, r1
    11dc:	a9 f1       	breq	.+106    	; 0x1248 <DIO_u8GetPinValue+0xb8>
    11de:	8f 81       	ldd	r24, Y+7	; 0x07
    11e0:	98 85       	ldd	r25, Y+8	; 0x08
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	34 f4       	brge	.+12     	; 0x11f4 <DIO_u8GetPinValue+0x64>
    11e8:	2f 81       	ldd	r18, Y+7	; 0x07
    11ea:	38 85       	ldd	r19, Y+8	; 0x08
    11ec:	21 15       	cp	r18, r1
    11ee:	31 05       	cpc	r19, r1
    11f0:	71 f0       	breq	.+28     	; 0x120e <DIO_u8GetPinValue+0x7e>
    11f2:	81 c0       	rjmp	.+258    	; 0x12f6 <DIO_u8GetPinValue+0x166>
    11f4:	4f 81       	ldd	r20, Y+7	; 0x07
    11f6:	58 85       	ldd	r21, Y+8	; 0x08
    11f8:	42 30       	cpi	r20, 0x02	; 2
    11fa:	51 05       	cpc	r21, r1
    11fc:	09 f4       	brne	.+2      	; 0x1200 <DIO_u8GetPinValue+0x70>
    11fe:	41 c0       	rjmp	.+130    	; 0x1282 <DIO_u8GetPinValue+0xf2>
    1200:	8f 81       	ldd	r24, Y+7	; 0x07
    1202:	98 85       	ldd	r25, Y+8	; 0x08
    1204:	83 30       	cpi	r24, 0x03	; 3
    1206:	91 05       	cpc	r25, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <DIO_u8GetPinValue+0x7c>
    120a:	58 c0       	rjmp	.+176    	; 0x12bc <DIO_u8GetPinValue+0x12c>
    120c:	74 c0       	rjmp	.+232    	; 0x12f6 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    120e:	e9 e3       	ldi	r30, 0x39	; 57
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	88 2f       	mov	r24, r24
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a9 01       	movw	r20, r18
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <DIO_u8GetPinValue+0x96>
    1222:	55 95       	asr	r21
    1224:	47 95       	ror	r20
    1226:	8a 95       	dec	r24
    1228:	e2 f7       	brpl	.-8      	; 0x1222 <DIO_u8GetPinValue+0x92>
    122a:	ca 01       	movw	r24, r20
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	88 23       	and	r24, r24
    1234:	21 f4       	brne	.+8      	; 0x123e <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1236:	ed 81       	ldd	r30, Y+5	; 0x05
    1238:	fe 81       	ldd	r31, Y+6	; 0x06
    123a:	10 82       	st	Z, r1
    123c:	5f c0       	rjmp	.+190    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    123e:	ed 81       	ldd	r30, Y+5	; 0x05
    1240:	fe 81       	ldd	r31, Y+6	; 0x06
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 83       	st	Z, r24
    1246:	5a c0       	rjmp	.+180    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1248:	e6 e3       	ldi	r30, 0x36	; 54
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8c 81       	ldd	r24, Y+4	; 0x04
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8GetPinValue+0xd0>
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8GetPinValue+0xcc>
    1264:	ca 01       	movw	r24, r20
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	88 23       	and	r24, r24
    126e:	21 f4       	brne	.+8      	; 0x1278 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1270:	ed 81       	ldd	r30, Y+5	; 0x05
    1272:	fe 81       	ldd	r31, Y+6	; 0x06
    1274:	10 82       	st	Z, r1
    1276:	42 c0       	rjmp	.+132    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1278:	ed 81       	ldd	r30, Y+5	; 0x05
    127a:	fe 81       	ldd	r31, Y+6	; 0x06
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 83       	st	Z, r24
    1280:	3d c0       	rjmp	.+122    	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1282:	e3 e3       	ldi	r30, 0x33	; 51
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	88 2f       	mov	r24, r24
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_u8GetPinValue+0x10a>
    1296:	55 95       	asr	r21
    1298:	47 95       	ror	r20
    129a:	8a 95       	dec	r24
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_u8GetPinValue+0x106>
    129e:	ca 01       	movw	r24, r20
    12a0:	81 70       	andi	r24, 0x01	; 1
    12a2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	88 23       	and	r24, r24
    12a8:	21 f4       	brne	.+8      	; 0x12b2 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12aa:	ed 81       	ldd	r30, Y+5	; 0x05
    12ac:	fe 81       	ldd	r31, Y+6	; 0x06
    12ae:	10 82       	st	Z, r1
    12b0:	25 c0       	rjmp	.+74     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12b2:	ed 81       	ldd	r30, Y+5	; 0x05
    12b4:	fe 81       	ldd	r31, Y+6	; 0x06
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	80 83       	st	Z, r24
    12ba:	20 c0       	rjmp	.+64     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12bc:	e0 e3       	ldi	r30, 0x30	; 48
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	8c 81       	ldd	r24, Y+4	; 0x04
    12c8:	88 2f       	mov	r24, r24
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	a9 01       	movw	r20, r18
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <DIO_u8GetPinValue+0x144>
    12d0:	55 95       	asr	r21
    12d2:	47 95       	ror	r20
    12d4:	8a 95       	dec	r24
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <DIO_u8GetPinValue+0x140>
    12d8:	ca 01       	movw	r24, r20
    12da:	81 70       	andi	r24, 0x01	; 1
    12dc:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12de:	89 81       	ldd	r24, Y+1	; 0x01
    12e0:	88 23       	and	r24, r24
    12e2:	21 f4       	brne	.+8      	; 0x12ec <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12e4:	ed 81       	ldd	r30, Y+5	; 0x05
    12e6:	fe 81       	ldd	r31, Y+6	; 0x06
    12e8:	10 82       	st	Z, r1
    12ea:	08 c0       	rjmp	.+16     	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12ec:	ed 81       	ldd	r30, Y+5	; 0x05
    12ee:	fe 81       	ldd	r31, Y+6	; 0x06
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	80 83       	st	Z, r24
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    12f6:	1a 82       	std	Y+2, r1	; 0x02
    12f8:	01 c0       	rjmp	.+2      	; 0x12fc <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12fa:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12fe:	28 96       	adiw	r28, 0x08	; 8
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	2d 97       	sbiw	r28, 0x0d	; 13
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	88 23       	and	r24, r24
    1330:	21 f0       	breq	.+8      	; 0x133a <DIO_u8SetPortDirection+0x2a>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	09 f0       	breq	.+2      	; 0x133a <DIO_u8SetPortDirection+0x2a>
    1338:	82 c0       	rjmp	.+260    	; 0x143e <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	3d 87       	std	Y+13, r19	; 0x0d
    1342:	2c 87       	std	Y+12, r18	; 0x0c
    1344:	8c 85       	ldd	r24, Y+12	; 0x0c
    1346:	9d 85       	ldd	r25, Y+13	; 0x0d
    1348:	81 30       	cpi	r24, 0x01	; 1
    134a:	91 05       	cpc	r25, r1
    134c:	71 f1       	breq	.+92     	; 0x13aa <DIO_u8SetPortDirection+0x9a>
    134e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1350:	3d 85       	ldd	r19, Y+13	; 0x0d
    1352:	22 30       	cpi	r18, 0x02	; 2
    1354:	31 05       	cpc	r19, r1
    1356:	2c f4       	brge	.+10     	; 0x1362 <DIO_u8SetPortDirection+0x52>
    1358:	8c 85       	ldd	r24, Y+12	; 0x0c
    135a:	9d 85       	ldd	r25, Y+13	; 0x0d
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	69 f0       	breq	.+26     	; 0x137a <DIO_u8SetPortDirection+0x6a>
    1360:	6c c0       	rjmp	.+216    	; 0x143a <DIO_u8SetPortDirection+0x12a>
    1362:	2c 85       	ldd	r18, Y+12	; 0x0c
    1364:	3d 85       	ldd	r19, Y+13	; 0x0d
    1366:	22 30       	cpi	r18, 0x02	; 2
    1368:	31 05       	cpc	r19, r1
    136a:	b9 f1       	breq	.+110    	; 0x13da <DIO_u8SetPortDirection+0xca>
    136c:	8c 85       	ldd	r24, Y+12	; 0x0c
    136e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1370:	83 30       	cpi	r24, 0x03	; 3
    1372:	91 05       	cpc	r25, r1
    1374:	09 f4       	brne	.+2      	; 0x1378 <DIO_u8SetPortDirection+0x68>
    1376:	49 c0       	rjmp	.+146    	; 0x140a <DIO_u8SetPortDirection+0xfa>
    1378:	60 c0       	rjmp	.+192    	; 0x143a <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	28 2f       	mov	r18, r24
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	3b 87       	std	Y+11, r19	; 0x0b
    1382:	2a 87       	std	Y+10, r18	; 0x0a
    1384:	8a 85       	ldd	r24, Y+10	; 0x0a
    1386:	9b 85       	ldd	r25, Y+11	; 0x0b
    1388:	00 97       	sbiw	r24, 0x00	; 0
    138a:	31 f0       	breq	.+12     	; 0x1398 <DIO_u8SetPortDirection+0x88>
    138c:	2a 85       	ldd	r18, Y+10	; 0x0a
    138e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1390:	21 30       	cpi	r18, 0x01	; 1
    1392:	31 05       	cpc	r19, r1
    1394:	29 f0       	breq	.+10     	; 0x13a0 <DIO_u8SetPortDirection+0x90>
    1396:	54 c0       	rjmp	.+168    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1398:	ea e3       	ldi	r30, 0x3A	; 58
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	10 82       	st	Z, r1
    139e:	50 c0       	rjmp	.+160    	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    13a0:	ea e3       	ldi	r30, 0x3A	; 58
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	80 83       	st	Z, r24
    13a8:	4b c0       	rjmp	.+150    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	39 87       	std	Y+9, r19	; 0x09
    13b2:	28 87       	std	Y+8, r18	; 0x08
    13b4:	88 85       	ldd	r24, Y+8	; 0x08
    13b6:	99 85       	ldd	r25, Y+9	; 0x09
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	31 f0       	breq	.+12     	; 0x13c8 <DIO_u8SetPortDirection+0xb8>
    13bc:	28 85       	ldd	r18, Y+8	; 0x08
    13be:	39 85       	ldd	r19, Y+9	; 0x09
    13c0:	21 30       	cpi	r18, 0x01	; 1
    13c2:	31 05       	cpc	r19, r1
    13c4:	29 f0       	breq	.+10     	; 0x13d0 <DIO_u8SetPortDirection+0xc0>
    13c6:	3c c0       	rjmp	.+120    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    13c8:	e7 e3       	ldi	r30, 0x37	; 55
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	10 82       	st	Z, r1
    13ce:	38 c0       	rjmp	.+112    	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    13d0:	e7 e3       	ldi	r30, 0x37	; 55
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8f ef       	ldi	r24, 0xFF	; 255
    13d6:	80 83       	st	Z, r24
    13d8:	33 c0       	rjmp	.+102    	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3f 83       	std	Y+7, r19	; 0x07
    13e2:	2e 83       	std	Y+6, r18	; 0x06
    13e4:	8e 81       	ldd	r24, Y+6	; 0x06
    13e6:	9f 81       	ldd	r25, Y+7	; 0x07
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <DIO_u8SetPortDirection+0xe8>
    13ec:	2e 81       	ldd	r18, Y+6	; 0x06
    13ee:	3f 81       	ldd	r19, Y+7	; 0x07
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	29 f0       	breq	.+10     	; 0x1400 <DIO_u8SetPortDirection+0xf0>
    13f6:	24 c0       	rjmp	.+72     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    13f8:	e4 e3       	ldi	r30, 0x34	; 52
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	10 82       	st	Z, r1
    13fe:	20 c0       	rjmp	.+64     	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    1400:	e4 e3       	ldi	r30, 0x34	; 52
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	8f ef       	ldi	r24, 0xFF	; 255
    1406:	80 83       	st	Z, r24
    1408:	1b c0       	rjmp	.+54     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	3d 83       	std	Y+5, r19	; 0x05
    1412:	2c 83       	std	Y+4, r18	; 0x04
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	9d 81       	ldd	r25, Y+5	; 0x05
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	31 f0       	breq	.+12     	; 0x1428 <DIO_u8SetPortDirection+0x118>
    141c:	2c 81       	ldd	r18, Y+4	; 0x04
    141e:	3d 81       	ldd	r19, Y+5	; 0x05
    1420:	21 30       	cpi	r18, 0x01	; 1
    1422:	31 05       	cpc	r19, r1
    1424:	29 f0       	breq	.+10     	; 0x1430 <DIO_u8SetPortDirection+0x120>
    1426:	0c c0       	rjmp	.+24     	; 0x1440 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    1428:	e1 e3       	ldi	r30, 0x31	; 49
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	10 82       	st	Z, r1
    142e:	08 c0       	rjmp	.+16     	; 0x1440 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    1430:	e1 e3       	ldi	r30, 0x31	; 49
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	8f ef       	ldi	r24, 0xFF	; 255
    1436:	80 83       	st	Z, r24
    1438:	03 c0       	rjmp	.+6      	; 0x1440 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    143a:	19 82       	std	Y+1, r1	; 0x01
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    143e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	2d 96       	adiw	r28, 0x0d	; 13
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	08 95       	ret

00001454 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1454:	df 93       	push	r29
    1456:	cf 93       	push	r28
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_u8SetPortValue+0x6>
    145a:	00 d0       	rcall	.+0      	; 0x145c <DIO_u8SetPortValue+0x8>
    145c:	0f 92       	push	r0
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3d 83       	std	Y+5, r19	; 0x05
    1472:	2c 83       	std	Y+4, r18	; 0x04
    1474:	8c 81       	ldd	r24, Y+4	; 0x04
    1476:	9d 81       	ldd	r25, Y+5	; 0x05
    1478:	81 30       	cpi	r24, 0x01	; 1
    147a:	91 05       	cpc	r25, r1
    147c:	d1 f0       	breq	.+52     	; 0x14b2 <DIO_u8SetPortValue+0x5e>
    147e:	2c 81       	ldd	r18, Y+4	; 0x04
    1480:	3d 81       	ldd	r19, Y+5	; 0x05
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	2c f4       	brge	.+10     	; 0x1492 <DIO_u8SetPortValue+0x3e>
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	9d 81       	ldd	r25, Y+5	; 0x05
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	61 f0       	breq	.+24     	; 0x14a8 <DIO_u8SetPortValue+0x54>
    1490:	1f c0       	rjmp	.+62     	; 0x14d0 <DIO_u8SetPortValue+0x7c>
    1492:	2c 81       	ldd	r18, Y+4	; 0x04
    1494:	3d 81       	ldd	r19, Y+5	; 0x05
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	81 f0       	breq	.+32     	; 0x14bc <DIO_u8SetPortValue+0x68>
    149c:	8c 81       	ldd	r24, Y+4	; 0x04
    149e:	9d 81       	ldd	r25, Y+5	; 0x05
    14a0:	83 30       	cpi	r24, 0x03	; 3
    14a2:	91 05       	cpc	r25, r1
    14a4:	81 f0       	breq	.+32     	; 0x14c6 <DIO_u8SetPortValue+0x72>
    14a6:	14 c0       	rjmp	.+40     	; 0x14d0 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    14a8:	eb e3       	ldi	r30, 0x3B	; 59
    14aa:	f0 e0       	ldi	r31, 0x00	; 0
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	80 83       	st	Z, r24
    14b0:	10 c0       	rjmp	.+32     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    14b2:	e8 e3       	ldi	r30, 0x38	; 56
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	80 83       	st	Z, r24
    14ba:	0b c0       	rjmp	.+22     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    14bc:	e5 e3       	ldi	r30, 0x35	; 53
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	80 83       	st	Z, r24
    14c4:	06 c0       	rjmp	.+12     	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    14c6:	e2 e3       	ldi	r30, 0x32	; 50
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	80 83       	st	Z, r24
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    14d0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_u8GetPortValue+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_u8GetPortValue+0x8>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <DIO_u8GetPortValue+0xa>
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
    14f2:	8a 83       	std	Y+2, r24	; 0x02
    14f4:	7c 83       	std	Y+4, r23	; 0x04
    14f6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	e9 f1       	breq	.+122    	; 0x157e <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3e 83       	std	Y+6, r19	; 0x06
    150c:	2d 83       	std	Y+5, r18	; 0x05
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	9e 81       	ldd	r25, Y+6	; 0x06
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	91 05       	cpc	r25, r1
    1516:	e1 f0       	breq	.+56     	; 0x1550 <DIO_u8GetPortValue+0x6c>
    1518:	2d 81       	ldd	r18, Y+5	; 0x05
    151a:	3e 81       	ldd	r19, Y+6	; 0x06
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	2c f4       	brge	.+10     	; 0x152c <DIO_u8GetPortValue+0x48>
    1522:	8d 81       	ldd	r24, Y+5	; 0x05
    1524:	9e 81       	ldd	r25, Y+6	; 0x06
    1526:	00 97       	sbiw	r24, 0x00	; 0
    1528:	61 f0       	breq	.+24     	; 0x1542 <DIO_u8GetPortValue+0x5e>
    152a:	27 c0       	rjmp	.+78     	; 0x157a <DIO_u8GetPortValue+0x96>
    152c:	2d 81       	ldd	r18, Y+5	; 0x05
    152e:	3e 81       	ldd	r19, Y+6	; 0x06
    1530:	22 30       	cpi	r18, 0x02	; 2
    1532:	31 05       	cpc	r19, r1
    1534:	a1 f0       	breq	.+40     	; 0x155e <DIO_u8GetPortValue+0x7a>
    1536:	8d 81       	ldd	r24, Y+5	; 0x05
    1538:	9e 81       	ldd	r25, Y+6	; 0x06
    153a:	83 30       	cpi	r24, 0x03	; 3
    153c:	91 05       	cpc	r25, r1
    153e:	b1 f0       	breq	.+44     	; 0x156c <DIO_u8GetPortValue+0x88>
    1540:	1c c0       	rjmp	.+56     	; 0x157a <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1542:	e9 e3       	ldi	r30, 0x39	; 57
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	eb 81       	ldd	r30, Y+3	; 0x03
    154a:	fc 81       	ldd	r31, Y+4	; 0x04
    154c:	80 83       	st	Z, r24
    154e:	18 c0       	rjmp	.+48     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    1550:	e6 e3       	ldi	r30, 0x36	; 54
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	eb 81       	ldd	r30, Y+3	; 0x03
    1558:	fc 81       	ldd	r31, Y+4	; 0x04
    155a:	80 83       	st	Z, r24
    155c:	11 c0       	rjmp	.+34     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    155e:	e3 e3       	ldi	r30, 0x33	; 51
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	eb 81       	ldd	r30, Y+3	; 0x03
    1566:	fc 81       	ldd	r31, Y+4	; 0x04
    1568:	80 83       	st	Z, r24
    156a:	0a c0       	rjmp	.+20     	; 0x1580 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    156c:	e0 e3       	ldi	r30, 0x30	; 48
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	eb 81       	ldd	r30, Y+3	; 0x03
    1574:	fc 81       	ldd	r31, Y+4	; 0x04
    1576:	80 83       	st	Z, r24
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    157a:	19 82       	std	Y+1, r1	; 0x01
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    157e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	26 96       	adiw	r28, 0x06	; 6
    1584:	0f b6       	in	r0, 0x3f	; 63
    1586:	f8 94       	cli
    1588:	de bf       	out	0x3e, r29	; 62
    158a:	0f be       	out	0x3f, r0	; 63
    158c:	cd bf       	out	0x3d, r28	; 61
    158e:	cf 91       	pop	r28
    1590:	df 91       	pop	r29
    1592:	08 95       	ret

00001594 <GI_voidEnableGI>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidEnableGI(void)
{
    1594:	df 93       	push	r29
    1596:	cf 93       	push	r28
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
    159c:	af e5       	ldi	r26, 0x5F	; 95
    159e:	b0 e0       	ldi	r27, 0x00	; 0
    15a0:	ef e5       	ldi	r30, 0x5F	; 95
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	80 68       	ori	r24, 0x80	; 128
    15a8:	8c 93       	st	X, r24
}
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <GI_voidDisableGI>:

void GI_voidDisableGI(void)
{
    15b0:	df 93       	push	r29
    15b2:	cf 93       	push	r28
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
    15b8:	af e5       	ldi	r26, 0x5F	; 95
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	ef e5       	ldi	r30, 0x5F	; 95
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	8f 77       	andi	r24, 0x7F	; 127
    15c4:	8c 93       	st	X, r24
    15c6:	cf 91       	pop	r28
    15c8:	df 91       	pop	r29
    15ca:	08 95       	ret

000015cc <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4]={KPD_u8_R1_PIN,KPD_u8_R2_PIN,KPD_u8_R3_PIN,KPD_u8_R4_PIN};
const u8 KPD_Au8ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};


u8 KPD_u8GetKeyState(u8 * Copy_pu8ReturnedKey)
{
    15cc:	df 93       	push	r29
    15ce:	cf 93       	push	r28
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	66 97       	sbiw	r28, 0x16	; 22
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	9e 8b       	std	Y+22, r25	; 0x16
    15e2:	8d 8b       	std	Y+21, r24	; 0x15
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	8b 8b       	std	Y+19, r24	; 0x13
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
    15e8:	18 8a       	std	Y+16, r1	; 0x10
	if(Copy_pu8ReturnedKey != NULL)
    15ea:	8d 89       	ldd	r24, Y+21	; 0x15
    15ec:	9e 89       	ldd	r25, Y+22	; 0x16
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <KPD_u8GetKeyState+0x28>
    15f2:	f0 c0       	rjmp	.+480    	; 0x17d4 <KPD_u8GetKeyState+0x208>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    15f4:	ed 89       	ldd	r30, Y+21	; 0x15
    15f6:	fe 89       	ldd	r31, Y+22	; 0x16
    15f8:	8f ef       	ldi	r24, 0xFF	; 255
    15fa:	80 83       	st	Z, r24
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    15fc:	1a 8a       	std	Y+18, r1	; 0x12
    15fe:	e5 c0       	rjmp	.+458    	; 0x17ca <KPD_u8GetKeyState+0x1fe>
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    1600:	8a 89       	ldd	r24, Y+18	; 0x12
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	fc 01       	movw	r30, r24
    1608:	e1 56       	subi	r30, 0x61	; 97
    160a:	ff 4f       	sbci	r31, 0xFF	; 255
    160c:	90 81       	ld	r25, Z
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	69 2f       	mov	r22, r25
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    1618:	19 8a       	std	Y+17, r1	; 0x11
    161a:	c1 c0       	rjmp	.+386    	; 0x179e <KPD_u8GetKeyState+0x1d2>
			{
				DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    161c:	89 89       	ldd	r24, Y+17	; 0x11
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	fc 01       	movw	r30, r24
    1624:	ed 55       	subi	r30, 0x5D	; 93
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	90 81       	ld	r25, Z
    162a:	9e 01       	movw	r18, r28
    162c:	2c 5e       	subi	r18, 0xEC	; 236
    162e:	3f 4f       	sbci	r19, 0xFF	; 255
    1630:	82 e0       	ldi	r24, 0x02	; 2
    1632:	69 2f       	mov	r22, r25
    1634:	a9 01       	movw	r20, r18
    1636:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW)
    163a:	8c 89       	ldd	r24, Y+20	; 0x14
    163c:	88 23       	and	r24, r24
    163e:	09 f0       	breq	.+2      	; 0x1642 <KPD_u8GetKeyState+0x76>
    1640:	ab c0       	rjmp	.+342    	; 0x1798 <KPD_u8GetKeyState+0x1cc>
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 ea       	ldi	r26, 0xA0	; 160
    1648:	b1 e4       	ldi	r27, 0x41	; 65
    164a:	8b 87       	std	Y+11, r24	; 0x0b
    164c:	9c 87       	std	Y+12, r25	; 0x0c
    164e:	ad 87       	std	Y+13, r26	; 0x0d
    1650:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1652:	6b 85       	ldd	r22, Y+11	; 0x0b
    1654:	7c 85       	ldd	r23, Y+12	; 0x0c
    1656:	8d 85       	ldd	r24, Y+13	; 0x0d
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	4a ef       	ldi	r20, 0xFA	; 250
    1660:	54 e4       	ldi	r21, 0x44	; 68
    1662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	8f 83       	std	Y+7, r24	; 0x07
    166c:	98 87       	std	Y+8, r25	; 0x08
    166e:	a9 87       	std	Y+9, r26	; 0x09
    1670:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1686:	88 23       	and	r24, r24
    1688:	2c f4       	brge	.+10     	; 0x1694 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	3f c0       	rjmp	.+126    	; 0x1712 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    1694:	6f 81       	ldd	r22, Y+7	; 0x07
    1696:	78 85       	ldd	r23, Y+8	; 0x08
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f e7       	ldi	r20, 0x7F	; 127
    16a2:	57 e4       	ldi	r21, 0x47	; 71
    16a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	4c f5       	brge	.+82     	; 0x16fe <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e2       	ldi	r20, 0x20	; 32
    16ba:	51 e4       	ldi	r21, 0x41	; 65
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <KPD_u8GetKeyState+0x128>
    16d6:	88 ec       	ldi	r24, 0xC8	; 200
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <KPD_u8GetKeyState+0x116>
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	69 f7       	brne	.-38     	; 0x16d6 <KPD_u8GetKeyState+0x10a>
    16fc:	14 c0       	rjmp	.+40     	; 0x1726 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <KPD_u8GetKeyState+0x152>
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1726:	89 89       	ldd	r24, Y+17	; 0x11
    1728:	88 2f       	mov	r24, r24
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	fc 01       	movw	r30, r24
    172e:	ed 55       	subi	r30, 0x5D	; 93
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	90 81       	ld	r25, Z
    1734:	9e 01       	movw	r18, r28
    1736:	2c 5e       	subi	r18, 0xEC	; 236
    1738:	3f 4f       	sbci	r19, 0xFF	; 255
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	69 2f       	mov	r22, r25
    173e:	a9 01       	movw	r20, r18
    1740:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
    1744:	0f c0       	rjmp	.+30     	; 0x1764 <KPD_u8GetKeyState+0x198>
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    1746:	89 89       	ldd	r24, Y+17	; 0x11
    1748:	88 2f       	mov	r24, r24
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	fc 01       	movw	r30, r24
    174e:	ed 55       	subi	r30, 0x5D	; 93
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	90 81       	ld	r25, Z
    1754:	9e 01       	movw	r18, r28
    1756:	2c 5e       	subi	r18, 0xEC	; 236
    1758:	3f 4f       	sbci	r19, 0xFF	; 255
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	69 2f       	mov	r22, r25
    175e:	a9 01       	movw	r20, r18
    1760:	0e 94 c8 08 	call	0x1190	; 0x1190 <DIO_u8GetPinValue>
				{
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					/* Check if the Pin is still equal LOW */
					while(Local_u8PinValue == DIO_u8_LOW)
    1764:	8c 89       	ldd	r24, Y+20	; 0x14
    1766:	88 23       	and	r24, r24
    1768:	71 f3       	breq	.-36     	; 0x1746 <KPD_u8GetKeyState+0x17a>
					{
						DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
					}
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    176a:	8a 89       	ldd	r24, Y+18	; 0x12
    176c:	48 2f       	mov	r20, r24
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	89 89       	ldd	r24, Y+17	; 0x11
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	ca 01       	movw	r24, r20
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	82 0f       	add	r24, r18
    1782:	93 1f       	adc	r25, r19
    1784:	fc 01       	movw	r30, r24
    1786:	e1 57       	subi	r30, 0x71	; 113
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	80 81       	ld	r24, Z
    178c:	ed 89       	ldd	r30, Y+21	; 0x15
    178e:	fe 89       	ldd	r31, Y+22	; 0x16
    1790:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	88 8b       	std	Y+16, r24	; 0x10
    1796:	07 c0       	rjmp	.+14     	; 0x17a6 <KPD_u8GetKeyState+0x1da>
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
		{
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Check Which Input Pin Has Zero */
			for (Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; ++Local_u8ColsCounter)
    1798:	89 89       	ldd	r24, Y+17	; 0x11
    179a:	8f 5f       	subi	r24, 0xFF	; 255
    179c:	89 8b       	std	Y+17, r24	; 0x11
    179e:	89 89       	ldd	r24, Y+17	; 0x11
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	08 f4       	brcc	.+2      	; 0x17a6 <KPD_u8GetKeyState+0x1da>
    17a4:	3b cf       	rjmp	.-394    	; 0x161c <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row*/
			DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    17a6:	8a 89       	ldd	r24, Y+18	; 0x12
    17a8:	88 2f       	mov	r24, r24
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	fc 01       	movw	r30, r24
    17ae:	e1 56       	subi	r30, 0x61	; 97
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	90 81       	ld	r25, Z
    17b4:	82 e0       	ldi	r24, 0x02	; 2
    17b6:	69 2f       	mov	r22, r25
    17b8:	41 e0       	ldi	r20, 0x01	; 1
    17ba:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    17be:	88 89       	ldd	r24, Y+16	; 0x10
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	49 f0       	breq	.+18     	; 0x17d6 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8RowsCounter,Local_u8ColsCounter,Local_u8PinValue,Local_u8Flag = 0;
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		/* Activate Each Row => For loop on the pins of the rows */
		for (Local_u8RowsCounter= 0; Local_u8RowsCounter <= 3; ++Local_u8RowsCounter)
    17c4:	8a 89       	ldd	r24, Y+18	; 0x12
    17c6:	8f 5f       	subi	r24, 0xFF	; 255
    17c8:	8a 8b       	std	Y+18, r24	; 0x12
    17ca:	8a 89       	ldd	r24, Y+18	; 0x12
    17cc:	84 30       	cpi	r24, 0x04	; 4
    17ce:	08 f4       	brcc	.+2      	; 0x17d2 <KPD_u8GetKeyState+0x206>
    17d0:	17 cf       	rjmp	.-466    	; 0x1600 <KPD_u8GetKeyState+0x34>
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <KPD_u8GetKeyState+0x20a>


	}
	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    17d4:	1f 86       	std	Y+15, r1	; 0x0f
	}
	return Local_u8ErrorState;
    17d6:	8b 89       	ldd	r24, Y+19	; 0x13
    17d8:	66 96       	adiw	r28, 0x16	; 22
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	cf 91       	pop	r28
    17e6:	df 91       	pop	r29
    17e8:	08 95       	ret

000017ea <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	cc 54       	subi	r28, 0x4C	; 76
    17f8:	d0 40       	sbci	r29, 0x00	; 0
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	fe 01       	movw	r30, r28
    1806:	e7 5b       	subi	r30, 0xB7	; 183
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	ac e0       	ldi	r26, 0x0C	; 12
    1810:	b2 e4       	ldi	r27, 0x42	; 66
    1812:	80 83       	st	Z, r24
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	a2 83       	std	Z+2, r26	; 0x02
    1818:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    181a:	8e 01       	movw	r16, r28
    181c:	0b 5b       	subi	r16, 0xBB	; 187
    181e:	1f 4f       	sbci	r17, 0xFF	; 255
    1820:	fe 01       	movw	r30, r28
    1822:	e7 5b       	subi	r30, 0xB7	; 183
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	60 81       	ld	r22, Z
    1828:	71 81       	ldd	r23, Z+1	; 0x01
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a ef       	ldi	r20, 0xFA	; 250
    1834:	54 e4       	ldi	r21, 0x44	; 68
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	f8 01       	movw	r30, r16
    1840:	80 83       	st	Z, r24
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	a2 83       	std	Z+2, r26	; 0x02
    1846:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1848:	fe 01       	movw	r30, r28
    184a:	eb 5b       	subi	r30, 0xBB	; 187
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	40 e8       	ldi	r20, 0x80	; 128
    185c:	5f e3       	ldi	r21, 0x3F	; 63
    185e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1862:	88 23       	and	r24, r24
    1864:	44 f4       	brge	.+16     	; 0x1876 <LCD_voidInit+0x8c>
		__ticks = 1;
    1866:	fe 01       	movw	r30, r28
    1868:	ed 5b       	subi	r30, 0xBD	; 189
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	80 83       	st	Z, r24
    1874:	64 c0       	rjmp	.+200    	; 0x193e <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1876:	fe 01       	movw	r30, r28
    1878:	eb 5b       	subi	r30, 0xBB	; 187
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	60 81       	ld	r22, Z
    187e:	71 81       	ldd	r23, Z+1	; 0x01
    1880:	82 81       	ldd	r24, Z+2	; 0x02
    1882:	93 81       	ldd	r25, Z+3	; 0x03
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	3f ef       	ldi	r19, 0xFF	; 255
    1888:	4f e7       	ldi	r20, 0x7F	; 127
    188a:	57 e4       	ldi	r21, 0x47	; 71
    188c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1890:	18 16       	cp	r1, r24
    1892:	0c f0       	brlt	.+2      	; 0x1896 <LCD_voidInit+0xac>
    1894:	43 c0       	rjmp	.+134    	; 0x191c <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1896:	fe 01       	movw	r30, r28
    1898:	e7 5b       	subi	r30, 0xB7	; 183
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	60 81       	ld	r22, Z
    189e:	71 81       	ldd	r23, Z+1	; 0x01
    18a0:	82 81       	ldd	r24, Z+2	; 0x02
    18a2:	93 81       	ldd	r25, Z+3	; 0x03
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e2       	ldi	r20, 0x20	; 32
    18aa:	51 e4       	ldi	r21, 0x41	; 65
    18ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	8e 01       	movw	r16, r28
    18b6:	0d 5b       	subi	r16, 0xBD	; 189
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
    18ba:	bc 01       	movw	r22, r24
    18bc:	cd 01       	movw	r24, r26
    18be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c2:	dc 01       	movw	r26, r24
    18c4:	cb 01       	movw	r24, r22
    18c6:	f8 01       	movw	r30, r16
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24
    18cc:	1f c0       	rjmp	.+62     	; 0x190c <LCD_voidInit+0x122>
    18ce:	fe 01       	movw	r30, r28
    18d0:	ef 5b       	subi	r30, 0xBF	; 191
    18d2:	ff 4f       	sbci	r31, 0xFF	; 255
    18d4:	88 ec       	ldi	r24, 0xC8	; 200
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	91 83       	std	Z+1, r25	; 0x01
    18da:	80 83       	st	Z, r24
    18dc:	fe 01       	movw	r30, r28
    18de:	ef 5b       	subi	r30, 0xBF	; 191
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	80 81       	ld	r24, Z
    18e4:	91 81       	ldd	r25, Z+1	; 0x01
    18e6:	01 97       	sbiw	r24, 0x01	; 1
    18e8:	f1 f7       	brne	.-4      	; 0x18e6 <LCD_voidInit+0xfc>
    18ea:	fe 01       	movw	r30, r28
    18ec:	ef 5b       	subi	r30, 0xBF	; 191
    18ee:	ff 4f       	sbci	r31, 0xFF	; 255
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f4:	de 01       	movw	r26, r28
    18f6:	ad 5b       	subi	r26, 0xBD	; 189
    18f8:	bf 4f       	sbci	r27, 0xFF	; 255
    18fa:	fe 01       	movw	r30, r28
    18fc:	ed 5b       	subi	r30, 0xBD	; 189
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	11 96       	adiw	r26, 0x01	; 1
    1908:	9c 93       	st	X, r25
    190a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190c:	fe 01       	movw	r30, r28
    190e:	ed 5b       	subi	r30, 0xBD	; 189
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	91 81       	ldd	r25, Z+1	; 0x01
    1916:	00 97       	sbiw	r24, 0x00	; 0
    1918:	d1 f6       	brne	.-76     	; 0x18ce <LCD_voidInit+0xe4>
    191a:	24 c0       	rjmp	.+72     	; 0x1964 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    191c:	8e 01       	movw	r16, r28
    191e:	0d 5b       	subi	r16, 0xBD	; 189
    1920:	1f 4f       	sbci	r17, 0xFF	; 255
    1922:	fe 01       	movw	r30, r28
    1924:	eb 5b       	subi	r30, 0xBB	; 187
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	f8 01       	movw	r30, r16
    193a:	91 83       	std	Z+1, r25	; 0x01
    193c:	80 83       	st	Z, r24
    193e:	fe 01       	movw	r30, r28
    1940:	ed 5b       	subi	r30, 0xBD	; 189
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	fe 01       	movw	r30, r28
    194a:	ff 96       	adiw	r30, 0x3f	; 63
    194c:	91 83       	std	Z+1, r25	; 0x01
    194e:	80 83       	st	Z, r24
    1950:	fe 01       	movw	r30, r28
    1952:	ff 96       	adiw	r30, 0x3f	; 63
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_voidInit+0x16e>
    195c:	fe 01       	movw	r30, r28
    195e:	ff 96       	adiw	r30, 0x3f	; 63
    1960:	91 83       	std	Z+1, r25	; 0x01
    1962:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    1964:	88 e3       	ldi	r24, 0x38	; 56
    1966:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e2       	ldi	r26, 0x20	; 32
    1970:	b2 e4       	ldi	r27, 0x42	; 66
    1972:	8b af       	std	Y+59, r24	; 0x3b
    1974:	9c af       	std	Y+60, r25	; 0x3c
    1976:	ad af       	std	Y+61, r26	; 0x3d
    1978:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    197a:	6b ad       	ldd	r22, Y+59	; 0x3b
    197c:	7c ad       	ldd	r23, Y+60	; 0x3c
    197e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1980:	9e ad       	ldd	r25, Y+62	; 0x3e
    1982:	2b ea       	ldi	r18, 0xAB	; 171
    1984:	3a ea       	ldi	r19, 0xAA	; 170
    1986:	4a e2       	ldi	r20, 0x2A	; 42
    1988:	50 e4       	ldi	r21, 0x40	; 64
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8f ab       	std	Y+55, r24	; 0x37
    1994:	98 af       	std	Y+56, r25	; 0x38
    1996:	a9 af       	std	Y+57, r26	; 0x39
    1998:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    199a:	6f a9       	ldd	r22, Y+55	; 0x37
    199c:	78 ad       	ldd	r23, Y+56	; 0x38
    199e:	89 ad       	ldd	r24, Y+57	; 0x39
    19a0:	9a ad       	ldd	r25, Y+58	; 0x3a
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	1c f4       	brge	.+6      	; 0x19b8 <LCD_voidInit+0x1ce>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	8e ab       	std	Y+54, r24	; 0x36
    19b6:	91 c0       	rjmp	.+290    	; 0x1ada <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    19b8:	6f a9       	ldd	r22, Y+55	; 0x37
    19ba:	78 ad       	ldd	r23, Y+56	; 0x38
    19bc:	89 ad       	ldd	r24, Y+57	; 0x39
    19be:	9a ad       	ldd	r25, Y+58	; 0x3a
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	4f e7       	ldi	r20, 0x7F	; 127
    19c6:	53 e4       	ldi	r21, 0x43	; 67
    19c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19cc:	18 16       	cp	r1, r24
    19ce:	0c f0       	brlt	.+2      	; 0x19d2 <LCD_voidInit+0x1e8>
    19d0:	7b c0       	rjmp	.+246    	; 0x1ac8 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    19d2:	6b ad       	ldd	r22, Y+59	; 0x3b
    19d4:	7c ad       	ldd	r23, Y+60	; 0x3c
    19d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    19d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	4a e7       	ldi	r20, 0x7A	; 122
    19e0:	54 e4       	ldi	r21, 0x44	; 68
    19e2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	8a ab       	std	Y+50, r24	; 0x32
    19ec:	9b ab       	std	Y+51, r25	; 0x33
    19ee:	ac ab       	std	Y+52, r26	; 0x34
    19f0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19f2:	6a a9       	ldd	r22, Y+50	; 0x32
    19f4:	7b a9       	ldd	r23, Y+51	; 0x33
    19f6:	8c a9       	ldd	r24, Y+52	; 0x34
    19f8:	9d a9       	ldd	r25, Y+53	; 0x35
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	4a ef       	ldi	r20, 0xFA	; 250
    1a00:	54 e4       	ldi	r21, 0x44	; 68
    1a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	8e a7       	std	Y+46, r24	; 0x2e
    1a0c:	9f a7       	std	Y+47, r25	; 0x2f
    1a0e:	a8 ab       	std	Y+48, r26	; 0x30
    1a10:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1a12:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a14:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a16:	88 a9       	ldd	r24, Y+48	; 0x30
    1a18:	99 a9       	ldd	r25, Y+49	; 0x31
    1a1a:	20 e0       	ldi	r18, 0x00	; 0
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	40 e8       	ldi	r20, 0x80	; 128
    1a20:	5f e3       	ldi	r21, 0x3F	; 63
    1a22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a26:	88 23       	and	r24, r24
    1a28:	2c f4       	brge	.+10     	; 0x1a34 <LCD_voidInit+0x24a>
		__ticks = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9d a7       	std	Y+45, r25	; 0x2d
    1a30:	8c a7       	std	Y+44, r24	; 0x2c
    1a32:	3f c0       	rjmp	.+126    	; 0x1ab2 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1a34:	6e a5       	ldd	r22, Y+46	; 0x2e
    1a36:	7f a5       	ldd	r23, Y+47	; 0x2f
    1a38:	88 a9       	ldd	r24, Y+48	; 0x30
    1a3a:	99 a9       	ldd	r25, Y+49	; 0x31
    1a3c:	20 e0       	ldi	r18, 0x00	; 0
    1a3e:	3f ef       	ldi	r19, 0xFF	; 255
    1a40:	4f e7       	ldi	r20, 0x7F	; 127
    1a42:	57 e4       	ldi	r21, 0x47	; 71
    1a44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a48:	18 16       	cp	r1, r24
    1a4a:	4c f5       	brge	.+82     	; 0x1a9e <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a4c:	6a a9       	ldd	r22, Y+50	; 0x32
    1a4e:	7b a9       	ldd	r23, Y+51	; 0x33
    1a50:	8c a9       	ldd	r24, Y+52	; 0x34
    1a52:	9d a9       	ldd	r25, Y+53	; 0x35
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	40 e2       	ldi	r20, 0x20	; 32
    1a5a:	51 e4       	ldi	r21, 0x41	; 65
    1a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a60:	dc 01       	movw	r26, r24
    1a62:	cb 01       	movw	r24, r22
    1a64:	bc 01       	movw	r22, r24
    1a66:	cd 01       	movw	r24, r26
    1a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	9d a7       	std	Y+45, r25	; 0x2d
    1a72:	8c a7       	std	Y+44, r24	; 0x2c
    1a74:	0f c0       	rjmp	.+30     	; 0x1a94 <LCD_voidInit+0x2aa>
    1a76:	88 ec       	ldi	r24, 0xC8	; 200
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9b a7       	std	Y+43, r25	; 0x2b
    1a7c:	8a a7       	std	Y+42, r24	; 0x2a
    1a7e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1a80:	9b a5       	ldd	r25, Y+43	; 0x2b
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_voidInit+0x298>
    1a86:	9b a7       	std	Y+43, r25	; 0x2b
    1a88:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a8a:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a8c:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	9d a7       	std	Y+45, r25	; 0x2d
    1a92:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a94:	8c a5       	ldd	r24, Y+44	; 0x2c
    1a96:	9d a5       	ldd	r25, Y+45	; 0x2d
    1a98:	00 97       	sbiw	r24, 0x00	; 0
    1a9a:	69 f7       	brne	.-38     	; 0x1a76 <LCD_voidInit+0x28c>
    1a9c:	24 c0       	rjmp	.+72     	; 0x1ae6 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a9e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aa0:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aa2:	88 a9       	ldd	r24, Y+48	; 0x30
    1aa4:	99 a9       	ldd	r25, Y+49	; 0x31
    1aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	9d a7       	std	Y+45, r25	; 0x2d
    1ab0:	8c a7       	std	Y+44, r24	; 0x2c
    1ab2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ab4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ab6:	99 a7       	std	Y+41, r25	; 0x29
    1ab8:	88 a7       	std	Y+40, r24	; 0x28
    1aba:	88 a5       	ldd	r24, Y+40	; 0x28
    1abc:	99 a5       	ldd	r25, Y+41	; 0x29
    1abe:	01 97       	sbiw	r24, 0x01	; 1
    1ac0:	f1 f7       	brne	.-4      	; 0x1abe <LCD_voidInit+0x2d4>
    1ac2:	99 a7       	std	Y+41, r25	; 0x29
    1ac4:	88 a7       	std	Y+40, r24	; 0x28
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ac8:	6f a9       	ldd	r22, Y+55	; 0x37
    1aca:	78 ad       	ldd	r23, Y+56	; 0x38
    1acc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ace:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	8e ab       	std	Y+54, r24	; 0x36
    1ada:	8e a9       	ldd	r24, Y+54	; 0x36
    1adc:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ade:	8f a1       	ldd	r24, Y+39	; 0x27
    1ae0:	8a 95       	dec	r24
    1ae2:	f1 f7       	brne	.-4      	; 0x1ae0 <LCD_voidInit+0x2f6>
    1ae4:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    1ae6:	8f e0       	ldi	r24, 0x0F	; 15
    1ae8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
    1aec:	80 e0       	ldi	r24, 0x00	; 0
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	a0 e2       	ldi	r26, 0x20	; 32
    1af2:	b2 e4       	ldi	r27, 0x42	; 66
    1af4:	8b a3       	std	Y+35, r24	; 0x23
    1af6:	9c a3       	std	Y+36, r25	; 0x24
    1af8:	ad a3       	std	Y+37, r26	; 0x25
    1afa:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1afc:	6b a1       	ldd	r22, Y+35	; 0x23
    1afe:	7c a1       	ldd	r23, Y+36	; 0x24
    1b00:	8d a1       	ldd	r24, Y+37	; 0x25
    1b02:	9e a1       	ldd	r25, Y+38	; 0x26
    1b04:	2b ea       	ldi	r18, 0xAB	; 171
    1b06:	3a ea       	ldi	r19, 0xAA	; 170
    1b08:	4a e2       	ldi	r20, 0x2A	; 42
    1b0a:	50 e4       	ldi	r21, 0x40	; 64
    1b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	8f 8f       	std	Y+31, r24	; 0x1f
    1b16:	98 a3       	std	Y+32, r25	; 0x20
    1b18:	a9 a3       	std	Y+33, r26	; 0x21
    1b1a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1b1c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b1e:	78 a1       	ldd	r23, Y+32	; 0x20
    1b20:	89 a1       	ldd	r24, Y+33	; 0x21
    1b22:	9a a1       	ldd	r25, Y+34	; 0x22
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e8       	ldi	r20, 0x80	; 128
    1b2a:	5f e3       	ldi	r21, 0x3F	; 63
    1b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b30:	88 23       	and	r24, r24
    1b32:	1c f4       	brge	.+6      	; 0x1b3a <LCD_voidInit+0x350>
		__ticks = 1;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	8e 8f       	std	Y+30, r24	; 0x1e
    1b38:	91 c0       	rjmp	.+290    	; 0x1c5c <LCD_voidInit+0x472>
	else if (__tmp > 255)
    1b3a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1b3c:	78 a1       	ldd	r23, Y+32	; 0x20
    1b3e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b40:	9a a1       	ldd	r25, Y+34	; 0x22
    1b42:	20 e0       	ldi	r18, 0x00	; 0
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	4f e7       	ldi	r20, 0x7F	; 127
    1b48:	53 e4       	ldi	r21, 0x43	; 67
    1b4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b4e:	18 16       	cp	r1, r24
    1b50:	0c f0       	brlt	.+2      	; 0x1b54 <LCD_voidInit+0x36a>
    1b52:	7b c0       	rjmp	.+246    	; 0x1c4a <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1b54:	6b a1       	ldd	r22, Y+35	; 0x23
    1b56:	7c a1       	ldd	r23, Y+36	; 0x24
    1b58:	8d a1       	ldd	r24, Y+37	; 0x25
    1b5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	4a e7       	ldi	r20, 0x7A	; 122
    1b62:	54 e4       	ldi	r21, 0x44	; 68
    1b64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8a 8f       	std	Y+26, r24	; 0x1a
    1b6e:	9b 8f       	std	Y+27, r25	; 0x1b
    1b70:	ac 8f       	std	Y+28, r26	; 0x1c
    1b72:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1b76:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1b78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a ef       	ldi	r20, 0xFA	; 250
    1b82:	54 e4       	ldi	r21, 0x44	; 68
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	8e 8b       	std	Y+22, r24	; 0x16
    1b8e:	9f 8b       	std	Y+23, r25	; 0x17
    1b90:	a8 8f       	std	Y+24, r26	; 0x18
    1b92:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1b94:	6e 89       	ldd	r22, Y+22	; 0x16
    1b96:	7f 89       	ldd	r23, Y+23	; 0x17
    1b98:	88 8d       	ldd	r24, Y+24	; 0x18
    1b9a:	99 8d       	ldd	r25, Y+25	; 0x19
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <LCD_voidInit+0x3cc>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9d 8b       	std	Y+21, r25	; 0x15
    1bb2:	8c 8b       	std	Y+20, r24	; 0x14
    1bb4:	3f c0       	rjmp	.+126    	; 0x1c34 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1bb6:	6e 89       	ldd	r22, Y+22	; 0x16
    1bb8:	7f 89       	ldd	r23, Y+23	; 0x17
    1bba:	88 8d       	ldd	r24, Y+24	; 0x18
    1bbc:	99 8d       	ldd	r25, Y+25	; 0x19
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	4c f5       	brge	.+82     	; 0x1c20 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1bd0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1bd2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bd4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9d 8b       	std	Y+21, r25	; 0x15
    1bf4:	8c 8b       	std	Y+20, r24	; 0x14
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <LCD_voidInit+0x42c>
    1bf8:	88 ec       	ldi	r24, 0xC8	; 200
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9b 8b       	std	Y+19, r25	; 0x13
    1bfe:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c00:	8a 89       	ldd	r24, Y+18	; 0x12
    1c02:	9b 89       	ldd	r25, Y+19	; 0x13
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_voidInit+0x41a>
    1c08:	9b 8b       	std	Y+19, r25	; 0x13
    1c0a:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	8c 89       	ldd	r24, Y+20	; 0x14
    1c0e:	9d 89       	ldd	r25, Y+21	; 0x15
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	9d 8b       	std	Y+21, r25	; 0x15
    1c14:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	8c 89       	ldd	r24, Y+20	; 0x14
    1c18:	9d 89       	ldd	r25, Y+21	; 0x15
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <LCD_voidInit+0x40e>
    1c1e:	24 c0       	rjmp	.+72     	; 0x1c68 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	6e 89       	ldd	r22, Y+22	; 0x16
    1c22:	7f 89       	ldd	r23, Y+23	; 0x17
    1c24:	88 8d       	ldd	r24, Y+24	; 0x18
    1c26:	99 8d       	ldd	r25, Y+25	; 0x19
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9d 8b       	std	Y+21, r25	; 0x15
    1c32:	8c 8b       	std	Y+20, r24	; 0x14
    1c34:	8c 89       	ldd	r24, Y+20	; 0x14
    1c36:	9d 89       	ldd	r25, Y+21	; 0x15
    1c38:	99 8b       	std	Y+17, r25	; 0x11
    1c3a:	88 8b       	std	Y+16, r24	; 0x10
    1c3c:	88 89       	ldd	r24, Y+16	; 0x10
    1c3e:	99 89       	ldd	r25, Y+17	; 0x11
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_voidInit+0x456>
    1c44:	99 8b       	std	Y+17, r25	; 0x11
    1c46:	88 8b       	std	Y+16, r24	; 0x10
    1c48:	0f c0       	rjmp	.+30     	; 0x1c68 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c4a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1c4c:	78 a1       	ldd	r23, Y+32	; 0x20
    1c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    1c50:	9a a1       	ldd	r25, Y+34	; 0x22
    1c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c56:	dc 01       	movw	r26, r24
    1c58:	cb 01       	movw	r24, r22
    1c5a:	8e 8f       	std	Y+30, r24	; 0x1e
    1c5c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1c5e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c60:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c62:	8a 95       	dec	r24
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <LCD_voidInit+0x478>
    1c66:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e4       	ldi	r27, 0x40	; 64
    1c76:	8b 87       	std	Y+11, r24	; 0x0b
    1c78:	9c 87       	std	Y+12, r25	; 0x0c
    1c7a:	ad 87       	std	Y+13, r26	; 0x0d
    1c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	4a ef       	ldi	r20, 0xFA	; 250
    1c8c:	54 e4       	ldi	r21, 0x44	; 68
    1c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	8f 83       	std	Y+7, r24	; 0x07
    1c98:	98 87       	std	Y+8, r25	; 0x08
    1c9a:	a9 87       	std	Y+9, r26	; 0x09
    1c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ca0:	78 85       	ldd	r23, Y+8	; 0x08
    1ca2:	89 85       	ldd	r24, Y+9	; 0x09
    1ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	40 e8       	ldi	r20, 0x80	; 128
    1cac:	5f e3       	ldi	r21, 0x3F	; 63
    1cae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	2c f4       	brge	.+10     	; 0x1cc0 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	3f c0       	rjmp	.+126    	; 0x1d3e <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc2:	78 85       	ldd	r23, Y+8	; 0x08
    1cc4:	89 85       	ldd	r24, Y+9	; 0x09
    1cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	3f ef       	ldi	r19, 0xFF	; 255
    1ccc:	4f e7       	ldi	r20, 0x7F	; 127
    1cce:	57 e4       	ldi	r21, 0x47	; 71
    1cd0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cd4:	18 16       	cp	r1, r24
    1cd6:	4c f5       	brge	.+82     	; 0x1d2a <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e2       	ldi	r20, 0x20	; 32
    1ce6:	51 e4       	ldi	r21, 0x41	; 65
    1ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	9e 83       	std	Y+6, r25	; 0x06
    1cfe:	8d 83       	std	Y+5, r24	; 0x05
    1d00:	0f c0       	rjmp	.+30     	; 0x1d20 <LCD_voidInit+0x536>
    1d02:	88 ec       	ldi	r24, 0xC8	; 200
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_voidInit+0x524>
    1d12:	9c 83       	std	Y+4, r25	; 0x04
    1d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	9e 83       	std	Y+6, r25	; 0x06
    1d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d20:	8d 81       	ldd	r24, Y+5	; 0x05
    1d22:	9e 81       	ldd	r25, Y+6	; 0x06
    1d24:	00 97       	sbiw	r24, 0x00	; 0
    1d26:	69 f7       	brne	.-38     	; 0x1d02 <LCD_voidInit+0x518>
    1d28:	14 c0       	rjmp	.+40     	; 0x1d52 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2c:	78 85       	ldd	r23, Y+8	; 0x08
    1d2e:	89 85       	ldd	r24, Y+9	; 0x09
    1d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	89 81       	ldd	r24, Y+1	; 0x01
    1d48:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4a:	01 97       	sbiw	r24, 0x01	; 1
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <LCD_voidInit+0x560>
    1d4e:	9a 83       	std	Y+2, r25	; 0x02
    1d50:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    1d52:	86 e0       	ldi	r24, 0x06	; 6
    1d54:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>


}
    1d58:	c4 5b       	subi	r28, 0xB4	; 180
    1d5a:	df 4f       	sbci	r29, 0xFF	; 255
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	cf 91       	pop	r28
    1d68:	df 91       	pop	r29
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	e1 97       	sbiw	r28, 0x31	; 49
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	60 e0       	ldi	r22, 0x00	; 0
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	61 e0       	ldi	r22, 0x01	; 1
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9e:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	62 e0       	ldi	r22, 0x02	; 2
    1da6:	41 e0       	ldi	r20, 0x01	; 1
    1da8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	a0 e8       	ldi	r26, 0x80	; 128
    1db2:	bf e3       	ldi	r27, 0x3F	; 63
    1db4:	8d a7       	std	Y+45, r24	; 0x2d
    1db6:	9e a7       	std	Y+46, r25	; 0x2e
    1db8:	af a7       	std	Y+47, r26	; 0x2f
    1dba:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dbc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dbe:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc4:	2b ea       	ldi	r18, 0xAB	; 171
    1dc6:	3a ea       	ldi	r19, 0xAA	; 170
    1dc8:	4a e2       	ldi	r20, 0x2A	; 42
    1dca:	50 e4       	ldi	r21, 0x40	; 64
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	89 a7       	std	Y+41, r24	; 0x29
    1dd6:	9a a7       	std	Y+42, r25	; 0x2a
    1dd8:	ab a7       	std	Y+43, r26	; 0x2b
    1dda:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1ddc:	69 a5       	ldd	r22, Y+41	; 0x29
    1dde:	7a a5       	ldd	r23, Y+42	; 0x2a
    1de0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1de2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5f e3       	ldi	r21, 0x3F	; 63
    1dec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df0:	88 23       	and	r24, r24
    1df2:	1c f4       	brge	.+6      	; 0x1dfa <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	88 a7       	std	Y+40, r24	; 0x28
    1df8:	91 c0       	rjmp	.+290    	; 0x1f1c <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1dfa:	69 a5       	ldd	r22, Y+41	; 0x29
    1dfc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1dfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e02:	20 e0       	ldi	r18, 0x00	; 0
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	4f e7       	ldi	r20, 0x7F	; 127
    1e08:	53 e4       	ldi	r21, 0x43	; 67
    1e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e0e:	18 16       	cp	r1, r24
    1e10:	0c f0       	brlt	.+2      	; 0x1e14 <LCD_voidSendCmnd+0xa4>
    1e12:	7b c0       	rjmp	.+246    	; 0x1f0a <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1e14:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e16:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	4a e7       	ldi	r20, 0x7A	; 122
    1e22:	54 e4       	ldi	r21, 0x44	; 68
    1e24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	8c a3       	std	Y+36, r24	; 0x24
    1e2e:	9d a3       	std	Y+37, r25	; 0x25
    1e30:	ae a3       	std	Y+38, r26	; 0x26
    1e32:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e34:	6c a1       	ldd	r22, Y+36	; 0x24
    1e36:	7d a1       	ldd	r23, Y+37	; 0x25
    1e38:	8e a1       	ldd	r24, Y+38	; 0x26
    1e3a:	9f a1       	ldd	r25, Y+39	; 0x27
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a ef       	ldi	r20, 0xFA	; 250
    1e42:	54 e4       	ldi	r21, 0x44	; 68
    1e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	88 a3       	std	Y+32, r24	; 0x20
    1e4e:	99 a3       	std	Y+33, r25	; 0x21
    1e50:	aa a3       	std	Y+34, r26	; 0x22
    1e52:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1e54:	68 a1       	ldd	r22, Y+32	; 0x20
    1e56:	79 a1       	ldd	r23, Y+33	; 0x21
    1e58:	8a a1       	ldd	r24, Y+34	; 0x22
    1e5a:	9b a1       	ldd	r25, Y+35	; 0x23
    1e5c:	20 e0       	ldi	r18, 0x00	; 0
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	40 e8       	ldi	r20, 0x80	; 128
    1e62:	5f e3       	ldi	r21, 0x3F	; 63
    1e64:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e68:	88 23       	and	r24, r24
    1e6a:	2c f4       	brge	.+10     	; 0x1e76 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9f 8f       	std	Y+31, r25	; 0x1f
    1e72:	8e 8f       	std	Y+30, r24	; 0x1e
    1e74:	3f c0       	rjmp	.+126    	; 0x1ef4 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1e76:	68 a1       	ldd	r22, Y+32	; 0x20
    1e78:	79 a1       	ldd	r23, Y+33	; 0x21
    1e7a:	8a a1       	ldd	r24, Y+34	; 0x22
    1e7c:	9b a1       	ldd	r25, Y+35	; 0x23
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	3f ef       	ldi	r19, 0xFF	; 255
    1e82:	4f e7       	ldi	r20, 0x7F	; 127
    1e84:	57 e4       	ldi	r21, 0x47	; 71
    1e86:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8a:	18 16       	cp	r1, r24
    1e8c:	4c f5       	brge	.+82     	; 0x1ee0 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8e:	6c a1       	ldd	r22, Y+36	; 0x24
    1e90:	7d a1       	ldd	r23, Y+37	; 0x25
    1e92:	8e a1       	ldd	r24, Y+38	; 0x26
    1e94:	9f a1       	ldd	r25, Y+39	; 0x27
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e2       	ldi	r20, 0x20	; 32
    1e9c:	51 e4       	ldi	r21, 0x41	; 65
    1e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	bc 01       	movw	r22, r24
    1ea8:	cd 01       	movw	r24, r26
    1eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	9f 8f       	std	Y+31, r25	; 0x1f
    1eb4:	8e 8f       	std	Y+30, r24	; 0x1e
    1eb6:	0f c0       	rjmp	.+30     	; 0x1ed6 <LCD_voidSendCmnd+0x166>
    1eb8:	88 ec       	ldi	r24, 0xC8	; 200
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9d 8f       	std	Y+29, r25	; 0x1d
    1ebe:	8c 8f       	std	Y+28, r24	; 0x1c
    1ec0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ec2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <LCD_voidSendCmnd+0x154>
    1ec8:	9d 8f       	std	Y+29, r25	; 0x1d
    1eca:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ecc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ece:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ed4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ed8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	69 f7       	brne	.-38     	; 0x1eb8 <LCD_voidSendCmnd+0x148>
    1ede:	24 c0       	rjmp	.+72     	; 0x1f28 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee0:	68 a1       	ldd	r22, Y+32	; 0x20
    1ee2:	79 a1       	ldd	r23, Y+33	; 0x21
    1ee4:	8a a1       	ldd	r24, Y+34	; 0x22
    1ee6:	9b a1       	ldd	r25, Y+35	; 0x23
    1ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	9f 8f       	std	Y+31, r25	; 0x1f
    1ef2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ef4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ef6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ef8:	9b 8f       	std	Y+27, r25	; 0x1b
    1efa:	8a 8f       	std	Y+26, r24	; 0x1a
    1efc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1efe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	f1 f7       	brne	.-4      	; 0x1f00 <LCD_voidSendCmnd+0x190>
    1f04:	9b 8f       	std	Y+27, r25	; 0x1b
    1f06:	8a 8f       	std	Y+26, r24	; 0x1a
    1f08:	0f c0       	rjmp	.+30     	; 0x1f28 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f0a:	69 a5       	ldd	r22, Y+41	; 0x29
    1f0c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f0e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f10:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	88 a7       	std	Y+40, r24	; 0x28
    1f1c:	88 a5       	ldd	r24, Y+40	; 0x28
    1f1e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f20:	89 8d       	ldd	r24, Y+25	; 0x19
    1f22:	8a 95       	dec	r24
    1f24:	f1 f7       	brne	.-4      	; 0x1f22 <LCD_voidSendCmnd+0x1b2>
    1f26:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	62 e0       	ldi	r22, 0x02	; 2
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a0 e8       	ldi	r26, 0x80	; 128
    1f38:	bf e3       	ldi	r27, 0x3F	; 63
    1f3a:	8d 8b       	std	Y+21, r24	; 0x15
    1f3c:	9e 8b       	std	Y+22, r25	; 0x16
    1f3e:	af 8b       	std	Y+23, r26	; 0x17
    1f40:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f42:	6d 89       	ldd	r22, Y+21	; 0x15
    1f44:	7e 89       	ldd	r23, Y+22	; 0x16
    1f46:	8f 89       	ldd	r24, Y+23	; 0x17
    1f48:	98 8d       	ldd	r25, Y+24	; 0x18
    1f4a:	2b ea       	ldi	r18, 0xAB	; 171
    1f4c:	3a ea       	ldi	r19, 0xAA	; 170
    1f4e:	4a e2       	ldi	r20, 0x2A	; 42
    1f50:	50 e4       	ldi	r21, 0x40	; 64
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	89 8b       	std	Y+17, r24	; 0x11
    1f5c:	9a 8b       	std	Y+18, r25	; 0x12
    1f5e:	ab 8b       	std	Y+19, r26	; 0x13
    1f60:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f62:	69 89       	ldd	r22, Y+17	; 0x11
    1f64:	7a 89       	ldd	r23, Y+18	; 0x12
    1f66:	8b 89       	ldd	r24, Y+19	; 0x13
    1f68:	9c 89       	ldd	r25, Y+20	; 0x14
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	1c f4       	brge	.+6      	; 0x1f80 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	88 8b       	std	Y+16, r24	; 0x10
    1f7e:	91 c0       	rjmp	.+290    	; 0x20a2 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    1f80:	69 89       	ldd	r22, Y+17	; 0x11
    1f82:	7a 89       	ldd	r23, Y+18	; 0x12
    1f84:	8b 89       	ldd	r24, Y+19	; 0x13
    1f86:	9c 89       	ldd	r25, Y+20	; 0x14
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4f e7       	ldi	r20, 0x7F	; 127
    1f8e:	53 e4       	ldi	r21, 0x43	; 67
    1f90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f94:	18 16       	cp	r1, r24
    1f96:	0c f0       	brlt	.+2      	; 0x1f9a <LCD_voidSendCmnd+0x22a>
    1f98:	7b c0       	rjmp	.+246    	; 0x2090 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    1f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	4a e7       	ldi	r20, 0x7A	; 122
    1fa8:	54 e4       	ldi	r21, 0x44	; 68
    1faa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	8c 87       	std	Y+12, r24	; 0x0c
    1fb4:	9d 87       	std	Y+13, r25	; 0x0d
    1fb6:	ae 87       	std	Y+14, r26	; 0x0e
    1fb8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fba:	6c 85       	ldd	r22, Y+12	; 0x0c
    1fbc:	7d 85       	ldd	r23, Y+13	; 0x0d
    1fbe:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fc0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4a ef       	ldi	r20, 0xFA	; 250
    1fc8:	54 e4       	ldi	r21, 0x44	; 68
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	88 87       	std	Y+8, r24	; 0x08
    1fd4:	99 87       	std	Y+9, r25	; 0x09
    1fd6:	aa 87       	std	Y+10, r26	; 0x0a
    1fd8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1fda:	68 85       	ldd	r22, Y+8	; 0x08
    1fdc:	79 85       	ldd	r23, Y+9	; 0x09
    1fde:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9f 83       	std	Y+7, r25	; 0x07
    1ff8:	8e 83       	std	Y+6, r24	; 0x06
    1ffa:	3f c0       	rjmp	.+126    	; 0x207a <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    1ffc:	68 85       	ldd	r22, Y+8	; 0x08
    1ffe:	79 85       	ldd	r23, Y+9	; 0x09
    2000:	8a 85       	ldd	r24, Y+10	; 0x0a
    2002:	9b 85       	ldd	r25, Y+11	; 0x0b
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	3f ef       	ldi	r19, 0xFF	; 255
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	57 e4       	ldi	r21, 0x47	; 71
    200c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	4c f5       	brge	.+82     	; 0x2066 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	6c 85       	ldd	r22, Y+12	; 0x0c
    2016:	7d 85       	ldd	r23, Y+13	; 0x0d
    2018:	8e 85       	ldd	r24, Y+14	; 0x0e
    201a:	9f 85       	ldd	r25, Y+15	; 0x0f
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9f 83       	std	Y+7, r25	; 0x07
    203a:	8e 83       	std	Y+6, r24	; 0x06
    203c:	0f c0       	rjmp	.+30     	; 0x205c <LCD_voidSendCmnd+0x2ec>
    203e:	88 ec       	ldi	r24, 0xC8	; 200
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9d 83       	std	Y+5, r25	; 0x05
    2044:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2046:	8c 81       	ldd	r24, Y+4	; 0x04
    2048:	9d 81       	ldd	r25, Y+5	; 0x05
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_voidSendCmnd+0x2da>
    204e:	9d 83       	std	Y+5, r25	; 0x05
    2050:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	9f 81       	ldd	r25, Y+7	; 0x07
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	9f 83       	std	Y+7, r25	; 0x07
    205a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205c:	8e 81       	ldd	r24, Y+6	; 0x06
    205e:	9f 81       	ldd	r25, Y+7	; 0x07
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	69 f7       	brne	.-38     	; 0x203e <LCD_voidSendCmnd+0x2ce>
    2064:	24 c0       	rjmp	.+72     	; 0x20ae <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	68 85       	ldd	r22, Y+8	; 0x08
    2068:	79 85       	ldd	r23, Y+9	; 0x09
    206a:	8a 85       	ldd	r24, Y+10	; 0x0a
    206c:	9b 85       	ldd	r25, Y+11	; 0x0b
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9f 83       	std	Y+7, r25	; 0x07
    2078:	8e 83       	std	Y+6, r24	; 0x06
    207a:	8e 81       	ldd	r24, Y+6	; 0x06
    207c:	9f 81       	ldd	r25, Y+7	; 0x07
    207e:	9b 83       	std	Y+3, r25	; 0x03
    2080:	8a 83       	std	Y+2, r24	; 0x02
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_voidSendCmnd+0x316>
    208a:	9b 83       	std	Y+3, r25	; 0x03
    208c:	8a 83       	std	Y+2, r24	; 0x02
    208e:	0f c0       	rjmp	.+30     	; 0x20ae <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2090:	69 89       	ldd	r22, Y+17	; 0x11
    2092:	7a 89       	ldd	r23, Y+18	; 0x12
    2094:	8b 89       	ldd	r24, Y+19	; 0x13
    2096:	9c 89       	ldd	r25, Y+20	; 0x14
    2098:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	88 8b       	std	Y+16, r24	; 0x10
    20a2:	88 89       	ldd	r24, Y+16	; 0x10
    20a4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	8a 95       	dec	r24
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_voidSendCmnd+0x338>
    20ac:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    20ae:	e1 96       	adiw	r28, 0x31	; 49
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	cf 91       	pop	r28
    20bc:	df 91       	pop	r29
    20be:	08 95       	ret

000020c0 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    20c0:	df 93       	push	r29
    20c2:	cf 93       	push	r28
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	e1 97       	sbiw	r28, 0x31	; 49
    20ca:	0f b6       	in	r0, 0x3f	; 63
    20cc:	f8 94       	cli
    20ce:	de bf       	out	0x3e, r29	; 62
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	cd bf       	out	0x3d, r28	; 61
    20d4:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	60 e0       	ldi	r22, 0x00	; 0
    20da:	41 e0       	ldi	r20, 0x01	; 1
    20dc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	61 e0       	ldi	r22, 0x01	; 1
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    20ea:	83 e0       	ldi	r24, 0x03	; 3
    20ec:	69 a9       	ldd	r22, Y+49	; 0x31
    20ee:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	62 e0       	ldi	r22, 0x02	; 2
    20f6:	41 e0       	ldi	r20, 0x01	; 1
    20f8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e8       	ldi	r26, 0x80	; 128
    2102:	bf e3       	ldi	r27, 0x3F	; 63
    2104:	8d a7       	std	Y+45, r24	; 0x2d
    2106:	9e a7       	std	Y+46, r25	; 0x2e
    2108:	af a7       	std	Y+47, r26	; 0x2f
    210a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    210c:	6d a5       	ldd	r22, Y+45	; 0x2d
    210e:	7e a5       	ldd	r23, Y+46	; 0x2e
    2110:	8f a5       	ldd	r24, Y+47	; 0x2f
    2112:	98 a9       	ldd	r25, Y+48	; 0x30
    2114:	2b ea       	ldi	r18, 0xAB	; 171
    2116:	3a ea       	ldi	r19, 0xAA	; 170
    2118:	4a e2       	ldi	r20, 0x2A	; 42
    211a:	50 e4       	ldi	r21, 0x40	; 64
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	89 a7       	std	Y+41, r24	; 0x29
    2126:	9a a7       	std	Y+42, r25	; 0x2a
    2128:	ab a7       	std	Y+43, r26	; 0x2b
    212a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    212c:	69 a5       	ldd	r22, Y+41	; 0x29
    212e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2130:	8b a5       	ldd	r24, Y+43	; 0x2b
    2132:	9c a5       	ldd	r25, Y+44	; 0x2c
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e8       	ldi	r20, 0x80	; 128
    213a:	5f e3       	ldi	r21, 0x3F	; 63
    213c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2140:	88 23       	and	r24, r24
    2142:	1c f4       	brge	.+6      	; 0x214a <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	88 a7       	std	Y+40, r24	; 0x28
    2148:	91 c0       	rjmp	.+290    	; 0x226c <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    214a:	69 a5       	ldd	r22, Y+41	; 0x29
    214c:	7a a5       	ldd	r23, Y+42	; 0x2a
    214e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2150:	9c a5       	ldd	r25, Y+44	; 0x2c
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	4f e7       	ldi	r20, 0x7F	; 127
    2158:	53 e4       	ldi	r21, 0x43	; 67
    215a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215e:	18 16       	cp	r1, r24
    2160:	0c f0       	brlt	.+2      	; 0x2164 <LCD_voidSendChar+0xa4>
    2162:	7b c0       	rjmp	.+246    	; 0x225a <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2164:	6d a5       	ldd	r22, Y+45	; 0x2d
    2166:	7e a5       	ldd	r23, Y+46	; 0x2e
    2168:	8f a5       	ldd	r24, Y+47	; 0x2f
    216a:	98 a9       	ldd	r25, Y+48	; 0x30
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a e7       	ldi	r20, 0x7A	; 122
    2172:	54 e4       	ldi	r21, 0x44	; 68
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	8c a3       	std	Y+36, r24	; 0x24
    217e:	9d a3       	std	Y+37, r25	; 0x25
    2180:	ae a3       	std	Y+38, r26	; 0x26
    2182:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2184:	6c a1       	ldd	r22, Y+36	; 0x24
    2186:	7d a1       	ldd	r23, Y+37	; 0x25
    2188:	8e a1       	ldd	r24, Y+38	; 0x26
    218a:	9f a1       	ldd	r25, Y+39	; 0x27
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	4a ef       	ldi	r20, 0xFA	; 250
    2192:	54 e4       	ldi	r21, 0x44	; 68
    2194:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	88 a3       	std	Y+32, r24	; 0x20
    219e:	99 a3       	std	Y+33, r25	; 0x21
    21a0:	aa a3       	std	Y+34, r26	; 0x22
    21a2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    21a4:	68 a1       	ldd	r22, Y+32	; 0x20
    21a6:	79 a1       	ldd	r23, Y+33	; 0x21
    21a8:	8a a1       	ldd	r24, Y+34	; 0x22
    21aa:	9b a1       	ldd	r25, Y+35	; 0x23
    21ac:	20 e0       	ldi	r18, 0x00	; 0
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e8       	ldi	r20, 0x80	; 128
    21b2:	5f e3       	ldi	r21, 0x3F	; 63
    21b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b8:	88 23       	and	r24, r24
    21ba:	2c f4       	brge	.+10     	; 0x21c6 <LCD_voidSendChar+0x106>
		__ticks = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	9f 8f       	std	Y+31, r25	; 0x1f
    21c2:	8e 8f       	std	Y+30, r24	; 0x1e
    21c4:	3f c0       	rjmp	.+126    	; 0x2244 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    21c6:	68 a1       	ldd	r22, Y+32	; 0x20
    21c8:	79 a1       	ldd	r23, Y+33	; 0x21
    21ca:	8a a1       	ldd	r24, Y+34	; 0x22
    21cc:	9b a1       	ldd	r25, Y+35	; 0x23
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	3f ef       	ldi	r19, 0xFF	; 255
    21d2:	4f e7       	ldi	r20, 0x7F	; 127
    21d4:	57 e4       	ldi	r21, 0x47	; 71
    21d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21da:	18 16       	cp	r1, r24
    21dc:	4c f5       	brge	.+82     	; 0x2230 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21de:	6c a1       	ldd	r22, Y+36	; 0x24
    21e0:	7d a1       	ldd	r23, Y+37	; 0x25
    21e2:	8e a1       	ldd	r24, Y+38	; 0x26
    21e4:	9f a1       	ldd	r25, Y+39	; 0x27
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	9f 8f       	std	Y+31, r25	; 0x1f
    2204:	8e 8f       	std	Y+30, r24	; 0x1e
    2206:	0f c0       	rjmp	.+30     	; 0x2226 <LCD_voidSendChar+0x166>
    2208:	88 ec       	ldi	r24, 0xC8	; 200
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9d 8f       	std	Y+29, r25	; 0x1d
    220e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2210:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2212:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2214:	01 97       	sbiw	r24, 0x01	; 1
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_voidSendChar+0x154>
    2218:	9d 8f       	std	Y+29, r25	; 0x1d
    221a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    221c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    221e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2220:	01 97       	sbiw	r24, 0x01	; 1
    2222:	9f 8f       	std	Y+31, r25	; 0x1f
    2224:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2226:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2228:	9f 8d       	ldd	r25, Y+31	; 0x1f
    222a:	00 97       	sbiw	r24, 0x00	; 0
    222c:	69 f7       	brne	.-38     	; 0x2208 <LCD_voidSendChar+0x148>
    222e:	24 c0       	rjmp	.+72     	; 0x2278 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2230:	68 a1       	ldd	r22, Y+32	; 0x20
    2232:	79 a1       	ldd	r23, Y+33	; 0x21
    2234:	8a a1       	ldd	r24, Y+34	; 0x22
    2236:	9b a1       	ldd	r25, Y+35	; 0x23
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9f 8f       	std	Y+31, r25	; 0x1f
    2242:	8e 8f       	std	Y+30, r24	; 0x1e
    2244:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2246:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2248:	9b 8f       	std	Y+27, r25	; 0x1b
    224a:	8a 8f       	std	Y+26, r24	; 0x1a
    224c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    224e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <LCD_voidSendChar+0x190>
    2254:	9b 8f       	std	Y+27, r25	; 0x1b
    2256:	8a 8f       	std	Y+26, r24	; 0x1a
    2258:	0f c0       	rjmp	.+30     	; 0x2278 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    225a:	69 a5       	ldd	r22, Y+41	; 0x29
    225c:	7a a5       	ldd	r23, Y+42	; 0x2a
    225e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2260:	9c a5       	ldd	r25, Y+44	; 0x2c
    2262:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	88 a7       	std	Y+40, r24	; 0x28
    226c:	88 a5       	ldd	r24, Y+40	; 0x28
    226e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2270:	89 8d       	ldd	r24, Y+25	; 0x19
    2272:	8a 95       	dec	r24
    2274:	f1 f7       	brne	.-4      	; 0x2272 <LCD_voidSendChar+0x1b2>
    2276:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	62 e0       	ldi	r22, 0x02	; 2
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2282:	80 e0       	ldi	r24, 0x00	; 0
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	a0 e8       	ldi	r26, 0x80	; 128
    2288:	bf e3       	ldi	r27, 0x3F	; 63
    228a:	8d 8b       	std	Y+21, r24	; 0x15
    228c:	9e 8b       	std	Y+22, r25	; 0x16
    228e:	af 8b       	std	Y+23, r26	; 0x17
    2290:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2292:	6d 89       	ldd	r22, Y+21	; 0x15
    2294:	7e 89       	ldd	r23, Y+22	; 0x16
    2296:	8f 89       	ldd	r24, Y+23	; 0x17
    2298:	98 8d       	ldd	r25, Y+24	; 0x18
    229a:	2b ea       	ldi	r18, 0xAB	; 171
    229c:	3a ea       	ldi	r19, 0xAA	; 170
    229e:	4a e2       	ldi	r20, 0x2A	; 42
    22a0:	50 e4       	ldi	r21, 0x40	; 64
    22a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	89 8b       	std	Y+17, r24	; 0x11
    22ac:	9a 8b       	std	Y+18, r25	; 0x12
    22ae:	ab 8b       	std	Y+19, r26	; 0x13
    22b0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22b2:	69 89       	ldd	r22, Y+17	; 0x11
    22b4:	7a 89       	ldd	r23, Y+18	; 0x12
    22b6:	8b 89       	ldd	r24, Y+19	; 0x13
    22b8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	40 e8       	ldi	r20, 0x80	; 128
    22c0:	5f e3       	ldi	r21, 0x3F	; 63
    22c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c6:	88 23       	and	r24, r24
    22c8:	1c f4       	brge	.+6      	; 0x22d0 <LCD_voidSendChar+0x210>
		__ticks = 1;
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	88 8b       	std	Y+16, r24	; 0x10
    22ce:	91 c0       	rjmp	.+290    	; 0x23f2 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    22d0:	69 89       	ldd	r22, Y+17	; 0x11
    22d2:	7a 89       	ldd	r23, Y+18	; 0x12
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	4f e7       	ldi	r20, 0x7F	; 127
    22de:	53 e4       	ldi	r21, 0x43	; 67
    22e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e4:	18 16       	cp	r1, r24
    22e6:	0c f0       	brlt	.+2      	; 0x22ea <LCD_voidSendChar+0x22a>
    22e8:	7b c0       	rjmp	.+246    	; 0x23e0 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    22ea:	6d 89       	ldd	r22, Y+21	; 0x15
    22ec:	7e 89       	ldd	r23, Y+22	; 0x16
    22ee:	8f 89       	ldd	r24, Y+23	; 0x17
    22f0:	98 8d       	ldd	r25, Y+24	; 0x18
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	4a e7       	ldi	r20, 0x7A	; 122
    22f8:	54 e4       	ldi	r21, 0x44	; 68
    22fa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	8c 87       	std	Y+12, r24	; 0x0c
    2304:	9d 87       	std	Y+13, r25	; 0x0d
    2306:	ae 87       	std	Y+14, r26	; 0x0e
    2308:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	6c 85       	ldd	r22, Y+12	; 0x0c
    230c:	7d 85       	ldd	r23, Y+13	; 0x0d
    230e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2310:	9f 85       	ldd	r25, Y+15	; 0x0f
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a ef       	ldi	r20, 0xFA	; 250
    2318:	54 e4       	ldi	r21, 0x44	; 68
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	88 87       	std	Y+8, r24	; 0x08
    2324:	99 87       	std	Y+9, r25	; 0x09
    2326:	aa 87       	std	Y+10, r26	; 0x0a
    2328:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    232a:	68 85       	ldd	r22, Y+8	; 0x08
    232c:	79 85       	ldd	r23, Y+9	; 0x09
    232e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2330:	9b 85       	ldd	r25, Y+11	; 0x0b
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9f 83       	std	Y+7, r25	; 0x07
    2348:	8e 83       	std	Y+6, r24	; 0x06
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    234c:	68 85       	ldd	r22, Y+8	; 0x08
    234e:	79 85       	ldd	r23, Y+9	; 0x09
    2350:	8a 85       	ldd	r24, Y+10	; 0x0a
    2352:	9b 85       	ldd	r25, Y+11	; 0x0b
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	6c 85       	ldd	r22, Y+12	; 0x0c
    2366:	7d 85       	ldd	r23, Y+13	; 0x0d
    2368:	8e 85       	ldd	r24, Y+14	; 0x0e
    236a:	9f 85       	ldd	r25, Y+15	; 0x0f
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9f 83       	std	Y+7, r25	; 0x07
    238a:	8e 83       	std	Y+6, r24	; 0x06
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <LCD_voidSendChar+0x2ec>
    238e:	88 ec       	ldi	r24, 0xC8	; 200
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9d 83       	std	Y+5, r25	; 0x05
    2394:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2396:	8c 81       	ldd	r24, Y+4	; 0x04
    2398:	9d 81       	ldd	r25, Y+5	; 0x05
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_voidSendChar+0x2da>
    239e:	9d 83       	std	Y+5, r25	; 0x05
    23a0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8e 81       	ldd	r24, Y+6	; 0x06
    23a4:	9f 81       	ldd	r25, Y+7	; 0x07
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9f 83       	std	Y+7, r25	; 0x07
    23aa:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8e 81       	ldd	r24, Y+6	; 0x06
    23ae:	9f 81       	ldd	r25, Y+7	; 0x07
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <LCD_voidSendChar+0x2ce>
    23b4:	24 c0       	rjmp	.+72     	; 0x23fe <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	68 85       	ldd	r22, Y+8	; 0x08
    23b8:	79 85       	ldd	r23, Y+9	; 0x09
    23ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    23bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9f 83       	std	Y+7, r25	; 0x07
    23c8:	8e 83       	std	Y+6, r24	; 0x06
    23ca:	8e 81       	ldd	r24, Y+6	; 0x06
    23cc:	9f 81       	ldd	r25, Y+7	; 0x07
    23ce:	9b 83       	std	Y+3, r25	; 0x03
    23d0:	8a 83       	std	Y+2, r24	; 0x02
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	9b 81       	ldd	r25, Y+3	; 0x03
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <LCD_voidSendChar+0x316>
    23da:	9b 83       	std	Y+3, r25	; 0x03
    23dc:	8a 83       	std	Y+2, r24	; 0x02
    23de:	0f c0       	rjmp	.+30     	; 0x23fe <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23e0:	69 89       	ldd	r22, Y+17	; 0x11
    23e2:	7a 89       	ldd	r23, Y+18	; 0x12
    23e4:	8b 89       	ldd	r24, Y+19	; 0x13
    23e6:	9c 89       	ldd	r25, Y+20	; 0x14
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	88 8b       	std	Y+16, r24	; 0x10
    23f2:	88 89       	ldd	r24, Y+16	; 0x10
    23f4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	8a 95       	dec	r24
    23fa:	f1 f7       	brne	.-4      	; 0x23f8 <LCD_voidSendChar+0x338>
    23fc:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    23fe:	e1 96       	adiw	r28, 0x31	; 49
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	cf 91       	pop	r28
    240c:	df 91       	pop	r29
    240e:	08 95       	ret

00002410 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    2410:	df 93       	push	r29
    2412:	cf 93       	push	r28
    2414:	00 d0       	rcall	.+0      	; 0x2416 <LCD_voidWriteString+0x6>
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9a 83       	std	Y+2, r25	; 0x02
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	0a c0       	rjmp	.+20     	; 0x2434 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    2420:	e9 81       	ldd	r30, Y+1	; 0x01
    2422:	fa 81       	ldd	r31, Y+2	; 0x02
    2424:	80 81       	ld	r24, Z
    2426:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	9a 81       	ldd	r25, Y+2	; 0x02
    242e:	01 96       	adiw	r24, 0x01	; 1
    2430:	9a 83       	std	Y+2, r25	; 0x02
    2432:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    2434:	e9 81       	ldd	r30, Y+1	; 0x01
    2436:	fa 81       	ldd	r31, Y+2	; 0x02
    2438:	80 81       	ld	r24, Z
    243a:	88 23       	and	r24, r24
    243c:	89 f7       	brne	.-30     	; 0x2420 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	65 97       	sbiw	r28, 0x15	; 21
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	6a 8b       	std	Y+18, r22	; 0x12
    2462:	7b 8b       	std	Y+19, r23	; 0x13
    2464:	8c 8b       	std	Y+20, r24	; 0x14
    2466:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    2468:	8f ef       	ldi	r24, 0xFF	; 255
    246a:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    246c:	8a 89       	ldd	r24, Y+18	; 0x12
    246e:	9b 89       	ldd	r25, Y+19	; 0x13
    2470:	ac 89       	ldd	r26, Y+20	; 0x14
    2472:	bd 89       	ldd	r27, Y+21	; 0x15
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	a1 05       	cpc	r26, r1
    2478:	b1 05       	cpc	r27, r1
    247a:	99 f5       	brne	.+102    	; 0x24e2 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    247c:	80 e3       	ldi	r24, 0x30	; 48
    247e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    2482:	4e c0       	rjmp	.+156    	; 0x2520 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	08 2f       	mov	r16, r24
    248e:	11 27       	eor	r17, r17
    2490:	07 fd       	sbrc	r16, 7
    2492:	10 95       	com	r17
    2494:	8a 89       	ldd	r24, Y+18	; 0x12
    2496:	9b 89       	ldd	r25, Y+19	; 0x13
    2498:	ac 89       	ldd	r26, Y+20	; 0x14
    249a:	bd 89       	ldd	r27, Y+21	; 0x15
    249c:	2a e0       	ldi	r18, 0x0A	; 10
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e0       	ldi	r20, 0x00	; 0
    24a2:	50 e0       	ldi	r21, 0x00	; 0
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodsi4>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	28 2f       	mov	r18, r24
    24b2:	ce 01       	movw	r24, r28
    24b4:	03 96       	adiw	r24, 0x03	; 3
    24b6:	fc 01       	movw	r30, r24
    24b8:	e0 0f       	add	r30, r16
    24ba:	f1 1f       	adc	r31, r17
    24bc:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    24be:	8a 89       	ldd	r24, Y+18	; 0x12
    24c0:	9b 89       	ldd	r25, Y+19	; 0x13
    24c2:	ac 89       	ldd	r26, Y+20	; 0x14
    24c4:	bd 89       	ldd	r27, Y+21	; 0x15
    24c6:	2a e0       	ldi	r18, 0x0A	; 10
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	50 e0       	ldi	r21, 0x00	; 0
    24ce:	bc 01       	movw	r22, r24
    24d0:	cd 01       	movw	r24, r26
    24d2:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodsi4>
    24d6:	da 01       	movw	r26, r20
    24d8:	c9 01       	movw	r24, r18
    24da:	8a 8b       	std	Y+18, r24	; 0x12
    24dc:	9b 8b       	std	Y+19, r25	; 0x13
    24de:	ac 8b       	std	Y+20, r26	; 0x14
    24e0:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    24e2:	8a 89       	ldd	r24, Y+18	; 0x12
    24e4:	9b 89       	ldd	r25, Y+19	; 0x13
    24e6:	ac 89       	ldd	r26, Y+20	; 0x14
    24e8:	bd 89       	ldd	r27, Y+21	; 0x15
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	a1 05       	cpc	r26, r1
    24ee:	b1 05       	cpc	r27, r1
    24f0:	49 f6       	brne	.-110    	; 0x2484 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	11 c0       	rjmp	.+34     	; 0x251a <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	28 2f       	mov	r18, r24
    24fc:	33 27       	eor	r19, r19
    24fe:	27 fd       	sbrc	r18, 7
    2500:	30 95       	com	r19
    2502:	ce 01       	movw	r24, r28
    2504:	03 96       	adiw	r24, 0x03	; 3
    2506:	fc 01       	movw	r30, r24
    2508:	e2 0f       	add	r30, r18
    250a:	f3 1f       	adc	r31, r19
    250c:	80 81       	ld	r24, Z
    250e:	80 5d       	subi	r24, 0xD0	; 208
    2510:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	81 50       	subi	r24, 0x01	; 1
    2518:	89 83       	std	Y+1, r24	; 0x01
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	88 23       	and	r24, r24
    251e:	64 f7       	brge	.-40     	; 0x24f8 <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    2520:	65 96       	adiw	r28, 0x15	; 21
    2522:	0f b6       	in	r0, 0x3f	; 63
    2524:	f8 94       	cli
    2526:	de bf       	out	0x3e, r29	; 62
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	cd bf       	out	0x3d, r28	; 61
    252c:	cf 91       	pop	r28
    252e:	df 91       	pop	r29
    2530:	1f 91       	pop	r17
    2532:	0f 91       	pop	r16
    2534:	08 95       	ret

00002536 <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	00 d0       	rcall	.+0      	; 0x253c <LCD_u8GoToXY+0x6>
    253c:	00 d0       	rcall	.+0      	; 0x253e <LCD_u8GoToXY+0x8>
    253e:	0f 92       	push	r0
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	8a 83       	std	Y+2, r24	; 0x02
    2546:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	88 32       	cpi	r24, 0x28	; 40
    2550:	d8 f4       	brcc	.+54     	; 0x2588 <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2552:	8a 81       	ldd	r24, Y+2	; 0x02
    2554:	28 2f       	mov	r18, r24
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	3d 83       	std	Y+5, r19	; 0x05
    255a:	2c 83       	std	Y+4, r18	; 0x04
    255c:	8c 81       	ldd	r24, Y+4	; 0x04
    255e:	9d 81       	ldd	r25, Y+5	; 0x05
    2560:	81 30       	cpi	r24, 0x01	; 1
    2562:	91 05       	cpc	r25, r1
    2564:	31 f0       	breq	.+12     	; 0x2572 <LCD_u8GoToXY+0x3c>
    2566:	2c 81       	ldd	r18, Y+4	; 0x04
    2568:	3d 81       	ldd	r19, Y+5	; 0x05
    256a:	22 30       	cpi	r18, 0x02	; 2
    256c:	31 05       	cpc	r19, r1
    256e:	31 f0       	breq	.+12     	; 0x257c <LCD_u8GoToXY+0x46>
    2570:	0a c0       	rjmp	.+20     	; 0x2586 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	80 58       	subi	r24, 0x80	; 128
    2576:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
    257a:	06 c0       	rjmp	.+12     	; 0x2588 <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	80 54       	subi	r24, 0x40	; 64
    2580:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
    2584:	01 c0       	rjmp	.+2      	; 0x2588 <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2586:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2588:	89 81       	ldd	r24, Y+1	; 0x01
}
    258a:	0f 90       	pop	r0
    258c:	0f 90       	pop	r0
    258e:	0f 90       	pop	r0
    2590:	0f 90       	pop	r0
    2592:	0f 90       	pop	r0
    2594:	cf 91       	pop	r28
    2596:	df 91       	pop	r29
    2598:	08 95       	ret

0000259a <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    259a:	df 93       	push	r29
    259c:	cf 93       	push	r28
    259e:	cd b7       	in	r28, 0x3d	; 61
    25a0:	de b7       	in	r29, 0x3e	; 62
    25a2:	2e 97       	sbiw	r28, 0x0e	; 14
    25a4:	0f b6       	in	r0, 0x3f	; 63
    25a6:	f8 94       	cli
    25a8:	de bf       	out	0x3e, r29	; 62
    25aa:	0f be       	out	0x3f, r0	; 63
    25ac:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	a0 ea       	ldi	r26, 0xA0	; 160
    25ba:	b1 e4       	ldi	r27, 0x41	; 65
    25bc:	8b 87       	std	Y+11, r24	; 0x0b
    25be:	9c 87       	std	Y+12, r25	; 0x0c
    25c0:	ad 87       	std	Y+13, r26	; 0x0d
    25c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	4a ef       	ldi	r20, 0xFA	; 250
    25d2:	54 e4       	ldi	r21, 0x44	; 68
    25d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	8f 83       	std	Y+7, r24	; 0x07
    25de:	98 87       	std	Y+8, r25	; 0x08
    25e0:	a9 87       	std	Y+9, r26	; 0x09
    25e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	40 e8       	ldi	r20, 0x80	; 128
    25f2:	5f e3       	ldi	r21, 0x3F	; 63
    25f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f8:	88 23       	and	r24, r24
    25fa:	2c f4       	brge	.+10     	; 0x2606 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    25fc:	81 e0       	ldi	r24, 0x01	; 1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
    2604:	3f c0       	rjmp	.+126    	; 0x2684 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2606:	6f 81       	ldd	r22, Y+7	; 0x07
    2608:	78 85       	ldd	r23, Y+8	; 0x08
    260a:	89 85       	ldd	r24, Y+9	; 0x09
    260c:	9a 85       	ldd	r25, Y+10	; 0x0a
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	3f ef       	ldi	r19, 0xFF	; 255
    2612:	4f e7       	ldi	r20, 0x7F	; 127
    2614:	57 e4       	ldi	r21, 0x47	; 71
    2616:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261a:	18 16       	cp	r1, r24
    261c:	4c f5       	brge	.+82     	; 0x2670 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2620:	7c 85       	ldd	r23, Y+12	; 0x0c
    2622:	8d 85       	ldd	r24, Y+13	; 0x0d
    2624:	9e 85       	ldd	r25, Y+14	; 0x0e
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	40 e2       	ldi	r20, 0x20	; 32
    262c:	51 e4       	ldi	r21, 0x41	; 65
    262e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2632:	dc 01       	movw	r26, r24
    2634:	cb 01       	movw	r24, r22
    2636:	bc 01       	movw	r22, r24
    2638:	cd 01       	movw	r24, r26
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
    2646:	0f c0       	rjmp	.+30     	; 0x2666 <LCD_voidClearScreen+0xcc>
    2648:	88 ec       	ldi	r24, 0xC8	; 200
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9c 83       	std	Y+4, r25	; 0x04
    264e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	f1 f7       	brne	.-4      	; 0x2654 <LCD_voidClearScreen+0xba>
    2658:	9c 83       	std	Y+4, r25	; 0x04
    265a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265c:	8d 81       	ldd	r24, Y+5	; 0x05
    265e:	9e 81       	ldd	r25, Y+6	; 0x06
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	9e 83       	std	Y+6, r25	; 0x06
    2664:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2666:	8d 81       	ldd	r24, Y+5	; 0x05
    2668:	9e 81       	ldd	r25, Y+6	; 0x06
    266a:	00 97       	sbiw	r24, 0x00	; 0
    266c:	69 f7       	brne	.-38     	; 0x2648 <LCD_voidClearScreen+0xae>
    266e:	14 c0       	rjmp	.+40     	; 0x2698 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2670:	6f 81       	ldd	r22, Y+7	; 0x07
    2672:	78 85       	ldd	r23, Y+8	; 0x08
    2674:	89 85       	ldd	r24, Y+9	; 0x09
    2676:	9a 85       	ldd	r25, Y+10	; 0x0a
    2678:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	8d 81       	ldd	r24, Y+5	; 0x05
    2686:	9e 81       	ldd	r25, Y+6	; 0x06
    2688:	9a 83       	std	Y+2, r25	; 0x02
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	9a 81       	ldd	r25, Y+2	; 0x02
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <LCD_voidClearScreen+0xf6>
    2694:	9a 83       	std	Y+2, r25	; 0x02
    2696:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2698:	2e 96       	adiw	r28, 0x0e	; 14
    269a:	0f b6       	in	r0, 0x3f	; 63
    269c:	f8 94       	cli
    269e:	de bf       	out	0x3e, r29	; 62
    26a0:	0f be       	out	0x3f, r0	; 63
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	cf 91       	pop	r28
    26a6:	df 91       	pop	r29
    26a8:	08 95       	ret

000026aa <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    26aa:	df 93       	push	r29
    26ac:	cf 93       	push	r28
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	2a 97       	sbiw	r28, 0x0a	; 10
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	de bf       	out	0x3e, r29	; 62
    26ba:	0f be       	out	0x3f, r0	; 63
    26bc:	cd bf       	out	0x3d, r28	; 61
    26be:	8c 83       	std	Y+4, r24	; 0x04
    26c0:	7e 83       	std	Y+6, r23	; 0x06
    26c2:	6d 83       	std	Y+5, r22	; 0x05
    26c4:	4f 83       	std	Y+7, r20	; 0x07
    26c6:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    26cc:	88 e0       	ldi	r24, 0x08	; 8
    26ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    26d0:	8c 81       	ldd	r24, Y+4	; 0x04
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	3a 87       	std	Y+10, r19	; 0x0a
    26d8:	29 87       	std	Y+9, r18	; 0x09
    26da:	89 85       	ldd	r24, Y+9	; 0x09
    26dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26de:	83 30       	cpi	r24, 0x03	; 3
    26e0:	91 05       	cpc	r25, r1
    26e2:	09 f4       	brne	.+2      	; 0x26e6 <LCD_voidWriteSpecialChar+0x3c>
    26e4:	8c c0       	rjmp	.+280    	; 0x27fe <LCD_voidWriteSpecialChar+0x154>
    26e6:	29 85       	ldd	r18, Y+9	; 0x09
    26e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    26ea:	24 30       	cpi	r18, 0x04	; 4
    26ec:	31 05       	cpc	r19, r1
    26ee:	8c f4       	brge	.+34     	; 0x2712 <LCD_voidWriteSpecialChar+0x68>
    26f0:	89 85       	ldd	r24, Y+9	; 0x09
    26f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f4:	81 30       	cpi	r24, 0x01	; 1
    26f6:	91 05       	cpc	r25, r1
    26f8:	09 f4       	brne	.+2      	; 0x26fc <LCD_voidWriteSpecialChar+0x52>
    26fa:	43 c0       	rjmp	.+134    	; 0x2782 <LCD_voidWriteSpecialChar+0xd8>
    26fc:	29 85       	ldd	r18, Y+9	; 0x09
    26fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    2700:	22 30       	cpi	r18, 0x02	; 2
    2702:	31 05       	cpc	r19, r1
    2704:	0c f0       	brlt	.+2      	; 0x2708 <LCD_voidWriteSpecialChar+0x5e>
    2706:	5c c0       	rjmp	.+184    	; 0x27c0 <LCD_voidWriteSpecialChar+0x116>
    2708:	89 85       	ldd	r24, Y+9	; 0x09
    270a:	9a 85       	ldd	r25, Y+10	; 0x0a
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	d1 f0       	breq	.+52     	; 0x2744 <LCD_voidWriteSpecialChar+0x9a>
    2710:	11 c1       	rjmp	.+546    	; 0x2934 <LCD_voidWriteSpecialChar+0x28a>
    2712:	29 85       	ldd	r18, Y+9	; 0x09
    2714:	3a 85       	ldd	r19, Y+10	; 0x0a
    2716:	25 30       	cpi	r18, 0x05	; 5
    2718:	31 05       	cpc	r19, r1
    271a:	09 f4       	brne	.+2      	; 0x271e <LCD_voidWriteSpecialChar+0x74>
    271c:	ae c0       	rjmp	.+348    	; 0x287a <LCD_voidWriteSpecialChar+0x1d0>
    271e:	89 85       	ldd	r24, Y+9	; 0x09
    2720:	9a 85       	ldd	r25, Y+10	; 0x0a
    2722:	85 30       	cpi	r24, 0x05	; 5
    2724:	91 05       	cpc	r25, r1
    2726:	0c f4       	brge	.+2      	; 0x272a <LCD_voidWriteSpecialChar+0x80>
    2728:	89 c0       	rjmp	.+274    	; 0x283c <LCD_voidWriteSpecialChar+0x192>
    272a:	29 85       	ldd	r18, Y+9	; 0x09
    272c:	3a 85       	ldd	r19, Y+10	; 0x0a
    272e:	26 30       	cpi	r18, 0x06	; 6
    2730:	31 05       	cpc	r19, r1
    2732:	09 f4       	brne	.+2      	; 0x2736 <LCD_voidWriteSpecialChar+0x8c>
    2734:	c1 c0       	rjmp	.+386    	; 0x28b8 <LCD_voidWriteSpecialChar+0x20e>
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	9a 85       	ldd	r25, Y+10	; 0x0a
    273a:	87 30       	cpi	r24, 0x07	; 7
    273c:	91 05       	cpc	r25, r1
    273e:	09 f4       	brne	.+2      	; 0x2742 <LCD_voidWriteSpecialChar+0x98>
    2740:	da c0       	rjmp	.+436    	; 0x28f6 <LCD_voidWriteSpecialChar+0x24c>
    2742:	f8 c0       	rjmp	.+496    	; 0x2934 <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2744:	80 e4       	ldi	r24, 0x40	; 64
    2746:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	0e c0       	rjmp	.+28     	; 0x276a <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	28 2f       	mov	r18, r24
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	8d 81       	ldd	r24, Y+5	; 0x05
    2756:	9e 81       	ldd	r25, Y+6	; 0x06
    2758:	fc 01       	movw	r30, r24
    275a:	e2 0f       	add	r30, r18
    275c:	f3 1f       	adc	r31, r19
    275e:	80 81       	ld	r24, Z
    2760:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	8f 5f       	subi	r24, 0xFF	; 255
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	99 81       	ldd	r25, Y+1	; 0x01
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	98 17       	cp	r25, r24
    2770:	70 f3       	brcs	.-36     	; 0x274e <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2772:	8f 81       	ldd	r24, Y+7	; 0x07
    2774:	68 85       	ldd	r22, Y+8	; 0x08
    2776:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    277a:	8c 81       	ldd	r24, Y+4	; 0x04
    277c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    2780:	da c0       	rjmp	.+436    	; 0x2936 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2782:	88 e4       	ldi	r24, 0x48	; 72
    2784:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2788:	19 82       	std	Y+1, r1	; 0x01
    278a:	0e c0       	rjmp	.+28     	; 0x27a8 <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	28 2f       	mov	r18, r24
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	fc 01       	movw	r30, r24
    2798:	e2 0f       	add	r30, r18
    279a:	f3 1f       	adc	r31, r19
    279c:	80 81       	ld	r24, Z
    279e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	8f 5f       	subi	r24, 0xFF	; 255
    27a6:	89 83       	std	Y+1, r24	; 0x01
    27a8:	99 81       	ldd	r25, Y+1	; 0x01
    27aa:	8a 81       	ldd	r24, Y+2	; 0x02
    27ac:	98 17       	cp	r25, r24
    27ae:	70 f3       	brcs	.-36     	; 0x278c <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    27b0:	8f 81       	ldd	r24, Y+7	; 0x07
    27b2:	68 85       	ldd	r22, Y+8	; 0x08
    27b4:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    27be:	bb c0       	rjmp	.+374    	; 0x2936 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    27c0:	80 e5       	ldi	r24, 0x50	; 80
    27c2:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    27c6:	19 82       	std	Y+1, r1	; 0x01
    27c8:	0e c0       	rjmp	.+28     	; 0x27e6 <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    27ca:	89 81       	ldd	r24, Y+1	; 0x01
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	9e 81       	ldd	r25, Y+6	; 0x06
    27d4:	fc 01       	movw	r30, r24
    27d6:	e2 0f       	add	r30, r18
    27d8:	f3 1f       	adc	r31, r19
    27da:	80 81       	ld	r24, Z
    27dc:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	8f 5f       	subi	r24, 0xFF	; 255
    27e4:	89 83       	std	Y+1, r24	; 0x01
    27e6:	99 81       	ldd	r25, Y+1	; 0x01
    27e8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ea:	98 17       	cp	r25, r24
    27ec:	70 f3       	brcs	.-36     	; 0x27ca <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    27ee:	8f 81       	ldd	r24, Y+7	; 0x07
    27f0:	68 85       	ldd	r22, Y+8	; 0x08
    27f2:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    27f6:	8c 81       	ldd	r24, Y+4	; 0x04
    27f8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    27fc:	9c c0       	rjmp	.+312    	; 0x2936 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    27fe:	88 e5       	ldi	r24, 0x58	; 88
    2800:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2804:	19 82       	std	Y+1, r1	; 0x01
    2806:	0e c0       	rjmp	.+28     	; 0x2824 <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	fc 01       	movw	r30, r24
    2814:	e2 0f       	add	r30, r18
    2816:	f3 1f       	adc	r31, r19
    2818:	80 81       	ld	r24, Z
    281a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	8f 5f       	subi	r24, 0xFF	; 255
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	99 81       	ldd	r25, Y+1	; 0x01
    2826:	8a 81       	ldd	r24, Y+2	; 0x02
    2828:	98 17       	cp	r25, r24
    282a:	70 f3       	brcs	.-36     	; 0x2808 <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    282c:	8f 81       	ldd	r24, Y+7	; 0x07
    282e:	68 85       	ldd	r22, Y+8	; 0x08
    2830:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2834:	8c 81       	ldd	r24, Y+4	; 0x04
    2836:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    283a:	7d c0       	rjmp	.+250    	; 0x2936 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    283c:	80 e6       	ldi	r24, 0x60	; 96
    283e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2842:	19 82       	std	Y+1, r1	; 0x01
    2844:	0e c0       	rjmp	.+28     	; 0x2862 <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	28 2f       	mov	r18, r24
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	fc 01       	movw	r30, r24
    2852:	e2 0f       	add	r30, r18
    2854:	f3 1f       	adc	r31, r19
    2856:	80 81       	ld	r24, Z
    2858:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	8f 5f       	subi	r24, 0xFF	; 255
    2860:	89 83       	std	Y+1, r24	; 0x01
    2862:	99 81       	ldd	r25, Y+1	; 0x01
    2864:	8a 81       	ldd	r24, Y+2	; 0x02
    2866:	98 17       	cp	r25, r24
    2868:	70 f3       	brcs	.-36     	; 0x2846 <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    286a:	8f 81       	ldd	r24, Y+7	; 0x07
    286c:	68 85       	ldd	r22, Y+8	; 0x08
    286e:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2872:	8c 81       	ldd	r24, Y+4	; 0x04
    2874:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    2878:	5e c0       	rjmp	.+188    	; 0x2936 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    287a:	88 e6       	ldi	r24, 0x68	; 104
    287c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2880:	19 82       	std	Y+1, r1	; 0x01
    2882:	0e c0       	rjmp	.+28     	; 0x28a0 <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	fc 01       	movw	r30, r24
    2890:	e2 0f       	add	r30, r18
    2892:	f3 1f       	adc	r31, r19
    2894:	80 81       	ld	r24, Z
    2896:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	89 83       	std	Y+1, r24	; 0x01
    28a0:	99 81       	ldd	r25, Y+1	; 0x01
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	98 17       	cp	r25, r24
    28a6:	70 f3       	brcs	.-36     	; 0x2884 <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    28a8:	8f 81       	ldd	r24, Y+7	; 0x07
    28aa:	68 85       	ldd	r22, Y+8	; 0x08
    28ac:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    28b0:	8c 81       	ldd	r24, Y+4	; 0x04
    28b2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    28b6:	3f c0       	rjmp	.+126    	; 0x2936 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    28b8:	80 e7       	ldi	r24, 0x70	; 112
    28ba:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    28be:	19 82       	std	Y+1, r1	; 0x01
    28c0:	0e c0       	rjmp	.+28     	; 0x28de <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ca:	9e 81       	ldd	r25, Y+6	; 0x06
    28cc:	fc 01       	movw	r30, r24
    28ce:	e2 0f       	add	r30, r18
    28d0:	f3 1f       	adc	r31, r19
    28d2:	80 81       	ld	r24, Z
    28d4:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	89 83       	std	Y+1, r24	; 0x01
    28de:	99 81       	ldd	r25, Y+1	; 0x01
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	98 17       	cp	r25, r24
    28e4:	70 f3       	brcs	.-36     	; 0x28c2 <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    28e6:	8f 81       	ldd	r24, Y+7	; 0x07
    28e8:	68 85       	ldd	r22, Y+8	; 0x08
    28ea:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    28ee:	8c 81       	ldd	r24, Y+4	; 0x04
    28f0:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    28f4:	20 c0       	rjmp	.+64     	; 0x2936 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    28f6:	88 e7       	ldi	r24, 0x78	; 120
    28f8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    28fc:	19 82       	std	Y+1, r1	; 0x01
    28fe:	0e c0       	rjmp	.+28     	; 0x291c <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	28 2f       	mov	r18, r24
    2904:	30 e0       	ldi	r19, 0x00	; 0
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	fc 01       	movw	r30, r24
    290c:	e2 0f       	add	r30, r18
    290e:	f3 1f       	adc	r31, r19
    2910:	80 81       	ld	r24, Z
    2912:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	8f 5f       	subi	r24, 0xFF	; 255
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	99 81       	ldd	r25, Y+1	; 0x01
    291e:	8a 81       	ldd	r24, Y+2	; 0x02
    2920:	98 17       	cp	r25, r24
    2922:	70 f3       	brcs	.-36     	; 0x2900 <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2924:	8f 81       	ldd	r24, Y+7	; 0x07
    2926:	68 85       	ldd	r22, Y+8	; 0x08
    2928:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    292c:	8c 81       	ldd	r24, Y+4	; 0x04
    292e:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    2934:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    2936:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2938:	2a 96       	adiw	r28, 0x0a	; 10
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	cf 91       	pop	r28
    2946:	df 91       	pop	r29
    2948:	08 95       	ret

0000294a <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    294a:	df 93       	push	r29
    294c:	cf 93       	push	r28
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	e1 97       	sbiw	r28, 0x31	; 49
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	60 e0       	ldi	r22, 0x00	; 0
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	61 e0       	ldi	r22, 0x01	; 1
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    2974:	89 a9       	ldd	r24, Y+49	; 0x31
    2976:	98 2f       	mov	r25, r24
    2978:	92 95       	swap	r25
    297a:	90 7f       	andi	r25, 0xF0	; 240
    297c:	83 e0       	ldi	r24, 0x03	; 3
    297e:	69 2f       	mov	r22, r25
    2980:	0e 94 2a 0a 	call	0x1454	; 0x1454 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2984:	80 e0       	ldi	r24, 0x00	; 0
    2986:	62 e0       	ldi	r22, 0x02	; 2
    2988:	41 e0       	ldi	r20, 0x01	; 1
    298a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	a0 e8       	ldi	r26, 0x80	; 128
    2994:	bf e3       	ldi	r27, 0x3F	; 63
    2996:	8d a7       	std	Y+45, r24	; 0x2d
    2998:	9e a7       	std	Y+46, r25	; 0x2e
    299a:	af a7       	std	Y+47, r26	; 0x2f
    299c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    299e:	6d a5       	ldd	r22, Y+45	; 0x2d
    29a0:	7e a5       	ldd	r23, Y+46	; 0x2e
    29a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a4:	98 a9       	ldd	r25, Y+48	; 0x30
    29a6:	2b ea       	ldi	r18, 0xAB	; 171
    29a8:	3a ea       	ldi	r19, 0xAA	; 170
    29aa:	4a e2       	ldi	r20, 0x2A	; 42
    29ac:	50 e4       	ldi	r21, 0x40	; 64
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	89 a7       	std	Y+41, r24	; 0x29
    29b8:	9a a7       	std	Y+42, r25	; 0x2a
    29ba:	ab a7       	std	Y+43, r26	; 0x2b
    29bc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    29be:	69 a5       	ldd	r22, Y+41	; 0x29
    29c0:	7a a5       	ldd	r23, Y+42	; 0x2a
    29c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    29c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e8       	ldi	r20, 0x80	; 128
    29cc:	5f e3       	ldi	r21, 0x3F	; 63
    29ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d2:	88 23       	and	r24, r24
    29d4:	1c f4       	brge	.+6      	; 0x29dc <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	88 a7       	std	Y+40, r24	; 0x28
    29da:	91 c0       	rjmp	.+290    	; 0x2afe <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    29dc:	69 a5       	ldd	r22, Y+41	; 0x29
    29de:	7a a5       	ldd	r23, Y+42	; 0x2a
    29e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    29e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	53 e4       	ldi	r21, 0x43	; 67
    29ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	0c f0       	brlt	.+2      	; 0x29f6 <LCD_voidSendHalfCmnd+0xac>
    29f4:	7b c0       	rjmp	.+246    	; 0x2aec <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    29f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    29f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    29fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    29fc:	98 a9       	ldd	r25, Y+48	; 0x30
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	4a e7       	ldi	r20, 0x7A	; 122
    2a04:	54 e4       	ldi	r21, 0x44	; 68
    2a06:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	8c a3       	std	Y+36, r24	; 0x24
    2a10:	9d a3       	std	Y+37, r25	; 0x25
    2a12:	ae a3       	std	Y+38, r26	; 0x26
    2a14:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a16:	6c a1       	ldd	r22, Y+36	; 0x24
    2a18:	7d a1       	ldd	r23, Y+37	; 0x25
    2a1a:	8e a1       	ldd	r24, Y+38	; 0x26
    2a1c:	9f a1       	ldd	r25, Y+39	; 0x27
    2a1e:	20 e0       	ldi	r18, 0x00	; 0
    2a20:	30 e0       	ldi	r19, 0x00	; 0
    2a22:	4a ef       	ldi	r20, 0xFA	; 250
    2a24:	54 e4       	ldi	r21, 0x44	; 68
    2a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2a:	dc 01       	movw	r26, r24
    2a2c:	cb 01       	movw	r24, r22
    2a2e:	88 a3       	std	Y+32, r24	; 0x20
    2a30:	99 a3       	std	Y+33, r25	; 0x21
    2a32:	aa a3       	std	Y+34, r26	; 0x22
    2a34:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a36:	68 a1       	ldd	r22, Y+32	; 0x20
    2a38:	79 a1       	ldd	r23, Y+33	; 0x21
    2a3a:	8a a1       	ldd	r24, Y+34	; 0x22
    2a3c:	9b a1       	ldd	r25, Y+35	; 0x23
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	40 e8       	ldi	r20, 0x80	; 128
    2a44:	5f e3       	ldi	r21, 0x3F	; 63
    2a46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a4a:	88 23       	and	r24, r24
    2a4c:	2c f4       	brge	.+10     	; 0x2a58 <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	9f 8f       	std	Y+31, r25	; 0x1f
    2a54:	8e 8f       	std	Y+30, r24	; 0x1e
    2a56:	3f c0       	rjmp	.+126    	; 0x2ad6 <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    2a58:	68 a1       	ldd	r22, Y+32	; 0x20
    2a5a:	79 a1       	ldd	r23, Y+33	; 0x21
    2a5c:	8a a1       	ldd	r24, Y+34	; 0x22
    2a5e:	9b a1       	ldd	r25, Y+35	; 0x23
    2a60:	20 e0       	ldi	r18, 0x00	; 0
    2a62:	3f ef       	ldi	r19, 0xFF	; 255
    2a64:	4f e7       	ldi	r20, 0x7F	; 127
    2a66:	57 e4       	ldi	r21, 0x47	; 71
    2a68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a6c:	18 16       	cp	r1, r24
    2a6e:	4c f5       	brge	.+82     	; 0x2ac2 <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a70:	6c a1       	ldd	r22, Y+36	; 0x24
    2a72:	7d a1       	ldd	r23, Y+37	; 0x25
    2a74:	8e a1       	ldd	r24, Y+38	; 0x26
    2a76:	9f a1       	ldd	r25, Y+39	; 0x27
    2a78:	20 e0       	ldi	r18, 0x00	; 0
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	40 e2       	ldi	r20, 0x20	; 32
    2a7e:	51 e4       	ldi	r21, 0x41	; 65
    2a80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a84:	dc 01       	movw	r26, r24
    2a86:	cb 01       	movw	r24, r22
    2a88:	bc 01       	movw	r22, r24
    2a8a:	cd 01       	movw	r24, r26
    2a8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a90:	dc 01       	movw	r26, r24
    2a92:	cb 01       	movw	r24, r22
    2a94:	9f 8f       	std	Y+31, r25	; 0x1f
    2a96:	8e 8f       	std	Y+30, r24	; 0x1e
    2a98:	0f c0       	rjmp	.+30     	; 0x2ab8 <LCD_voidSendHalfCmnd+0x16e>
    2a9a:	88 ec       	ldi	r24, 0xC8	; 200
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	9d 8f       	std	Y+29, r25	; 0x1d
    2aa0:	8c 8f       	std	Y+28, r24	; 0x1c
    2aa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2aa4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <LCD_voidSendHalfCmnd+0x15c>
    2aaa:	9d 8f       	std	Y+29, r25	; 0x1d
    2aac:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ab0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	9f 8f       	std	Y+31, r25	; 0x1f
    2ab6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aba:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2abc:	00 97       	sbiw	r24, 0x00	; 0
    2abe:	69 f7       	brne	.-38     	; 0x2a9a <LCD_voidSendHalfCmnd+0x150>
    2ac0:	24 c0       	rjmp	.+72     	; 0x2b0a <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac2:	68 a1       	ldd	r22, Y+32	; 0x20
    2ac4:	79 a1       	ldd	r23, Y+33	; 0x21
    2ac6:	8a a1       	ldd	r24, Y+34	; 0x22
    2ac8:	9b a1       	ldd	r25, Y+35	; 0x23
    2aca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	9f 8f       	std	Y+31, r25	; 0x1f
    2ad4:	8e 8f       	std	Y+30, r24	; 0x1e
    2ad6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2ad8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2ada:	9b 8f       	std	Y+27, r25	; 0x1b
    2adc:	8a 8f       	std	Y+26, r24	; 0x1a
    2ade:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2ae0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2ae2:	01 97       	sbiw	r24, 0x01	; 1
    2ae4:	f1 f7       	brne	.-4      	; 0x2ae2 <LCD_voidSendHalfCmnd+0x198>
    2ae6:	9b 8f       	std	Y+27, r25	; 0x1b
    2ae8:	8a 8f       	std	Y+26, r24	; 0x1a
    2aea:	0f c0       	rjmp	.+30     	; 0x2b0a <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2aec:	69 a5       	ldd	r22, Y+41	; 0x29
    2aee:	7a a5       	ldd	r23, Y+42	; 0x2a
    2af0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	88 a7       	std	Y+40, r24	; 0x28
    2afe:	88 a5       	ldd	r24, Y+40	; 0x28
    2b00:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2b02:	89 8d       	ldd	r24, Y+25	; 0x19
    2b04:	8a 95       	dec	r24
    2b06:	f1 f7       	brne	.-4      	; 0x2b04 <LCD_voidSendHalfCmnd+0x1ba>
    2b08:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	62 e0       	ldi	r22, 0x02	; 2
    2b0e:	40 e0       	ldi	r20, 0x00	; 0
    2b10:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2b14:	80 e0       	ldi	r24, 0x00	; 0
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	a0 e8       	ldi	r26, 0x80	; 128
    2b1a:	bf e3       	ldi	r27, 0x3F	; 63
    2b1c:	8d 8b       	std	Y+21, r24	; 0x15
    2b1e:	9e 8b       	std	Y+22, r25	; 0x16
    2b20:	af 8b       	std	Y+23, r26	; 0x17
    2b22:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b24:	6d 89       	ldd	r22, Y+21	; 0x15
    2b26:	7e 89       	ldd	r23, Y+22	; 0x16
    2b28:	8f 89       	ldd	r24, Y+23	; 0x17
    2b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b2c:	2b ea       	ldi	r18, 0xAB	; 171
    2b2e:	3a ea       	ldi	r19, 0xAA	; 170
    2b30:	4a e2       	ldi	r20, 0x2A	; 42
    2b32:	50 e4       	ldi	r21, 0x40	; 64
    2b34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b38:	dc 01       	movw	r26, r24
    2b3a:	cb 01       	movw	r24, r22
    2b3c:	89 8b       	std	Y+17, r24	; 0x11
    2b3e:	9a 8b       	std	Y+18, r25	; 0x12
    2b40:	ab 8b       	std	Y+19, r26	; 0x13
    2b42:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b44:	69 89       	ldd	r22, Y+17	; 0x11
    2b46:	7a 89       	ldd	r23, Y+18	; 0x12
    2b48:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	40 e8       	ldi	r20, 0x80	; 128
    2b52:	5f e3       	ldi	r21, 0x3F	; 63
    2b54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b58:	88 23       	and	r24, r24
    2b5a:	1c f4       	brge	.+6      	; 0x2b62 <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	88 8b       	std	Y+16, r24	; 0x10
    2b60:	91 c0       	rjmp	.+290    	; 0x2c84 <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    2b62:	69 89       	ldd	r22, Y+17	; 0x11
    2b64:	7a 89       	ldd	r23, Y+18	; 0x12
    2b66:	8b 89       	ldd	r24, Y+19	; 0x13
    2b68:	9c 89       	ldd	r25, Y+20	; 0x14
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	4f e7       	ldi	r20, 0x7F	; 127
    2b70:	53 e4       	ldi	r21, 0x43	; 67
    2b72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b76:	18 16       	cp	r1, r24
    2b78:	0c f0       	brlt	.+2      	; 0x2b7c <LCD_voidSendHalfCmnd+0x232>
    2b7a:	7b c0       	rjmp	.+246    	; 0x2c72 <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    2b7c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b7e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b80:	8f 89       	ldd	r24, Y+23	; 0x17
    2b82:	98 8d       	ldd	r25, Y+24	; 0x18
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	4a e7       	ldi	r20, 0x7A	; 122
    2b8a:	54 e4       	ldi	r21, 0x44	; 68
    2b8c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	8c 87       	std	Y+12, r24	; 0x0c
    2b96:	9d 87       	std	Y+13, r25	; 0x0d
    2b98:	ae 87       	std	Y+14, r26	; 0x0e
    2b9a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ba0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4a ef       	ldi	r20, 0xFA	; 250
    2baa:	54 e4       	ldi	r21, 0x44	; 68
    2bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	88 87       	std	Y+8, r24	; 0x08
    2bb6:	99 87       	std	Y+9, r25	; 0x09
    2bb8:	aa 87       	std	Y+10, r26	; 0x0a
    2bba:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2bbc:	68 85       	ldd	r22, Y+8	; 0x08
    2bbe:	79 85       	ldd	r23, Y+9	; 0x09
    2bc0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bc2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e8       	ldi	r20, 0x80	; 128
    2bca:	5f e3       	ldi	r21, 0x3F	; 63
    2bcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bd0:	88 23       	and	r24, r24
    2bd2:	2c f4       	brge	.+10     	; 0x2bde <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9f 83       	std	Y+7, r25	; 0x07
    2bda:	8e 83       	std	Y+6, r24	; 0x06
    2bdc:	3f c0       	rjmp	.+126    	; 0x2c5c <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    2bde:	68 85       	ldd	r22, Y+8	; 0x08
    2be0:	79 85       	ldd	r23, Y+9	; 0x09
    2be2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2be4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	3f ef       	ldi	r19, 0xFF	; 255
    2bea:	4f e7       	ldi	r20, 0x7F	; 127
    2bec:	57 e4       	ldi	r21, 0x47	; 71
    2bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bf2:	18 16       	cp	r1, r24
    2bf4:	4c f5       	brge	.+82     	; 0x2c48 <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bf8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bfa:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bfc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e2       	ldi	r20, 0x20	; 32
    2c04:	51 e4       	ldi	r21, 0x41	; 65
    2c06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	bc 01       	movw	r22, r24
    2c10:	cd 01       	movw	r24, r26
    2c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9f 83       	std	Y+7, r25	; 0x07
    2c1c:	8e 83       	std	Y+6, r24	; 0x06
    2c1e:	0f c0       	rjmp	.+30     	; 0x2c3e <LCD_voidSendHalfCmnd+0x2f4>
    2c20:	88 ec       	ldi	r24, 0xC8	; 200
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9d 83       	std	Y+5, r25	; 0x05
    2c26:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c28:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <LCD_voidSendHalfCmnd+0x2e2>
    2c30:	9d 83       	std	Y+5, r25	; 0x05
    2c32:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c34:	8e 81       	ldd	r24, Y+6	; 0x06
    2c36:	9f 81       	ldd	r25, Y+7	; 0x07
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	9f 83       	std	Y+7, r25	; 0x07
    2c3c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c40:	9f 81       	ldd	r25, Y+7	; 0x07
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	69 f7       	brne	.-38     	; 0x2c20 <LCD_voidSendHalfCmnd+0x2d6>
    2c46:	24 c0       	rjmp	.+72     	; 0x2c90 <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c48:	68 85       	ldd	r22, Y+8	; 0x08
    2c4a:	79 85       	ldd	r23, Y+9	; 0x09
    2c4c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	9f 83       	std	Y+7, r25	; 0x07
    2c5a:	8e 83       	std	Y+6, r24	; 0x06
    2c5c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c5e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c60:	9b 83       	std	Y+3, r25	; 0x03
    2c62:	8a 83       	std	Y+2, r24	; 0x02
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <LCD_voidSendHalfCmnd+0x31e>
    2c6c:	9b 83       	std	Y+3, r25	; 0x03
    2c6e:	8a 83       	std	Y+2, r24	; 0x02
    2c70:	0f c0       	rjmp	.+30     	; 0x2c90 <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c72:	69 89       	ldd	r22, Y+17	; 0x11
    2c74:	7a 89       	ldd	r23, Y+18	; 0x12
    2c76:	8b 89       	ldd	r24, Y+19	; 0x13
    2c78:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	88 8b       	std	Y+16, r24	; 0x10
    2c84:	88 89       	ldd	r24, Y+16	; 0x10
    2c86:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c88:	89 81       	ldd	r24, Y+1	; 0x01
    2c8a:	8a 95       	dec	r24
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <LCD_voidSendHalfCmnd+0x340>
    2c8e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
}
    2c90:	e1 96       	adiw	r28, 0x31	; 49
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
    2c9c:	cf 91       	pop	r28
    2c9e:	df 91       	pop	r29
    2ca0:	08 95       	ret

00002ca2 <LCD_voidWriteNumberTwoDigits>:


/* New Special Function */
void LCD_voidWriteNumberTwoDigits(u32 Copy_u32Number)
{
    2ca2:	0f 93       	push	r16
    2ca4:	1f 93       	push	r17
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	cd b7       	in	r28, 0x3d	; 61
    2cac:	de b7       	in	r29, 0x3e	; 62
    2cae:	65 97       	sbiw	r28, 0x15	; 21
    2cb0:	0f b6       	in	r0, 0x3f	; 63
    2cb2:	f8 94       	cli
    2cb4:	de bf       	out	0x3e, r29	; 62
    2cb6:	0f be       	out	0x3f, r0	; 63
    2cb8:	cd bf       	out	0x3d, r28	; 61
    2cba:	6a 8b       	std	Y+18, r22	; 0x12
    2cbc:	7b 8b       	std	Y+19, r23	; 0x13
    2cbe:	8c 8b       	std	Y+20, r24	; 0x14
    2cc0:	9d 8b       	std	Y+21, r25	; 0x15
    // Temporary array to store digits of the number
    u8 digits[15];
    // Index to keep track of the current digit position
    s8 index = -1; // Start from -1 to accommodate numbers with zero
    2cc2:	8f ef       	ldi	r24, 0xFF	; 255
    2cc4:	8a 83       	std	Y+2, r24	; 0x02
    s8 i;
    // Special case for handling zero separately
    if (Copy_u32Number == 0)
    2cc6:	8a 89       	ldd	r24, Y+18	; 0x12
    2cc8:	9b 89       	ldd	r25, Y+19	; 0x13
    2cca:	ac 89       	ldd	r26, Y+20	; 0x14
    2ccc:	bd 89       	ldd	r27, Y+21	; 0x15
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	a1 05       	cpc	r26, r1
    2cd2:	b1 05       	cpc	r27, r1
    2cd4:	b1 f5       	brne	.+108    	; 0x2d42 <LCD_voidWriteNumberTwoDigits+0xa0>
    {
        // Display "00" for zero
        LCD_voidSendChar('0');
    2cd6:	80 e3       	ldi	r24, 0x30	; 48
    2cd8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
        LCD_voidSendChar('0');
    2cdc:	80 e3       	ldi	r24, 0x30	; 48
    2cde:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    2ce2:	54 c0       	rjmp	.+168    	; 0x2d8c <LCD_voidWriteNumberTwoDigits+0xea>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
        index++;
    2ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce6:	8f 5f       	subi	r24, 0xFF	; 255
    2ce8:	8a 83       	std	Y+2, r24	; 0x02
        digits[index] = Copy_u32Number % 10; // Extract the last digit
    2cea:	8a 81       	ldd	r24, Y+2	; 0x02
    2cec:	08 2f       	mov	r16, r24
    2cee:	11 27       	eor	r17, r17
    2cf0:	07 fd       	sbrc	r16, 7
    2cf2:	10 95       	com	r17
    2cf4:	8a 89       	ldd	r24, Y+18	; 0x12
    2cf6:	9b 89       	ldd	r25, Y+19	; 0x13
    2cf8:	ac 89       	ldd	r26, Y+20	; 0x14
    2cfa:	bd 89       	ldd	r27, Y+21	; 0x15
    2cfc:	2a e0       	ldi	r18, 0x0A	; 10
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e0       	ldi	r20, 0x00	; 0
    2d02:	50 e0       	ldi	r21, 0x00	; 0
    2d04:	bc 01       	movw	r22, r24
    2d06:	cd 01       	movw	r24, r26
    2d08:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodsi4>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	28 2f       	mov	r18, r24
    2d12:	ce 01       	movw	r24, r28
    2d14:	03 96       	adiw	r24, 0x03	; 3
    2d16:	fc 01       	movw	r30, r24
    2d18:	e0 0f       	add	r30, r16
    2d1a:	f1 1f       	adc	r31, r17
    2d1c:	20 83       	st	Z, r18
        Copy_u32Number /= 10; // Move to the next digit
    2d1e:	8a 89       	ldd	r24, Y+18	; 0x12
    2d20:	9b 89       	ldd	r25, Y+19	; 0x13
    2d22:	ac 89       	ldd	r26, Y+20	; 0x14
    2d24:	bd 89       	ldd	r27, Y+21	; 0x15
    2d26:	2a e0       	ldi	r18, 0x0A	; 10
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e0       	ldi	r20, 0x00	; 0
    2d2c:	50 e0       	ldi	r21, 0x00	; 0
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 b5 19 	call	0x336a	; 0x336a <__udivmodsi4>
    2d36:	da 01       	movw	r26, r20
    2d38:	c9 01       	movw	r24, r18
    2d3a:	8a 8b       	std	Y+18, r24	; 0x12
    2d3c:	9b 8b       	std	Y+19, r25	; 0x13
    2d3e:	ac 8b       	std	Y+20, r26	; 0x14
    2d40:	bd 8b       	std	Y+21, r27	; 0x15
        LCD_voidSendChar('0');
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    2d42:	8a 89       	ldd	r24, Y+18	; 0x12
    2d44:	9b 89       	ldd	r25, Y+19	; 0x13
    2d46:	ac 89       	ldd	r26, Y+20	; 0x14
    2d48:	bd 89       	ldd	r27, Y+21	; 0x15
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	a1 05       	cpc	r26, r1
    2d4e:	b1 05       	cpc	r27, r1
    2d50:	49 f6       	brne	.-110    	; 0x2ce4 <LCD_voidWriteNumberTwoDigits+0x42>
        digits[index] = Copy_u32Number % 10; // Extract the last digit
        Copy_u32Number /= 10; // Move to the next digit
    }

    // If number has less than two digits, add leading zeros
    if (index < 1) {
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	18 16       	cp	r1, r24
    2d56:	1c f0       	brlt	.+6      	; 0x2d5e <LCD_voidWriteNumberTwoDigits+0xbc>
        LCD_voidSendChar('0');
    2d58:	80 e3       	ldi	r24, 0x30	; 48
    2d5a:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    }
    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	89 83       	std	Y+1, r24	; 0x01
    2d62:	11 c0       	rjmp	.+34     	; 0x2d86 <LCD_voidWriteNumberTwoDigits+0xe4>
    {
        // Convert digit to character and send to LCD
        LCD_voidSendChar(digits[i] + '0');
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	28 2f       	mov	r18, r24
    2d68:	33 27       	eor	r19, r19
    2d6a:	27 fd       	sbrc	r18, 7
    2d6c:	30 95       	com	r19
    2d6e:	ce 01       	movw	r24, r28
    2d70:	03 96       	adiw	r24, 0x03	; 3
    2d72:	fc 01       	movw	r30, r24
    2d74:	e2 0f       	add	r30, r18
    2d76:	f3 1f       	adc	r31, r19
    2d78:	80 81       	ld	r24, Z
    2d7a:	80 5d       	subi	r24, 0xD0	; 208
    2d7c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
    // If number has less than two digits, add leading zeros
    if (index < 1) {
        LCD_voidSendChar('0');
    }
    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	81 50       	subi	r24, 0x01	; 1
    2d84:	89 83       	std	Y+1, r24	; 0x01
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	88 23       	and	r24, r24
    2d8a:	64 f7       	brge	.-40     	; 0x2d64 <LCD_voidWriteNumberTwoDigits+0xc2>
    {
        // Convert digit to character and send to LCD
        LCD_voidSendChar(digits[i] + '0');
    }
}
    2d8c:	65 96       	adiw	r28, 0x15	; 21
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	cf 91       	pop	r28
    2d9a:	df 91       	pop	r29
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	08 95       	ret

00002da2 <TIMERS_voidTimer0Init>:
static void (*TIMERS_pfTimer0OVF)(void) = NULL;
static void (*TIMERS_pfTimer0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void)
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Normal Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Select Mode => CTC Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
    2daa:	a3 e5       	ldi	r26, 0x53	; 83
    2dac:	b0 e0       	ldi	r27, 0x00	; 0
    2dae:	e3 e5       	ldi	r30, 0x53	; 83
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	80 81       	ld	r24, Z
    2db4:	8f 7b       	andi	r24, 0xBF	; 191
    2db6:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    2db8:	a3 e5       	ldi	r26, 0x53	; 83
    2dba:	b0 e0       	ldi	r27, 0x00	; 0
    2dbc:	e3 e5       	ldi	r30, 0x53	; 83
    2dbe:	f0 e0       	ldi	r31, 0x00	; 0
    2dc0:	80 81       	ld	r24, Z
    2dc2:	88 60       	ori	r24, 0x08	; 8
    2dc4:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,0);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Enable CTC Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,1);
    2dc6:	a9 e5       	ldi	r26, 0x59	; 89
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e9 e5       	ldi	r30, 0x59	; 89
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	82 60       	ori	r24, 0x02	; 2
    2dd2:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Set Preload Value */
	TIMERS_u8_TCNT0_REG = TIMER0_u8_TIMER0_PRELOAD_VALUE;
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMER0_u8_TIMER0_COMPARE_MATCH_OCR0;
    2dd4:	ec e5       	ldi	r30, 0x5C	; 92
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	83 e6       	ldi	r24, 0x63	; 99
    2dda:	80 83       	st	Z, r24
#endif

#if TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR0_REG,5);
    2ddc:	a3 e5       	ldi	r26, 0x53	; 83
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e3 e5       	ldi	r30, 0x53	; 83
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	8f 7d       	andi	r24, 0xDF	; 223
    2de8:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
    2dea:	a3 e5       	ldi	r26, 0x53	; 83
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	e3 e5       	ldi	r30, 0x53	; 83
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	8f 7e       	andi	r24, 0xEF	; 239
    2df6:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#elif TIMERS_u8_TIMER0_CLOCK_SOURCE == TIMERS_u8_TIMER0_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    2df8:	a3 e5       	ldi	r26, 0x53	; 83
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e3 e5       	ldi	r30, 0x53	; 83
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	8b 7f       	andi	r24, 0xFB	; 251
    2e04:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
    2e06:	a3 e5       	ldi	r26, 0x53	; 83
    2e08:	b0 e0       	ldi	r27, 0x00	; 0
    2e0a:	e3 e5       	ldi	r30, 0x53	; 83
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	82 60       	ori	r24, 0x02	; 2
    2e12:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
    2e14:	a3 e5       	ldi	r26, 0x53	; 83
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e3 e5       	ldi	r30, 0x53	; 83
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	8e 7f       	andi	r24, 0xFE	; 254
    2e20:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,2);
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#endif

}
    2e22:	cf 91       	pop	r28
    2e24:	df 91       	pop	r29
    2e26:	08 95       	ret

00002e28 <TIMERS_u8GetTCNT0Value>:

u8 TIMERS_u8GetTCNT0Value(u8 * Copy_pu8Value)
{
    2e28:	df 93       	push	r29
    2e2a:	cf 93       	push	r28
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <TIMERS_u8GetTCNT0Value+0x6>
    2e2e:	0f 92       	push	r0
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	9b 83       	std	Y+3, r25	; 0x03
    2e36:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2e38:	81 e0       	ldi	r24, 0x01	; 1
    2e3a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL)
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	39 f0       	breq	.+14     	; 0x2e52 <TIMERS_u8GetTCNT0Value+0x2a>
	{
		*Copy_pu8Value = TIMERS_u8_TCNT0_REG;
    2e44:	e2 e5       	ldi	r30, 0x52	; 82
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	80 81       	ld	r24, Z
    2e4a:	ea 81       	ldd	r30, Y+2	; 0x02
    2e4c:	fb 81       	ldd	r31, Y+3	; 0x03
    2e4e:	80 83       	st	Z, r24
    2e50:	01 c0       	rjmp	.+2      	; 0x2e54 <TIMERS_u8GetTCNT0Value+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e52:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2e54:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e56:	0f 90       	pop	r0
    2e58:	0f 90       	pop	r0
    2e5a:	0f 90       	pop	r0
    2e5c:	cf 91       	pop	r28
    2e5e:	df 91       	pop	r29
    2e60:	08 95       	ret

00002e62 <TIMERS_u8Timer0SetCallBack>:
u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <TIMERS_u8Timer0SetCallBack+0x6>
    2e68:	0f 92       	push	r0
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	9b 83       	std	Y+3, r25	; 0x03
    2e70:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7a:	00 97       	sbiw	r24, 0x00	; 0
    2e7c:	39 f0       	breq	.+14     	; 0x2e8c <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	9b 81       	ldd	r25, Y+3	; 0x03
    2e82:	90 93 a9 00 	sts	0x00A9, r25
    2e86:	80 93 a8 00 	sts	0x00A8, r24
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e8c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2e8e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e90:	0f 90       	pop	r0
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
    2e96:	cf 91       	pop	r28
    2e98:	df 91       	pop	r29
    2e9a:	08 95       	ret

00002e9c <TIMERS_u8Timer0CTCSetCallBack>:

u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    2e9c:	df 93       	push	r29
    2e9e:	cf 93       	push	r28
    2ea0:	00 d0       	rcall	.+0      	; 0x2ea2 <TIMERS_u8Timer0CTCSetCallBack+0x6>
    2ea2:	0f 92       	push	r0
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	9b 83       	std	Y+3, r25	; 0x03
    2eaa:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2eac:	81 e0       	ldi	r24, 0x01	; 1
    2eae:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb4:	00 97       	sbiw	r24, 0x00	; 0
    2eb6:	39 f0       	breq	.+14     	; 0x2ec6 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	9b 81       	ldd	r25, Y+3	; 0x03
    2ebc:	90 93 ab 00 	sts	0x00AB, r25
    2ec0:	80 93 aa 00 	sts	0x00AA, r24
    2ec4:	01 c0       	rjmp	.+2      	; 0x2ec8 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2ec6:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    2ec8:	89 81       	ldd	r24, Y+1	; 0x01
}
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	cf 91       	pop	r28
    2ed2:	df 91       	pop	r29
    2ed4:	08 95       	ret

00002ed6 <__vector_11>:
/* Prototype for ISR TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    2ed6:	1f 92       	push	r1
    2ed8:	0f 92       	push	r0
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	0f 92       	push	r0
    2ede:	11 24       	eor	r1, r1
    2ee0:	2f 93       	push	r18
    2ee2:	3f 93       	push	r19
    2ee4:	4f 93       	push	r20
    2ee6:	5f 93       	push	r21
    2ee8:	6f 93       	push	r22
    2eea:	7f 93       	push	r23
    2eec:	8f 93       	push	r24
    2eee:	9f 93       	push	r25
    2ef0:	af 93       	push	r26
    2ef2:	bf 93       	push	r27
    2ef4:	ef 93       	push	r30
    2ef6:	ff 93       	push	r31
    2ef8:	df 93       	push	r29
    2efa:	cf 93       	push	r28
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    2f00:	80 91 ac 00 	lds	r24, 0x00AC
    2f04:	90 91 ad 00 	lds	r25, 0x00AD
    2f08:	01 96       	adiw	r24, 0x01	; 1
    2f0a:	90 93 ad 00 	sts	0x00AD, r25
    2f0e:	80 93 ac 00 	sts	0x00AC, r24
	if(Local_u16CounterOVF == 3907)
    2f12:	80 91 ac 00 	lds	r24, 0x00AC
    2f16:	90 91 ad 00 	lds	r25, 0x00AD
    2f1a:	2f e0       	ldi	r18, 0x0F	; 15
    2f1c:	83 34       	cpi	r24, 0x43	; 67
    2f1e:	92 07       	cpc	r25, r18
    2f20:	99 f4       	brne	.+38     	; 0x2f48 <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    2f22:	e2 e5       	ldi	r30, 0x52	; 82
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 ec       	ldi	r24, 0xC0	; 192
    2f28:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    2f2a:	10 92 ad 00 	sts	0x00AD, r1
    2f2e:	10 92 ac 00 	sts	0x00AC, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
    2f32:	80 91 a8 00 	lds	r24, 0x00A8
    2f36:	90 91 a9 00 	lds	r25, 0x00A9
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	29 f0       	breq	.+10     	; 0x2f48 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    2f3e:	e0 91 a8 00 	lds	r30, 0x00A8
    2f42:	f0 91 a9 00 	lds	r31, 0x00A9
    2f46:	09 95       	icall
		}
	}
}
    2f48:	cf 91       	pop	r28
    2f4a:	df 91       	pop	r29
    2f4c:	ff 91       	pop	r31
    2f4e:	ef 91       	pop	r30
    2f50:	bf 91       	pop	r27
    2f52:	af 91       	pop	r26
    2f54:	9f 91       	pop	r25
    2f56:	8f 91       	pop	r24
    2f58:	7f 91       	pop	r23
    2f5a:	6f 91       	pop	r22
    2f5c:	5f 91       	pop	r21
    2f5e:	4f 91       	pop	r20
    2f60:	3f 91       	pop	r19
    2f62:	2f 91       	pop	r18
    2f64:	0f 90       	pop	r0
    2f66:	0f be       	out	0x3f, r0	; 63
    2f68:	0f 90       	pop	r0
    2f6a:	1f 90       	pop	r1
    2f6c:	18 95       	reti

00002f6e <__vector_10>:

/* Prototype for ISR TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    2f6e:	1f 92       	push	r1
    2f70:	0f 92       	push	r0
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	0f 92       	push	r0
    2f76:	11 24       	eor	r1, r1
    2f78:	2f 93       	push	r18
    2f7a:	3f 93       	push	r19
    2f7c:	4f 93       	push	r20
    2f7e:	5f 93       	push	r21
    2f80:	6f 93       	push	r22
    2f82:	7f 93       	push	r23
    2f84:	8f 93       	push	r24
    2f86:	9f 93       	push	r25
    2f88:	af 93       	push	r26
    2f8a:	bf 93       	push	r27
    2f8c:	ef 93       	push	r30
    2f8e:	ff 93       	push	r31
    2f90:	df 93       	push	r29
    2f92:	cf 93       	push	r28
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    2f98:	80 91 ae 00 	lds	r24, 0x00AE
    2f9c:	90 91 af 00 	lds	r25, 0x00AF
    2fa0:	01 96       	adiw	r24, 0x01	; 1
    2fa2:	90 93 af 00 	sts	0x00AF, r25
    2fa6:	80 93 ae 00 	sts	0x00AE, r24
	if(Local_u16CounterCTC == 10000)
    2faa:	80 91 ae 00 	lds	r24, 0x00AE
    2fae:	90 91 af 00 	lds	r25, 0x00AF
    2fb2:	27 e2       	ldi	r18, 0x27	; 39
    2fb4:	80 31       	cpi	r24, 0x10	; 16
    2fb6:	92 07       	cpc	r25, r18
    2fb8:	79 f4       	brne	.+30     	; 0x2fd8 <__vector_10+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    2fba:	10 92 af 00 	sts	0x00AF, r1
    2fbe:	10 92 ae 00 	sts	0x00AE, r1
		/* Call App Function */
		if(TIMERS_pfTimer0CTC != NULL)
    2fc2:	80 91 aa 00 	lds	r24, 0x00AA
    2fc6:	90 91 ab 00 	lds	r25, 0x00AB
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	29 f0       	breq	.+10     	; 0x2fd8 <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
    2fce:	e0 91 aa 00 	lds	r30, 0x00AA
    2fd2:	f0 91 ab 00 	lds	r31, 0x00AB
    2fd6:	09 95       	icall
		}
	}
}
    2fd8:	cf 91       	pop	r28
    2fda:	df 91       	pop	r29
    2fdc:	ff 91       	pop	r31
    2fde:	ef 91       	pop	r30
    2fe0:	bf 91       	pop	r27
    2fe2:	af 91       	pop	r26
    2fe4:	9f 91       	pop	r25
    2fe6:	8f 91       	pop	r24
    2fe8:	7f 91       	pop	r23
    2fea:	6f 91       	pop	r22
    2fec:	5f 91       	pop	r21
    2fee:	4f 91       	pop	r20
    2ff0:	3f 91       	pop	r19
    2ff2:	2f 91       	pop	r18
    2ff4:	0f 90       	pop	r0
    2ff6:	0f be       	out	0x3f, r0	; 63
    2ff8:	0f 90       	pop	r0
    2ffa:	1f 90       	pop	r1
    2ffc:	18 95       	reti

00002ffe <main>:
void move_CursorLeft(void);
void Set_Number(u8 * Key);
void Check_Correct(void);
void LED_ON(void);
int main(void)
{
    2ffe:	df 93       	push	r29
    3000:	cf 93       	push	r28
    3002:	0f 92       	push	r0
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Key;
	DIO_voidInit();
    3008:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	GI_voidEnableGI();
    300c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <GI_voidEnableGI>
	LCD_voidInit();
    3010:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <LCD_voidInit>
	TIMERS_u8Timer0CTCSetCallBack(&Stop_Watch);
    3014:	8d e4       	ldi	r24, 0x4D	; 77
    3016:	98 e1       	ldi	r25, 0x18	; 24
    3018:	0e 94 4e 17 	call	0x2e9c	; 0x2e9c <TIMERS_u8Timer0CTCSetCallBack>
	LCD_voidWriteString((u8*)"--:--:--");
    301c:	80 e6       	ldi	r24, 0x60	; 96
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_voidWriteString>
	while(1)
	{
		KPD_u8GetKeyState(&Local_u8Key);
    3024:	ce 01       	movw	r24, r28
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <KPD_u8GetKeyState>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	8f 3f       	cpi	r24, 0xFF	; 255
    3030:	c9 f3       	breq	.-14     	; 0x3024 <main+0x26>
		{
			if(Local_u8Key >= '0'  && Local_u8Key <= '9')
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	80 33       	cpi	r24, 0x30	; 48
    3036:	58 f0       	brcs	.+22     	; 0x304e <main+0x50>
    3038:	89 81       	ldd	r24, Y+1	; 0x01
    303a:	8a 33       	cpi	r24, 0x3A	; 58
    303c:	40 f4       	brcc	.+16     	; 0x304e <main+0x50>
			{
				LCD_voidSendChar(Local_u8Key);
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	0e 94 60 10 	call	0x20c0	; 0x20c0 <LCD_voidSendChar>
				Set_Number(&Local_u8Key);
    3044:	ce 01       	movw	r24, r28
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <Set_Number>
    304c:	eb cf       	rjmp	.-42     	; 0x3024 <main+0x26>
			}
			else if( Local_u8Key == '+')
    304e:	89 81       	ldd	r24, Y+1	; 0x01
    3050:	8b 32       	cpi	r24, 0x2B	; 43
    3052:	39 f4       	brne	.+14     	; 0x3062 <main+0x64>
			{
				if (Cursor == 8)
    3054:	80 91 8e 00 	lds	r24, 0x008E
    3058:	88 30       	cpi	r24, 0x08	; 8
    305a:	21 f3       	breq	.-56     	; 0x3024 <main+0x26>
				{

				}
				else
				{
					move_CursorRight();
    305c:	0e 94 c0 18 	call	0x3180	; 0x3180 <move_CursorRight>
    3060:	e1 cf       	rjmp	.-62     	; 0x3024 <main+0x26>
				}
			}
			else if(Local_u8Key == '-')
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	8d 32       	cpi	r24, 0x2D	; 45
    3066:	39 f4       	brne	.+14     	; 0x3076 <main+0x78>
			{
				if (Cursor == 0)
    3068:	80 91 8e 00 	lds	r24, 0x008E
    306c:	88 23       	and	r24, r24
    306e:	d1 f2       	breq	.-76     	; 0x3024 <main+0x26>
				{

				}
				else
				{
					move_CursorLeft();
    3070:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <move_CursorLeft>
    3074:	d7 cf       	rjmp	.-82     	; 0x3024 <main+0x26>
				}
			}
			else if (Local_u8Key == '=')
    3076:	89 81       	ldd	r24, Y+1	; 0x01
    3078:	8d 33       	cpi	r24, 0x3D	; 61
    307a:	a1 f6       	brne	.-88     	; 0x3024 <main+0x26>
			{
				Cursor = 0;
    307c:	10 92 8e 00 	sts	0x008E, r1
				LCD_u8GoToXY(LCD_u8_LINE1,Cursor);
    3080:	90 91 8e 00 	lds	r25, 0x008E
    3084:	81 e0       	ldi	r24, 0x01	; 1
    3086:	69 2f       	mov	r22, r25
    3088:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
				Check_Correct();
    308c:	0e 94 8f 19 	call	0x331e	; 0x331e <Check_Correct>
				LCD_Display_Time();
    3090:	0e 94 7e 18 	call	0x30fc	; 0x30fc <LCD_Display_Time>
				TIMERS_voidTimer0Init();
    3094:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <TIMERS_voidTimer0Init>
    3098:	c5 cf       	rjmp	.-118    	; 0x3024 <main+0x26>

0000309a <Stop_Watch>:
	}
	return 0;
}

void Stop_Watch(void)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
	LCD_voidClearScreen();
    30a2:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_voidClearScreen>
	if (seconds > 0)
    30a6:	80 91 b2 00 	lds	r24, 0x00B2
    30aa:	88 23       	and	r24, r24
    30ac:	31 f0       	breq	.+12     	; 0x30ba <Stop_Watch+0x20>
	{
		seconds--;
    30ae:	80 91 b2 00 	lds	r24, 0x00B2
    30b2:	81 50       	subi	r24, 0x01	; 1
    30b4:	80 93 b2 00 	sts	0x00B2, r24
    30b8:	1c c0       	rjmp	.+56     	; 0x30f2 <Stop_Watch+0x58>
	}
	else
	{
		if (minutes > 0)
    30ba:	80 91 b1 00 	lds	r24, 0x00B1
    30be:	88 23       	and	r24, r24
    30c0:	49 f0       	breq	.+18     	; 0x30d4 <Stop_Watch+0x3a>
		{
			minutes--;
    30c2:	80 91 b1 00 	lds	r24, 0x00B1
    30c6:	81 50       	subi	r24, 0x01	; 1
    30c8:	80 93 b1 00 	sts	0x00B1, r24
			seconds = 59;
    30cc:	8b e3       	ldi	r24, 0x3B	; 59
    30ce:	80 93 b2 00 	sts	0x00B2, r24
    30d2:	0f c0       	rjmp	.+30     	; 0x30f2 <Stop_Watch+0x58>
		}
		else
		{
			if (hours > 0)
    30d4:	80 91 b0 00 	lds	r24, 0x00B0
    30d8:	88 23       	and	r24, r24
    30da:	59 f0       	breq	.+22     	; 0x30f2 <Stop_Watch+0x58>
			{
				hours--;
    30dc:	80 91 b0 00 	lds	r24, 0x00B0
    30e0:	81 50       	subi	r24, 0x01	; 1
    30e2:	80 93 b0 00 	sts	0x00B0, r24
				minutes = 59;
    30e6:	8b e3       	ldi	r24, 0x3B	; 59
    30e8:	80 93 b1 00 	sts	0x00B1, r24
				seconds = 59;
    30ec:	8b e3       	ldi	r24, 0x3B	; 59
    30ee:	80 93 b2 00 	sts	0x00B2, r24
			}
		}
	}
	LCD_Display_Time();
    30f2:	0e 94 7e 18 	call	0x30fc	; 0x30fc <LCD_Display_Time>
}
    30f6:	cf 91       	pop	r28
    30f8:	df 91       	pop	r29
    30fa:	08 95       	ret

000030fc <LCD_Display_Time>:

void LCD_Display_Time(void)
{
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	cd b7       	in	r28, 0x3d	; 61
    3102:	de b7       	in	r29, 0x3e	; 62
	LCD_voidWriteNumberTwoDigits((u32)hours);
    3104:	80 91 b0 00 	lds	r24, 0x00B0
    3108:	88 2f       	mov	r24, r24
    310a:	90 e0       	ldi	r25, 0x00	; 0
    310c:	a0 e0       	ldi	r26, 0x00	; 0
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	bc 01       	movw	r22, r24
    3112:	cd 01       	movw	r24, r26
    3114:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidWriteNumberTwoDigits>
	LCD_voidWriteString((u8*)":");
    3118:	89 e6       	ldi	r24, 0x69	; 105
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_voidWriteString>
	LCD_voidWriteNumberTwoDigits((u32)minutes);
    3120:	80 91 b1 00 	lds	r24, 0x00B1
    3124:	88 2f       	mov	r24, r24
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	a0 e0       	ldi	r26, 0x00	; 0
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	bc 01       	movw	r22, r24
    312e:	cd 01       	movw	r24, r26
    3130:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidWriteNumberTwoDigits>
	LCD_voidWriteString((u8*)":");
    3134:	89 e6       	ldi	r24, 0x69	; 105
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_voidWriteString>
	LCD_voidWriteNumberTwoDigits((u32)seconds);
    313c:	80 91 b2 00 	lds	r24, 0x00B2
    3140:	88 2f       	mov	r24, r24
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	a0 e0       	ldi	r26, 0x00	; 0
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	bc 01       	movw	r22, r24
    314a:	cd 01       	movw	r24, r26
    314c:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <LCD_voidWriteNumberTwoDigits>
	if(seconds == 0 && minutes == 0 && hours == 0 )
    3150:	80 91 b2 00 	lds	r24, 0x00B2
    3154:	88 23       	and	r24, r24
    3156:	89 f4       	brne	.+34     	; 0x317a <LCD_Display_Time+0x7e>
    3158:	80 91 b1 00 	lds	r24, 0x00B1
    315c:	88 23       	and	r24, r24
    315e:	69 f4       	brne	.+26     	; 0x317a <LCD_Display_Time+0x7e>
    3160:	80 91 b0 00 	lds	r24, 0x00B0
    3164:	88 23       	and	r24, r24
    3166:	49 f4       	brne	.+18     	; 0x317a <LCD_Display_Time+0x7e>
	{
		LCD_voidClearScreen();
    3168:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_voidClearScreen>
		LCD_voidWriteString((u8 *)"Finish!");
    316c:	8b e6       	ldi	r24, 0x6B	; 107
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_voidWriteString>
		while(1)
		{
			LED_ON();
    3174:	0e 94 a9 19 	call	0x3352	; 0x3352 <LED_ON>
    3178:	fd cf       	rjmp	.-6      	; 0x3174 <LCD_Display_Time+0x78>
		}
	}
}
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <move_CursorRight>:
void move_CursorRight(void)
{
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
	LCD_u8GoToXY(LCD_u8_LINE1,++Cursor);
    3188:	80 91 8e 00 	lds	r24, 0x008E
    318c:	8f 5f       	subi	r24, 0xFF	; 255
    318e:	80 93 8e 00 	sts	0x008E, r24
    3192:	90 91 8e 00 	lds	r25, 0x008E
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	69 2f       	mov	r22, r25
    319a:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
}
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <move_CursorLeft>:
void move_CursorLeft(void)
{
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	cd b7       	in	r28, 0x3d	; 61
    31aa:	de b7       	in	r29, 0x3e	; 62
	LCD_u8GoToXY(LCD_u8_LINE1,--Cursor);
    31ac:	80 91 8e 00 	lds	r24, 0x008E
    31b0:	81 50       	subi	r24, 0x01	; 1
    31b2:	80 93 8e 00 	sts	0x008E, r24
    31b6:	90 91 8e 00 	lds	r25, 0x008E
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	69 2f       	mov	r22, r25
    31be:	0e 94 9b 12 	call	0x2536	; 0x2536 <LCD_u8GoToXY>
}
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <Set_Number>:
void Set_Number(u8 * Key)
{
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	00 d0       	rcall	.+0      	; 0x31ce <Set_Number+0x6>
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <Set_Number+0x8>
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	89 83       	std	Y+1, r24	; 0x01
	switch(Cursor)
    31d8:	80 91 8e 00 	lds	r24, 0x008E
    31dc:	28 2f       	mov	r18, r24
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	3c 83       	std	Y+4, r19	; 0x04
    31e2:	2b 83       	std	Y+3, r18	; 0x03
    31e4:	8b 81       	ldd	r24, Y+3	; 0x03
    31e6:	9c 81       	ldd	r25, Y+4	; 0x04
    31e8:	83 30       	cpi	r24, 0x03	; 3
    31ea:	91 05       	cpc	r25, r1
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <Set_Number+0x28>
    31ee:	4f c0       	rjmp	.+158    	; 0x328e <Set_Number+0xc6>
    31f0:	2b 81       	ldd	r18, Y+3	; 0x03
    31f2:	3c 81       	ldd	r19, Y+4	; 0x04
    31f4:	24 30       	cpi	r18, 0x04	; 4
    31f6:	31 05       	cpc	r19, r1
    31f8:	84 f4       	brge	.+32     	; 0x321a <Set_Number+0x52>
    31fa:	8b 81       	ldd	r24, Y+3	; 0x03
    31fc:	9c 81       	ldd	r25, Y+4	; 0x04
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	91 05       	cpc	r25, r1
    3202:	d9 f1       	breq	.+118    	; 0x327a <Set_Number+0xb2>
    3204:	2b 81       	ldd	r18, Y+3	; 0x03
    3206:	3c 81       	ldd	r19, Y+4	; 0x04
    3208:	22 30       	cpi	r18, 0x02	; 2
    320a:	31 05       	cpc	r19, r1
    320c:	0c f0       	brlt	.+2      	; 0x3210 <Set_Number+0x48>
    320e:	80 c0       	rjmp	.+256    	; 0x3310 <Set_Number+0x148>
    3210:	8b 81       	ldd	r24, Y+3	; 0x03
    3212:	9c 81       	ldd	r25, Y+4	; 0x04
    3214:	00 97       	sbiw	r24, 0x00	; 0
    3216:	d1 f0       	breq	.+52     	; 0x324c <Set_Number+0x84>
    3218:	7b c0       	rjmp	.+246    	; 0x3310 <Set_Number+0x148>
    321a:	2b 81       	ldd	r18, Y+3	; 0x03
    321c:	3c 81       	ldd	r19, Y+4	; 0x04
    321e:	25 30       	cpi	r18, 0x05	; 5
    3220:	31 05       	cpc	r19, r1
    3222:	09 f4       	brne	.+2      	; 0x3226 <Set_Number+0x5e>
    3224:	75 c0       	rjmp	.+234    	; 0x3310 <Set_Number+0x148>
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	85 30       	cpi	r24, 0x05	; 5
    322c:	91 05       	cpc	r25, r1
    322e:	0c f4       	brge	.+2      	; 0x3232 <Set_Number+0x6a>
    3230:	45 c0       	rjmp	.+138    	; 0x32bc <Set_Number+0xf4>
    3232:	2b 81       	ldd	r18, Y+3	; 0x03
    3234:	3c 81       	ldd	r19, Y+4	; 0x04
    3236:	26 30       	cpi	r18, 0x06	; 6
    3238:	31 05       	cpc	r19, r1
    323a:	09 f4       	brne	.+2      	; 0x323e <Set_Number+0x76>
    323c:	49 c0       	rjmp	.+146    	; 0x32d0 <Set_Number+0x108>
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	9c 81       	ldd	r25, Y+4	; 0x04
    3242:	87 30       	cpi	r24, 0x07	; 7
    3244:	91 05       	cpc	r25, r1
    3246:	09 f4       	brne	.+2      	; 0x324a <Set_Number+0x82>
    3248:	5a c0       	rjmp	.+180    	; 0x32fe <Set_Number+0x136>
    324a:	62 c0       	rjmp	.+196    	; 0x3310 <Set_Number+0x148>
	{
	case 0:
		hours += 10 * (*Key - '0');
    324c:	e9 81       	ldd	r30, Y+1	; 0x01
    324e:	fa 81       	ldd	r31, Y+2	; 0x02
    3250:	80 81       	ld	r24, Z
    3252:	88 2f       	mov	r24, r24
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	9c 01       	movw	r18, r24
    3258:	22 0f       	add	r18, r18
    325a:	33 1f       	adc	r19, r19
    325c:	c9 01       	movw	r24, r18
    325e:	88 0f       	add	r24, r24
    3260:	99 1f       	adc	r25, r25
    3262:	88 0f       	add	r24, r24
    3264:	99 1f       	adc	r25, r25
    3266:	82 0f       	add	r24, r18
    3268:	93 1f       	adc	r25, r19
    326a:	98 2f       	mov	r25, r24
    326c:	80 91 b0 00 	lds	r24, 0x00B0
    3270:	89 0f       	add	r24, r25
    3272:	80 5e       	subi	r24, 0xE0	; 224
    3274:	80 93 b0 00 	sts	0x00B0, r24
    3278:	4b c0       	rjmp	.+150    	; 0x3310 <Set_Number+0x148>
		break;
	case 1:
		hours += *Key - '0';
    327a:	e9 81       	ldd	r30, Y+1	; 0x01
    327c:	fa 81       	ldd	r31, Y+2	; 0x02
    327e:	90 81       	ld	r25, Z
    3280:	80 91 b0 00 	lds	r24, 0x00B0
    3284:	89 0f       	add	r24, r25
    3286:	80 53       	subi	r24, 0x30	; 48
    3288:	80 93 b0 00 	sts	0x00B0, r24
    328c:	41 c0       	rjmp	.+130    	; 0x3310 <Set_Number+0x148>
		break;
	case 2:
		break;
	case 3:
		minutes += 10 * (*Key - '0');
    328e:	e9 81       	ldd	r30, Y+1	; 0x01
    3290:	fa 81       	ldd	r31, Y+2	; 0x02
    3292:	80 81       	ld	r24, Z
    3294:	88 2f       	mov	r24, r24
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	9c 01       	movw	r18, r24
    329a:	22 0f       	add	r18, r18
    329c:	33 1f       	adc	r19, r19
    329e:	c9 01       	movw	r24, r18
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	82 0f       	add	r24, r18
    32aa:	93 1f       	adc	r25, r19
    32ac:	98 2f       	mov	r25, r24
    32ae:	80 91 b1 00 	lds	r24, 0x00B1
    32b2:	89 0f       	add	r24, r25
    32b4:	80 5e       	subi	r24, 0xE0	; 224
    32b6:	80 93 b1 00 	sts	0x00B1, r24
    32ba:	2a c0       	rjmp	.+84     	; 0x3310 <Set_Number+0x148>
		break;
	case 4:
		minutes += *Key - '0';
    32bc:	e9 81       	ldd	r30, Y+1	; 0x01
    32be:	fa 81       	ldd	r31, Y+2	; 0x02
    32c0:	90 81       	ld	r25, Z
    32c2:	80 91 b1 00 	lds	r24, 0x00B1
    32c6:	89 0f       	add	r24, r25
    32c8:	80 53       	subi	r24, 0x30	; 48
    32ca:	80 93 b1 00 	sts	0x00B1, r24
    32ce:	20 c0       	rjmp	.+64     	; 0x3310 <Set_Number+0x148>
		break;
	case 5:
		break;
	case 6:
		seconds += 10 * (*Key - '0');
    32d0:	e9 81       	ldd	r30, Y+1	; 0x01
    32d2:	fa 81       	ldd	r31, Y+2	; 0x02
    32d4:	80 81       	ld	r24, Z
    32d6:	88 2f       	mov	r24, r24
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	9c 01       	movw	r18, r24
    32dc:	22 0f       	add	r18, r18
    32de:	33 1f       	adc	r19, r19
    32e0:	c9 01       	movw	r24, r18
    32e2:	88 0f       	add	r24, r24
    32e4:	99 1f       	adc	r25, r25
    32e6:	88 0f       	add	r24, r24
    32e8:	99 1f       	adc	r25, r25
    32ea:	82 0f       	add	r24, r18
    32ec:	93 1f       	adc	r25, r19
    32ee:	98 2f       	mov	r25, r24
    32f0:	80 91 b2 00 	lds	r24, 0x00B2
    32f4:	89 0f       	add	r24, r25
    32f6:	80 5e       	subi	r24, 0xE0	; 224
    32f8:	80 93 b2 00 	sts	0x00B2, r24
    32fc:	09 c0       	rjmp	.+18     	; 0x3310 <Set_Number+0x148>
		break;
	case 7:
		seconds += *Key - '0';
    32fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3300:	fa 81       	ldd	r31, Y+2	; 0x02
    3302:	90 81       	ld	r25, Z
    3304:	80 91 b2 00 	lds	r24, 0x00B2
    3308:	89 0f       	add	r24, r25
    330a:	80 53       	subi	r24, 0x30	; 48
    330c:	80 93 b2 00 	sts	0x00B2, r24
		break;
	default:
		break;
	}
}
    3310:	0f 90       	pop	r0
    3312:	0f 90       	pop	r0
    3314:	0f 90       	pop	r0
    3316:	0f 90       	pop	r0
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	08 95       	ret

0000331e <Check_Correct>:
void Check_Correct(void)
{
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	cd b7       	in	r28, 0x3d	; 61
    3324:	de b7       	in	r29, 0x3e	; 62
	if (seconds > 59 || minutes > 59 || hours > 23)
    3326:	80 91 b2 00 	lds	r24, 0x00B2
    332a:	8c 33       	cpi	r24, 0x3C	; 60
    332c:	40 f4       	brcc	.+16     	; 0x333e <Check_Correct+0x20>
    332e:	80 91 b1 00 	lds	r24, 0x00B1
    3332:	8c 33       	cpi	r24, 0x3C	; 60
    3334:	20 f4       	brcc	.+8      	; 0x333e <Check_Correct+0x20>
    3336:	80 91 b0 00 	lds	r24, 0x00B0
    333a:	88 31       	cpi	r24, 0x18	; 24
    333c:	38 f0       	brcs	.+14     	; 0x334c <Check_Correct+0x2e>
	{
		LCD_voidClearScreen();
    333e:	0e 94 cd 12 	call	0x259a	; 0x259a <LCD_voidClearScreen>
		LCD_voidWriteString((u8 *)"Invalid Stop Watch");
    3342:	83 e7       	ldi	r24, 0x73	; 115
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	0e 94 08 12 	call	0x2410	; 0x2410 <LCD_voidWriteString>
    334a:	ff cf       	rjmp	.-2      	; 0x334a <Check_Correct+0x2c>
		while(1);
	}
}
    334c:	cf 91       	pop	r28
    334e:	df 91       	pop	r29
    3350:	08 95       	ret

00003352 <LED_ON>:
void LED_ON(void)
{
    3352:	df 93       	push	r29
    3354:	cf 93       	push	r28
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    335a:	81 e0       	ldi	r24, 0x01	; 1
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	41 e0       	ldi	r20, 0x01	; 1
    3360:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
}
    3364:	cf 91       	pop	r28
    3366:	df 91       	pop	r29
    3368:	08 95       	ret

0000336a <__udivmodsi4>:
    336a:	a1 e2       	ldi	r26, 0x21	; 33
    336c:	1a 2e       	mov	r1, r26
    336e:	aa 1b       	sub	r26, r26
    3370:	bb 1b       	sub	r27, r27
    3372:	fd 01       	movw	r30, r26
    3374:	0d c0       	rjmp	.+26     	; 0x3390 <__udivmodsi4_ep>

00003376 <__udivmodsi4_loop>:
    3376:	aa 1f       	adc	r26, r26
    3378:	bb 1f       	adc	r27, r27
    337a:	ee 1f       	adc	r30, r30
    337c:	ff 1f       	adc	r31, r31
    337e:	a2 17       	cp	r26, r18
    3380:	b3 07       	cpc	r27, r19
    3382:	e4 07       	cpc	r30, r20
    3384:	f5 07       	cpc	r31, r21
    3386:	20 f0       	brcs	.+8      	; 0x3390 <__udivmodsi4_ep>
    3388:	a2 1b       	sub	r26, r18
    338a:	b3 0b       	sbc	r27, r19
    338c:	e4 0b       	sbc	r30, r20
    338e:	f5 0b       	sbc	r31, r21

00003390 <__udivmodsi4_ep>:
    3390:	66 1f       	adc	r22, r22
    3392:	77 1f       	adc	r23, r23
    3394:	88 1f       	adc	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	1a 94       	dec	r1
    339a:	69 f7       	brne	.-38     	; 0x3376 <__udivmodsi4_loop>
    339c:	60 95       	com	r22
    339e:	70 95       	com	r23
    33a0:	80 95       	com	r24
    33a2:	90 95       	com	r25
    33a4:	9b 01       	movw	r18, r22
    33a6:	ac 01       	movw	r20, r24
    33a8:	bd 01       	movw	r22, r26
    33aa:	cf 01       	movw	r24, r30
    33ac:	08 95       	ret

000033ae <__prologue_saves__>:
    33ae:	2f 92       	push	r2
    33b0:	3f 92       	push	r3
    33b2:	4f 92       	push	r4
    33b4:	5f 92       	push	r5
    33b6:	6f 92       	push	r6
    33b8:	7f 92       	push	r7
    33ba:	8f 92       	push	r8
    33bc:	9f 92       	push	r9
    33be:	af 92       	push	r10
    33c0:	bf 92       	push	r11
    33c2:	cf 92       	push	r12
    33c4:	df 92       	push	r13
    33c6:	ef 92       	push	r14
    33c8:	ff 92       	push	r15
    33ca:	0f 93       	push	r16
    33cc:	1f 93       	push	r17
    33ce:	cf 93       	push	r28
    33d0:	df 93       	push	r29
    33d2:	cd b7       	in	r28, 0x3d	; 61
    33d4:	de b7       	in	r29, 0x3e	; 62
    33d6:	ca 1b       	sub	r28, r26
    33d8:	db 0b       	sbc	r29, r27
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	de bf       	out	0x3e, r29	; 62
    33e0:	0f be       	out	0x3f, r0	; 63
    33e2:	cd bf       	out	0x3d, r28	; 61
    33e4:	09 94       	ijmp

000033e6 <__epilogue_restores__>:
    33e6:	2a 88       	ldd	r2, Y+18	; 0x12
    33e8:	39 88       	ldd	r3, Y+17	; 0x11
    33ea:	48 88       	ldd	r4, Y+16	; 0x10
    33ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    33f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33f8:	b9 84       	ldd	r11, Y+9	; 0x09
    33fa:	c8 84       	ldd	r12, Y+8	; 0x08
    33fc:	df 80       	ldd	r13, Y+7	; 0x07
    33fe:	ee 80       	ldd	r14, Y+6	; 0x06
    3400:	fd 80       	ldd	r15, Y+5	; 0x05
    3402:	0c 81       	ldd	r16, Y+4	; 0x04
    3404:	1b 81       	ldd	r17, Y+3	; 0x03
    3406:	aa 81       	ldd	r26, Y+2	; 0x02
    3408:	b9 81       	ldd	r27, Y+1	; 0x01
    340a:	ce 0f       	add	r28, r30
    340c:	d1 1d       	adc	r29, r1
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	ed 01       	movw	r28, r26
    341a:	08 95       	ret

0000341c <_exit>:
    341c:	f8 94       	cli

0000341e <__stop_program>:
    341e:	ff cf       	rjmp	.-2      	; 0x341e <__stop_program>
