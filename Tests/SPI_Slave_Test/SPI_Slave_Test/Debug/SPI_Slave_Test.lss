
SPI_Slave_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000000e  00800060  00800060  00001138  2**0
                  ALLOC
  2 .stab         000017e8  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000da1  00000000  00000000  00002920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 c9 07 	jmp	0xf92	; 0xf92 <__vector_13>
      38:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__vector_14>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ae 36       	cpi	r26, 0x6E	; 110
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 33 08 	call	0x1066	; 0x1066 <main>
      74:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
      84:	ea e3       	ldi	r30, 0x3A	; 58
      86:	f0 e0       	ldi	r31, 0x00	; 0
      88:	81 e0       	ldi	r24, 0x01	; 1
      8a:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
      8c:	e7 e3       	ldi	r30, 0x37	; 55
      8e:	f0 e0       	ldi	r31, 0x00	; 0
      90:	80 e4       	ldi	r24, 0x40	; 64
      92:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
      94:	e4 e3       	ldi	r30, 0x34	; 52
      96:	f0 e0       	ldi	r31, 0x00	; 0
      98:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
      9a:	e1 e3       	ldi	r30, 0x31	; 49
      9c:	f0 e0       	ldi	r31, 0x00	; 0
      9e:	82 e0       	ldi	r24, 0x02	; 2
      a0:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
      a2:	eb e3       	ldi	r30, 0x3B	; 59
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
      a8:	e8 e3       	ldi	r30, 0x38	; 56
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	80 e1       	ldi	r24, 0x10	; 16
      ae:	80 83       	st	Z, r24

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
      b0:	e5 e3       	ldi	r30, 0x35	; 53
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
      b6:	e2 e3       	ldi	r30, 0x32	; 50
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	10 82       	st	Z, r1

}
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	2e 97       	sbiw	r28, 0x0e	; 14
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
      d6:	8a 83       	std	Y+2, r24	; 0x02
      d8:	6b 83       	std	Y+3, r22	; 0x03
      da:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
      e0:	8a 81       	ldd	r24, Y+2	; 0x02
      e2:	84 30       	cpi	r24, 0x04	; 4
      e4:	08 f0       	brcs	.+2      	; 0xe8 <DIO_u8SetPinDirection+0x26>
      e6:	0d c1       	rjmp	.+538    	; 0x302 <DIO_u8SetPinDirection+0x240>
      e8:	8b 81       	ldd	r24, Y+3	; 0x03
      ea:	88 30       	cpi	r24, 0x08	; 8
      ec:	08 f0       	brcs	.+2      	; 0xf0 <DIO_u8SetPinDirection+0x2e>
      ee:	09 c1       	rjmp	.+530    	; 0x302 <DIO_u8SetPinDirection+0x240>
      f0:	8c 81       	ldd	r24, Y+4	; 0x04
      f2:	88 23       	and	r24, r24
      f4:	21 f0       	breq	.+8      	; 0xfe <DIO_u8SetPinDirection+0x3c>
      f6:	8c 81       	ldd	r24, Y+4	; 0x04
      f8:	81 30       	cpi	r24, 0x01	; 1
      fa:	09 f0       	breq	.+2      	; 0xfe <DIO_u8SetPinDirection+0x3c>
      fc:	02 c1       	rjmp	.+516    	; 0x302 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
      fe:	8a 81       	ldd	r24, Y+2	; 0x02
     100:	28 2f       	mov	r18, r24
     102:	30 e0       	ldi	r19, 0x00	; 0
     104:	3e 87       	std	Y+14, r19	; 0x0e
     106:	2d 87       	std	Y+13, r18	; 0x0d
     108:	8d 85       	ldd	r24, Y+13	; 0x0d
     10a:	9e 85       	ldd	r25, Y+14	; 0x0e
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	91 05       	cpc	r25, r1
     110:	09 f4       	brne	.+2      	; 0x114 <DIO_u8SetPinDirection+0x52>
     112:	4f c0       	rjmp	.+158    	; 0x1b2 <DIO_u8SetPinDirection+0xf0>
     114:	2d 85       	ldd	r18, Y+13	; 0x0d
     116:	3e 85       	ldd	r19, Y+14	; 0x0e
     118:	22 30       	cpi	r18, 0x02	; 2
     11a:	31 05       	cpc	r19, r1
     11c:	2c f4       	brge	.+10     	; 0x128 <DIO_u8SetPinDirection+0x66>
     11e:	8d 85       	ldd	r24, Y+13	; 0x0d
     120:	9e 85       	ldd	r25, Y+14	; 0x0e
     122:	00 97       	sbiw	r24, 0x00	; 0
     124:	71 f0       	breq	.+28     	; 0x142 <DIO_u8SetPinDirection+0x80>
     126:	ee c0       	rjmp	.+476    	; 0x304 <DIO_u8SetPinDirection+0x242>
     128:	2d 85       	ldd	r18, Y+13	; 0x0d
     12a:	3e 85       	ldd	r19, Y+14	; 0x0e
     12c:	22 30       	cpi	r18, 0x02	; 2
     12e:	31 05       	cpc	r19, r1
     130:	09 f4       	brne	.+2      	; 0x134 <DIO_u8SetPinDirection+0x72>
     132:	77 c0       	rjmp	.+238    	; 0x222 <DIO_u8SetPinDirection+0x160>
     134:	8d 85       	ldd	r24, Y+13	; 0x0d
     136:	9e 85       	ldd	r25, Y+14	; 0x0e
     138:	83 30       	cpi	r24, 0x03	; 3
     13a:	91 05       	cpc	r25, r1
     13c:	09 f4       	brne	.+2      	; 0x140 <DIO_u8SetPinDirection+0x7e>
     13e:	a9 c0       	rjmp	.+338    	; 0x292 <DIO_u8SetPinDirection+0x1d0>
     140:	e1 c0       	rjmp	.+450    	; 0x304 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     142:	8b 81       	ldd	r24, Y+3	; 0x03
     144:	28 2f       	mov	r18, r24
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	3c 87       	std	Y+12, r19	; 0x0c
     14a:	2b 87       	std	Y+11, r18	; 0x0b
     14c:	8b 85       	ldd	r24, Y+11	; 0x0b
     14e:	9c 85       	ldd	r25, Y+12	; 0x0c
     150:	00 97       	sbiw	r24, 0x00	; 0
     152:	31 f0       	breq	.+12     	; 0x160 <DIO_u8SetPinDirection+0x9e>
     154:	2b 85       	ldd	r18, Y+11	; 0x0b
     156:	3c 85       	ldd	r19, Y+12	; 0x0c
     158:	21 30       	cpi	r18, 0x01	; 1
     15a:	31 05       	cpc	r19, r1
     15c:	b1 f0       	breq	.+44     	; 0x18a <DIO_u8SetPinDirection+0xc8>
     15e:	d2 c0       	rjmp	.+420    	; 0x304 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     160:	aa e3       	ldi	r26, 0x3A	; 58
     162:	b0 e0       	ldi	r27, 0x00	; 0
     164:	ea e3       	ldi	r30, 0x3A	; 58
     166:	f0 e0       	ldi	r31, 0x00	; 0
     168:	80 81       	ld	r24, Z
     16a:	48 2f       	mov	r20, r24
     16c:	8b 81       	ldd	r24, Y+3	; 0x03
     16e:	28 2f       	mov	r18, r24
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	02 2e       	mov	r0, r18
     178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_u8SetPinDirection+0xbc>
     17a:	88 0f       	add	r24, r24
     17c:	99 1f       	adc	r25, r25
     17e:	0a 94       	dec	r0
     180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_u8SetPinDirection+0xb8>
     182:	80 95       	com	r24
     184:	84 23       	and	r24, r20
     186:	8c 93       	st	X, r24
     188:	bd c0       	rjmp	.+378    	; 0x304 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     18a:	aa e3       	ldi	r26, 0x3A	; 58
     18c:	b0 e0       	ldi	r27, 0x00	; 0
     18e:	ea e3       	ldi	r30, 0x3A	; 58
     190:	f0 e0       	ldi	r31, 0x00	; 0
     192:	80 81       	ld	r24, Z
     194:	48 2f       	mov	r20, r24
     196:	8b 81       	ldd	r24, Y+3	; 0x03
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	02 2e       	mov	r0, r18
     1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_u8SetPinDirection+0xe6>
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	0a 94       	dec	r0
     1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_u8SetPinDirection+0xe2>
     1ac:	84 2b       	or	r24, r20
     1ae:	8c 93       	st	X, r24
     1b0:	a9 c0       	rjmp	.+338    	; 0x304 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     1b2:	8b 81       	ldd	r24, Y+3	; 0x03
     1b4:	28 2f       	mov	r18, r24
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	3a 87       	std	Y+10, r19	; 0x0a
     1ba:	29 87       	std	Y+9, r18	; 0x09
     1bc:	89 85       	ldd	r24, Y+9	; 0x09
     1be:	9a 85       	ldd	r25, Y+10	; 0x0a
     1c0:	00 97       	sbiw	r24, 0x00	; 0
     1c2:	31 f0       	breq	.+12     	; 0x1d0 <DIO_u8SetPinDirection+0x10e>
     1c4:	29 85       	ldd	r18, Y+9	; 0x09
     1c6:	3a 85       	ldd	r19, Y+10	; 0x0a
     1c8:	21 30       	cpi	r18, 0x01	; 1
     1ca:	31 05       	cpc	r19, r1
     1cc:	b1 f0       	breq	.+44     	; 0x1fa <DIO_u8SetPinDirection+0x138>
     1ce:	9a c0       	rjmp	.+308    	; 0x304 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     1d0:	a7 e3       	ldi	r26, 0x37	; 55
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	e7 e3       	ldi	r30, 0x37	; 55
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	48 2f       	mov	r20, r24
     1dc:	8b 81       	ldd	r24, Y+3	; 0x03
     1de:	28 2f       	mov	r18, r24
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	81 e0       	ldi	r24, 0x01	; 1
     1e4:	90 e0       	ldi	r25, 0x00	; 0
     1e6:	02 2e       	mov	r0, r18
     1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_u8SetPinDirection+0x12c>
     1ea:	88 0f       	add	r24, r24
     1ec:	99 1f       	adc	r25, r25
     1ee:	0a 94       	dec	r0
     1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_u8SetPinDirection+0x128>
     1f2:	80 95       	com	r24
     1f4:	84 23       	and	r24, r20
     1f6:	8c 93       	st	X, r24
     1f8:	85 c0       	rjmp	.+266    	; 0x304 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     1fa:	a7 e3       	ldi	r26, 0x37	; 55
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
     1fe:	e7 e3       	ldi	r30, 0x37	; 55
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	80 81       	ld	r24, Z
     204:	48 2f       	mov	r20, r24
     206:	8b 81       	ldd	r24, Y+3	; 0x03
     208:	28 2f       	mov	r18, r24
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	02 2e       	mov	r0, r18
     212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_u8SetPinDirection+0x156>
     214:	88 0f       	add	r24, r24
     216:	99 1f       	adc	r25, r25
     218:	0a 94       	dec	r0
     21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_u8SetPinDirection+0x152>
     21c:	84 2b       	or	r24, r20
     21e:	8c 93       	st	X, r24
     220:	71 c0       	rjmp	.+226    	; 0x304 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     222:	8b 81       	ldd	r24, Y+3	; 0x03
     224:	28 2f       	mov	r18, r24
     226:	30 e0       	ldi	r19, 0x00	; 0
     228:	38 87       	std	Y+8, r19	; 0x08
     22a:	2f 83       	std	Y+7, r18	; 0x07
     22c:	8f 81       	ldd	r24, Y+7	; 0x07
     22e:	98 85       	ldd	r25, Y+8	; 0x08
     230:	00 97       	sbiw	r24, 0x00	; 0
     232:	31 f0       	breq	.+12     	; 0x240 <DIO_u8SetPinDirection+0x17e>
     234:	2f 81       	ldd	r18, Y+7	; 0x07
     236:	38 85       	ldd	r19, Y+8	; 0x08
     238:	21 30       	cpi	r18, 0x01	; 1
     23a:	31 05       	cpc	r19, r1
     23c:	b1 f0       	breq	.+44     	; 0x26a <DIO_u8SetPinDirection+0x1a8>
     23e:	62 c0       	rjmp	.+196    	; 0x304 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     240:	a4 e3       	ldi	r26, 0x34	; 52
     242:	b0 e0       	ldi	r27, 0x00	; 0
     244:	e4 e3       	ldi	r30, 0x34	; 52
     246:	f0 e0       	ldi	r31, 0x00	; 0
     248:	80 81       	ld	r24, Z
     24a:	48 2f       	mov	r20, r24
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	28 2f       	mov	r18, r24
     250:	30 e0       	ldi	r19, 0x00	; 0
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	02 2e       	mov	r0, r18
     258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_u8SetPinDirection+0x19c>
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	0a 94       	dec	r0
     260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_u8SetPinDirection+0x198>
     262:	80 95       	com	r24
     264:	84 23       	and	r24, r20
     266:	8c 93       	st	X, r24
     268:	4d c0       	rjmp	.+154    	; 0x304 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     26a:	a4 e3       	ldi	r26, 0x34	; 52
     26c:	b0 e0       	ldi	r27, 0x00	; 0
     26e:	e4 e3       	ldi	r30, 0x34	; 52
     270:	f0 e0       	ldi	r31, 0x00	; 0
     272:	80 81       	ld	r24, Z
     274:	48 2f       	mov	r20, r24
     276:	8b 81       	ldd	r24, Y+3	; 0x03
     278:	28 2f       	mov	r18, r24
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	02 2e       	mov	r0, r18
     282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_u8SetPinDirection+0x1c6>
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	0a 94       	dec	r0
     28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_u8SetPinDirection+0x1c2>
     28c:	84 2b       	or	r24, r20
     28e:	8c 93       	st	X, r24
     290:	39 c0       	rjmp	.+114    	; 0x304 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     292:	8b 81       	ldd	r24, Y+3	; 0x03
     294:	28 2f       	mov	r18, r24
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	3e 83       	std	Y+6, r19	; 0x06
     29a:	2d 83       	std	Y+5, r18	; 0x05
     29c:	8d 81       	ldd	r24, Y+5	; 0x05
     29e:	9e 81       	ldd	r25, Y+6	; 0x06
     2a0:	00 97       	sbiw	r24, 0x00	; 0
     2a2:	31 f0       	breq	.+12     	; 0x2b0 <DIO_u8SetPinDirection+0x1ee>
     2a4:	2d 81       	ldd	r18, Y+5	; 0x05
     2a6:	3e 81       	ldd	r19, Y+6	; 0x06
     2a8:	21 30       	cpi	r18, 0x01	; 1
     2aa:	31 05       	cpc	r19, r1
     2ac:	b1 f0       	breq	.+44     	; 0x2da <DIO_u8SetPinDirection+0x218>
     2ae:	2a c0       	rjmp	.+84     	; 0x304 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     2b0:	a1 e3       	ldi	r26, 0x31	; 49
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	e1 e3       	ldi	r30, 0x31	; 49
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	48 2f       	mov	r20, r24
     2bc:	8b 81       	ldd	r24, Y+3	; 0x03
     2be:	28 2f       	mov	r18, r24
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	02 2e       	mov	r0, r18
     2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_u8SetPinDirection+0x20c>
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	0a 94       	dec	r0
     2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_u8SetPinDirection+0x208>
     2d2:	80 95       	com	r24
     2d4:	84 23       	and	r24, r20
     2d6:	8c 93       	st	X, r24
     2d8:	15 c0       	rjmp	.+42     	; 0x304 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     2da:	a1 e3       	ldi	r26, 0x31	; 49
     2dc:	b0 e0       	ldi	r27, 0x00	; 0
     2de:	e1 e3       	ldi	r30, 0x31	; 49
     2e0:	f0 e0       	ldi	r31, 0x00	; 0
     2e2:	80 81       	ld	r24, Z
     2e4:	48 2f       	mov	r20, r24
     2e6:	8b 81       	ldd	r24, Y+3	; 0x03
     2e8:	28 2f       	mov	r18, r24
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	02 2e       	mov	r0, r18
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_u8SetPinDirection+0x236>
     2f4:	88 0f       	add	r24, r24
     2f6:	99 1f       	adc	r25, r25
     2f8:	0a 94       	dec	r0
     2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_u8SetPinDirection+0x232>
     2fc:	84 2b       	or	r24, r20
     2fe:	8c 93       	st	X, r24
     300:	01 c0       	rjmp	.+2      	; 0x304 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     302:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     304:	89 81       	ldd	r24, Y+1	; 0x01
}
     306:	2e 96       	adiw	r28, 0x0e	; 14
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	f8 94       	cli
     30c:	de bf       	out	0x3e, r29	; 62
     30e:	0f be       	out	0x3f, r0	; 63
     310:	cd bf       	out	0x3d, r28	; 61
     312:	cf 91       	pop	r28
     314:	df 91       	pop	r29
     316:	08 95       	ret

00000318 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     318:	df 93       	push	r29
     31a:	cf 93       	push	r28
     31c:	cd b7       	in	r28, 0x3d	; 61
     31e:	de b7       	in	r29, 0x3e	; 62
     320:	2e 97       	sbiw	r28, 0x0e	; 14
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	f8 94       	cli
     326:	de bf       	out	0x3e, r29	; 62
     328:	0f be       	out	0x3f, r0	; 63
     32a:	cd bf       	out	0x3d, r28	; 61
     32c:	8a 83       	std	Y+2, r24	; 0x02
     32e:	6b 83       	std	Y+3, r22	; 0x03
     330:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     336:	8b 81       	ldd	r24, Y+3	; 0x03
     338:	88 30       	cpi	r24, 0x08	; 8
     33a:	08 f0       	brcs	.+2      	; 0x33e <DIO_u8SetPinValue+0x26>
     33c:	0c c1       	rjmp	.+536    	; 0x556 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	28 2f       	mov	r18, r24
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	3e 87       	std	Y+14, r19	; 0x0e
     346:	2d 87       	std	Y+13, r18	; 0x0d
     348:	8d 85       	ldd	r24, Y+13	; 0x0d
     34a:	9e 85       	ldd	r25, Y+14	; 0x0e
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	91 05       	cpc	r25, r1
     350:	09 f4       	brne	.+2      	; 0x354 <DIO_u8SetPinValue+0x3c>
     352:	51 c0       	rjmp	.+162    	; 0x3f6 <DIO_u8SetPinValue+0xde>
     354:	2d 85       	ldd	r18, Y+13	; 0x0d
     356:	3e 85       	ldd	r19, Y+14	; 0x0e
     358:	22 30       	cpi	r18, 0x02	; 2
     35a:	31 05       	cpc	r19, r1
     35c:	2c f4       	brge	.+10     	; 0x368 <DIO_u8SetPinValue+0x50>
     35e:	8d 85       	ldd	r24, Y+13	; 0x0d
     360:	9e 85       	ldd	r25, Y+14	; 0x0e
     362:	00 97       	sbiw	r24, 0x00	; 0
     364:	71 f0       	breq	.+28     	; 0x382 <DIO_u8SetPinValue+0x6a>
     366:	f5 c0       	rjmp	.+490    	; 0x552 <DIO_u8SetPinValue+0x23a>
     368:	2d 85       	ldd	r18, Y+13	; 0x0d
     36a:	3e 85       	ldd	r19, Y+14	; 0x0e
     36c:	22 30       	cpi	r18, 0x02	; 2
     36e:	31 05       	cpc	r19, r1
     370:	09 f4       	brne	.+2      	; 0x374 <DIO_u8SetPinValue+0x5c>
     372:	7b c0       	rjmp	.+246    	; 0x46a <DIO_u8SetPinValue+0x152>
     374:	8d 85       	ldd	r24, Y+13	; 0x0d
     376:	9e 85       	ldd	r25, Y+14	; 0x0e
     378:	83 30       	cpi	r24, 0x03	; 3
     37a:	91 05       	cpc	r25, r1
     37c:	09 f4       	brne	.+2      	; 0x380 <DIO_u8SetPinValue+0x68>
     37e:	af c0       	rjmp	.+350    	; 0x4de <DIO_u8SetPinValue+0x1c6>
     380:	e8 c0       	rjmp	.+464    	; 0x552 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     382:	8c 81       	ldd	r24, Y+4	; 0x04
     384:	28 2f       	mov	r18, r24
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	3c 87       	std	Y+12, r19	; 0x0c
     38a:	2b 87       	std	Y+11, r18	; 0x0b
     38c:	8b 85       	ldd	r24, Y+11	; 0x0b
     38e:	9c 85       	ldd	r25, Y+12	; 0x0c
     390:	00 97       	sbiw	r24, 0x00	; 0
     392:	31 f0       	breq	.+12     	; 0x3a0 <DIO_u8SetPinValue+0x88>
     394:	2b 85       	ldd	r18, Y+11	; 0x0b
     396:	3c 85       	ldd	r19, Y+12	; 0x0c
     398:	21 30       	cpi	r18, 0x01	; 1
     39a:	31 05       	cpc	r19, r1
     39c:	b1 f0       	breq	.+44     	; 0x3ca <DIO_u8SetPinValue+0xb2>
     39e:	29 c0       	rjmp	.+82     	; 0x3f2 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     3a0:	ab e3       	ldi	r26, 0x3B	; 59
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	eb e3       	ldi	r30, 0x3B	; 59
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	48 2f       	mov	r20, r24
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	28 2f       	mov	r18, r24
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	02 2e       	mov	r0, r18
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_u8SetPinValue+0xa6>
     3ba:	88 0f       	add	r24, r24
     3bc:	99 1f       	adc	r25, r25
     3be:	0a 94       	dec	r0
     3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_u8SetPinValue+0xa2>
     3c2:	80 95       	com	r24
     3c4:	84 23       	and	r24, r20
     3c6:	8c 93       	st	X, r24
     3c8:	c7 c0       	rjmp	.+398    	; 0x558 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     3ca:	ab e3       	ldi	r26, 0x3B	; 59
     3cc:	b0 e0       	ldi	r27, 0x00	; 0
     3ce:	eb e3       	ldi	r30, 0x3B	; 59
     3d0:	f0 e0       	ldi	r31, 0x00	; 0
     3d2:	80 81       	ld	r24, Z
     3d4:	48 2f       	mov	r20, r24
     3d6:	8b 81       	ldd	r24, Y+3	; 0x03
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	02 2e       	mov	r0, r18
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <DIO_u8SetPinValue+0xd0>
     3e4:	88 0f       	add	r24, r24
     3e6:	99 1f       	adc	r25, r25
     3e8:	0a 94       	dec	r0
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <DIO_u8SetPinValue+0xcc>
     3ec:	84 2b       	or	r24, r20
     3ee:	8c 93       	st	X, r24
     3f0:	b3 c0       	rjmp	.+358    	; 0x558 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     3f2:	19 82       	std	Y+1, r1	; 0x01
     3f4:	b1 c0       	rjmp	.+354    	; 0x558 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
     3f6:	8c 81       	ldd	r24, Y+4	; 0x04
     3f8:	28 2f       	mov	r18, r24
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	3a 87       	std	Y+10, r19	; 0x0a
     3fe:	29 87       	std	Y+9, r18	; 0x09
     400:	89 85       	ldd	r24, Y+9	; 0x09
     402:	9a 85       	ldd	r25, Y+10	; 0x0a
     404:	00 97       	sbiw	r24, 0x00	; 0
     406:	31 f0       	breq	.+12     	; 0x414 <DIO_u8SetPinValue+0xfc>
     408:	29 85       	ldd	r18, Y+9	; 0x09
     40a:	3a 85       	ldd	r19, Y+10	; 0x0a
     40c:	21 30       	cpi	r18, 0x01	; 1
     40e:	31 05       	cpc	r19, r1
     410:	b1 f0       	breq	.+44     	; 0x43e <DIO_u8SetPinValue+0x126>
     412:	29 c0       	rjmp	.+82     	; 0x466 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     414:	a8 e3       	ldi	r26, 0x38	; 56
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e8 e3       	ldi	r30, 0x38	; 56
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	48 2f       	mov	r20, r24
     420:	8b 81       	ldd	r24, Y+3	; 0x03
     422:	28 2f       	mov	r18, r24
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	02 2e       	mov	r0, r18
     42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_u8SetPinValue+0x11a>
     42e:	88 0f       	add	r24, r24
     430:	99 1f       	adc	r25, r25
     432:	0a 94       	dec	r0
     434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_u8SetPinValue+0x116>
     436:	80 95       	com	r24
     438:	84 23       	and	r24, r20
     43a:	8c 93       	st	X, r24
     43c:	8d c0       	rjmp	.+282    	; 0x558 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     43e:	a8 e3       	ldi	r26, 0x38	; 56
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e8 e3       	ldi	r30, 0x38	; 56
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	48 2f       	mov	r20, r24
     44a:	8b 81       	ldd	r24, Y+3	; 0x03
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	02 2e       	mov	r0, r18
     456:	02 c0       	rjmp	.+4      	; 0x45c <DIO_u8SetPinValue+0x144>
     458:	88 0f       	add	r24, r24
     45a:	99 1f       	adc	r25, r25
     45c:	0a 94       	dec	r0
     45e:	e2 f7       	brpl	.-8      	; 0x458 <DIO_u8SetPinValue+0x140>
     460:	84 2b       	or	r24, r20
     462:	8c 93       	st	X, r24
     464:	79 c0       	rjmp	.+242    	; 0x558 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     466:	19 82       	std	Y+1, r1	; 0x01
     468:	77 c0       	rjmp	.+238    	; 0x558 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
     46a:	8c 81       	ldd	r24, Y+4	; 0x04
     46c:	28 2f       	mov	r18, r24
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	38 87       	std	Y+8, r19	; 0x08
     472:	2f 83       	std	Y+7, r18	; 0x07
     474:	8f 81       	ldd	r24, Y+7	; 0x07
     476:	98 85       	ldd	r25, Y+8	; 0x08
     478:	00 97       	sbiw	r24, 0x00	; 0
     47a:	31 f0       	breq	.+12     	; 0x488 <DIO_u8SetPinValue+0x170>
     47c:	2f 81       	ldd	r18, Y+7	; 0x07
     47e:	38 85       	ldd	r19, Y+8	; 0x08
     480:	21 30       	cpi	r18, 0x01	; 1
     482:	31 05       	cpc	r19, r1
     484:	b1 f0       	breq	.+44     	; 0x4b2 <DIO_u8SetPinValue+0x19a>
     486:	29 c0       	rjmp	.+82     	; 0x4da <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     488:	a5 e3       	ldi	r26, 0x35	; 53
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	e5 e3       	ldi	r30, 0x35	; 53
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	80 81       	ld	r24, Z
     492:	48 2f       	mov	r20, r24
     494:	8b 81       	ldd	r24, Y+3	; 0x03
     496:	28 2f       	mov	r18, r24
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	02 2e       	mov	r0, r18
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <DIO_u8SetPinValue+0x18e>
     4a2:	88 0f       	add	r24, r24
     4a4:	99 1f       	adc	r25, r25
     4a6:	0a 94       	dec	r0
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <DIO_u8SetPinValue+0x18a>
     4aa:	80 95       	com	r24
     4ac:	84 23       	and	r24, r20
     4ae:	8c 93       	st	X, r24
     4b0:	53 c0       	rjmp	.+166    	; 0x558 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     4b2:	a5 e3       	ldi	r26, 0x35	; 53
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	e5 e3       	ldi	r30, 0x35	; 53
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	48 2f       	mov	r20, r24
     4be:	8b 81       	ldd	r24, Y+3	; 0x03
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	02 2e       	mov	r0, r18
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_u8SetPinValue+0x1b8>
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	0a 94       	dec	r0
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_u8SetPinValue+0x1b4>
     4d4:	84 2b       	or	r24, r20
     4d6:	8c 93       	st	X, r24
     4d8:	3f c0       	rjmp	.+126    	; 0x558 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     4da:	19 82       	std	Y+1, r1	; 0x01
     4dc:	3d c0       	rjmp	.+122    	; 0x558 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
     4de:	8c 81       	ldd	r24, Y+4	; 0x04
     4e0:	28 2f       	mov	r18, r24
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	3e 83       	std	Y+6, r19	; 0x06
     4e6:	2d 83       	std	Y+5, r18	; 0x05
     4e8:	8d 81       	ldd	r24, Y+5	; 0x05
     4ea:	9e 81       	ldd	r25, Y+6	; 0x06
     4ec:	00 97       	sbiw	r24, 0x00	; 0
     4ee:	31 f0       	breq	.+12     	; 0x4fc <DIO_u8SetPinValue+0x1e4>
     4f0:	2d 81       	ldd	r18, Y+5	; 0x05
     4f2:	3e 81       	ldd	r19, Y+6	; 0x06
     4f4:	21 30       	cpi	r18, 0x01	; 1
     4f6:	31 05       	cpc	r19, r1
     4f8:	b1 f0       	breq	.+44     	; 0x526 <DIO_u8SetPinValue+0x20e>
     4fa:	29 c0       	rjmp	.+82     	; 0x54e <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     4fc:	a2 e3       	ldi	r26, 0x32	; 50
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	e2 e3       	ldi	r30, 0x32	; 50
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	48 2f       	mov	r20, r24
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	28 2f       	mov	r18, r24
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	02 2e       	mov	r0, r18
     514:	02 c0       	rjmp	.+4      	; 0x51a <DIO_u8SetPinValue+0x202>
     516:	88 0f       	add	r24, r24
     518:	99 1f       	adc	r25, r25
     51a:	0a 94       	dec	r0
     51c:	e2 f7       	brpl	.-8      	; 0x516 <DIO_u8SetPinValue+0x1fe>
     51e:	80 95       	com	r24
     520:	84 23       	and	r24, r20
     522:	8c 93       	st	X, r24
     524:	19 c0       	rjmp	.+50     	; 0x558 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     526:	a2 e3       	ldi	r26, 0x32	; 50
     528:	b0 e0       	ldi	r27, 0x00	; 0
     52a:	e2 e3       	ldi	r30, 0x32	; 50
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	80 81       	ld	r24, Z
     530:	48 2f       	mov	r20, r24
     532:	8b 81       	ldd	r24, Y+3	; 0x03
     534:	28 2f       	mov	r18, r24
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	02 2e       	mov	r0, r18
     53e:	02 c0       	rjmp	.+4      	; 0x544 <DIO_u8SetPinValue+0x22c>
     540:	88 0f       	add	r24, r24
     542:	99 1f       	adc	r25, r25
     544:	0a 94       	dec	r0
     546:	e2 f7       	brpl	.-8      	; 0x540 <DIO_u8SetPinValue+0x228>
     548:	84 2b       	or	r24, r20
     54a:	8c 93       	st	X, r24
     54c:	05 c0       	rjmp	.+10     	; 0x558 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     54e:	19 82       	std	Y+1, r1	; 0x01
     550:	03 c0       	rjmp	.+6      	; 0x558 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     552:	19 82       	std	Y+1, r1	; 0x01
     554:	01 c0       	rjmp	.+2      	; 0x558 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     556:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     558:	89 81       	ldd	r24, Y+1	; 0x01
}
     55a:	2e 96       	adiw	r28, 0x0e	; 14
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	cf 91       	pop	r28
     568:	df 91       	pop	r29
     56a:	08 95       	ret

0000056c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
     56c:	df 93       	push	r29
     56e:	cf 93       	push	r28
     570:	cd b7       	in	r28, 0x3d	; 61
     572:	de b7       	in	r29, 0x3e	; 62
     574:	28 97       	sbiw	r28, 0x08	; 8
     576:	0f b6       	in	r0, 0x3f	; 63
     578:	f8 94       	cli
     57a:	de bf       	out	0x3e, r29	; 62
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	cd bf       	out	0x3d, r28	; 61
     580:	8b 83       	std	Y+3, r24	; 0x03
     582:	6c 83       	std	Y+4, r22	; 0x04
     584:	5e 83       	std	Y+6, r21	; 0x06
     586:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	84 30       	cpi	r24, 0x04	; 4
     590:	08 f0       	brcs	.+2      	; 0x594 <DIO_u8GetPinValue+0x28>
     592:	a1 c0       	rjmp	.+322    	; 0x6d6 <DIO_u8GetPinValue+0x16a>
     594:	8c 81       	ldd	r24, Y+4	; 0x04
     596:	88 30       	cpi	r24, 0x08	; 8
     598:	08 f0       	brcs	.+2      	; 0x59c <DIO_u8GetPinValue+0x30>
     59a:	9d c0       	rjmp	.+314    	; 0x6d6 <DIO_u8GetPinValue+0x16a>
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	9e 81       	ldd	r25, Y+6	; 0x06
     5a0:	00 97       	sbiw	r24, 0x00	; 0
     5a2:	09 f4       	brne	.+2      	; 0x5a6 <DIO_u8GetPinValue+0x3a>
     5a4:	98 c0       	rjmp	.+304    	; 0x6d6 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	28 2f       	mov	r18, r24
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	38 87       	std	Y+8, r19	; 0x08
     5ae:	2f 83       	std	Y+7, r18	; 0x07
     5b0:	4f 81       	ldd	r20, Y+7	; 0x07
     5b2:	58 85       	ldd	r21, Y+8	; 0x08
     5b4:	41 30       	cpi	r20, 0x01	; 1
     5b6:	51 05       	cpc	r21, r1
     5b8:	a9 f1       	breq	.+106    	; 0x624 <DIO_u8GetPinValue+0xb8>
     5ba:	8f 81       	ldd	r24, Y+7	; 0x07
     5bc:	98 85       	ldd	r25, Y+8	; 0x08
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	91 05       	cpc	r25, r1
     5c2:	34 f4       	brge	.+12     	; 0x5d0 <DIO_u8GetPinValue+0x64>
     5c4:	2f 81       	ldd	r18, Y+7	; 0x07
     5c6:	38 85       	ldd	r19, Y+8	; 0x08
     5c8:	21 15       	cp	r18, r1
     5ca:	31 05       	cpc	r19, r1
     5cc:	71 f0       	breq	.+28     	; 0x5ea <DIO_u8GetPinValue+0x7e>
     5ce:	81 c0       	rjmp	.+258    	; 0x6d2 <DIO_u8GetPinValue+0x166>
     5d0:	4f 81       	ldd	r20, Y+7	; 0x07
     5d2:	58 85       	ldd	r21, Y+8	; 0x08
     5d4:	42 30       	cpi	r20, 0x02	; 2
     5d6:	51 05       	cpc	r21, r1
     5d8:	09 f4       	brne	.+2      	; 0x5dc <DIO_u8GetPinValue+0x70>
     5da:	41 c0       	rjmp	.+130    	; 0x65e <DIO_u8GetPinValue+0xf2>
     5dc:	8f 81       	ldd	r24, Y+7	; 0x07
     5de:	98 85       	ldd	r25, Y+8	; 0x08
     5e0:	83 30       	cpi	r24, 0x03	; 3
     5e2:	91 05       	cpc	r25, r1
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <DIO_u8GetPinValue+0x7c>
     5e6:	58 c0       	rjmp	.+176    	; 0x698 <DIO_u8GetPinValue+0x12c>
     5e8:	74 c0       	rjmp	.+232    	; 0x6d2 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
     5ea:	e9 e3       	ldi	r30, 0x39	; 57
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	28 2f       	mov	r18, r24
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	8c 81       	ldd	r24, Y+4	; 0x04
     5f6:	88 2f       	mov	r24, r24
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a9 01       	movw	r20, r18
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_u8GetPinValue+0x96>
     5fe:	55 95       	asr	r21
     600:	47 95       	ror	r20
     602:	8a 95       	dec	r24
     604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_u8GetPinValue+0x92>
     606:	ca 01       	movw	r24, r20
     608:	81 70       	andi	r24, 0x01	; 1
     60a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	88 23       	and	r24, r24
     610:	21 f4       	brne	.+8      	; 0x61a <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     612:	ed 81       	ldd	r30, Y+5	; 0x05
     614:	fe 81       	ldd	r31, Y+6	; 0x06
     616:	10 82       	st	Z, r1
     618:	5f c0       	rjmp	.+190    	; 0x6d8 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     61a:	ed 81       	ldd	r30, Y+5	; 0x05
     61c:	fe 81       	ldd	r31, Y+6	; 0x06
     61e:	81 e0       	ldi	r24, 0x01	; 1
     620:	80 83       	st	Z, r24
     622:	5a c0       	rjmp	.+180    	; 0x6d8 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
     624:	e6 e3       	ldi	r30, 0x36	; 54
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	28 2f       	mov	r18, r24
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	8c 81       	ldd	r24, Y+4	; 0x04
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	a9 01       	movw	r20, r18
     636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_u8GetPinValue+0xd0>
     638:	55 95       	asr	r21
     63a:	47 95       	ror	r20
     63c:	8a 95       	dec	r24
     63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_u8GetPinValue+0xcc>
     640:	ca 01       	movw	r24, r20
     642:	81 70       	andi	r24, 0x01	; 1
     644:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     646:	89 81       	ldd	r24, Y+1	; 0x01
     648:	88 23       	and	r24, r24
     64a:	21 f4       	brne	.+8      	; 0x654 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     64c:	ed 81       	ldd	r30, Y+5	; 0x05
     64e:	fe 81       	ldd	r31, Y+6	; 0x06
     650:	10 82       	st	Z, r1
     652:	42 c0       	rjmp	.+132    	; 0x6d8 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     654:	ed 81       	ldd	r30, Y+5	; 0x05
     656:	fe 81       	ldd	r31, Y+6	; 0x06
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 83       	st	Z, r24
     65c:	3d c0       	rjmp	.+122    	; 0x6d8 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
     65e:	e3 e3       	ldi	r30, 0x33	; 51
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	28 2f       	mov	r18, r24
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	8c 81       	ldd	r24, Y+4	; 0x04
     66a:	88 2f       	mov	r24, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	a9 01       	movw	r20, r18
     670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_u8GetPinValue+0x10a>
     672:	55 95       	asr	r21
     674:	47 95       	ror	r20
     676:	8a 95       	dec	r24
     678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_u8GetPinValue+0x106>
     67a:	ca 01       	movw	r24, r20
     67c:	81 70       	andi	r24, 0x01	; 1
     67e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	88 23       	and	r24, r24
     684:	21 f4       	brne	.+8      	; 0x68e <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     686:	ed 81       	ldd	r30, Y+5	; 0x05
     688:	fe 81       	ldd	r31, Y+6	; 0x06
     68a:	10 82       	st	Z, r1
     68c:	25 c0       	rjmp	.+74     	; 0x6d8 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     68e:	ed 81       	ldd	r30, Y+5	; 0x05
     690:	fe 81       	ldd	r31, Y+6	; 0x06
     692:	81 e0       	ldi	r24, 0x01	; 1
     694:	80 83       	st	Z, r24
     696:	20 c0       	rjmp	.+64     	; 0x6d8 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
     698:	e0 e3       	ldi	r30, 0x30	; 48
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	28 2f       	mov	r18, r24
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	8c 81       	ldd	r24, Y+4	; 0x04
     6a4:	88 2f       	mov	r24, r24
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	a9 01       	movw	r20, r18
     6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_u8GetPinValue+0x144>
     6ac:	55 95       	asr	r21
     6ae:	47 95       	ror	r20
     6b0:	8a 95       	dec	r24
     6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_u8GetPinValue+0x140>
     6b4:	ca 01       	movw	r24, r20
     6b6:	81 70       	andi	r24, 0x01	; 1
     6b8:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     6ba:	89 81       	ldd	r24, Y+1	; 0x01
     6bc:	88 23       	and	r24, r24
     6be:	21 f4       	brne	.+8      	; 0x6c8 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     6c0:	ed 81       	ldd	r30, Y+5	; 0x05
     6c2:	fe 81       	ldd	r31, Y+6	; 0x06
     6c4:	10 82       	st	Z, r1
     6c6:	08 c0       	rjmp	.+16     	; 0x6d8 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     6c8:	ed 81       	ldd	r30, Y+5	; 0x05
     6ca:	fe 81       	ldd	r31, Y+6	; 0x06
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	80 83       	st	Z, r24
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
     6d2:	1a 82       	std	Y+2, r1	; 0x02
     6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     6d6:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
}
     6da:	28 96       	adiw	r28, 0x08	; 8
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	cf 91       	pop	r28
     6e8:	df 91       	pop	r29
     6ea:	08 95       	ret

000006ec <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
     6ec:	df 93       	push	r29
     6ee:	cf 93       	push	r28
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	2d 97       	sbiw	r28, 0x0d	; 13
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	8a 83       	std	Y+2, r24	; 0x02
     702:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	88 23       	and	r24, r24
     70c:	21 f0       	breq	.+8      	; 0x716 <DIO_u8SetPortDirection+0x2a>
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	09 f0       	breq	.+2      	; 0x716 <DIO_u8SetPortDirection+0x2a>
     714:	82 c0       	rjmp	.+260    	; 0x81a <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	28 2f       	mov	r18, r24
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	3d 87       	std	Y+13, r19	; 0x0d
     71e:	2c 87       	std	Y+12, r18	; 0x0c
     720:	8c 85       	ldd	r24, Y+12	; 0x0c
     722:	9d 85       	ldd	r25, Y+13	; 0x0d
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	91 05       	cpc	r25, r1
     728:	71 f1       	breq	.+92     	; 0x786 <DIO_u8SetPortDirection+0x9a>
     72a:	2c 85       	ldd	r18, Y+12	; 0x0c
     72c:	3d 85       	ldd	r19, Y+13	; 0x0d
     72e:	22 30       	cpi	r18, 0x02	; 2
     730:	31 05       	cpc	r19, r1
     732:	2c f4       	brge	.+10     	; 0x73e <DIO_u8SetPortDirection+0x52>
     734:	8c 85       	ldd	r24, Y+12	; 0x0c
     736:	9d 85       	ldd	r25, Y+13	; 0x0d
     738:	00 97       	sbiw	r24, 0x00	; 0
     73a:	69 f0       	breq	.+26     	; 0x756 <DIO_u8SetPortDirection+0x6a>
     73c:	6c c0       	rjmp	.+216    	; 0x816 <DIO_u8SetPortDirection+0x12a>
     73e:	2c 85       	ldd	r18, Y+12	; 0x0c
     740:	3d 85       	ldd	r19, Y+13	; 0x0d
     742:	22 30       	cpi	r18, 0x02	; 2
     744:	31 05       	cpc	r19, r1
     746:	b9 f1       	breq	.+110    	; 0x7b6 <DIO_u8SetPortDirection+0xca>
     748:	8c 85       	ldd	r24, Y+12	; 0x0c
     74a:	9d 85       	ldd	r25, Y+13	; 0x0d
     74c:	83 30       	cpi	r24, 0x03	; 3
     74e:	91 05       	cpc	r25, r1
     750:	09 f4       	brne	.+2      	; 0x754 <DIO_u8SetPortDirection+0x68>
     752:	49 c0       	rjmp	.+146    	; 0x7e6 <DIO_u8SetPortDirection+0xfa>
     754:	60 c0       	rjmp	.+192    	; 0x816 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	28 2f       	mov	r18, r24
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	3b 87       	std	Y+11, r19	; 0x0b
     75e:	2a 87       	std	Y+10, r18	; 0x0a
     760:	8a 85       	ldd	r24, Y+10	; 0x0a
     762:	9b 85       	ldd	r25, Y+11	; 0x0b
     764:	00 97       	sbiw	r24, 0x00	; 0
     766:	31 f0       	breq	.+12     	; 0x774 <DIO_u8SetPortDirection+0x88>
     768:	2a 85       	ldd	r18, Y+10	; 0x0a
     76a:	3b 85       	ldd	r19, Y+11	; 0x0b
     76c:	21 30       	cpi	r18, 0x01	; 1
     76e:	31 05       	cpc	r19, r1
     770:	29 f0       	breq	.+10     	; 0x77c <DIO_u8SetPortDirection+0x90>
     772:	54 c0       	rjmp	.+168    	; 0x81c <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
     774:	ea e3       	ldi	r30, 0x3A	; 58
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	10 82       	st	Z, r1
     77a:	50 c0       	rjmp	.+160    	; 0x81c <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
     77c:	ea e3       	ldi	r30, 0x3A	; 58
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	80 83       	st	Z, r24
     784:	4b c0       	rjmp	.+150    	; 0x81c <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
     786:	8b 81       	ldd	r24, Y+3	; 0x03
     788:	28 2f       	mov	r18, r24
     78a:	30 e0       	ldi	r19, 0x00	; 0
     78c:	39 87       	std	Y+9, r19	; 0x09
     78e:	28 87       	std	Y+8, r18	; 0x08
     790:	88 85       	ldd	r24, Y+8	; 0x08
     792:	99 85       	ldd	r25, Y+9	; 0x09
     794:	00 97       	sbiw	r24, 0x00	; 0
     796:	31 f0       	breq	.+12     	; 0x7a4 <DIO_u8SetPortDirection+0xb8>
     798:	28 85       	ldd	r18, Y+8	; 0x08
     79a:	39 85       	ldd	r19, Y+9	; 0x09
     79c:	21 30       	cpi	r18, 0x01	; 1
     79e:	31 05       	cpc	r19, r1
     7a0:	29 f0       	breq	.+10     	; 0x7ac <DIO_u8SetPortDirection+0xc0>
     7a2:	3c c0       	rjmp	.+120    	; 0x81c <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
     7a4:	e7 e3       	ldi	r30, 0x37	; 55
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	10 82       	st	Z, r1
     7aa:	38 c0       	rjmp	.+112    	; 0x81c <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
     7ac:	e7 e3       	ldi	r30, 0x37	; 55
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	80 83       	st	Z, r24
     7b4:	33 c0       	rjmp	.+102    	; 0x81c <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
     7b6:	8b 81       	ldd	r24, Y+3	; 0x03
     7b8:	28 2f       	mov	r18, r24
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	3f 83       	std	Y+7, r19	; 0x07
     7be:	2e 83       	std	Y+6, r18	; 0x06
     7c0:	8e 81       	ldd	r24, Y+6	; 0x06
     7c2:	9f 81       	ldd	r25, Y+7	; 0x07
     7c4:	00 97       	sbiw	r24, 0x00	; 0
     7c6:	31 f0       	breq	.+12     	; 0x7d4 <DIO_u8SetPortDirection+0xe8>
     7c8:	2e 81       	ldd	r18, Y+6	; 0x06
     7ca:	3f 81       	ldd	r19, Y+7	; 0x07
     7cc:	21 30       	cpi	r18, 0x01	; 1
     7ce:	31 05       	cpc	r19, r1
     7d0:	29 f0       	breq	.+10     	; 0x7dc <DIO_u8SetPortDirection+0xf0>
     7d2:	24 c0       	rjmp	.+72     	; 0x81c <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
     7d4:	e4 e3       	ldi	r30, 0x34	; 52
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	10 82       	st	Z, r1
     7da:	20 c0       	rjmp	.+64     	; 0x81c <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
     7dc:	e4 e3       	ldi	r30, 0x34	; 52
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	80 83       	st	Z, r24
     7e4:	1b c0       	rjmp	.+54     	; 0x81c <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	28 2f       	mov	r18, r24
     7ea:	30 e0       	ldi	r19, 0x00	; 0
     7ec:	3d 83       	std	Y+5, r19	; 0x05
     7ee:	2c 83       	std	Y+4, r18	; 0x04
     7f0:	8c 81       	ldd	r24, Y+4	; 0x04
     7f2:	9d 81       	ldd	r25, Y+5	; 0x05
     7f4:	00 97       	sbiw	r24, 0x00	; 0
     7f6:	31 f0       	breq	.+12     	; 0x804 <DIO_u8SetPortDirection+0x118>
     7f8:	2c 81       	ldd	r18, Y+4	; 0x04
     7fa:	3d 81       	ldd	r19, Y+5	; 0x05
     7fc:	21 30       	cpi	r18, 0x01	; 1
     7fe:	31 05       	cpc	r19, r1
     800:	29 f0       	breq	.+10     	; 0x80c <DIO_u8SetPortDirection+0x120>
     802:	0c c0       	rjmp	.+24     	; 0x81c <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
     804:	e1 e3       	ldi	r30, 0x31	; 49
     806:	f0 e0       	ldi	r31, 0x00	; 0
     808:	10 82       	st	Z, r1
     80a:	08 c0       	rjmp	.+16     	; 0x81c <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
     80c:	e1 e3       	ldi	r30, 0x31	; 49
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	80 83       	st	Z, r24
     814:	03 c0       	rjmp	.+6      	; 0x81c <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
     816:	19 82       	std	Y+1, r1	; 0x01
     818:	01 c0       	rjmp	.+2      	; 0x81c <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     81a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     81c:	89 81       	ldd	r24, Y+1	; 0x01
}
     81e:	2d 96       	adiw	r28, 0x0d	; 13
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	cf 91       	pop	r28
     82c:	df 91       	pop	r29
     82e:	08 95       	ret

00000830 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
     830:	df 93       	push	r29
     832:	cf 93       	push	r28
     834:	00 d0       	rcall	.+0      	; 0x836 <DIO_u8SetPortValue+0x6>
     836:	00 d0       	rcall	.+0      	; 0x838 <DIO_u8SetPortValue+0x8>
     838:	0f 92       	push	r0
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	8a 83       	std	Y+2, r24	; 0x02
     840:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
     846:	8a 81       	ldd	r24, Y+2	; 0x02
     848:	28 2f       	mov	r18, r24
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	3d 83       	std	Y+5, r19	; 0x05
     84e:	2c 83       	std	Y+4, r18	; 0x04
     850:	8c 81       	ldd	r24, Y+4	; 0x04
     852:	9d 81       	ldd	r25, Y+5	; 0x05
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	91 05       	cpc	r25, r1
     858:	d1 f0       	breq	.+52     	; 0x88e <__stack+0x2f>
     85a:	2c 81       	ldd	r18, Y+4	; 0x04
     85c:	3d 81       	ldd	r19, Y+5	; 0x05
     85e:	22 30       	cpi	r18, 0x02	; 2
     860:	31 05       	cpc	r19, r1
     862:	2c f4       	brge	.+10     	; 0x86e <__stack+0xf>
     864:	8c 81       	ldd	r24, Y+4	; 0x04
     866:	9d 81       	ldd	r25, Y+5	; 0x05
     868:	00 97       	sbiw	r24, 0x00	; 0
     86a:	61 f0       	breq	.+24     	; 0x884 <__stack+0x25>
     86c:	1f c0       	rjmp	.+62     	; 0x8ac <__stack+0x4d>
     86e:	2c 81       	ldd	r18, Y+4	; 0x04
     870:	3d 81       	ldd	r19, Y+5	; 0x05
     872:	22 30       	cpi	r18, 0x02	; 2
     874:	31 05       	cpc	r19, r1
     876:	81 f0       	breq	.+32     	; 0x898 <__stack+0x39>
     878:	8c 81       	ldd	r24, Y+4	; 0x04
     87a:	9d 81       	ldd	r25, Y+5	; 0x05
     87c:	83 30       	cpi	r24, 0x03	; 3
     87e:	91 05       	cpc	r25, r1
     880:	81 f0       	breq	.+32     	; 0x8a2 <__stack+0x43>
     882:	14 c0       	rjmp	.+40     	; 0x8ac <__stack+0x4d>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
     884:	eb e3       	ldi	r30, 0x3B	; 59
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	80 83       	st	Z, r24
     88c:	10 c0       	rjmp	.+32     	; 0x8ae <__stack+0x4f>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
     88e:	e8 e3       	ldi	r30, 0x38	; 56
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	80 83       	st	Z, r24
     896:	0b c0       	rjmp	.+22     	; 0x8ae <__stack+0x4f>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
     898:	e5 e3       	ldi	r30, 0x35	; 53
     89a:	f0 e0       	ldi	r31, 0x00	; 0
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	80 83       	st	Z, r24
     8a0:	06 c0       	rjmp	.+12     	; 0x8ae <__stack+0x4f>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
     8a2:	e2 e3       	ldi	r30, 0x32	; 50
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	80 83       	st	Z, r24
     8aa:	01 c0       	rjmp	.+2      	; 0x8ae <__stack+0x4f>
		default:Local_u8ErrorState = STD_TYPES_NOK;
     8ac:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     8ae:	89 81       	ldd	r24, Y+1	; 0x01
}
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	cf 91       	pop	r28
     8bc:	df 91       	pop	r29
     8be:	08 95       	ret

000008c0 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
     8c0:	df 93       	push	r29
     8c2:	cf 93       	push	r28
     8c4:	00 d0       	rcall	.+0      	; 0x8c6 <DIO_u8GetPortValue+0x6>
     8c6:	00 d0       	rcall	.+0      	; 0x8c8 <DIO_u8GetPortValue+0x8>
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <DIO_u8GetPortValue+0xa>
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
     8ce:	8a 83       	std	Y+2, r24	; 0x02
     8d0:	7c 83       	std	Y+4, r23	; 0x04
     8d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	9c 81       	ldd	r25, Y+4	; 0x04
     8dc:	00 97       	sbiw	r24, 0x00	; 0
     8de:	e9 f1       	breq	.+122    	; 0x95a <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	28 2f       	mov	r18, r24
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	3e 83       	std	Y+6, r19	; 0x06
     8e8:	2d 83       	std	Y+5, r18	; 0x05
     8ea:	8d 81       	ldd	r24, Y+5	; 0x05
     8ec:	9e 81       	ldd	r25, Y+6	; 0x06
     8ee:	81 30       	cpi	r24, 0x01	; 1
     8f0:	91 05       	cpc	r25, r1
     8f2:	e1 f0       	breq	.+56     	; 0x92c <DIO_u8GetPortValue+0x6c>
     8f4:	2d 81       	ldd	r18, Y+5	; 0x05
     8f6:	3e 81       	ldd	r19, Y+6	; 0x06
     8f8:	22 30       	cpi	r18, 0x02	; 2
     8fa:	31 05       	cpc	r19, r1
     8fc:	2c f4       	brge	.+10     	; 0x908 <DIO_u8GetPortValue+0x48>
     8fe:	8d 81       	ldd	r24, Y+5	; 0x05
     900:	9e 81       	ldd	r25, Y+6	; 0x06
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	61 f0       	breq	.+24     	; 0x91e <DIO_u8GetPortValue+0x5e>
     906:	27 c0       	rjmp	.+78     	; 0x956 <DIO_u8GetPortValue+0x96>
     908:	2d 81       	ldd	r18, Y+5	; 0x05
     90a:	3e 81       	ldd	r19, Y+6	; 0x06
     90c:	22 30       	cpi	r18, 0x02	; 2
     90e:	31 05       	cpc	r19, r1
     910:	a1 f0       	breq	.+40     	; 0x93a <DIO_u8GetPortValue+0x7a>
     912:	8d 81       	ldd	r24, Y+5	; 0x05
     914:	9e 81       	ldd	r25, Y+6	; 0x06
     916:	83 30       	cpi	r24, 0x03	; 3
     918:	91 05       	cpc	r25, r1
     91a:	b1 f0       	breq	.+44     	; 0x948 <DIO_u8GetPortValue+0x88>
     91c:	1c c0       	rjmp	.+56     	; 0x956 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
     91e:	e9 e3       	ldi	r30, 0x39	; 57
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	eb 81       	ldd	r30, Y+3	; 0x03
     926:	fc 81       	ldd	r31, Y+4	; 0x04
     928:	80 83       	st	Z, r24
     92a:	18 c0       	rjmp	.+48     	; 0x95c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
     92c:	e6 e3       	ldi	r30, 0x36	; 54
     92e:	f0 e0       	ldi	r31, 0x00	; 0
     930:	80 81       	ld	r24, Z
     932:	eb 81       	ldd	r30, Y+3	; 0x03
     934:	fc 81       	ldd	r31, Y+4	; 0x04
     936:	80 83       	st	Z, r24
     938:	11 c0       	rjmp	.+34     	; 0x95c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
     93a:	e3 e3       	ldi	r30, 0x33	; 51
     93c:	f0 e0       	ldi	r31, 0x00	; 0
     93e:	80 81       	ld	r24, Z
     940:	eb 81       	ldd	r30, Y+3	; 0x03
     942:	fc 81       	ldd	r31, Y+4	; 0x04
     944:	80 83       	st	Z, r24
     946:	0a c0       	rjmp	.+20     	; 0x95c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
     948:	e0 e3       	ldi	r30, 0x30	; 48
     94a:	f0 e0       	ldi	r31, 0x00	; 0
     94c:	80 81       	ld	r24, Z
     94e:	eb 81       	ldd	r30, Y+3	; 0x03
     950:	fc 81       	ldd	r31, Y+4	; 0x04
     952:	80 83       	st	Z, r24
     954:	03 c0       	rjmp	.+6      	; 0x95c <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
     956:	19 82       	std	Y+1, r1	; 0x01
     958:	01 c0       	rjmp	.+2      	; 0x95c <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     95a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	26 96       	adiw	r28, 0x06	; 6
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	cf 91       	pop	r28
     96c:	df 91       	pop	r29
     96e:	08 95       	ret

00000970 <SPI_voidInit>:
/*
if Master Mode you need to Select all things
if Slave Mode you need to Select Data Order,Slave Mode,Clock Polarity and Clock Phase
*/
void SPI_voidInit(void)
{
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPI_u8_SPCR_REG,SPCR_SPR0);
	/* Enable SPI */
	SET_BIT(SPI_u8_SPCR_REG,SPCR_SPE);
#elif SPI_u8_MODE == SPI_u8_SLAVE_MODE
	/* Data Order = MSB first */
	CLR_BIT(SPI_u8_SPCR_REG,SPCR_DORD);
     978:	ad e2       	ldi	r26, 0x2D	; 45
     97a:	b0 e0       	ldi	r27, 0x00	; 0
     97c:	ed e2       	ldi	r30, 0x2D	; 45
     97e:	f0 e0       	ldi	r31, 0x00	; 0
     980:	80 81       	ld	r24, Z
     982:	8f 7d       	andi	r24, 0xDF	; 223
     984:	8c 93       	st	X, r24
	/* Select Slave Mode */
	CLR_BIT(SPI_u8_SPCR_REG,SPCR_MSTR);
     986:	ad e2       	ldi	r26, 0x2D	; 45
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	ed e2       	ldi	r30, 0x2D	; 45
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	8f 7e       	andi	r24, 0xEF	; 239
     992:	8c 93       	st	X, r24
	/* Choose Clock Polarity and Clock Phase => Falling,Raising / Setup,Sample */
	SET_BIT(SPI_u8_SPCR_REG,SPCR_CPOL);
     994:	ad e2       	ldi	r26, 0x2D	; 45
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	ed e2       	ldi	r30, 0x2D	; 45
     99a:	f0 e0       	ldi	r31, 0x00	; 0
     99c:	80 81       	ld	r24, Z
     99e:	88 60       	ori	r24, 0x08	; 8
     9a0:	8c 93       	st	X, r24
	SET_BIT(SPI_u8_SPCR_REG,SPCR_CPHA);
     9a2:	ad e2       	ldi	r26, 0x2D	; 45
     9a4:	b0 e0       	ldi	r27, 0x00	; 0
     9a6:	ed e2       	ldi	r30, 0x2D	; 45
     9a8:	f0 e0       	ldi	r31, 0x00	; 0
     9aa:	80 81       	ld	r24, Z
     9ac:	84 60       	ori	r24, 0x04	; 4
     9ae:	8c 93       	st	X, r24
	/* Enable SPI */
	SET_BIT(SPI_u8_SPCR_REG,SPCR_SPE);
     9b0:	ad e2       	ldi	r26, 0x2D	; 45
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	ed e2       	ldi	r30, 0x2D	; 45
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	80 81       	ld	r24, Z
     9ba:	80 64       	ori	r24, 0x40	; 64
     9bc:	8c 93       	st	X, r24
#endif
}
     9be:	cf 91       	pop	r28
     9c0:	df 91       	pop	r29
     9c2:	08 95       	ret

000009c4 <SPI_u8TransReceive>:

u8   SPI_u8TransReceive(u8 Copy_u8TransmittedByte, u8 * Copy_pu8ReceivedByte)
{
     9c4:	df 93       	push	r29
     9c6:	cf 93       	push	r28
     9c8:	00 d0       	rcall	.+0      	; 0x9ca <SPI_u8TransReceive+0x6>
     9ca:	00 d0       	rcall	.+0      	; 0x9cc <SPI_u8TransReceive+0x8>
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	8a 83       	std	Y+2, r24	; 0x02
     9d2:	7c 83       	std	Y+4, r23	; 0x04
     9d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     9d6:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8ReceivedByte != NULL)
     9d8:	8b 81       	ldd	r24, Y+3	; 0x03
     9da:	9c 81       	ldd	r25, Y+4	; 0x04
     9dc:	00 97       	sbiw	r24, 0x00	; 0
     9de:	89 f0       	breq	.+34     	; 0xa02 <SPI_u8TransReceive+0x3e>
	{
		/* Send Byte */
		SPI_u8_SPDR_REG = Copy_u8TransmittedByte;
     9e0:	ef e2       	ldi	r30, 0x2F	; 47
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	8a 81       	ldd	r24, Y+2	; 0x02
     9e6:	80 83       	st	Z, r24
		/* Check if the transmission is completed */
		while((GET_BIT(SPI_u8_SPSR_REG,SPSR_SPIF)) == 0);
     9e8:	ee e2       	ldi	r30, 0x2E	; 46
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	88 23       	and	r24, r24
     9f0:	dc f7       	brge	.-10     	; 0x9e8 <SPI_u8TransReceive+0x24>
		/* Read Byte */
		*Copy_pu8ReceivedByte = SPI_u8_SPDR_REG;
     9f2:	ef e2       	ldi	r30, 0x2F	; 47
     9f4:	f0 e0       	ldi	r31, 0x00	; 0
     9f6:	80 81       	ld	r24, Z
     9f8:	eb 81       	ldd	r30, Y+3	; 0x03
     9fa:	fc 81       	ldd	r31, Y+4	; 0x04
     9fc:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     a02:	89 81       	ldd	r24, Y+1	; 0x01
}
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	cf 91       	pop	r28
     a0e:	df 91       	pop	r29
     a10:	08 95       	ret

00000a12 <SPI_voidSlaveSendByte>:

void SPI_voidSlaveSendByte (u8 Copy_u8DataByte)
{
     a12:	df 93       	push	r29
     a14:	cf 93       	push	r28
     a16:	0f 92       	push	r0
     a18:	cd b7       	in	r28, 0x3d	; 61
     a1a:	de b7       	in	r29, 0x3e	; 62
     a1c:	89 83       	std	Y+1, r24	; 0x01
	SPI_u8_SPDR_REG = Copy_u8DataByte;
     a1e:	ef e2       	ldi	r30, 0x2F	; 47
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	89 81       	ldd	r24, Y+1	; 0x01
     a24:	80 83       	st	Z, r24
}
     a26:	0f 90       	pop	r0
     a28:	cf 91       	pop	r28
     a2a:	df 91       	pop	r29
     a2c:	08 95       	ret

00000a2e <SPI_u8ReceiveByte>:

u8   SPI_u8ReceiveByte(u8 * Copy_pu8ReceivedByte)
{
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	00 d0       	rcall	.+0      	; 0xa34 <SPI_u8ReceiveByte+0x6>
     a34:	0f 92       	push	r0
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	9b 83       	std	Y+3, r25	; 0x03
     a3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     a3e:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8ReceivedByte != NULL)
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	9b 81       	ldd	r25, Y+3	; 0x03
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	69 f0       	breq	.+26     	; 0xa62 <SPI_u8ReceiveByte+0x34>
	{
		/* Check if the transmission is completed */
		while((GET_BIT(SPI_u8_SPSR_REG,SPSR_SPIF)) == 0);
     a48:	ee e2       	ldi	r30, 0x2E	; 46
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	80 81       	ld	r24, Z
     a4e:	88 23       	and	r24, r24
     a50:	dc f7       	brge	.-10     	; 0xa48 <SPI_u8ReceiveByte+0x1a>
		/* Read Byte */
		*Copy_pu8ReceivedByte = SPI_u8_SPDR_REG;
     a52:	ef e2       	ldi	r30, 0x2F	; 47
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	ea 81       	ldd	r30, Y+2	; 0x02
     a5a:	fb 81       	ldd	r31, Y+3	; 0x03
     a5c:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8ErrorState;
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	cf 91       	pop	r28
     a6c:	df 91       	pop	r29
     a6e:	08 95       	ret

00000a70 <UART_voidInit>:
static u8 UART_u8ReceiveCurrentIndex = 0;
static volatile u8 UART_u8BusyFlagRx = 0;
static u8 UART_u8ReceiveMessageSize = 0;

void UART_voidInit(void)
{
     a70:	df 93       	push	r29
     a72:	cf 93       	push	r28
     a74:	00 d0       	rcall	.+0      	; 0xa76 <UART_voidInit+0x6>
     a76:	0f 92       	push	r0
     a78:	cd b7       	in	r28, 0x3d	; 61
     a7a:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRate = UART_u8_BAUD_RATE;
     a7c:	83 e3       	ldi	r24, 0x33	; 51
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	9b 83       	std	Y+3, r25	; 0x03
     a82:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCValue = 0b10000000;
     a84:	80 e8       	ldi	r24, 0x80	; 128
     a86:	89 83       	std	Y+1, r24	; 0x01
	/* Baud Rate = 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BaudRate;
     a88:	e9 e2       	ldi	r30, 0x29	; 41
     a8a:	f0 e0       	ldi	r31, 0x00	; 0
     a8c:	8a 81       	ldd	r24, Y+2	; 0x02
     a8e:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BaudRate >> 8);
     a90:	e0 e4       	ldi	r30, 0x40	; 64
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	8a 81       	ldd	r24, Y+2	; 0x02
     a96:	9b 81       	ldd	r25, Y+3	; 0x03
     a98:	89 2f       	mov	r24, r25
     a9a:	99 27       	eor	r25, r25
     a9c:	80 83       	st	Z, r24
#if UART_u8_SPEED == UART_u8_NORMAL_SPEED
	/* Normal Speed */
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_U2X);
     a9e:	ab e2       	ldi	r26, 0x2B	; 43
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	eb e2       	ldi	r30, 0x2B	; 43
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	8d 7f       	andi	r24, 0xFD	; 253
     aaa:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRA_REG,UCSRA_U2X);
#endif

#if UART_u8_MPM_MODE == UART_u8_DISABLE_MPM
	/* Disable MPM */
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_MPCM);
     aac:	ab e2       	ldi	r26, 0x2B	; 43
     aae:	b0 e0       	ldi	r27, 0x00	; 0
     ab0:	eb e2       	ldi	r30, 0x2B	; 43
     ab2:	f0 e0       	ldi	r31, 0x00	; 0
     ab4:	80 81       	ld	r24, Z
     ab6:	8e 7f       	andi	r24, 0xFE	; 254
     ab8:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_UDRIE);
#endif

#if UART_u8_RXEN_MODE == UART_u8_ENABLE_RXEN
	/* Enable Rx */
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
     aba:	aa e2       	ldi	r26, 0x2A	; 42
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	ea e2       	ldi	r30, 0x2A	; 42
     ac0:	f0 e0       	ldi	r31, 0x00	; 0
     ac2:	80 81       	ld	r24, Z
     ac4:	80 61       	ori	r24, 0x10	; 16
     ac6:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
#endif

#if UART_u8_TXEN_MODE == UART_u8_ENABLE_TXEN
	/* Enable Tx */
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
     ac8:	aa e2       	ldi	r26, 0x2A	; 42
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	ea e2       	ldi	r30, 0x2A	; 42
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	80 81       	ld	r24, Z
     ad2:	88 60       	ori	r24, 0x08	; 8
     ad4:	8c 93       	st	X, r24
	/* Disable Tx */
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
#endif
	
	/* Select 8 bit Data */
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_UCSZ2);
     ad6:	aa e2       	ldi	r26, 0x2A	; 42
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	ea e2       	ldi	r30, 0x2A	; 42
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	80 81       	ld	r24, Z
     ae0:	8b 7f       	andi	r24, 0xFB	; 251
     ae2:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
     ae4:	89 81       	ldd	r24, Y+1	; 0x01
     ae6:	84 60       	ori	r24, 0x04	; 4
     ae8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	82 60       	ori	r24, 0x02	; 2
     aee:	89 83       	std	Y+1, r24	; 0x01
#if UART_u8_USART_MODE == UART_u8_ASYNCH_MODE
	/* Select Asynch Mode */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	8f 7b       	andi	r24, 0xBF	; 191
     af4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
#endif

#if UART_u8_PARITY_MODE == UART_u8_PARITY_DISABLE
	/* No Parity Bit */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM1);
     af6:	89 81       	ldd	r24, Y+1	; 0x01
     af8:	8f 7d       	andi	r24, 0xDF	; 223
     afa:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	8f 7e       	andi	r24, 0xEF	; 239
     b00:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
#endif

#if UART_u8_NO_STOP_BITS == UART_u8_ONE_BITS_STOP
	/* Enable 1 Stop Bits */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_USBS);
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	87 7f       	andi	r24, 0xF7	; 247
     b06:	89 83       	std	Y+1, r24	; 0x01
	/* Enable 2 Stop Bits */
	SET_BIT(Local_u8UCSRCValue,UCSRC_USBS);
#endif

	/* Update UCSRC Reg */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
     b08:	e0 e4       	ldi	r30, 0x40	; 64
     b0a:	f0 e0       	ldi	r31, 0x00	; 0
     b0c:	89 81       	ldd	r24, Y+1	; 0x01
     b0e:	80 83       	st	Z, r24
}
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	cf 91       	pop	r28
     b18:	df 91       	pop	r29
     b1a:	08 95       	ret

00000b1c <UART_voidSendByte>:

void UART_voidSendByte(u8 Copy_u8DataByte)
{
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	0f 92       	push	r0
     b22:	cd b7       	in	r28, 0x3d	; 61
     b24:	de b7       	in	r29, 0x3e	; 62
     b26:	89 83       	std	Y+1, r24	; 0x01
	/* wait until the transmit register is empty */
	while((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0);
     b28:	eb e2       	ldi	r30, 0x2B	; 43
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	82 95       	swap	r24
     b30:	86 95       	lsr	r24
     b32:	87 70       	andi	r24, 0x07	; 7
     b34:	88 2f       	mov	r24, r24
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	81 70       	andi	r24, 0x01	; 1
     b3a:	90 70       	andi	r25, 0x00	; 0
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	a1 f3       	breq	.-24     	; 0xb28 <UART_voidSendByte+0xc>
	/* Send Data Byte */
	UART_u8_UDR_REG = Copy_u8DataByte;
     b40:	ec e2       	ldi	r30, 0x2C	; 44
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	80 83       	st	Z, r24
}
     b48:	0f 90       	pop	r0
     b4a:	cf 91       	pop	r28
     b4c:	df 91       	pop	r29
     b4e:	08 95       	ret

00000b50 <UART_u8ReceiveByte>:

u8   UART_u8ReceiveByte(u8 * Copy_pu8RecByte)
{
     b50:	df 93       	push	r29
     b52:	cf 93       	push	r28
     b54:	00 d0       	rcall	.+0      	; 0xb56 <UART_u8ReceiveByte+0x6>
     b56:	0f 92       	push	r0
     b58:	cd b7       	in	r28, 0x3d	; 61
     b5a:	de b7       	in	r29, 0x3e	; 62
     b5c:	9b 83       	std	Y+3, r25	; 0x03
     b5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     b60:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8RecByte != NULL)
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	9b 81       	ldd	r25, Y+3	; 0x03
     b66:	00 97       	sbiw	r24, 0x00	; 0
     b68:	69 f0       	breq	.+26     	; 0xb84 <UART_u8ReceiveByte+0x34>
	{
		/* wait until the data is received */
		while((GET_BIT(UART_u8_UCSRA_REG,UCSRA_RXC)) == 0);
     b6a:	eb e2       	ldi	r30, 0x2B	; 43
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	88 23       	and	r24, r24
     b72:	dc f7       	brge	.-10     	; 0xb6a <UART_u8ReceiveByte+0x1a>
		/* Read Data */
		*Copy_pu8RecByte = UART_u8_UDR_REG;
     b74:	ec e2       	ldi	r30, 0x2C	; 44
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	80 81       	ld	r24, Z
     b7a:	ea 81       	ldd	r30, Y+2	; 0x02
     b7c:	fb 81       	ldd	r31, Y+3	; 0x03
     b7e:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     b84:	89 81       	ldd	r24, Y+1	; 0x01
}
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <UART_u8SendStringSynch>:

u8   UART_u8SendStringSynch(u8 * Copy_pu8String)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	27 97       	sbiw	r28, 0x07	; 7
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	9f 83       	std	Y+7, r25	; 0x07
     ba8:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeoutCounter = 0;
     bae:	19 82       	std	Y+1, r1	; 0x01
     bb0:	1a 82       	std	Y+2, r1	; 0x02
     bb2:	1b 82       	std	Y+3, r1	; 0x03
     bb4:	1c 82       	std	Y+4, r1	; 0x04
	// Check for NULL pointer
	if(Copy_pu8String != NULL)
     bb6:	8e 81       	ldd	r24, Y+6	; 0x06
     bb8:	9f 81       	ldd	r25, Y+7	; 0x07
     bba:	00 97       	sbiw	r24, 0x00	; 0
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <UART_u8SendStringSynch+0x2e>
     bbe:	87 c0       	rjmp	.+270    	; 0xcce <UART_u8SendStringSynch+0x13c>
     bc0:	7f c0       	rjmp	.+254    	; 0xcc0 <UART_u8SendStringSynch+0x12e>
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
		{
			Local_u32TimeoutCounter = 0;
     bc2:	19 82       	std	Y+1, r1	; 0x01
     bc4:	1a 82       	std	Y+2, r1	; 0x02
     bc6:	1b 82       	std	Y+3, r1	; 0x03
     bc8:	1c 82       	std	Y+4, r1	; 0x04
     bca:	0b c0       	rjmp	.+22     	; 0xbe2 <UART_u8SendStringSynch+0x50>
			// Wait until the data register is empty or timeout occurs
			while(((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
			{
				Local_u32TimeoutCounter++;
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	ab 81       	ldd	r26, Y+3	; 0x03
     bd2:	bc 81       	ldd	r27, Y+4	; 0x04
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	a1 1d       	adc	r26, r1
     bd8:	b1 1d       	adc	r27, r1
     bda:	89 83       	std	Y+1, r24	; 0x01
     bdc:	9a 83       	std	Y+2, r25	; 0x02
     bde:	ab 83       	std	Y+3, r26	; 0x03
     be0:	bc 83       	std	Y+4, r27	; 0x04
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
		{
			Local_u32TimeoutCounter = 0;
			// Wait until the data register is empty or timeout occurs
			while(((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
     be2:	eb e2       	ldi	r30, 0x2B	; 43
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	82 95       	swap	r24
     bea:	86 95       	lsr	r24
     bec:	87 70       	andi	r24, 0x07	; 7
     bee:	88 2f       	mov	r24, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	81 70       	andi	r24, 0x01	; 1
     bf4:	90 70       	andi	r25, 0x00	; 0
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	61 f4       	brne	.+24     	; 0xc12 <UART_u8SendStringSynch+0x80>
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	9a 81       	ldd	r25, Y+2	; 0x02
     bfe:	ab 81       	ldd	r26, Y+3	; 0x03
     c00:	bc 81       	ldd	r27, Y+4	; 0x04
     c02:	80 32       	cpi	r24, 0x20	; 32
     c04:	21 ea       	ldi	r18, 0xA1	; 161
     c06:	92 07       	cpc	r25, r18
     c08:	27 e0       	ldi	r18, 0x07	; 7
     c0a:	a2 07       	cpc	r26, r18
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	b2 07       	cpc	r27, r18
     c10:	e8 f2       	brcs	.-70     	; 0xbcc <UART_u8SendStringSynch+0x3a>
			{
				Local_u32TimeoutCounter++;
			}
			// Check if timeout occurred
            if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	ab 81       	ldd	r26, Y+3	; 0x03
     c18:	bc 81       	ldd	r27, Y+4	; 0x04
     c1a:	80 32       	cpi	r24, 0x20	; 32
     c1c:	21 ea       	ldi	r18, 0xA1	; 161
     c1e:	92 07       	cpc	r25, r18
     c20:	27 e0       	ldi	r18, 0x07	; 7
     c22:	a2 07       	cpc	r26, r18
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	b2 07       	cpc	r27, r18
     c28:	10 f0       	brcs	.+4      	; 0xc2e <UART_u8SendStringSynch+0x9c>
            {
                Local_u8ErrorState = STD_TYPES_NOK;
     c2a:	1d 82       	std	Y+5, r1	; 0x05
     c2c:	51 c0       	rjmp	.+162    	; 0xcd0 <UART_u8SendStringSynch+0x13e>
                break;
            }
            // Load the data register with the next character in the string
            UART_u8_UDR_REG = *Copy_pu8String;
     c2e:	ec e2       	ldi	r30, 0x2C	; 44
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	ae 81       	ldd	r26, Y+6	; 0x06
     c34:	bf 81       	ldd	r27, Y+7	; 0x07
     c36:	8c 91       	ld	r24, X
     c38:	80 83       	st	Z, r24

            // Wait for the transmission to complete or timeout occurs
             Local_u32TimeoutCounter = 0;
     c3a:	19 82       	std	Y+1, r1	; 0x01
     c3c:	1a 82       	std	Y+2, r1	; 0x02
     c3e:	1b 82       	std	Y+3, r1	; 0x03
     c40:	1c 82       	std	Y+4, r1	; 0x04
     c42:	0b c0       	rjmp	.+22     	; 0xc5a <UART_u8SendStringSynch+0xc8>
            while ((GET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
            {
                Local_u32TimeoutCounter++;
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	ab 81       	ldd	r26, Y+3	; 0x03
     c4a:	bc 81       	ldd	r27, Y+4	; 0x04
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	a1 1d       	adc	r26, r1
     c50:	b1 1d       	adc	r27, r1
     c52:	89 83       	std	Y+1, r24	; 0x01
     c54:	9a 83       	std	Y+2, r25	; 0x02
     c56:	ab 83       	std	Y+3, r26	; 0x03
     c58:	bc 83       	std	Y+4, r27	; 0x04
            // Load the data register with the next character in the string
            UART_u8_UDR_REG = *Copy_pu8String;

            // Wait for the transmission to complete or timeout occurs
             Local_u32TimeoutCounter = 0;
            while ((GET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
     c5a:	eb e2       	ldi	r30, 0x2B	; 43
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	80 81       	ld	r24, Z
     c60:	82 95       	swap	r24
     c62:	86 95       	lsr	r24
     c64:	86 95       	lsr	r24
     c66:	83 70       	andi	r24, 0x03	; 3
     c68:	88 2f       	mov	r24, r24
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	81 70       	andi	r24, 0x01	; 1
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	61 f4       	brne	.+24     	; 0xc8c <UART_u8SendStringSynch+0xfa>
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	9a 81       	ldd	r25, Y+2	; 0x02
     c78:	ab 81       	ldd	r26, Y+3	; 0x03
     c7a:	bc 81       	ldd	r27, Y+4	; 0x04
     c7c:	80 32       	cpi	r24, 0x20	; 32
     c7e:	21 ea       	ldi	r18, 0xA1	; 161
     c80:	92 07       	cpc	r25, r18
     c82:	27 e0       	ldi	r18, 0x07	; 7
     c84:	a2 07       	cpc	r26, r18
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	b2 07       	cpc	r27, r18
     c8a:	e0 f2       	brcs	.-72     	; 0xc44 <UART_u8SendStringSynch+0xb2>
            {
                Local_u32TimeoutCounter++;
            }
            // Check if timeout occurred
            if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	ab 81       	ldd	r26, Y+3	; 0x03
     c92:	bc 81       	ldd	r27, Y+4	; 0x04
     c94:	80 32       	cpi	r24, 0x20	; 32
     c96:	21 ea       	ldi	r18, 0xA1	; 161
     c98:	92 07       	cpc	r25, r18
     c9a:	27 e0       	ldi	r18, 0x07	; 7
     c9c:	a2 07       	cpc	r26, r18
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	b2 07       	cpc	r27, r18
     ca2:	10 f0       	brcs	.+4      	; 0xca8 <UART_u8SendStringSynch+0x116>
            {
                Local_u8ErrorState = STD_TYPES_NOK;
     ca4:	1d 82       	std	Y+5, r1	; 0x05
     ca6:	14 c0       	rjmp	.+40     	; 0xcd0 <UART_u8SendStringSynch+0x13e>
                break;
            }
            // Clear the transmit complete flag
            SET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC);
     ca8:	ab e2       	ldi	r26, 0x2B	; 43
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	eb e2       	ldi	r30, 0x2B	; 43
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	80 64       	ori	r24, 0x40	; 64
     cb4:	8c 93       	st	X, r24
            // Move to the next character
            Copy_pu8String++;
     cb6:	8e 81       	ldd	r24, Y+6	; 0x06
     cb8:	9f 81       	ldd	r25, Y+7	; 0x07
     cba:	01 96       	adiw	r24, 0x01	; 1
     cbc:	9f 83       	std	Y+7, r25	; 0x07
     cbe:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u32 Local_u32TimeoutCounter = 0;
	// Check for NULL pointer
	if(Copy_pu8String != NULL)
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
     cc0:	ee 81       	ldd	r30, Y+6	; 0x06
     cc2:	ff 81       	ldd	r31, Y+7	; 0x07
     cc4:	80 81       	ld	r24, Z
     cc6:	88 23       	and	r24, r24
     cc8:	09 f0       	breq	.+2      	; 0xccc <UART_u8SendStringSynch+0x13a>
     cca:	7b cf       	rjmp	.-266    	; 0xbc2 <UART_u8SendStringSynch+0x30>
     ccc:	01 c0       	rjmp	.+2      	; 0xcd0 <UART_u8SendStringSynch+0x13e>
            Copy_pu8String++;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     cce:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cd2:	27 96       	adiw	r28, 0x07	; 7
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	de bf       	out	0x3e, r29	; 62
     cda:	0f be       	out	0x3f, r0	; 63
     cdc:	cd bf       	out	0x3d, r28	; 61
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <UART_u8ReceiveStringSynch>:

u8   UART_u8ReceiveStringSynch(u8 * Copy_puReceivedString, u8 Copy_u8MessageSize)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	29 97       	sbiw	r28, 0x09	; 9
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	98 87       	std	Y+8, r25	; 0x08
     cfa:	8f 83       	std	Y+7, r24	; 0x07
     cfc:	69 87       	std	Y+9, r22	; 0x09
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32TimeoutCounter = 0;
     d02:	1a 82       	std	Y+2, r1	; 0x02
     d04:	1b 82       	std	Y+3, r1	; 0x03
     d06:	1c 82       	std	Y+4, r1	; 0x04
     d08:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8StringCounter = 0;
     d0a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_puReceivedString != NULL)
     d0c:	8f 81       	ldd	r24, Y+7	; 0x07
     d0e:	98 85       	ldd	r25, Y+8	; 0x08
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	09 f4       	brne	.+2      	; 0xd16 <UART_u8ReceiveStringSynch+0x32>
     d14:	4e c0       	rjmp	.+156    	; 0xdb2 <UART_u8ReceiveStringSynch+0xce>
     d16:	3e c0       	rjmp	.+124    	; 0xd94 <UART_u8ReceiveStringSynch+0xb0>
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
		{
			Local_u32TimeoutCounter = 0;
     d18:	1a 82       	std	Y+2, r1	; 0x02
     d1a:	1b 82       	std	Y+3, r1	; 0x03
     d1c:	1c 82       	std	Y+4, r1	; 0x04
     d1e:	1d 82       	std	Y+5, r1	; 0x05
     d20:	0b c0       	rjmp	.+22     	; 0xd38 <UART_u8ReceiveStringSynch+0x54>
			while (((GET_BIT(UART_u8_UCSRA_REG, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
			{
				Local_u32TimeoutCounter++;
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	9b 81       	ldd	r25, Y+3	; 0x03
     d26:	ac 81       	ldd	r26, Y+4	; 0x04
     d28:	bd 81       	ldd	r27, Y+5	; 0x05
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	a1 1d       	adc	r26, r1
     d2e:	b1 1d       	adc	r27, r1
     d30:	8a 83       	std	Y+2, r24	; 0x02
     d32:	9b 83       	std	Y+3, r25	; 0x03
     d34:	ac 83       	std	Y+4, r26	; 0x04
     d36:	bd 83       	std	Y+5, r27	; 0x05
	if (Copy_puReceivedString != NULL)
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
		{
			Local_u32TimeoutCounter = 0;
			while (((GET_BIT(UART_u8_UCSRA_REG, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
     d38:	eb e2       	ldi	r30, 0x2B	; 43
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	88 23       	and	r24, r24
     d40:	64 f0       	brlt	.+24     	; 0xd5a <UART_u8ReceiveStringSynch+0x76>
     d42:	8a 81       	ldd	r24, Y+2	; 0x02
     d44:	9b 81       	ldd	r25, Y+3	; 0x03
     d46:	ac 81       	ldd	r26, Y+4	; 0x04
     d48:	bd 81       	ldd	r27, Y+5	; 0x05
     d4a:	80 32       	cpi	r24, 0x20	; 32
     d4c:	21 ea       	ldi	r18, 0xA1	; 161
     d4e:	92 07       	cpc	r25, r18
     d50:	27 e0       	ldi	r18, 0x07	; 7
     d52:	a2 07       	cpc	r26, r18
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	b2 07       	cpc	r27, r18
     d58:	20 f3       	brcs	.-56     	; 0xd22 <UART_u8ReceiveStringSynch+0x3e>
			{
				Local_u32TimeoutCounter++;
			}
			if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
     d5a:	8a 81       	ldd	r24, Y+2	; 0x02
     d5c:	9b 81       	ldd	r25, Y+3	; 0x03
     d5e:	ac 81       	ldd	r26, Y+4	; 0x04
     d60:	bd 81       	ldd	r27, Y+5	; 0x05
     d62:	80 32       	cpi	r24, 0x20	; 32
     d64:	21 ea       	ldi	r18, 0xA1	; 161
     d66:	92 07       	cpc	r25, r18
     d68:	27 e0       	ldi	r18, 0x07	; 7
     d6a:	a2 07       	cpc	r26, r18
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	b2 07       	cpc	r27, r18
     d70:	10 f0       	brcs	.+4      	; 0xd76 <UART_u8ReceiveStringSynch+0x92>
			{
				Local_u8ErrorState = STD_TYPES_NOK;
     d72:	1e 82       	std	Y+6, r1	; 0x06
     d74:	14 c0       	rjmp	.+40     	; 0xd9e <UART_u8ReceiveStringSynch+0xba>
				break;
			}
			Copy_puReceivedString[Local_u8StringCounter] = UART_u8_UDR_REG;
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	8f 81       	ldd	r24, Y+7	; 0x07
     d7e:	98 85       	ldd	r25, Y+8	; 0x08
     d80:	dc 01       	movw	r26, r24
     d82:	a2 0f       	add	r26, r18
     d84:	b3 1f       	adc	r27, r19
     d86:	ec e2       	ldi	r30, 0x2C	; 44
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8c 93       	st	X, r24
			Local_u8StringCounter++;
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u32 Local_u32TimeoutCounter = 0;
	u8 Local_u8StringCounter = 0;
	if (Copy_puReceivedString != NULL)
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
     d94:	99 81       	ldd	r25, Y+1	; 0x01
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	98 17       	cp	r25, r24
     d9a:	08 f4       	brcc	.+2      	; 0xd9e <UART_u8ReceiveStringSynch+0xba>
     d9c:	bd cf       	rjmp	.-134    	; 0xd18 <UART_u8ReceiveStringSynch+0x34>
				break;
			}
			Copy_puReceivedString[Local_u8StringCounter] = UART_u8_UDR_REG;
			Local_u8StringCounter++;
		}
		Copy_puReceivedString[Local_u8StringCounter] = '\0'; // Null-terminate the string
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	28 2f       	mov	r18, r24
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	8f 81       	ldd	r24, Y+7	; 0x07
     da6:	98 85       	ldd	r25, Y+8	; 0x08
     da8:	fc 01       	movw	r30, r24
     daa:	e2 0f       	add	r30, r18
     dac:	f3 1f       	adc	r31, r19
     dae:	10 82       	st	Z, r1
     db0:	01 c0       	rjmp	.+2      	; 0xdb4 <UART_u8ReceiveStringSynch+0xd0>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     db2:	1e 82       	std	Y+6, r1	; 0x06
	}
	return Local_u8ErrorState;
     db4:	8e 81       	ldd	r24, Y+6	; 0x06
}
     db6:	29 96       	adiw	r28, 0x09	; 9
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	de bf       	out	0x3e, r29	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	cd bf       	out	0x3d, r28	; 61
     dc2:	cf 91       	pop	r28
     dc4:	df 91       	pop	r29
     dc6:	08 95       	ret

00000dc8 <UART_u8SendStringAsynch>:

u8   UART_u8SendStringAsynch(u8* Copy_pu8String, void(*Copy_pf)(void))
{
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	00 d0       	rcall	.+0      	; 0xdce <UART_u8SendStringAsynch+0x6>
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <UART_u8SendStringAsynch+0x8>
     dd0:	0f 92       	push	r0
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	9b 83       	std	Y+3, r25	; 0x03
     dd8:	8a 83       	std	Y+2, r24	; 0x02
     dda:	7d 83       	std	Y+5, r23	; 0x05
     ddc:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8String != NULL && Copy_pf != NULL)
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	00 97       	sbiw	r24, 0x00	; 0
     de8:	19 f1       	breq	.+70     	; 0xe30 <UART_u8SendStringAsynch+0x68>
     dea:	8c 81       	ldd	r24, Y+4	; 0x04
     dec:	9d 81       	ldd	r25, Y+5	; 0x05
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	f9 f0       	breq	.+62     	; 0xe30 <UART_u8SendStringAsynch+0x68>
    {
    	if(UART_u8BusyFlagTx == 0)
     df2:	80 91 65 00 	lds	r24, 0x0065
     df6:	88 23       	and	r24, r24
     df8:	c9 f4       	brne	.+50     	; 0xe2c <UART_u8SendStringAsynch+0x64>
    	{
	    	UART_u8BusyFlagTx = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	80 93 65 00 	sts	0x0065, r24
	        UART_pu8StringToSend = Copy_pu8String;
     e00:	8a 81       	ldd	r24, Y+2	; 0x02
     e02:	9b 81       	ldd	r25, Y+3	; 0x03
     e04:	90 93 63 00 	sts	0x0063, r25
     e08:	80 93 62 00 	sts	0x0062, r24
	        UART_pfTXC = Copy_pf;
     e0c:	8c 81       	ldd	r24, Y+4	; 0x04
     e0e:	9d 81       	ldd	r25, Y+5	; 0x05
     e10:	90 93 61 00 	sts	0x0061, r25
     e14:	80 93 60 00 	sts	0x0060, r24
	        UART_u8CurrentIndex = 0;
     e18:	10 92 64 00 	sts	0x0064, r1

	        // Enable UART Data Register Empty Interrupt
	        SET_BIT(UART_u8_UCSRB_REG, UCSRB_UDRIE);
     e1c:	aa e2       	ldi	r26, 0x2A	; 42
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	ea e2       	ldi	r30, 0x2A	; 42
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	80 62       	ori	r24, 0x20	; 32
     e28:	8c 93       	st	X, r24
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <UART_u8SendStringAsynch+0x6a>
    	}
    	else
    	{
    		Local_u8ErrorState = STD_TYPES_NOK;
     e2c:	19 82       	std	Y+1, r1	; 0x01
     e2e:	01 c0       	rjmp	.+2      	; 0xe32 <UART_u8SendStringAsynch+0x6a>
    	}
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
     e30:	19 82       	std	Y+1, r1	; 0x01
    }
	return Local_u8ErrorState;
     e32:	89 81       	ldd	r24, Y+1	; 0x01
}
     e34:	0f 90       	pop	r0
     e36:	0f 90       	pop	r0
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <__vector_14>:

void __vector_14(void) __attribute__((signal)); // UART Data Register Empty ISR
void __vector_14(void)
{
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
    if (UART_pu8StringToSend[UART_u8CurrentIndex] != '\0')
     e6e:	20 91 62 00 	lds	r18, 0x0062
     e72:	30 91 63 00 	lds	r19, 0x0063
     e76:	80 91 64 00 	lds	r24, 0x0064
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	f9 01       	movw	r30, r18
     e80:	e8 0f       	add	r30, r24
     e82:	f9 1f       	adc	r31, r25
     e84:	80 81       	ld	r24, Z
     e86:	88 23       	and	r24, r24
     e88:	a9 f0       	breq	.+42     	; 0xeb4 <__vector_14+0x70>
    {
        UART_u8_UDR_REG = UART_pu8StringToSend[UART_u8CurrentIndex];
     e8a:	ac e2       	ldi	r26, 0x2C	; 44
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	20 91 62 00 	lds	r18, 0x0062
     e92:	30 91 63 00 	lds	r19, 0x0063
     e96:	80 91 64 00 	lds	r24, 0x0064
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	f9 01       	movw	r30, r18
     ea0:	e8 0f       	add	r30, r24
     ea2:	f9 1f       	adc	r31, r25
     ea4:	80 81       	ld	r24, Z
     ea6:	8c 93       	st	X, r24
        UART_u8CurrentIndex++;
     ea8:	80 91 64 00 	lds	r24, 0x0064
     eac:	8f 5f       	subi	r24, 0xFF	; 255
     eae:	80 93 64 00 	sts	0x0064, r24
     eb2:	16 c0       	rjmp	.+44     	; 0xee0 <__vector_14+0x9c>
    }
    else
    {
        // Disable UART Data Register Empty Interrupt
        CLR_BIT(UART_u8_UCSRB_REG, UCSRB_UDRIE);
     eb4:	aa e2       	ldi	r26, 0x2A	; 42
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ea e2       	ldi	r30, 0x2A	; 42
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	8f 7d       	andi	r24, 0xDF	; 223
     ec0:	8c 93       	st	X, r24
        
        // Call the callback function
        if (UART_pfTXC != NULL)
     ec2:	80 91 60 00 	lds	r24, 0x0060
     ec6:	90 91 61 00 	lds	r25, 0x0061
     eca:	00 97       	sbiw	r24, 0x00	; 0
     ecc:	29 f0       	breq	.+10     	; 0xed8 <__vector_14+0x94>
        {
            UART_pfTXC();
     ece:	e0 91 60 00 	lds	r30, 0x0060
     ed2:	f0 91 61 00 	lds	r31, 0x0061
     ed6:	09 95       	icall
        }
        //Clear Busy Flag
        UART_u8BusyFlagTx = 0;
     ed8:	10 92 65 00 	sts	0x0065, r1
        //Clear The Global Counter
        UART_u8CurrentIndex = 0;
     edc:	10 92 64 00 	sts	0x0064, r1
    }
}
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0f be       	out	0x3f, r0	; 63
     f00:	0f 90       	pop	r0
     f02:	1f 90       	pop	r1
     f04:	18 95       	reti

00000f06 <UART_u8ReceiveStringAsynch>:

u8   UART_u8ReceiveStringAsynch(u8* Copy_pu8ReceivedString, void(*Copy_pf)(void), u8 Copy_u8MessageSize)
{
     f06:	df 93       	push	r29
     f08:	cf 93       	push	r28
     f0a:	00 d0       	rcall	.+0      	; 0xf0c <UART_u8ReceiveStringAsynch+0x6>
     f0c:	00 d0       	rcall	.+0      	; 0xf0e <UART_u8ReceiveStringAsynch+0x8>
     f0e:	00 d0       	rcall	.+0      	; 0xf10 <UART_u8ReceiveStringAsynch+0xa>
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
     f14:	9b 83       	std	Y+3, r25	; 0x03
     f16:	8a 83       	std	Y+2, r24	; 0x02
     f18:	7d 83       	std	Y+5, r23	; 0x05
     f1a:	6c 83       	std	Y+4, r22	; 0x04
     f1c:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	89 83       	std	Y+1, r24	; 0x01
	//Check Pointers
	if (Copy_pu8ReceivedString != NULL && Copy_pf != NULL && Copy_u8MessageSize > 0)
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	9b 81       	ldd	r25, Y+3	; 0x03
     f26:	00 97       	sbiw	r24, 0x00	; 0
     f28:	49 f1       	breq	.+82     	; 0xf7c <UART_u8ReceiveStringAsynch+0x76>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	29 f1       	breq	.+74     	; 0xf7c <UART_u8ReceiveStringAsynch+0x76>
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	88 23       	and	r24, r24
     f36:	11 f1       	breq	.+68     	; 0xf7c <UART_u8ReceiveStringAsynch+0x76>
	{
		//Check Busy Flag
		if(UART_u8BusyFlagRx == 0)
     f38:	80 91 6b 00 	lds	r24, 0x006B
     f3c:	88 23       	and	r24, r24
     f3e:	e1 f4       	brne	.+56     	; 0xf78 <UART_u8ReceiveStringAsynch+0x72>
		{
			//Set Busy Flag
			UART_u8BusyFlagRx = 1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 6b 00 	sts	0x006B, r24
			//Update Global Variable with Receive Message
		 	UART_pu8ReceivedString = Copy_pu8ReceivedString;
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	9b 81       	ldd	r25, Y+3	; 0x03
     f4a:	90 93 67 00 	sts	0x0067, r25
     f4e:	80 93 66 00 	sts	0x0066, r24
		 	//Update Global Pointer To function with Notification Function 
            UART_pfRXC = Copy_pf;
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	9d 81       	ldd	r25, Y+5	; 0x05
     f56:	90 93 69 00 	sts	0x0069, r25
     f5a:	80 93 68 00 	sts	0x0068, r24
            //Clear Index
            UART_u8ReceiveCurrentIndex = 0;
     f5e:	10 92 6a 00 	sts	0x006A, r1
            //Update Global Variable with Message Size
            UART_u8ReceiveMessageSize = Copy_u8MessageSize;
     f62:	8e 81       	ldd	r24, Y+6	; 0x06
     f64:	80 93 6c 00 	sts	0x006C, r24

            // Enable UART RX Complete Interrupt
            SET_BIT(UART_u8_UCSRB_REG, UCSRB_RXCIE);
     f68:	aa e2       	ldi	r26, 0x2A	; 42
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	ea e2       	ldi	r30, 0x2A	; 42
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	80 68       	ori	r24, 0x80	; 128
     f74:	8c 93       	st	X, r24
     f76:	03 c0       	rjmp	.+6      	; 0xf7e <UART_u8ReceiveStringAsynch+0x78>
		}
		else
    	{
    		Local_u8ErrorState = STD_TYPES_NOK;
     f78:	19 82       	std	Y+1, r1	; 0x01
     f7a:	01 c0       	rjmp	.+2      	; 0xf7e <UART_u8ReceiveStringAsynch+0x78>
    	}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f7c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f80:	26 96       	adiw	r28, 0x06	; 6
     f82:	0f b6       	in	r0, 0x3f	; 63
     f84:	f8 94       	cli
     f86:	de bf       	out	0x3e, r29	; 62
     f88:	0f be       	out	0x3f, r0	; 63
     f8a:	cd bf       	out	0x3d, r28	; 61
     f8c:	cf 91       	pop	r28
     f8e:	df 91       	pop	r29
     f90:	08 95       	ret

00000f92 <__vector_13>:
void __vector_13(void) __attribute__((signal)); // UART RX Complete ISR
void __vector_13(void)
{
     f92:	1f 92       	push	r1
     f94:	0f 92       	push	r0
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	0f 92       	push	r0
     f9a:	11 24       	eor	r1, r1
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
	if (UART_u8ReceiveCurrentIndex < UART_u8ReceiveMessageSize)
     fbc:	90 91 6a 00 	lds	r25, 0x006A
     fc0:	80 91 6c 00 	lds	r24, 0x006C
     fc4:	98 17       	cp	r25, r24
     fc6:	e0 f5       	brcc	.+120    	; 0x1040 <__vector_13+0xae>
	{
		UART_pu8ReceivedString[UART_u8ReceiveCurrentIndex] = UART_u8_UDR_REG;
     fc8:	20 91 66 00 	lds	r18, 0x0066
     fcc:	30 91 67 00 	lds	r19, 0x0067
     fd0:	80 91 6a 00 	lds	r24, 0x006A
     fd4:	88 2f       	mov	r24, r24
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	d9 01       	movw	r26, r18
     fda:	a8 0f       	add	r26, r24
     fdc:	b9 1f       	adc	r27, r25
     fde:	ec e2       	ldi	r30, 0x2C	; 44
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8c 93       	st	X, r24
		UART_u8ReceiveCurrentIndex++;
     fe6:	80 91 6a 00 	lds	r24, 0x006A
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	80 93 6a 00 	sts	0x006A, r24

		if (UART_u8ReceiveCurrentIndex >= UART_u8ReceiveMessageSize)
     ff0:	90 91 6a 00 	lds	r25, 0x006A
     ff4:	80 91 6c 00 	lds	r24, 0x006C
     ff8:	98 17       	cp	r25, r24
     ffa:	10 f1       	brcs	.+68     	; 0x1040 <__vector_13+0xae>
        {
            // Disable UART RX Complete Interrupt
            CLR_BIT(UART_u8_UCSRB_REG, UCSRB_RXCIE);
     ffc:	aa e2       	ldi	r26, 0x2A	; 42
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ea e2       	ldi	r30, 0x2A	; 42
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	8f 77       	andi	r24, 0x7F	; 127
    1008:	8c 93       	st	X, r24

            // Null-terminate the received string
            UART_pu8ReceivedString[UART_u8ReceiveCurrentIndex] = '\0';
    100a:	20 91 66 00 	lds	r18, 0x0066
    100e:	30 91 67 00 	lds	r19, 0x0067
    1012:	80 91 6a 00 	lds	r24, 0x006A
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	f9 01       	movw	r30, r18
    101c:	e8 0f       	add	r30, r24
    101e:	f9 1f       	adc	r31, r25
    1020:	10 82       	st	Z, r1

            // Call the callback function
            if (UART_pfRXC != NULL)
    1022:	80 91 68 00 	lds	r24, 0x0068
    1026:	90 91 69 00 	lds	r25, 0x0069
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	29 f0       	breq	.+10     	; 0x1038 <__vector_13+0xa6>
            {
                UART_pfRXC();
    102e:	e0 91 68 00 	lds	r30, 0x0068
    1032:	f0 91 69 00 	lds	r31, 0x0069
    1036:	09 95       	icall
            }
            // Clear Busy Flag
            UART_u8BusyFlagRx = 0;
    1038:	10 92 6b 00 	sts	0x006B, r1

            // Clear The Global Counter
            UART_u8ReceiveCurrentIndex = 0;
    103c:	10 92 6a 00 	sts	0x006A, r1
        }
	}
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	ff 91       	pop	r31
    1046:	ef 91       	pop	r30
    1048:	bf 91       	pop	r27
    104a:	af 91       	pop	r26
    104c:	9f 91       	pop	r25
    104e:	8f 91       	pop	r24
    1050:	7f 91       	pop	r23
    1052:	6f 91       	pop	r22
    1054:	5f 91       	pop	r21
    1056:	4f 91       	pop	r20
    1058:	3f 91       	pop	r19
    105a:	2f 91       	pop	r18
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <main>:
#include "DIO_interface.h"
#include "SPI_interface.h"
#include "UART_interface.h"

int main(void)
{
    1066:	df 93       	push	r29
    1068:	cf 93       	push	r28
    106a:	0f 92       	push	r0
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
	static u8 Flag = 0;
	u8 Local_u8Data;
	DIO_voidInit();
    1070:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidInit>
	SPI_voidInit();
    1074:	0e 94 b8 04 	call	0x970	; 0x970 <SPI_voidInit>
	UART_voidInit();
    1078:	0e 94 38 05 	call	0xa70	; 0xa70 <UART_voidInit>

	while(1)
	{
		SPI_u8TransReceive('S',&Local_u8Data);
    107c:	83 e5       	ldi	r24, 0x53	; 83
    107e:	9e 01       	movw	r18, r28
    1080:	2f 5f       	subi	r18, 0xFF	; 255
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	b9 01       	movw	r22, r18
    1086:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <SPI_u8TransReceive>
		UART_voidSendByte(Local_u8Data);
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	0e 94 8e 05 	call	0xb1c	; 0xb1c <UART_voidSendByte>
		if(Local_u8Data == 'M')
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	8d 34       	cpi	r24, 0x4D	; 77
    1094:	99 f7       	brne	.-26     	; 0x107c <main+0x16>
		{
			if(Flag == 0)
    1096:	80 91 6d 00 	lds	r24, 0x006D
    109a:	88 23       	and	r24, r24
    109c:	49 f4       	brne	.+18     	; 0x10b0 <main+0x4a>
			{
				DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	60 e0       	ldi	r22, 0x00	; 0
    10a2:	41 e0       	ldi	r20, 0x01	; 1
    10a4:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
				Flag = 1;
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	80 93 6d 00 	sts	0x006D, r24
    10ae:	e6 cf       	rjmp	.-52     	; 0x107c <main+0x16>
			}
			else
			{
				DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_u8SetPinValue>
				Flag = 0;
    10ba:	10 92 6d 00 	sts	0x006D, r1
    10be:	de cf       	rjmp	.-68     	; 0x107c <main+0x16>

000010c0 <_exit>:
    10c0:	f8 94       	cli

000010c2 <__stop_program>:
    10c2:	ff cf       	rjmp	.-2      	; 0x10c2 <__stop_program>
