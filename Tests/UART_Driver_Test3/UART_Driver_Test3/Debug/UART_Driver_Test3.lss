
UART_Driver_Test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000032c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000032c8  0000335c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  0080008e  0080008e  0000338a  2**0
                  ALLOC
  3 .stab         00002a6c  00000000  00000000  0000338c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000101c  00000000  00000000  00005df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009148  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a249  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b1cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b60e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000be9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__vector_13>
      38:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ec       	ldi	r30, 0xC8	; 200
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 3a       	cpi	r26, 0xAC	; 172
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 18 	call	0x3078	; 0x3078 <main>
      8a:	0c 94 62 19 	jmp	0x32c4	; 0x32c4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 47 19 	jmp	0x328e	; 0x328e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 2b 19 	jmp	0x3256	; 0x3256 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 47 19 	jmp	0x328e	; 0x328e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 33 19 	jmp	0x3266	; 0x3266 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e8       	ldi	r22, 0x85	; 133
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4f 19 	jmp	0x329e	; 0x329e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 37 19 	jmp	0x326e	; 0x326e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 3b 19 	jmp	0x3276	; 0x3276 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 57 19 	jmp	0x32ae	; 0x32ae <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	87 e0       	ldi	r24, 0x07	; 7
     cac:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	83 e0       	ldi	r24, 0x03	; 3
     cb4:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	10 82       	st	Z, r1

}
     cde:	cf 91       	pop	r28
     ce0:	df 91       	pop	r29
     ce2:	08 95       	ret

00000ce4 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	2e 97       	sbiw	r28, 0x0e	; 14
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	8a 83       	std	Y+2, r24	; 0x02
     cfa:	6b 83       	std	Y+3, r22	; 0x03
     cfc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     d02:	8a 81       	ldd	r24, Y+2	; 0x02
     d04:	84 30       	cpi	r24, 0x04	; 4
     d06:	08 f0       	brcs	.+2      	; 0xd0a <DIO_u8SetPinDirection+0x26>
     d08:	0d c1       	rjmp	.+538    	; 0xf24 <DIO_u8SetPinDirection+0x240>
     d0a:	8b 81       	ldd	r24, Y+3	; 0x03
     d0c:	88 30       	cpi	r24, 0x08	; 8
     d0e:	08 f0       	brcs	.+2      	; 0xd12 <DIO_u8SetPinDirection+0x2e>
     d10:	09 c1       	rjmp	.+530    	; 0xf24 <DIO_u8SetPinDirection+0x240>
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	88 23       	and	r24, r24
     d16:	21 f0       	breq	.+8      	; 0xd20 <DIO_u8SetPinDirection+0x3c>
     d18:	8c 81       	ldd	r24, Y+4	; 0x04
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	09 f0       	breq	.+2      	; 0xd20 <DIO_u8SetPinDirection+0x3c>
     d1e:	02 c1       	rjmp	.+516    	; 0xf24 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	28 2f       	mov	r18, r24
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	3e 87       	std	Y+14, r19	; 0x0e
     d28:	2d 87       	std	Y+13, r18	; 0x0d
     d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2e:	81 30       	cpi	r24, 0x01	; 1
     d30:	91 05       	cpc	r25, r1
     d32:	09 f4       	brne	.+2      	; 0xd36 <DIO_u8SetPinDirection+0x52>
     d34:	4f c0       	rjmp	.+158    	; 0xdd4 <DIO_u8SetPinDirection+0xf0>
     d36:	2d 85       	ldd	r18, Y+13	; 0x0d
     d38:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3a:	22 30       	cpi	r18, 0x02	; 2
     d3c:	31 05       	cpc	r19, r1
     d3e:	2c f4       	brge	.+10     	; 0xd4a <DIO_u8SetPinDirection+0x66>
     d40:	8d 85       	ldd	r24, Y+13	; 0x0d
     d42:	9e 85       	ldd	r25, Y+14	; 0x0e
     d44:	00 97       	sbiw	r24, 0x00	; 0
     d46:	71 f0       	breq	.+28     	; 0xd64 <DIO_u8SetPinDirection+0x80>
     d48:	ee c0       	rjmp	.+476    	; 0xf26 <DIO_u8SetPinDirection+0x242>
     d4a:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4c:	3e 85       	ldd	r19, Y+14	; 0x0e
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <DIO_u8SetPinDirection+0x72>
     d54:	77 c0       	rjmp	.+238    	; 0xe44 <DIO_u8SetPinDirection+0x160>
     d56:	8d 85       	ldd	r24, Y+13	; 0x0d
     d58:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5a:	83 30       	cpi	r24, 0x03	; 3
     d5c:	91 05       	cpc	r25, r1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <DIO_u8SetPinDirection+0x7e>
     d60:	a9 c0       	rjmp	.+338    	; 0xeb4 <DIO_u8SetPinDirection+0x1d0>
     d62:	e1 c0       	rjmp	.+450    	; 0xf26 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	3c 87       	std	Y+12, r19	; 0x0c
     d6c:	2b 87       	std	Y+11, r18	; 0x0b
     d6e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d70:	9c 85       	ldd	r25, Y+12	; 0x0c
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	31 f0       	breq	.+12     	; 0xd82 <DIO_u8SetPinDirection+0x9e>
     d76:	2b 85       	ldd	r18, Y+11	; 0x0b
     d78:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7a:	21 30       	cpi	r18, 0x01	; 1
     d7c:	31 05       	cpc	r19, r1
     d7e:	b1 f0       	breq	.+44     	; 0xdac <DIO_u8SetPinDirection+0xc8>
     d80:	d2 c0       	rjmp	.+420    	; 0xf26 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     d82:	aa e3       	ldi	r26, 0x3A	; 58
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	ea e3       	ldi	r30, 0x3A	; 58
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	48 2f       	mov	r20, r24
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	28 2f       	mov	r18, r24
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	02 2e       	mov	r0, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <DIO_u8SetPinDirection+0xbc>
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <DIO_u8SetPinDirection+0xb8>
     da4:	80 95       	com	r24
     da6:	84 23       	and	r24, r20
     da8:	8c 93       	st	X, r24
     daa:	bd c0       	rjmp	.+378    	; 0xf26 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     dac:	aa e3       	ldi	r26, 0x3A	; 58
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	ea e3       	ldi	r30, 0x3A	; 58
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	28 2f       	mov	r18, r24
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	02 2e       	mov	r0, r18
     dc4:	02 c0       	rjmp	.+4      	; 0xdca <DIO_u8SetPinDirection+0xe6>
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	0a 94       	dec	r0
     dcc:	e2 f7       	brpl	.-8      	; 0xdc6 <DIO_u8SetPinDirection+0xe2>
     dce:	84 2b       	or	r24, r20
     dd0:	8c 93       	st	X, r24
     dd2:	a9 c0       	rjmp	.+338    	; 0xf26 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	3a 87       	std	Y+10, r19	; 0x0a
     ddc:	29 87       	std	Y+9, r18	; 0x09
     dde:	89 85       	ldd	r24, Y+9	; 0x09
     de0:	9a 85       	ldd	r25, Y+10	; 0x0a
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	31 f0       	breq	.+12     	; 0xdf2 <DIO_u8SetPinDirection+0x10e>
     de6:	29 85       	ldd	r18, Y+9	; 0x09
     de8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dea:	21 30       	cpi	r18, 0x01	; 1
     dec:	31 05       	cpc	r19, r1
     dee:	b1 f0       	breq	.+44     	; 0xe1c <DIO_u8SetPinDirection+0x138>
     df0:	9a c0       	rjmp	.+308    	; 0xf26 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     df2:	a7 e3       	ldi	r26, 0x37	; 55
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e7 e3       	ldi	r30, 0x37	; 55
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_u8SetPinDirection+0x12c>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_u8SetPinDirection+0x128>
     e14:	80 95       	com	r24
     e16:	84 23       	and	r24, r20
     e18:	8c 93       	st	X, r24
     e1a:	85 c0       	rjmp	.+266    	; 0xf26 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     e1c:	a7 e3       	ldi	r26, 0x37	; 55
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	e7 e3       	ldi	r30, 0x37	; 55
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	48 2f       	mov	r20, r24
     e28:	8b 81       	ldd	r24, Y+3	; 0x03
     e2a:	28 2f       	mov	r18, r24
     e2c:	30 e0       	ldi	r19, 0x00	; 0
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	02 2e       	mov	r0, r18
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <DIO_u8SetPinDirection+0x156>
     e36:	88 0f       	add	r24, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	0a 94       	dec	r0
     e3c:	e2 f7       	brpl	.-8      	; 0xe36 <DIO_u8SetPinDirection+0x152>
     e3e:	84 2b       	or	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	71 c0       	rjmp	.+226    	; 0xf26 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	28 2f       	mov	r18, r24
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	38 87       	std	Y+8, r19	; 0x08
     e4c:	2f 83       	std	Y+7, r18	; 0x07
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	00 97       	sbiw	r24, 0x00	; 0
     e54:	31 f0       	breq	.+12     	; 0xe62 <DIO_u8SetPinDirection+0x17e>
     e56:	2f 81       	ldd	r18, Y+7	; 0x07
     e58:	38 85       	ldd	r19, Y+8	; 0x08
     e5a:	21 30       	cpi	r18, 0x01	; 1
     e5c:	31 05       	cpc	r19, r1
     e5e:	b1 f0       	breq	.+44     	; 0xe8c <DIO_u8SetPinDirection+0x1a8>
     e60:	62 c0       	rjmp	.+196    	; 0xf26 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e62:	a4 e3       	ldi	r26, 0x34	; 52
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e4 e3       	ldi	r30, 0x34	; 52
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <DIO_u8SetPinDirection+0x19c>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <DIO_u8SetPinDirection+0x198>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	4d c0       	rjmp	.+154    	; 0xf26 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     e8c:	a4 e3       	ldi	r26, 0x34	; 52
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e4 e3       	ldi	r30, 0x34	; 52
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	28 2f       	mov	r18, r24
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	81 e0       	ldi	r24, 0x01	; 1
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	02 2e       	mov	r0, r18
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <DIO_u8SetPinDirection+0x1c6>
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	0a 94       	dec	r0
     eac:	e2 f7       	brpl	.-8      	; 0xea6 <DIO_u8SetPinDirection+0x1c2>
     eae:	84 2b       	or	r24, r20
     eb0:	8c 93       	st	X, r24
     eb2:	39 c0       	rjmp	.+114    	; 0xf26 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	3e 83       	std	Y+6, r19	; 0x06
     ebc:	2d 83       	std	Y+5, r18	; 0x05
     ebe:	8d 81       	ldd	r24, Y+5	; 0x05
     ec0:	9e 81       	ldd	r25, Y+6	; 0x06
     ec2:	00 97       	sbiw	r24, 0x00	; 0
     ec4:	31 f0       	breq	.+12     	; 0xed2 <DIO_u8SetPinDirection+0x1ee>
     ec6:	2d 81       	ldd	r18, Y+5	; 0x05
     ec8:	3e 81       	ldd	r19, Y+6	; 0x06
     eca:	21 30       	cpi	r18, 0x01	; 1
     ecc:	31 05       	cpc	r19, r1
     ece:	b1 f0       	breq	.+44     	; 0xefc <DIO_u8SetPinDirection+0x218>
     ed0:	2a c0       	rjmp	.+84     	; 0xf26 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     ed2:	a1 e3       	ldi	r26, 0x31	; 49
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e1 e3       	ldi	r30, 0x31	; 49
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	48 2f       	mov	r20, r24
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	02 2e       	mov	r0, r18
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <DIO_u8SetPinDirection+0x20c>
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	0a 94       	dec	r0
     ef2:	e2 f7       	brpl	.-8      	; 0xeec <DIO_u8SetPinDirection+0x208>
     ef4:	80 95       	com	r24
     ef6:	84 23       	and	r24, r20
     ef8:	8c 93       	st	X, r24
     efa:	15 c0       	rjmp	.+42     	; 0xf26 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     efc:	a1 e3       	ldi	r26, 0x31	; 49
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	e1 e3       	ldi	r30, 0x31	; 49
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	80 81       	ld	r24, Z
     f06:	48 2f       	mov	r20, r24
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	28 2f       	mov	r18, r24
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	81 e0       	ldi	r24, 0x01	; 1
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	02 2e       	mov	r0, r18
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <DIO_u8SetPinDirection+0x236>
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	0a 94       	dec	r0
     f1c:	e2 f7       	brpl	.-8      	; 0xf16 <DIO_u8SetPinDirection+0x232>
     f1e:	84 2b       	or	r24, r20
     f20:	8c 93       	st	X, r24
     f22:	01 c0       	rjmp	.+2      	; 0xf26 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f24:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f26:	89 81       	ldd	r24, Y+1	; 0x01
}
     f28:	2e 96       	adiw	r28, 0x0e	; 14
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	f8 94       	cli
     f2e:	de bf       	out	0x3e, r29	; 62
     f30:	0f be       	out	0x3f, r0	; 63
     f32:	cd bf       	out	0x3d, r28	; 61
     f34:	cf 91       	pop	r28
     f36:	df 91       	pop	r29
     f38:	08 95       	ret

00000f3a <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     f3a:	df 93       	push	r29
     f3c:	cf 93       	push	r28
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	2e 97       	sbiw	r28, 0x0e	; 14
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
     f4e:	8a 83       	std	Y+2, r24	; 0x02
     f50:	6b 83       	std	Y+3, r22	; 0x03
     f52:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	88 30       	cpi	r24, 0x08	; 8
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <DIO_u8SetPinValue+0x26>
     f5e:	0c c1       	rjmp	.+536    	; 0x1178 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	3e 87       	std	Y+14, r19	; 0x0e
     f68:	2d 87       	std	Y+13, r18	; 0x0d
     f6a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <DIO_u8SetPinValue+0x3c>
     f74:	51 c0       	rjmp	.+162    	; 0x1018 <DIO_u8SetPinValue+0xde>
     f76:	2d 85       	ldd	r18, Y+13	; 0x0d
     f78:	3e 85       	ldd	r19, Y+14	; 0x0e
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	2c f4       	brge	.+10     	; 0xf8a <DIO_u8SetPinValue+0x50>
     f80:	8d 85       	ldd	r24, Y+13	; 0x0d
     f82:	9e 85       	ldd	r25, Y+14	; 0x0e
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	71 f0       	breq	.+28     	; 0xfa4 <DIO_u8SetPinValue+0x6a>
     f88:	f5 c0       	rjmp	.+490    	; 0x1174 <DIO_u8SetPinValue+0x23a>
     f8a:	2d 85       	ldd	r18, Y+13	; 0x0d
     f8c:	3e 85       	ldd	r19, Y+14	; 0x0e
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	09 f4       	brne	.+2      	; 0xf96 <DIO_u8SetPinValue+0x5c>
     f94:	7b c0       	rjmp	.+246    	; 0x108c <DIO_u8SetPinValue+0x152>
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	91 05       	cpc	r25, r1
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <DIO_u8SetPinValue+0x68>
     fa0:	af c0       	rjmp	.+350    	; 0x1100 <DIO_u8SetPinValue+0x1c6>
     fa2:	e8 c0       	rjmp	.+464    	; 0x1174 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	3c 87       	std	Y+12, r19	; 0x0c
     fac:	2b 87       	std	Y+11, r18	; 0x0b
     fae:	8b 85       	ldd	r24, Y+11	; 0x0b
     fb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     fb2:	00 97       	sbiw	r24, 0x00	; 0
     fb4:	31 f0       	breq	.+12     	; 0xfc2 <DIO_u8SetPinValue+0x88>
     fb6:	2b 85       	ldd	r18, Y+11	; 0x0b
     fb8:	3c 85       	ldd	r19, Y+12	; 0x0c
     fba:	21 30       	cpi	r18, 0x01	; 1
     fbc:	31 05       	cpc	r19, r1
     fbe:	b1 f0       	breq	.+44     	; 0xfec <DIO_u8SetPinValue+0xb2>
     fc0:	29 c0       	rjmp	.+82     	; 0x1014 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fc2:	ab e3       	ldi	r26, 0x3B	; 59
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	eb e3       	ldi	r30, 0x3B	; 59
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_u8SetPinValue+0xa6>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_u8SetPinValue+0xa2>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	c7 c0       	rjmp	.+398    	; 0x117a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     fec:	ab e3       	ldi	r26, 0x3B	; 59
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	eb e3       	ldi	r30, 0x3B	; 59
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_u8SetPinValue+0xd0>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_u8SetPinValue+0xcc>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	b3 c0       	rjmp	.+358    	; 0x117a <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1014:	19 82       	std	Y+1, r1	; 0x01
    1016:	b1 c0       	rjmp	.+354    	; 0x117a <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    1018:	8c 81       	ldd	r24, Y+4	; 0x04
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	3a 87       	std	Y+10, r19	; 0x0a
    1020:	29 87       	std	Y+9, r18	; 0x09
    1022:	89 85       	ldd	r24, Y+9	; 0x09
    1024:	9a 85       	ldd	r25, Y+10	; 0x0a
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	31 f0       	breq	.+12     	; 0x1036 <DIO_u8SetPinValue+0xfc>
    102a:	29 85       	ldd	r18, Y+9	; 0x09
    102c:	3a 85       	ldd	r19, Y+10	; 0x0a
    102e:	21 30       	cpi	r18, 0x01	; 1
    1030:	31 05       	cpc	r19, r1
    1032:	b1 f0       	breq	.+44     	; 0x1060 <DIO_u8SetPinValue+0x126>
    1034:	29 c0       	rjmp	.+82     	; 0x1088 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1036:	a8 e3       	ldi	r26, 0x38	; 56
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e8 e3       	ldi	r30, 0x38	; 56
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	48 2f       	mov	r20, r24
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_u8SetPinValue+0x11a>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_u8SetPinValue+0x116>
    1058:	80 95       	com	r24
    105a:	84 23       	and	r24, r20
    105c:	8c 93       	st	X, r24
    105e:	8d c0       	rjmp	.+282    	; 0x117a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    1060:	a8 e3       	ldi	r26, 0x38	; 56
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e8 e3       	ldi	r30, 0x38	; 56
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_u8SetPinValue+0x144>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_u8SetPinValue+0x140>
    1082:	84 2b       	or	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	79 c0       	rjmp	.+242    	; 0x117a <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1088:	19 82       	std	Y+1, r1	; 0x01
    108a:	77 c0       	rjmp	.+238    	; 0x117a <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    108c:	8c 81       	ldd	r24, Y+4	; 0x04
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	38 87       	std	Y+8, r19	; 0x08
    1094:	2f 83       	std	Y+7, r18	; 0x07
    1096:	8f 81       	ldd	r24, Y+7	; 0x07
    1098:	98 85       	ldd	r25, Y+8	; 0x08
    109a:	00 97       	sbiw	r24, 0x00	; 0
    109c:	31 f0       	breq	.+12     	; 0x10aa <DIO_u8SetPinValue+0x170>
    109e:	2f 81       	ldd	r18, Y+7	; 0x07
    10a0:	38 85       	ldd	r19, Y+8	; 0x08
    10a2:	21 30       	cpi	r18, 0x01	; 1
    10a4:	31 05       	cpc	r19, r1
    10a6:	b1 f0       	breq	.+44     	; 0x10d4 <DIO_u8SetPinValue+0x19a>
    10a8:	29 c0       	rjmp	.+82     	; 0x10fc <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10aa:	a5 e3       	ldi	r26, 0x35	; 53
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e5 e3       	ldi	r30, 0x35	; 53
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	48 2f       	mov	r20, r24
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	02 2e       	mov	r0, r18
    10c2:	02 c0       	rjmp	.+4      	; 0x10c8 <DIO_u8SetPinValue+0x18e>
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	0a 94       	dec	r0
    10ca:	e2 f7       	brpl	.-8      	; 0x10c4 <DIO_u8SetPinValue+0x18a>
    10cc:	80 95       	com	r24
    10ce:	84 23       	and	r24, r20
    10d0:	8c 93       	st	X, r24
    10d2:	53 c0       	rjmp	.+166    	; 0x117a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    10d4:	a5 e3       	ldi	r26, 0x35	; 53
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e5 e3       	ldi	r30, 0x35	; 53
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_u8SetPinValue+0x1b8>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_u8SetPinValue+0x1b4>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	3d c0       	rjmp	.+122    	; 0x117a <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	3e 83       	std	Y+6, r19	; 0x06
    1108:	2d 83       	std	Y+5, r18	; 0x05
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	31 f0       	breq	.+12     	; 0x111e <DIO_u8SetPinValue+0x1e4>
    1112:	2d 81       	ldd	r18, Y+5	; 0x05
    1114:	3e 81       	ldd	r19, Y+6	; 0x06
    1116:	21 30       	cpi	r18, 0x01	; 1
    1118:	31 05       	cpc	r19, r1
    111a:	b1 f0       	breq	.+44     	; 0x1148 <DIO_u8SetPinValue+0x20e>
    111c:	29 c0       	rjmp	.+82     	; 0x1170 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    111e:	a2 e3       	ldi	r26, 0x32	; 50
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	02 2e       	mov	r0, r18
    1136:	02 c0       	rjmp	.+4      	; 0x113c <DIO_u8SetPinValue+0x202>
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	0a 94       	dec	r0
    113e:	e2 f7       	brpl	.-8      	; 0x1138 <DIO_u8SetPinValue+0x1fe>
    1140:	80 95       	com	r24
    1142:	84 23       	and	r24, r20
    1144:	8c 93       	st	X, r24
    1146:	19 c0       	rjmp	.+50     	; 0x117a <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    1148:	a2 e3       	ldi	r26, 0x32	; 50
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e2 e3       	ldi	r30, 0x32	; 50
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_u8SetPinValue+0x22c>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_u8SetPinValue+0x228>
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	05 c0       	rjmp	.+10     	; 0x117a <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1170:	19 82       	std	Y+1, r1	; 0x01
    1172:	03 c0       	rjmp	.+6      	; 0x117a <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1174:	19 82       	std	Y+1, r1	; 0x01
    1176:	01 c0       	rjmp	.+2      	; 0x117a <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1178:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
}
    117c:	2e 96       	adiw	r28, 0x0e	; 14
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	28 97       	sbiw	r28, 0x08	; 8
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	6c 83       	std	Y+4, r22	; 0x04
    11a6:	5e 83       	std	Y+6, r21	; 0x06
    11a8:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <DIO_u8GetPinValue+0x28>
    11b4:	a1 c0       	rjmp	.+322    	; 0x12f8 <DIO_u8GetPinValue+0x16a>
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	88 30       	cpi	r24, 0x08	; 8
    11ba:	08 f0       	brcs	.+2      	; 0x11be <DIO_u8GetPinValue+0x30>
    11bc:	9d c0       	rjmp	.+314    	; 0x12f8 <DIO_u8GetPinValue+0x16a>
    11be:	8d 81       	ldd	r24, Y+5	; 0x05
    11c0:	9e 81       	ldd	r25, Y+6	; 0x06
    11c2:	00 97       	sbiw	r24, 0x00	; 0
    11c4:	09 f4       	brne	.+2      	; 0x11c8 <DIO_u8GetPinValue+0x3a>
    11c6:	98 c0       	rjmp	.+304    	; 0x12f8 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	38 87       	std	Y+8, r19	; 0x08
    11d0:	2f 83       	std	Y+7, r18	; 0x07
    11d2:	4f 81       	ldd	r20, Y+7	; 0x07
    11d4:	58 85       	ldd	r21, Y+8	; 0x08
    11d6:	41 30       	cpi	r20, 0x01	; 1
    11d8:	51 05       	cpc	r21, r1
    11da:	a9 f1       	breq	.+106    	; 0x1246 <DIO_u8GetPinValue+0xb8>
    11dc:	8f 81       	ldd	r24, Y+7	; 0x07
    11de:	98 85       	ldd	r25, Y+8	; 0x08
    11e0:	82 30       	cpi	r24, 0x02	; 2
    11e2:	91 05       	cpc	r25, r1
    11e4:	34 f4       	brge	.+12     	; 0x11f2 <DIO_u8GetPinValue+0x64>
    11e6:	2f 81       	ldd	r18, Y+7	; 0x07
    11e8:	38 85       	ldd	r19, Y+8	; 0x08
    11ea:	21 15       	cp	r18, r1
    11ec:	31 05       	cpc	r19, r1
    11ee:	71 f0       	breq	.+28     	; 0x120c <DIO_u8GetPinValue+0x7e>
    11f0:	81 c0       	rjmp	.+258    	; 0x12f4 <DIO_u8GetPinValue+0x166>
    11f2:	4f 81       	ldd	r20, Y+7	; 0x07
    11f4:	58 85       	ldd	r21, Y+8	; 0x08
    11f6:	42 30       	cpi	r20, 0x02	; 2
    11f8:	51 05       	cpc	r21, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <DIO_u8GetPinValue+0x70>
    11fc:	41 c0       	rjmp	.+130    	; 0x1280 <DIO_u8GetPinValue+0xf2>
    11fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1200:	98 85       	ldd	r25, Y+8	; 0x08
    1202:	83 30       	cpi	r24, 0x03	; 3
    1204:	91 05       	cpc	r25, r1
    1206:	09 f4       	brne	.+2      	; 0x120a <DIO_u8GetPinValue+0x7c>
    1208:	58 c0       	rjmp	.+176    	; 0x12ba <DIO_u8GetPinValue+0x12c>
    120a:	74 c0       	rjmp	.+232    	; 0x12f4 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    120c:	e9 e3       	ldi	r30, 0x39	; 57
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	8c 81       	ldd	r24, Y+4	; 0x04
    1218:	88 2f       	mov	r24, r24
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a9 01       	movw	r20, r18
    121e:	02 c0       	rjmp	.+4      	; 0x1224 <DIO_u8GetPinValue+0x96>
    1220:	55 95       	asr	r21
    1222:	47 95       	ror	r20
    1224:	8a 95       	dec	r24
    1226:	e2 f7       	brpl	.-8      	; 0x1220 <DIO_u8GetPinValue+0x92>
    1228:	ca 01       	movw	r24, r20
    122a:	81 70       	andi	r24, 0x01	; 1
    122c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	88 23       	and	r24, r24
    1232:	21 f4       	brne	.+8      	; 0x123c <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1234:	ed 81       	ldd	r30, Y+5	; 0x05
    1236:	fe 81       	ldd	r31, Y+6	; 0x06
    1238:	10 82       	st	Z, r1
    123a:	5f c0       	rjmp	.+190    	; 0x12fa <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    123c:	ed 81       	ldd	r30, Y+5	; 0x05
    123e:	fe 81       	ldd	r31, Y+6	; 0x06
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	80 83       	st	Z, r24
    1244:	5a c0       	rjmp	.+180    	; 0x12fa <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    1246:	e6 e3       	ldi	r30, 0x36	; 54
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	8c 81       	ldd	r24, Y+4	; 0x04
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a9 01       	movw	r20, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_u8GetPinValue+0xd0>
    125a:	55 95       	asr	r21
    125c:	47 95       	ror	r20
    125e:	8a 95       	dec	r24
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_u8GetPinValue+0xcc>
    1262:	ca 01       	movw	r24, r20
    1264:	81 70       	andi	r24, 0x01	; 1
    1266:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	88 23       	and	r24, r24
    126c:	21 f4       	brne	.+8      	; 0x1276 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    126e:	ed 81       	ldd	r30, Y+5	; 0x05
    1270:	fe 81       	ldd	r31, Y+6	; 0x06
    1272:	10 82       	st	Z, r1
    1274:	42 c0       	rjmp	.+132    	; 0x12fa <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1276:	ed 81       	ldd	r30, Y+5	; 0x05
    1278:	fe 81       	ldd	r31, Y+6	; 0x06
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 83       	st	Z, r24
    127e:	3d c0       	rjmp	.+122    	; 0x12fa <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1280:	e3 e3       	ldi	r30, 0x33	; 51
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8c 81       	ldd	r24, Y+4	; 0x04
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8GetPinValue+0x10a>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8GetPinValue+0x106>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	88 23       	and	r24, r24
    12a6:	21 f4       	brne	.+8      	; 0x12b0 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12a8:	ed 81       	ldd	r30, Y+5	; 0x05
    12aa:	fe 81       	ldd	r31, Y+6	; 0x06
    12ac:	10 82       	st	Z, r1
    12ae:	25 c0       	rjmp	.+74     	; 0x12fa <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12b0:	ed 81       	ldd	r30, Y+5	; 0x05
    12b2:	fe 81       	ldd	r31, Y+6	; 0x06
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	80 83       	st	Z, r24
    12b8:	20 c0       	rjmp	.+64     	; 0x12fa <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    12ba:	e0 e3       	ldi	r30, 0x30	; 48
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8c 81       	ldd	r24, Y+4	; 0x04
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a9 01       	movw	r20, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8GetPinValue+0x144>
    12ce:	55 95       	asr	r21
    12d0:	47 95       	ror	r20
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_u8GetPinValue+0x140>
    12d6:	ca 01       	movw	r24, r20
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	88 23       	and	r24, r24
    12e0:	21 f4       	brne	.+8      	; 0x12ea <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12e2:	ed 81       	ldd	r30, Y+5	; 0x05
    12e4:	fe 81       	ldd	r31, Y+6	; 0x06
    12e6:	10 82       	st	Z, r1
    12e8:	08 c0       	rjmp	.+16     	; 0x12fa <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12ea:	ed 81       	ldd	r30, Y+5	; 0x05
    12ec:	fe 81       	ldd	r31, Y+6	; 0x06
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	80 83       	st	Z, r24
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    12f4:	1a 82       	std	Y+2, r1	; 0x02
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12f8:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    12fc:	28 96       	adiw	r28, 0x08	; 8
    12fe:	0f b6       	in	r0, 0x3f	; 63
    1300:	f8 94       	cli
    1302:	de bf       	out	0x3e, r29	; 62
    1304:	0f be       	out	0x3f, r0	; 63
    1306:	cd bf       	out	0x3d, r28	; 61
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	2d 97       	sbiw	r28, 0x0d	; 13
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    1322:	8a 83       	std	Y+2, r24	; 0x02
    1324:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	88 23       	and	r24, r24
    132e:	21 f0       	breq	.+8      	; 0x1338 <DIO_u8SetPortDirection+0x2a>
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	09 f0       	breq	.+2      	; 0x1338 <DIO_u8SetPortDirection+0x2a>
    1336:	82 c0       	rjmp	.+260    	; 0x143c <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	3d 87       	std	Y+13, r19	; 0x0d
    1340:	2c 87       	std	Y+12, r18	; 0x0c
    1342:	8c 85       	ldd	r24, Y+12	; 0x0c
    1344:	9d 85       	ldd	r25, Y+13	; 0x0d
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	71 f1       	breq	.+92     	; 0x13a8 <DIO_u8SetPortDirection+0x9a>
    134c:	2c 85       	ldd	r18, Y+12	; 0x0c
    134e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	2c f4       	brge	.+10     	; 0x1360 <DIO_u8SetPortDirection+0x52>
    1356:	8c 85       	ldd	r24, Y+12	; 0x0c
    1358:	9d 85       	ldd	r25, Y+13	; 0x0d
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f0       	breq	.+26     	; 0x1378 <DIO_u8SetPortDirection+0x6a>
    135e:	6c c0       	rjmp	.+216    	; 0x1438 <DIO_u8SetPortDirection+0x12a>
    1360:	2c 85       	ldd	r18, Y+12	; 0x0c
    1362:	3d 85       	ldd	r19, Y+13	; 0x0d
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	b9 f1       	breq	.+110    	; 0x13d8 <DIO_u8SetPortDirection+0xca>
    136a:	8c 85       	ldd	r24, Y+12	; 0x0c
    136c:	9d 85       	ldd	r25, Y+13	; 0x0d
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <DIO_u8SetPortDirection+0x68>
    1374:	49 c0       	rjmp	.+146    	; 0x1408 <DIO_u8SetPortDirection+0xfa>
    1376:	60 c0       	rjmp	.+192    	; 0x1438 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3b 87       	std	Y+11, r19	; 0x0b
    1380:	2a 87       	std	Y+10, r18	; 0x0a
    1382:	8a 85       	ldd	r24, Y+10	; 0x0a
    1384:	9b 85       	ldd	r25, Y+11	; 0x0b
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	31 f0       	breq	.+12     	; 0x1396 <DIO_u8SetPortDirection+0x88>
    138a:	2a 85       	ldd	r18, Y+10	; 0x0a
    138c:	3b 85       	ldd	r19, Y+11	; 0x0b
    138e:	21 30       	cpi	r18, 0x01	; 1
    1390:	31 05       	cpc	r19, r1
    1392:	29 f0       	breq	.+10     	; 0x139e <DIO_u8SetPortDirection+0x90>
    1394:	54 c0       	rjmp	.+168    	; 0x143e <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1396:	ea e3       	ldi	r30, 0x3A	; 58
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	10 82       	st	Z, r1
    139c:	50 c0       	rjmp	.+160    	; 0x143e <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    139e:	ea e3       	ldi	r30, 0x3A	; 58
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	80 83       	st	Z, r24
    13a6:	4b c0       	rjmp	.+150    	; 0x143e <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	39 87       	std	Y+9, r19	; 0x09
    13b0:	28 87       	std	Y+8, r18	; 0x08
    13b2:	88 85       	ldd	r24, Y+8	; 0x08
    13b4:	99 85       	ldd	r25, Y+9	; 0x09
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	31 f0       	breq	.+12     	; 0x13c6 <DIO_u8SetPortDirection+0xb8>
    13ba:	28 85       	ldd	r18, Y+8	; 0x08
    13bc:	39 85       	ldd	r19, Y+9	; 0x09
    13be:	21 30       	cpi	r18, 0x01	; 1
    13c0:	31 05       	cpc	r19, r1
    13c2:	29 f0       	breq	.+10     	; 0x13ce <DIO_u8SetPortDirection+0xc0>
    13c4:	3c c0       	rjmp	.+120    	; 0x143e <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    13c6:	e7 e3       	ldi	r30, 0x37	; 55
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	10 82       	st	Z, r1
    13cc:	38 c0       	rjmp	.+112    	; 0x143e <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    13ce:	e7 e3       	ldi	r30, 0x37	; 55
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	80 83       	st	Z, r24
    13d6:	33 c0       	rjmp	.+102    	; 0x143e <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	3f 83       	std	Y+7, r19	; 0x07
    13e0:	2e 83       	std	Y+6, r18	; 0x06
    13e2:	8e 81       	ldd	r24, Y+6	; 0x06
    13e4:	9f 81       	ldd	r25, Y+7	; 0x07
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <DIO_u8SetPortDirection+0xe8>
    13ea:	2e 81       	ldd	r18, Y+6	; 0x06
    13ec:	3f 81       	ldd	r19, Y+7	; 0x07
    13ee:	21 30       	cpi	r18, 0x01	; 1
    13f0:	31 05       	cpc	r19, r1
    13f2:	29 f0       	breq	.+10     	; 0x13fe <DIO_u8SetPortDirection+0xf0>
    13f4:	24 c0       	rjmp	.+72     	; 0x143e <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    13f6:	e4 e3       	ldi	r30, 0x34	; 52
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	10 82       	st	Z, r1
    13fc:	20 c0       	rjmp	.+64     	; 0x143e <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    13fe:	e4 e3       	ldi	r30, 0x34	; 52
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	80 83       	st	Z, r24
    1406:	1b c0       	rjmp	.+54     	; 0x143e <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3d 83       	std	Y+5, r19	; 0x05
    1410:	2c 83       	std	Y+4, r18	; 0x04
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	31 f0       	breq	.+12     	; 0x1426 <DIO_u8SetPortDirection+0x118>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	21 30       	cpi	r18, 0x01	; 1
    1420:	31 05       	cpc	r19, r1
    1422:	29 f0       	breq	.+10     	; 0x142e <DIO_u8SetPortDirection+0x120>
    1424:	0c c0       	rjmp	.+24     	; 0x143e <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    1426:	e1 e3       	ldi	r30, 0x31	; 49
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	10 82       	st	Z, r1
    142c:	08 c0       	rjmp	.+16     	; 0x143e <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    142e:	e1 e3       	ldi	r30, 0x31	; 49
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	80 83       	st	Z, r24
    1436:	03 c0       	rjmp	.+6      	; 0x143e <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1438:	19 82       	std	Y+1, r1	; 0x01
    143a:	01 c0       	rjmp	.+2      	; 0x143e <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    143c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    143e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1440:	2d 96       	adiw	r28, 0x0d	; 13
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	00 d0       	rcall	.+0      	; 0x1458 <DIO_u8SetPortValue+0x6>
    1458:	00 d0       	rcall	.+0      	; 0x145a <DIO_u8SetPortValue+0x8>
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	8a 83       	std	Y+2, r24	; 0x02
    1462:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    1468:	8a 81       	ldd	r24, Y+2	; 0x02
    146a:	28 2f       	mov	r18, r24
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	3d 83       	std	Y+5, r19	; 0x05
    1470:	2c 83       	std	Y+4, r18	; 0x04
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	9d 81       	ldd	r25, Y+5	; 0x05
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	91 05       	cpc	r25, r1
    147a:	d1 f0       	breq	.+52     	; 0x14b0 <DIO_u8SetPortValue+0x5e>
    147c:	2c 81       	ldd	r18, Y+4	; 0x04
    147e:	3d 81       	ldd	r19, Y+5	; 0x05
    1480:	22 30       	cpi	r18, 0x02	; 2
    1482:	31 05       	cpc	r19, r1
    1484:	2c f4       	brge	.+10     	; 0x1490 <DIO_u8SetPortValue+0x3e>
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	61 f0       	breq	.+24     	; 0x14a6 <DIO_u8SetPortValue+0x54>
    148e:	1f c0       	rjmp	.+62     	; 0x14ce <DIO_u8SetPortValue+0x7c>
    1490:	2c 81       	ldd	r18, Y+4	; 0x04
    1492:	3d 81       	ldd	r19, Y+5	; 0x05
    1494:	22 30       	cpi	r18, 0x02	; 2
    1496:	31 05       	cpc	r19, r1
    1498:	81 f0       	breq	.+32     	; 0x14ba <DIO_u8SetPortValue+0x68>
    149a:	8c 81       	ldd	r24, Y+4	; 0x04
    149c:	9d 81       	ldd	r25, Y+5	; 0x05
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	91 05       	cpc	r25, r1
    14a2:	81 f0       	breq	.+32     	; 0x14c4 <DIO_u8SetPortValue+0x72>
    14a4:	14 c0       	rjmp	.+40     	; 0x14ce <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    14a6:	eb e3       	ldi	r30, 0x3B	; 59
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	80 83       	st	Z, r24
    14ae:	10 c0       	rjmp	.+32     	; 0x14d0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    14b0:	e8 e3       	ldi	r30, 0x38	; 56
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	80 83       	st	Z, r24
    14b8:	0b c0       	rjmp	.+22     	; 0x14d0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    14ba:	e5 e3       	ldi	r30, 0x35	; 53
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	80 83       	st	Z, r24
    14c2:	06 c0       	rjmp	.+12     	; 0x14d0 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    14c4:	e2 e3       	ldi	r30, 0x32	; 50
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	80 83       	st	Z, r24
    14cc:	01 c0       	rjmp	.+2      	; 0x14d0 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    14ce:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DIO_u8GetPortValue+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_u8GetPortValue+0x8>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_u8GetPortValue+0xa>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	8a 83       	std	Y+2, r24	; 0x02
    14f2:	7c 83       	std	Y+4, r23	; 0x04
    14f4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	9c 81       	ldd	r25, Y+4	; 0x04
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	e9 f1       	breq	.+122    	; 0x157c <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3e 83       	std	Y+6, r19	; 0x06
    150a:	2d 83       	std	Y+5, r18	; 0x05
    150c:	8d 81       	ldd	r24, Y+5	; 0x05
    150e:	9e 81       	ldd	r25, Y+6	; 0x06
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	e1 f0       	breq	.+56     	; 0x154e <DIO_u8GetPortValue+0x6c>
    1516:	2d 81       	ldd	r18, Y+5	; 0x05
    1518:	3e 81       	ldd	r19, Y+6	; 0x06
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <DIO_u8GetPortValue+0x48>
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	61 f0       	breq	.+24     	; 0x1540 <DIO_u8GetPortValue+0x5e>
    1528:	27 c0       	rjmp	.+78     	; 0x1578 <DIO_u8GetPortValue+0x96>
    152a:	2d 81       	ldd	r18, Y+5	; 0x05
    152c:	3e 81       	ldd	r19, Y+6	; 0x06
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	a1 f0       	breq	.+40     	; 0x155c <DIO_u8GetPortValue+0x7a>
    1534:	8d 81       	ldd	r24, Y+5	; 0x05
    1536:	9e 81       	ldd	r25, Y+6	; 0x06
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	b1 f0       	breq	.+44     	; 0x156a <DIO_u8GetPortValue+0x88>
    153e:	1c c0       	rjmp	.+56     	; 0x1578 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    1540:	e9 e3       	ldi	r30, 0x39	; 57
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	eb 81       	ldd	r30, Y+3	; 0x03
    1548:	fc 81       	ldd	r31, Y+4	; 0x04
    154a:	80 83       	st	Z, r24
    154c:	18 c0       	rjmp	.+48     	; 0x157e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    154e:	e6 e3       	ldi	r30, 0x36	; 54
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	eb 81       	ldd	r30, Y+3	; 0x03
    1556:	fc 81       	ldd	r31, Y+4	; 0x04
    1558:	80 83       	st	Z, r24
    155a:	11 c0       	rjmp	.+34     	; 0x157e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    155c:	e3 e3       	ldi	r30, 0x33	; 51
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	eb 81       	ldd	r30, Y+3	; 0x03
    1564:	fc 81       	ldd	r31, Y+4	; 0x04
    1566:	80 83       	st	Z, r24
    1568:	0a c0       	rjmp	.+20     	; 0x157e <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    156a:	e0 e3       	ldi	r30, 0x30	; 48
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	eb 81       	ldd	r30, Y+3	; 0x03
    1572:	fc 81       	ldd	r31, Y+4	; 0x04
    1574:	80 83       	st	Z, r24
    1576:	03 c0       	rjmp	.+6      	; 0x157e <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	01 c0       	rjmp	.+2      	; 0x157e <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    157c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	26 96       	adiw	r28, 0x06	; 6
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	f8 94       	cli
    1586:	de bf       	out	0x3e, r29	; 62
    1588:	0f be       	out	0x3f, r0	; 63
    158a:	cd bf       	out	0x3d, r28	; 61
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <GI_voidEnableGI>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidEnableGI(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
    159a:	af e5       	ldi	r26, 0x5F	; 95
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ef e5       	ldi	r30, 0x5F	; 95
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	80 68       	ori	r24, 0x80	; 128
    15a6:	8c 93       	st	X, r24
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	08 95       	ret

000015ae <GI_voidDisableGI>:

void GI_voidDisableGI(void)
{
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
    15b6:	af e5       	ldi	r26, 0x5F	; 95
    15b8:	b0 e0       	ldi	r27, 0x00	; 0
    15ba:	ef e5       	ldi	r30, 0x5F	; 95
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	80 81       	ld	r24, Z
    15c0:	8f 77       	andi	r24, 0x7F	; 127
    15c2:	8c 93       	st	X, r24
    15c4:	cf 91       	pop	r28
    15c6:	df 91       	pop	r29
    15c8:	08 95       	ret

000015ca <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	cc 54       	subi	r28, 0x4C	; 76
    15d8:	d0 40       	sbci	r29, 0x00	; 0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	fe 01       	movw	r30, r28
    15e6:	e7 5b       	subi	r30, 0xB7	; 183
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 e0       	ldi	r24, 0x00	; 0
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	ac e0       	ldi	r26, 0x0C	; 12
    15f0:	b2 e4       	ldi	r27, 0x42	; 66
    15f2:	80 83       	st	Z, r24
    15f4:	91 83       	std	Z+1, r25	; 0x01
    15f6:	a2 83       	std	Z+2, r26	; 0x02
    15f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fa:	8e 01       	movw	r16, r28
    15fc:	0b 5b       	subi	r16, 0xBB	; 187
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	fe 01       	movw	r30, r28
    1602:	e7 5b       	subi	r30, 0xB7	; 183
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	60 81       	ld	r22, Z
    1608:	71 81       	ldd	r23, Z+1	; 0x01
    160a:	82 81       	ldd	r24, Z+2	; 0x02
    160c:	93 81       	ldd	r25, Z+3	; 0x03
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	4a ef       	ldi	r20, 0xFA	; 250
    1614:	54 e4       	ldi	r21, 0x44	; 68
    1616:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    161a:	dc 01       	movw	r26, r24
    161c:	cb 01       	movw	r24, r22
    161e:	f8 01       	movw	r30, r16
    1620:	80 83       	st	Z, r24
    1622:	91 83       	std	Z+1, r25	; 0x01
    1624:	a2 83       	std	Z+2, r26	; 0x02
    1626:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1628:	fe 01       	movw	r30, r28
    162a:	eb 5b       	subi	r30, 0xBB	; 187
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e8       	ldi	r20, 0x80	; 128
    163c:	5f e3       	ldi	r21, 0x3F	; 63
    163e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1642:	88 23       	and	r24, r24
    1644:	44 f4       	brge	.+16     	; 0x1656 <LCD_voidInit+0x8c>
		__ticks = 1;
    1646:	fe 01       	movw	r30, r28
    1648:	ed 5b       	subi	r30, 0xBD	; 189
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	91 83       	std	Z+1, r25	; 0x01
    1652:	80 83       	st	Z, r24
    1654:	64 c0       	rjmp	.+200    	; 0x171e <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1656:	fe 01       	movw	r30, r28
    1658:	eb 5b       	subi	r30, 0xBB	; 187
    165a:	ff 4f       	sbci	r31, 0xFF	; 255
    165c:	60 81       	ld	r22, Z
    165e:	71 81       	ldd	r23, Z+1	; 0x01
    1660:	82 81       	ldd	r24, Z+2	; 0x02
    1662:	93 81       	ldd	r25, Z+3	; 0x03
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	3f ef       	ldi	r19, 0xFF	; 255
    1668:	4f e7       	ldi	r20, 0x7F	; 127
    166a:	57 e4       	ldi	r21, 0x47	; 71
    166c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1670:	18 16       	cp	r1, r24
    1672:	0c f0       	brlt	.+2      	; 0x1676 <LCD_voidInit+0xac>
    1674:	43 c0       	rjmp	.+134    	; 0x16fc <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1676:	fe 01       	movw	r30, r28
    1678:	e7 5b       	subi	r30, 0xB7	; 183
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	40 e2       	ldi	r20, 0x20	; 32
    168a:	51 e4       	ldi	r21, 0x41	; 65
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8e 01       	movw	r16, r28
    1696:	0d 5b       	subi	r16, 0xBD	; 189
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	bc 01       	movw	r22, r24
    169c:	cd 01       	movw	r24, r26
    169e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	f8 01       	movw	r30, r16
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	80 83       	st	Z, r24
    16ac:	1f c0       	rjmp	.+62     	; 0x16ec <LCD_voidInit+0x122>
    16ae:	fe 01       	movw	r30, r28
    16b0:	ef 5b       	subi	r30, 0xBF	; 191
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	88 ec       	ldi	r24, 0xC8	; 200
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16bc:	fe 01       	movw	r30, r28
    16be:	ef 5b       	subi	r30, 0xBF	; 191
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <LCD_voidInit+0xfc>
    16ca:	fe 01       	movw	r30, r28
    16cc:	ef 5b       	subi	r30, 0xBF	; 191
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	91 83       	std	Z+1, r25	; 0x01
    16d2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d4:	de 01       	movw	r26, r28
    16d6:	ad 5b       	subi	r26, 0xBD	; 189
    16d8:	bf 4f       	sbci	r27, 0xFF	; 255
    16da:	fe 01       	movw	r30, r28
    16dc:	ed 5b       	subi	r30, 0xBD	; 189
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	80 81       	ld	r24, Z
    16e2:	91 81       	ldd	r25, Z+1	; 0x01
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	11 96       	adiw	r26, 0x01	; 1
    16e8:	9c 93       	st	X, r25
    16ea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ec:	fe 01       	movw	r30, r28
    16ee:	ed 5b       	subi	r30, 0xBD	; 189
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	d1 f6       	brne	.-76     	; 0x16ae <LCD_voidInit+0xe4>
    16fa:	24 c0       	rjmp	.+72     	; 0x1744 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fc:	8e 01       	movw	r16, r28
    16fe:	0d 5b       	subi	r16, 0xBD	; 189
    1700:	1f 4f       	sbci	r17, 0xFF	; 255
    1702:	fe 01       	movw	r30, r28
    1704:	eb 5b       	subi	r30, 0xBB	; 187
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	f8 01       	movw	r30, r16
    171a:	91 83       	std	Z+1, r25	; 0x01
    171c:	80 83       	st	Z, r24
    171e:	fe 01       	movw	r30, r28
    1720:	ed 5b       	subi	r30, 0xBD	; 189
    1722:	ff 4f       	sbci	r31, 0xFF	; 255
    1724:	80 81       	ld	r24, Z
    1726:	91 81       	ldd	r25, Z+1	; 0x01
    1728:	fe 01       	movw	r30, r28
    172a:	ff 96       	adiw	r30, 0x3f	; 63
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	fe 01       	movw	r30, r28
    1732:	ff 96       	adiw	r30, 0x3f	; 63
    1734:	80 81       	ld	r24, Z
    1736:	91 81       	ldd	r25, Z+1	; 0x01
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <LCD_voidInit+0x16e>
    173c:	fe 01       	movw	r30, r28
    173e:	ff 96       	adiw	r30, 0x3f	; 63
    1740:	91 83       	std	Z+1, r25	; 0x01
    1742:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    1744:	88 e3       	ldi	r24, 0x38	; 56
    1746:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a0 e2       	ldi	r26, 0x20	; 32
    1750:	b2 e4       	ldi	r27, 0x42	; 66
    1752:	8b af       	std	Y+59, r24	; 0x3b
    1754:	9c af       	std	Y+60, r25	; 0x3c
    1756:	ad af       	std	Y+61, r26	; 0x3d
    1758:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    175a:	6b ad       	ldd	r22, Y+59	; 0x3b
    175c:	7c ad       	ldd	r23, Y+60	; 0x3c
    175e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1760:	9e ad       	ldd	r25, Y+62	; 0x3e
    1762:	2b ea       	ldi	r18, 0xAB	; 171
    1764:	3a ea       	ldi	r19, 0xAA	; 170
    1766:	4a e2       	ldi	r20, 0x2A	; 42
    1768:	50 e4       	ldi	r21, 0x40	; 64
    176a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	8f ab       	std	Y+55, r24	; 0x37
    1774:	98 af       	std	Y+56, r25	; 0x38
    1776:	a9 af       	std	Y+57, r26	; 0x39
    1778:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    177a:	6f a9       	ldd	r22, Y+55	; 0x37
    177c:	78 ad       	ldd	r23, Y+56	; 0x38
    177e:	89 ad       	ldd	r24, Y+57	; 0x39
    1780:	9a ad       	ldd	r25, Y+58	; 0x3a
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	40 e8       	ldi	r20, 0x80	; 128
    1788:	5f e3       	ldi	r21, 0x3F	; 63
    178a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    178e:	88 23       	and	r24, r24
    1790:	1c f4       	brge	.+6      	; 0x1798 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	8e ab       	std	Y+54, r24	; 0x36
    1796:	91 c0       	rjmp	.+290    	; 0x18ba <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1798:	6f a9       	ldd	r22, Y+55	; 0x37
    179a:	78 ad       	ldd	r23, Y+56	; 0x38
    179c:	89 ad       	ldd	r24, Y+57	; 0x39
    179e:	9a ad       	ldd	r25, Y+58	; 0x3a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	53 e4       	ldi	r21, 0x43	; 67
    17a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	0c f0       	brlt	.+2      	; 0x17b2 <LCD_voidInit+0x1e8>
    17b0:	7b c0       	rjmp	.+246    	; 0x18a8 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    17b2:	6b ad       	ldd	r22, Y+59	; 0x3b
    17b4:	7c ad       	ldd	r23, Y+60	; 0x3c
    17b6:	8d ad       	ldd	r24, Y+61	; 0x3d
    17b8:	9e ad       	ldd	r25, Y+62	; 0x3e
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	4a e7       	ldi	r20, 0x7A	; 122
    17c0:	54 e4       	ldi	r21, 0x44	; 68
    17c2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8a ab       	std	Y+50, r24	; 0x32
    17cc:	9b ab       	std	Y+51, r25	; 0x33
    17ce:	ac ab       	std	Y+52, r26	; 0x34
    17d0:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d2:	6a a9       	ldd	r22, Y+50	; 0x32
    17d4:	7b a9       	ldd	r23, Y+51	; 0x33
    17d6:	8c a9       	ldd	r24, Y+52	; 0x34
    17d8:	9d a9       	ldd	r25, Y+53	; 0x35
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	4a ef       	ldi	r20, 0xFA	; 250
    17e0:	54 e4       	ldi	r21, 0x44	; 68
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	8e a7       	std	Y+46, r24	; 0x2e
    17ec:	9f a7       	std	Y+47, r25	; 0x2f
    17ee:	a8 ab       	std	Y+48, r26	; 0x30
    17f0:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    17f2:	6e a5       	ldd	r22, Y+46	; 0x2e
    17f4:	7f a5       	ldd	r23, Y+47	; 0x2f
    17f6:	88 a9       	ldd	r24, Y+48	; 0x30
    17f8:	99 a9       	ldd	r25, Y+49	; 0x31
    17fa:	20 e0       	ldi	r18, 0x00	; 0
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	40 e8       	ldi	r20, 0x80	; 128
    1800:	5f e3       	ldi	r21, 0x3F	; 63
    1802:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1806:	88 23       	and	r24, r24
    1808:	2c f4       	brge	.+10     	; 0x1814 <LCD_voidInit+0x24a>
		__ticks = 1;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9d a7       	std	Y+45, r25	; 0x2d
    1810:	8c a7       	std	Y+44, r24	; 0x2c
    1812:	3f c0       	rjmp	.+126    	; 0x1892 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1814:	6e a5       	ldd	r22, Y+46	; 0x2e
    1816:	7f a5       	ldd	r23, Y+47	; 0x2f
    1818:	88 a9       	ldd	r24, Y+48	; 0x30
    181a:	99 a9       	ldd	r25, Y+49	; 0x31
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	4f e7       	ldi	r20, 0x7F	; 127
    1822:	57 e4       	ldi	r21, 0x47	; 71
    1824:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1828:	18 16       	cp	r1, r24
    182a:	4c f5       	brge	.+82     	; 0x187e <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    182c:	6a a9       	ldd	r22, Y+50	; 0x32
    182e:	7b a9       	ldd	r23, Y+51	; 0x33
    1830:	8c a9       	ldd	r24, Y+52	; 0x34
    1832:	9d a9       	ldd	r25, Y+53	; 0x35
    1834:	20 e0       	ldi	r18, 0x00	; 0
    1836:	30 e0       	ldi	r19, 0x00	; 0
    1838:	40 e2       	ldi	r20, 0x20	; 32
    183a:	51 e4       	ldi	r21, 0x41	; 65
    183c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	bc 01       	movw	r22, r24
    1846:	cd 01       	movw	r24, r26
    1848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	9d a7       	std	Y+45, r25	; 0x2d
    1852:	8c a7       	std	Y+44, r24	; 0x2c
    1854:	0f c0       	rjmp	.+30     	; 0x1874 <LCD_voidInit+0x2aa>
    1856:	88 ec       	ldi	r24, 0xC8	; 200
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	9b a7       	std	Y+43, r25	; 0x2b
    185c:	8a a7       	std	Y+42, r24	; 0x2a
    185e:	8a a5       	ldd	r24, Y+42	; 0x2a
    1860:	9b a5       	ldd	r25, Y+43	; 0x2b
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	f1 f7       	brne	.-4      	; 0x1862 <LCD_voidInit+0x298>
    1866:	9b a7       	std	Y+43, r25	; 0x2b
    1868:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    186a:	8c a5       	ldd	r24, Y+44	; 0x2c
    186c:	9d a5       	ldd	r25, Y+45	; 0x2d
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	9d a7       	std	Y+45, r25	; 0x2d
    1872:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1874:	8c a5       	ldd	r24, Y+44	; 0x2c
    1876:	9d a5       	ldd	r25, Y+45	; 0x2d
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	69 f7       	brne	.-38     	; 0x1856 <LCD_voidInit+0x28c>
    187c:	24 c0       	rjmp	.+72     	; 0x18c6 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    187e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1880:	7f a5       	ldd	r23, Y+47	; 0x2f
    1882:	88 a9       	ldd	r24, Y+48	; 0x30
    1884:	99 a9       	ldd	r25, Y+49	; 0x31
    1886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    188a:	dc 01       	movw	r26, r24
    188c:	cb 01       	movw	r24, r22
    188e:	9d a7       	std	Y+45, r25	; 0x2d
    1890:	8c a7       	std	Y+44, r24	; 0x2c
    1892:	8c a5       	ldd	r24, Y+44	; 0x2c
    1894:	9d a5       	ldd	r25, Y+45	; 0x2d
    1896:	99 a7       	std	Y+41, r25	; 0x29
    1898:	88 a7       	std	Y+40, r24	; 0x28
    189a:	88 a5       	ldd	r24, Y+40	; 0x28
    189c:	99 a5       	ldd	r25, Y+41	; 0x29
    189e:	01 97       	sbiw	r24, 0x01	; 1
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_voidInit+0x2d4>
    18a2:	99 a7       	std	Y+41, r25	; 0x29
    18a4:	88 a7       	std	Y+40, r24	; 0x28
    18a6:	0f c0       	rjmp	.+30     	; 0x18c6 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18a8:	6f a9       	ldd	r22, Y+55	; 0x37
    18aa:	78 ad       	ldd	r23, Y+56	; 0x38
    18ac:	89 ad       	ldd	r24, Y+57	; 0x39
    18ae:	9a ad       	ldd	r25, Y+58	; 0x3a
    18b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b4:	dc 01       	movw	r26, r24
    18b6:	cb 01       	movw	r24, r22
    18b8:	8e ab       	std	Y+54, r24	; 0x36
    18ba:	8e a9       	ldd	r24, Y+54	; 0x36
    18bc:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18be:	8f a1       	ldd	r24, Y+39	; 0x27
    18c0:	8a 95       	dec	r24
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <LCD_voidInit+0x2f6>
    18c4:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    18c6:	8f e0       	ldi	r24, 0x0F	; 15
    18c8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a0 e2       	ldi	r26, 0x20	; 32
    18d2:	b2 e4       	ldi	r27, 0x42	; 66
    18d4:	8b a3       	std	Y+35, r24	; 0x23
    18d6:	9c a3       	std	Y+36, r25	; 0x24
    18d8:	ad a3       	std	Y+37, r26	; 0x25
    18da:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18dc:	6b a1       	ldd	r22, Y+35	; 0x23
    18de:	7c a1       	ldd	r23, Y+36	; 0x24
    18e0:	8d a1       	ldd	r24, Y+37	; 0x25
    18e2:	9e a1       	ldd	r25, Y+38	; 0x26
    18e4:	2b ea       	ldi	r18, 0xAB	; 171
    18e6:	3a ea       	ldi	r19, 0xAA	; 170
    18e8:	4a e2       	ldi	r20, 0x2A	; 42
    18ea:	50 e4       	ldi	r21, 0x40	; 64
    18ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	8f 8f       	std	Y+31, r24	; 0x1f
    18f6:	98 a3       	std	Y+32, r25	; 0x20
    18f8:	a9 a3       	std	Y+33, r26	; 0x21
    18fa:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    18fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    18fe:	78 a1       	ldd	r23, Y+32	; 0x20
    1900:	89 a1       	ldd	r24, Y+33	; 0x21
    1902:	9a a1       	ldd	r25, Y+34	; 0x22
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	1c f4       	brge	.+6      	; 0x191a <LCD_voidInit+0x350>
		__ticks = 1;
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	8e 8f       	std	Y+30, r24	; 0x1e
    1918:	91 c0       	rjmp	.+290    	; 0x1a3c <LCD_voidInit+0x472>
	else if (__tmp > 255)
    191a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    191c:	78 a1       	ldd	r23, Y+32	; 0x20
    191e:	89 a1       	ldd	r24, Y+33	; 0x21
    1920:	9a a1       	ldd	r25, Y+34	; 0x22
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4f e7       	ldi	r20, 0x7F	; 127
    1928:	53 e4       	ldi	r21, 0x43	; 67
    192a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    192e:	18 16       	cp	r1, r24
    1930:	0c f0       	brlt	.+2      	; 0x1934 <LCD_voidInit+0x36a>
    1932:	7b c0       	rjmp	.+246    	; 0x1a2a <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    1934:	6b a1       	ldd	r22, Y+35	; 0x23
    1936:	7c a1       	ldd	r23, Y+36	; 0x24
    1938:	8d a1       	ldd	r24, Y+37	; 0x25
    193a:	9e a1       	ldd	r25, Y+38	; 0x26
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	4a e7       	ldi	r20, 0x7A	; 122
    1942:	54 e4       	ldi	r21, 0x44	; 68
    1944:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	8a 8f       	std	Y+26, r24	; 0x1a
    194e:	9b 8f       	std	Y+27, r25	; 0x1b
    1950:	ac 8f       	std	Y+28, r26	; 0x1c
    1952:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1954:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1956:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1958:	8c 8d       	ldd	r24, Y+28	; 0x1c
    195a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	4a ef       	ldi	r20, 0xFA	; 250
    1962:	54 e4       	ldi	r21, 0x44	; 68
    1964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	8e 8b       	std	Y+22, r24	; 0x16
    196e:	9f 8b       	std	Y+23, r25	; 0x17
    1970:	a8 8f       	std	Y+24, r26	; 0x18
    1972:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1974:	6e 89       	ldd	r22, Y+22	; 0x16
    1976:	7f 89       	ldd	r23, Y+23	; 0x17
    1978:	88 8d       	ldd	r24, Y+24	; 0x18
    197a:	99 8d       	ldd	r25, Y+25	; 0x19
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e8       	ldi	r20, 0x80	; 128
    1982:	5f e3       	ldi	r21, 0x3F	; 63
    1984:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1988:	88 23       	and	r24, r24
    198a:	2c f4       	brge	.+10     	; 0x1996 <LCD_voidInit+0x3cc>
		__ticks = 1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	9d 8b       	std	Y+21, r25	; 0x15
    1992:	8c 8b       	std	Y+20, r24	; 0x14
    1994:	3f c0       	rjmp	.+126    	; 0x1a14 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    1996:	6e 89       	ldd	r22, Y+22	; 0x16
    1998:	7f 89       	ldd	r23, Y+23	; 0x17
    199a:	88 8d       	ldd	r24, Y+24	; 0x18
    199c:	99 8d       	ldd	r25, Y+25	; 0x19
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	3f ef       	ldi	r19, 0xFF	; 255
    19a2:	4f e7       	ldi	r20, 0x7F	; 127
    19a4:	57 e4       	ldi	r21, 0x47	; 71
    19a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19aa:	18 16       	cp	r1, r24
    19ac:	4c f5       	brge	.+82     	; 0x1a00 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ae:	6a 8d       	ldd	r22, Y+26	; 0x1a
    19b0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    19b2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19b4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e2       	ldi	r20, 0x20	; 32
    19bc:	51 e4       	ldi	r21, 0x41	; 65
    19be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	bc 01       	movw	r22, r24
    19c8:	cd 01       	movw	r24, r26
    19ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	9d 8b       	std	Y+21, r25	; 0x15
    19d4:	8c 8b       	std	Y+20, r24	; 0x14
    19d6:	0f c0       	rjmp	.+30     	; 0x19f6 <LCD_voidInit+0x42c>
    19d8:	88 ec       	ldi	r24, 0xC8	; 200
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9b 8b       	std	Y+19, r25	; 0x13
    19de:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19e0:	8a 89       	ldd	r24, Y+18	; 0x12
    19e2:	9b 89       	ldd	r25, Y+19	; 0x13
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	f1 f7       	brne	.-4      	; 0x19e4 <LCD_voidInit+0x41a>
    19e8:	9b 8b       	std	Y+19, r25	; 0x13
    19ea:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ec:	8c 89       	ldd	r24, Y+20	; 0x14
    19ee:	9d 89       	ldd	r25, Y+21	; 0x15
    19f0:	01 97       	sbiw	r24, 0x01	; 1
    19f2:	9d 8b       	std	Y+21, r25	; 0x15
    19f4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f6:	8c 89       	ldd	r24, Y+20	; 0x14
    19f8:	9d 89       	ldd	r25, Y+21	; 0x15
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	69 f7       	brne	.-38     	; 0x19d8 <LCD_voidInit+0x40e>
    19fe:	24 c0       	rjmp	.+72     	; 0x1a48 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a00:	6e 89       	ldd	r22, Y+22	; 0x16
    1a02:	7f 89       	ldd	r23, Y+23	; 0x17
    1a04:	88 8d       	ldd	r24, Y+24	; 0x18
    1a06:	99 8d       	ldd	r25, Y+25	; 0x19
    1a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0c:	dc 01       	movw	r26, r24
    1a0e:	cb 01       	movw	r24, r22
    1a10:	9d 8b       	std	Y+21, r25	; 0x15
    1a12:	8c 8b       	std	Y+20, r24	; 0x14
    1a14:	8c 89       	ldd	r24, Y+20	; 0x14
    1a16:	9d 89       	ldd	r25, Y+21	; 0x15
    1a18:	99 8b       	std	Y+17, r25	; 0x11
    1a1a:	88 8b       	std	Y+16, r24	; 0x10
    1a1c:	88 89       	ldd	r24, Y+16	; 0x10
    1a1e:	99 89       	ldd	r25, Y+17	; 0x11
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	f1 f7       	brne	.-4      	; 0x1a20 <LCD_voidInit+0x456>
    1a24:	99 8b       	std	Y+17, r25	; 0x11
    1a26:	88 8b       	std	Y+16, r24	; 0x10
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a2a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1a2c:	78 a1       	ldd	r23, Y+32	; 0x20
    1a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a30:	9a a1       	ldd	r25, Y+34	; 0x22
    1a32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a36:	dc 01       	movw	r26, r24
    1a38:	cb 01       	movw	r24, r22
    1a3a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a3e:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a42:	8a 95       	dec	r24
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_voidInit+0x478>
    1a46:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e0       	ldi	r26, 0x00	; 0
    1a54:	b0 e4       	ldi	r27, 0x40	; 64
    1a56:	8b 87       	std	Y+11, r24	; 0x0b
    1a58:	9c 87       	std	Y+12, r25	; 0x0c
    1a5a:	ad 87       	std	Y+13, r26	; 0x0d
    1a5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	4a ef       	ldi	r20, 0xFA	; 250
    1a6c:	54 e4       	ldi	r21, 0x44	; 68
    1a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	8f 83       	std	Y+7, r24	; 0x07
    1a78:	98 87       	std	Y+8, r25	; 0x08
    1a7a:	a9 87       	std	Y+9, r26	; 0x09
    1a7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a80:	78 85       	ldd	r23, Y+8	; 0x08
    1a82:	89 85       	ldd	r24, Y+9	; 0x09
    1a84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	40 e8       	ldi	r20, 0x80	; 128
    1a8c:	5f e3       	ldi	r21, 0x3F	; 63
    1a8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a92:	88 23       	and	r24, r24
    1a94:	2c f4       	brge	.+10     	; 0x1aa0 <LCD_voidInit+0x4d6>
		__ticks = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8d 83       	std	Y+5, r24	; 0x05
    1a9e:	3f c0       	rjmp	.+126    	; 0x1b1e <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    1aa0:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa2:	78 85       	ldd	r23, Y+8	; 0x08
    1aa4:	89 85       	ldd	r24, Y+9	; 0x09
    1aa6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	3f ef       	ldi	r19, 0xFF	; 255
    1aac:	4f e7       	ldi	r20, 0x7F	; 127
    1aae:	57 e4       	ldi	r21, 0x47	; 71
    1ab0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab4:	18 16       	cp	r1, r24
    1ab6:	4c f5       	brge	.+82     	; 0x1b0a <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ac0:	20 e0       	ldi	r18, 0x00	; 0
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	40 e2       	ldi	r20, 0x20	; 32
    1ac6:	51 e4       	ldi	r21, 0x41	; 65
    1ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1acc:	dc 01       	movw	r26, r24
    1ace:	cb 01       	movw	r24, r22
    1ad0:	bc 01       	movw	r22, r24
    1ad2:	cd 01       	movw	r24, r26
    1ad4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	9e 83       	std	Y+6, r25	; 0x06
    1ade:	8d 83       	std	Y+5, r24	; 0x05
    1ae0:	0f c0       	rjmp	.+30     	; 0x1b00 <LCD_voidInit+0x536>
    1ae2:	88 ec       	ldi	r24, 0xC8	; 200
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9c 83       	std	Y+4, r25	; 0x04
    1ae8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	01 97       	sbiw	r24, 0x01	; 1
    1af0:	f1 f7       	brne	.-4      	; 0x1aee <LCD_voidInit+0x524>
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af6:	8d 81       	ldd	r24, Y+5	; 0x05
    1af8:	9e 81       	ldd	r25, Y+6	; 0x06
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	9e 83       	std	Y+6, r25	; 0x06
    1afe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b00:	8d 81       	ldd	r24, Y+5	; 0x05
    1b02:	9e 81       	ldd	r25, Y+6	; 0x06
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	69 f7       	brne	.-38     	; 0x1ae2 <LCD_voidInit+0x518>
    1b08:	14 c0       	rjmp	.+40     	; 0x1b32 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b0c:	78 85       	ldd	r23, Y+8	; 0x08
    1b0e:	89 85       	ldd	r24, Y+9	; 0x09
    1b10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	f1 f7       	brne	.-4      	; 0x1b2a <LCD_voidInit+0x560>
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    1b32:	86 e0       	ldi	r24, 0x06	; 6
    1b34:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>


}
    1b38:	c4 5b       	subi	r28, 0xB4	; 180
    1b3a:	df 4f       	sbci	r29, 0xFF	; 255
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	f8 94       	cli
    1b40:	de bf       	out	0x3e, r29	; 62
    1b42:	0f be       	out	0x3f, r0	; 63
    1b44:	cd bf       	out	0x3d, r28	; 61
    1b46:	cf 91       	pop	r28
    1b48:	df 91       	pop	r29
    1b4a:	1f 91       	pop	r17
    1b4c:	0f 91       	pop	r16
    1b4e:	08 95       	ret

00001b50 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	e1 97       	sbiw	r28, 0x31	; 49
    1b5a:	0f b6       	in	r0, 0x3f	; 63
    1b5c:	f8 94       	cli
    1b5e:	de bf       	out	0x3e, r29	; 62
    1b60:	0f be       	out	0x3f, r0	; 63
    1b62:	cd bf       	out	0x3d, r28	; 61
    1b64:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1b66:	80 e0       	ldi	r24, 0x00	; 0
    1b68:	60 e0       	ldi	r22, 0x00	; 0
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	61 e0       	ldi	r22, 0x01	; 1
    1b74:	40 e0       	ldi	r20, 0x00	; 0
    1b76:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1b7a:	82 e0       	ldi	r24, 0x02	; 2
    1b7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b7e:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	62 e0       	ldi	r22, 0x02	; 2
    1b86:	41 e0       	ldi	r20, 0x01	; 1
    1b88:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e8       	ldi	r26, 0x80	; 128
    1b92:	bf e3       	ldi	r27, 0x3F	; 63
    1b94:	8d a7       	std	Y+45, r24	; 0x2d
    1b96:	9e a7       	std	Y+46, r25	; 0x2e
    1b98:	af a7       	std	Y+47, r26	; 0x2f
    1b9a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b9c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1b9e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ba0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba4:	2b ea       	ldi	r18, 0xAB	; 171
    1ba6:	3a ea       	ldi	r19, 0xAA	; 170
    1ba8:	4a e2       	ldi	r20, 0x2A	; 42
    1baa:	50 e4       	ldi	r21, 0x40	; 64
    1bac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	89 a7       	std	Y+41, r24	; 0x29
    1bb6:	9a a7       	std	Y+42, r25	; 0x2a
    1bb8:	ab a7       	std	Y+43, r26	; 0x2b
    1bba:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1bbc:	69 a5       	ldd	r22, Y+41	; 0x29
    1bbe:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	40 e8       	ldi	r20, 0x80	; 128
    1bca:	5f e3       	ldi	r21, 0x3F	; 63
    1bcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd0:	88 23       	and	r24, r24
    1bd2:	1c f4       	brge	.+6      	; 0x1bda <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    1bd4:	81 e0       	ldi	r24, 0x01	; 1
    1bd6:	88 a7       	std	Y+40, r24	; 0x28
    1bd8:	91 c0       	rjmp	.+290    	; 0x1cfc <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    1bda:	69 a5       	ldd	r22, Y+41	; 0x29
    1bdc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	4f e7       	ldi	r20, 0x7F	; 127
    1be8:	53 e4       	ldi	r21, 0x43	; 67
    1bea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bee:	18 16       	cp	r1, r24
    1bf0:	0c f0       	brlt	.+2      	; 0x1bf4 <LCD_voidSendCmnd+0xa4>
    1bf2:	7b c0       	rjmp	.+246    	; 0x1cea <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1bf4:	6d a5       	ldd	r22, Y+45	; 0x2d
    1bf6:	7e a5       	ldd	r23, Y+46	; 0x2e
    1bf8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfa:	98 a9       	ldd	r25, Y+48	; 0x30
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	4a e7       	ldi	r20, 0x7A	; 122
    1c02:	54 e4       	ldi	r21, 0x44	; 68
    1c04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c08:	dc 01       	movw	r26, r24
    1c0a:	cb 01       	movw	r24, r22
    1c0c:	8c a3       	std	Y+36, r24	; 0x24
    1c0e:	9d a3       	std	Y+37, r25	; 0x25
    1c10:	ae a3       	std	Y+38, r26	; 0x26
    1c12:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c14:	6c a1       	ldd	r22, Y+36	; 0x24
    1c16:	7d a1       	ldd	r23, Y+37	; 0x25
    1c18:	8e a1       	ldd	r24, Y+38	; 0x26
    1c1a:	9f a1       	ldd	r25, Y+39	; 0x27
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	4a ef       	ldi	r20, 0xFA	; 250
    1c22:	54 e4       	ldi	r21, 0x44	; 68
    1c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	88 a3       	std	Y+32, r24	; 0x20
    1c2e:	99 a3       	std	Y+33, r25	; 0x21
    1c30:	aa a3       	std	Y+34, r26	; 0x22
    1c32:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1c34:	68 a1       	ldd	r22, Y+32	; 0x20
    1c36:	79 a1       	ldd	r23, Y+33	; 0x21
    1c38:	8a a1       	ldd	r24, Y+34	; 0x22
    1c3a:	9b a1       	ldd	r25, Y+35	; 0x23
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	40 e8       	ldi	r20, 0x80	; 128
    1c42:	5f e3       	ldi	r21, 0x3F	; 63
    1c44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c48:	88 23       	and	r24, r24
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9f 8f       	std	Y+31, r25	; 0x1f
    1c52:	8e 8f       	std	Y+30, r24	; 0x1e
    1c54:	3f c0       	rjmp	.+126    	; 0x1cd4 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    1c56:	68 a1       	ldd	r22, Y+32	; 0x20
    1c58:	79 a1       	ldd	r23, Y+33	; 0x21
    1c5a:	8a a1       	ldd	r24, Y+34	; 0x22
    1c5c:	9b a1       	ldd	r25, Y+35	; 0x23
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	3f ef       	ldi	r19, 0xFF	; 255
    1c62:	4f e7       	ldi	r20, 0x7F	; 127
    1c64:	57 e4       	ldi	r21, 0x47	; 71
    1c66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c6a:	18 16       	cp	r1, r24
    1c6c:	4c f5       	brge	.+82     	; 0x1cc0 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6e:	6c a1       	ldd	r22, Y+36	; 0x24
    1c70:	7d a1       	ldd	r23, Y+37	; 0x25
    1c72:	8e a1       	ldd	r24, Y+38	; 0x26
    1c74:	9f a1       	ldd	r25, Y+39	; 0x27
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	40 e2       	ldi	r20, 0x20	; 32
    1c7c:	51 e4       	ldi	r21, 0x41	; 65
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	bc 01       	movw	r22, r24
    1c88:	cd 01       	movw	r24, r26
    1c8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	9f 8f       	std	Y+31, r25	; 0x1f
    1c94:	8e 8f       	std	Y+30, r24	; 0x1e
    1c96:	0f c0       	rjmp	.+30     	; 0x1cb6 <LCD_voidSendCmnd+0x166>
    1c98:	88 ec       	ldi	r24, 0xC8	; 200
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9d 8f       	std	Y+29, r25	; 0x1d
    1c9e:	8c 8f       	std	Y+28, r24	; 0x1c
    1ca0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ca2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	f1 f7       	brne	.-4      	; 0x1ca4 <LCD_voidSendCmnd+0x154>
    1ca8:	9d 8f       	std	Y+29, r25	; 0x1d
    1caa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	9f 8f       	std	Y+31, r25	; 0x1f
    1cb4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cb8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	69 f7       	brne	.-38     	; 0x1c98 <LCD_voidSendCmnd+0x148>
    1cbe:	24 c0       	rjmp	.+72     	; 0x1d08 <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc0:	68 a1       	ldd	r22, Y+32	; 0x20
    1cc2:	79 a1       	ldd	r23, Y+33	; 0x21
    1cc4:	8a a1       	ldd	r24, Y+34	; 0x22
    1cc6:	9b a1       	ldd	r25, Y+35	; 0x23
    1cc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ccc:	dc 01       	movw	r26, r24
    1cce:	cb 01       	movw	r24, r22
    1cd0:	9f 8f       	std	Y+31, r25	; 0x1f
    1cd2:	8e 8f       	std	Y+30, r24	; 0x1e
    1cd4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cd6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1cd8:	9b 8f       	std	Y+27, r25	; 0x1b
    1cda:	8a 8f       	std	Y+26, r24	; 0x1a
    1cdc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1cde:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1ce0:	01 97       	sbiw	r24, 0x01	; 1
    1ce2:	f1 f7       	brne	.-4      	; 0x1ce0 <LCD_voidSendCmnd+0x190>
    1ce4:	9b 8f       	std	Y+27, r25	; 0x1b
    1ce6:	8a 8f       	std	Y+26, r24	; 0x1a
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cea:	69 a5       	ldd	r22, Y+41	; 0x29
    1cec:	7a a5       	ldd	r23, Y+42	; 0x2a
    1cee:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cf0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	88 a7       	std	Y+40, r24	; 0x28
    1cfc:	88 a5       	ldd	r24, Y+40	; 0x28
    1cfe:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d00:	89 8d       	ldd	r24, Y+25	; 0x19
    1d02:	8a 95       	dec	r24
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_voidSendCmnd+0x1b2>
    1d06:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	62 e0       	ldi	r22, 0x02	; 2
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    1d12:	80 e0       	ldi	r24, 0x00	; 0
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	a0 e8       	ldi	r26, 0x80	; 128
    1d18:	bf e3       	ldi	r27, 0x3F	; 63
    1d1a:	8d 8b       	std	Y+21, r24	; 0x15
    1d1c:	9e 8b       	std	Y+22, r25	; 0x16
    1d1e:	af 8b       	std	Y+23, r26	; 0x17
    1d20:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d22:	6d 89       	ldd	r22, Y+21	; 0x15
    1d24:	7e 89       	ldd	r23, Y+22	; 0x16
    1d26:	8f 89       	ldd	r24, Y+23	; 0x17
    1d28:	98 8d       	ldd	r25, Y+24	; 0x18
    1d2a:	2b ea       	ldi	r18, 0xAB	; 171
    1d2c:	3a ea       	ldi	r19, 0xAA	; 170
    1d2e:	4a e2       	ldi	r20, 0x2A	; 42
    1d30:	50 e4       	ldi	r21, 0x40	; 64
    1d32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d36:	dc 01       	movw	r26, r24
    1d38:	cb 01       	movw	r24, r22
    1d3a:	89 8b       	std	Y+17, r24	; 0x11
    1d3c:	9a 8b       	std	Y+18, r25	; 0x12
    1d3e:	ab 8b       	std	Y+19, r26	; 0x13
    1d40:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1d42:	69 89       	ldd	r22, Y+17	; 0x11
    1d44:	7a 89       	ldd	r23, Y+18	; 0x12
    1d46:	8b 89       	ldd	r24, Y+19	; 0x13
    1d48:	9c 89       	ldd	r25, Y+20	; 0x14
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	5f e3       	ldi	r21, 0x3F	; 63
    1d52:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d56:	88 23       	and	r24, r24
    1d58:	1c f4       	brge	.+6      	; 0x1d60 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	88 8b       	std	Y+16, r24	; 0x10
    1d5e:	91 c0       	rjmp	.+290    	; 0x1e82 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    1d60:	69 89       	ldd	r22, Y+17	; 0x11
    1d62:	7a 89       	ldd	r23, Y+18	; 0x12
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	20 e0       	ldi	r18, 0x00	; 0
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	4f e7       	ldi	r20, 0x7F	; 127
    1d6e:	53 e4       	ldi	r21, 0x43	; 67
    1d70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d74:	18 16       	cp	r1, r24
    1d76:	0c f0       	brlt	.+2      	; 0x1d7a <LCD_voidSendCmnd+0x22a>
    1d78:	7b c0       	rjmp	.+246    	; 0x1e70 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    1d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d80:	98 8d       	ldd	r25, Y+24	; 0x18
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	4a e7       	ldi	r20, 0x7A	; 122
    1d88:	54 e4       	ldi	r21, 0x44	; 68
    1d8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	8c 87       	std	Y+12, r24	; 0x0c
    1d94:	9d 87       	std	Y+13, r25	; 0x0d
    1d96:	ae 87       	std	Y+14, r26	; 0x0e
    1d98:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d9c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1da0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a ef       	ldi	r20, 0xFA	; 250
    1da8:	54 e4       	ldi	r21, 0x44	; 68
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	88 87       	std	Y+8, r24	; 0x08
    1db4:	99 87       	std	Y+9, r25	; 0x09
    1db6:	aa 87       	std	Y+10, r26	; 0x0a
    1db8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1dba:	68 85       	ldd	r22, Y+8	; 0x08
    1dbc:	79 85       	ldd	r23, Y+9	; 0x09
    1dbe:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9f 83       	std	Y+7, r25	; 0x07
    1dd8:	8e 83       	std	Y+6, r24	; 0x06
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    1ddc:	68 85       	ldd	r22, Y+8	; 0x08
    1dde:	79 85       	ldd	r23, Y+9	; 0x09
    1de0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1de2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f5       	brge	.+82     	; 0x1e46 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1df6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1df8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dfa:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9f 83       	std	Y+7, r25	; 0x07
    1e1a:	8e 83       	std	Y+6, r24	; 0x06
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <LCD_voidSendCmnd+0x2ec>
    1e1e:	88 ec       	ldi	r24, 0xC8	; 200
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9d 83       	std	Y+5, r25	; 0x05
    1e24:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e26:	8c 81       	ldd	r24, Y+4	; 0x04
    1e28:	9d 81       	ldd	r25, Y+5	; 0x05
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_voidSendCmnd+0x2da>
    1e2e:	9d 83       	std	Y+5, r25	; 0x05
    1e30:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	8e 81       	ldd	r24, Y+6	; 0x06
    1e34:	9f 81       	ldd	r25, Y+7	; 0x07
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9f 83       	std	Y+7, r25	; 0x07
    1e3a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <LCD_voidSendCmnd+0x2ce>
    1e44:	24 c0       	rjmp	.+72     	; 0x1e8e <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	68 85       	ldd	r22, Y+8	; 0x08
    1e48:	79 85       	ldd	r23, Y+9	; 0x09
    1e4a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e4c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9f 83       	std	Y+7, r25	; 0x07
    1e58:	8e 83       	std	Y+6, r24	; 0x06
    1e5a:	8e 81       	ldd	r24, Y+6	; 0x06
    1e5c:	9f 81       	ldd	r25, Y+7	; 0x07
    1e5e:	9b 83       	std	Y+3, r25	; 0x03
    1e60:	8a 83       	std	Y+2, r24	; 0x02
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	9b 81       	ldd	r25, Y+3	; 0x03
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_voidSendCmnd+0x316>
    1e6a:	9b 83       	std	Y+3, r25	; 0x03
    1e6c:	8a 83       	std	Y+2, r24	; 0x02
    1e6e:	0f c0       	rjmp	.+30     	; 0x1e8e <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e70:	69 89       	ldd	r22, Y+17	; 0x11
    1e72:	7a 89       	ldd	r23, Y+18	; 0x12
    1e74:	8b 89       	ldd	r24, Y+19	; 0x13
    1e76:	9c 89       	ldd	r25, Y+20	; 0x14
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	88 8b       	std	Y+16, r24	; 0x10
    1e82:	88 89       	ldd	r24, Y+16	; 0x10
    1e84:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	8a 95       	dec	r24
    1e8a:	f1 f7       	brne	.-4      	; 0x1e88 <LCD_voidSendCmnd+0x338>
    1e8c:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    1e8e:	e1 96       	adiw	r28, 0x31	; 49
    1e90:	0f b6       	in	r0, 0x3f	; 63
    1e92:	f8 94       	cli
    1e94:	de bf       	out	0x3e, r29	; 62
    1e96:	0f be       	out	0x3f, r0	; 63
    1e98:	cd bf       	out	0x3d, r28	; 61
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	08 95       	ret

00001ea0 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    1ea0:	df 93       	push	r29
    1ea2:	cf 93       	push	r28
    1ea4:	cd b7       	in	r28, 0x3d	; 61
    1ea6:	de b7       	in	r29, 0x3e	; 62
    1ea8:	e1 97       	sbiw	r28, 0x31	; 49
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	60 e0       	ldi	r22, 0x00	; 0
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
    1ec2:	61 e0       	ldi	r22, 0x01	; 1
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	69 a9       	ldd	r22, Y+49	; 0x31
    1ece:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	62 e0       	ldi	r22, 0x02	; 2
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a0 e8       	ldi	r26, 0x80	; 128
    1ee2:	bf e3       	ldi	r27, 0x3F	; 63
    1ee4:	8d a7       	std	Y+45, r24	; 0x2d
    1ee6:	9e a7       	std	Y+46, r25	; 0x2e
    1ee8:	af a7       	std	Y+47, r26	; 0x2f
    1eea:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eec:	6d a5       	ldd	r22, Y+45	; 0x2d
    1eee:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ef0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef4:	2b ea       	ldi	r18, 0xAB	; 171
    1ef6:	3a ea       	ldi	r19, 0xAA	; 170
    1ef8:	4a e2       	ldi	r20, 0x2A	; 42
    1efa:	50 e4       	ldi	r21, 0x40	; 64
    1efc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	89 a7       	std	Y+41, r24	; 0x29
    1f06:	9a a7       	std	Y+42, r25	; 0x2a
    1f08:	ab a7       	std	Y+43, r26	; 0x2b
    1f0a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f0c:	69 a5       	ldd	r22, Y+41	; 0x29
    1f0e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f10:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f12:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e8       	ldi	r20, 0x80	; 128
    1f1a:	5f e3       	ldi	r21, 0x3F	; 63
    1f1c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f20:	88 23       	and	r24, r24
    1f22:	1c f4       	brge	.+6      	; 0x1f2a <LCD_voidSendChar+0x8a>
		__ticks = 1;
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	88 a7       	std	Y+40, r24	; 0x28
    1f28:	91 c0       	rjmp	.+290    	; 0x204c <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    1f2a:	69 a5       	ldd	r22, Y+41	; 0x29
    1f2c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f2e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f30:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f32:	20 e0       	ldi	r18, 0x00	; 0
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	4f e7       	ldi	r20, 0x7F	; 127
    1f38:	53 e4       	ldi	r21, 0x43	; 67
    1f3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f3e:	18 16       	cp	r1, r24
    1f40:	0c f0       	brlt	.+2      	; 0x1f44 <LCD_voidSendChar+0xa4>
    1f42:	7b c0       	rjmp	.+246    	; 0x203a <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1f44:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f46:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	4a e7       	ldi	r20, 0x7A	; 122
    1f52:	54 e4       	ldi	r21, 0x44	; 68
    1f54:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f58:	dc 01       	movw	r26, r24
    1f5a:	cb 01       	movw	r24, r22
    1f5c:	8c a3       	std	Y+36, r24	; 0x24
    1f5e:	9d a3       	std	Y+37, r25	; 0x25
    1f60:	ae a3       	std	Y+38, r26	; 0x26
    1f62:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f64:	6c a1       	ldd	r22, Y+36	; 0x24
    1f66:	7d a1       	ldd	r23, Y+37	; 0x25
    1f68:	8e a1       	ldd	r24, Y+38	; 0x26
    1f6a:	9f a1       	ldd	r25, Y+39	; 0x27
    1f6c:	20 e0       	ldi	r18, 0x00	; 0
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	4a ef       	ldi	r20, 0xFA	; 250
    1f72:	54 e4       	ldi	r21, 0x44	; 68
    1f74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	88 a3       	std	Y+32, r24	; 0x20
    1f7e:	99 a3       	std	Y+33, r25	; 0x21
    1f80:	aa a3       	std	Y+34, r26	; 0x22
    1f82:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f84:	68 a1       	ldd	r22, Y+32	; 0x20
    1f86:	79 a1       	ldd	r23, Y+33	; 0x21
    1f88:	8a a1       	ldd	r24, Y+34	; 0x22
    1f8a:	9b a1       	ldd	r25, Y+35	; 0x23
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	40 e8       	ldi	r20, 0x80	; 128
    1f92:	5f e3       	ldi	r21, 0x3F	; 63
    1f94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f98:	88 23       	and	r24, r24
    1f9a:	2c f4       	brge	.+10     	; 0x1fa6 <LCD_voidSendChar+0x106>
		__ticks = 1;
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9f 8f       	std	Y+31, r25	; 0x1f
    1fa2:	8e 8f       	std	Y+30, r24	; 0x1e
    1fa4:	3f c0       	rjmp	.+126    	; 0x2024 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    1fa6:	68 a1       	ldd	r22, Y+32	; 0x20
    1fa8:	79 a1       	ldd	r23, Y+33	; 0x21
    1faa:	8a a1       	ldd	r24, Y+34	; 0x22
    1fac:	9b a1       	ldd	r25, Y+35	; 0x23
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	3f ef       	ldi	r19, 0xFF	; 255
    1fb2:	4f e7       	ldi	r20, 0x7F	; 127
    1fb4:	57 e4       	ldi	r21, 0x47	; 71
    1fb6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fba:	18 16       	cp	r1, r24
    1fbc:	4c f5       	brge	.+82     	; 0x2010 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fbe:	6c a1       	ldd	r22, Y+36	; 0x24
    1fc0:	7d a1       	ldd	r23, Y+37	; 0x25
    1fc2:	8e a1       	ldd	r24, Y+38	; 0x26
    1fc4:	9f a1       	ldd	r25, Y+39	; 0x27
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	40 e2       	ldi	r20, 0x20	; 32
    1fcc:	51 e4       	ldi	r21, 0x41	; 65
    1fce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	bc 01       	movw	r22, r24
    1fd8:	cd 01       	movw	r24, r26
    1fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	9f 8f       	std	Y+31, r25	; 0x1f
    1fe4:	8e 8f       	std	Y+30, r24	; 0x1e
    1fe6:	0f c0       	rjmp	.+30     	; 0x2006 <LCD_voidSendChar+0x166>
    1fe8:	88 ec       	ldi	r24, 0xC8	; 200
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	9d 8f       	std	Y+29, r25	; 0x1d
    1fee:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ff0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ff2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	f1 f7       	brne	.-4      	; 0x1ff4 <LCD_voidSendChar+0x154>
    1ff8:	9d 8f       	std	Y+29, r25	; 0x1d
    1ffa:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ffc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ffe:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2000:	01 97       	sbiw	r24, 0x01	; 1
    2002:	9f 8f       	std	Y+31, r25	; 0x1f
    2004:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2006:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2008:	9f 8d       	ldd	r25, Y+31	; 0x1f
    200a:	00 97       	sbiw	r24, 0x00	; 0
    200c:	69 f7       	brne	.-38     	; 0x1fe8 <LCD_voidSendChar+0x148>
    200e:	24 c0       	rjmp	.+72     	; 0x2058 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2010:	68 a1       	ldd	r22, Y+32	; 0x20
    2012:	79 a1       	ldd	r23, Y+33	; 0x21
    2014:	8a a1       	ldd	r24, Y+34	; 0x22
    2016:	9b a1       	ldd	r25, Y+35	; 0x23
    2018:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	9f 8f       	std	Y+31, r25	; 0x1f
    2022:	8e 8f       	std	Y+30, r24	; 0x1e
    2024:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2026:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2028:	9b 8f       	std	Y+27, r25	; 0x1b
    202a:	8a 8f       	std	Y+26, r24	; 0x1a
    202c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    202e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_voidSendChar+0x190>
    2034:	9b 8f       	std	Y+27, r25	; 0x1b
    2036:	8a 8f       	std	Y+26, r24	; 0x1a
    2038:	0f c0       	rjmp	.+30     	; 0x2058 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    203a:	69 a5       	ldd	r22, Y+41	; 0x29
    203c:	7a a5       	ldd	r23, Y+42	; 0x2a
    203e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2040:	9c a5       	ldd	r25, Y+44	; 0x2c
    2042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	88 a7       	std	Y+40, r24	; 0x28
    204c:	88 a5       	ldd	r24, Y+40	; 0x28
    204e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2050:	89 8d       	ldd	r24, Y+25	; 0x19
    2052:	8a 95       	dec	r24
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_voidSendChar+0x1b2>
    2056:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	62 e0       	ldi	r22, 0x02	; 2
    205c:	40 e0       	ldi	r20, 0x00	; 0
    205e:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e8       	ldi	r26, 0x80	; 128
    2068:	bf e3       	ldi	r27, 0x3F	; 63
    206a:	8d 8b       	std	Y+21, r24	; 0x15
    206c:	9e 8b       	std	Y+22, r25	; 0x16
    206e:	af 8b       	std	Y+23, r26	; 0x17
    2070:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2072:	6d 89       	ldd	r22, Y+21	; 0x15
    2074:	7e 89       	ldd	r23, Y+22	; 0x16
    2076:	8f 89       	ldd	r24, Y+23	; 0x17
    2078:	98 8d       	ldd	r25, Y+24	; 0x18
    207a:	2b ea       	ldi	r18, 0xAB	; 171
    207c:	3a ea       	ldi	r19, 0xAA	; 170
    207e:	4a e2       	ldi	r20, 0x2A	; 42
    2080:	50 e4       	ldi	r21, 0x40	; 64
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	89 8b       	std	Y+17, r24	; 0x11
    208c:	9a 8b       	std	Y+18, r25	; 0x12
    208e:	ab 8b       	std	Y+19, r26	; 0x13
    2090:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2092:	69 89       	ldd	r22, Y+17	; 0x11
    2094:	7a 89       	ldd	r23, Y+18	; 0x12
    2096:	8b 89       	ldd	r24, Y+19	; 0x13
    2098:	9c 89       	ldd	r25, Y+20	; 0x14
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	1c f4       	brge	.+6      	; 0x20b0 <LCD_voidSendChar+0x210>
		__ticks = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	88 8b       	std	Y+16, r24	; 0x10
    20ae:	91 c0       	rjmp	.+290    	; 0x21d2 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    20b0:	69 89       	ldd	r22, Y+17	; 0x11
    20b2:	7a 89       	ldd	r23, Y+18	; 0x12
    20b4:	8b 89       	ldd	r24, Y+19	; 0x13
    20b6:	9c 89       	ldd	r25, Y+20	; 0x14
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4f e7       	ldi	r20, 0x7F	; 127
    20be:	53 e4       	ldi	r21, 0x43	; 67
    20c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c4:	18 16       	cp	r1, r24
    20c6:	0c f0       	brlt	.+2      	; 0x20ca <LCD_voidSendChar+0x22a>
    20c8:	7b c0       	rjmp	.+246    	; 0x21c0 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    20ca:	6d 89       	ldd	r22, Y+21	; 0x15
    20cc:	7e 89       	ldd	r23, Y+22	; 0x16
    20ce:	8f 89       	ldd	r24, Y+23	; 0x17
    20d0:	98 8d       	ldd	r25, Y+24	; 0x18
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	4a e7       	ldi	r20, 0x7A	; 122
    20d8:	54 e4       	ldi	r21, 0x44	; 68
    20da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20de:	dc 01       	movw	r26, r24
    20e0:	cb 01       	movw	r24, r22
    20e2:	8c 87       	std	Y+12, r24	; 0x0c
    20e4:	9d 87       	std	Y+13, r25	; 0x0d
    20e6:	ae 87       	std	Y+14, r26	; 0x0e
    20e8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    20ee:	8e 85       	ldd	r24, Y+14	; 0x0e
    20f0:	9f 85       	ldd	r25, Y+15	; 0x0f
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4a ef       	ldi	r20, 0xFA	; 250
    20f8:	54 e4       	ldi	r21, 0x44	; 68
    20fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	88 87       	std	Y+8, r24	; 0x08
    2104:	99 87       	std	Y+9, r25	; 0x09
    2106:	aa 87       	std	Y+10, r26	; 0x0a
    2108:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    210a:	68 85       	ldd	r22, Y+8	; 0x08
    210c:	79 85       	ldd	r23, Y+9	; 0x09
    210e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2110:	9b 85       	ldd	r25, Y+11	; 0x0b
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e8       	ldi	r20, 0x80	; 128
    2118:	5f e3       	ldi	r21, 0x3F	; 63
    211a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    211e:	88 23       	and	r24, r24
    2120:	2c f4       	brge	.+10     	; 0x212c <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	9f 83       	std	Y+7, r25	; 0x07
    2128:	8e 83       	std	Y+6, r24	; 0x06
    212a:	3f c0       	rjmp	.+126    	; 0x21aa <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    212c:	68 85       	ldd	r22, Y+8	; 0x08
    212e:	79 85       	ldd	r23, Y+9	; 0x09
    2130:	8a 85       	ldd	r24, Y+10	; 0x0a
    2132:	9b 85       	ldd	r25, Y+11	; 0x0b
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	3f ef       	ldi	r19, 0xFF	; 255
    2138:	4f e7       	ldi	r20, 0x7F	; 127
    213a:	57 e4       	ldi	r21, 0x47	; 71
    213c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2140:	18 16       	cp	r1, r24
    2142:	4c f5       	brge	.+82     	; 0x2196 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2144:	6c 85       	ldd	r22, Y+12	; 0x0c
    2146:	7d 85       	ldd	r23, Y+13	; 0x0d
    2148:	8e 85       	ldd	r24, Y+14	; 0x0e
    214a:	9f 85       	ldd	r25, Y+15	; 0x0f
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e2       	ldi	r20, 0x20	; 32
    2152:	51 e4       	ldi	r21, 0x41	; 65
    2154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	bc 01       	movw	r22, r24
    215e:	cd 01       	movw	r24, r26
    2160:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2164:	dc 01       	movw	r26, r24
    2166:	cb 01       	movw	r24, r22
    2168:	9f 83       	std	Y+7, r25	; 0x07
    216a:	8e 83       	std	Y+6, r24	; 0x06
    216c:	0f c0       	rjmp	.+30     	; 0x218c <LCD_voidSendChar+0x2ec>
    216e:	88 ec       	ldi	r24, 0xC8	; 200
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	9d 83       	std	Y+5, r25	; 0x05
    2174:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2176:	8c 81       	ldd	r24, Y+4	; 0x04
    2178:	9d 81       	ldd	r25, Y+5	; 0x05
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LCD_voidSendChar+0x2da>
    217e:	9d 83       	std	Y+5, r25	; 0x05
    2180:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2182:	8e 81       	ldd	r24, Y+6	; 0x06
    2184:	9f 81       	ldd	r25, Y+7	; 0x07
    2186:	01 97       	sbiw	r24, 0x01	; 1
    2188:	9f 83       	std	Y+7, r25	; 0x07
    218a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    218c:	8e 81       	ldd	r24, Y+6	; 0x06
    218e:	9f 81       	ldd	r25, Y+7	; 0x07
    2190:	00 97       	sbiw	r24, 0x00	; 0
    2192:	69 f7       	brne	.-38     	; 0x216e <LCD_voidSendChar+0x2ce>
    2194:	24 c0       	rjmp	.+72     	; 0x21de <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2196:	68 85       	ldd	r22, Y+8	; 0x08
    2198:	79 85       	ldd	r23, Y+9	; 0x09
    219a:	8a 85       	ldd	r24, Y+10	; 0x0a
    219c:	9b 85       	ldd	r25, Y+11	; 0x0b
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9f 83       	std	Y+7, r25	; 0x07
    21a8:	8e 83       	std	Y+6, r24	; 0x06
    21aa:	8e 81       	ldd	r24, Y+6	; 0x06
    21ac:	9f 81       	ldd	r25, Y+7	; 0x07
    21ae:	9b 83       	std	Y+3, r25	; 0x03
    21b0:	8a 83       	std	Y+2, r24	; 0x02
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	9b 81       	ldd	r25, Y+3	; 0x03
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_voidSendChar+0x316>
    21ba:	9b 83       	std	Y+3, r25	; 0x03
    21bc:	8a 83       	std	Y+2, r24	; 0x02
    21be:	0f c0       	rjmp	.+30     	; 0x21de <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21c0:	69 89       	ldd	r22, Y+17	; 0x11
    21c2:	7a 89       	ldd	r23, Y+18	; 0x12
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	88 8b       	std	Y+16, r24	; 0x10
    21d2:	88 89       	ldd	r24, Y+16	; 0x10
    21d4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	8a 95       	dec	r24
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_voidSendChar+0x338>
    21dc:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    21de:	e1 96       	adiw	r28, 0x31	; 49
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	de bf       	out	0x3e, r29	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	cd bf       	out	0x3d, r28	; 61
    21ea:	cf 91       	pop	r28
    21ec:	df 91       	pop	r29
    21ee:	08 95       	ret

000021f0 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	00 d0       	rcall	.+0      	; 0x21f6 <LCD_voidWriteString+0x6>
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	9a 83       	std	Y+2, r25	; 0x02
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	0a c0       	rjmp	.+20     	; 0x2214 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    2200:	e9 81       	ldd	r30, Y+1	; 0x01
    2202:	fa 81       	ldd	r31, Y+2	; 0x02
    2204:	80 81       	ld	r24, Z
    2206:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    2214:	e9 81       	ldd	r30, Y+1	; 0x01
    2216:	fa 81       	ldd	r31, Y+2	; 0x02
    2218:	80 81       	ld	r24, Z
    221a:	88 23       	and	r24, r24
    221c:	89 f7       	brne	.-30     	; 0x2200 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	cf 91       	pop	r28
    2224:	df 91       	pop	r29
    2226:	08 95       	ret

00002228 <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	65 97       	sbiw	r28, 0x15	; 21
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	6a 8b       	std	Y+18, r22	; 0x12
    2242:	7b 8b       	std	Y+19, r23	; 0x13
    2244:	8c 8b       	std	Y+20, r24	; 0x14
    2246:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    224c:	8a 89       	ldd	r24, Y+18	; 0x12
    224e:	9b 89       	ldd	r25, Y+19	; 0x13
    2250:	ac 89       	ldd	r26, Y+20	; 0x14
    2252:	bd 89       	ldd	r27, Y+21	; 0x15
    2254:	00 97       	sbiw	r24, 0x00	; 0
    2256:	a1 05       	cpc	r26, r1
    2258:	b1 05       	cpc	r27, r1
    225a:	99 f5       	brne	.+102    	; 0x22c2 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    225c:	80 e3       	ldi	r24, 0x30	; 48
    225e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    2262:	4e c0       	rjmp	.+156    	; 0x2300 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2264:	8a 81       	ldd	r24, Y+2	; 0x02
    2266:	8f 5f       	subi	r24, 0xFF	; 255
    2268:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	08 2f       	mov	r16, r24
    226e:	11 27       	eor	r17, r17
    2270:	07 fd       	sbrc	r16, 7
    2272:	10 95       	com	r17
    2274:	8a 89       	ldd	r24, Y+18	; 0x12
    2276:	9b 89       	ldd	r25, Y+19	; 0x13
    2278:	ac 89       	ldd	r26, Y+20	; 0x14
    227a:	bd 89       	ldd	r27, Y+21	; 0x15
    227c:	2a e0       	ldi	r18, 0x0A	; 10
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	50 e0       	ldi	r21, 0x00	; 0
    2284:	bc 01       	movw	r22, r24
    2286:	cd 01       	movw	r24, r26
    2288:	0e 94 09 19 	call	0x3212	; 0x3212 <__udivmodsi4>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	28 2f       	mov	r18, r24
    2292:	ce 01       	movw	r24, r28
    2294:	03 96       	adiw	r24, 0x03	; 3
    2296:	fc 01       	movw	r30, r24
    2298:	e0 0f       	add	r30, r16
    229a:	f1 1f       	adc	r31, r17
    229c:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    229e:	8a 89       	ldd	r24, Y+18	; 0x12
    22a0:	9b 89       	ldd	r25, Y+19	; 0x13
    22a2:	ac 89       	ldd	r26, Y+20	; 0x14
    22a4:	bd 89       	ldd	r27, Y+21	; 0x15
    22a6:	2a e0       	ldi	r18, 0x0A	; 10
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e0       	ldi	r20, 0x00	; 0
    22ac:	50 e0       	ldi	r21, 0x00	; 0
    22ae:	bc 01       	movw	r22, r24
    22b0:	cd 01       	movw	r24, r26
    22b2:	0e 94 09 19 	call	0x3212	; 0x3212 <__udivmodsi4>
    22b6:	da 01       	movw	r26, r20
    22b8:	c9 01       	movw	r24, r18
    22ba:	8a 8b       	std	Y+18, r24	; 0x12
    22bc:	9b 8b       	std	Y+19, r25	; 0x13
    22be:	ac 8b       	std	Y+20, r26	; 0x14
    22c0:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    22c2:	8a 89       	ldd	r24, Y+18	; 0x12
    22c4:	9b 89       	ldd	r25, Y+19	; 0x13
    22c6:	ac 89       	ldd	r26, Y+20	; 0x14
    22c8:	bd 89       	ldd	r27, Y+21	; 0x15
    22ca:	00 97       	sbiw	r24, 0x00	; 0
    22cc:	a1 05       	cpc	r26, r1
    22ce:	b1 05       	cpc	r27, r1
    22d0:	49 f6       	brne	.-110    	; 0x2264 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    22d2:	8a 81       	ldd	r24, Y+2	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	11 c0       	rjmp	.+34     	; 0x22fa <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	28 2f       	mov	r18, r24
    22dc:	33 27       	eor	r19, r19
    22de:	27 fd       	sbrc	r18, 7
    22e0:	30 95       	com	r19
    22e2:	ce 01       	movw	r24, r28
    22e4:	03 96       	adiw	r24, 0x03	; 3
    22e6:	fc 01       	movw	r30, r24
    22e8:	e2 0f       	add	r30, r18
    22ea:	f3 1f       	adc	r31, r19
    22ec:	80 81       	ld	r24, Z
    22ee:	80 5d       	subi	r24, 0xD0	; 208
    22f0:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	81 50       	subi	r24, 0x01	; 1
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	88 23       	and	r24, r24
    22fe:	64 f7       	brge	.-40     	; 0x22d8 <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    2300:	65 96       	adiw	r28, 0x15	; 21
    2302:	0f b6       	in	r0, 0x3f	; 63
    2304:	f8 94       	cli
    2306:	de bf       	out	0x3e, r29	; 62
    2308:	0f be       	out	0x3f, r0	; 63
    230a:	cd bf       	out	0x3d, r28	; 61
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	1f 91       	pop	r17
    2312:	0f 91       	pop	r16
    2314:	08 95       	ret

00002316 <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	00 d0       	rcall	.+0      	; 0x231c <LCD_u8GoToXY+0x6>
    231c:	00 d0       	rcall	.+0      	; 0x231e <LCD_u8GoToXY+0x8>
    231e:	0f 92       	push	r0
    2320:	cd b7       	in	r28, 0x3d	; 61
    2322:	de b7       	in	r29, 0x3e	; 62
    2324:	8a 83       	std	Y+2, r24	; 0x02
    2326:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	88 32       	cpi	r24, 0x28	; 40
    2330:	d8 f4       	brcc	.+54     	; 0x2368 <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3d 83       	std	Y+5, r19	; 0x05
    233a:	2c 83       	std	Y+4, r18	; 0x04
    233c:	8c 81       	ldd	r24, Y+4	; 0x04
    233e:	9d 81       	ldd	r25, Y+5	; 0x05
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	91 05       	cpc	r25, r1
    2344:	31 f0       	breq	.+12     	; 0x2352 <LCD_u8GoToXY+0x3c>
    2346:	2c 81       	ldd	r18, Y+4	; 0x04
    2348:	3d 81       	ldd	r19, Y+5	; 0x05
    234a:	22 30       	cpi	r18, 0x02	; 2
    234c:	31 05       	cpc	r19, r1
    234e:	31 f0       	breq	.+12     	; 0x235c <LCD_u8GoToXY+0x46>
    2350:	0a c0       	rjmp	.+20     	; 0x2366 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	80 58       	subi	r24, 0x80	; 128
    2356:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
    235a:	06 c0       	rjmp	.+12     	; 0x2368 <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	80 54       	subi	r24, 0x40	; 64
    2360:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
    2364:	01 c0       	rjmp	.+2      	; 0x2368 <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2366:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2368:	89 81       	ldd	r24, Y+1	; 0x01
}
    236a:	0f 90       	pop	r0
    236c:	0f 90       	pop	r0
    236e:	0f 90       	pop	r0
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
    2374:	cf 91       	pop	r28
    2376:	df 91       	pop	r29
    2378:	08 95       	ret

0000237a <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    237a:	df 93       	push	r29
    237c:	cf 93       	push	r28
    237e:	cd b7       	in	r28, 0x3d	; 61
    2380:	de b7       	in	r29, 0x3e	; 62
    2382:	2e 97       	sbiw	r28, 0x0e	; 14
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 ea       	ldi	r26, 0xA0	; 160
    239a:	b1 e4       	ldi	r27, 0x41	; 65
    239c:	8b 87       	std	Y+11, r24	; 0x0b
    239e:	9c 87       	std	Y+12, r25	; 0x0c
    23a0:	ad 87       	std	Y+13, r26	; 0x0d
    23a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	4a ef       	ldi	r20, 0xFA	; 250
    23b2:	54 e4       	ldi	r21, 0x44	; 68
    23b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	8f 83       	std	Y+7, r24	; 0x07
    23be:	98 87       	std	Y+8, r25	; 0x08
    23c0:	a9 87       	std	Y+9, r26	; 0x09
    23c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e8       	ldi	r20, 0x80	; 128
    23d2:	5f e3       	ldi	r21, 0x3F	; 63
    23d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23d8:	88 23       	and	r24, r24
    23da:	2c f4       	brge	.+10     	; 0x23e6 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	9e 83       	std	Y+6, r25	; 0x06
    23e2:	8d 83       	std	Y+5, r24	; 0x05
    23e4:	3f c0       	rjmp	.+126    	; 0x2464 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    23e6:	6f 81       	ldd	r22, Y+7	; 0x07
    23e8:	78 85       	ldd	r23, Y+8	; 0x08
    23ea:	89 85       	ldd	r24, Y+9	; 0x09
    23ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	4c f5       	brge	.+82     	; 0x2450 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2400:	7c 85       	ldd	r23, Y+12	; 0x0c
    2402:	8d 85       	ldd	r24, Y+13	; 0x0d
    2404:	9e 85       	ldd	r25, Y+14	; 0x0e
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e2       	ldi	r20, 0x20	; 32
    240c:	51 e4       	ldi	r21, 0x41	; 65
    240e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	bc 01       	movw	r22, r24
    2418:	cd 01       	movw	r24, r26
    241a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241e:	dc 01       	movw	r26, r24
    2420:	cb 01       	movw	r24, r22
    2422:	9e 83       	std	Y+6, r25	; 0x06
    2424:	8d 83       	std	Y+5, r24	; 0x05
    2426:	0f c0       	rjmp	.+30     	; 0x2446 <LCD_voidClearScreen+0xcc>
    2428:	88 ec       	ldi	r24, 0xC8	; 200
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	9c 83       	std	Y+4, r25	; 0x04
    242e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	f1 f7       	brne	.-4      	; 0x2434 <LCD_voidClearScreen+0xba>
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	01 97       	sbiw	r24, 0x01	; 1
    2442:	9e 83       	std	Y+6, r25	; 0x06
    2444:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2446:	8d 81       	ldd	r24, Y+5	; 0x05
    2448:	9e 81       	ldd	r25, Y+6	; 0x06
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	69 f7       	brne	.-38     	; 0x2428 <LCD_voidClearScreen+0xae>
    244e:	14 c0       	rjmp	.+40     	; 0x2478 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2450:	6f 81       	ldd	r22, Y+7	; 0x07
    2452:	78 85       	ldd	r23, Y+8	; 0x08
    2454:	89 85       	ldd	r24, Y+9	; 0x09
    2456:	9a 85       	ldd	r25, Y+10	; 0x0a
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	9e 83       	std	Y+6, r25	; 0x06
    2462:	8d 83       	std	Y+5, r24	; 0x05
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	9a 83       	std	Y+2, r25	; 0x02
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_voidClearScreen+0xf6>
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2478:	2e 96       	adiw	r28, 0x0e	; 14
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62
    2492:	2a 97       	sbiw	r28, 0x0a	; 10
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	8c 83       	std	Y+4, r24	; 0x04
    24a0:	7e 83       	std	Y+6, r23	; 0x06
    24a2:	6d 83       	std	Y+5, r22	; 0x05
    24a4:	4f 83       	std	Y+7, r20	; 0x07
    24a6:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    24ac:	88 e0       	ldi	r24, 0x08	; 8
    24ae:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    24b0:	8c 81       	ldd	r24, Y+4	; 0x04
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	3a 87       	std	Y+10, r19	; 0x0a
    24b8:	29 87       	std	Y+9, r18	; 0x09
    24ba:	89 85       	ldd	r24, Y+9	; 0x09
    24bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24be:	83 30       	cpi	r24, 0x03	; 3
    24c0:	91 05       	cpc	r25, r1
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <LCD_voidWriteSpecialChar+0x3c>
    24c4:	8c c0       	rjmp	.+280    	; 0x25de <LCD_voidWriteSpecialChar+0x154>
    24c6:	29 85       	ldd	r18, Y+9	; 0x09
    24c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    24ca:	24 30       	cpi	r18, 0x04	; 4
    24cc:	31 05       	cpc	r19, r1
    24ce:	8c f4       	brge	.+34     	; 0x24f2 <LCD_voidWriteSpecialChar+0x68>
    24d0:	89 85       	ldd	r24, Y+9	; 0x09
    24d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	91 05       	cpc	r25, r1
    24d8:	09 f4       	brne	.+2      	; 0x24dc <LCD_voidWriteSpecialChar+0x52>
    24da:	43 c0       	rjmp	.+134    	; 0x2562 <LCD_voidWriteSpecialChar+0xd8>
    24dc:	29 85       	ldd	r18, Y+9	; 0x09
    24de:	3a 85       	ldd	r19, Y+10	; 0x0a
    24e0:	22 30       	cpi	r18, 0x02	; 2
    24e2:	31 05       	cpc	r19, r1
    24e4:	0c f0       	brlt	.+2      	; 0x24e8 <LCD_voidWriteSpecialChar+0x5e>
    24e6:	5c c0       	rjmp	.+184    	; 0x25a0 <LCD_voidWriteSpecialChar+0x116>
    24e8:	89 85       	ldd	r24, Y+9	; 0x09
    24ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	d1 f0       	breq	.+52     	; 0x2524 <LCD_voidWriteSpecialChar+0x9a>
    24f0:	11 c1       	rjmp	.+546    	; 0x2714 <LCD_voidWriteSpecialChar+0x28a>
    24f2:	29 85       	ldd	r18, Y+9	; 0x09
    24f4:	3a 85       	ldd	r19, Y+10	; 0x0a
    24f6:	25 30       	cpi	r18, 0x05	; 5
    24f8:	31 05       	cpc	r19, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <LCD_voidWriteSpecialChar+0x74>
    24fc:	ae c0       	rjmp	.+348    	; 0x265a <LCD_voidWriteSpecialChar+0x1d0>
    24fe:	89 85       	ldd	r24, Y+9	; 0x09
    2500:	9a 85       	ldd	r25, Y+10	; 0x0a
    2502:	85 30       	cpi	r24, 0x05	; 5
    2504:	91 05       	cpc	r25, r1
    2506:	0c f4       	brge	.+2      	; 0x250a <LCD_voidWriteSpecialChar+0x80>
    2508:	89 c0       	rjmp	.+274    	; 0x261c <LCD_voidWriteSpecialChar+0x192>
    250a:	29 85       	ldd	r18, Y+9	; 0x09
    250c:	3a 85       	ldd	r19, Y+10	; 0x0a
    250e:	26 30       	cpi	r18, 0x06	; 6
    2510:	31 05       	cpc	r19, r1
    2512:	09 f4       	brne	.+2      	; 0x2516 <LCD_voidWriteSpecialChar+0x8c>
    2514:	c1 c0       	rjmp	.+386    	; 0x2698 <LCD_voidWriteSpecialChar+0x20e>
    2516:	89 85       	ldd	r24, Y+9	; 0x09
    2518:	9a 85       	ldd	r25, Y+10	; 0x0a
    251a:	87 30       	cpi	r24, 0x07	; 7
    251c:	91 05       	cpc	r25, r1
    251e:	09 f4       	brne	.+2      	; 0x2522 <LCD_voidWriteSpecialChar+0x98>
    2520:	da c0       	rjmp	.+436    	; 0x26d6 <LCD_voidWriteSpecialChar+0x24c>
    2522:	f8 c0       	rjmp	.+496    	; 0x2714 <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2524:	80 e4       	ldi	r24, 0x40	; 64
    2526:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    252a:	19 82       	std	Y+1, r1	; 0x01
    252c:	0e c0       	rjmp	.+28     	; 0x254a <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	28 2f       	mov	r18, r24
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	8d 81       	ldd	r24, Y+5	; 0x05
    2536:	9e 81       	ldd	r25, Y+6	; 0x06
    2538:	fc 01       	movw	r30, r24
    253a:	e2 0f       	add	r30, r18
    253c:	f3 1f       	adc	r31, r19
    253e:	80 81       	ld	r24, Z
    2540:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	8f 5f       	subi	r24, 0xFF	; 255
    2548:	89 83       	std	Y+1, r24	; 0x01
    254a:	99 81       	ldd	r25, Y+1	; 0x01
    254c:	8a 81       	ldd	r24, Y+2	; 0x02
    254e:	98 17       	cp	r25, r24
    2550:	70 f3       	brcs	.-36     	; 0x252e <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2552:	8f 81       	ldd	r24, Y+7	; 0x07
    2554:	68 85       	ldd	r22, Y+8	; 0x08
    2556:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    255a:	8c 81       	ldd	r24, Y+4	; 0x04
    255c:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    2560:	da c0       	rjmp	.+436    	; 0x2716 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2562:	88 e4       	ldi	r24, 0x48	; 72
    2564:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2568:	19 82       	std	Y+1, r1	; 0x01
    256a:	0e c0       	rjmp	.+28     	; 0x2588 <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	28 2f       	mov	r18, r24
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	8d 81       	ldd	r24, Y+5	; 0x05
    2574:	9e 81       	ldd	r25, Y+6	; 0x06
    2576:	fc 01       	movw	r30, r24
    2578:	e2 0f       	add	r30, r18
    257a:	f3 1f       	adc	r31, r19
    257c:	80 81       	ld	r24, Z
    257e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	99 81       	ldd	r25, Y+1	; 0x01
    258a:	8a 81       	ldd	r24, Y+2	; 0x02
    258c:	98 17       	cp	r25, r24
    258e:	70 f3       	brcs	.-36     	; 0x256c <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2590:	8f 81       	ldd	r24, Y+7	; 0x07
    2592:	68 85       	ldd	r22, Y+8	; 0x08
    2594:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2598:	8c 81       	ldd	r24, Y+4	; 0x04
    259a:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    259e:	bb c0       	rjmp	.+374    	; 0x2716 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    25a0:	80 e5       	ldi	r24, 0x50	; 80
    25a2:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    25a6:	19 82       	std	Y+1, r1	; 0x01
    25a8:	0e c0       	rjmp	.+28     	; 0x25c6 <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    25aa:	89 81       	ldd	r24, Y+1	; 0x01
    25ac:	28 2f       	mov	r18, r24
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	8d 81       	ldd	r24, Y+5	; 0x05
    25b2:	9e 81       	ldd	r25, Y+6	; 0x06
    25b4:	fc 01       	movw	r30, r24
    25b6:	e2 0f       	add	r30, r18
    25b8:	f3 1f       	adc	r31, r19
    25ba:	80 81       	ld	r24, Z
    25bc:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	8f 5f       	subi	r24, 0xFF	; 255
    25c4:	89 83       	std	Y+1, r24	; 0x01
    25c6:	99 81       	ldd	r25, Y+1	; 0x01
    25c8:	8a 81       	ldd	r24, Y+2	; 0x02
    25ca:	98 17       	cp	r25, r24
    25cc:	70 f3       	brcs	.-36     	; 0x25aa <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    25ce:	8f 81       	ldd	r24, Y+7	; 0x07
    25d0:	68 85       	ldd	r22, Y+8	; 0x08
    25d2:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    25d6:	8c 81       	ldd	r24, Y+4	; 0x04
    25d8:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    25dc:	9c c0       	rjmp	.+312    	; 0x2716 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    25de:	88 e5       	ldi	r24, 0x58	; 88
    25e0:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    25e4:	19 82       	std	Y+1, r1	; 0x01
    25e6:	0e c0       	rjmp	.+28     	; 0x2604 <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	8d 81       	ldd	r24, Y+5	; 0x05
    25f0:	9e 81       	ldd	r25, Y+6	; 0x06
    25f2:	fc 01       	movw	r30, r24
    25f4:	e2 0f       	add	r30, r18
    25f6:	f3 1f       	adc	r31, r19
    25f8:	80 81       	ld	r24, Z
    25fa:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	89 83       	std	Y+1, r24	; 0x01
    2604:	99 81       	ldd	r25, Y+1	; 0x01
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	98 17       	cp	r25, r24
    260a:	70 f3       	brcs	.-36     	; 0x25e8 <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    260c:	8f 81       	ldd	r24, Y+7	; 0x07
    260e:	68 85       	ldd	r22, Y+8	; 0x08
    2610:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2614:	8c 81       	ldd	r24, Y+4	; 0x04
    2616:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    261a:	7d c0       	rjmp	.+250    	; 0x2716 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    261c:	80 e6       	ldi	r24, 0x60	; 96
    261e:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2622:	19 82       	std	Y+1, r1	; 0x01
    2624:	0e c0       	rjmp	.+28     	; 0x2642 <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2626:	89 81       	ldd	r24, Y+1	; 0x01
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	8d 81       	ldd	r24, Y+5	; 0x05
    262e:	9e 81       	ldd	r25, Y+6	; 0x06
    2630:	fc 01       	movw	r30, r24
    2632:	e2 0f       	add	r30, r18
    2634:	f3 1f       	adc	r31, r19
    2636:	80 81       	ld	r24, Z
    2638:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	8f 5f       	subi	r24, 0xFF	; 255
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	99 81       	ldd	r25, Y+1	; 0x01
    2644:	8a 81       	ldd	r24, Y+2	; 0x02
    2646:	98 17       	cp	r25, r24
    2648:	70 f3       	brcs	.-36     	; 0x2626 <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    264a:	8f 81       	ldd	r24, Y+7	; 0x07
    264c:	68 85       	ldd	r22, Y+8	; 0x08
    264e:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    2658:	5e c0       	rjmp	.+188    	; 0x2716 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    265a:	88 e6       	ldi	r24, 0x68	; 104
    265c:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2660:	19 82       	std	Y+1, r1	; 0x01
    2662:	0e c0       	rjmp	.+28     	; 0x2680 <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	fc 01       	movw	r30, r24
    2670:	e2 0f       	add	r30, r18
    2672:	f3 1f       	adc	r31, r19
    2674:	80 81       	ld	r24, Z
    2676:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    267a:	89 81       	ldd	r24, Y+1	; 0x01
    267c:	8f 5f       	subi	r24, 0xFF	; 255
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	99 81       	ldd	r25, Y+1	; 0x01
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	98 17       	cp	r25, r24
    2686:	70 f3       	brcs	.-36     	; 0x2664 <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2688:	8f 81       	ldd	r24, Y+7	; 0x07
    268a:	68 85       	ldd	r22, Y+8	; 0x08
    268c:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    2698:	80 e7       	ldi	r24, 0x70	; 112
    269a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    269e:	19 82       	std	Y+1, r1	; 0x01
    26a0:	0e c0       	rjmp	.+28     	; 0x26be <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	8d 81       	ldd	r24, Y+5	; 0x05
    26aa:	9e 81       	ldd	r25, Y+6	; 0x06
    26ac:	fc 01       	movw	r30, r24
    26ae:	e2 0f       	add	r30, r18
    26b0:	f3 1f       	adc	r31, r19
    26b2:	80 81       	ld	r24, Z
    26b4:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	8f 5f       	subi	r24, 0xFF	; 255
    26bc:	89 83       	std	Y+1, r24	; 0x01
    26be:	99 81       	ldd	r25, Y+1	; 0x01
    26c0:	8a 81       	ldd	r24, Y+2	; 0x02
    26c2:	98 17       	cp	r25, r24
    26c4:	70 f3       	brcs	.-36     	; 0x26a2 <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    26c6:	8f 81       	ldd	r24, Y+7	; 0x07
    26c8:	68 85       	ldd	r22, Y+8	; 0x08
    26ca:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    26ce:	8c 81       	ldd	r24, Y+4	; 0x04
    26d0:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    26d4:	20 c0       	rjmp	.+64     	; 0x2716 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    26d6:	88 e7       	ldi	r24, 0x78	; 120
    26d8:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    26dc:	19 82       	std	Y+1, r1	; 0x01
    26de:	0e c0       	rjmp	.+28     	; 0x26fc <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	28 2f       	mov	r18, r24
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	fc 01       	movw	r30, r24
    26ec:	e2 0f       	add	r30, r18
    26ee:	f3 1f       	adc	r31, r19
    26f0:	80 81       	ld	r24, Z
    26f2:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	8f 5f       	subi	r24, 0xFF	; 255
    26fa:	89 83       	std	Y+1, r24	; 0x01
    26fc:	99 81       	ldd	r25, Y+1	; 0x01
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	98 17       	cp	r25, r24
    2702:	70 f3       	brcs	.-36     	; 0x26e0 <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2704:	8f 81       	ldd	r24, Y+7	; 0x07
    2706:	68 85       	ldd	r22, Y+8	; 0x08
    2708:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    270c:	8c 81       	ldd	r24, Y+4	; 0x04
    270e:	0e 94 50 0f 	call	0x1ea0	; 0x1ea0 <LCD_voidSendChar>
    2712:	01 c0       	rjmp	.+2      	; 0x2716 <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    2714:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    2716:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2718:	2a 96       	adiw	r28, 0x0a	; 10
    271a:	0f b6       	in	r0, 0x3f	; 63
    271c:	f8 94       	cli
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	0f be       	out	0x3f, r0	; 63
    2722:	cd bf       	out	0x3d, r28	; 61
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	cd b7       	in	r28, 0x3d	; 61
    2730:	de b7       	in	r29, 0x3e	; 62
    2732:	e1 97       	sbiw	r28, 0x31	; 49
    2734:	0f b6       	in	r0, 0x3f	; 63
    2736:	f8 94       	cli
    2738:	de bf       	out	0x3e, r29	; 62
    273a:	0f be       	out	0x3f, r0	; 63
    273c:	cd bf       	out	0x3d, r28	; 61
    273e:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	60 e0       	ldi	r22, 0x00	; 0
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	61 e0       	ldi	r22, 0x01	; 1
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    2754:	89 a9       	ldd	r24, Y+49	; 0x31
    2756:	98 2f       	mov	r25, r24
    2758:	92 95       	swap	r25
    275a:	90 7f       	andi	r25, 0xF0	; 240
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	69 2f       	mov	r22, r25
    2760:	0e 94 29 0a 	call	0x1452	; 0x1452 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	62 e0       	ldi	r22, 0x02	; 2
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	a0 e8       	ldi	r26, 0x80	; 128
    2774:	bf e3       	ldi	r27, 0x3F	; 63
    2776:	8d a7       	std	Y+45, r24	; 0x2d
    2778:	9e a7       	std	Y+46, r25	; 0x2e
    277a:	af a7       	std	Y+47, r26	; 0x2f
    277c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    277e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2780:	7e a5       	ldd	r23, Y+46	; 0x2e
    2782:	8f a5       	ldd	r24, Y+47	; 0x2f
    2784:	98 a9       	ldd	r25, Y+48	; 0x30
    2786:	2b ea       	ldi	r18, 0xAB	; 171
    2788:	3a ea       	ldi	r19, 0xAA	; 170
    278a:	4a e2       	ldi	r20, 0x2A	; 42
    278c:	50 e4       	ldi	r21, 0x40	; 64
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	89 a7       	std	Y+41, r24	; 0x29
    2798:	9a a7       	std	Y+42, r25	; 0x2a
    279a:	ab a7       	std	Y+43, r26	; 0x2b
    279c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    279e:	69 a5       	ldd	r22, Y+41	; 0x29
    27a0:	7a a5       	ldd	r23, Y+42	; 0x2a
    27a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    27a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	5f e3       	ldi	r21, 0x3F	; 63
    27ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b2:	88 23       	and	r24, r24
    27b4:	1c f4       	brge	.+6      	; 0x27bc <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	88 a7       	std	Y+40, r24	; 0x28
    27ba:	91 c0       	rjmp	.+290    	; 0x28de <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    27bc:	69 a5       	ldd	r22, Y+41	; 0x29
    27be:	7a a5       	ldd	r23, Y+42	; 0x2a
    27c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    27c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	4f e7       	ldi	r20, 0x7F	; 127
    27ca:	53 e4       	ldi	r21, 0x43	; 67
    27cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d0:	18 16       	cp	r1, r24
    27d2:	0c f0       	brlt	.+2      	; 0x27d6 <LCD_voidSendHalfCmnd+0xac>
    27d4:	7b c0       	rjmp	.+246    	; 0x28cc <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    27d6:	6d a5       	ldd	r22, Y+45	; 0x2d
    27d8:	7e a5       	ldd	r23, Y+46	; 0x2e
    27da:	8f a5       	ldd	r24, Y+47	; 0x2f
    27dc:	98 a9       	ldd	r25, Y+48	; 0x30
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	4a e7       	ldi	r20, 0x7A	; 122
    27e4:	54 e4       	ldi	r21, 0x44	; 68
    27e6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	8c a3       	std	Y+36, r24	; 0x24
    27f0:	9d a3       	std	Y+37, r25	; 0x25
    27f2:	ae a3       	std	Y+38, r26	; 0x26
    27f4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f6:	6c a1       	ldd	r22, Y+36	; 0x24
    27f8:	7d a1       	ldd	r23, Y+37	; 0x25
    27fa:	8e a1       	ldd	r24, Y+38	; 0x26
    27fc:	9f a1       	ldd	r25, Y+39	; 0x27
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	4a ef       	ldi	r20, 0xFA	; 250
    2804:	54 e4       	ldi	r21, 0x44	; 68
    2806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280a:	dc 01       	movw	r26, r24
    280c:	cb 01       	movw	r24, r22
    280e:	88 a3       	std	Y+32, r24	; 0x20
    2810:	99 a3       	std	Y+33, r25	; 0x21
    2812:	aa a3       	std	Y+34, r26	; 0x22
    2814:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2816:	68 a1       	ldd	r22, Y+32	; 0x20
    2818:	79 a1       	ldd	r23, Y+33	; 0x21
    281a:	8a a1       	ldd	r24, Y+34	; 0x22
    281c:	9b a1       	ldd	r25, Y+35	; 0x23
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    282a:	88 23       	and	r24, r24
    282c:	2c f4       	brge	.+10     	; 0x2838 <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    282e:	81 e0       	ldi	r24, 0x01	; 1
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	9f 8f       	std	Y+31, r25	; 0x1f
    2834:	8e 8f       	std	Y+30, r24	; 0x1e
    2836:	3f c0       	rjmp	.+126    	; 0x28b6 <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    2838:	68 a1       	ldd	r22, Y+32	; 0x20
    283a:	79 a1       	ldd	r23, Y+33	; 0x21
    283c:	8a a1       	ldd	r24, Y+34	; 0x22
    283e:	9b a1       	ldd	r25, Y+35	; 0x23
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	3f ef       	ldi	r19, 0xFF	; 255
    2844:	4f e7       	ldi	r20, 0x7F	; 127
    2846:	57 e4       	ldi	r21, 0x47	; 71
    2848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    284c:	18 16       	cp	r1, r24
    284e:	4c f5       	brge	.+82     	; 0x28a2 <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2850:	6c a1       	ldd	r22, Y+36	; 0x24
    2852:	7d a1       	ldd	r23, Y+37	; 0x25
    2854:	8e a1       	ldd	r24, Y+38	; 0x26
    2856:	9f a1       	ldd	r25, Y+39	; 0x27
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	40 e2       	ldi	r20, 0x20	; 32
    285e:	51 e4       	ldi	r21, 0x41	; 65
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	bc 01       	movw	r22, r24
    286a:	cd 01       	movw	r24, r26
    286c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	9f 8f       	std	Y+31, r25	; 0x1f
    2876:	8e 8f       	std	Y+30, r24	; 0x1e
    2878:	0f c0       	rjmp	.+30     	; 0x2898 <LCD_voidSendHalfCmnd+0x16e>
    287a:	88 ec       	ldi	r24, 0xC8	; 200
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9d 8f       	std	Y+29, r25	; 0x1d
    2880:	8c 8f       	std	Y+28, r24	; 0x1c
    2882:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2884:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	f1 f7       	brne	.-4      	; 0x2886 <LCD_voidSendHalfCmnd+0x15c>
    288a:	9d 8f       	std	Y+29, r25	; 0x1d
    288c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2890:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	9f 8f       	std	Y+31, r25	; 0x1f
    2896:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2898:	8e 8d       	ldd	r24, Y+30	; 0x1e
    289a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	69 f7       	brne	.-38     	; 0x287a <LCD_voidSendHalfCmnd+0x150>
    28a0:	24 c0       	rjmp	.+72     	; 0x28ea <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a2:	68 a1       	ldd	r22, Y+32	; 0x20
    28a4:	79 a1       	ldd	r23, Y+33	; 0x21
    28a6:	8a a1       	ldd	r24, Y+34	; 0x22
    28a8:	9b a1       	ldd	r25, Y+35	; 0x23
    28aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	9f 8f       	std	Y+31, r25	; 0x1f
    28b4:	8e 8f       	std	Y+30, r24	; 0x1e
    28b6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28b8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    28ba:	9b 8f       	std	Y+27, r25	; 0x1b
    28bc:	8a 8f       	std	Y+26, r24	; 0x1a
    28be:	8a 8d       	ldd	r24, Y+26	; 0x1a
    28c0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    28c2:	01 97       	sbiw	r24, 0x01	; 1
    28c4:	f1 f7       	brne	.-4      	; 0x28c2 <LCD_voidSendHalfCmnd+0x198>
    28c6:	9b 8f       	std	Y+27, r25	; 0x1b
    28c8:	8a 8f       	std	Y+26, r24	; 0x1a
    28ca:	0f c0       	rjmp	.+30     	; 0x28ea <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28cc:	69 a5       	ldd	r22, Y+41	; 0x29
    28ce:	7a a5       	ldd	r23, Y+42	; 0x2a
    28d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    28d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	88 a7       	std	Y+40, r24	; 0x28
    28de:	88 a5       	ldd	r24, Y+40	; 0x28
    28e0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e2:	89 8d       	ldd	r24, Y+25	; 0x19
    28e4:	8a 95       	dec	r24
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <LCD_voidSendHalfCmnd+0x1ba>
    28e8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    28ea:	80 e0       	ldi	r24, 0x00	; 0
    28ec:	62 e0       	ldi	r22, 0x02	; 2
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 e8       	ldi	r26, 0x80	; 128
    28fa:	bf e3       	ldi	r27, 0x3F	; 63
    28fc:	8d 8b       	std	Y+21, r24	; 0x15
    28fe:	9e 8b       	std	Y+22, r25	; 0x16
    2900:	af 8b       	std	Y+23, r26	; 0x17
    2902:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2904:	6d 89       	ldd	r22, Y+21	; 0x15
    2906:	7e 89       	ldd	r23, Y+22	; 0x16
    2908:	8f 89       	ldd	r24, Y+23	; 0x17
    290a:	98 8d       	ldd	r25, Y+24	; 0x18
    290c:	2b ea       	ldi	r18, 0xAB	; 171
    290e:	3a ea       	ldi	r19, 0xAA	; 170
    2910:	4a e2       	ldi	r20, 0x2A	; 42
    2912:	50 e4       	ldi	r21, 0x40	; 64
    2914:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2918:	dc 01       	movw	r26, r24
    291a:	cb 01       	movw	r24, r22
    291c:	89 8b       	std	Y+17, r24	; 0x11
    291e:	9a 8b       	std	Y+18, r25	; 0x12
    2920:	ab 8b       	std	Y+19, r26	; 0x13
    2922:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2924:	69 89       	ldd	r22, Y+17	; 0x11
    2926:	7a 89       	ldd	r23, Y+18	; 0x12
    2928:	8b 89       	ldd	r24, Y+19	; 0x13
    292a:	9c 89       	ldd	r25, Y+20	; 0x14
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	40 e8       	ldi	r20, 0x80	; 128
    2932:	5f e3       	ldi	r21, 0x3F	; 63
    2934:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2938:	88 23       	and	r24, r24
    293a:	1c f4       	brge	.+6      	; 0x2942 <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	88 8b       	std	Y+16, r24	; 0x10
    2940:	91 c0       	rjmp	.+290    	; 0x2a64 <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    2942:	69 89       	ldd	r22, Y+17	; 0x11
    2944:	7a 89       	ldd	r23, Y+18	; 0x12
    2946:	8b 89       	ldd	r24, Y+19	; 0x13
    2948:	9c 89       	ldd	r25, Y+20	; 0x14
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4f e7       	ldi	r20, 0x7F	; 127
    2950:	53 e4       	ldi	r21, 0x43	; 67
    2952:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2956:	18 16       	cp	r1, r24
    2958:	0c f0       	brlt	.+2      	; 0x295c <LCD_voidSendHalfCmnd+0x232>
    295a:	7b c0       	rjmp	.+246    	; 0x2a52 <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    295c:	6d 89       	ldd	r22, Y+21	; 0x15
    295e:	7e 89       	ldd	r23, Y+22	; 0x16
    2960:	8f 89       	ldd	r24, Y+23	; 0x17
    2962:	98 8d       	ldd	r25, Y+24	; 0x18
    2964:	20 e0       	ldi	r18, 0x00	; 0
    2966:	30 e0       	ldi	r19, 0x00	; 0
    2968:	4a e7       	ldi	r20, 0x7A	; 122
    296a:	54 e4       	ldi	r21, 0x44	; 68
    296c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2970:	dc 01       	movw	r26, r24
    2972:	cb 01       	movw	r24, r22
    2974:	8c 87       	std	Y+12, r24	; 0x0c
    2976:	9d 87       	std	Y+13, r25	; 0x0d
    2978:	ae 87       	std	Y+14, r26	; 0x0e
    297a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297c:	6c 85       	ldd	r22, Y+12	; 0x0c
    297e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2980:	8e 85       	ldd	r24, Y+14	; 0x0e
    2982:	9f 85       	ldd	r25, Y+15	; 0x0f
    2984:	20 e0       	ldi	r18, 0x00	; 0
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	4a ef       	ldi	r20, 0xFA	; 250
    298a:	54 e4       	ldi	r21, 0x44	; 68
    298c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	88 87       	std	Y+8, r24	; 0x08
    2996:	99 87       	std	Y+9, r25	; 0x09
    2998:	aa 87       	std	Y+10, r26	; 0x0a
    299a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    299c:	68 85       	ldd	r22, Y+8	; 0x08
    299e:	79 85       	ldd	r23, Y+9	; 0x09
    29a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    29a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e8       	ldi	r20, 0x80	; 128
    29aa:	5f e3       	ldi	r21, 0x3F	; 63
    29ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29b0:	88 23       	and	r24, r24
    29b2:	2c f4       	brge	.+10     	; 0x29be <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9f 83       	std	Y+7, r25	; 0x07
    29ba:	8e 83       	std	Y+6, r24	; 0x06
    29bc:	3f c0       	rjmp	.+126    	; 0x2a3c <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    29be:	68 85       	ldd	r22, Y+8	; 0x08
    29c0:	79 85       	ldd	r23, Y+9	; 0x09
    29c2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29c4:	9b 85       	ldd	r25, Y+11	; 0x0b
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	3f ef       	ldi	r19, 0xFF	; 255
    29ca:	4f e7       	ldi	r20, 0x7F	; 127
    29cc:	57 e4       	ldi	r21, 0x47	; 71
    29ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29d2:	18 16       	cp	r1, r24
    29d4:	4c f5       	brge	.+82     	; 0x2a28 <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29d6:	6c 85       	ldd	r22, Y+12	; 0x0c
    29d8:	7d 85       	ldd	r23, Y+13	; 0x0d
    29da:	8e 85       	ldd	r24, Y+14	; 0x0e
    29dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e2       	ldi	r20, 0x20	; 32
    29e4:	51 e4       	ldi	r21, 0x41	; 65
    29e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9f 83       	std	Y+7, r25	; 0x07
    29fc:	8e 83       	std	Y+6, r24	; 0x06
    29fe:	0f c0       	rjmp	.+30     	; 0x2a1e <LCD_voidSendHalfCmnd+0x2f4>
    2a00:	88 ec       	ldi	r24, 0xC8	; 200
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	9d 83       	std	Y+5, r25	; 0x05
    2a06:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a08:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2a0c:	01 97       	sbiw	r24, 0x01	; 1
    2a0e:	f1 f7       	brne	.-4      	; 0x2a0c <LCD_voidSendHalfCmnd+0x2e2>
    2a10:	9d 83       	std	Y+5, r25	; 0x05
    2a12:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a14:	8e 81       	ldd	r24, Y+6	; 0x06
    2a16:	9f 81       	ldd	r25, Y+7	; 0x07
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	9f 83       	std	Y+7, r25	; 0x07
    2a1c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a20:	9f 81       	ldd	r25, Y+7	; 0x07
    2a22:	00 97       	sbiw	r24, 0x00	; 0
    2a24:	69 f7       	brne	.-38     	; 0x2a00 <LCD_voidSendHalfCmnd+0x2d6>
    2a26:	24 c0       	rjmp	.+72     	; 0x2a70 <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a28:	68 85       	ldd	r22, Y+8	; 0x08
    2a2a:	79 85       	ldd	r23, Y+9	; 0x09
    2a2c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a2e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	9f 83       	std	Y+7, r25	; 0x07
    2a3a:	8e 83       	std	Y+6, r24	; 0x06
    2a3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a40:	9b 83       	std	Y+3, r25	; 0x03
    2a42:	8a 83       	std	Y+2, r24	; 0x02
    2a44:	8a 81       	ldd	r24, Y+2	; 0x02
    2a46:	9b 81       	ldd	r25, Y+3	; 0x03
    2a48:	01 97       	sbiw	r24, 0x01	; 1
    2a4a:	f1 f7       	brne	.-4      	; 0x2a48 <LCD_voidSendHalfCmnd+0x31e>
    2a4c:	9b 83       	std	Y+3, r25	; 0x03
    2a4e:	8a 83       	std	Y+2, r24	; 0x02
    2a50:	0f c0       	rjmp	.+30     	; 0x2a70 <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a52:	69 89       	ldd	r22, Y+17	; 0x11
    2a54:	7a 89       	ldd	r23, Y+18	; 0x12
    2a56:	8b 89       	ldd	r24, Y+19	; 0x13
    2a58:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	88 8b       	std	Y+16, r24	; 0x10
    2a64:	88 89       	ldd	r24, Y+16	; 0x10
    2a66:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	8a 95       	dec	r24
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <LCD_voidSendHalfCmnd+0x340>
    2a6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
    2a70:	e1 96       	adiw	r28, 0x31	; 49
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <UART_voidInit>:
static u8 UART_u8ReceiveCurrentIndex = 0;
static volatile u8 UART_u8BusyFlagRx = 0;
static u8 UART_u8ReceiveMessageSize = 0;

void UART_voidInit(void)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <UART_voidInit+0x6>
    2a88:	0f 92       	push	r0
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRate = UART_u8_BAUD_RATE;
    2a8e:	83 e3       	ldi	r24, 0x33	; 51
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	9b 83       	std	Y+3, r25	; 0x03
    2a94:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCValue = 0b10000000;
    2a96:	80 e8       	ldi	r24, 0x80	; 128
    2a98:	89 83       	std	Y+1, r24	; 0x01
	/* Baud Rate = 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BaudRate;
    2a9a:	e9 e2       	ldi	r30, 0x29	; 41
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa0:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BaudRate >> 8);
    2aa2:	e0 e4       	ldi	r30, 0x40	; 64
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa8:	9b 81       	ldd	r25, Y+3	; 0x03
    2aaa:	89 2f       	mov	r24, r25
    2aac:	99 27       	eor	r25, r25
    2aae:	80 83       	st	Z, r24
#if UART_u8_SPEED == UART_u8_NORMAL_SPEED
	/* Normal Speed */
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_U2X);
    2ab0:	ab e2       	ldi	r26, 0x2B	; 43
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	eb e2       	ldi	r30, 0x2B	; 43
    2ab6:	f0 e0       	ldi	r31, 0x00	; 0
    2ab8:	80 81       	ld	r24, Z
    2aba:	8d 7f       	andi	r24, 0xFD	; 253
    2abc:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRA_REG,UCSRA_U2X);
#endif

#if UART_u8_MPM_MODE == UART_u8_DISABLE_MPM
	/* Disable MPM */
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_MPCM);
    2abe:	ab e2       	ldi	r26, 0x2B	; 43
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	eb e2       	ldi	r30, 0x2B	; 43
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	8e 7f       	andi	r24, 0xFE	; 254
    2aca:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_UDRIE);
#endif

#if UART_u8_RXEN_MODE == UART_u8_ENABLE_RXEN
	/* Enable Rx */
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
    2acc:	aa e2       	ldi	r26, 0x2A	; 42
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	ea e2       	ldi	r30, 0x2A	; 42
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	80 61       	ori	r24, 0x10	; 16
    2ad8:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
#endif

#if UART_u8_TXEN_MODE == UART_u8_ENABLE_TXEN
	/* Enable Tx */
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
    2ada:	aa e2       	ldi	r26, 0x2A	; 42
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	ea e2       	ldi	r30, 0x2A	; 42
    2ae0:	f0 e0       	ldi	r31, 0x00	; 0
    2ae2:	80 81       	ld	r24, Z
    2ae4:	88 60       	ori	r24, 0x08	; 8
    2ae6:	8c 93       	st	X, r24
	/* Disable Tx */
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
#endif

	/* Select 8 bit Data */
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_UCSZ2);
    2ae8:	aa e2       	ldi	r26, 0x2A	; 42
    2aea:	b0 e0       	ldi	r27, 0x00	; 0
    2aec:	ea e2       	ldi	r30, 0x2A	; 42
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	8b 7f       	andi	r24, 0xFB	; 251
    2af4:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	84 60       	ori	r24, 0x04	; 4
    2afa:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	82 60       	ori	r24, 0x02	; 2
    2b00:	89 83       	std	Y+1, r24	; 0x01
#if UART_u8_USART_MODE == UART_u8_ASYNCH_MODE
	/* Select Asynch Mode */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	8f 7b       	andi	r24, 0xBF	; 191
    2b06:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
#endif

#if UART_u8_PARITY_MODE == UART_u8_PARITY_DISABLE
	/* No Parity Bit */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM1);
    2b08:	89 81       	ldd	r24, Y+1	; 0x01
    2b0a:	8f 7d       	andi	r24, 0xDF	; 223
    2b0c:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
    2b0e:	89 81       	ldd	r24, Y+1	; 0x01
    2b10:	8f 7e       	andi	r24, 0xEF	; 239
    2b12:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
#endif

#if UART_u8_NO_STOP_BITS == UART_u8_ONE_BITS_STOP
	/* Enable 1 Stop Bits */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_USBS);
    2b14:	89 81       	ldd	r24, Y+1	; 0x01
    2b16:	87 7f       	andi	r24, 0xF7	; 247
    2b18:	89 83       	std	Y+1, r24	; 0x01
	/* Enable 2 Stop Bits */
	SET_BIT(Local_u8UCSRCValue,UCSRC_USBS);
#endif

	/* Update UCSRC Reg */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
    2b1a:	e0 e4       	ldi	r30, 0x40	; 64
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	80 83       	st	Z, r24
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	cf 91       	pop	r28
    2b2a:	df 91       	pop	r29
    2b2c:	08 95       	ret

00002b2e <UART_voidSendByte>:

void UART_voidSendByte(u8 Copy_u8DataByte)
{
    2b2e:	df 93       	push	r29
    2b30:	cf 93       	push	r28
    2b32:	0f 92       	push	r0
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	89 83       	std	Y+1, r24	; 0x01
	/* wait until the transmit register is empty */
	while((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0);
    2b3a:	eb e2       	ldi	r30, 0x2B	; 43
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	82 95       	swap	r24
    2b42:	86 95       	lsr	r24
    2b44:	87 70       	andi	r24, 0x07	; 7
    2b46:	88 2f       	mov	r24, r24
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	81 70       	andi	r24, 0x01	; 1
    2b4c:	90 70       	andi	r25, 0x00	; 0
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	a1 f3       	breq	.-24     	; 0x2b3a <UART_voidSendByte+0xc>
	/* Send Data Byte */
	UART_u8_UDR_REG = Copy_u8DataByte;
    2b52:	ec e2       	ldi	r30, 0x2C	; 44
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	80 83       	st	Z, r24
}
    2b5a:	0f 90       	pop	r0
    2b5c:	cf 91       	pop	r28
    2b5e:	df 91       	pop	r29
    2b60:	08 95       	ret

00002b62 <UART_u8ReceiveByte>:

u8   UART_u8ReceiveByte(u8 * Copy_pu8RecByte)
{
    2b62:	df 93       	push	r29
    2b64:	cf 93       	push	r28
    2b66:	00 d0       	rcall	.+0      	; 0x2b68 <UART_u8ReceiveByte+0x6>
    2b68:	0f 92       	push	r0
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
    2b6e:	9b 83       	std	Y+3, r25	; 0x03
    2b70:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    2b72:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8RecByte != NULL)
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	9b 81       	ldd	r25, Y+3	; 0x03
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	69 f0       	breq	.+26     	; 0x2b96 <UART_u8ReceiveByte+0x34>
	{
		/* wait until the data is received */
		while((GET_BIT(UART_u8_UCSRA_REG,UCSRA_RXC)) == 0);
    2b7c:	eb e2       	ldi	r30, 0x2B	; 43
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	88 23       	and	r24, r24
    2b84:	dc f7       	brge	.-10     	; 0x2b7c <UART_u8ReceiveByte+0x1a>
		/* Read Data */
		*Copy_pu8RecByte = UART_u8_UDR_REG;
    2b86:	ec e2       	ldi	r30, 0x2C	; 44
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	ea 81       	ldd	r30, Y+2	; 0x02
    2b8e:	fb 81       	ldd	r31, Y+3	; 0x03
    2b90:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    2b96:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	cf 91       	pop	r28
    2ba0:	df 91       	pop	r29
    2ba2:	08 95       	ret

00002ba4 <UART_u8SendStringSynch>:

u8   UART_u8SendStringSynch(u8 * Copy_pu8String)
{
    2ba4:	df 93       	push	r29
    2ba6:	cf 93       	push	r28
    2ba8:	cd b7       	in	r28, 0x3d	; 61
    2baa:	de b7       	in	r29, 0x3e	; 62
    2bac:	27 97       	sbiw	r28, 0x07	; 7
    2bae:	0f b6       	in	r0, 0x3f	; 63
    2bb0:	f8 94       	cli
    2bb2:	de bf       	out	0x3e, r29	; 62
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	cd bf       	out	0x3d, r28	; 61
    2bb8:	9f 83       	std	Y+7, r25	; 0x07
    2bba:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeoutCounter = 0;
    2bc0:	19 82       	std	Y+1, r1	; 0x01
    2bc2:	1a 82       	std	Y+2, r1	; 0x02
    2bc4:	1b 82       	std	Y+3, r1	; 0x03
    2bc6:	1c 82       	std	Y+4, r1	; 0x04
	// Check for NULL pointer
	if(Copy_pu8String != NULL)
    2bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bca:	9f 81       	ldd	r25, Y+7	; 0x07
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	09 f4       	brne	.+2      	; 0x2bd2 <UART_u8SendStringSynch+0x2e>
    2bd0:	87 c0       	rjmp	.+270    	; 0x2ce0 <UART_u8SendStringSynch+0x13c>
    2bd2:	7f c0       	rjmp	.+254    	; 0x2cd2 <UART_u8SendStringSynch+0x12e>
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
		{
			Local_u32TimeoutCounter = 0;
    2bd4:	19 82       	std	Y+1, r1	; 0x01
    2bd6:	1a 82       	std	Y+2, r1	; 0x02
    2bd8:	1b 82       	std	Y+3, r1	; 0x03
    2bda:	1c 82       	std	Y+4, r1	; 0x04
    2bdc:	0b c0       	rjmp	.+22     	; 0x2bf4 <UART_u8SendStringSynch+0x50>
			// Wait until the data register is empty or timeout occurs
			while(((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
			{
				Local_u32TimeoutCounter++;
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	ab 81       	ldd	r26, Y+3	; 0x03
    2be4:	bc 81       	ldd	r27, Y+4	; 0x04
    2be6:	01 96       	adiw	r24, 0x01	; 1
    2be8:	a1 1d       	adc	r26, r1
    2bea:	b1 1d       	adc	r27, r1
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	9a 83       	std	Y+2, r25	; 0x02
    2bf0:	ab 83       	std	Y+3, r26	; 0x03
    2bf2:	bc 83       	std	Y+4, r27	; 0x04
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
		{
			Local_u32TimeoutCounter = 0;
			// Wait until the data register is empty or timeout occurs
			while(((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
    2bf4:	eb e2       	ldi	r30, 0x2B	; 43
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	82 95       	swap	r24
    2bfc:	86 95       	lsr	r24
    2bfe:	87 70       	andi	r24, 0x07	; 7
    2c00:	88 2f       	mov	r24, r24
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	81 70       	andi	r24, 0x01	; 1
    2c06:	90 70       	andi	r25, 0x00	; 0
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	61 f4       	brne	.+24     	; 0x2c24 <UART_u8SendStringSynch+0x80>
    2c0c:	89 81       	ldd	r24, Y+1	; 0x01
    2c0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c10:	ab 81       	ldd	r26, Y+3	; 0x03
    2c12:	bc 81       	ldd	r27, Y+4	; 0x04
    2c14:	80 32       	cpi	r24, 0x20	; 32
    2c16:	21 ea       	ldi	r18, 0xA1	; 161
    2c18:	92 07       	cpc	r25, r18
    2c1a:	27 e0       	ldi	r18, 0x07	; 7
    2c1c:	a2 07       	cpc	r26, r18
    2c1e:	20 e0       	ldi	r18, 0x00	; 0
    2c20:	b2 07       	cpc	r27, r18
    2c22:	e8 f2       	brcs	.-70     	; 0x2bde <UART_u8SendStringSynch+0x3a>
			{
				Local_u32TimeoutCounter++;
			}
			// Check if timeout occurred
			if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	9a 81       	ldd	r25, Y+2	; 0x02
    2c28:	ab 81       	ldd	r26, Y+3	; 0x03
    2c2a:	bc 81       	ldd	r27, Y+4	; 0x04
    2c2c:	80 32       	cpi	r24, 0x20	; 32
    2c2e:	21 ea       	ldi	r18, 0xA1	; 161
    2c30:	92 07       	cpc	r25, r18
    2c32:	27 e0       	ldi	r18, 0x07	; 7
    2c34:	a2 07       	cpc	r26, r18
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	b2 07       	cpc	r27, r18
    2c3a:	10 f0       	brcs	.+4      	; 0x2c40 <UART_u8SendStringSynch+0x9c>
			{
				Local_u8ErrorState = STD_TYPES_NOK;
    2c3c:	1d 82       	std	Y+5, r1	; 0x05
    2c3e:	51 c0       	rjmp	.+162    	; 0x2ce2 <UART_u8SendStringSynch+0x13e>
				break;
			}
			// Load the data register with the next character in the string
			UART_u8_UDR_REG = *Copy_pu8String;
    2c40:	ec e2       	ldi	r30, 0x2C	; 44
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	ae 81       	ldd	r26, Y+6	; 0x06
    2c46:	bf 81       	ldd	r27, Y+7	; 0x07
    2c48:	8c 91       	ld	r24, X
    2c4a:	80 83       	st	Z, r24

			// Wait for the transmission to complete or timeout occurs
			Local_u32TimeoutCounter = 0;
    2c4c:	19 82       	std	Y+1, r1	; 0x01
    2c4e:	1a 82       	std	Y+2, r1	; 0x02
    2c50:	1b 82       	std	Y+3, r1	; 0x03
    2c52:	1c 82       	std	Y+4, r1	; 0x04
    2c54:	0b c0       	rjmp	.+22     	; 0x2c6c <UART_u8SendStringSynch+0xc8>
			while ((GET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
			{
				Local_u32TimeoutCounter++;
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	ab 81       	ldd	r26, Y+3	; 0x03
    2c5c:	bc 81       	ldd	r27, Y+4	; 0x04
    2c5e:	01 96       	adiw	r24, 0x01	; 1
    2c60:	a1 1d       	adc	r26, r1
    2c62:	b1 1d       	adc	r27, r1
    2c64:	89 83       	std	Y+1, r24	; 0x01
    2c66:	9a 83       	std	Y+2, r25	; 0x02
    2c68:	ab 83       	std	Y+3, r26	; 0x03
    2c6a:	bc 83       	std	Y+4, r27	; 0x04
			// Load the data register with the next character in the string
			UART_u8_UDR_REG = *Copy_pu8String;

			// Wait for the transmission to complete or timeout occurs
			Local_u32TimeoutCounter = 0;
			while ((GET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
    2c6c:	eb e2       	ldi	r30, 0x2B	; 43
    2c6e:	f0 e0       	ldi	r31, 0x00	; 0
    2c70:	80 81       	ld	r24, Z
    2c72:	82 95       	swap	r24
    2c74:	86 95       	lsr	r24
    2c76:	86 95       	lsr	r24
    2c78:	83 70       	andi	r24, 0x03	; 3
    2c7a:	88 2f       	mov	r24, r24
    2c7c:	90 e0       	ldi	r25, 0x00	; 0
    2c7e:	81 70       	andi	r24, 0x01	; 1
    2c80:	90 70       	andi	r25, 0x00	; 0
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	61 f4       	brne	.+24     	; 0x2c9e <UART_u8SendStringSynch+0xfa>
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	9a 81       	ldd	r25, Y+2	; 0x02
    2c8a:	ab 81       	ldd	r26, Y+3	; 0x03
    2c8c:	bc 81       	ldd	r27, Y+4	; 0x04
    2c8e:	80 32       	cpi	r24, 0x20	; 32
    2c90:	21 ea       	ldi	r18, 0xA1	; 161
    2c92:	92 07       	cpc	r25, r18
    2c94:	27 e0       	ldi	r18, 0x07	; 7
    2c96:	a2 07       	cpc	r26, r18
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	b2 07       	cpc	r27, r18
    2c9c:	e0 f2       	brcs	.-72     	; 0x2c56 <UART_u8SendStringSynch+0xb2>
			{
				Local_u32TimeoutCounter++;
			}
			// Check if timeout occurred
			if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
    2c9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ca0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ca4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ca6:	80 32       	cpi	r24, 0x20	; 32
    2ca8:	21 ea       	ldi	r18, 0xA1	; 161
    2caa:	92 07       	cpc	r25, r18
    2cac:	27 e0       	ldi	r18, 0x07	; 7
    2cae:	a2 07       	cpc	r26, r18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	b2 07       	cpc	r27, r18
    2cb4:	10 f0       	brcs	.+4      	; 0x2cba <UART_u8SendStringSynch+0x116>
			{
				Local_u8ErrorState = STD_TYPES_NOK;
    2cb6:	1d 82       	std	Y+5, r1	; 0x05
    2cb8:	14 c0       	rjmp	.+40     	; 0x2ce2 <UART_u8SendStringSynch+0x13e>
				break;
			}
			// Clear the transmit complete flag
			SET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC);
    2cba:	ab e2       	ldi	r26, 0x2B	; 43
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	eb e2       	ldi	r30, 0x2B	; 43
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 64       	ori	r24, 0x40	; 64
    2cc6:	8c 93       	st	X, r24
			// Move to the next character
			Copy_pu8String++;
    2cc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2cca:	9f 81       	ldd	r25, Y+7	; 0x07
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	9f 83       	std	Y+7, r25	; 0x07
    2cd0:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u32 Local_u32TimeoutCounter = 0;
	// Check for NULL pointer
	if(Copy_pu8String != NULL)
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
    2cd2:	ee 81       	ldd	r30, Y+6	; 0x06
    2cd4:	ff 81       	ldd	r31, Y+7	; 0x07
    2cd6:	80 81       	ld	r24, Z
    2cd8:	88 23       	and	r24, r24
    2cda:	09 f0       	breq	.+2      	; 0x2cde <UART_u8SendStringSynch+0x13a>
    2cdc:	7b cf       	rjmp	.-266    	; 0x2bd4 <UART_u8SendStringSynch+0x30>
    2cde:	01 c0       	rjmp	.+2      	; 0x2ce2 <UART_u8SendStringSynch+0x13e>
			Copy_pu8String++;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2ce0:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2ce2:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ce4:	27 96       	adiw	r28, 0x07	; 7
    2ce6:	0f b6       	in	r0, 0x3f	; 63
    2ce8:	f8 94       	cli
    2cea:	de bf       	out	0x3e, r29	; 62
    2cec:	0f be       	out	0x3f, r0	; 63
    2cee:	cd bf       	out	0x3d, r28	; 61
    2cf0:	cf 91       	pop	r28
    2cf2:	df 91       	pop	r29
    2cf4:	08 95       	ret

00002cf6 <UART_u8ReceiveStringSynch>:

u8   UART_u8ReceiveStringSynch(u8 * Copy_puReceivedString, u8 Copy_u8MessageSize)
{
    2cf6:	df 93       	push	r29
    2cf8:	cf 93       	push	r28
    2cfa:	cd b7       	in	r28, 0x3d	; 61
    2cfc:	de b7       	in	r29, 0x3e	; 62
    2cfe:	29 97       	sbiw	r28, 0x09	; 9
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	98 87       	std	Y+8, r25	; 0x08
    2d0c:	8f 83       	std	Y+7, r24	; 0x07
    2d0e:	69 87       	std	Y+9, r22	; 0x09
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32TimeoutCounter = 0;
    2d14:	1a 82       	std	Y+2, r1	; 0x02
    2d16:	1b 82       	std	Y+3, r1	; 0x03
    2d18:	1c 82       	std	Y+4, r1	; 0x04
    2d1a:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8StringCounter = 0;
    2d1c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_puReceivedString != NULL)
    2d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d20:	98 85       	ldd	r25, Y+8	; 0x08
    2d22:	00 97       	sbiw	r24, 0x00	; 0
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <UART_u8ReceiveStringSynch+0x32>
    2d26:	4e c0       	rjmp	.+156    	; 0x2dc4 <UART_u8ReceiveStringSynch+0xce>
    2d28:	3e c0       	rjmp	.+124    	; 0x2da6 <UART_u8ReceiveStringSynch+0xb0>
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
		{
			Local_u32TimeoutCounter = 0;
    2d2a:	1a 82       	std	Y+2, r1	; 0x02
    2d2c:	1b 82       	std	Y+3, r1	; 0x03
    2d2e:	1c 82       	std	Y+4, r1	; 0x04
    2d30:	1d 82       	std	Y+5, r1	; 0x05
    2d32:	0b c0       	rjmp	.+22     	; 0x2d4a <UART_u8ReceiveStringSynch+0x54>
			while (((GET_BIT(UART_u8_UCSRA_REG, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
			{
				Local_u32TimeoutCounter++;
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	ac 81       	ldd	r26, Y+4	; 0x04
    2d3a:	bd 81       	ldd	r27, Y+5	; 0x05
    2d3c:	01 96       	adiw	r24, 0x01	; 1
    2d3e:	a1 1d       	adc	r26, r1
    2d40:	b1 1d       	adc	r27, r1
    2d42:	8a 83       	std	Y+2, r24	; 0x02
    2d44:	9b 83       	std	Y+3, r25	; 0x03
    2d46:	ac 83       	std	Y+4, r26	; 0x04
    2d48:	bd 83       	std	Y+5, r27	; 0x05
	if (Copy_puReceivedString != NULL)
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
		{
			Local_u32TimeoutCounter = 0;
			while (((GET_BIT(UART_u8_UCSRA_REG, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
    2d4a:	eb e2       	ldi	r30, 0x2B	; 43
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	80 81       	ld	r24, Z
    2d50:	88 23       	and	r24, r24
    2d52:	64 f0       	brlt	.+24     	; 0x2d6c <UART_u8ReceiveStringSynch+0x76>
    2d54:	8a 81       	ldd	r24, Y+2	; 0x02
    2d56:	9b 81       	ldd	r25, Y+3	; 0x03
    2d58:	ac 81       	ldd	r26, Y+4	; 0x04
    2d5a:	bd 81       	ldd	r27, Y+5	; 0x05
    2d5c:	80 32       	cpi	r24, 0x20	; 32
    2d5e:	21 ea       	ldi	r18, 0xA1	; 161
    2d60:	92 07       	cpc	r25, r18
    2d62:	27 e0       	ldi	r18, 0x07	; 7
    2d64:	a2 07       	cpc	r26, r18
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	b2 07       	cpc	r27, r18
    2d6a:	20 f3       	brcs	.-56     	; 0x2d34 <UART_u8ReceiveStringSynch+0x3e>
			{
				Local_u32TimeoutCounter++;
			}
			if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	ac 81       	ldd	r26, Y+4	; 0x04
    2d72:	bd 81       	ldd	r27, Y+5	; 0x05
    2d74:	80 32       	cpi	r24, 0x20	; 32
    2d76:	21 ea       	ldi	r18, 0xA1	; 161
    2d78:	92 07       	cpc	r25, r18
    2d7a:	27 e0       	ldi	r18, 0x07	; 7
    2d7c:	a2 07       	cpc	r26, r18
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	b2 07       	cpc	r27, r18
    2d82:	10 f0       	brcs	.+4      	; 0x2d88 <UART_u8ReceiveStringSynch+0x92>
			{
				Local_u8ErrorState = STD_TYPES_NOK;
    2d84:	1e 82       	std	Y+6, r1	; 0x06
    2d86:	14 c0       	rjmp	.+40     	; 0x2db0 <UART_u8ReceiveStringSynch+0xba>
				break;
			}
			Copy_puReceivedString[Local_u8StringCounter] = UART_u8_UDR_REG;
    2d88:	89 81       	ldd	r24, Y+1	; 0x01
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d90:	98 85       	ldd	r25, Y+8	; 0x08
    2d92:	dc 01       	movw	r26, r24
    2d94:	a2 0f       	add	r26, r18
    2d96:	b3 1f       	adc	r27, r19
    2d98:	ec e2       	ldi	r30, 0x2C	; 44
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	80 81       	ld	r24, Z
    2d9e:	8c 93       	st	X, r24
			Local_u8StringCounter++;
    2da0:	89 81       	ldd	r24, Y+1	; 0x01
    2da2:	8f 5f       	subi	r24, 0xFF	; 255
    2da4:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u32 Local_u32TimeoutCounter = 0;
	u8 Local_u8StringCounter = 0;
	if (Copy_puReceivedString != NULL)
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
    2da6:	99 81       	ldd	r25, Y+1	; 0x01
    2da8:	89 85       	ldd	r24, Y+9	; 0x09
    2daa:	98 17       	cp	r25, r24
    2dac:	08 f4       	brcc	.+2      	; 0x2db0 <UART_u8ReceiveStringSynch+0xba>
    2dae:	bd cf       	rjmp	.-134    	; 0x2d2a <UART_u8ReceiveStringSynch+0x34>
				break;
			}
			Copy_puReceivedString[Local_u8StringCounter] = UART_u8_UDR_REG;
			Local_u8StringCounter++;
		}
		Copy_puReceivedString[Local_u8StringCounter] = '\0'; // Null-terminate the string
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	8f 81       	ldd	r24, Y+7	; 0x07
    2db8:	98 85       	ldd	r25, Y+8	; 0x08
    2dba:	fc 01       	movw	r30, r24
    2dbc:	e2 0f       	add	r30, r18
    2dbe:	f3 1f       	adc	r31, r19
    2dc0:	10 82       	st	Z, r1
    2dc2:	01 c0       	rjmp	.+2      	; 0x2dc6 <UART_u8ReceiveStringSynch+0xd0>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2dc4:	1e 82       	std	Y+6, r1	; 0x06
	}
	return Local_u8ErrorState;
    2dc6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2dc8:	29 96       	adiw	r28, 0x09	; 9
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	cf 91       	pop	r28
    2dd6:	df 91       	pop	r29
    2dd8:	08 95       	ret

00002dda <UART_u8SendStringAsynch>:

u8   UART_u8SendStringAsynch(u8* Copy_pu8String, void(*Copy_pf)(void))
{
    2dda:	df 93       	push	r29
    2ddc:	cf 93       	push	r28
    2dde:	00 d0       	rcall	.+0      	; 0x2de0 <UART_u8SendStringAsynch+0x6>
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <UART_u8SendStringAsynch+0x8>
    2de2:	0f 92       	push	r0
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	9b 83       	std	Y+3, r25	; 0x03
    2dea:	8a 83       	std	Y+2, r24	; 0x02
    2dec:	7d 83       	std	Y+5, r23	; 0x05
    2dee:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2df0:	81 e0       	ldi	r24, 0x01	; 1
    2df2:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8String != NULL && Copy_pf != NULL)
    2df4:	8a 81       	ldd	r24, Y+2	; 0x02
    2df6:	9b 81       	ldd	r25, Y+3	; 0x03
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	19 f1       	breq	.+70     	; 0x2e42 <UART_u8SendStringAsynch+0x68>
    2dfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfe:	9d 81       	ldd	r25, Y+5	; 0x05
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	f9 f0       	breq	.+62     	; 0x2e42 <UART_u8SendStringAsynch+0x68>
	{
		if(UART_u8BusyFlagTx == 0)
    2e04:	80 91 93 00 	lds	r24, 0x0093
    2e08:	88 23       	and	r24, r24
    2e0a:	c9 f4       	brne	.+50     	; 0x2e3e <UART_u8SendStringAsynch+0x64>
		{
			UART_u8BusyFlagTx = 1;
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	80 93 93 00 	sts	0x0093, r24
			UART_pu8StringToSend = Copy_pu8String;
    2e12:	8a 81       	ldd	r24, Y+2	; 0x02
    2e14:	9b 81       	ldd	r25, Y+3	; 0x03
    2e16:	90 93 91 00 	sts	0x0091, r25
    2e1a:	80 93 90 00 	sts	0x0090, r24
			UART_pfTXC = Copy_pf;
    2e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e20:	9d 81       	ldd	r25, Y+5	; 0x05
    2e22:	90 93 8f 00 	sts	0x008F, r25
    2e26:	80 93 8e 00 	sts	0x008E, r24
			UART_u8CurrentIndex = 0;
    2e2a:	10 92 92 00 	sts	0x0092, r1

			// Enable UART Data Register Empty Interrupt
			SET_BIT(UART_u8_UCSRB_REG, UCSRB_UDRIE);
    2e2e:	aa e2       	ldi	r26, 0x2A	; 42
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	ea e2       	ldi	r30, 0x2A	; 42
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	80 81       	ld	r24, Z
    2e38:	80 62       	ori	r24, 0x20	; 32
    2e3a:	8c 93       	st	X, r24
    2e3c:	03 c0       	rjmp	.+6      	; 0x2e44 <UART_u8SendStringAsynch+0x6a>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
    2e3e:	19 82       	std	Y+1, r1	; 0x01
    2e40:	01 c0       	rjmp	.+2      	; 0x2e44 <UART_u8SendStringAsynch+0x6a>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2e42:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2e44:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	cf 91       	pop	r28
    2e52:	df 91       	pop	r29
    2e54:	08 95       	ret

00002e56 <__vector_14>:

void __vector_14(void) __attribute__((signal)); // UART Data Register Empty ISR
void __vector_14(void)
{
    2e56:	1f 92       	push	r1
    2e58:	0f 92       	push	r0
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	0f 92       	push	r0
    2e5e:	11 24       	eor	r1, r1
    2e60:	2f 93       	push	r18
    2e62:	3f 93       	push	r19
    2e64:	4f 93       	push	r20
    2e66:	5f 93       	push	r21
    2e68:	6f 93       	push	r22
    2e6a:	7f 93       	push	r23
    2e6c:	8f 93       	push	r24
    2e6e:	9f 93       	push	r25
    2e70:	af 93       	push	r26
    2e72:	bf 93       	push	r27
    2e74:	ef 93       	push	r30
    2e76:	ff 93       	push	r31
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
	if (UART_pu8StringToSend[UART_u8CurrentIndex] != '\0')
    2e80:	20 91 90 00 	lds	r18, 0x0090
    2e84:	30 91 91 00 	lds	r19, 0x0091
    2e88:	80 91 92 00 	lds	r24, 0x0092
    2e8c:	88 2f       	mov	r24, r24
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	f9 01       	movw	r30, r18
    2e92:	e8 0f       	add	r30, r24
    2e94:	f9 1f       	adc	r31, r25
    2e96:	80 81       	ld	r24, Z
    2e98:	88 23       	and	r24, r24
    2e9a:	a9 f0       	breq	.+42     	; 0x2ec6 <__vector_14+0x70>
	{
		UART_u8_UDR_REG = UART_pu8StringToSend[UART_u8CurrentIndex];
    2e9c:	ac e2       	ldi	r26, 0x2C	; 44
    2e9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ea0:	20 91 90 00 	lds	r18, 0x0090
    2ea4:	30 91 91 00 	lds	r19, 0x0091
    2ea8:	80 91 92 00 	lds	r24, 0x0092
    2eac:	88 2f       	mov	r24, r24
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	f9 01       	movw	r30, r18
    2eb2:	e8 0f       	add	r30, r24
    2eb4:	f9 1f       	adc	r31, r25
    2eb6:	80 81       	ld	r24, Z
    2eb8:	8c 93       	st	X, r24
		UART_u8CurrentIndex++;
    2eba:	80 91 92 00 	lds	r24, 0x0092
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	80 93 92 00 	sts	0x0092, r24
    2ec4:	16 c0       	rjmp	.+44     	; 0x2ef2 <__vector_14+0x9c>
	}
	else
	{
		// Disable UART Data Register Empty Interrupt
		CLR_BIT(UART_u8_UCSRB_REG, UCSRB_UDRIE);
    2ec6:	aa e2       	ldi	r26, 0x2A	; 42
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	ea e2       	ldi	r30, 0x2A	; 42
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	8f 7d       	andi	r24, 0xDF	; 223
    2ed2:	8c 93       	st	X, r24

		// Call the callback function
		if (UART_pfTXC != NULL)
    2ed4:	80 91 8e 00 	lds	r24, 0x008E
    2ed8:	90 91 8f 00 	lds	r25, 0x008F
    2edc:	00 97       	sbiw	r24, 0x00	; 0
    2ede:	29 f0       	breq	.+10     	; 0x2eea <__vector_14+0x94>
		{
			UART_pfTXC();
    2ee0:	e0 91 8e 00 	lds	r30, 0x008E
    2ee4:	f0 91 8f 00 	lds	r31, 0x008F
    2ee8:	09 95       	icall
		}
		//Clear Busy Flag
		UART_u8BusyFlagTx = 0;
    2eea:	10 92 93 00 	sts	0x0093, r1
		//Clear The Global Counter
		UART_u8CurrentIndex = 0;
    2eee:	10 92 92 00 	sts	0x0092, r1
	}
}
    2ef2:	cf 91       	pop	r28
    2ef4:	df 91       	pop	r29
    2ef6:	ff 91       	pop	r31
    2ef8:	ef 91       	pop	r30
    2efa:	bf 91       	pop	r27
    2efc:	af 91       	pop	r26
    2efe:	9f 91       	pop	r25
    2f00:	8f 91       	pop	r24
    2f02:	7f 91       	pop	r23
    2f04:	6f 91       	pop	r22
    2f06:	5f 91       	pop	r21
    2f08:	4f 91       	pop	r20
    2f0a:	3f 91       	pop	r19
    2f0c:	2f 91       	pop	r18
    2f0e:	0f 90       	pop	r0
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	0f 90       	pop	r0
    2f14:	1f 90       	pop	r1
    2f16:	18 95       	reti

00002f18 <UART_u8ReceiveStringAsynch>:

u8   UART_u8ReceiveStringAsynch(u8* Copy_pu8ReceivedString, void(*Copy_pf)(void), u8 Copy_u8MessageSize)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <UART_u8ReceiveStringAsynch+0x6>
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <UART_u8ReceiveStringAsynch+0x8>
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <UART_u8ReceiveStringAsynch+0xa>
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	9b 83       	std	Y+3, r25	; 0x03
    2f28:	8a 83       	std	Y+2, r24	; 0x02
    2f2a:	7d 83       	std	Y+5, r23	; 0x05
    2f2c:	6c 83       	std	Y+4, r22	; 0x04
    2f2e:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	89 83       	std	Y+1, r24	; 0x01
	//Check Pointers
	if (Copy_pu8ReceivedString != NULL && Copy_pf != NULL && Copy_u8MessageSize > 0)
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	9b 81       	ldd	r25, Y+3	; 0x03
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	49 f1       	breq	.+82     	; 0x2f8e <UART_u8ReceiveStringAsynch+0x76>
    2f3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f40:	00 97       	sbiw	r24, 0x00	; 0
    2f42:	29 f1       	breq	.+74     	; 0x2f8e <UART_u8ReceiveStringAsynch+0x76>
    2f44:	8e 81       	ldd	r24, Y+6	; 0x06
    2f46:	88 23       	and	r24, r24
    2f48:	11 f1       	breq	.+68     	; 0x2f8e <UART_u8ReceiveStringAsynch+0x76>
	{
		//Check Busy Flag
		if(UART_u8BusyFlagRx == 0)
    2f4a:	80 91 99 00 	lds	r24, 0x0099
    2f4e:	88 23       	and	r24, r24
    2f50:	e1 f4       	brne	.+56     	; 0x2f8a <UART_u8ReceiveStringAsynch+0x72>
		{
			//Set Busy Flag
			UART_u8BusyFlagRx = 1;
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	80 93 99 00 	sts	0x0099, r24
			//Update Global Variable with Receive Message
			UART_pu8ReceivedString = Copy_pu8ReceivedString;
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5c:	90 93 95 00 	sts	0x0095, r25
    2f60:	80 93 94 00 	sts	0x0094, r24
			//Update Global Pointer To function with Notification Function
			UART_pfRXC = Copy_pf;
    2f64:	8c 81       	ldd	r24, Y+4	; 0x04
    2f66:	9d 81       	ldd	r25, Y+5	; 0x05
    2f68:	90 93 97 00 	sts	0x0097, r25
    2f6c:	80 93 96 00 	sts	0x0096, r24
			//Clear Index
			UART_u8ReceiveCurrentIndex = 0;
    2f70:	10 92 98 00 	sts	0x0098, r1
			//Update Global Variable with Message Size
			UART_u8ReceiveMessageSize = Copy_u8MessageSize;
    2f74:	8e 81       	ldd	r24, Y+6	; 0x06
    2f76:	80 93 9a 00 	sts	0x009A, r24

			// Enable UART RX Complete Interrupt
			SET_BIT(UART_u8_UCSRB_REG, UCSRB_RXCIE);
    2f7a:	aa e2       	ldi	r26, 0x2A	; 42
    2f7c:	b0 e0       	ldi	r27, 0x00	; 0
    2f7e:	ea e2       	ldi	r30, 0x2A	; 42
    2f80:	f0 e0       	ldi	r31, 0x00	; 0
    2f82:	80 81       	ld	r24, Z
    2f84:	80 68       	ori	r24, 0x80	; 128
    2f86:	8c 93       	st	X, r24
    2f88:	03 c0       	rjmp	.+6      	; 0x2f90 <UART_u8ReceiveStringAsynch+0x78>

		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
    2f8a:	19 82       	std	Y+1, r1	; 0x01
    2f8c:	01 c0       	rjmp	.+2      	; 0x2f90 <UART_u8ReceiveStringAsynch+0x78>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2f8e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2f90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f92:	26 96       	adiw	r28, 0x06	; 6
    2f94:	0f b6       	in	r0, 0x3f	; 63
    2f96:	f8 94       	cli
    2f98:	de bf       	out	0x3e, r29	; 62
    2f9a:	0f be       	out	0x3f, r0	; 63
    2f9c:	cd bf       	out	0x3d, r28	; 61
    2f9e:	cf 91       	pop	r28
    2fa0:	df 91       	pop	r29
    2fa2:	08 95       	ret

00002fa4 <__vector_13>:
void __vector_13(void) __attribute__((signal)); // UART RX Complete ISR
void __vector_13(void)
{
    2fa4:	1f 92       	push	r1
    2fa6:	0f 92       	push	r0
    2fa8:	0f b6       	in	r0, 0x3f	; 63
    2faa:	0f 92       	push	r0
    2fac:	11 24       	eor	r1, r1
    2fae:	2f 93       	push	r18
    2fb0:	3f 93       	push	r19
    2fb2:	4f 93       	push	r20
    2fb4:	5f 93       	push	r21
    2fb6:	6f 93       	push	r22
    2fb8:	7f 93       	push	r23
    2fba:	8f 93       	push	r24
    2fbc:	9f 93       	push	r25
    2fbe:	af 93       	push	r26
    2fc0:	bf 93       	push	r27
    2fc2:	ef 93       	push	r30
    2fc4:	ff 93       	push	r31
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
	if (UART_u8ReceiveCurrentIndex < UART_u8ReceiveMessageSize)
    2fce:	90 91 98 00 	lds	r25, 0x0098
    2fd2:	80 91 9a 00 	lds	r24, 0x009A
    2fd6:	98 17       	cp	r25, r24
    2fd8:	e0 f5       	brcc	.+120    	; 0x3052 <__vector_13+0xae>
	{
		UART_pu8ReceivedString[UART_u8ReceiveCurrentIndex] = UART_u8_UDR_REG;
    2fda:	20 91 94 00 	lds	r18, 0x0094
    2fde:	30 91 95 00 	lds	r19, 0x0095
    2fe2:	80 91 98 00 	lds	r24, 0x0098
    2fe6:	88 2f       	mov	r24, r24
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	d9 01       	movw	r26, r18
    2fec:	a8 0f       	add	r26, r24
    2fee:	b9 1f       	adc	r27, r25
    2ff0:	ec e2       	ldi	r30, 0x2C	; 44
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	8c 93       	st	X, r24
		UART_u8ReceiveCurrentIndex++;
    2ff8:	80 91 98 00 	lds	r24, 0x0098
    2ffc:	8f 5f       	subi	r24, 0xFF	; 255
    2ffe:	80 93 98 00 	sts	0x0098, r24

		if (UART_u8ReceiveCurrentIndex >= UART_u8ReceiveMessageSize)
    3002:	90 91 98 00 	lds	r25, 0x0098
    3006:	80 91 9a 00 	lds	r24, 0x009A
    300a:	98 17       	cp	r25, r24
    300c:	10 f1       	brcs	.+68     	; 0x3052 <__vector_13+0xae>
		{
			// Disable UART RX Complete Interrupt
			CLR_BIT(UART_u8_UCSRB_REG, UCSRB_RXCIE);
    300e:	aa e2       	ldi	r26, 0x2A	; 42
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	ea e2       	ldi	r30, 0x2A	; 42
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	80 81       	ld	r24, Z
    3018:	8f 77       	andi	r24, 0x7F	; 127
    301a:	8c 93       	st	X, r24

			// Null-terminate the received string
			UART_pu8ReceivedString[UART_u8ReceiveCurrentIndex] = '\0';
    301c:	20 91 94 00 	lds	r18, 0x0094
    3020:	30 91 95 00 	lds	r19, 0x0095
    3024:	80 91 98 00 	lds	r24, 0x0098
    3028:	88 2f       	mov	r24, r24
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	f9 01       	movw	r30, r18
    302e:	e8 0f       	add	r30, r24
    3030:	f9 1f       	adc	r31, r25
    3032:	10 82       	st	Z, r1

			// Call the callback function
			if (UART_pfRXC != NULL)
    3034:	80 91 96 00 	lds	r24, 0x0096
    3038:	90 91 97 00 	lds	r25, 0x0097
    303c:	00 97       	sbiw	r24, 0x00	; 0
    303e:	29 f0       	breq	.+10     	; 0x304a <__vector_13+0xa6>
			{
				UART_pfRXC();
    3040:	e0 91 96 00 	lds	r30, 0x0096
    3044:	f0 91 97 00 	lds	r31, 0x0097
    3048:	09 95       	icall
			}
			// Clear Busy Flag
			UART_u8BusyFlagRx = 0;
    304a:	10 92 99 00 	sts	0x0099, r1

			// Clear The Global Counter
			UART_u8ReceiveCurrentIndex = 0;
    304e:	10 92 98 00 	sts	0x0098, r1
		}
	}
}
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	ff 91       	pop	r31
    3058:	ef 91       	pop	r30
    305a:	bf 91       	pop	r27
    305c:	af 91       	pop	r26
    305e:	9f 91       	pop	r25
    3060:	8f 91       	pop	r24
    3062:	7f 91       	pop	r23
    3064:	6f 91       	pop	r22
    3066:	5f 91       	pop	r21
    3068:	4f 91       	pop	r20
    306a:	3f 91       	pop	r19
    306c:	2f 91       	pop	r18
    306e:	0f 90       	pop	r0
    3070:	0f be       	out	0x3f, r0	; 63
    3072:	0f 90       	pop	r0
    3074:	1f 90       	pop	r1
    3076:	18 95       	reti

00003078 <main>:
u8 ReceivedString[16];
volatile u8 AsyncFlag = 0;
void SendCallback(void);
void ReceiveCallback(void);
int main(void)
{
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
    3080:	2e 97       	sbiw	r28, 0x0e	; 14
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
    308c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	GI_voidEnableGI();
    3090:	0e 94 c9 0a 	call	0x1592	; 0x1592 <GI_voidEnableGI>
	LCD_voidInit();
    3094:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <LCD_voidInit>
	UART_voidInit();
    3098:	0e 94 41 15 	call	0x2a82	; 0x2a82 <UART_voidInit>
	/* Display Initial Message */
	LCD_voidWriteString((u8 *)"Init...");
    309c:	80 e6       	ldi	r24, 0x60	; 96
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_voidWriteString>

	// Send a test message
	UART_u8SendStringAsynch((u8*) "I Love Zamalek ", &SendCallback);
    30a4:	88 e6       	ldi	r24, 0x68	; 104
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	2e ee       	ldi	r18, 0xEE	; 238
    30aa:	38 e1       	ldi	r19, 0x18	; 24
    30ac:	b9 01       	movw	r22, r18
    30ae:	0e 94 ed 16 	call	0x2dda	; 0x2dda <UART_u8SendStringAsynch>

	// Receive string asynchronously
	UART_u8ReceiveStringAsynch(ReceivedString, &ReceiveCallback, sizeof(ReceivedString) - 1);
    30b2:	8c e9       	ldi	r24, 0x9C	; 156
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	2a ef       	ldi	r18, 0xFA	; 250
    30b8:	38 e1       	ldi	r19, 0x18	; 24
    30ba:	b9 01       	movw	r22, r18
    30bc:	4f e0       	ldi	r20, 0x0F	; 15
    30be:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <UART_u8ReceiveStringAsynch>
	while(1)
	{
		if (AsyncFlag)
    30c2:	80 91 9b 00 	lds	r24, 0x009B
    30c6:	88 23       	and	r24, r24
    30c8:	e1 f3       	breq	.-8      	; 0x30c2 <main+0x4a>
		{
			LCD_voidClearScreen();
    30ca:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidClearScreen>
			LCD_voidWriteString((u8 *)"Async Recv: ");
    30ce:	88 e7       	ldi	r24, 0x78	; 120
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_voidWriteString>
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	aa ef       	ldi	r26, 0xFA	; 250
    30dc:	b3 e4       	ldi	r27, 0x43	; 67
    30de:	8b 87       	std	Y+11, r24	; 0x0b
    30e0:	9c 87       	std	Y+12, r25	; 0x0c
    30e2:	ad 87       	std	Y+13, r26	; 0x0d
    30e4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	4a ef       	ldi	r20, 0xFA	; 250
    30f4:	54 e4       	ldi	r21, 0x44	; 68
    30f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	8f 83       	std	Y+7, r24	; 0x07
    3100:	98 87       	std	Y+8, r25	; 0x08
    3102:	a9 87       	std	Y+9, r26	; 0x09
    3104:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3106:	6f 81       	ldd	r22, Y+7	; 0x07
    3108:	78 85       	ldd	r23, Y+8	; 0x08
    310a:	89 85       	ldd	r24, Y+9	; 0x09
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e8       	ldi	r20, 0x80	; 128
    3114:	5f e3       	ldi	r21, 0x3F	; 63
    3116:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    311a:	88 23       	and	r24, r24
    311c:	2c f4       	brge	.+10     	; 0x3128 <main+0xb0>
		__ticks = 1;
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9e 83       	std	Y+6, r25	; 0x06
    3124:	8d 83       	std	Y+5, r24	; 0x05
    3126:	3f c0       	rjmp	.+126    	; 0x31a6 <main+0x12e>
	else if (__tmp > 65535)
    3128:	6f 81       	ldd	r22, Y+7	; 0x07
    312a:	78 85       	ldd	r23, Y+8	; 0x08
    312c:	89 85       	ldd	r24, Y+9	; 0x09
    312e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	3f ef       	ldi	r19, 0xFF	; 255
    3134:	4f e7       	ldi	r20, 0x7F	; 127
    3136:	57 e4       	ldi	r21, 0x47	; 71
    3138:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    313c:	18 16       	cp	r1, r24
    313e:	4c f5       	brge	.+82     	; 0x3192 <main+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3140:	6b 85       	ldd	r22, Y+11	; 0x0b
    3142:	7c 85       	ldd	r23, Y+12	; 0x0c
    3144:	8d 85       	ldd	r24, Y+13	; 0x0d
    3146:	9e 85       	ldd	r25, Y+14	; 0x0e
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e2       	ldi	r20, 0x20	; 32
    314e:	51 e4       	ldi	r21, 0x41	; 65
    3150:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9e 83       	std	Y+6, r25	; 0x06
    3166:	8d 83       	std	Y+5, r24	; 0x05
    3168:	0f c0       	rjmp	.+30     	; 0x3188 <main+0x110>
    316a:	88 ec       	ldi	r24, 0xC8	; 200
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	9c 83       	std	Y+4, r25	; 0x04
    3170:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3172:	8b 81       	ldd	r24, Y+3	; 0x03
    3174:	9c 81       	ldd	r25, Y+4	; 0x04
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	f1 f7       	brne	.-4      	; 0x3176 <main+0xfe>
    317a:	9c 83       	std	Y+4, r25	; 0x04
    317c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317e:	8d 81       	ldd	r24, Y+5	; 0x05
    3180:	9e 81       	ldd	r25, Y+6	; 0x06
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	9e 83       	std	Y+6, r25	; 0x06
    3186:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3188:	8d 81       	ldd	r24, Y+5	; 0x05
    318a:	9e 81       	ldd	r25, Y+6	; 0x06
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	69 f7       	brne	.-38     	; 0x316a <main+0xf2>
    3190:	14 c0       	rjmp	.+40     	; 0x31ba <main+0x142>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3192:	6f 81       	ldd	r22, Y+7	; 0x07
    3194:	78 85       	ldd	r23, Y+8	; 0x08
    3196:	89 85       	ldd	r24, Y+9	; 0x09
    3198:	9a 85       	ldd	r25, Y+10	; 0x0a
    319a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	9e 83       	std	Y+6, r25	; 0x06
    31a4:	8d 83       	std	Y+5, r24	; 0x05
    31a6:	8d 81       	ldd	r24, Y+5	; 0x05
    31a8:	9e 81       	ldd	r25, Y+6	; 0x06
    31aa:	9a 83       	std	Y+2, r25	; 0x02
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <main+0x13a>
    31b6:	9a 83       	std	Y+2, r25	; 0x02
    31b8:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			LCD_voidClearScreen();
    31ba:	0e 94 bd 11 	call	0x237a	; 0x237a <LCD_voidClearScreen>
			LCD_voidWriteString(ReceivedString);
    31be:	8c e9       	ldi	r24, 0x9C	; 156
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	0e 94 f8 10 	call	0x21f0	; 0x21f0 <LCD_voidWriteString>
			AsyncFlag = 0;
    31c6:	10 92 9b 00 	sts	0x009B, r1

			// Re-enable reception for next message
			UART_u8ReceiveStringAsynch(ReceivedString, &ReceiveCallback, sizeof(ReceivedString) - 1);
    31ca:	8c e9       	ldi	r24, 0x9C	; 156
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	2a ef       	ldi	r18, 0xFA	; 250
    31d0:	38 e1       	ldi	r19, 0x18	; 24
    31d2:	b9 01       	movw	r22, r18
    31d4:	4f e0       	ldi	r20, 0x0F	; 15
    31d6:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <UART_u8ReceiveStringAsynch>
    31da:	73 cf       	rjmp	.-282    	; 0x30c2 <main+0x4a>

000031dc <SendCallback>:
		}
	}
	return 0;
}
void SendCallback(void)
{
    31dc:	df 93       	push	r29
    31de:	cf 93       	push	r28
    31e0:	cd b7       	in	r28, 0x3d	; 61
    31e2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    31e4:	81 e0       	ldi	r24, 0x01	; 1
    31e6:	60 e0       	ldi	r22, 0x00	; 0
    31e8:	41 e0       	ldi	r20, 0x01	; 1
    31ea:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
}
    31ee:	cf 91       	pop	r28
    31f0:	df 91       	pop	r29
    31f2:	08 95       	ret

000031f4 <ReceiveCallback>:
void ReceiveCallback(void)
{
    31f4:	df 93       	push	r29
    31f6:	cf 93       	push	r28
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
	AsyncFlag = 1;
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	80 93 9b 00 	sts	0x009B, r24
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	61 e0       	ldi	r22, 0x01	; 1
    3206:	41 e0       	ldi	r20, 0x01	; 1
    3208:	0e 94 9d 07 	call	0xf3a	; 0xf3a <DIO_u8SetPinValue>
}
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <__udivmodsi4>:
    3212:	a1 e2       	ldi	r26, 0x21	; 33
    3214:	1a 2e       	mov	r1, r26
    3216:	aa 1b       	sub	r26, r26
    3218:	bb 1b       	sub	r27, r27
    321a:	fd 01       	movw	r30, r26
    321c:	0d c0       	rjmp	.+26     	; 0x3238 <__udivmodsi4_ep>

0000321e <__udivmodsi4_loop>:
    321e:	aa 1f       	adc	r26, r26
    3220:	bb 1f       	adc	r27, r27
    3222:	ee 1f       	adc	r30, r30
    3224:	ff 1f       	adc	r31, r31
    3226:	a2 17       	cp	r26, r18
    3228:	b3 07       	cpc	r27, r19
    322a:	e4 07       	cpc	r30, r20
    322c:	f5 07       	cpc	r31, r21
    322e:	20 f0       	brcs	.+8      	; 0x3238 <__udivmodsi4_ep>
    3230:	a2 1b       	sub	r26, r18
    3232:	b3 0b       	sbc	r27, r19
    3234:	e4 0b       	sbc	r30, r20
    3236:	f5 0b       	sbc	r31, r21

00003238 <__udivmodsi4_ep>:
    3238:	66 1f       	adc	r22, r22
    323a:	77 1f       	adc	r23, r23
    323c:	88 1f       	adc	r24, r24
    323e:	99 1f       	adc	r25, r25
    3240:	1a 94       	dec	r1
    3242:	69 f7       	brne	.-38     	; 0x321e <__udivmodsi4_loop>
    3244:	60 95       	com	r22
    3246:	70 95       	com	r23
    3248:	80 95       	com	r24
    324a:	90 95       	com	r25
    324c:	9b 01       	movw	r18, r22
    324e:	ac 01       	movw	r20, r24
    3250:	bd 01       	movw	r22, r26
    3252:	cf 01       	movw	r24, r30
    3254:	08 95       	ret

00003256 <__prologue_saves__>:
    3256:	2f 92       	push	r2
    3258:	3f 92       	push	r3
    325a:	4f 92       	push	r4
    325c:	5f 92       	push	r5
    325e:	6f 92       	push	r6
    3260:	7f 92       	push	r7
    3262:	8f 92       	push	r8
    3264:	9f 92       	push	r9
    3266:	af 92       	push	r10
    3268:	bf 92       	push	r11
    326a:	cf 92       	push	r12
    326c:	df 92       	push	r13
    326e:	ef 92       	push	r14
    3270:	ff 92       	push	r15
    3272:	0f 93       	push	r16
    3274:	1f 93       	push	r17
    3276:	cf 93       	push	r28
    3278:	df 93       	push	r29
    327a:	cd b7       	in	r28, 0x3d	; 61
    327c:	de b7       	in	r29, 0x3e	; 62
    327e:	ca 1b       	sub	r28, r26
    3280:	db 0b       	sbc	r29, r27
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	09 94       	ijmp

0000328e <__epilogue_restores__>:
    328e:	2a 88       	ldd	r2, Y+18	; 0x12
    3290:	39 88       	ldd	r3, Y+17	; 0x11
    3292:	48 88       	ldd	r4, Y+16	; 0x10
    3294:	5f 84       	ldd	r5, Y+15	; 0x0f
    3296:	6e 84       	ldd	r6, Y+14	; 0x0e
    3298:	7d 84       	ldd	r7, Y+13	; 0x0d
    329a:	8c 84       	ldd	r8, Y+12	; 0x0c
    329c:	9b 84       	ldd	r9, Y+11	; 0x0b
    329e:	aa 84       	ldd	r10, Y+10	; 0x0a
    32a0:	b9 84       	ldd	r11, Y+9	; 0x09
    32a2:	c8 84       	ldd	r12, Y+8	; 0x08
    32a4:	df 80       	ldd	r13, Y+7	; 0x07
    32a6:	ee 80       	ldd	r14, Y+6	; 0x06
    32a8:	fd 80       	ldd	r15, Y+5	; 0x05
    32aa:	0c 81       	ldd	r16, Y+4	; 0x04
    32ac:	1b 81       	ldd	r17, Y+3	; 0x03
    32ae:	aa 81       	ldd	r26, Y+2	; 0x02
    32b0:	b9 81       	ldd	r27, Y+1	; 0x01
    32b2:	ce 0f       	add	r28, r30
    32b4:	d1 1d       	adc	r29, r1
    32b6:	0f b6       	in	r0, 0x3f	; 63
    32b8:	f8 94       	cli
    32ba:	de bf       	out	0x3e, r29	; 62
    32bc:	0f be       	out	0x3f, r0	; 63
    32be:	cd bf       	out	0x3d, r28	; 61
    32c0:	ed 01       	movw	r28, r26
    32c2:	08 95       	ret

000032c4 <_exit>:
    32c4:	f8 94       	cli

000032c6 <__stop_program>:
    32c6:	ff cf       	rjmp	.-2      	; 0x32c6 <__stop_program>
