
UART_Driver_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d44  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000059a  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3f 05 	call	0xa7e	; 0xa7e <main>
  64:	0c 94 5e 05 	jmp	0xabc	; 0xabc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
  74:	ea e3       	ldi	r30, 0x3A	; 58
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
  7c:	e7 e3       	ldi	r30, 0x37	; 55
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	10 82       	st	Z, r1

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
  82:	e4 e3       	ldi	r30, 0x34	; 52
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
  88:	e1 e3       	ldi	r30, 0x31	; 49
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	82 e0       	ldi	r24, 0x02	; 2
  8e:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
  90:	eb e3       	ldi	r30, 0x3B	; 59
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
  96:	e8 e3       	ldi	r30, 0x38	; 56
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
  9c:	e5 e3       	ldi	r30, 0x35	; 53
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
  a2:	e2 e3       	ldi	r30, 0x32	; 50
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	10 82       	st	Z, r1

}
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	08 95       	ret

000000ae <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
  ae:	df 93       	push	r29
  b0:	cf 93       	push	r28
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62
  b6:	2e 97       	sbiw	r28, 0x0e	; 14
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	8a 83       	std	Y+2, r24	; 0x02
  c4:	6b 83       	std	Y+3, r22	; 0x03
  c6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
  cc:	8a 81       	ldd	r24, Y+2	; 0x02
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	08 f0       	brcs	.+2      	; 0xd4 <DIO_u8SetPinDirection+0x26>
  d2:	0d c1       	rjmp	.+538    	; 0x2ee <DIO_u8SetPinDirection+0x240>
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	88 30       	cpi	r24, 0x08	; 8
  d8:	08 f0       	brcs	.+2      	; 0xdc <DIO_u8SetPinDirection+0x2e>
  da:	09 c1       	rjmp	.+530    	; 0x2ee <DIO_u8SetPinDirection+0x240>
  dc:	8c 81       	ldd	r24, Y+4	; 0x04
  de:	88 23       	and	r24, r24
  e0:	21 f0       	breq	.+8      	; 0xea <DIO_u8SetPinDirection+0x3c>
  e2:	8c 81       	ldd	r24, Y+4	; 0x04
  e4:	81 30       	cpi	r24, 0x01	; 1
  e6:	09 f0       	breq	.+2      	; 0xea <DIO_u8SetPinDirection+0x3c>
  e8:	02 c1       	rjmp	.+516    	; 0x2ee <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
  ea:	8a 81       	ldd	r24, Y+2	; 0x02
  ec:	28 2f       	mov	r18, r24
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	3e 87       	std	Y+14, r19	; 0x0e
  f2:	2d 87       	std	Y+13, r18	; 0x0d
  f4:	8d 85       	ldd	r24, Y+13	; 0x0d
  f6:	9e 85       	ldd	r25, Y+14	; 0x0e
  f8:	81 30       	cpi	r24, 0x01	; 1
  fa:	91 05       	cpc	r25, r1
  fc:	09 f4       	brne	.+2      	; 0x100 <DIO_u8SetPinDirection+0x52>
  fe:	4f c0       	rjmp	.+158    	; 0x19e <DIO_u8SetPinDirection+0xf0>
 100:	2d 85       	ldd	r18, Y+13	; 0x0d
 102:	3e 85       	ldd	r19, Y+14	; 0x0e
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	31 05       	cpc	r19, r1
 108:	2c f4       	brge	.+10     	; 0x114 <DIO_u8SetPinDirection+0x66>
 10a:	8d 85       	ldd	r24, Y+13	; 0x0d
 10c:	9e 85       	ldd	r25, Y+14	; 0x0e
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	71 f0       	breq	.+28     	; 0x12e <DIO_u8SetPinDirection+0x80>
 112:	ee c0       	rjmp	.+476    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
 114:	2d 85       	ldd	r18, Y+13	; 0x0d
 116:	3e 85       	ldd	r19, Y+14	; 0x0e
 118:	22 30       	cpi	r18, 0x02	; 2
 11a:	31 05       	cpc	r19, r1
 11c:	09 f4       	brne	.+2      	; 0x120 <DIO_u8SetPinDirection+0x72>
 11e:	77 c0       	rjmp	.+238    	; 0x20e <DIO_u8SetPinDirection+0x160>
 120:	8d 85       	ldd	r24, Y+13	; 0x0d
 122:	9e 85       	ldd	r25, Y+14	; 0x0e
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	91 05       	cpc	r25, r1
 128:	09 f4       	brne	.+2      	; 0x12c <DIO_u8SetPinDirection+0x7e>
 12a:	a9 c0       	rjmp	.+338    	; 0x27e <DIO_u8SetPinDirection+0x1d0>
 12c:	e1 c0       	rjmp	.+450    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
 12e:	8b 81       	ldd	r24, Y+3	; 0x03
 130:	28 2f       	mov	r18, r24
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	3c 87       	std	Y+12, r19	; 0x0c
 136:	2b 87       	std	Y+11, r18	; 0x0b
 138:	8b 85       	ldd	r24, Y+11	; 0x0b
 13a:	9c 85       	ldd	r25, Y+12	; 0x0c
 13c:	00 97       	sbiw	r24, 0x00	; 0
 13e:	31 f0       	breq	.+12     	; 0x14c <DIO_u8SetPinDirection+0x9e>
 140:	2b 85       	ldd	r18, Y+11	; 0x0b
 142:	3c 85       	ldd	r19, Y+12	; 0x0c
 144:	21 30       	cpi	r18, 0x01	; 1
 146:	31 05       	cpc	r19, r1
 148:	b1 f0       	breq	.+44     	; 0x176 <DIO_u8SetPinDirection+0xc8>
 14a:	d2 c0       	rjmp	.+420    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 14c:	aa e3       	ldi	r26, 0x3A	; 58
 14e:	b0 e0       	ldi	r27, 0x00	; 0
 150:	ea e3       	ldi	r30, 0x3A	; 58
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	48 2f       	mov	r20, r24
 158:	8b 81       	ldd	r24, Y+3	; 0x03
 15a:	28 2f       	mov	r18, r24
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_u8SetPinDirection+0xbc>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_u8SetPinDirection+0xb8>
 16e:	80 95       	com	r24
 170:	84 23       	and	r24, r20
 172:	8c 93       	st	X, r24
 174:	bd c0       	rjmp	.+378    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 176:	aa e3       	ldi	r26, 0x3A	; 58
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	ea e3       	ldi	r30, 0x3A	; 58
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	48 2f       	mov	r20, r24
 182:	8b 81       	ldd	r24, Y+3	; 0x03
 184:	28 2f       	mov	r18, r24
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	02 2e       	mov	r0, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_u8SetPinDirection+0xe6>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	0a 94       	dec	r0
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_u8SetPinDirection+0xe2>
 198:	84 2b       	or	r24, r20
 19a:	8c 93       	st	X, r24
 19c:	a9 c0       	rjmp	.+338    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
 19e:	8b 81       	ldd	r24, Y+3	; 0x03
 1a0:	28 2f       	mov	r18, r24
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	3a 87       	std	Y+10, r19	; 0x0a
 1a6:	29 87       	std	Y+9, r18	; 0x09
 1a8:	89 85       	ldd	r24, Y+9	; 0x09
 1aa:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ac:	00 97       	sbiw	r24, 0x00	; 0
 1ae:	31 f0       	breq	.+12     	; 0x1bc <DIO_u8SetPinDirection+0x10e>
 1b0:	29 85       	ldd	r18, Y+9	; 0x09
 1b2:	3a 85       	ldd	r19, Y+10	; 0x0a
 1b4:	21 30       	cpi	r18, 0x01	; 1
 1b6:	31 05       	cpc	r19, r1
 1b8:	b1 f0       	breq	.+44     	; 0x1e6 <DIO_u8SetPinDirection+0x138>
 1ba:	9a c0       	rjmp	.+308    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 1bc:	a7 e3       	ldi	r26, 0x37	; 55
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	e7 e3       	ldi	r30, 0x37	; 55
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	8b 81       	ldd	r24, Y+3	; 0x03
 1ca:	28 2f       	mov	r18, r24
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	02 2e       	mov	r0, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_u8SetPinDirection+0x12c>
 1d6:	88 0f       	add	r24, r24
 1d8:	99 1f       	adc	r25, r25
 1da:	0a 94       	dec	r0
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_u8SetPinDirection+0x128>
 1de:	80 95       	com	r24
 1e0:	84 23       	and	r24, r20
 1e2:	8c 93       	st	X, r24
 1e4:	85 c0       	rjmp	.+266    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 1e6:	a7 e3       	ldi	r26, 0x37	; 55
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e7 e3       	ldi	r30, 0x37	; 55
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	48 2f       	mov	r20, r24
 1f2:	8b 81       	ldd	r24, Y+3	; 0x03
 1f4:	28 2f       	mov	r18, r24
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	02 2e       	mov	r0, r18
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_u8SetPinDirection+0x156>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	0a 94       	dec	r0
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_u8SetPinDirection+0x152>
 208:	84 2b       	or	r24, r20
 20a:	8c 93       	st	X, r24
 20c:	71 c0       	rjmp	.+226    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
 20e:	8b 81       	ldd	r24, Y+3	; 0x03
 210:	28 2f       	mov	r18, r24
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	38 87       	std	Y+8, r19	; 0x08
 216:	2f 83       	std	Y+7, r18	; 0x07
 218:	8f 81       	ldd	r24, Y+7	; 0x07
 21a:	98 85       	ldd	r25, Y+8	; 0x08
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	31 f0       	breq	.+12     	; 0x22c <DIO_u8SetPinDirection+0x17e>
 220:	2f 81       	ldd	r18, Y+7	; 0x07
 222:	38 85       	ldd	r19, Y+8	; 0x08
 224:	21 30       	cpi	r18, 0x01	; 1
 226:	31 05       	cpc	r19, r1
 228:	b1 f0       	breq	.+44     	; 0x256 <DIO_u8SetPinDirection+0x1a8>
 22a:	62 c0       	rjmp	.+196    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 22c:	a4 e3       	ldi	r26, 0x34	; 52
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e4 e3       	ldi	r30, 0x34	; 52
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	48 2f       	mov	r20, r24
 238:	8b 81       	ldd	r24, Y+3	; 0x03
 23a:	28 2f       	mov	r18, r24
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 2e       	mov	r0, r18
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_u8SetPinDirection+0x19c>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	0a 94       	dec	r0
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_u8SetPinDirection+0x198>
 24e:	80 95       	com	r24
 250:	84 23       	and	r24, r20
 252:	8c 93       	st	X, r24
 254:	4d c0       	rjmp	.+154    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 256:	a4 e3       	ldi	r26, 0x34	; 52
 258:	b0 e0       	ldi	r27, 0x00	; 0
 25a:	e4 e3       	ldi	r30, 0x34	; 52
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	48 2f       	mov	r20, r24
 262:	8b 81       	ldd	r24, Y+3	; 0x03
 264:	28 2f       	mov	r18, r24
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	02 2e       	mov	r0, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_u8SetPinDirection+0x1c6>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	0a 94       	dec	r0
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_u8SetPinDirection+0x1c2>
 278:	84 2b       	or	r24, r20
 27a:	8c 93       	st	X, r24
 27c:	39 c0       	rjmp	.+114    	; 0x2f0 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
 27e:	8b 81       	ldd	r24, Y+3	; 0x03
 280:	28 2f       	mov	r18, r24
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	3e 83       	std	Y+6, r19	; 0x06
 286:	2d 83       	std	Y+5, r18	; 0x05
 288:	8d 81       	ldd	r24, Y+5	; 0x05
 28a:	9e 81       	ldd	r25, Y+6	; 0x06
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	31 f0       	breq	.+12     	; 0x29c <DIO_u8SetPinDirection+0x1ee>
 290:	2d 81       	ldd	r18, Y+5	; 0x05
 292:	3e 81       	ldd	r19, Y+6	; 0x06
 294:	21 30       	cpi	r18, 0x01	; 1
 296:	31 05       	cpc	r19, r1
 298:	b1 f0       	breq	.+44     	; 0x2c6 <DIO_u8SetPinDirection+0x218>
 29a:	2a c0       	rjmp	.+84     	; 0x2f0 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 29c:	a1 e3       	ldi	r26, 0x31	; 49
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e1 e3       	ldi	r30, 0x31	; 49
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	48 2f       	mov	r20, r24
 2a8:	8b 81       	ldd	r24, Y+3	; 0x03
 2aa:	28 2f       	mov	r18, r24
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 2e       	mov	r0, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_u8SetPinDirection+0x20c>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	0a 94       	dec	r0
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_u8SetPinDirection+0x208>
 2be:	80 95       	com	r24
 2c0:	84 23       	and	r24, r20
 2c2:	8c 93       	st	X, r24
 2c4:	15 c0       	rjmp	.+42     	; 0x2f0 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 2c6:	a1 e3       	ldi	r26, 0x31	; 49
 2c8:	b0 e0       	ldi	r27, 0x00	; 0
 2ca:	e1 e3       	ldi	r30, 0x31	; 49
 2cc:	f0 e0       	ldi	r31, 0x00	; 0
 2ce:	80 81       	ld	r24, Z
 2d0:	48 2f       	mov	r20, r24
 2d2:	8b 81       	ldd	r24, Y+3	; 0x03
 2d4:	28 2f       	mov	r18, r24
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	02 2e       	mov	r0, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_u8SetPinDirection+0x236>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	0a 94       	dec	r0
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_u8SetPinDirection+0x232>
 2e8:	84 2b       	or	r24, r20
 2ea:	8c 93       	st	X, r24
 2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 2ee:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 2f0:	89 81       	ldd	r24, Y+1	; 0x01
}
 2f2:	2e 96       	adiw	r28, 0x0e	; 14
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	cf 91       	pop	r28
 300:	df 91       	pop	r29
 302:	08 95       	ret

00000304 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
 304:	df 93       	push	r29
 306:	cf 93       	push	r28
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	2e 97       	sbiw	r28, 0x0e	; 14
 30e:	0f b6       	in	r0, 0x3f	; 63
 310:	f8 94       	cli
 312:	de bf       	out	0x3e, r29	; 62
 314:	0f be       	out	0x3f, r0	; 63
 316:	cd bf       	out	0x3d, r28	; 61
 318:	8a 83       	std	Y+2, r24	; 0x02
 31a:	6b 83       	std	Y+3, r22	; 0x03
 31c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
 322:	8b 81       	ldd	r24, Y+3	; 0x03
 324:	88 30       	cpi	r24, 0x08	; 8
 326:	08 f0       	brcs	.+2      	; 0x32a <DIO_u8SetPinValue+0x26>
 328:	0c c1       	rjmp	.+536    	; 0x542 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
 32a:	8a 81       	ldd	r24, Y+2	; 0x02
 32c:	28 2f       	mov	r18, r24
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	3e 87       	std	Y+14, r19	; 0x0e
 332:	2d 87       	std	Y+13, r18	; 0x0d
 334:	8d 85       	ldd	r24, Y+13	; 0x0d
 336:	9e 85       	ldd	r25, Y+14	; 0x0e
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	91 05       	cpc	r25, r1
 33c:	09 f4       	brne	.+2      	; 0x340 <DIO_u8SetPinValue+0x3c>
 33e:	51 c0       	rjmp	.+162    	; 0x3e2 <DIO_u8SetPinValue+0xde>
 340:	2d 85       	ldd	r18, Y+13	; 0x0d
 342:	3e 85       	ldd	r19, Y+14	; 0x0e
 344:	22 30       	cpi	r18, 0x02	; 2
 346:	31 05       	cpc	r19, r1
 348:	2c f4       	brge	.+10     	; 0x354 <DIO_u8SetPinValue+0x50>
 34a:	8d 85       	ldd	r24, Y+13	; 0x0d
 34c:	9e 85       	ldd	r25, Y+14	; 0x0e
 34e:	00 97       	sbiw	r24, 0x00	; 0
 350:	71 f0       	breq	.+28     	; 0x36e <DIO_u8SetPinValue+0x6a>
 352:	f5 c0       	rjmp	.+490    	; 0x53e <DIO_u8SetPinValue+0x23a>
 354:	2d 85       	ldd	r18, Y+13	; 0x0d
 356:	3e 85       	ldd	r19, Y+14	; 0x0e
 358:	22 30       	cpi	r18, 0x02	; 2
 35a:	31 05       	cpc	r19, r1
 35c:	09 f4       	brne	.+2      	; 0x360 <DIO_u8SetPinValue+0x5c>
 35e:	7b c0       	rjmp	.+246    	; 0x456 <DIO_u8SetPinValue+0x152>
 360:	8d 85       	ldd	r24, Y+13	; 0x0d
 362:	9e 85       	ldd	r25, Y+14	; 0x0e
 364:	83 30       	cpi	r24, 0x03	; 3
 366:	91 05       	cpc	r25, r1
 368:	09 f4       	brne	.+2      	; 0x36c <DIO_u8SetPinValue+0x68>
 36a:	af c0       	rjmp	.+350    	; 0x4ca <DIO_u8SetPinValue+0x1c6>
 36c:	e8 c0       	rjmp	.+464    	; 0x53e <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
 36e:	8c 81       	ldd	r24, Y+4	; 0x04
 370:	28 2f       	mov	r18, r24
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	3c 87       	std	Y+12, r19	; 0x0c
 376:	2b 87       	std	Y+11, r18	; 0x0b
 378:	8b 85       	ldd	r24, Y+11	; 0x0b
 37a:	9c 85       	ldd	r25, Y+12	; 0x0c
 37c:	00 97       	sbiw	r24, 0x00	; 0
 37e:	31 f0       	breq	.+12     	; 0x38c <DIO_u8SetPinValue+0x88>
 380:	2b 85       	ldd	r18, Y+11	; 0x0b
 382:	3c 85       	ldd	r19, Y+12	; 0x0c
 384:	21 30       	cpi	r18, 0x01	; 1
 386:	31 05       	cpc	r19, r1
 388:	b1 f0       	breq	.+44     	; 0x3b6 <DIO_u8SetPinValue+0xb2>
 38a:	29 c0       	rjmp	.+82     	; 0x3de <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 38c:	ab e3       	ldi	r26, 0x3B	; 59
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	eb e3       	ldi	r30, 0x3B	; 59
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	80 81       	ld	r24, Z
 396:	48 2f       	mov	r20, r24
 398:	8b 81       	ldd	r24, Y+3	; 0x03
 39a:	28 2f       	mov	r18, r24
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_u8SetPinValue+0xa6>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_u8SetPinValue+0xa2>
 3ae:	80 95       	com	r24
 3b0:	84 23       	and	r24, r20
 3b2:	8c 93       	st	X, r24
 3b4:	c7 c0       	rjmp	.+398    	; 0x544 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 3b6:	ab e3       	ldi	r26, 0x3B	; 59
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	eb e3       	ldi	r30, 0x3B	; 59
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_u8SetPinValue+0xd0>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_u8SetPinValue+0xcc>
 3d8:	84 2b       	or	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	b3 c0       	rjmp	.+358    	; 0x544 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 3de:	19 82       	std	Y+1, r1	; 0x01
 3e0:	b1 c0       	rjmp	.+354    	; 0x544 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
 3e2:	8c 81       	ldd	r24, Y+4	; 0x04
 3e4:	28 2f       	mov	r18, r24
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	3a 87       	std	Y+10, r19	; 0x0a
 3ea:	29 87       	std	Y+9, r18	; 0x09
 3ec:	89 85       	ldd	r24, Y+9	; 0x09
 3ee:	9a 85       	ldd	r25, Y+10	; 0x0a
 3f0:	00 97       	sbiw	r24, 0x00	; 0
 3f2:	31 f0       	breq	.+12     	; 0x400 <DIO_u8SetPinValue+0xfc>
 3f4:	29 85       	ldd	r18, Y+9	; 0x09
 3f6:	3a 85       	ldd	r19, Y+10	; 0x0a
 3f8:	21 30       	cpi	r18, 0x01	; 1
 3fa:	31 05       	cpc	r19, r1
 3fc:	b1 f0       	breq	.+44     	; 0x42a <DIO_u8SetPinValue+0x126>
 3fe:	29 c0       	rjmp	.+82     	; 0x452 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 400:	a8 e3       	ldi	r26, 0x38	; 56
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	e8 e3       	ldi	r30, 0x38	; 56
 406:	f0 e0       	ldi	r31, 0x00	; 0
 408:	80 81       	ld	r24, Z
 40a:	48 2f       	mov	r20, r24
 40c:	8b 81       	ldd	r24, Y+3	; 0x03
 40e:	28 2f       	mov	r18, r24
 410:	30 e0       	ldi	r19, 0x00	; 0
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 2e       	mov	r0, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <DIO_u8SetPinValue+0x11a>
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
 41e:	0a 94       	dec	r0
 420:	e2 f7       	brpl	.-8      	; 0x41a <DIO_u8SetPinValue+0x116>
 422:	80 95       	com	r24
 424:	84 23       	and	r24, r20
 426:	8c 93       	st	X, r24
 428:	8d c0       	rjmp	.+282    	; 0x544 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 42a:	a8 e3       	ldi	r26, 0x38	; 56
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	e8 e3       	ldi	r30, 0x38	; 56
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	48 2f       	mov	r20, r24
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 2e       	mov	r0, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_u8SetPinValue+0x144>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_u8SetPinValue+0x140>
 44c:	84 2b       	or	r24, r20
 44e:	8c 93       	st	X, r24
 450:	79 c0       	rjmp	.+242    	; 0x544 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 452:	19 82       	std	Y+1, r1	; 0x01
 454:	77 c0       	rjmp	.+238    	; 0x544 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
 456:	8c 81       	ldd	r24, Y+4	; 0x04
 458:	28 2f       	mov	r18, r24
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	38 87       	std	Y+8, r19	; 0x08
 45e:	2f 83       	std	Y+7, r18	; 0x07
 460:	8f 81       	ldd	r24, Y+7	; 0x07
 462:	98 85       	ldd	r25, Y+8	; 0x08
 464:	00 97       	sbiw	r24, 0x00	; 0
 466:	31 f0       	breq	.+12     	; 0x474 <DIO_u8SetPinValue+0x170>
 468:	2f 81       	ldd	r18, Y+7	; 0x07
 46a:	38 85       	ldd	r19, Y+8	; 0x08
 46c:	21 30       	cpi	r18, 0x01	; 1
 46e:	31 05       	cpc	r19, r1
 470:	b1 f0       	breq	.+44     	; 0x49e <DIO_u8SetPinValue+0x19a>
 472:	29 c0       	rjmp	.+82     	; 0x4c6 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 474:	a5 e3       	ldi	r26, 0x35	; 53
 476:	b0 e0       	ldi	r27, 0x00	; 0
 478:	e5 e3       	ldi	r30, 0x35	; 53
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	48 2f       	mov	r20, r24
 480:	8b 81       	ldd	r24, Y+3	; 0x03
 482:	28 2f       	mov	r18, r24
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 2e       	mov	r0, r18
 48c:	02 c0       	rjmp	.+4      	; 0x492 <DIO_u8SetPinValue+0x18e>
 48e:	88 0f       	add	r24, r24
 490:	99 1f       	adc	r25, r25
 492:	0a 94       	dec	r0
 494:	e2 f7       	brpl	.-8      	; 0x48e <DIO_u8SetPinValue+0x18a>
 496:	80 95       	com	r24
 498:	84 23       	and	r24, r20
 49a:	8c 93       	st	X, r24
 49c:	53 c0       	rjmp	.+166    	; 0x544 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 49e:	a5 e3       	ldi	r26, 0x35	; 53
 4a0:	b0 e0       	ldi	r27, 0x00	; 0
 4a2:	e5 e3       	ldi	r30, 0x35	; 53
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	80 81       	ld	r24, Z
 4a8:	48 2f       	mov	r20, r24
 4aa:	8b 81       	ldd	r24, Y+3	; 0x03
 4ac:	28 2f       	mov	r18, r24
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	02 2e       	mov	r0, r18
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_u8SetPinValue+0x1b8>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_u8SetPinValue+0x1b4>
 4c0:	84 2b       	or	r24, r20
 4c2:	8c 93       	st	X, r24
 4c4:	3f c0       	rjmp	.+126    	; 0x544 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 4c6:	19 82       	std	Y+1, r1	; 0x01
 4c8:	3d c0       	rjmp	.+122    	; 0x544 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
 4ca:	8c 81       	ldd	r24, Y+4	; 0x04
 4cc:	28 2f       	mov	r18, r24
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	3e 83       	std	Y+6, r19	; 0x06
 4d2:	2d 83       	std	Y+5, r18	; 0x05
 4d4:	8d 81       	ldd	r24, Y+5	; 0x05
 4d6:	9e 81       	ldd	r25, Y+6	; 0x06
 4d8:	00 97       	sbiw	r24, 0x00	; 0
 4da:	31 f0       	breq	.+12     	; 0x4e8 <DIO_u8SetPinValue+0x1e4>
 4dc:	2d 81       	ldd	r18, Y+5	; 0x05
 4de:	3e 81       	ldd	r19, Y+6	; 0x06
 4e0:	21 30       	cpi	r18, 0x01	; 1
 4e2:	31 05       	cpc	r19, r1
 4e4:	b1 f0       	breq	.+44     	; 0x512 <DIO_u8SetPinValue+0x20e>
 4e6:	29 c0       	rjmp	.+82     	; 0x53a <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 4e8:	a2 e3       	ldi	r26, 0x32	; 50
 4ea:	b0 e0       	ldi	r27, 0x00	; 0
 4ec:	e2 e3       	ldi	r30, 0x32	; 50
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	80 81       	ld	r24, Z
 4f2:	48 2f       	mov	r20, r24
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	28 2f       	mov	r18, r24
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	02 2e       	mov	r0, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <DIO_u8SetPinValue+0x202>
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	0a 94       	dec	r0
 508:	e2 f7       	brpl	.-8      	; 0x502 <DIO_u8SetPinValue+0x1fe>
 50a:	80 95       	com	r24
 50c:	84 23       	and	r24, r20
 50e:	8c 93       	st	X, r24
 510:	19 c0       	rjmp	.+50     	; 0x544 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 512:	a2 e3       	ldi	r26, 0x32	; 50
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	e2 e3       	ldi	r30, 0x32	; 50
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	48 2f       	mov	r20, r24
 51e:	8b 81       	ldd	r24, Y+3	; 0x03
 520:	28 2f       	mov	r18, r24
 522:	30 e0       	ldi	r19, 0x00	; 0
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 2e       	mov	r0, r18
 52a:	02 c0       	rjmp	.+4      	; 0x530 <DIO_u8SetPinValue+0x22c>
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	0a 94       	dec	r0
 532:	e2 f7       	brpl	.-8      	; 0x52c <DIO_u8SetPinValue+0x228>
 534:	84 2b       	or	r24, r20
 536:	8c 93       	st	X, r24
 538:	05 c0       	rjmp	.+10     	; 0x544 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 53a:	19 82       	std	Y+1, r1	; 0x01
 53c:	03 c0       	rjmp	.+6      	; 0x544 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 53e:	19 82       	std	Y+1, r1	; 0x01
 540:	01 c0       	rjmp	.+2      	; 0x544 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 542:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 544:	89 81       	ldd	r24, Y+1	; 0x01
}
 546:	2e 96       	adiw	r28, 0x0e	; 14
 548:	0f b6       	in	r0, 0x3f	; 63
 54a:	f8 94       	cli
 54c:	de bf       	out	0x3e, r29	; 62
 54e:	0f be       	out	0x3f, r0	; 63
 550:	cd bf       	out	0x3d, r28	; 61
 552:	cf 91       	pop	r28
 554:	df 91       	pop	r29
 556:	08 95       	ret

00000558 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
 558:	df 93       	push	r29
 55a:	cf 93       	push	r28
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	28 97       	sbiw	r28, 0x08	; 8
 562:	0f b6       	in	r0, 0x3f	; 63
 564:	f8 94       	cli
 566:	de bf       	out	0x3e, r29	; 62
 568:	0f be       	out	0x3f, r0	; 63
 56a:	cd bf       	out	0x3d, r28	; 61
 56c:	8b 83       	std	Y+3, r24	; 0x03
 56e:	6c 83       	std	Y+4, r22	; 0x04
 570:	5e 83       	std	Y+6, r21	; 0x06
 572:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
 574:	81 e0       	ldi	r24, 0x01	; 1
 576:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	84 30       	cpi	r24, 0x04	; 4
 57c:	08 f0       	brcs	.+2      	; 0x580 <DIO_u8GetPinValue+0x28>
 57e:	a1 c0       	rjmp	.+322    	; 0x6c2 <DIO_u8GetPinValue+0x16a>
 580:	8c 81       	ldd	r24, Y+4	; 0x04
 582:	88 30       	cpi	r24, 0x08	; 8
 584:	08 f0       	brcs	.+2      	; 0x588 <DIO_u8GetPinValue+0x30>
 586:	9d c0       	rjmp	.+314    	; 0x6c2 <DIO_u8GetPinValue+0x16a>
 588:	8d 81       	ldd	r24, Y+5	; 0x05
 58a:	9e 81       	ldd	r25, Y+6	; 0x06
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	09 f4       	brne	.+2      	; 0x592 <DIO_u8GetPinValue+0x3a>
 590:	98 c0       	rjmp	.+304    	; 0x6c2 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
 592:	8b 81       	ldd	r24, Y+3	; 0x03
 594:	28 2f       	mov	r18, r24
 596:	30 e0       	ldi	r19, 0x00	; 0
 598:	38 87       	std	Y+8, r19	; 0x08
 59a:	2f 83       	std	Y+7, r18	; 0x07
 59c:	4f 81       	ldd	r20, Y+7	; 0x07
 59e:	58 85       	ldd	r21, Y+8	; 0x08
 5a0:	41 30       	cpi	r20, 0x01	; 1
 5a2:	51 05       	cpc	r21, r1
 5a4:	a9 f1       	breq	.+106    	; 0x610 <DIO_u8GetPinValue+0xb8>
 5a6:	8f 81       	ldd	r24, Y+7	; 0x07
 5a8:	98 85       	ldd	r25, Y+8	; 0x08
 5aa:	82 30       	cpi	r24, 0x02	; 2
 5ac:	91 05       	cpc	r25, r1
 5ae:	34 f4       	brge	.+12     	; 0x5bc <DIO_u8GetPinValue+0x64>
 5b0:	2f 81       	ldd	r18, Y+7	; 0x07
 5b2:	38 85       	ldd	r19, Y+8	; 0x08
 5b4:	21 15       	cp	r18, r1
 5b6:	31 05       	cpc	r19, r1
 5b8:	71 f0       	breq	.+28     	; 0x5d6 <DIO_u8GetPinValue+0x7e>
 5ba:	81 c0       	rjmp	.+258    	; 0x6be <DIO_u8GetPinValue+0x166>
 5bc:	4f 81       	ldd	r20, Y+7	; 0x07
 5be:	58 85       	ldd	r21, Y+8	; 0x08
 5c0:	42 30       	cpi	r20, 0x02	; 2
 5c2:	51 05       	cpc	r21, r1
 5c4:	09 f4       	brne	.+2      	; 0x5c8 <DIO_u8GetPinValue+0x70>
 5c6:	41 c0       	rjmp	.+130    	; 0x64a <DIO_u8GetPinValue+0xf2>
 5c8:	8f 81       	ldd	r24, Y+7	; 0x07
 5ca:	98 85       	ldd	r25, Y+8	; 0x08
 5cc:	83 30       	cpi	r24, 0x03	; 3
 5ce:	91 05       	cpc	r25, r1
 5d0:	09 f4       	brne	.+2      	; 0x5d4 <DIO_u8GetPinValue+0x7c>
 5d2:	58 c0       	rjmp	.+176    	; 0x684 <DIO_u8GetPinValue+0x12c>
 5d4:	74 c0       	rjmp	.+232    	; 0x6be <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
 5d6:	e9 e3       	ldi	r30, 0x39	; 57
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	80 81       	ld	r24, Z
 5dc:	28 2f       	mov	r18, r24
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	8c 81       	ldd	r24, Y+4	; 0x04
 5e2:	88 2f       	mov	r24, r24
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	a9 01       	movw	r20, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_u8GetPinValue+0x96>
 5ea:	55 95       	asr	r21
 5ec:	47 95       	ror	r20
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_u8GetPinValue+0x92>
 5f2:	ca 01       	movw	r24, r20
 5f4:	81 70       	andi	r24, 0x01	; 1
 5f6:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 5f8:	89 81       	ldd	r24, Y+1	; 0x01
 5fa:	88 23       	and	r24, r24
 5fc:	21 f4       	brne	.+8      	; 0x606 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 5fe:	ed 81       	ldd	r30, Y+5	; 0x05
 600:	fe 81       	ldd	r31, Y+6	; 0x06
 602:	10 82       	st	Z, r1
 604:	5f c0       	rjmp	.+190    	; 0x6c4 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 606:	ed 81       	ldd	r30, Y+5	; 0x05
 608:	fe 81       	ldd	r31, Y+6	; 0x06
 60a:	81 e0       	ldi	r24, 0x01	; 1
 60c:	80 83       	st	Z, r24
 60e:	5a c0       	rjmp	.+180    	; 0x6c4 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
 610:	e6 e3       	ldi	r30, 0x36	; 54
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	80 81       	ld	r24, Z
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	8c 81       	ldd	r24, Y+4	; 0x04
 61c:	88 2f       	mov	r24, r24
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	a9 01       	movw	r20, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_u8GetPinValue+0xd0>
 624:	55 95       	asr	r21
 626:	47 95       	ror	r20
 628:	8a 95       	dec	r24
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_u8GetPinValue+0xcc>
 62c:	ca 01       	movw	r24, r20
 62e:	81 70       	andi	r24, 0x01	; 1
 630:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	88 23       	and	r24, r24
 636:	21 f4       	brne	.+8      	; 0x640 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 638:	ed 81       	ldd	r30, Y+5	; 0x05
 63a:	fe 81       	ldd	r31, Y+6	; 0x06
 63c:	10 82       	st	Z, r1
 63e:	42 c0       	rjmp	.+132    	; 0x6c4 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 640:	ed 81       	ldd	r30, Y+5	; 0x05
 642:	fe 81       	ldd	r31, Y+6	; 0x06
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 83       	st	Z, r24
 648:	3d c0       	rjmp	.+122    	; 0x6c4 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
 64a:	e3 e3       	ldi	r30, 0x33	; 51
 64c:	f0 e0       	ldi	r31, 0x00	; 0
 64e:	80 81       	ld	r24, Z
 650:	28 2f       	mov	r18, r24
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	8c 81       	ldd	r24, Y+4	; 0x04
 656:	88 2f       	mov	r24, r24
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	a9 01       	movw	r20, r18
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_u8GetPinValue+0x10a>
 65e:	55 95       	asr	r21
 660:	47 95       	ror	r20
 662:	8a 95       	dec	r24
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_u8GetPinValue+0x106>
 666:	ca 01       	movw	r24, r20
 668:	81 70       	andi	r24, 0x01	; 1
 66a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 66c:	89 81       	ldd	r24, Y+1	; 0x01
 66e:	88 23       	and	r24, r24
 670:	21 f4       	brne	.+8      	; 0x67a <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 672:	ed 81       	ldd	r30, Y+5	; 0x05
 674:	fe 81       	ldd	r31, Y+6	; 0x06
 676:	10 82       	st	Z, r1
 678:	25 c0       	rjmp	.+74     	; 0x6c4 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 67a:	ed 81       	ldd	r30, Y+5	; 0x05
 67c:	fe 81       	ldd	r31, Y+6	; 0x06
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	80 83       	st	Z, r24
 682:	20 c0       	rjmp	.+64     	; 0x6c4 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
 684:	e0 e3       	ldi	r30, 0x30	; 48
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	28 2f       	mov	r18, r24
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	8c 81       	ldd	r24, Y+4	; 0x04
 690:	88 2f       	mov	r24, r24
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	a9 01       	movw	r20, r18
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_u8GetPinValue+0x144>
 698:	55 95       	asr	r21
 69a:	47 95       	ror	r20
 69c:	8a 95       	dec	r24
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_u8GetPinValue+0x140>
 6a0:	ca 01       	movw	r24, r20
 6a2:	81 70       	andi	r24, 0x01	; 1
 6a4:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 6a6:	89 81       	ldd	r24, Y+1	; 0x01
 6a8:	88 23       	and	r24, r24
 6aa:	21 f4       	brne	.+8      	; 0x6b4 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 6ac:	ed 81       	ldd	r30, Y+5	; 0x05
 6ae:	fe 81       	ldd	r31, Y+6	; 0x06
 6b0:	10 82       	st	Z, r1
 6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 6b4:	ed 81       	ldd	r30, Y+5	; 0x05
 6b6:	fe 81       	ldd	r31, Y+6	; 0x06
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	80 83       	st	Z, r24
 6bc:	03 c0       	rjmp	.+6      	; 0x6c4 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
 6be:	1a 82       	std	Y+2, r1	; 0x02
 6c0:	01 c0       	rjmp	.+2      	; 0x6c4 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 6c2:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
 6c4:	8a 81       	ldd	r24, Y+2	; 0x02
}
 6c6:	28 96       	adiw	r28, 0x08	; 8
 6c8:	0f b6       	in	r0, 0x3f	; 63
 6ca:	f8 94       	cli
 6cc:	de bf       	out	0x3e, r29	; 62
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	cd bf       	out	0x3d, r28	; 61
 6d2:	cf 91       	pop	r28
 6d4:	df 91       	pop	r29
 6d6:	08 95       	ret

000006d8 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 6d8:	df 93       	push	r29
 6da:	cf 93       	push	r28
 6dc:	cd b7       	in	r28, 0x3d	; 61
 6de:	de b7       	in	r29, 0x3e	; 62
 6e0:	2d 97       	sbiw	r28, 0x0d	; 13
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	f8 94       	cli
 6e6:	de bf       	out	0x3e, r29	; 62
 6e8:	0f be       	out	0x3f, r0	; 63
 6ea:	cd bf       	out	0x3d, r28	; 61
 6ec:	8a 83       	std	Y+2, r24	; 0x02
 6ee:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 6f0:	81 e0       	ldi	r24, 0x01	; 1
 6f2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
 6f4:	8b 81       	ldd	r24, Y+3	; 0x03
 6f6:	88 23       	and	r24, r24
 6f8:	21 f0       	breq	.+8      	; 0x702 <DIO_u8SetPortDirection+0x2a>
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	81 30       	cpi	r24, 0x01	; 1
 6fe:	09 f0       	breq	.+2      	; 0x702 <DIO_u8SetPortDirection+0x2a>
 700:	82 c0       	rjmp	.+260    	; 0x806 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
 702:	8a 81       	ldd	r24, Y+2	; 0x02
 704:	28 2f       	mov	r18, r24
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	3d 87       	std	Y+13, r19	; 0x0d
 70a:	2c 87       	std	Y+12, r18	; 0x0c
 70c:	8c 85       	ldd	r24, Y+12	; 0x0c
 70e:	9d 85       	ldd	r25, Y+13	; 0x0d
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	91 05       	cpc	r25, r1
 714:	71 f1       	breq	.+92     	; 0x772 <DIO_u8SetPortDirection+0x9a>
 716:	2c 85       	ldd	r18, Y+12	; 0x0c
 718:	3d 85       	ldd	r19, Y+13	; 0x0d
 71a:	22 30       	cpi	r18, 0x02	; 2
 71c:	31 05       	cpc	r19, r1
 71e:	2c f4       	brge	.+10     	; 0x72a <DIO_u8SetPortDirection+0x52>
 720:	8c 85       	ldd	r24, Y+12	; 0x0c
 722:	9d 85       	ldd	r25, Y+13	; 0x0d
 724:	00 97       	sbiw	r24, 0x00	; 0
 726:	69 f0       	breq	.+26     	; 0x742 <DIO_u8SetPortDirection+0x6a>
 728:	6c c0       	rjmp	.+216    	; 0x802 <DIO_u8SetPortDirection+0x12a>
 72a:	2c 85       	ldd	r18, Y+12	; 0x0c
 72c:	3d 85       	ldd	r19, Y+13	; 0x0d
 72e:	22 30       	cpi	r18, 0x02	; 2
 730:	31 05       	cpc	r19, r1
 732:	b9 f1       	breq	.+110    	; 0x7a2 <DIO_u8SetPortDirection+0xca>
 734:	8c 85       	ldd	r24, Y+12	; 0x0c
 736:	9d 85       	ldd	r25, Y+13	; 0x0d
 738:	83 30       	cpi	r24, 0x03	; 3
 73a:	91 05       	cpc	r25, r1
 73c:	09 f4       	brne	.+2      	; 0x740 <DIO_u8SetPortDirection+0x68>
 73e:	49 c0       	rjmp	.+146    	; 0x7d2 <DIO_u8SetPortDirection+0xfa>
 740:	60 c0       	rjmp	.+192    	; 0x802 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
 742:	8b 81       	ldd	r24, Y+3	; 0x03
 744:	28 2f       	mov	r18, r24
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	3b 87       	std	Y+11, r19	; 0x0b
 74a:	2a 87       	std	Y+10, r18	; 0x0a
 74c:	8a 85       	ldd	r24, Y+10	; 0x0a
 74e:	9b 85       	ldd	r25, Y+11	; 0x0b
 750:	00 97       	sbiw	r24, 0x00	; 0
 752:	31 f0       	breq	.+12     	; 0x760 <DIO_u8SetPortDirection+0x88>
 754:	2a 85       	ldd	r18, Y+10	; 0x0a
 756:	3b 85       	ldd	r19, Y+11	; 0x0b
 758:	21 30       	cpi	r18, 0x01	; 1
 75a:	31 05       	cpc	r19, r1
 75c:	29 f0       	breq	.+10     	; 0x768 <DIO_u8SetPortDirection+0x90>
 75e:	54 c0       	rjmp	.+168    	; 0x808 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
 760:	ea e3       	ldi	r30, 0x3A	; 58
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	10 82       	st	Z, r1
 766:	50 c0       	rjmp	.+160    	; 0x808 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
 768:	ea e3       	ldi	r30, 0x3A	; 58
 76a:	f0 e0       	ldi	r31, 0x00	; 0
 76c:	8f ef       	ldi	r24, 0xFF	; 255
 76e:	80 83       	st	Z, r24
 770:	4b c0       	rjmp	.+150    	; 0x808 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
 772:	8b 81       	ldd	r24, Y+3	; 0x03
 774:	28 2f       	mov	r18, r24
 776:	30 e0       	ldi	r19, 0x00	; 0
 778:	39 87       	std	Y+9, r19	; 0x09
 77a:	28 87       	std	Y+8, r18	; 0x08
 77c:	88 85       	ldd	r24, Y+8	; 0x08
 77e:	99 85       	ldd	r25, Y+9	; 0x09
 780:	00 97       	sbiw	r24, 0x00	; 0
 782:	31 f0       	breq	.+12     	; 0x790 <DIO_u8SetPortDirection+0xb8>
 784:	28 85       	ldd	r18, Y+8	; 0x08
 786:	39 85       	ldd	r19, Y+9	; 0x09
 788:	21 30       	cpi	r18, 0x01	; 1
 78a:	31 05       	cpc	r19, r1
 78c:	29 f0       	breq	.+10     	; 0x798 <DIO_u8SetPortDirection+0xc0>
 78e:	3c c0       	rjmp	.+120    	; 0x808 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
 790:	e7 e3       	ldi	r30, 0x37	; 55
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	10 82       	st	Z, r1
 796:	38 c0       	rjmp	.+112    	; 0x808 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
 798:	e7 e3       	ldi	r30, 0x37	; 55
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	8f ef       	ldi	r24, 0xFF	; 255
 79e:	80 83       	st	Z, r24
 7a0:	33 c0       	rjmp	.+102    	; 0x808 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
 7a2:	8b 81       	ldd	r24, Y+3	; 0x03
 7a4:	28 2f       	mov	r18, r24
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	3f 83       	std	Y+7, r19	; 0x07
 7aa:	2e 83       	std	Y+6, r18	; 0x06
 7ac:	8e 81       	ldd	r24, Y+6	; 0x06
 7ae:	9f 81       	ldd	r25, Y+7	; 0x07
 7b0:	00 97       	sbiw	r24, 0x00	; 0
 7b2:	31 f0       	breq	.+12     	; 0x7c0 <DIO_u8SetPortDirection+0xe8>
 7b4:	2e 81       	ldd	r18, Y+6	; 0x06
 7b6:	3f 81       	ldd	r19, Y+7	; 0x07
 7b8:	21 30       	cpi	r18, 0x01	; 1
 7ba:	31 05       	cpc	r19, r1
 7bc:	29 f0       	breq	.+10     	; 0x7c8 <DIO_u8SetPortDirection+0xf0>
 7be:	24 c0       	rjmp	.+72     	; 0x808 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
 7c0:	e4 e3       	ldi	r30, 0x34	; 52
 7c2:	f0 e0       	ldi	r31, 0x00	; 0
 7c4:	10 82       	st	Z, r1
 7c6:	20 c0       	rjmp	.+64     	; 0x808 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
 7c8:	e4 e3       	ldi	r30, 0x34	; 52
 7ca:	f0 e0       	ldi	r31, 0x00	; 0
 7cc:	8f ef       	ldi	r24, 0xFF	; 255
 7ce:	80 83       	st	Z, r24
 7d0:	1b c0       	rjmp	.+54     	; 0x808 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
 7d2:	8b 81       	ldd	r24, Y+3	; 0x03
 7d4:	28 2f       	mov	r18, r24
 7d6:	30 e0       	ldi	r19, 0x00	; 0
 7d8:	3d 83       	std	Y+5, r19	; 0x05
 7da:	2c 83       	std	Y+4, r18	; 0x04
 7dc:	8c 81       	ldd	r24, Y+4	; 0x04
 7de:	9d 81       	ldd	r25, Y+5	; 0x05
 7e0:	00 97       	sbiw	r24, 0x00	; 0
 7e2:	31 f0       	breq	.+12     	; 0x7f0 <DIO_u8SetPortDirection+0x118>
 7e4:	2c 81       	ldd	r18, Y+4	; 0x04
 7e6:	3d 81       	ldd	r19, Y+5	; 0x05
 7e8:	21 30       	cpi	r18, 0x01	; 1
 7ea:	31 05       	cpc	r19, r1
 7ec:	29 f0       	breq	.+10     	; 0x7f8 <DIO_u8SetPortDirection+0x120>
 7ee:	0c c0       	rjmp	.+24     	; 0x808 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
 7f0:	e1 e3       	ldi	r30, 0x31	; 49
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	10 82       	st	Z, r1
 7f6:	08 c0       	rjmp	.+16     	; 0x808 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
 7f8:	e1 e3       	ldi	r30, 0x31	; 49
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	80 83       	st	Z, r24
 800:	03 c0       	rjmp	.+6      	; 0x808 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
 802:	19 82       	std	Y+1, r1	; 0x01
 804:	01 c0       	rjmp	.+2      	; 0x808 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 806:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 808:	89 81       	ldd	r24, Y+1	; 0x01
}
 80a:	2d 96       	adiw	r28, 0x0d	; 13
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	f8 94       	cli
 810:	de bf       	out	0x3e, r29	; 62
 812:	0f be       	out	0x3f, r0	; 63
 814:	cd bf       	out	0x3d, r28	; 61
 816:	cf 91       	pop	r28
 818:	df 91       	pop	r29
 81a:	08 95       	ret

0000081c <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 81c:	df 93       	push	r29
 81e:	cf 93       	push	r28
 820:	00 d0       	rcall	.+0      	; 0x822 <DIO_u8SetPortValue+0x6>
 822:	00 d0       	rcall	.+0      	; 0x824 <DIO_u8SetPortValue+0x8>
 824:	0f 92       	push	r0
 826:	cd b7       	in	r28, 0x3d	; 61
 828:	de b7       	in	r29, 0x3e	; 62
 82a:	8a 83       	std	Y+2, r24	; 0x02
 82c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
 832:	8a 81       	ldd	r24, Y+2	; 0x02
 834:	28 2f       	mov	r18, r24
 836:	30 e0       	ldi	r19, 0x00	; 0
 838:	3d 83       	std	Y+5, r19	; 0x05
 83a:	2c 83       	std	Y+4, r18	; 0x04
 83c:	8c 81       	ldd	r24, Y+4	; 0x04
 83e:	9d 81       	ldd	r25, Y+5	; 0x05
 840:	81 30       	cpi	r24, 0x01	; 1
 842:	91 05       	cpc	r25, r1
 844:	d1 f0       	breq	.+52     	; 0x87a <__stack+0x1b>
 846:	2c 81       	ldd	r18, Y+4	; 0x04
 848:	3d 81       	ldd	r19, Y+5	; 0x05
 84a:	22 30       	cpi	r18, 0x02	; 2
 84c:	31 05       	cpc	r19, r1
 84e:	2c f4       	brge	.+10     	; 0x85a <DIO_u8SetPortValue+0x3e>
 850:	8c 81       	ldd	r24, Y+4	; 0x04
 852:	9d 81       	ldd	r25, Y+5	; 0x05
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	61 f0       	breq	.+24     	; 0x870 <__stack+0x11>
 858:	1f c0       	rjmp	.+62     	; 0x898 <__stack+0x39>
 85a:	2c 81       	ldd	r18, Y+4	; 0x04
 85c:	3d 81       	ldd	r19, Y+5	; 0x05
 85e:	22 30       	cpi	r18, 0x02	; 2
 860:	31 05       	cpc	r19, r1
 862:	81 f0       	breq	.+32     	; 0x884 <__stack+0x25>
 864:	8c 81       	ldd	r24, Y+4	; 0x04
 866:	9d 81       	ldd	r25, Y+5	; 0x05
 868:	83 30       	cpi	r24, 0x03	; 3
 86a:	91 05       	cpc	r25, r1
 86c:	81 f0       	breq	.+32     	; 0x88e <__stack+0x2f>
 86e:	14 c0       	rjmp	.+40     	; 0x898 <__stack+0x39>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
 870:	eb e3       	ldi	r30, 0x3B	; 59
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	8b 81       	ldd	r24, Y+3	; 0x03
 876:	80 83       	st	Z, r24
 878:	10 c0       	rjmp	.+32     	; 0x89a <__stack+0x3b>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
 87a:	e8 e3       	ldi	r30, 0x38	; 56
 87c:	f0 e0       	ldi	r31, 0x00	; 0
 87e:	8b 81       	ldd	r24, Y+3	; 0x03
 880:	80 83       	st	Z, r24
 882:	0b c0       	rjmp	.+22     	; 0x89a <__stack+0x3b>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
 884:	e5 e3       	ldi	r30, 0x35	; 53
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	8b 81       	ldd	r24, Y+3	; 0x03
 88a:	80 83       	st	Z, r24
 88c:	06 c0       	rjmp	.+12     	; 0x89a <__stack+0x3b>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
 88e:	e2 e3       	ldi	r30, 0x32	; 50
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	8b 81       	ldd	r24, Y+3	; 0x03
 894:	80 83       	st	Z, r24
 896:	01 c0       	rjmp	.+2      	; 0x89a <__stack+0x3b>
		default:Local_u8ErrorState = STD_TYPES_NOK;
 898:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 89a:	89 81       	ldd	r24, Y+1	; 0x01
}
 89c:	0f 90       	pop	r0
 89e:	0f 90       	pop	r0
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	0f 90       	pop	r0
 8a6:	cf 91       	pop	r28
 8a8:	df 91       	pop	r29
 8aa:	08 95       	ret

000008ac <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
 8ac:	df 93       	push	r29
 8ae:	cf 93       	push	r28
 8b0:	00 d0       	rcall	.+0      	; 0x8b2 <DIO_u8GetPortValue+0x6>
 8b2:	00 d0       	rcall	.+0      	; 0x8b4 <DIO_u8GetPortValue+0x8>
 8b4:	00 d0       	rcall	.+0      	; 0x8b6 <DIO_u8GetPortValue+0xa>
 8b6:	cd b7       	in	r28, 0x3d	; 61
 8b8:	de b7       	in	r29, 0x3e	; 62
 8ba:	8a 83       	std	Y+2, r24	; 0x02
 8bc:	7c 83       	std	Y+4, r23	; 0x04
 8be:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 8c0:	81 e0       	ldi	r24, 0x01	; 1
 8c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
 8c4:	8b 81       	ldd	r24, Y+3	; 0x03
 8c6:	9c 81       	ldd	r25, Y+4	; 0x04
 8c8:	00 97       	sbiw	r24, 0x00	; 0
 8ca:	e9 f1       	breq	.+122    	; 0x946 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
 8cc:	8a 81       	ldd	r24, Y+2	; 0x02
 8ce:	28 2f       	mov	r18, r24
 8d0:	30 e0       	ldi	r19, 0x00	; 0
 8d2:	3e 83       	std	Y+6, r19	; 0x06
 8d4:	2d 83       	std	Y+5, r18	; 0x05
 8d6:	8d 81       	ldd	r24, Y+5	; 0x05
 8d8:	9e 81       	ldd	r25, Y+6	; 0x06
 8da:	81 30       	cpi	r24, 0x01	; 1
 8dc:	91 05       	cpc	r25, r1
 8de:	e1 f0       	breq	.+56     	; 0x918 <DIO_u8GetPortValue+0x6c>
 8e0:	2d 81       	ldd	r18, Y+5	; 0x05
 8e2:	3e 81       	ldd	r19, Y+6	; 0x06
 8e4:	22 30       	cpi	r18, 0x02	; 2
 8e6:	31 05       	cpc	r19, r1
 8e8:	2c f4       	brge	.+10     	; 0x8f4 <DIO_u8GetPortValue+0x48>
 8ea:	8d 81       	ldd	r24, Y+5	; 0x05
 8ec:	9e 81       	ldd	r25, Y+6	; 0x06
 8ee:	00 97       	sbiw	r24, 0x00	; 0
 8f0:	61 f0       	breq	.+24     	; 0x90a <DIO_u8GetPortValue+0x5e>
 8f2:	27 c0       	rjmp	.+78     	; 0x942 <DIO_u8GetPortValue+0x96>
 8f4:	2d 81       	ldd	r18, Y+5	; 0x05
 8f6:	3e 81       	ldd	r19, Y+6	; 0x06
 8f8:	22 30       	cpi	r18, 0x02	; 2
 8fa:	31 05       	cpc	r19, r1
 8fc:	a1 f0       	breq	.+40     	; 0x926 <DIO_u8GetPortValue+0x7a>
 8fe:	8d 81       	ldd	r24, Y+5	; 0x05
 900:	9e 81       	ldd	r25, Y+6	; 0x06
 902:	83 30       	cpi	r24, 0x03	; 3
 904:	91 05       	cpc	r25, r1
 906:	b1 f0       	breq	.+44     	; 0x934 <DIO_u8GetPortValue+0x88>
 908:	1c c0       	rjmp	.+56     	; 0x942 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
 90a:	e9 e3       	ldi	r30, 0x39	; 57
 90c:	f0 e0       	ldi	r31, 0x00	; 0
 90e:	80 81       	ld	r24, Z
 910:	eb 81       	ldd	r30, Y+3	; 0x03
 912:	fc 81       	ldd	r31, Y+4	; 0x04
 914:	80 83       	st	Z, r24
 916:	18 c0       	rjmp	.+48     	; 0x948 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
 918:	e6 e3       	ldi	r30, 0x36	; 54
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	eb 81       	ldd	r30, Y+3	; 0x03
 920:	fc 81       	ldd	r31, Y+4	; 0x04
 922:	80 83       	st	Z, r24
 924:	11 c0       	rjmp	.+34     	; 0x948 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
 926:	e3 e3       	ldi	r30, 0x33	; 51
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	eb 81       	ldd	r30, Y+3	; 0x03
 92e:	fc 81       	ldd	r31, Y+4	; 0x04
 930:	80 83       	st	Z, r24
 932:	0a c0       	rjmp	.+20     	; 0x948 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
 934:	e0 e3       	ldi	r30, 0x30	; 48
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	eb 81       	ldd	r30, Y+3	; 0x03
 93c:	fc 81       	ldd	r31, Y+4	; 0x04
 93e:	80 83       	st	Z, r24
 940:	03 c0       	rjmp	.+6      	; 0x948 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
 942:	19 82       	std	Y+1, r1	; 0x01
 944:	01 c0       	rjmp	.+2      	; 0x948 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 946:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 948:	89 81       	ldd	r24, Y+1	; 0x01
 94a:	26 96       	adiw	r28, 0x06	; 6
 94c:	0f b6       	in	r0, 0x3f	; 63
 94e:	f8 94       	cli
 950:	de bf       	out	0x3e, r29	; 62
 952:	0f be       	out	0x3f, r0	; 63
 954:	cd bf       	out	0x3d, r28	; 61
 956:	cf 91       	pop	r28
 958:	df 91       	pop	r29
 95a:	08 95       	ret

0000095c <UART_voidInit>:
#include "UART_private.h"
#include "UART_interface.h"
#include "UART_config.h"

void UART_voidInit(void)
{
 95c:	df 93       	push	r29
 95e:	cf 93       	push	r28
 960:	00 d0       	rcall	.+0      	; 0x962 <UART_voidInit+0x6>
 962:	0f 92       	push	r0
 964:	cd b7       	in	r28, 0x3d	; 61
 966:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRate = 51;
 968:	83 e3       	ldi	r24, 0x33	; 51
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	9b 83       	std	Y+3, r25	; 0x03
 96e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCValue = 0b10000000;
 970:	80 e8       	ldi	r24, 0x80	; 128
 972:	89 83       	std	Y+1, r24	; 0x01
	/* Baud Rate = 9600 */
	UART_u8_UBRRL_REG = (u8) Local_u16BaudRate;
 974:	e9 e2       	ldi	r30, 0x29	; 41
 976:	f0 e0       	ldi	r31, 0x00	; 0
 978:	8a 81       	ldd	r24, Y+2	; 0x02
 97a:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BaudRate >> 8);
 97c:	e0 e4       	ldi	r30, 0x40	; 64
 97e:	f0 e0       	ldi	r31, 0x00	; 0
 980:	8a 81       	ldd	r24, Y+2	; 0x02
 982:	9b 81       	ldd	r25, Y+3	; 0x03
 984:	89 2f       	mov	r24, r25
 986:	99 27       	eor	r25, r25
 988:	80 83       	st	Z, r24
	/* Normal Speed */
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_U2X);
 98a:	ab e2       	ldi	r26, 0x2B	; 43
 98c:	b0 e0       	ldi	r27, 0x00	; 0
 98e:	eb e2       	ldi	r30, 0x2B	; 43
 990:	f0 e0       	ldi	r31, 0x00	; 0
 992:	80 81       	ld	r24, Z
 994:	8d 7f       	andi	r24, 0xFD	; 253
 996:	8c 93       	st	X, r24
	/* Disable MPM */
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_MPCM);
 998:	ab e2       	ldi	r26, 0x2B	; 43
 99a:	b0 e0       	ldi	r27, 0x00	; 0
 99c:	eb e2       	ldi	r30, 0x2B	; 43
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	80 81       	ld	r24, Z
 9a2:	8e 7f       	andi	r24, 0xFE	; 254
 9a4:	8c 93       	st	X, r24
	/* Enable Tx,Rx */
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
 9a6:	aa e2       	ldi	r26, 0x2A	; 42
 9a8:	b0 e0       	ldi	r27, 0x00	; 0
 9aa:	ea e2       	ldi	r30, 0x2A	; 42
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	80 81       	ld	r24, Z
 9b0:	80 61       	ori	r24, 0x10	; 16
 9b2:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
 9b4:	aa e2       	ldi	r26, 0x2A	; 42
 9b6:	b0 e0       	ldi	r27, 0x00	; 0
 9b8:	ea e2       	ldi	r30, 0x2A	; 42
 9ba:	f0 e0       	ldi	r31, 0x00	; 0
 9bc:	80 81       	ld	r24, Z
 9be:	88 60       	ori	r24, 0x08	; 8
 9c0:	8c 93       	st	X, r24
	/* Select 8 bit Data */
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_UCSZ2);
 9c2:	aa e2       	ldi	r26, 0x2A	; 42
 9c4:	b0 e0       	ldi	r27, 0x00	; 0
 9c6:	ea e2       	ldi	r30, 0x2A	; 42
 9c8:	f0 e0       	ldi	r31, 0x00	; 0
 9ca:	80 81       	ld	r24, Z
 9cc:	8b 7f       	andi	r24, 0xFB	; 251
 9ce:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
 9d0:	89 81       	ldd	r24, Y+1	; 0x01
 9d2:	84 60       	ori	r24, 0x04	; 4
 9d4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
 9d6:	89 81       	ldd	r24, Y+1	; 0x01
 9d8:	82 60       	ori	r24, 0x02	; 2
 9da:	89 83       	std	Y+1, r24	; 0x01
	/* Select Asynch Mode */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
 9dc:	89 81       	ldd	r24, Y+1	; 0x01
 9de:	8f 7b       	andi	r24, 0xBF	; 191
 9e0:	89 83       	std	Y+1, r24	; 0x01
	/* No Parity Bit */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM1);
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	8f 7d       	andi	r24, 0xDF	; 223
 9e6:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
 9e8:	89 81       	ldd	r24, Y+1	; 0x01
 9ea:	8f 7e       	andi	r24, 0xEF	; 239
 9ec:	89 83       	std	Y+1, r24	; 0x01
	/* Enable 2 Stop Bits */
	SET_BIT(Local_u8UCSRCValue,UCSRC_USBS);
 9ee:	89 81       	ldd	r24, Y+1	; 0x01
 9f0:	88 60       	ori	r24, 0x08	; 8
 9f2:	89 83       	std	Y+1, r24	; 0x01
	/* Update UCSRC Reg */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
 9f4:	e0 e4       	ldi	r30, 0x40	; 64
 9f6:	f0 e0       	ldi	r31, 0x00	; 0
 9f8:	89 81       	ldd	r24, Y+1	; 0x01
 9fa:	80 83       	st	Z, r24
}
 9fc:	0f 90       	pop	r0
 9fe:	0f 90       	pop	r0
 a00:	0f 90       	pop	r0
 a02:	cf 91       	pop	r28
 a04:	df 91       	pop	r29
 a06:	08 95       	ret

00000a08 <UART_voidSendByte>:

void UART_voidSendByte(u8 Copy_u8DataByte)
{
 a08:	df 93       	push	r29
 a0a:	cf 93       	push	r28
 a0c:	0f 92       	push	r0
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	89 83       	std	Y+1, r24	; 0x01
	/* wait until the transmit register is empty */
	while(GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE) == 0);
 a14:	eb e2       	ldi	r30, 0x2B	; 43
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	80 81       	ld	r24, Z
 a1a:	82 95       	swap	r24
 a1c:	86 95       	lsr	r24
 a1e:	87 70       	andi	r24, 0x07	; 7
 a20:	88 2f       	mov	r24, r24
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	81 70       	andi	r24, 0x01	; 1
 a26:	90 70       	andi	r25, 0x00	; 0
 a28:	00 97       	sbiw	r24, 0x00	; 0
 a2a:	a1 f3       	breq	.-24     	; 0xa14 <UART_voidSendByte+0xc>
	/* Send Data Byte */
	UART_u8_UDR_REG = Copy_u8DataByte;
 a2c:	ec e2       	ldi	r30, 0x2C	; 44
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	89 81       	ldd	r24, Y+1	; 0x01
 a32:	80 83       	st	Z, r24
}
 a34:	0f 90       	pop	r0
 a36:	cf 91       	pop	r28
 a38:	df 91       	pop	r29
 a3a:	08 95       	ret

00000a3c <UART_u8ReceiveByte>:

u8   UART_u8ReceiveByte(u8 * Copy_pu8RecByte)
{
 a3c:	df 93       	push	r29
 a3e:	cf 93       	push	r28
 a40:	00 d0       	rcall	.+0      	; 0xa42 <UART_u8ReceiveByte+0x6>
 a42:	0f 92       	push	r0
 a44:	cd b7       	in	r28, 0x3d	; 61
 a46:	de b7       	in	r29, 0x3e	; 62
 a48:	9b 83       	std	Y+3, r25	; 0x03
 a4a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
 a4c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8RecByte != NULL)
 a4e:	8a 81       	ldd	r24, Y+2	; 0x02
 a50:	9b 81       	ldd	r25, Y+3	; 0x03
 a52:	00 97       	sbiw	r24, 0x00	; 0
 a54:	69 f0       	breq	.+26     	; 0xa70 <UART_u8ReceiveByte+0x34>
	{
		/* wait until the data is received */
		while(GET_BIT(UART_u8_UCSRA_REG,UCSRA_RXC) == 0);
 a56:	eb e2       	ldi	r30, 0x2B	; 43
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	80 81       	ld	r24, Z
 a5c:	88 23       	and	r24, r24
 a5e:	dc f7       	brge	.-10     	; 0xa56 <UART_u8ReceiveByte+0x1a>
		/* Read Data */
		*Copy_pu8RecByte = UART_u8_UDR_REG;
 a60:	ec e2       	ldi	r30, 0x2C	; 44
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	80 81       	ld	r24, Z
 a66:	ea 81       	ldd	r30, Y+2	; 0x02
 a68:	fb 81       	ldd	r31, Y+3	; 0x03
 a6a:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
 a70:	89 81       	ldd	r24, Y+1	; 0x01
}
 a72:	0f 90       	pop	r0
 a74:	0f 90       	pop	r0
 a76:	0f 90       	pop	r0
 a78:	cf 91       	pop	r28
 a7a:	df 91       	pop	r29
 a7c:	08 95       	ret

00000a7e <main>:

#include "DIO_interface.h"
#include "UART_interface.h"

int main(void)
{
 a7e:	df 93       	push	r29
 a80:	cf 93       	push	r28
 a82:	0f 92       	push	r0
 a84:	cd b7       	in	r28, 0x3d	; 61
 a86:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Data;
	DIO_voidInit();
 a88:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidInit>
	UART_voidInit();
 a8c:	0e 94 ae 04 	call	0x95c	; 0x95c <UART_voidInit>

	while(1)
	{
		UART_u8ReceiveByte(&Local_u8Data);
 a90:	ce 01       	movw	r24, r28
 a92:	01 96       	adiw	r24, 0x01	; 1
 a94:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_u8ReceiveByte>
		if(Local_u8Data == 'a')
 a98:	89 81       	ldd	r24, Y+1	; 0x01
 a9a:	81 36       	cpi	r24, 0x61	; 97
 a9c:	31 f4       	brne	.+12     	; 0xaaa <main+0x2c>
		{
			DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	60 e0       	ldi	r22, 0x00	; 0
 aa2:	41 e0       	ldi	r20, 0x01	; 1
 aa4:	0e 94 82 01 	call	0x304	; 0x304 <DIO_u8SetPinValue>
 aa8:	f3 cf       	rjmp	.-26     	; 0xa90 <main+0x12>
		}
		else if(Local_u8Data == 'b')
 aaa:	89 81       	ldd	r24, Y+1	; 0x01
 aac:	82 36       	cpi	r24, 0x62	; 98
 aae:	81 f7       	brne	.-32     	; 0xa90 <main+0x12>
		{
			DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	60 e0       	ldi	r22, 0x00	; 0
 ab4:	40 e0       	ldi	r20, 0x00	; 0
 ab6:	0e 94 82 01 	call	0x304	; 0x304 <DIO_u8SetPinValue>
 aba:	ea cf       	rjmp	.-44     	; 0xa90 <main+0x12>

00000abc <_exit>:
 abc:	f8 94       	cli

00000abe <__stop_program>:
 abe:	ff cf       	rjmp	.-2      	; 0xabe <__stop_program>
