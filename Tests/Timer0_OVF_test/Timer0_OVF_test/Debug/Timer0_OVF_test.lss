
Timer0_OVF_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b36  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  00000baa  2**0
                  ALLOC
  2 .stab         00000e88  00000000  00000000  00000bac  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005e6  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 05 	call	0xade	; 0xade <main>
  74:	0c 94 99 05 	jmp	0xb32	; 0xb32 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
  84:	ea e3       	ldi	r30, 0x3A	; 58
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	10 82       	st	Z, r1

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
  92:	e4 e3       	ldi	r30, 0x34	; 52
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
  98:	e1 e3       	ldi	r30, 0x31	; 49
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
  9e:	eb e3       	ldi	r30, 0x3B	; 59
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
  a4:	e8 e3       	ldi	r30, 0x38	; 56
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
  aa:	e5 e3       	ldi	r30, 0x35	; 53
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
  b0:	e2 e3       	ldi	r30, 0x32	; 50
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	10 82       	st	Z, r1

}
  b6:	cf 91       	pop	r28
  b8:	df 91       	pop	r29
  ba:	08 95       	ret

000000bc <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
  bc:	df 93       	push	r29
  be:	cf 93       	push	r28
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	2e 97       	sbiw	r28, 0x0e	; 14
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	8a 83       	std	Y+2, r24	; 0x02
  d2:	6b 83       	std	Y+3, r22	; 0x03
  d4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	84 30       	cpi	r24, 0x04	; 4
  de:	08 f0       	brcs	.+2      	; 0xe2 <DIO_u8SetPinDirection+0x26>
  e0:	0d c1       	rjmp	.+538    	; 0x2fc <DIO_u8SetPinDirection+0x240>
  e2:	8b 81       	ldd	r24, Y+3	; 0x03
  e4:	88 30       	cpi	r24, 0x08	; 8
  e6:	08 f0       	brcs	.+2      	; 0xea <DIO_u8SetPinDirection+0x2e>
  e8:	09 c1       	rjmp	.+530    	; 0x2fc <DIO_u8SetPinDirection+0x240>
  ea:	8c 81       	ldd	r24, Y+4	; 0x04
  ec:	88 23       	and	r24, r24
  ee:	21 f0       	breq	.+8      	; 0xf8 <DIO_u8SetPinDirection+0x3c>
  f0:	8c 81       	ldd	r24, Y+4	; 0x04
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	09 f0       	breq	.+2      	; 0xf8 <DIO_u8SetPinDirection+0x3c>
  f6:	02 c1       	rjmp	.+516    	; 0x2fc <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
  f8:	8a 81       	ldd	r24, Y+2	; 0x02
  fa:	28 2f       	mov	r18, r24
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	3e 87       	std	Y+14, r19	; 0x0e
 100:	2d 87       	std	Y+13, r18	; 0x0d
 102:	8d 85       	ldd	r24, Y+13	; 0x0d
 104:	9e 85       	ldd	r25, Y+14	; 0x0e
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	91 05       	cpc	r25, r1
 10a:	09 f4       	brne	.+2      	; 0x10e <DIO_u8SetPinDirection+0x52>
 10c:	4f c0       	rjmp	.+158    	; 0x1ac <DIO_u8SetPinDirection+0xf0>
 10e:	2d 85       	ldd	r18, Y+13	; 0x0d
 110:	3e 85       	ldd	r19, Y+14	; 0x0e
 112:	22 30       	cpi	r18, 0x02	; 2
 114:	31 05       	cpc	r19, r1
 116:	2c f4       	brge	.+10     	; 0x122 <DIO_u8SetPinDirection+0x66>
 118:	8d 85       	ldd	r24, Y+13	; 0x0d
 11a:	9e 85       	ldd	r25, Y+14	; 0x0e
 11c:	00 97       	sbiw	r24, 0x00	; 0
 11e:	71 f0       	breq	.+28     	; 0x13c <DIO_u8SetPinDirection+0x80>
 120:	ee c0       	rjmp	.+476    	; 0x2fe <DIO_u8SetPinDirection+0x242>
 122:	2d 85       	ldd	r18, Y+13	; 0x0d
 124:	3e 85       	ldd	r19, Y+14	; 0x0e
 126:	22 30       	cpi	r18, 0x02	; 2
 128:	31 05       	cpc	r19, r1
 12a:	09 f4       	brne	.+2      	; 0x12e <DIO_u8SetPinDirection+0x72>
 12c:	77 c0       	rjmp	.+238    	; 0x21c <DIO_u8SetPinDirection+0x160>
 12e:	8d 85       	ldd	r24, Y+13	; 0x0d
 130:	9e 85       	ldd	r25, Y+14	; 0x0e
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	91 05       	cpc	r25, r1
 136:	09 f4       	brne	.+2      	; 0x13a <DIO_u8SetPinDirection+0x7e>
 138:	a9 c0       	rjmp	.+338    	; 0x28c <DIO_u8SetPinDirection+0x1d0>
 13a:	e1 c0       	rjmp	.+450    	; 0x2fe <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
 13c:	8b 81       	ldd	r24, Y+3	; 0x03
 13e:	28 2f       	mov	r18, r24
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	3c 87       	std	Y+12, r19	; 0x0c
 144:	2b 87       	std	Y+11, r18	; 0x0b
 146:	8b 85       	ldd	r24, Y+11	; 0x0b
 148:	9c 85       	ldd	r25, Y+12	; 0x0c
 14a:	00 97       	sbiw	r24, 0x00	; 0
 14c:	31 f0       	breq	.+12     	; 0x15a <DIO_u8SetPinDirection+0x9e>
 14e:	2b 85       	ldd	r18, Y+11	; 0x0b
 150:	3c 85       	ldd	r19, Y+12	; 0x0c
 152:	21 30       	cpi	r18, 0x01	; 1
 154:	31 05       	cpc	r19, r1
 156:	b1 f0       	breq	.+44     	; 0x184 <DIO_u8SetPinDirection+0xc8>
 158:	d2 c0       	rjmp	.+420    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 15a:	aa e3       	ldi	r26, 0x3A	; 58
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	ea e3       	ldi	r30, 0x3A	; 58
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	8b 81       	ldd	r24, Y+3	; 0x03
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 2e       	mov	r0, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_u8SetPinDirection+0xbc>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_u8SetPinDirection+0xb8>
 17c:	80 95       	com	r24
 17e:	84 23       	and	r24, r20
 180:	8c 93       	st	X, r24
 182:	bd c0       	rjmp	.+378    	; 0x2fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 184:	aa e3       	ldi	r26, 0x3A	; 58
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	ea e3       	ldi	r30, 0x3A	; 58
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	48 2f       	mov	r20, r24
 190:	8b 81       	ldd	r24, Y+3	; 0x03
 192:	28 2f       	mov	r18, r24
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 2e       	mov	r0, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_u8SetPinDirection+0xe6>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_u8SetPinDirection+0xe2>
 1a6:	84 2b       	or	r24, r20
 1a8:	8c 93       	st	X, r24
 1aa:	a9 c0       	rjmp	.+338    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
 1ac:	8b 81       	ldd	r24, Y+3	; 0x03
 1ae:	28 2f       	mov	r18, r24
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	3a 87       	std	Y+10, r19	; 0x0a
 1b4:	29 87       	std	Y+9, r18	; 0x09
 1b6:	89 85       	ldd	r24, Y+9	; 0x09
 1b8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ba:	00 97       	sbiw	r24, 0x00	; 0
 1bc:	31 f0       	breq	.+12     	; 0x1ca <DIO_u8SetPinDirection+0x10e>
 1be:	29 85       	ldd	r18, Y+9	; 0x09
 1c0:	3a 85       	ldd	r19, Y+10	; 0x0a
 1c2:	21 30       	cpi	r18, 0x01	; 1
 1c4:	31 05       	cpc	r19, r1
 1c6:	b1 f0       	breq	.+44     	; 0x1f4 <DIO_u8SetPinDirection+0x138>
 1c8:	9a c0       	rjmp	.+308    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 1ca:	a7 e3       	ldi	r26, 0x37	; 55
 1cc:	b0 e0       	ldi	r27, 0x00	; 0
 1ce:	e7 e3       	ldi	r30, 0x37	; 55
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	48 2f       	mov	r20, r24
 1d6:	8b 81       	ldd	r24, Y+3	; 0x03
 1d8:	28 2f       	mov	r18, r24
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	02 2e       	mov	r0, r18
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_u8SetPinDirection+0x12c>
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	0a 94       	dec	r0
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_u8SetPinDirection+0x128>
 1ec:	80 95       	com	r24
 1ee:	84 23       	and	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	85 c0       	rjmp	.+266    	; 0x2fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 1f4:	a7 e3       	ldi	r26, 0x37	; 55
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	e7 e3       	ldi	r30, 0x37	; 55
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8b 81       	ldd	r24, Y+3	; 0x03
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_u8SetPinDirection+0x156>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_u8SetPinDirection+0x152>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	71 c0       	rjmp	.+226    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	28 2f       	mov	r18, r24
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	38 87       	std	Y+8, r19	; 0x08
 224:	2f 83       	std	Y+7, r18	; 0x07
 226:	8f 81       	ldd	r24, Y+7	; 0x07
 228:	98 85       	ldd	r25, Y+8	; 0x08
 22a:	00 97       	sbiw	r24, 0x00	; 0
 22c:	31 f0       	breq	.+12     	; 0x23a <DIO_u8SetPinDirection+0x17e>
 22e:	2f 81       	ldd	r18, Y+7	; 0x07
 230:	38 85       	ldd	r19, Y+8	; 0x08
 232:	21 30       	cpi	r18, 0x01	; 1
 234:	31 05       	cpc	r19, r1
 236:	b1 f0       	breq	.+44     	; 0x264 <DIO_u8SetPinDirection+0x1a8>
 238:	62 c0       	rjmp	.+196    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 23a:	a4 e3       	ldi	r26, 0x34	; 52
 23c:	b0 e0       	ldi	r27, 0x00	; 0
 23e:	e4 e3       	ldi	r30, 0x34	; 52
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	48 2f       	mov	r20, r24
 246:	8b 81       	ldd	r24, Y+3	; 0x03
 248:	28 2f       	mov	r18, r24
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 2e       	mov	r0, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_u8SetPinDirection+0x19c>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	0a 94       	dec	r0
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_u8SetPinDirection+0x198>
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	8c 93       	st	X, r24
 262:	4d c0       	rjmp	.+154    	; 0x2fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 264:	a4 e3       	ldi	r26, 0x34	; 52
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	e4 e3       	ldi	r30, 0x34	; 52
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	48 2f       	mov	r20, r24
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	28 2f       	mov	r18, r24
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 2e       	mov	r0, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_u8SetPinDirection+0x1c6>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_u8SetPinDirection+0x1c2>
 286:	84 2b       	or	r24, r20
 288:	8c 93       	st	X, r24
 28a:	39 c0       	rjmp	.+114    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
 28c:	8b 81       	ldd	r24, Y+3	; 0x03
 28e:	28 2f       	mov	r18, r24
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	3e 83       	std	Y+6, r19	; 0x06
 294:	2d 83       	std	Y+5, r18	; 0x05
 296:	8d 81       	ldd	r24, Y+5	; 0x05
 298:	9e 81       	ldd	r25, Y+6	; 0x06
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	31 f0       	breq	.+12     	; 0x2aa <DIO_u8SetPinDirection+0x1ee>
 29e:	2d 81       	ldd	r18, Y+5	; 0x05
 2a0:	3e 81       	ldd	r19, Y+6	; 0x06
 2a2:	21 30       	cpi	r18, 0x01	; 1
 2a4:	31 05       	cpc	r19, r1
 2a6:	b1 f0       	breq	.+44     	; 0x2d4 <DIO_u8SetPinDirection+0x218>
 2a8:	2a c0       	rjmp	.+84     	; 0x2fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 2aa:	a1 e3       	ldi	r26, 0x31	; 49
 2ac:	b0 e0       	ldi	r27, 0x00	; 0
 2ae:	e1 e3       	ldi	r30, 0x31	; 49
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	48 2f       	mov	r20, r24
 2b6:	8b 81       	ldd	r24, Y+3	; 0x03
 2b8:	28 2f       	mov	r18, r24
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 2e       	mov	r0, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8SetPinDirection+0x20c>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8SetPinDirection+0x208>
 2cc:	80 95       	com	r24
 2ce:	84 23       	and	r24, r20
 2d0:	8c 93       	st	X, r24
 2d2:	15 c0       	rjmp	.+42     	; 0x2fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 2d4:	a1 e3       	ldi	r26, 0x31	; 49
 2d6:	b0 e0       	ldi	r27, 0x00	; 0
 2d8:	e1 e3       	ldi	r30, 0x31	; 49
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	48 2f       	mov	r20, r24
 2e0:	8b 81       	ldd	r24, Y+3	; 0x03
 2e2:	28 2f       	mov	r18, r24
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 2e       	mov	r0, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8SetPinDirection+0x236>
 2ee:	88 0f       	add	r24, r24
 2f0:	99 1f       	adc	r25, r25
 2f2:	0a 94       	dec	r0
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8SetPinDirection+0x232>
 2f6:	84 2b       	or	r24, r20
 2f8:	8c 93       	st	X, r24
 2fa:	01 c0       	rjmp	.+2      	; 0x2fe <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 2fc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 2fe:	89 81       	ldd	r24, Y+1	; 0x01
}
 300:	2e 96       	adiw	r28, 0x0e	; 14
 302:	0f b6       	in	r0, 0x3f	; 63
 304:	f8 94       	cli
 306:	de bf       	out	0x3e, r29	; 62
 308:	0f be       	out	0x3f, r0	; 63
 30a:	cd bf       	out	0x3d, r28	; 61
 30c:	cf 91       	pop	r28
 30e:	df 91       	pop	r29
 310:	08 95       	ret

00000312 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
 312:	df 93       	push	r29
 314:	cf 93       	push	r28
 316:	cd b7       	in	r28, 0x3d	; 61
 318:	de b7       	in	r29, 0x3e	; 62
 31a:	2e 97       	sbiw	r28, 0x0e	; 14
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	f8 94       	cli
 320:	de bf       	out	0x3e, r29	; 62
 322:	0f be       	out	0x3f, r0	; 63
 324:	cd bf       	out	0x3d, r28	; 61
 326:	8a 83       	std	Y+2, r24	; 0x02
 328:	6b 83       	std	Y+3, r22	; 0x03
 32a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	08 f0       	brcs	.+2      	; 0x338 <DIO_u8SetPinValue+0x26>
 336:	0c c1       	rjmp	.+536    	; 0x550 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
 338:	8a 81       	ldd	r24, Y+2	; 0x02
 33a:	28 2f       	mov	r18, r24
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	3e 87       	std	Y+14, r19	; 0x0e
 340:	2d 87       	std	Y+13, r18	; 0x0d
 342:	8d 85       	ldd	r24, Y+13	; 0x0d
 344:	9e 85       	ldd	r25, Y+14	; 0x0e
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	91 05       	cpc	r25, r1
 34a:	09 f4       	brne	.+2      	; 0x34e <DIO_u8SetPinValue+0x3c>
 34c:	51 c0       	rjmp	.+162    	; 0x3f0 <DIO_u8SetPinValue+0xde>
 34e:	2d 85       	ldd	r18, Y+13	; 0x0d
 350:	3e 85       	ldd	r19, Y+14	; 0x0e
 352:	22 30       	cpi	r18, 0x02	; 2
 354:	31 05       	cpc	r19, r1
 356:	2c f4       	brge	.+10     	; 0x362 <DIO_u8SetPinValue+0x50>
 358:	8d 85       	ldd	r24, Y+13	; 0x0d
 35a:	9e 85       	ldd	r25, Y+14	; 0x0e
 35c:	00 97       	sbiw	r24, 0x00	; 0
 35e:	71 f0       	breq	.+28     	; 0x37c <DIO_u8SetPinValue+0x6a>
 360:	f5 c0       	rjmp	.+490    	; 0x54c <DIO_u8SetPinValue+0x23a>
 362:	2d 85       	ldd	r18, Y+13	; 0x0d
 364:	3e 85       	ldd	r19, Y+14	; 0x0e
 366:	22 30       	cpi	r18, 0x02	; 2
 368:	31 05       	cpc	r19, r1
 36a:	09 f4       	brne	.+2      	; 0x36e <DIO_u8SetPinValue+0x5c>
 36c:	7b c0       	rjmp	.+246    	; 0x464 <DIO_u8SetPinValue+0x152>
 36e:	8d 85       	ldd	r24, Y+13	; 0x0d
 370:	9e 85       	ldd	r25, Y+14	; 0x0e
 372:	83 30       	cpi	r24, 0x03	; 3
 374:	91 05       	cpc	r25, r1
 376:	09 f4       	brne	.+2      	; 0x37a <DIO_u8SetPinValue+0x68>
 378:	af c0       	rjmp	.+350    	; 0x4d8 <DIO_u8SetPinValue+0x1c6>
 37a:	e8 c0       	rjmp	.+464    	; 0x54c <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
 37c:	8c 81       	ldd	r24, Y+4	; 0x04
 37e:	28 2f       	mov	r18, r24
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	3c 87       	std	Y+12, r19	; 0x0c
 384:	2b 87       	std	Y+11, r18	; 0x0b
 386:	8b 85       	ldd	r24, Y+11	; 0x0b
 388:	9c 85       	ldd	r25, Y+12	; 0x0c
 38a:	00 97       	sbiw	r24, 0x00	; 0
 38c:	31 f0       	breq	.+12     	; 0x39a <DIO_u8SetPinValue+0x88>
 38e:	2b 85       	ldd	r18, Y+11	; 0x0b
 390:	3c 85       	ldd	r19, Y+12	; 0x0c
 392:	21 30       	cpi	r18, 0x01	; 1
 394:	31 05       	cpc	r19, r1
 396:	b1 f0       	breq	.+44     	; 0x3c4 <DIO_u8SetPinValue+0xb2>
 398:	29 c0       	rjmp	.+82     	; 0x3ec <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 39a:	ab e3       	ldi	r26, 0x3B	; 59
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	eb e3       	ldi	r30, 0x3B	; 59
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	48 2f       	mov	r20, r24
 3a6:	8b 81       	ldd	r24, Y+3	; 0x03
 3a8:	28 2f       	mov	r18, r24
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	02 2e       	mov	r0, r18
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8SetPinValue+0xa6>
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	0a 94       	dec	r0
 3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8SetPinValue+0xa2>
 3bc:	80 95       	com	r24
 3be:	84 23       	and	r24, r20
 3c0:	8c 93       	st	X, r24
 3c2:	c7 c0       	rjmp	.+398    	; 0x552 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 3c4:	ab e3       	ldi	r26, 0x3B	; 59
 3c6:	b0 e0       	ldi	r27, 0x00	; 0
 3c8:	eb e3       	ldi	r30, 0x3B	; 59
 3ca:	f0 e0       	ldi	r31, 0x00	; 0
 3cc:	80 81       	ld	r24, Z
 3ce:	48 2f       	mov	r20, r24
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	28 2f       	mov	r18, r24
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 2e       	mov	r0, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_u8SetPinValue+0xd0>
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	0a 94       	dec	r0
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_u8SetPinValue+0xcc>
 3e6:	84 2b       	or	r24, r20
 3e8:	8c 93       	st	X, r24
 3ea:	b3 c0       	rjmp	.+358    	; 0x552 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 3ec:	19 82       	std	Y+1, r1	; 0x01
 3ee:	b1 c0       	rjmp	.+354    	; 0x552 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
 3f0:	8c 81       	ldd	r24, Y+4	; 0x04
 3f2:	28 2f       	mov	r18, r24
 3f4:	30 e0       	ldi	r19, 0x00	; 0
 3f6:	3a 87       	std	Y+10, r19	; 0x0a
 3f8:	29 87       	std	Y+9, r18	; 0x09
 3fa:	89 85       	ldd	r24, Y+9	; 0x09
 3fc:	9a 85       	ldd	r25, Y+10	; 0x0a
 3fe:	00 97       	sbiw	r24, 0x00	; 0
 400:	31 f0       	breq	.+12     	; 0x40e <DIO_u8SetPinValue+0xfc>
 402:	29 85       	ldd	r18, Y+9	; 0x09
 404:	3a 85       	ldd	r19, Y+10	; 0x0a
 406:	21 30       	cpi	r18, 0x01	; 1
 408:	31 05       	cpc	r19, r1
 40a:	b1 f0       	breq	.+44     	; 0x438 <DIO_u8SetPinValue+0x126>
 40c:	29 c0       	rjmp	.+82     	; 0x460 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 40e:	a8 e3       	ldi	r26, 0x38	; 56
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	e8 e3       	ldi	r30, 0x38	; 56
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	48 2f       	mov	r20, r24
 41a:	8b 81       	ldd	r24, Y+3	; 0x03
 41c:	28 2f       	mov	r18, r24
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	02 2e       	mov	r0, r18
 426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_u8SetPinValue+0x11a>
 428:	88 0f       	add	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	0a 94       	dec	r0
 42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_u8SetPinValue+0x116>
 430:	80 95       	com	r24
 432:	84 23       	and	r24, r20
 434:	8c 93       	st	X, r24
 436:	8d c0       	rjmp	.+282    	; 0x552 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 438:	a8 e3       	ldi	r26, 0x38	; 56
 43a:	b0 e0       	ldi	r27, 0x00	; 0
 43c:	e8 e3       	ldi	r30, 0x38	; 56
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	80 81       	ld	r24, Z
 442:	48 2f       	mov	r20, r24
 444:	8b 81       	ldd	r24, Y+3	; 0x03
 446:	28 2f       	mov	r18, r24
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	02 2e       	mov	r0, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_u8SetPinValue+0x144>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	0a 94       	dec	r0
 458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_u8SetPinValue+0x140>
 45a:	84 2b       	or	r24, r20
 45c:	8c 93       	st	X, r24
 45e:	79 c0       	rjmp	.+242    	; 0x552 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 460:	19 82       	std	Y+1, r1	; 0x01
 462:	77 c0       	rjmp	.+238    	; 0x552 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
 464:	8c 81       	ldd	r24, Y+4	; 0x04
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	38 87       	std	Y+8, r19	; 0x08
 46c:	2f 83       	std	Y+7, r18	; 0x07
 46e:	8f 81       	ldd	r24, Y+7	; 0x07
 470:	98 85       	ldd	r25, Y+8	; 0x08
 472:	00 97       	sbiw	r24, 0x00	; 0
 474:	31 f0       	breq	.+12     	; 0x482 <DIO_u8SetPinValue+0x170>
 476:	2f 81       	ldd	r18, Y+7	; 0x07
 478:	38 85       	ldd	r19, Y+8	; 0x08
 47a:	21 30       	cpi	r18, 0x01	; 1
 47c:	31 05       	cpc	r19, r1
 47e:	b1 f0       	breq	.+44     	; 0x4ac <DIO_u8SetPinValue+0x19a>
 480:	29 c0       	rjmp	.+82     	; 0x4d4 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 482:	a5 e3       	ldi	r26, 0x35	; 53
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e5 e3       	ldi	r30, 0x35	; 53
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 2e       	mov	r0, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8SetPinValue+0x18e>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_u8SetPinValue+0x18a>
 4a4:	80 95       	com	r24
 4a6:	84 23       	and	r24, r20
 4a8:	8c 93       	st	X, r24
 4aa:	53 c0       	rjmp	.+166    	; 0x552 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 4ac:	a5 e3       	ldi	r26, 0x35	; 53
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	e5 e3       	ldi	r30, 0x35	; 53
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	48 2f       	mov	r20, r24
 4b8:	8b 81       	ldd	r24, Y+3	; 0x03
 4ba:	28 2f       	mov	r18, r24
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	02 2e       	mov	r0, r18
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_u8SetPinValue+0x1b8>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	0a 94       	dec	r0
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_u8SetPinValue+0x1b4>
 4ce:	84 2b       	or	r24, r20
 4d0:	8c 93       	st	X, r24
 4d2:	3f c0       	rjmp	.+126    	; 0x552 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 4d4:	19 82       	std	Y+1, r1	; 0x01
 4d6:	3d c0       	rjmp	.+122    	; 0x552 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
 4d8:	8c 81       	ldd	r24, Y+4	; 0x04
 4da:	28 2f       	mov	r18, r24
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	3e 83       	std	Y+6, r19	; 0x06
 4e0:	2d 83       	std	Y+5, r18	; 0x05
 4e2:	8d 81       	ldd	r24, Y+5	; 0x05
 4e4:	9e 81       	ldd	r25, Y+6	; 0x06
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	31 f0       	breq	.+12     	; 0x4f6 <DIO_u8SetPinValue+0x1e4>
 4ea:	2d 81       	ldd	r18, Y+5	; 0x05
 4ec:	3e 81       	ldd	r19, Y+6	; 0x06
 4ee:	21 30       	cpi	r18, 0x01	; 1
 4f0:	31 05       	cpc	r19, r1
 4f2:	b1 f0       	breq	.+44     	; 0x520 <DIO_u8SetPinValue+0x20e>
 4f4:	29 c0       	rjmp	.+82     	; 0x548 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 4f6:	a2 e3       	ldi	r26, 0x32	; 50
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e2 e3       	ldi	r30, 0x32	; 50
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	48 2f       	mov	r20, r24
 502:	8b 81       	ldd	r24, Y+3	; 0x03
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 2e       	mov	r0, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_u8SetPinValue+0x202>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_u8SetPinValue+0x1fe>
 518:	80 95       	com	r24
 51a:	84 23       	and	r24, r20
 51c:	8c 93       	st	X, r24
 51e:	19 c0       	rjmp	.+50     	; 0x552 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 520:	a2 e3       	ldi	r26, 0x32	; 50
 522:	b0 e0       	ldi	r27, 0x00	; 0
 524:	e2 e3       	ldi	r30, 0x32	; 50
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	80 81       	ld	r24, Z
 52a:	48 2f       	mov	r20, r24
 52c:	8b 81       	ldd	r24, Y+3	; 0x03
 52e:	28 2f       	mov	r18, r24
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 2e       	mov	r0, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_u8SetPinValue+0x22c>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_u8SetPinValue+0x228>
 542:	84 2b       	or	r24, r20
 544:	8c 93       	st	X, r24
 546:	05 c0       	rjmp	.+10     	; 0x552 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 548:	19 82       	std	Y+1, r1	; 0x01
 54a:	03 c0       	rjmp	.+6      	; 0x552 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 54c:	19 82       	std	Y+1, r1	; 0x01
 54e:	01 c0       	rjmp	.+2      	; 0x552 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 550:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 552:	89 81       	ldd	r24, Y+1	; 0x01
}
 554:	2e 96       	adiw	r28, 0x0e	; 14
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	cf 91       	pop	r28
 562:	df 91       	pop	r29
 564:	08 95       	ret

00000566 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
 566:	df 93       	push	r29
 568:	cf 93       	push	r28
 56a:	cd b7       	in	r28, 0x3d	; 61
 56c:	de b7       	in	r29, 0x3e	; 62
 56e:	28 97       	sbiw	r28, 0x08	; 8
 570:	0f b6       	in	r0, 0x3f	; 63
 572:	f8 94       	cli
 574:	de bf       	out	0x3e, r29	; 62
 576:	0f be       	out	0x3f, r0	; 63
 578:	cd bf       	out	0x3d, r28	; 61
 57a:	8b 83       	std	Y+3, r24	; 0x03
 57c:	6c 83       	std	Y+4, r22	; 0x04
 57e:	5e 83       	std	Y+6, r21	; 0x06
 580:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
 586:	8b 81       	ldd	r24, Y+3	; 0x03
 588:	84 30       	cpi	r24, 0x04	; 4
 58a:	08 f0       	brcs	.+2      	; 0x58e <DIO_u8GetPinValue+0x28>
 58c:	a1 c0       	rjmp	.+322    	; 0x6d0 <DIO_u8GetPinValue+0x16a>
 58e:	8c 81       	ldd	r24, Y+4	; 0x04
 590:	88 30       	cpi	r24, 0x08	; 8
 592:	08 f0       	brcs	.+2      	; 0x596 <DIO_u8GetPinValue+0x30>
 594:	9d c0       	rjmp	.+314    	; 0x6d0 <DIO_u8GetPinValue+0x16a>
 596:	8d 81       	ldd	r24, Y+5	; 0x05
 598:	9e 81       	ldd	r25, Y+6	; 0x06
 59a:	00 97       	sbiw	r24, 0x00	; 0
 59c:	09 f4       	brne	.+2      	; 0x5a0 <DIO_u8GetPinValue+0x3a>
 59e:	98 c0       	rjmp	.+304    	; 0x6d0 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	28 2f       	mov	r18, r24
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	38 87       	std	Y+8, r19	; 0x08
 5a8:	2f 83       	std	Y+7, r18	; 0x07
 5aa:	4f 81       	ldd	r20, Y+7	; 0x07
 5ac:	58 85       	ldd	r21, Y+8	; 0x08
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	51 05       	cpc	r21, r1
 5b2:	a9 f1       	breq	.+106    	; 0x61e <DIO_u8GetPinValue+0xb8>
 5b4:	8f 81       	ldd	r24, Y+7	; 0x07
 5b6:	98 85       	ldd	r25, Y+8	; 0x08
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	91 05       	cpc	r25, r1
 5bc:	34 f4       	brge	.+12     	; 0x5ca <DIO_u8GetPinValue+0x64>
 5be:	2f 81       	ldd	r18, Y+7	; 0x07
 5c0:	38 85       	ldd	r19, Y+8	; 0x08
 5c2:	21 15       	cp	r18, r1
 5c4:	31 05       	cpc	r19, r1
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <DIO_u8GetPinValue+0x7e>
 5c8:	81 c0       	rjmp	.+258    	; 0x6cc <DIO_u8GetPinValue+0x166>
 5ca:	4f 81       	ldd	r20, Y+7	; 0x07
 5cc:	58 85       	ldd	r21, Y+8	; 0x08
 5ce:	42 30       	cpi	r20, 0x02	; 2
 5d0:	51 05       	cpc	r21, r1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <DIO_u8GetPinValue+0x70>
 5d4:	41 c0       	rjmp	.+130    	; 0x658 <DIO_u8GetPinValue+0xf2>
 5d6:	8f 81       	ldd	r24, Y+7	; 0x07
 5d8:	98 85       	ldd	r25, Y+8	; 0x08
 5da:	83 30       	cpi	r24, 0x03	; 3
 5dc:	91 05       	cpc	r25, r1
 5de:	09 f4       	brne	.+2      	; 0x5e2 <DIO_u8GetPinValue+0x7c>
 5e0:	58 c0       	rjmp	.+176    	; 0x692 <DIO_u8GetPinValue+0x12c>
 5e2:	74 c0       	rjmp	.+232    	; 0x6cc <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
 5e4:	e9 e3       	ldi	r30, 0x39	; 57
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	28 2f       	mov	r18, r24
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	8c 81       	ldd	r24, Y+4	; 0x04
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	a9 01       	movw	r20, r18
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_u8GetPinValue+0x96>
 5f8:	55 95       	asr	r21
 5fa:	47 95       	ror	r20
 5fc:	8a 95       	dec	r24
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_u8GetPinValue+0x92>
 600:	ca 01       	movw	r24, r20
 602:	81 70       	andi	r24, 0x01	; 1
 604:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 606:	89 81       	ldd	r24, Y+1	; 0x01
 608:	88 23       	and	r24, r24
 60a:	21 f4       	brne	.+8      	; 0x614 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 60c:	ed 81       	ldd	r30, Y+5	; 0x05
 60e:	fe 81       	ldd	r31, Y+6	; 0x06
 610:	10 82       	st	Z, r1
 612:	5f c0       	rjmp	.+190    	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 614:	ed 81       	ldd	r30, Y+5	; 0x05
 616:	fe 81       	ldd	r31, Y+6	; 0x06
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 83       	st	Z, r24
 61c:	5a c0       	rjmp	.+180    	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
 61e:	e6 e3       	ldi	r30, 0x36	; 54
 620:	f0 e0       	ldi	r31, 0x00	; 0
 622:	80 81       	ld	r24, Z
 624:	28 2f       	mov	r18, r24
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	8c 81       	ldd	r24, Y+4	; 0x04
 62a:	88 2f       	mov	r24, r24
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	a9 01       	movw	r20, r18
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_u8GetPinValue+0xd0>
 632:	55 95       	asr	r21
 634:	47 95       	ror	r20
 636:	8a 95       	dec	r24
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_u8GetPinValue+0xcc>
 63a:	ca 01       	movw	r24, r20
 63c:	81 70       	andi	r24, 0x01	; 1
 63e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	88 23       	and	r24, r24
 644:	21 f4       	brne	.+8      	; 0x64e <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 646:	ed 81       	ldd	r30, Y+5	; 0x05
 648:	fe 81       	ldd	r31, Y+6	; 0x06
 64a:	10 82       	st	Z, r1
 64c:	42 c0       	rjmp	.+132    	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 64e:	ed 81       	ldd	r30, Y+5	; 0x05
 650:	fe 81       	ldd	r31, Y+6	; 0x06
 652:	81 e0       	ldi	r24, 0x01	; 1
 654:	80 83       	st	Z, r24
 656:	3d c0       	rjmp	.+122    	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
 658:	e3 e3       	ldi	r30, 0x33	; 51
 65a:	f0 e0       	ldi	r31, 0x00	; 0
 65c:	80 81       	ld	r24, Z
 65e:	28 2f       	mov	r18, r24
 660:	30 e0       	ldi	r19, 0x00	; 0
 662:	8c 81       	ldd	r24, Y+4	; 0x04
 664:	88 2f       	mov	r24, r24
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	a9 01       	movw	r20, r18
 66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_u8GetPinValue+0x10a>
 66c:	55 95       	asr	r21
 66e:	47 95       	ror	r20
 670:	8a 95       	dec	r24
 672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_u8GetPinValue+0x106>
 674:	ca 01       	movw	r24, r20
 676:	81 70       	andi	r24, 0x01	; 1
 678:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 67a:	89 81       	ldd	r24, Y+1	; 0x01
 67c:	88 23       	and	r24, r24
 67e:	21 f4       	brne	.+8      	; 0x688 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 680:	ed 81       	ldd	r30, Y+5	; 0x05
 682:	fe 81       	ldd	r31, Y+6	; 0x06
 684:	10 82       	st	Z, r1
 686:	25 c0       	rjmp	.+74     	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 688:	ed 81       	ldd	r30, Y+5	; 0x05
 68a:	fe 81       	ldd	r31, Y+6	; 0x06
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	80 83       	st	Z, r24
 690:	20 c0       	rjmp	.+64     	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
 692:	e0 e3       	ldi	r30, 0x30	; 48
 694:	f0 e0       	ldi	r31, 0x00	; 0
 696:	80 81       	ld	r24, Z
 698:	28 2f       	mov	r18, r24
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	8c 81       	ldd	r24, Y+4	; 0x04
 69e:	88 2f       	mov	r24, r24
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	a9 01       	movw	r20, r18
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_u8GetPinValue+0x144>
 6a6:	55 95       	asr	r21
 6a8:	47 95       	ror	r20
 6aa:	8a 95       	dec	r24
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_u8GetPinValue+0x140>
 6ae:	ca 01       	movw	r24, r20
 6b0:	81 70       	andi	r24, 0x01	; 1
 6b2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 6b4:	89 81       	ldd	r24, Y+1	; 0x01
 6b6:	88 23       	and	r24, r24
 6b8:	21 f4       	brne	.+8      	; 0x6c2 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 6ba:	ed 81       	ldd	r30, Y+5	; 0x05
 6bc:	fe 81       	ldd	r31, Y+6	; 0x06
 6be:	10 82       	st	Z, r1
 6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 6c2:	ed 81       	ldd	r30, Y+5	; 0x05
 6c4:	fe 81       	ldd	r31, Y+6	; 0x06
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 83       	st	Z, r24
 6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
 6cc:	1a 82       	std	Y+2, r1	; 0x02
 6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 6d0:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
 6d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
 6d4:	28 96       	adiw	r28, 0x08	; 8
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	f8 94       	cli
 6da:	de bf       	out	0x3e, r29	; 62
 6dc:	0f be       	out	0x3f, r0	; 63
 6de:	cd bf       	out	0x3d, r28	; 61
 6e0:	cf 91       	pop	r28
 6e2:	df 91       	pop	r29
 6e4:	08 95       	ret

000006e6 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 6e6:	df 93       	push	r29
 6e8:	cf 93       	push	r28
 6ea:	cd b7       	in	r28, 0x3d	; 61
 6ec:	de b7       	in	r29, 0x3e	; 62
 6ee:	2d 97       	sbiw	r28, 0x0d	; 13
 6f0:	0f b6       	in	r0, 0x3f	; 63
 6f2:	f8 94       	cli
 6f4:	de bf       	out	0x3e, r29	; 62
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	cd bf       	out	0x3d, r28	; 61
 6fa:	8a 83       	std	Y+2, r24	; 0x02
 6fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
 702:	8b 81       	ldd	r24, Y+3	; 0x03
 704:	88 23       	and	r24, r24
 706:	21 f0       	breq	.+8      	; 0x710 <DIO_u8SetPortDirection+0x2a>
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	81 30       	cpi	r24, 0x01	; 1
 70c:	09 f0       	breq	.+2      	; 0x710 <DIO_u8SetPortDirection+0x2a>
 70e:	82 c0       	rjmp	.+260    	; 0x814 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
 710:	8a 81       	ldd	r24, Y+2	; 0x02
 712:	28 2f       	mov	r18, r24
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	3d 87       	std	Y+13, r19	; 0x0d
 718:	2c 87       	std	Y+12, r18	; 0x0c
 71a:	8c 85       	ldd	r24, Y+12	; 0x0c
 71c:	9d 85       	ldd	r25, Y+13	; 0x0d
 71e:	81 30       	cpi	r24, 0x01	; 1
 720:	91 05       	cpc	r25, r1
 722:	71 f1       	breq	.+92     	; 0x780 <DIO_u8SetPortDirection+0x9a>
 724:	2c 85       	ldd	r18, Y+12	; 0x0c
 726:	3d 85       	ldd	r19, Y+13	; 0x0d
 728:	22 30       	cpi	r18, 0x02	; 2
 72a:	31 05       	cpc	r19, r1
 72c:	2c f4       	brge	.+10     	; 0x738 <DIO_u8SetPortDirection+0x52>
 72e:	8c 85       	ldd	r24, Y+12	; 0x0c
 730:	9d 85       	ldd	r25, Y+13	; 0x0d
 732:	00 97       	sbiw	r24, 0x00	; 0
 734:	69 f0       	breq	.+26     	; 0x750 <DIO_u8SetPortDirection+0x6a>
 736:	6c c0       	rjmp	.+216    	; 0x810 <DIO_u8SetPortDirection+0x12a>
 738:	2c 85       	ldd	r18, Y+12	; 0x0c
 73a:	3d 85       	ldd	r19, Y+13	; 0x0d
 73c:	22 30       	cpi	r18, 0x02	; 2
 73e:	31 05       	cpc	r19, r1
 740:	b9 f1       	breq	.+110    	; 0x7b0 <DIO_u8SetPortDirection+0xca>
 742:	8c 85       	ldd	r24, Y+12	; 0x0c
 744:	9d 85       	ldd	r25, Y+13	; 0x0d
 746:	83 30       	cpi	r24, 0x03	; 3
 748:	91 05       	cpc	r25, r1
 74a:	09 f4       	brne	.+2      	; 0x74e <DIO_u8SetPortDirection+0x68>
 74c:	49 c0       	rjmp	.+146    	; 0x7e0 <DIO_u8SetPortDirection+0xfa>
 74e:	60 c0       	rjmp	.+192    	; 0x810 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	3b 87       	std	Y+11, r19	; 0x0b
 758:	2a 87       	std	Y+10, r18	; 0x0a
 75a:	8a 85       	ldd	r24, Y+10	; 0x0a
 75c:	9b 85       	ldd	r25, Y+11	; 0x0b
 75e:	00 97       	sbiw	r24, 0x00	; 0
 760:	31 f0       	breq	.+12     	; 0x76e <DIO_u8SetPortDirection+0x88>
 762:	2a 85       	ldd	r18, Y+10	; 0x0a
 764:	3b 85       	ldd	r19, Y+11	; 0x0b
 766:	21 30       	cpi	r18, 0x01	; 1
 768:	31 05       	cpc	r19, r1
 76a:	29 f0       	breq	.+10     	; 0x776 <DIO_u8SetPortDirection+0x90>
 76c:	54 c0       	rjmp	.+168    	; 0x816 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
 76e:	ea e3       	ldi	r30, 0x3A	; 58
 770:	f0 e0       	ldi	r31, 0x00	; 0
 772:	10 82       	st	Z, r1
 774:	50 c0       	rjmp	.+160    	; 0x816 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
 776:	ea e3       	ldi	r30, 0x3A	; 58
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	8f ef       	ldi	r24, 0xFF	; 255
 77c:	80 83       	st	Z, r24
 77e:	4b c0       	rjmp	.+150    	; 0x816 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
 780:	8b 81       	ldd	r24, Y+3	; 0x03
 782:	28 2f       	mov	r18, r24
 784:	30 e0       	ldi	r19, 0x00	; 0
 786:	39 87       	std	Y+9, r19	; 0x09
 788:	28 87       	std	Y+8, r18	; 0x08
 78a:	88 85       	ldd	r24, Y+8	; 0x08
 78c:	99 85       	ldd	r25, Y+9	; 0x09
 78e:	00 97       	sbiw	r24, 0x00	; 0
 790:	31 f0       	breq	.+12     	; 0x79e <DIO_u8SetPortDirection+0xb8>
 792:	28 85       	ldd	r18, Y+8	; 0x08
 794:	39 85       	ldd	r19, Y+9	; 0x09
 796:	21 30       	cpi	r18, 0x01	; 1
 798:	31 05       	cpc	r19, r1
 79a:	29 f0       	breq	.+10     	; 0x7a6 <DIO_u8SetPortDirection+0xc0>
 79c:	3c c0       	rjmp	.+120    	; 0x816 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
 79e:	e7 e3       	ldi	r30, 0x37	; 55
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	10 82       	st	Z, r1
 7a4:	38 c0       	rjmp	.+112    	; 0x816 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
 7a6:	e7 e3       	ldi	r30, 0x37	; 55
 7a8:	f0 e0       	ldi	r31, 0x00	; 0
 7aa:	8f ef       	ldi	r24, 0xFF	; 255
 7ac:	80 83       	st	Z, r24
 7ae:	33 c0       	rjmp	.+102    	; 0x816 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	28 2f       	mov	r18, r24
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	3f 83       	std	Y+7, r19	; 0x07
 7b8:	2e 83       	std	Y+6, r18	; 0x06
 7ba:	8e 81       	ldd	r24, Y+6	; 0x06
 7bc:	9f 81       	ldd	r25, Y+7	; 0x07
 7be:	00 97       	sbiw	r24, 0x00	; 0
 7c0:	31 f0       	breq	.+12     	; 0x7ce <DIO_u8SetPortDirection+0xe8>
 7c2:	2e 81       	ldd	r18, Y+6	; 0x06
 7c4:	3f 81       	ldd	r19, Y+7	; 0x07
 7c6:	21 30       	cpi	r18, 0x01	; 1
 7c8:	31 05       	cpc	r19, r1
 7ca:	29 f0       	breq	.+10     	; 0x7d6 <DIO_u8SetPortDirection+0xf0>
 7cc:	24 c0       	rjmp	.+72     	; 0x816 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
 7ce:	e4 e3       	ldi	r30, 0x34	; 52
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	10 82       	st	Z, r1
 7d4:	20 c0       	rjmp	.+64     	; 0x816 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
 7d6:	e4 e3       	ldi	r30, 0x34	; 52
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	80 83       	st	Z, r24
 7de:	1b c0       	rjmp	.+54     	; 0x816 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
 7e0:	8b 81       	ldd	r24, Y+3	; 0x03
 7e2:	28 2f       	mov	r18, r24
 7e4:	30 e0       	ldi	r19, 0x00	; 0
 7e6:	3d 83       	std	Y+5, r19	; 0x05
 7e8:	2c 83       	std	Y+4, r18	; 0x04
 7ea:	8c 81       	ldd	r24, Y+4	; 0x04
 7ec:	9d 81       	ldd	r25, Y+5	; 0x05
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	31 f0       	breq	.+12     	; 0x7fe <DIO_u8SetPortDirection+0x118>
 7f2:	2c 81       	ldd	r18, Y+4	; 0x04
 7f4:	3d 81       	ldd	r19, Y+5	; 0x05
 7f6:	21 30       	cpi	r18, 0x01	; 1
 7f8:	31 05       	cpc	r19, r1
 7fa:	29 f0       	breq	.+10     	; 0x806 <DIO_u8SetPortDirection+0x120>
 7fc:	0c c0       	rjmp	.+24     	; 0x816 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
 7fe:	e1 e3       	ldi	r30, 0x31	; 49
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	10 82       	st	Z, r1
 804:	08 c0       	rjmp	.+16     	; 0x816 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
 806:	e1 e3       	ldi	r30, 0x31	; 49
 808:	f0 e0       	ldi	r31, 0x00	; 0
 80a:	8f ef       	ldi	r24, 0xFF	; 255
 80c:	80 83       	st	Z, r24
 80e:	03 c0       	rjmp	.+6      	; 0x816 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
 810:	19 82       	std	Y+1, r1	; 0x01
 812:	01 c0       	rjmp	.+2      	; 0x816 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 814:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 816:	89 81       	ldd	r24, Y+1	; 0x01
}
 818:	2d 96       	adiw	r28, 0x0d	; 13
 81a:	0f b6       	in	r0, 0x3f	; 63
 81c:	f8 94       	cli
 81e:	de bf       	out	0x3e, r29	; 62
 820:	0f be       	out	0x3f, r0	; 63
 822:	cd bf       	out	0x3d, r28	; 61
 824:	cf 91       	pop	r28
 826:	df 91       	pop	r29
 828:	08 95       	ret

0000082a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 82a:	df 93       	push	r29
 82c:	cf 93       	push	r28
 82e:	00 d0       	rcall	.+0      	; 0x830 <DIO_u8SetPortValue+0x6>
 830:	00 d0       	rcall	.+0      	; 0x832 <DIO_u8SetPortValue+0x8>
 832:	0f 92       	push	r0
 834:	cd b7       	in	r28, 0x3d	; 61
 836:	de b7       	in	r29, 0x3e	; 62
 838:	8a 83       	std	Y+2, r24	; 0x02
 83a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
 840:	8a 81       	ldd	r24, Y+2	; 0x02
 842:	28 2f       	mov	r18, r24
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	3d 83       	std	Y+5, r19	; 0x05
 848:	2c 83       	std	Y+4, r18	; 0x04
 84a:	8c 81       	ldd	r24, Y+4	; 0x04
 84c:	9d 81       	ldd	r25, Y+5	; 0x05
 84e:	81 30       	cpi	r24, 0x01	; 1
 850:	91 05       	cpc	r25, r1
 852:	d1 f0       	breq	.+52     	; 0x888 <__stack+0x29>
 854:	2c 81       	ldd	r18, Y+4	; 0x04
 856:	3d 81       	ldd	r19, Y+5	; 0x05
 858:	22 30       	cpi	r18, 0x02	; 2
 85a:	31 05       	cpc	r19, r1
 85c:	2c f4       	brge	.+10     	; 0x868 <__stack+0x9>
 85e:	8c 81       	ldd	r24, Y+4	; 0x04
 860:	9d 81       	ldd	r25, Y+5	; 0x05
 862:	00 97       	sbiw	r24, 0x00	; 0
 864:	61 f0       	breq	.+24     	; 0x87e <__stack+0x1f>
 866:	1f c0       	rjmp	.+62     	; 0x8a6 <__stack+0x47>
 868:	2c 81       	ldd	r18, Y+4	; 0x04
 86a:	3d 81       	ldd	r19, Y+5	; 0x05
 86c:	22 30       	cpi	r18, 0x02	; 2
 86e:	31 05       	cpc	r19, r1
 870:	81 f0       	breq	.+32     	; 0x892 <__stack+0x33>
 872:	8c 81       	ldd	r24, Y+4	; 0x04
 874:	9d 81       	ldd	r25, Y+5	; 0x05
 876:	83 30       	cpi	r24, 0x03	; 3
 878:	91 05       	cpc	r25, r1
 87a:	81 f0       	breq	.+32     	; 0x89c <__stack+0x3d>
 87c:	14 c0       	rjmp	.+40     	; 0x8a6 <__stack+0x47>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
 87e:	eb e3       	ldi	r30, 0x3B	; 59
 880:	f0 e0       	ldi	r31, 0x00	; 0
 882:	8b 81       	ldd	r24, Y+3	; 0x03
 884:	80 83       	st	Z, r24
 886:	10 c0       	rjmp	.+32     	; 0x8a8 <__stack+0x49>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
 888:	e8 e3       	ldi	r30, 0x38	; 56
 88a:	f0 e0       	ldi	r31, 0x00	; 0
 88c:	8b 81       	ldd	r24, Y+3	; 0x03
 88e:	80 83       	st	Z, r24
 890:	0b c0       	rjmp	.+22     	; 0x8a8 <__stack+0x49>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
 892:	e5 e3       	ldi	r30, 0x35	; 53
 894:	f0 e0       	ldi	r31, 0x00	; 0
 896:	8b 81       	ldd	r24, Y+3	; 0x03
 898:	80 83       	st	Z, r24
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <__stack+0x49>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
 89c:	e2 e3       	ldi	r30, 0x32	; 50
 89e:	f0 e0       	ldi	r31, 0x00	; 0
 8a0:	8b 81       	ldd	r24, Y+3	; 0x03
 8a2:	80 83       	st	Z, r24
 8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__stack+0x49>
		default:Local_u8ErrorState = STD_TYPES_NOK;
 8a6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 8a8:	89 81       	ldd	r24, Y+1	; 0x01
}
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	0f 90       	pop	r0
 8b4:	cf 91       	pop	r28
 8b6:	df 91       	pop	r29
 8b8:	08 95       	ret

000008ba <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
 8ba:	df 93       	push	r29
 8bc:	cf 93       	push	r28
 8be:	00 d0       	rcall	.+0      	; 0x8c0 <DIO_u8GetPortValue+0x6>
 8c0:	00 d0       	rcall	.+0      	; 0x8c2 <DIO_u8GetPortValue+0x8>
 8c2:	00 d0       	rcall	.+0      	; 0x8c4 <DIO_u8GetPortValue+0xa>
 8c4:	cd b7       	in	r28, 0x3d	; 61
 8c6:	de b7       	in	r29, 0x3e	; 62
 8c8:	8a 83       	std	Y+2, r24	; 0x02
 8ca:	7c 83       	std	Y+4, r23	; 0x04
 8cc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
 8d2:	8b 81       	ldd	r24, Y+3	; 0x03
 8d4:	9c 81       	ldd	r25, Y+4	; 0x04
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	e9 f1       	breq	.+122    	; 0x954 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
 8da:	8a 81       	ldd	r24, Y+2	; 0x02
 8dc:	28 2f       	mov	r18, r24
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	3e 83       	std	Y+6, r19	; 0x06
 8e2:	2d 83       	std	Y+5, r18	; 0x05
 8e4:	8d 81       	ldd	r24, Y+5	; 0x05
 8e6:	9e 81       	ldd	r25, Y+6	; 0x06
 8e8:	81 30       	cpi	r24, 0x01	; 1
 8ea:	91 05       	cpc	r25, r1
 8ec:	e1 f0       	breq	.+56     	; 0x926 <DIO_u8GetPortValue+0x6c>
 8ee:	2d 81       	ldd	r18, Y+5	; 0x05
 8f0:	3e 81       	ldd	r19, Y+6	; 0x06
 8f2:	22 30       	cpi	r18, 0x02	; 2
 8f4:	31 05       	cpc	r19, r1
 8f6:	2c f4       	brge	.+10     	; 0x902 <DIO_u8GetPortValue+0x48>
 8f8:	8d 81       	ldd	r24, Y+5	; 0x05
 8fa:	9e 81       	ldd	r25, Y+6	; 0x06
 8fc:	00 97       	sbiw	r24, 0x00	; 0
 8fe:	61 f0       	breq	.+24     	; 0x918 <DIO_u8GetPortValue+0x5e>
 900:	27 c0       	rjmp	.+78     	; 0x950 <DIO_u8GetPortValue+0x96>
 902:	2d 81       	ldd	r18, Y+5	; 0x05
 904:	3e 81       	ldd	r19, Y+6	; 0x06
 906:	22 30       	cpi	r18, 0x02	; 2
 908:	31 05       	cpc	r19, r1
 90a:	a1 f0       	breq	.+40     	; 0x934 <DIO_u8GetPortValue+0x7a>
 90c:	8d 81       	ldd	r24, Y+5	; 0x05
 90e:	9e 81       	ldd	r25, Y+6	; 0x06
 910:	83 30       	cpi	r24, 0x03	; 3
 912:	91 05       	cpc	r25, r1
 914:	b1 f0       	breq	.+44     	; 0x942 <DIO_u8GetPortValue+0x88>
 916:	1c c0       	rjmp	.+56     	; 0x950 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
 918:	e9 e3       	ldi	r30, 0x39	; 57
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	80 81       	ld	r24, Z
 91e:	eb 81       	ldd	r30, Y+3	; 0x03
 920:	fc 81       	ldd	r31, Y+4	; 0x04
 922:	80 83       	st	Z, r24
 924:	18 c0       	rjmp	.+48     	; 0x956 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
 926:	e6 e3       	ldi	r30, 0x36	; 54
 928:	f0 e0       	ldi	r31, 0x00	; 0
 92a:	80 81       	ld	r24, Z
 92c:	eb 81       	ldd	r30, Y+3	; 0x03
 92e:	fc 81       	ldd	r31, Y+4	; 0x04
 930:	80 83       	st	Z, r24
 932:	11 c0       	rjmp	.+34     	; 0x956 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
 934:	e3 e3       	ldi	r30, 0x33	; 51
 936:	f0 e0       	ldi	r31, 0x00	; 0
 938:	80 81       	ld	r24, Z
 93a:	eb 81       	ldd	r30, Y+3	; 0x03
 93c:	fc 81       	ldd	r31, Y+4	; 0x04
 93e:	80 83       	st	Z, r24
 940:	0a c0       	rjmp	.+20     	; 0x956 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
 942:	e0 e3       	ldi	r30, 0x30	; 48
 944:	f0 e0       	ldi	r31, 0x00	; 0
 946:	80 81       	ld	r24, Z
 948:	eb 81       	ldd	r30, Y+3	; 0x03
 94a:	fc 81       	ldd	r31, Y+4	; 0x04
 94c:	80 83       	st	Z, r24
 94e:	03 c0       	rjmp	.+6      	; 0x956 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
 950:	19 82       	std	Y+1, r1	; 0x01
 952:	01 c0       	rjmp	.+2      	; 0x956 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 954:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 956:	89 81       	ldd	r24, Y+1	; 0x01
 958:	26 96       	adiw	r28, 0x06	; 6
 95a:	0f b6       	in	r0, 0x3f	; 63
 95c:	f8 94       	cli
 95e:	de bf       	out	0x3e, r29	; 62
 960:	0f be       	out	0x3f, r0	; 63
 962:	cd bf       	out	0x3d, r28	; 61
 964:	cf 91       	pop	r28
 966:	df 91       	pop	r29
 968:	08 95       	ret

0000096a <GI_voidEnableGI>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidEnableGI(void)
{
 96a:	df 93       	push	r29
 96c:	cf 93       	push	r28
 96e:	cd b7       	in	r28, 0x3d	; 61
 970:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
 972:	af e5       	ldi	r26, 0x5F	; 95
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	ef e5       	ldi	r30, 0x5F	; 95
 978:	f0 e0       	ldi	r31, 0x00	; 0
 97a:	80 81       	ld	r24, Z
 97c:	80 68       	ori	r24, 0x80	; 128
 97e:	8c 93       	st	X, r24
}
 980:	cf 91       	pop	r28
 982:	df 91       	pop	r29
 984:	08 95       	ret

00000986 <GI_voidDisableGI>:

void GI_voidDisableGI(void)
{
 986:	df 93       	push	r29
 988:	cf 93       	push	r28
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
 98e:	af e5       	ldi	r26, 0x5F	; 95
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	ef e5       	ldi	r30, 0x5F	; 95
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	8f 77       	andi	r24, 0x7F	; 127
 99a:	8c 93       	st	X, r24
 99c:	cf 91       	pop	r28
 99e:	df 91       	pop	r29
 9a0:	08 95       	ret

000009a2 <TIMERS_voidTimer0Init>:

/* Global Pointer to Function of Timer0 OVF */
static void (*TIMERS_pfTimer0OVF)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
 9a2:	df 93       	push	r29
 9a4:	cf 93       	push	r28
 9a6:	cd b7       	in	r28, 0x3d	; 61
 9a8:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Normal Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
 9aa:	a3 e5       	ldi	r26, 0x53	; 83
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	e3 e5       	ldi	r30, 0x53	; 83
 9b0:	f0 e0       	ldi	r31, 0x00	; 0
 9b2:	80 81       	ld	r24, Z
 9b4:	8f 7b       	andi	r24, 0xBF	; 191
 9b6:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
 9b8:	a3 e5       	ldi	r26, 0x53	; 83
 9ba:	b0 e0       	ldi	r27, 0x00	; 0
 9bc:	e3 e5       	ldi	r30, 0x53	; 83
 9be:	f0 e0       	ldi	r31, 0x00	; 0
 9c0:	80 81       	ld	r24, Z
 9c2:	87 7f       	andi	r24, 0xF7	; 247
 9c4:	8c 93       	st	X, r24

	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,0);
 9c6:	a9 e5       	ldi	r26, 0x59	; 89
 9c8:	b0 e0       	ldi	r27, 0x00	; 0
 9ca:	e9 e5       	ldi	r30, 0x59	; 89
 9cc:	f0 e0       	ldi	r31, 0x00	; 0
 9ce:	80 81       	ld	r24, Z
 9d0:	81 60       	ori	r24, 0x01	; 1
 9d2:	8c 93       	st	X, r24
	/* Set Preload Value */
	TIMERS_u8_TCNT0_REG = 192;
 9d4:	e2 e5       	ldi	r30, 0x52	; 82
 9d6:	f0 e0       	ldi	r31, 0x00	; 0
 9d8:	80 ec       	ldi	r24, 0xC0	; 192
 9da:	80 83       	st	Z, r24
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
 9dc:	a3 e5       	ldi	r26, 0x53	; 83
 9de:	b0 e0       	ldi	r27, 0x00	; 0
 9e0:	e3 e5       	ldi	r30, 0x53	; 83
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	8b 7f       	andi	r24, 0xFB	; 251
 9e8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
 9ea:	a3 e5       	ldi	r26, 0x53	; 83
 9ec:	b0 e0       	ldi	r27, 0x00	; 0
 9ee:	e3 e5       	ldi	r30, 0x53	; 83
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	80 81       	ld	r24, Z
 9f4:	82 60       	ori	r24, 0x02	; 2
 9f6:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
 9f8:	a3 e5       	ldi	r26, 0x53	; 83
 9fa:	b0 e0       	ldi	r27, 0x00	; 0
 9fc:	e3 e5       	ldi	r30, 0x53	; 83
 9fe:	f0 e0       	ldi	r31, 0x00	; 0
 a00:	80 81       	ld	r24, Z
 a02:	8e 7f       	andi	r24, 0xFE	; 254
 a04:	8c 93       	st	X, r24

}
 a06:	cf 91       	pop	r28
 a08:	df 91       	pop	r29
 a0a:	08 95       	ret

00000a0c <TIMERS_u8Timer0SetCallBack>:

u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
 a0c:	df 93       	push	r29
 a0e:	cf 93       	push	r28
 a10:	00 d0       	rcall	.+0      	; 0xa12 <TIMERS_u8Timer0SetCallBack+0x6>
 a12:	0f 92       	push	r0
 a14:	cd b7       	in	r28, 0x3d	; 61
 a16:	de b7       	in	r29, 0x3e	; 62
 a18:	9b 83       	std	Y+3, r25	; 0x03
 a1a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
 a20:	8a 81       	ldd	r24, Y+2	; 0x02
 a22:	9b 81       	ldd	r25, Y+3	; 0x03
 a24:	00 97       	sbiw	r24, 0x00	; 0
 a26:	39 f0       	breq	.+14     	; 0xa36 <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
 a28:	8a 81       	ldd	r24, Y+2	; 0x02
 a2a:	9b 81       	ldd	r25, Y+3	; 0x03
 a2c:	90 93 61 00 	sts	0x0061, r25
 a30:	80 93 60 00 	sts	0x0060, r24
 a34:	01 c0       	rjmp	.+2      	; 0xa38 <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 a36:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
 a38:	89 81       	ldd	r24, Y+1	; 0x01
}
 a3a:	0f 90       	pop	r0
 a3c:	0f 90       	pop	r0
 a3e:	0f 90       	pop	r0
 a40:	cf 91       	pop	r28
 a42:	df 91       	pop	r29
 a44:	08 95       	ret

00000a46 <__vector_11>:
/* Prototype for ISR TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
 a46:	1f 92       	push	r1
 a48:	0f 92       	push	r0
 a4a:	0f b6       	in	r0, 0x3f	; 63
 a4c:	0f 92       	push	r0
 a4e:	11 24       	eor	r1, r1
 a50:	2f 93       	push	r18
 a52:	3f 93       	push	r19
 a54:	4f 93       	push	r20
 a56:	5f 93       	push	r21
 a58:	6f 93       	push	r22
 a5a:	7f 93       	push	r23
 a5c:	8f 93       	push	r24
 a5e:	9f 93       	push	r25
 a60:	af 93       	push	r26
 a62:	bf 93       	push	r27
 a64:	ef 93       	push	r30
 a66:	ff 93       	push	r31
 a68:	df 93       	push	r29
 a6a:	cf 93       	push	r28
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
 a70:	80 91 62 00 	lds	r24, 0x0062
 a74:	90 91 63 00 	lds	r25, 0x0063
 a78:	01 96       	adiw	r24, 0x01	; 1
 a7a:	90 93 63 00 	sts	0x0063, r25
 a7e:	80 93 62 00 	sts	0x0062, r24
	if(Local_u16CounterOVF == 3907)
 a82:	80 91 62 00 	lds	r24, 0x0062
 a86:	90 91 63 00 	lds	r25, 0x0063
 a8a:	2f e0       	ldi	r18, 0x0F	; 15
 a8c:	83 34       	cpi	r24, 0x43	; 67
 a8e:	92 07       	cpc	r25, r18
 a90:	99 f4       	brne	.+38     	; 0xab8 <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
 a92:	e2 e5       	ldi	r30, 0x52	; 82
 a94:	f0 e0       	ldi	r31, 0x00	; 0
 a96:	80 ec       	ldi	r24, 0xC0	; 192
 a98:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
 a9a:	10 92 63 00 	sts	0x0063, r1
 a9e:	10 92 62 00 	sts	0x0062, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
 aa2:	80 91 60 00 	lds	r24, 0x0060
 aa6:	90 91 61 00 	lds	r25, 0x0061
 aaa:	00 97       	sbiw	r24, 0x00	; 0
 aac:	29 f0       	breq	.+10     	; 0xab8 <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
 aae:	e0 91 60 00 	lds	r30, 0x0060
 ab2:	f0 91 61 00 	lds	r31, 0x0061
 ab6:	09 95       	icall
		}
	}
}
 ab8:	cf 91       	pop	r28
 aba:	df 91       	pop	r29
 abc:	ff 91       	pop	r31
 abe:	ef 91       	pop	r30
 ac0:	bf 91       	pop	r27
 ac2:	af 91       	pop	r26
 ac4:	9f 91       	pop	r25
 ac6:	8f 91       	pop	r24
 ac8:	7f 91       	pop	r23
 aca:	6f 91       	pop	r22
 acc:	5f 91       	pop	r21
 ace:	4f 91       	pop	r20
 ad0:	3f 91       	pop	r19
 ad2:	2f 91       	pop	r18
 ad4:	0f 90       	pop	r0
 ad6:	0f be       	out	0x3f, r0	; 63
 ad8:	0f 90       	pop	r0
 ada:	1f 90       	pop	r1
 adc:	18 95       	reti

00000ade <main>:
#include "TIMERS_interface.h"

void App_voidTogLed(void);

int main(void)
{
 ade:	df 93       	push	r29
 ae0:	cf 93       	push	r28
 ae2:	cd b7       	in	r28, 0x3d	; 61
 ae4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
 ae6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidInit>
	/* Enable Global Interrupt */
	GI_voidEnableGI();
 aea:	0e 94 b5 04 	call	0x96a	; 0x96a <GI_voidEnableGI>
	/* Set Call Back */
	TIMERS_u8Timer0SetCallBack(&App_voidTogLed);
 aee:	8e e7       	ldi	r24, 0x7E	; 126
 af0:	95 e0       	ldi	r25, 0x05	; 5
 af2:	0e 94 06 05 	call	0xa0c	; 0xa0c <TIMERS_u8Timer0SetCallBack>
	/* Start Timer */
	TIMERS_voidTimer0Init();
 af6:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <TIMERS_voidTimer0Init>
 afa:	ff cf       	rjmp	.-2      	; 0xafa <main+0x1c>

00000afc <App_voidTogLed>:

	return 0;
}

void App_voidTogLed(void)
{
 afc:	df 93       	push	r29
 afe:	cf 93       	push	r28
 b00:	cd b7       	in	r28, 0x3d	; 61
 b02:	de b7       	in	r29, 0x3e	; 62
	static u8 flag = 0;
	if(flag == 0)
 b04:	80 91 64 00 	lds	r24, 0x0064
 b08:	88 23       	and	r24, r24
 b0a:	49 f4       	brne	.+18     	; 0xb1e <App_voidTogLed+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
 b0c:	80 e0       	ldi	r24, 0x00	; 0
 b0e:	60 e0       	ldi	r22, 0x00	; 0
 b10:	41 e0       	ldi	r20, 0x01	; 1
 b12:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8SetPinValue>
		flag = 1;
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	80 93 64 00 	sts	0x0064, r24
 b1c:	07 c0       	rjmp	.+14     	; 0xb2c <App_voidTogLed+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
 b1e:	80 e0       	ldi	r24, 0x00	; 0
 b20:	60 e0       	ldi	r22, 0x00	; 0
 b22:	40 e0       	ldi	r20, 0x00	; 0
 b24:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8SetPinValue>
		flag = 0;
 b28:	10 92 64 00 	sts	0x0064, r1
	}
}
 b2c:	cf 91       	pop	r28
 b2e:	df 91       	pop	r29
 b30:	08 95       	ret

00000b32 <_exit>:
 b32:	f8 94       	cli

00000b34 <__stop_program>:
 b34:	ff cf       	rjmp	.-2      	; 0xb34 <__stop_program>
