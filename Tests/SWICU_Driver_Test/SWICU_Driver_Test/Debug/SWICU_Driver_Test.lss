
SWICU_Driver_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00003d30  00003dc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  0080017a  0080017a  00003ede  2**0
                  ALLOC
  3 .stab         00003744  00000000  00000000  00003ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013dd  00000000  00000000  00007624  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008d93  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b19e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c524  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d6fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000dbb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e520  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__vector_1>
       8:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__vector_2>
       c:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__vector_6>
      1c:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__vector_7>
      20:	0c 94 85 1c 	jmp	0x390a	; 0x390a <__vector_8>
      24:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__vector_9>
      28:	0c 94 a9 1d 	jmp	0x3b52	; 0x3b52 <__vector_10>
      2c:	0c 94 5d 1d 	jmp	0x3aba	; 0x3aba <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 39       	cpi	r26, 0x9D	; 157
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 1d 	call	0x3be2	; 0x3be2 <main>
      8a:	0c 94 96 1e 	jmp	0x3d2c	; 0x3d2c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e7       	ldi	r26, 0x71	; 113
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5f 1e 	jmp	0x3cbe	; 0x3cbe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e7       	ldi	r24, 0x71	; 113
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7b 1e 	jmp	0x3cf6	; 0x3cf6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e7       	ldi	r22, 0x71	; 113
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6b 1e 	jmp	0x3cd6	; 0x3cd6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 87 1e 	jmp	0x3d0e	; 0x3d0e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6f 1e 	jmp	0x3cde	; 0x3cde <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8b 1e 	jmp	0x3d16	; 0x3d16 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 67 1e 	jmp	0x3cce	; 0x3cce <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 83 1e 	jmp	0x3d06	; 0x3d06 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e7 58       	subi	r30, 0x87	; 135
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     e36:	ea e3       	ldi	r30, 0x3A	; 58
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	87 e0       	ldi	r24, 0x07	; 7
     e3c:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     e3e:	e7 e3       	ldi	r30, 0x37	; 55
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	88 e0       	ldi	r24, 0x08	; 8
     e44:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     e46:	e4 e3       	ldi	r30, 0x34	; 52
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	8f ef       	ldi	r24, 0xFF	; 255
     e4c:	80 83       	st	Z, r24

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     e4e:	e1 e3       	ldi	r30, 0x31	; 49
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     e54:	eb e3       	ldi	r30, 0x3B	; 59
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     e5a:	e8 e3       	ldi	r30, 0x38	; 56
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     e60:	e5 e3       	ldi	r30, 0x35	; 53
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     e66:	e2 e3       	ldi	r30, 0x32	; 50
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	10 82       	st	Z, r1

}
     e6c:	cf 91       	pop	r28
     e6e:	df 91       	pop	r29
     e70:	08 95       	ret

00000e72 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     e72:	df 93       	push	r29
     e74:	cf 93       	push	r28
     e76:	cd b7       	in	r28, 0x3d	; 61
     e78:	de b7       	in	r29, 0x3e	; 62
     e7a:	2e 97       	sbiw	r28, 0x0e	; 14
     e7c:	0f b6       	in	r0, 0x3f	; 63
     e7e:	f8 94       	cli
     e80:	de bf       	out	0x3e, r29	; 62
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	cd bf       	out	0x3d, r28	; 61
     e86:	8a 83       	std	Y+2, r24	; 0x02
     e88:	6b 83       	std	Y+3, r22	; 0x03
     e8a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     e90:	8a 81       	ldd	r24, Y+2	; 0x02
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	08 f0       	brcs	.+2      	; 0xe98 <DIO_u8SetPinDirection+0x26>
     e96:	0d c1       	rjmp	.+538    	; 0x10b2 <DIO_u8SetPinDirection+0x240>
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	88 30       	cpi	r24, 0x08	; 8
     e9c:	08 f0       	brcs	.+2      	; 0xea0 <DIO_u8SetPinDirection+0x2e>
     e9e:	09 c1       	rjmp	.+530    	; 0x10b2 <DIO_u8SetPinDirection+0x240>
     ea0:	8c 81       	ldd	r24, Y+4	; 0x04
     ea2:	88 23       	and	r24, r24
     ea4:	21 f0       	breq	.+8      	; 0xeae <DIO_u8SetPinDirection+0x3c>
     ea6:	8c 81       	ldd	r24, Y+4	; 0x04
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	09 f0       	breq	.+2      	; 0xeae <DIO_u8SetPinDirection+0x3c>
     eac:	02 c1       	rjmp	.+516    	; 0x10b2 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     eae:	8a 81       	ldd	r24, Y+2	; 0x02
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	3e 87       	std	Y+14, r19	; 0x0e
     eb6:	2d 87       	std	Y+13, r18	; 0x0d
     eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     eba:	9e 85       	ldd	r25, Y+14	; 0x0e
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	91 05       	cpc	r25, r1
     ec0:	09 f4       	brne	.+2      	; 0xec4 <DIO_u8SetPinDirection+0x52>
     ec2:	4f c0       	rjmp	.+158    	; 0xf62 <DIO_u8SetPinDirection+0xf0>
     ec4:	2d 85       	ldd	r18, Y+13	; 0x0d
     ec6:	3e 85       	ldd	r19, Y+14	; 0x0e
     ec8:	22 30       	cpi	r18, 0x02	; 2
     eca:	31 05       	cpc	r19, r1
     ecc:	2c f4       	brge	.+10     	; 0xed8 <DIO_u8SetPinDirection+0x66>
     ece:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	71 f0       	breq	.+28     	; 0xef2 <DIO_u8SetPinDirection+0x80>
     ed6:	ee c0       	rjmp	.+476    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
     ed8:	2d 85       	ldd	r18, Y+13	; 0x0d
     eda:	3e 85       	ldd	r19, Y+14	; 0x0e
     edc:	22 30       	cpi	r18, 0x02	; 2
     ede:	31 05       	cpc	r19, r1
     ee0:	09 f4       	brne	.+2      	; 0xee4 <DIO_u8SetPinDirection+0x72>
     ee2:	77 c0       	rjmp	.+238    	; 0xfd2 <DIO_u8SetPinDirection+0x160>
     ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee8:	83 30       	cpi	r24, 0x03	; 3
     eea:	91 05       	cpc	r25, r1
     eec:	09 f4       	brne	.+2      	; 0xef0 <DIO_u8SetPinDirection+0x7e>
     eee:	a9 c0       	rjmp	.+338    	; 0x1042 <DIO_u8SetPinDirection+0x1d0>
     ef0:	e1 c0       	rjmp	.+450    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3c 87       	std	Y+12, r19	; 0x0c
     efa:	2b 87       	std	Y+11, r18	; 0x0b
     efc:	8b 85       	ldd	r24, Y+11	; 0x0b
     efe:	9c 85       	ldd	r25, Y+12	; 0x0c
     f00:	00 97       	sbiw	r24, 0x00	; 0
     f02:	31 f0       	breq	.+12     	; 0xf10 <DIO_u8SetPinDirection+0x9e>
     f04:	2b 85       	ldd	r18, Y+11	; 0x0b
     f06:	3c 85       	ldd	r19, Y+12	; 0x0c
     f08:	21 30       	cpi	r18, 0x01	; 1
     f0a:	31 05       	cpc	r19, r1
     f0c:	b1 f0       	breq	.+44     	; 0xf3a <DIO_u8SetPinDirection+0xc8>
     f0e:	d2 c0       	rjmp	.+420    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     f10:	aa e3       	ldi	r26, 0x3A	; 58
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ea e3       	ldi	r30, 0x3A	; 58
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	48 2f       	mov	r20, r24
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	02 2e       	mov	r0, r18
     f28:	02 c0       	rjmp	.+4      	; 0xf2e <DIO_u8SetPinDirection+0xbc>
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	0a 94       	dec	r0
     f30:	e2 f7       	brpl	.-8      	; 0xf2a <DIO_u8SetPinDirection+0xb8>
     f32:	80 95       	com	r24
     f34:	84 23       	and	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	bd c0       	rjmp	.+378    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     f3a:	aa e3       	ldi	r26, 0x3A	; 58
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	ea e3       	ldi	r30, 0x3A	; 58
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_u8SetPinDirection+0xe6>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_u8SetPinDirection+0xe2>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	a9 c0       	rjmp	.+338    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	3a 87       	std	Y+10, r19	; 0x0a
     f6a:	29 87       	std	Y+9, r18	; 0x09
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	31 f0       	breq	.+12     	; 0xf80 <DIO_u8SetPinDirection+0x10e>
     f74:	29 85       	ldd	r18, Y+9	; 0x09
     f76:	3a 85       	ldd	r19, Y+10	; 0x0a
     f78:	21 30       	cpi	r18, 0x01	; 1
     f7a:	31 05       	cpc	r19, r1
     f7c:	b1 f0       	breq	.+44     	; 0xfaa <DIO_u8SetPinDirection+0x138>
     f7e:	9a c0       	rjmp	.+308    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     f80:	a7 e3       	ldi	r26, 0x37	; 55
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e7 e3       	ldi	r30, 0x37	; 55
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_u8SetPinDirection+0x12c>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_u8SetPinDirection+0x128>
     fa2:	80 95       	com	r24
     fa4:	84 23       	and	r24, r20
     fa6:	8c 93       	st	X, r24
     fa8:	85 c0       	rjmp	.+266    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     faa:	a7 e3       	ldi	r26, 0x37	; 55
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	e7 e3       	ldi	r30, 0x37	; 55
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <DIO_u8SetPinDirection+0x156>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <DIO_u8SetPinDirection+0x152>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	71 c0       	rjmp	.+226    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	38 87       	std	Y+8, r19	; 0x08
     fda:	2f 83       	std	Y+7, r18	; 0x07
     fdc:	8f 81       	ldd	r24, Y+7	; 0x07
     fde:	98 85       	ldd	r25, Y+8	; 0x08
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	31 f0       	breq	.+12     	; 0xff0 <DIO_u8SetPinDirection+0x17e>
     fe4:	2f 81       	ldd	r18, Y+7	; 0x07
     fe6:	38 85       	ldd	r19, Y+8	; 0x08
     fe8:	21 30       	cpi	r18, 0x01	; 1
     fea:	31 05       	cpc	r19, r1
     fec:	b1 f0       	breq	.+44     	; 0x101a <DIO_u8SetPinDirection+0x1a8>
     fee:	62 c0       	rjmp	.+196    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     ff0:	a4 e3       	ldi	r26, 0x34	; 52
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e4 e3       	ldi	r30, 0x34	; 52
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	48 2f       	mov	r20, r24
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	28 2f       	mov	r18, r24
    1000:	30 e0       	ldi	r19, 0x00	; 0
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	02 2e       	mov	r0, r18
    1008:	02 c0       	rjmp	.+4      	; 0x100e <DIO_u8SetPinDirection+0x19c>
    100a:	88 0f       	add	r24, r24
    100c:	99 1f       	adc	r25, r25
    100e:	0a 94       	dec	r0
    1010:	e2 f7       	brpl	.-8      	; 0x100a <DIO_u8SetPinDirection+0x198>
    1012:	80 95       	com	r24
    1014:	84 23       	and	r24, r20
    1016:	8c 93       	st	X, r24
    1018:	4d c0       	rjmp	.+154    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
    101a:	a4 e3       	ldi	r26, 0x34	; 52
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e4 e3       	ldi	r30, 0x34	; 52
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	48 2f       	mov	r20, r24
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	02 2e       	mov	r0, r18
    1032:	02 c0       	rjmp	.+4      	; 0x1038 <DIO_u8SetPinDirection+0x1c6>
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	0a 94       	dec	r0
    103a:	e2 f7       	brpl	.-8      	; 0x1034 <DIO_u8SetPinDirection+0x1c2>
    103c:	84 2b       	or	r24, r20
    103e:	8c 93       	st	X, r24
    1040:	39 c0       	rjmp	.+114    	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	28 2f       	mov	r18, r24
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	3e 83       	std	Y+6, r19	; 0x06
    104a:	2d 83       	std	Y+5, r18	; 0x05
    104c:	8d 81       	ldd	r24, Y+5	; 0x05
    104e:	9e 81       	ldd	r25, Y+6	; 0x06
    1050:	00 97       	sbiw	r24, 0x00	; 0
    1052:	31 f0       	breq	.+12     	; 0x1060 <DIO_u8SetPinDirection+0x1ee>
    1054:	2d 81       	ldd	r18, Y+5	; 0x05
    1056:	3e 81       	ldd	r19, Y+6	; 0x06
    1058:	21 30       	cpi	r18, 0x01	; 1
    105a:	31 05       	cpc	r19, r1
    105c:	b1 f0       	breq	.+44     	; 0x108a <DIO_u8SetPinDirection+0x218>
    105e:	2a c0       	rjmp	.+84     	; 0x10b4 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    1060:	a1 e3       	ldi	r26, 0x31	; 49
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e1 e3       	ldi	r30, 0x31	; 49
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	48 2f       	mov	r20, r24
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	28 2f       	mov	r18, r24
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	02 2e       	mov	r0, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <DIO_u8SetPinDirection+0x20c>
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	0a 94       	dec	r0
    1080:	e2 f7       	brpl	.-8      	; 0x107a <DIO_u8SetPinDirection+0x208>
    1082:	80 95       	com	r24
    1084:	84 23       	and	r24, r20
    1086:	8c 93       	st	X, r24
    1088:	15 c0       	rjmp	.+42     	; 0x10b4 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
    108a:	a1 e3       	ldi	r26, 0x31	; 49
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e1 e3       	ldi	r30, 0x31	; 49
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <DIO_u8SetPinDirection+0x236>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <DIO_u8SetPinDirection+0x232>
    10ac:	84 2b       	or	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    10b2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10b6:	2e 96       	adiw	r28, 0x0e	; 14
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	2e 97       	sbiw	r28, 0x0e	; 14
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	8a 83       	std	Y+2, r24	; 0x02
    10de:	6b 83       	std	Y+3, r22	; 0x03
    10e0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	88 30       	cpi	r24, 0x08	; 8
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <DIO_u8SetPinValue+0x26>
    10ec:	0c c1       	rjmp	.+536    	; 0x1306 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	28 2f       	mov	r18, r24
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	3e 87       	std	Y+14, r19	; 0x0e
    10f6:	2d 87       	std	Y+13, r18	; 0x0d
    10f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    10fc:	81 30       	cpi	r24, 0x01	; 1
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <DIO_u8SetPinValue+0x3c>
    1102:	51 c0       	rjmp	.+162    	; 0x11a6 <DIO_u8SetPinValue+0xde>
    1104:	2d 85       	ldd	r18, Y+13	; 0x0d
    1106:	3e 85       	ldd	r19, Y+14	; 0x0e
    1108:	22 30       	cpi	r18, 0x02	; 2
    110a:	31 05       	cpc	r19, r1
    110c:	2c f4       	brge	.+10     	; 0x1118 <DIO_u8SetPinValue+0x50>
    110e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1110:	9e 85       	ldd	r25, Y+14	; 0x0e
    1112:	00 97       	sbiw	r24, 0x00	; 0
    1114:	71 f0       	breq	.+28     	; 0x1132 <DIO_u8SetPinValue+0x6a>
    1116:	f5 c0       	rjmp	.+490    	; 0x1302 <DIO_u8SetPinValue+0x23a>
    1118:	2d 85       	ldd	r18, Y+13	; 0x0d
    111a:	3e 85       	ldd	r19, Y+14	; 0x0e
    111c:	22 30       	cpi	r18, 0x02	; 2
    111e:	31 05       	cpc	r19, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <DIO_u8SetPinValue+0x5c>
    1122:	7b c0       	rjmp	.+246    	; 0x121a <DIO_u8SetPinValue+0x152>
    1124:	8d 85       	ldd	r24, Y+13	; 0x0d
    1126:	9e 85       	ldd	r25, Y+14	; 0x0e
    1128:	83 30       	cpi	r24, 0x03	; 3
    112a:	91 05       	cpc	r25, r1
    112c:	09 f4       	brne	.+2      	; 0x1130 <DIO_u8SetPinValue+0x68>
    112e:	af c0       	rjmp	.+350    	; 0x128e <DIO_u8SetPinValue+0x1c6>
    1130:	e8 c0       	rjmp	.+464    	; 0x1302 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	3c 87       	std	Y+12, r19	; 0x0c
    113a:	2b 87       	std	Y+11, r18	; 0x0b
    113c:	8b 85       	ldd	r24, Y+11	; 0x0b
    113e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	31 f0       	breq	.+12     	; 0x1150 <DIO_u8SetPinValue+0x88>
    1144:	2b 85       	ldd	r18, Y+11	; 0x0b
    1146:	3c 85       	ldd	r19, Y+12	; 0x0c
    1148:	21 30       	cpi	r18, 0x01	; 1
    114a:	31 05       	cpc	r19, r1
    114c:	b1 f0       	breq	.+44     	; 0x117a <DIO_u8SetPinValue+0xb2>
    114e:	29 c0       	rjmp	.+82     	; 0x11a2 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1150:	ab e3       	ldi	r26, 0x3B	; 59
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	eb e3       	ldi	r30, 0x3B	; 59
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_u8SetPinValue+0xa6>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_u8SetPinValue+0xa2>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	c7 c0       	rjmp	.+398    	; 0x1308 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    117a:	ab e3       	ldi	r26, 0x3B	; 59
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	eb e3       	ldi	r30, 0x3B	; 59
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	48 2f       	mov	r20, r24
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 2e       	mov	r0, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <DIO_u8SetPinValue+0xd0>
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	0a 94       	dec	r0
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <DIO_u8SetPinValue+0xcc>
    119c:	84 2b       	or	r24, r20
    119e:	8c 93       	st	X, r24
    11a0:	b3 c0       	rjmp	.+358    	; 0x1308 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	b1 c0       	rjmp	.+354    	; 0x1308 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
    11a6:	8c 81       	ldd	r24, Y+4	; 0x04
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	3a 87       	std	Y+10, r19	; 0x0a
    11ae:	29 87       	std	Y+9, r18	; 0x09
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	00 97       	sbiw	r24, 0x00	; 0
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <DIO_u8SetPinValue+0xfc>
    11b8:	29 85       	ldd	r18, Y+9	; 0x09
    11ba:	3a 85       	ldd	r19, Y+10	; 0x0a
    11bc:	21 30       	cpi	r18, 0x01	; 1
    11be:	31 05       	cpc	r19, r1
    11c0:	b1 f0       	breq	.+44     	; 0x11ee <DIO_u8SetPinValue+0x126>
    11c2:	29 c0       	rjmp	.+82     	; 0x1216 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    11c4:	a8 e3       	ldi	r26, 0x38	; 56
    11c6:	b0 e0       	ldi	r27, 0x00	; 0
    11c8:	e8 e3       	ldi	r30, 0x38	; 56
    11ca:	f0 e0       	ldi	r31, 0x00	; 0
    11cc:	80 81       	ld	r24, Z
    11ce:	48 2f       	mov	r20, r24
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	02 2e       	mov	r0, r18
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <DIO_u8SetPinValue+0x11a>
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	0a 94       	dec	r0
    11e4:	e2 f7       	brpl	.-8      	; 0x11de <DIO_u8SetPinValue+0x116>
    11e6:	80 95       	com	r24
    11e8:	84 23       	and	r24, r20
    11ea:	8c 93       	st	X, r24
    11ec:	8d c0       	rjmp	.+282    	; 0x1308 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    11ee:	a8 e3       	ldi	r26, 0x38	; 56
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e8 e3       	ldi	r30, 0x38	; 56
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_u8SetPinValue+0x144>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_u8SetPinValue+0x140>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	79 c0       	rjmp	.+242    	; 0x1308 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1216:	19 82       	std	Y+1, r1	; 0x01
    1218:	77 c0       	rjmp	.+238    	; 0x1308 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
    121a:	8c 81       	ldd	r24, Y+4	; 0x04
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	38 87       	std	Y+8, r19	; 0x08
    1222:	2f 83       	std	Y+7, r18	; 0x07
    1224:	8f 81       	ldd	r24, Y+7	; 0x07
    1226:	98 85       	ldd	r25, Y+8	; 0x08
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	31 f0       	breq	.+12     	; 0x1238 <DIO_u8SetPinValue+0x170>
    122c:	2f 81       	ldd	r18, Y+7	; 0x07
    122e:	38 85       	ldd	r19, Y+8	; 0x08
    1230:	21 30       	cpi	r18, 0x01	; 1
    1232:	31 05       	cpc	r19, r1
    1234:	b1 f0       	breq	.+44     	; 0x1262 <DIO_u8SetPinValue+0x19a>
    1236:	29 c0       	rjmp	.+82     	; 0x128a <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1238:	a5 e3       	ldi	r26, 0x35	; 53
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e5 e3       	ldi	r30, 0x35	; 53
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 2e       	mov	r0, r18
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <DIO_u8SetPinValue+0x18e>
    1252:	88 0f       	add	r24, r24
    1254:	99 1f       	adc	r25, r25
    1256:	0a 94       	dec	r0
    1258:	e2 f7       	brpl	.-8      	; 0x1252 <DIO_u8SetPinValue+0x18a>
    125a:	80 95       	com	r24
    125c:	84 23       	and	r24, r20
    125e:	8c 93       	st	X, r24
    1260:	53 c0       	rjmp	.+166    	; 0x1308 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    1262:	a5 e3       	ldi	r26, 0x35	; 53
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	e5 e3       	ldi	r30, 0x35	; 53
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	48 2f       	mov	r20, r24
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 2e       	mov	r0, r18
    127a:	02 c0       	rjmp	.+4      	; 0x1280 <DIO_u8SetPinValue+0x1b8>
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	0a 94       	dec	r0
    1282:	e2 f7       	brpl	.-8      	; 0x127c <DIO_u8SetPinValue+0x1b4>
    1284:	84 2b       	or	r24, r20
    1286:	8c 93       	st	X, r24
    1288:	3f c0       	rjmp	.+126    	; 0x1308 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    128a:	19 82       	std	Y+1, r1	; 0x01
    128c:	3d c0       	rjmp	.+122    	; 0x1308 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3e 83       	std	Y+6, r19	; 0x06
    1296:	2d 83       	std	Y+5, r18	; 0x05
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
    129a:	9e 81       	ldd	r25, Y+6	; 0x06
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	31 f0       	breq	.+12     	; 0x12ac <DIO_u8SetPinValue+0x1e4>
    12a0:	2d 81       	ldd	r18, Y+5	; 0x05
    12a2:	3e 81       	ldd	r19, Y+6	; 0x06
    12a4:	21 30       	cpi	r18, 0x01	; 1
    12a6:	31 05       	cpc	r19, r1
    12a8:	b1 f0       	breq	.+44     	; 0x12d6 <DIO_u8SetPinValue+0x20e>
    12aa:	29 c0       	rjmp	.+82     	; 0x12fe <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    12ac:	a2 e3       	ldi	r26, 0x32	; 50
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e2 e3       	ldi	r30, 0x32	; 50
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_u8SetPinValue+0x202>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_u8SetPinValue+0x1fe>
    12ce:	80 95       	com	r24
    12d0:	84 23       	and	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	19 c0       	rjmp	.+50     	; 0x1308 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    12d6:	a2 e3       	ldi	r26, 0x32	; 50
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e2 e3       	ldi	r30, 0x32	; 50
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <DIO_u8SetPinValue+0x22c>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <DIO_u8SetPinValue+0x228>
    12f8:	84 2b       	or	r24, r20
    12fa:	8c 93       	st	X, r24
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    12fe:	19 82       	std	Y+1, r1	; 0x01
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1302:	19 82       	std	Y+1, r1	; 0x01
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1306:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1308:	89 81       	ldd	r24, Y+1	; 0x01
}
    130a:	2e 96       	adiw	r28, 0x0e	; 14
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	28 97       	sbiw	r28, 0x08	; 8
    1326:	0f b6       	in	r0, 0x3f	; 63
    1328:	f8 94       	cli
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	0f be       	out	0x3f, r0	; 63
    132e:	cd bf       	out	0x3d, r28	; 61
    1330:	8b 83       	std	Y+3, r24	; 0x03
    1332:	6c 83       	std	Y+4, r22	; 0x04
    1334:	5e 83       	std	Y+6, r21	; 0x06
    1336:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	08 f0       	brcs	.+2      	; 0x1344 <DIO_u8GetPinValue+0x28>
    1342:	a1 c0       	rjmp	.+322    	; 0x1486 <DIO_u8GetPinValue+0x16a>
    1344:	8c 81       	ldd	r24, Y+4	; 0x04
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	08 f0       	brcs	.+2      	; 0x134c <DIO_u8GetPinValue+0x30>
    134a:	9d c0       	rjmp	.+314    	; 0x1486 <DIO_u8GetPinValue+0x16a>
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	9e 81       	ldd	r25, Y+6	; 0x06
    1350:	00 97       	sbiw	r24, 0x00	; 0
    1352:	09 f4       	brne	.+2      	; 0x1356 <DIO_u8GetPinValue+0x3a>
    1354:	98 c0       	rjmp	.+304    	; 0x1486 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	38 87       	std	Y+8, r19	; 0x08
    135e:	2f 83       	std	Y+7, r18	; 0x07
    1360:	4f 81       	ldd	r20, Y+7	; 0x07
    1362:	58 85       	ldd	r21, Y+8	; 0x08
    1364:	41 30       	cpi	r20, 0x01	; 1
    1366:	51 05       	cpc	r21, r1
    1368:	a9 f1       	breq	.+106    	; 0x13d4 <DIO_u8GetPinValue+0xb8>
    136a:	8f 81       	ldd	r24, Y+7	; 0x07
    136c:	98 85       	ldd	r25, Y+8	; 0x08
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	91 05       	cpc	r25, r1
    1372:	34 f4       	brge	.+12     	; 0x1380 <DIO_u8GetPinValue+0x64>
    1374:	2f 81       	ldd	r18, Y+7	; 0x07
    1376:	38 85       	ldd	r19, Y+8	; 0x08
    1378:	21 15       	cp	r18, r1
    137a:	31 05       	cpc	r19, r1
    137c:	71 f0       	breq	.+28     	; 0x139a <DIO_u8GetPinValue+0x7e>
    137e:	81 c0       	rjmp	.+258    	; 0x1482 <DIO_u8GetPinValue+0x166>
    1380:	4f 81       	ldd	r20, Y+7	; 0x07
    1382:	58 85       	ldd	r21, Y+8	; 0x08
    1384:	42 30       	cpi	r20, 0x02	; 2
    1386:	51 05       	cpc	r21, r1
    1388:	09 f4       	brne	.+2      	; 0x138c <DIO_u8GetPinValue+0x70>
    138a:	41 c0       	rjmp	.+130    	; 0x140e <DIO_u8GetPinValue+0xf2>
    138c:	8f 81       	ldd	r24, Y+7	; 0x07
    138e:	98 85       	ldd	r25, Y+8	; 0x08
    1390:	83 30       	cpi	r24, 0x03	; 3
    1392:	91 05       	cpc	r25, r1
    1394:	09 f4       	brne	.+2      	; 0x1398 <DIO_u8GetPinValue+0x7c>
    1396:	58 c0       	rjmp	.+176    	; 0x1448 <DIO_u8GetPinValue+0x12c>
    1398:	74 c0       	rjmp	.+232    	; 0x1482 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    139a:	e9 e3       	ldi	r30, 0x39	; 57
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	8c 81       	ldd	r24, Y+4	; 0x04
    13a6:	88 2f       	mov	r24, r24
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a9 01       	movw	r20, r18
    13ac:	02 c0       	rjmp	.+4      	; 0x13b2 <DIO_u8GetPinValue+0x96>
    13ae:	55 95       	asr	r21
    13b0:	47 95       	ror	r20
    13b2:	8a 95       	dec	r24
    13b4:	e2 f7       	brpl	.-8      	; 0x13ae <DIO_u8GetPinValue+0x92>
    13b6:	ca 01       	movw	r24, r20
    13b8:	81 70       	andi	r24, 0x01	; 1
    13ba:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	88 23       	and	r24, r24
    13c0:	21 f4       	brne	.+8      	; 0x13ca <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    13c2:	ed 81       	ldd	r30, Y+5	; 0x05
    13c4:	fe 81       	ldd	r31, Y+6	; 0x06
    13c6:	10 82       	st	Z, r1
    13c8:	5f c0       	rjmp	.+190    	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    13ca:	ed 81       	ldd	r30, Y+5	; 0x05
    13cc:	fe 81       	ldd	r31, Y+6	; 0x06
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	80 83       	st	Z, r24
    13d2:	5a c0       	rjmp	.+180    	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    13d4:	e6 e3       	ldi	r30, 0x36	; 54
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	88 2f       	mov	r24, r24
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	a9 01       	movw	r20, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_u8GetPinValue+0xd0>
    13e8:	55 95       	asr	r21
    13ea:	47 95       	ror	r20
    13ec:	8a 95       	dec	r24
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_u8GetPinValue+0xcc>
    13f0:	ca 01       	movw	r24, r20
    13f2:	81 70       	andi	r24, 0x01	; 1
    13f4:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	88 23       	and	r24, r24
    13fa:	21 f4       	brne	.+8      	; 0x1404 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    13fc:	ed 81       	ldd	r30, Y+5	; 0x05
    13fe:	fe 81       	ldd	r31, Y+6	; 0x06
    1400:	10 82       	st	Z, r1
    1402:	42 c0       	rjmp	.+132    	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1404:	ed 81       	ldd	r30, Y+5	; 0x05
    1406:	fe 81       	ldd	r31, Y+6	; 0x06
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 83       	st	Z, r24
    140c:	3d c0       	rjmp	.+122    	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    140e:	e3 e3       	ldi	r30, 0x33	; 51
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	88 2f       	mov	r24, r24
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a9 01       	movw	r20, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_u8GetPinValue+0x10a>
    1422:	55 95       	asr	r21
    1424:	47 95       	ror	r20
    1426:	8a 95       	dec	r24
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_u8GetPinValue+0x106>
    142a:	ca 01       	movw	r24, r20
    142c:	81 70       	andi	r24, 0x01	; 1
    142e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	88 23       	and	r24, r24
    1434:	21 f4       	brne	.+8      	; 0x143e <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1436:	ed 81       	ldd	r30, Y+5	; 0x05
    1438:	fe 81       	ldd	r31, Y+6	; 0x06
    143a:	10 82       	st	Z, r1
    143c:	25 c0       	rjmp	.+74     	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    143e:	ed 81       	ldd	r30, Y+5	; 0x05
    1440:	fe 81       	ldd	r31, Y+6	; 0x06
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 83       	st	Z, r24
    1446:	20 c0       	rjmp	.+64     	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    1448:	e0 e3       	ldi	r30, 0x30	; 48
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	80 81       	ld	r24, Z
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	a9 01       	movw	r20, r18
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <DIO_u8GetPinValue+0x144>
    145c:	55 95       	asr	r21
    145e:	47 95       	ror	r20
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <DIO_u8GetPinValue+0x140>
    1464:	ca 01       	movw	r24, r20
    1466:	81 70       	andi	r24, 0x01	; 1
    1468:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	88 23       	and	r24, r24
    146e:	21 f4       	brne	.+8      	; 0x1478 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1470:	ed 81       	ldd	r30, Y+5	; 0x05
    1472:	fe 81       	ldd	r31, Y+6	; 0x06
    1474:	10 82       	st	Z, r1
    1476:	08 c0       	rjmp	.+16     	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1478:	ed 81       	ldd	r30, Y+5	; 0x05
    147a:	fe 81       	ldd	r31, Y+6	; 0x06
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 83       	st	Z, r24
    1480:	03 c0       	rjmp	.+6      	; 0x1488 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    1482:	1a 82       	std	Y+2, r1	; 0x02
    1484:	01 c0       	rjmp	.+2      	; 0x1488 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1486:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
}
    148a:	28 96       	adiw	r28, 0x08	; 8
    148c:	0f b6       	in	r0, 0x3f	; 63
    148e:	f8 94       	cli
    1490:	de bf       	out	0x3e, r29	; 62
    1492:	0f be       	out	0x3f, r0	; 63
    1494:	cd bf       	out	0x3d, r28	; 61
    1496:	cf 91       	pop	r28
    1498:	df 91       	pop	r29
    149a:	08 95       	ret

0000149c <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    149c:	df 93       	push	r29
    149e:	cf 93       	push	r28
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	2d 97       	sbiw	r28, 0x0d	; 13
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	8a 83       	std	Y+2, r24	; 0x02
    14b2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    14b8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ba:	88 23       	and	r24, r24
    14bc:	21 f0       	breq	.+8      	; 0x14c6 <DIO_u8SetPortDirection+0x2a>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <DIO_u8SetPortDirection+0x2a>
    14c4:	82 c0       	rjmp	.+260    	; 0x15ca <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3d 87       	std	Y+13, r19	; 0x0d
    14ce:	2c 87       	std	Y+12, r18	; 0x0c
    14d0:	8c 85       	ldd	r24, Y+12	; 0x0c
    14d2:	9d 85       	ldd	r25, Y+13	; 0x0d
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	91 05       	cpc	r25, r1
    14d8:	71 f1       	breq	.+92     	; 0x1536 <DIO_u8SetPortDirection+0x9a>
    14da:	2c 85       	ldd	r18, Y+12	; 0x0c
    14dc:	3d 85       	ldd	r19, Y+13	; 0x0d
    14de:	22 30       	cpi	r18, 0x02	; 2
    14e0:	31 05       	cpc	r19, r1
    14e2:	2c f4       	brge	.+10     	; 0x14ee <DIO_u8SetPortDirection+0x52>
    14e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    14e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	69 f0       	breq	.+26     	; 0x1506 <DIO_u8SetPortDirection+0x6a>
    14ec:	6c c0       	rjmp	.+216    	; 0x15c6 <DIO_u8SetPortDirection+0x12a>
    14ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    14f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    14f2:	22 30       	cpi	r18, 0x02	; 2
    14f4:	31 05       	cpc	r19, r1
    14f6:	b9 f1       	breq	.+110    	; 0x1566 <DIO_u8SetPortDirection+0xca>
    14f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    14fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <DIO_u8SetPortDirection+0x68>
    1502:	49 c0       	rjmp	.+146    	; 0x1596 <DIO_u8SetPortDirection+0xfa>
    1504:	60 c0       	rjmp	.+192    	; 0x15c6 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3b 87       	std	Y+11, r19	; 0x0b
    150e:	2a 87       	std	Y+10, r18	; 0x0a
    1510:	8a 85       	ldd	r24, Y+10	; 0x0a
    1512:	9b 85       	ldd	r25, Y+11	; 0x0b
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	31 f0       	breq	.+12     	; 0x1524 <DIO_u8SetPortDirection+0x88>
    1518:	2a 85       	ldd	r18, Y+10	; 0x0a
    151a:	3b 85       	ldd	r19, Y+11	; 0x0b
    151c:	21 30       	cpi	r18, 0x01	; 1
    151e:	31 05       	cpc	r19, r1
    1520:	29 f0       	breq	.+10     	; 0x152c <DIO_u8SetPortDirection+0x90>
    1522:	54 c0       	rjmp	.+168    	; 0x15cc <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1524:	ea e3       	ldi	r30, 0x3A	; 58
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	10 82       	st	Z, r1
    152a:	50 c0       	rjmp	.+160    	; 0x15cc <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    152c:	ea e3       	ldi	r30, 0x3A	; 58
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	80 83       	st	Z, r24
    1534:	4b c0       	rjmp	.+150    	; 0x15cc <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	39 87       	std	Y+9, r19	; 0x09
    153e:	28 87       	std	Y+8, r18	; 0x08
    1540:	88 85       	ldd	r24, Y+8	; 0x08
    1542:	99 85       	ldd	r25, Y+9	; 0x09
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	31 f0       	breq	.+12     	; 0x1554 <DIO_u8SetPortDirection+0xb8>
    1548:	28 85       	ldd	r18, Y+8	; 0x08
    154a:	39 85       	ldd	r19, Y+9	; 0x09
    154c:	21 30       	cpi	r18, 0x01	; 1
    154e:	31 05       	cpc	r19, r1
    1550:	29 f0       	breq	.+10     	; 0x155c <DIO_u8SetPortDirection+0xc0>
    1552:	3c c0       	rjmp	.+120    	; 0x15cc <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    1554:	e7 e3       	ldi	r30, 0x37	; 55
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	10 82       	st	Z, r1
    155a:	38 c0       	rjmp	.+112    	; 0x15cc <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    155c:	e7 e3       	ldi	r30, 0x37	; 55
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	80 83       	st	Z, r24
    1564:	33 c0       	rjmp	.+102    	; 0x15cc <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3f 83       	std	Y+7, r19	; 0x07
    156e:	2e 83       	std	Y+6, r18	; 0x06
    1570:	8e 81       	ldd	r24, Y+6	; 0x06
    1572:	9f 81       	ldd	r25, Y+7	; 0x07
    1574:	00 97       	sbiw	r24, 0x00	; 0
    1576:	31 f0       	breq	.+12     	; 0x1584 <DIO_u8SetPortDirection+0xe8>
    1578:	2e 81       	ldd	r18, Y+6	; 0x06
    157a:	3f 81       	ldd	r19, Y+7	; 0x07
    157c:	21 30       	cpi	r18, 0x01	; 1
    157e:	31 05       	cpc	r19, r1
    1580:	29 f0       	breq	.+10     	; 0x158c <DIO_u8SetPortDirection+0xf0>
    1582:	24 c0       	rjmp	.+72     	; 0x15cc <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    1584:	e4 e3       	ldi	r30, 0x34	; 52
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	10 82       	st	Z, r1
    158a:	20 c0       	rjmp	.+64     	; 0x15cc <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    158c:	e4 e3       	ldi	r30, 0x34	; 52
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	80 83       	st	Z, r24
    1594:	1b c0       	rjmp	.+54     	; 0x15cc <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	3d 83       	std	Y+5, r19	; 0x05
    159e:	2c 83       	std	Y+4, r18	; 0x04
    15a0:	8c 81       	ldd	r24, Y+4	; 0x04
    15a2:	9d 81       	ldd	r25, Y+5	; 0x05
    15a4:	00 97       	sbiw	r24, 0x00	; 0
    15a6:	31 f0       	breq	.+12     	; 0x15b4 <DIO_u8SetPortDirection+0x118>
    15a8:	2c 81       	ldd	r18, Y+4	; 0x04
    15aa:	3d 81       	ldd	r19, Y+5	; 0x05
    15ac:	21 30       	cpi	r18, 0x01	; 1
    15ae:	31 05       	cpc	r19, r1
    15b0:	29 f0       	breq	.+10     	; 0x15bc <DIO_u8SetPortDirection+0x120>
    15b2:	0c c0       	rjmp	.+24     	; 0x15cc <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    15b4:	e1 e3       	ldi	r30, 0x31	; 49
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	10 82       	st	Z, r1
    15ba:	08 c0       	rjmp	.+16     	; 0x15cc <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    15bc:	e1 e3       	ldi	r30, 0x31	; 49
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8f ef       	ldi	r24, 0xFF	; 255
    15c2:	80 83       	st	Z, r24
    15c4:	03 c0       	rjmp	.+6      	; 0x15cc <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    15c6:	19 82       	std	Y+1, r1	; 0x01
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    15ca:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ce:	2d 96       	adiw	r28, 0x0d	; 13
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	de bf       	out	0x3e, r29	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	cd bf       	out	0x3d, r28	; 61
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <DIO_u8SetPortValue+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <DIO_u8SetPortValue+0x8>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	8a 83       	std	Y+2, r24	; 0x02
    15f0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	28 2f       	mov	r18, r24
    15fa:	30 e0       	ldi	r19, 0x00	; 0
    15fc:	3d 83       	std	Y+5, r19	; 0x05
    15fe:	2c 83       	std	Y+4, r18	; 0x04
    1600:	8c 81       	ldd	r24, Y+4	; 0x04
    1602:	9d 81       	ldd	r25, Y+5	; 0x05
    1604:	81 30       	cpi	r24, 0x01	; 1
    1606:	91 05       	cpc	r25, r1
    1608:	d1 f0       	breq	.+52     	; 0x163e <DIO_u8SetPortValue+0x5e>
    160a:	2c 81       	ldd	r18, Y+4	; 0x04
    160c:	3d 81       	ldd	r19, Y+5	; 0x05
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	2c f4       	brge	.+10     	; 0x161e <DIO_u8SetPortValue+0x3e>
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 f0       	breq	.+24     	; 0x1634 <DIO_u8SetPortValue+0x54>
    161c:	1f c0       	rjmp	.+62     	; 0x165c <DIO_u8SetPortValue+0x7c>
    161e:	2c 81       	ldd	r18, Y+4	; 0x04
    1620:	3d 81       	ldd	r19, Y+5	; 0x05
    1622:	22 30       	cpi	r18, 0x02	; 2
    1624:	31 05       	cpc	r19, r1
    1626:	81 f0       	breq	.+32     	; 0x1648 <DIO_u8SetPortValue+0x68>
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	81 f0       	breq	.+32     	; 0x1652 <DIO_u8SetPortValue+0x72>
    1632:	14 c0       	rjmp	.+40     	; 0x165c <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    1634:	eb e3       	ldi	r30, 0x3B	; 59
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	8b 81       	ldd	r24, Y+3	; 0x03
    163a:	80 83       	st	Z, r24
    163c:	10 c0       	rjmp	.+32     	; 0x165e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    163e:	e8 e3       	ldi	r30, 0x38	; 56
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	80 83       	st	Z, r24
    1646:	0b c0       	rjmp	.+22     	; 0x165e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    1648:	e5 e3       	ldi	r30, 0x35	; 53
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	8b 81       	ldd	r24, Y+3	; 0x03
    164e:	80 83       	st	Z, r24
    1650:	06 c0       	rjmp	.+12     	; 0x165e <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    1652:	e2 e3       	ldi	r30, 0x32	; 50
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	80 83       	st	Z, r24
    165a:	01 c0       	rjmp	.+2      	; 0x165e <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    165c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    165e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	00 d0       	rcall	.+0      	; 0x1676 <DIO_u8GetPortValue+0x6>
    1676:	00 d0       	rcall	.+0      	; 0x1678 <DIO_u8GetPortValue+0x8>
    1678:	00 d0       	rcall	.+0      	; 0x167a <DIO_u8GetPortValue+0xa>
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	8a 83       	std	Y+2, r24	; 0x02
    1680:	7c 83       	std	Y+4, r23	; 0x04
    1682:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    1688:	8b 81       	ldd	r24, Y+3	; 0x03
    168a:	9c 81       	ldd	r25, Y+4	; 0x04
    168c:	00 97       	sbiw	r24, 0x00	; 0
    168e:	e9 f1       	breq	.+122    	; 0x170a <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	3e 83       	std	Y+6, r19	; 0x06
    1698:	2d 83       	std	Y+5, r18	; 0x05
    169a:	8d 81       	ldd	r24, Y+5	; 0x05
    169c:	9e 81       	ldd	r25, Y+6	; 0x06
    169e:	81 30       	cpi	r24, 0x01	; 1
    16a0:	91 05       	cpc	r25, r1
    16a2:	e1 f0       	breq	.+56     	; 0x16dc <DIO_u8GetPortValue+0x6c>
    16a4:	2d 81       	ldd	r18, Y+5	; 0x05
    16a6:	3e 81       	ldd	r19, Y+6	; 0x06
    16a8:	22 30       	cpi	r18, 0x02	; 2
    16aa:	31 05       	cpc	r19, r1
    16ac:	2c f4       	brge	.+10     	; 0x16b8 <DIO_u8GetPortValue+0x48>
    16ae:	8d 81       	ldd	r24, Y+5	; 0x05
    16b0:	9e 81       	ldd	r25, Y+6	; 0x06
    16b2:	00 97       	sbiw	r24, 0x00	; 0
    16b4:	61 f0       	breq	.+24     	; 0x16ce <DIO_u8GetPortValue+0x5e>
    16b6:	27 c0       	rjmp	.+78     	; 0x1706 <DIO_u8GetPortValue+0x96>
    16b8:	2d 81       	ldd	r18, Y+5	; 0x05
    16ba:	3e 81       	ldd	r19, Y+6	; 0x06
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	a1 f0       	breq	.+40     	; 0x16ea <DIO_u8GetPortValue+0x7a>
    16c2:	8d 81       	ldd	r24, Y+5	; 0x05
    16c4:	9e 81       	ldd	r25, Y+6	; 0x06
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	91 05       	cpc	r25, r1
    16ca:	b1 f0       	breq	.+44     	; 0x16f8 <DIO_u8GetPortValue+0x88>
    16cc:	1c c0       	rjmp	.+56     	; 0x1706 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    16ce:	e9 e3       	ldi	r30, 0x39	; 57
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	eb 81       	ldd	r30, Y+3	; 0x03
    16d6:	fc 81       	ldd	r31, Y+4	; 0x04
    16d8:	80 83       	st	Z, r24
    16da:	18 c0       	rjmp	.+48     	; 0x170c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    16dc:	e6 e3       	ldi	r30, 0x36	; 54
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	eb 81       	ldd	r30, Y+3	; 0x03
    16e4:	fc 81       	ldd	r31, Y+4	; 0x04
    16e6:	80 83       	st	Z, r24
    16e8:	11 c0       	rjmp	.+34     	; 0x170c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    16ea:	e3 e3       	ldi	r30, 0x33	; 51
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	eb 81       	ldd	r30, Y+3	; 0x03
    16f2:	fc 81       	ldd	r31, Y+4	; 0x04
    16f4:	80 83       	st	Z, r24
    16f6:	0a c0       	rjmp	.+20     	; 0x170c <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    16f8:	e0 e3       	ldi	r30, 0x30	; 48
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1700:	fc 81       	ldd	r31, Y+4	; 0x04
    1702:	80 83       	st	Z, r24
    1704:	03 c0       	rjmp	.+6      	; 0x170c <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	01 c0       	rjmp	.+2      	; 0x170c <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    170a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	26 96       	adiw	r28, 0x06	; 6
    1710:	0f b6       	in	r0, 0x3f	; 63
    1712:	f8 94       	cli
    1714:	de bf       	out	0x3e, r29	; 62
    1716:	0f be       	out	0x3f, r0	; 63
    1718:	cd bf       	out	0x3d, r28	; 61
    171a:	cf 91       	pop	r28
    171c:	df 91       	pop	r29
    171e:	08 95       	ret

00001720 <EXTI_u8EXTIEnable>:
/* Global Pointer to a function */
static void (*EXTI_ApfExtI[3]) (void) = {NULL,NULL,NULL};


u8 EXTI_u8EXTIEnable(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
    1720:	df 93       	push	r29
    1722:	cf 93       	push	r28
    1724:	cd b7       	in	r28, 0x3d	; 61
    1726:	de b7       	in	r29, 0x3e	; 62
    1728:	2b 97       	sbiw	r28, 0x0b	; 11
    172a:	0f b6       	in	r0, 0x3f	; 63
    172c:	f8 94       	cli
    172e:	de bf       	out	0x3e, r29	; 62
    1730:	0f be       	out	0x3f, r0	; 63
    1732:	cd bf       	out	0x3d, r28	; 61
    1734:	8a 83       	std	Y+2, r24	; 0x02
    1736:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndex)
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	28 2f       	mov	r18, r24
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	3b 87       	std	Y+11, r19	; 0x0b
    1744:	2a 87       	std	Y+10, r18	; 0x0a
    1746:	8a 85       	ldd	r24, Y+10	; 0x0a
    1748:	9b 85       	ldd	r25, Y+11	; 0x0b
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	09 f4       	brne	.+2      	; 0x1752 <EXTI_u8EXTIEnable+0x32>
    1750:	85 c0       	rjmp	.+266    	; 0x185c <EXTI_u8EXTIEnable+0x13c>
    1752:	2a 85       	ldd	r18, Y+10	; 0x0a
    1754:	3b 85       	ldd	r19, Y+11	; 0x0b
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <EXTI_u8EXTIEnable+0x3e>
    175c:	f9 c0       	rjmp	.+498    	; 0x1950 <EXTI_u8EXTIEnable+0x230>
    175e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1760:	9b 85       	ldd	r25, Y+11	; 0x0b
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	09 f0       	breq	.+2      	; 0x1768 <EXTI_u8EXTIEnable+0x48>
    1766:	23 c1       	rjmp	.+582    	; 0x19ae <EXTI_u8EXTIEnable+0x28e>
	{
		case EXTI_u8_INT0:
			switch(Copy_u8EdgeIndex)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	39 87       	std	Y+9, r19	; 0x09
    1770:	28 87       	std	Y+8, r18	; 0x08
    1772:	88 85       	ldd	r24, Y+8	; 0x08
    1774:	99 85       	ldd	r25, Y+9	; 0x09
    1776:	81 30       	cpi	r24, 0x01	; 1
    1778:	91 05       	cpc	r25, r1
    177a:	61 f1       	breq	.+88     	; 0x17d4 <EXTI_u8EXTIEnable+0xb4>
    177c:	28 85       	ldd	r18, Y+8	; 0x08
    177e:	39 85       	ldd	r19, Y+9	; 0x09
    1780:	22 30       	cpi	r18, 0x02	; 2
    1782:	31 05       	cpc	r19, r1
    1784:	2c f4       	brge	.+10     	; 0x1790 <EXTI_u8EXTIEnable+0x70>
    1786:	88 85       	ldd	r24, Y+8	; 0x08
    1788:	99 85       	ldd	r25, Y+9	; 0x09
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f0       	breq	.+26     	; 0x17a8 <EXTI_u8EXTIEnable+0x88>
    178e:	64 c0       	rjmp	.+200    	; 0x1858 <EXTI_u8EXTIEnable+0x138>
    1790:	28 85       	ldd	r18, Y+8	; 0x08
    1792:	39 85       	ldd	r19, Y+9	; 0x09
    1794:	22 30       	cpi	r18, 0x02	; 2
    1796:	31 05       	cpc	r19, r1
    1798:	99 f1       	breq	.+102    	; 0x1800 <EXTI_u8EXTIEnable+0xe0>
    179a:	88 85       	ldd	r24, Y+8	; 0x08
    179c:	99 85       	ldd	r25, Y+9	; 0x09
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <EXTI_u8EXTIEnable+0x86>
    17a4:	43 c0       	rjmp	.+134    	; 0x182c <EXTI_u8EXTIEnable+0x10c>
    17a6:	58 c0       	rjmp	.+176    	; 0x1858 <EXTI_u8EXTIEnable+0x138>
			{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
    17a8:	a5 e5       	ldi	r26, 0x55	; 85
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e5       	ldi	r30, 0x55	; 85
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	82 60       	ori	r24, 0x02	; 2
    17b4:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
    17b6:	a5 e5       	ldi	r26, 0x55	; 85
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	e5 e5       	ldi	r30, 0x55	; 85
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	81 60       	ori	r24, 0x01	; 1
    17c2:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    17c4:	ab e5       	ldi	r26, 0x5B	; 91
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	eb e5       	ldi	r30, 0x5B	; 91
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 64       	ori	r24, 0x40	; 64
    17d0:	8c 93       	st	X, r24
    17d2:	ee c0       	rjmp	.+476    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				case EXTI_u8_FALLING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,1);
    17d4:	a5 e5       	ldi	r26, 0x55	; 85
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e5       	ldi	r30, 0x55	; 85
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	82 60       	ori	r24, 0x02	; 2
    17e0:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
    17e2:	a5 e5       	ldi	r26, 0x55	; 85
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	e5 e5       	ldi	r30, 0x55	; 85
    17e8:	f0 e0       	ldi	r31, 0x00	; 0
    17ea:	80 81       	ld	r24, Z
    17ec:	8e 7f       	andi	r24, 0xFE	; 254
    17ee:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    17f0:	ab e5       	ldi	r26, 0x5B	; 91
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e5       	ldi	r30, 0x5B	; 91
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	80 64       	ori	r24, 0x40	; 64
    17fc:	8c 93       	st	X, r24
    17fe:	d8 c0       	rjmp	.+432    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				case EXTI_u8_ANY_LOGICAL_CHANGE:
					CLR_BIT(EXTI_u8_MCUCR,1);
    1800:	a5 e5       	ldi	r26, 0x55	; 85
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e5 e5       	ldi	r30, 0x55	; 85
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8d 7f       	andi	r24, 0xFD	; 253
    180c:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,0);
    180e:	a5 e5       	ldi	r26, 0x55	; 85
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e5       	ldi	r30, 0x55	; 85
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    181c:	ab e5       	ldi	r26, 0x5B	; 91
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	eb e5       	ldi	r30, 0x5B	; 91
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	80 64       	ori	r24, 0x40	; 64
    1828:	8c 93       	st	X, r24
    182a:	c2 c0       	rjmp	.+388    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				case EXTI_u8_LOW_LEVEL:
					CLR_BIT(EXTI_u8_MCUCR,1);
    182c:	a5 e5       	ldi	r26, 0x55	; 85
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e5       	ldi	r30, 0x55	; 85
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	8d 7f       	andi	r24, 0xFD	; 253
    1838:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,0);
    183a:	a5 e5       	ldi	r26, 0x55	; 85
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e5 e5       	ldi	r30, 0x55	; 85
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	8e 7f       	andi	r24, 0xFE	; 254
    1846:	8c 93       	st	X, r24
					/* Enable EXTI0 */
					SET_BIT(EXTI_u8_GICR,6);
    1848:	ab e5       	ldi	r26, 0x5B	; 91
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	eb e5       	ldi	r30, 0x5B	; 91
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	80 64       	ori	r24, 0x40	; 64
    1854:	8c 93       	st	X, r24
    1856:	ac c0       	rjmp	.+344    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    1858:	19 82       	std	Y+1, r1	; 0x01
    185a:	aa c0       	rjmp	.+340    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
			}
		break;
		case EXTI_u8_INT1:
			switch(Copy_u8EdgeIndex)
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3f 83       	std	Y+7, r19	; 0x07
    1864:	2e 83       	std	Y+6, r18	; 0x06
    1866:	8e 81       	ldd	r24, Y+6	; 0x06
    1868:	9f 81       	ldd	r25, Y+7	; 0x07
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	91 05       	cpc	r25, r1
    186e:	61 f1       	breq	.+88     	; 0x18c8 <EXTI_u8EXTIEnable+0x1a8>
    1870:	2e 81       	ldd	r18, Y+6	; 0x06
    1872:	3f 81       	ldd	r19, Y+7	; 0x07
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	2c f4       	brge	.+10     	; 0x1884 <EXTI_u8EXTIEnable+0x164>
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	9f 81       	ldd	r25, Y+7	; 0x07
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	69 f0       	breq	.+26     	; 0x189c <EXTI_u8EXTIEnable+0x17c>
    1882:	64 c0       	rjmp	.+200    	; 0x194c <EXTI_u8EXTIEnable+0x22c>
    1884:	2e 81       	ldd	r18, Y+6	; 0x06
    1886:	3f 81       	ldd	r19, Y+7	; 0x07
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	99 f1       	breq	.+102    	; 0x18f4 <EXTI_u8EXTIEnable+0x1d4>
    188e:	8e 81       	ldd	r24, Y+6	; 0x06
    1890:	9f 81       	ldd	r25, Y+7	; 0x07
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	91 05       	cpc	r25, r1
    1896:	09 f4       	brne	.+2      	; 0x189a <EXTI_u8EXTIEnable+0x17a>
    1898:	43 c0       	rjmp	.+134    	; 0x1920 <EXTI_u8EXTIEnable+0x200>
    189a:	58 c0       	rjmp	.+176    	; 0x194c <EXTI_u8EXTIEnable+0x22c>
			{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,3);
    189c:	a5 e5       	ldi	r26, 0x55	; 85
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e5 e5       	ldi	r30, 0x55	; 85
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	88 60       	ori	r24, 0x08	; 8
    18a8:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,2);
    18aa:	a5 e5       	ldi	r26, 0x55	; 85
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e5 e5       	ldi	r30, 0x55	; 85
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	84 60       	ori	r24, 0x04	; 4
    18b6:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,7);
    18b8:	ab e5       	ldi	r26, 0x5B	; 91
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	eb e5       	ldi	r30, 0x5B	; 91
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 68       	ori	r24, 0x80	; 128
    18c4:	8c 93       	st	X, r24
    18c6:	74 c0       	rjmp	.+232    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				case EXTI_u8_FALLING_EDGE:
					SET_BIT(EXTI_u8_MCUCR,3);
    18c8:	a5 e5       	ldi	r26, 0x55	; 85
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e5       	ldi	r30, 0x55	; 85
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 60       	ori	r24, 0x08	; 8
    18d4:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,2);
    18d6:	a5 e5       	ldi	r26, 0x55	; 85
    18d8:	b0 e0       	ldi	r27, 0x00	; 0
    18da:	e5 e5       	ldi	r30, 0x55	; 85
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	8b 7f       	andi	r24, 0xFB	; 251
    18e2:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,7);
    18e4:	ab e5       	ldi	r26, 0x5B	; 91
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	eb e5       	ldi	r30, 0x5B	; 91
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	80 81       	ld	r24, Z
    18ee:	80 68       	ori	r24, 0x80	; 128
    18f0:	8c 93       	st	X, r24
    18f2:	5e c0       	rjmp	.+188    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				case EXTI_u8_ANY_LOGICAL_CHANGE:
					CLR_BIT(EXTI_u8_MCUCR,3);
    18f4:	a5 e5       	ldi	r26, 0x55	; 85
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e5 e5       	ldi	r30, 0x55	; 85
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	87 7f       	andi	r24, 0xF7	; 247
    1900:	8c 93       	st	X, r24
					SET_BIT(EXTI_u8_MCUCR,2);
    1902:	a5 e5       	ldi	r26, 0x55	; 85
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e5       	ldi	r30, 0x55	; 85
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	84 60       	ori	r24, 0x04	; 4
    190e:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,7);
    1910:	ab e5       	ldi	r26, 0x5B	; 91
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	eb e5       	ldi	r30, 0x5B	; 91
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	80 81       	ld	r24, Z
    191a:	80 68       	ori	r24, 0x80	; 128
    191c:	8c 93       	st	X, r24
    191e:	48 c0       	rjmp	.+144    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				case EXTI_u8_LOW_LEVEL:
					CLR_BIT(EXTI_u8_MCUCR,3);
    1920:	a5 e5       	ldi	r26, 0x55	; 85
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e5 e5       	ldi	r30, 0x55	; 85
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	87 7f       	andi	r24, 0xF7	; 247
    192c:	8c 93       	st	X, r24
					CLR_BIT(EXTI_u8_MCUCR,2);
    192e:	a5 e5       	ldi	r26, 0x55	; 85
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e5 e5       	ldi	r30, 0x55	; 85
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	8b 7f       	andi	r24, 0xFB	; 251
    193a:	8c 93       	st	X, r24
					/* Enable EXTI1 */
					SET_BIT(EXTI_u8_GICR,7);
    193c:	ab e5       	ldi	r26, 0x5B	; 91
    193e:	b0 e0       	ldi	r27, 0x00	; 0
    1940:	eb e5       	ldi	r30, 0x5B	; 91
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	80 68       	ori	r24, 0x80	; 128
    1948:	8c 93       	st	X, r24
    194a:	32 c0       	rjmp	.+100    	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    194c:	19 82       	std	Y+1, r1	; 0x01
    194e:	30 c0       	rjmp	.+96     	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
			}
		break;
		case EXTI_u8_INT2:
			switch(Copy_u8EdgeIndex)
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	28 2f       	mov	r18, r24
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	3d 83       	std	Y+5, r19	; 0x05
    1958:	2c 83       	std	Y+4, r18	; 0x04
    195a:	8c 81       	ldd	r24, Y+4	; 0x04
    195c:	9d 81       	ldd	r25, Y+5	; 0x05
    195e:	00 97       	sbiw	r24, 0x00	; 0
    1960:	31 f0       	breq	.+12     	; 0x196e <EXTI_u8EXTIEnable+0x24e>
    1962:	2c 81       	ldd	r18, Y+4	; 0x04
    1964:	3d 81       	ldd	r19, Y+5	; 0x05
    1966:	21 30       	cpi	r18, 0x01	; 1
    1968:	31 05       	cpc	r19, r1
    196a:	81 f0       	breq	.+32     	; 0x198c <EXTI_u8EXTIEnable+0x26c>
    196c:	1e c0       	rjmp	.+60     	; 0x19aa <EXTI_u8EXTIEnable+0x28a>
			{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCSR,6);
    196e:	a4 e5       	ldi	r26, 0x54	; 84
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e4 e5       	ldi	r30, 0x54	; 84
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	80 64       	ori	r24, 0x40	; 64
    197a:	8c 93       	st	X, r24
					/* Enable EXTI2 */
					SET_BIT(EXTI_u8_GICR,5);
    197c:	ab e5       	ldi	r26, 0x5B	; 91
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	eb e5       	ldi	r30, 0x5B	; 91
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	80 62       	ori	r24, 0x20	; 32
    1988:	8c 93       	st	X, r24
    198a:	12 c0       	rjmp	.+36     	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				case EXTI_u8_FALLING_EDGE:
					CLR_BIT(EXTI_u8_MCUCSR,6);
    198c:	a4 e5       	ldi	r26, 0x54	; 84
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e4 e5       	ldi	r30, 0x54	; 84
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7b       	andi	r24, 0xBF	; 191
    1998:	8c 93       	st	X, r24
					/* Enable EXTI2 */
					SET_BIT(EXTI_u8_GICR,5);
    199a:	ab e5       	ldi	r26, 0x5B	; 91
    199c:	b0 e0       	ldi	r27, 0x00	; 0
    199e:	eb e5       	ldi	r30, 0x5B	; 91
    19a0:	f0 e0       	ldi	r31, 0x00	; 0
    19a2:	80 81       	ld	r24, Z
    19a4:	80 62       	ori	r24, 0x20	; 32
    19a6:	8c 93       	st	X, r24
    19a8:	03 c0       	rjmp	.+6      	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
				break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    19aa:	19 82       	std	Y+1, r1	; 0x01
    19ac:	01 c0       	rjmp	.+2      	; 0x19b0 <EXTI_u8EXTIEnable+0x290>
			}
		break;
		default: Local_u8ErrorState = STD_TYPES_NOK;
    19ae:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    19b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19b2:	2b 96       	adiw	r28, 0x0b	; 11
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <EXTI_u8EXTIDisable>:



u8 EXTI_u8EXTIDisable(u8 Copy_u8EXTIIndex)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <EXTI_u8EXTIDisable+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <EXTI_u8EXTIDisable+0x8>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndex)
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3c 83       	std	Y+4, r19	; 0x04
    19de:	2b 83       	std	Y+3, r18	; 0x03
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	9c 81       	ldd	r25, Y+4	; 0x04
    19e4:	81 30       	cpi	r24, 0x01	; 1
    19e6:	91 05       	cpc	r25, r1
    19e8:	89 f0       	breq	.+34     	; 0x1a0c <EXTI_u8EXTIDisable+0x48>
    19ea:	2b 81       	ldd	r18, Y+3	; 0x03
    19ec:	3c 81       	ldd	r19, Y+4	; 0x04
    19ee:	22 30       	cpi	r18, 0x02	; 2
    19f0:	31 05       	cpc	r19, r1
    19f2:	a1 f0       	breq	.+40     	; 0x1a1c <EXTI_u8EXTIDisable+0x58>
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	c1 f4       	brne	.+48     	; 0x1a2c <EXTI_u8EXTIDisable+0x68>
	{
		case EXTI_u8_INT0:
			/* Enable EXTI0 */
			CLR_BIT(EXTI_u8_GICR,6);
    19fc:	ab e5       	ldi	r26, 0x5B	; 91
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	eb e5       	ldi	r30, 0x5B	; 91
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	8f 7b       	andi	r24, 0xBF	; 191
    1a08:	8c 93       	st	X, r24
    1a0a:	11 c0       	rjmp	.+34     	; 0x1a2e <EXTI_u8EXTIDisable+0x6a>
		break;
		case EXTI_u8_INT1:
			/* Enable EXTI1 */
			CLR_BIT(EXTI_u8_GICR,7);
    1a0c:	ab e5       	ldi	r26, 0x5B	; 91
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	eb e5       	ldi	r30, 0x5B	; 91
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	8f 77       	andi	r24, 0x7F	; 127
    1a18:	8c 93       	st	X, r24
    1a1a:	09 c0       	rjmp	.+18     	; 0x1a2e <EXTI_u8EXTIDisable+0x6a>
		break;
		case EXTI_u8_INT2:
			/* Enable EXTI2 */
			CLR_BIT(EXTI_u8_GICR,5);
    1a1c:	ab e5       	ldi	r26, 0x5B	; 91
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	eb e5       	ldi	r30, 0x5B	; 91
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8f 7d       	andi	r24, 0xDF	; 223
    1a28:	8c 93       	st	X, r24
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <EXTI_u8EXTIDisable+0x6a>
		break;
		default: Local_u8ErrorState = STD_TYPES_NOK;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	cf 91       	pop	r28
    1a3a:	df 91       	pop	r29
    1a3c:	08 95       	ret

00001a3e <EXTI_u8EXTISetEdge>:

u8 EXTI_u8EXTISetEdge(u8 Copy_u8EXTIIndex,u8 Copy_u8EdgeIndex)
{
    1a3e:	df 93       	push	r29
    1a40:	cf 93       	push	r28
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	2b 97       	sbiw	r28, 0x0b	; 11
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	f8 94       	cli
    1a4c:	de bf       	out	0x3e, r29	; 62
    1a4e:	0f be       	out	0x3f, r0	; 63
    1a50:	cd bf       	out	0x3d, r28	; 61
    1a52:	8a 83       	std	Y+2, r24	; 0x02
    1a54:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8EXTIIndex)
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	3b 87       	std	Y+11, r19	; 0x0b
    1a62:	2a 87       	std	Y+10, r18	; 0x0a
    1a64:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a66:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a68:	81 30       	cpi	r24, 0x01	; 1
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	09 f4       	brne	.+2      	; 0x1a70 <EXTI_u8EXTISetEdge+0x32>
    1a6e:	68 c0       	rjmp	.+208    	; 0x1b40 <EXTI_u8EXTISetEdge+0x102>
    1a70:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a72:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a74:	22 30       	cpi	r18, 0x02	; 2
    1a76:	31 05       	cpc	r19, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <EXTI_u8EXTISetEdge+0x3e>
    1a7a:	bf c0       	rjmp	.+382    	; 0x1bfa <EXTI_u8EXTISetEdge+0x1bc>
    1a7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	09 f0       	breq	.+2      	; 0x1a86 <EXTI_u8EXTISetEdge+0x48>
    1a84:	db c0       	rjmp	.+438    	; 0x1c3c <EXTI_u8EXTISetEdge+0x1fe>
	{
	case EXTI_u8_INT0:
		switch(Copy_u8EdgeIndex)
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	39 87       	std	Y+9, r19	; 0x09
    1a8e:	28 87       	std	Y+8, r18	; 0x08
    1a90:	88 85       	ldd	r24, Y+8	; 0x08
    1a92:	99 85       	ldd	r25, Y+9	; 0x09
    1a94:	81 30       	cpi	r24, 0x01	; 1
    1a96:	91 05       	cpc	r25, r1
    1a98:	21 f1       	breq	.+72     	; 0x1ae2 <EXTI_u8EXTISetEdge+0xa4>
    1a9a:	28 85       	ldd	r18, Y+8	; 0x08
    1a9c:	39 85       	ldd	r19, Y+9	; 0x09
    1a9e:	22 30       	cpi	r18, 0x02	; 2
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <EXTI_u8EXTISetEdge+0x70>
    1aa4:	88 85       	ldd	r24, Y+8	; 0x08
    1aa6:	99 85       	ldd	r25, Y+9	; 0x09
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	61 f0       	breq	.+24     	; 0x1ac4 <EXTI_u8EXTISetEdge+0x86>
    1aac:	47 c0       	rjmp	.+142    	; 0x1b3c <EXTI_u8EXTISetEdge+0xfe>
    1aae:	28 85       	ldd	r18, Y+8	; 0x08
    1ab0:	39 85       	ldd	r19, Y+9	; 0x09
    1ab2:	22 30       	cpi	r18, 0x02	; 2
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	21 f1       	breq	.+72     	; 0x1b00 <EXTI_u8EXTISetEdge+0xc2>
    1ab8:	88 85       	ldd	r24, Y+8	; 0x08
    1aba:	99 85       	ldd	r25, Y+9	; 0x09
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	71 f1       	breq	.+92     	; 0x1b1e <EXTI_u8EXTISetEdge+0xe0>
    1ac2:	3c c0       	rjmp	.+120    	; 0x1b3c <EXTI_u8EXTISetEdge+0xfe>
		{
		case EXTI_u8_RAISING_EDGE:
			SET_BIT(EXTI_u8_MCUCR,1);
    1ac4:	a5 e5       	ldi	r26, 0x55	; 85
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e5 e5       	ldi	r30, 0x55	; 85
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	82 60       	ori	r24, 0x02	; 2
    1ad0:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR,0);
    1ad2:	a5 e5       	ldi	r26, 0x55	; 85
    1ad4:	b0 e0       	ldi	r27, 0x00	; 0
    1ad6:	e5 e5       	ldi	r30, 0x55	; 85
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	81 60       	ori	r24, 0x01	; 1
    1ade:	8c 93       	st	X, r24
    1ae0:	ae c0       	rjmp	.+348    	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
			break;
		case EXTI_u8_FALLING_EDGE:
			SET_BIT(EXTI_u8_MCUCR,1);
    1ae2:	a5 e5       	ldi	r26, 0x55	; 85
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e5       	ldi	r30, 0x55	; 85
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	82 60       	ori	r24, 0x02	; 2
    1aee:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR,0);
    1af0:	a5 e5       	ldi	r26, 0x55	; 85
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e5 e5       	ldi	r30, 0x55	; 85
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	8e 7f       	andi	r24, 0xFE	; 254
    1afc:	8c 93       	st	X, r24
    1afe:	9f c0       	rjmp	.+318    	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
			break;
		case EXTI_u8_ANY_LOGICAL_CHANGE:
			CLR_BIT(EXTI_u8_MCUCR,1);
    1b00:	a5 e5       	ldi	r26, 0x55	; 85
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	e5 e5       	ldi	r30, 0x55	; 85
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	8d 7f       	andi	r24, 0xFD	; 253
    1b0c:	8c 93       	st	X, r24
			SET_BIT(EXTI_u8_MCUCR,0);
    1b0e:	a5 e5       	ldi	r26, 0x55	; 85
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e5 e5       	ldi	r30, 0x55	; 85
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	81 60       	ori	r24, 0x01	; 1
    1b1a:	8c 93       	st	X, r24
    1b1c:	90 c0       	rjmp	.+288    	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
			break;
		case EXTI_u8_LOW_LEVEL:
			CLR_BIT(EXTI_u8_MCUCR,1);
    1b1e:	a5 e5       	ldi	r26, 0x55	; 85
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e5       	ldi	r30, 0x55	; 85
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	8d 7f       	andi	r24, 0xFD	; 253
    1b2a:	8c 93       	st	X, r24
			CLR_BIT(EXTI_u8_MCUCR,0);
    1b2c:	a5 e5       	ldi	r26, 0x55	; 85
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e5 e5       	ldi	r30, 0x55	; 85
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	8e 7f       	andi	r24, 0xFE	; 254
    1b38:	8c 93       	st	X, r24
    1b3a:	81 c0       	rjmp	.+258    	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
			break;
		default: Local_u8ErrorState = STD_TYPES_NOK;
    1b3c:	19 82       	std	Y+1, r1	; 0x01
    1b3e:	7f c0       	rjmp	.+254    	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
		}
		break;
		case EXTI_u8_INT1:
			switch(Copy_u8EdgeIndex)
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	3f 83       	std	Y+7, r19	; 0x07
    1b48:	2e 83       	std	Y+6, r18	; 0x06
    1b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b4e:	81 30       	cpi	r24, 0x01	; 1
    1b50:	91 05       	cpc	r25, r1
    1b52:	21 f1       	breq	.+72     	; 0x1b9c <EXTI_u8EXTISetEdge+0x15e>
    1b54:	2e 81       	ldd	r18, Y+6	; 0x06
    1b56:	3f 81       	ldd	r19, Y+7	; 0x07
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <EXTI_u8EXTISetEdge+0x12a>
    1b5e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b60:	9f 81       	ldd	r25, Y+7	; 0x07
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	61 f0       	breq	.+24     	; 0x1b7e <EXTI_u8EXTISetEdge+0x140>
    1b66:	47 c0       	rjmp	.+142    	; 0x1bf6 <EXTI_u8EXTISetEdge+0x1b8>
    1b68:	2e 81       	ldd	r18, Y+6	; 0x06
    1b6a:	3f 81       	ldd	r19, Y+7	; 0x07
    1b6c:	22 30       	cpi	r18, 0x02	; 2
    1b6e:	31 05       	cpc	r19, r1
    1b70:	21 f1       	breq	.+72     	; 0x1bba <EXTI_u8EXTISetEdge+0x17c>
    1b72:	8e 81       	ldd	r24, Y+6	; 0x06
    1b74:	9f 81       	ldd	r25, Y+7	; 0x07
    1b76:	83 30       	cpi	r24, 0x03	; 3
    1b78:	91 05       	cpc	r25, r1
    1b7a:	71 f1       	breq	.+92     	; 0x1bd8 <EXTI_u8EXTISetEdge+0x19a>
    1b7c:	3c c0       	rjmp	.+120    	; 0x1bf6 <EXTI_u8EXTISetEdge+0x1b8>
			{
			case EXTI_u8_RAISING_EDGE:
				SET_BIT(EXTI_u8_MCUCR,3);
    1b7e:	a5 e5       	ldi	r26, 0x55	; 85
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e5       	ldi	r30, 0x55	; 85
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	88 60       	ori	r24, 0x08	; 8
    1b8a:	8c 93       	st	X, r24
				SET_BIT(EXTI_u8_MCUCR,2);
    1b8c:	a5 e5       	ldi	r26, 0x55	; 85
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e5 e5       	ldi	r30, 0x55	; 85
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	84 60       	ori	r24, 0x04	; 4
    1b98:	8c 93       	st	X, r24
    1b9a:	51 c0       	rjmp	.+162    	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
				break;
			case EXTI_u8_FALLING_EDGE:
				SET_BIT(EXTI_u8_MCUCR,3);
    1b9c:	a5 e5       	ldi	r26, 0x55	; 85
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e5 e5       	ldi	r30, 0x55	; 85
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 60       	ori	r24, 0x08	; 8
    1ba8:	8c 93       	st	X, r24
				CLR_BIT(EXTI_u8_MCUCR,2);;
    1baa:	a5 e5       	ldi	r26, 0x55	; 85
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e5 e5       	ldi	r30, 0x55	; 85
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8b 7f       	andi	r24, 0xFB	; 251
    1bb6:	8c 93       	st	X, r24
    1bb8:	42 c0       	rjmp	.+132    	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
				break;
			case EXTI_u8_ANY_LOGICAL_CHANGE:
				CLR_BIT(EXTI_u8_MCUCR,3);
    1bba:	a5 e5       	ldi	r26, 0x55	; 85
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e5 e5       	ldi	r30, 0x55	; 85
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	87 7f       	andi	r24, 0xF7	; 247
    1bc6:	8c 93       	st	X, r24
				SET_BIT(EXTI_u8_MCUCR,2);
    1bc8:	a5 e5       	ldi	r26, 0x55	; 85
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e5 e5       	ldi	r30, 0x55	; 85
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	84 60       	ori	r24, 0x04	; 4
    1bd4:	8c 93       	st	X, r24
    1bd6:	33 c0       	rjmp	.+102    	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
				break;
			case EXTI_u8_LOW_LEVEL:
				CLR_BIT(EXTI_u8_MCUCR,3);
    1bd8:	a5 e5       	ldi	r26, 0x55	; 85
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e5 e5       	ldi	r30, 0x55	; 85
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	87 7f       	andi	r24, 0xF7	; 247
    1be4:	8c 93       	st	X, r24
				CLR_BIT(EXTI_u8_MCUCR,2);
    1be6:	a5 e5       	ldi	r26, 0x55	; 85
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	e5 e5       	ldi	r30, 0x55	; 85
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	8b 7f       	andi	r24, 0xFB	; 251
    1bf2:	8c 93       	st	X, r24
    1bf4:	24 c0       	rjmp	.+72     	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
				break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    1bf6:	19 82       	std	Y+1, r1	; 0x01
    1bf8:	22 c0       	rjmp	.+68     	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
			}
			break;
			case EXTI_u8_INT2:
				switch(Copy_u8EdgeIndex)
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	3d 83       	std	Y+5, r19	; 0x05
    1c02:	2c 83       	std	Y+4, r18	; 0x04
    1c04:	8c 81       	ldd	r24, Y+4	; 0x04
    1c06:	9d 81       	ldd	r25, Y+5	; 0x05
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	31 f0       	breq	.+12     	; 0x1c18 <EXTI_u8EXTISetEdge+0x1da>
    1c0c:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0e:	3d 81       	ldd	r19, Y+5	; 0x05
    1c10:	21 30       	cpi	r18, 0x01	; 1
    1c12:	31 05       	cpc	r19, r1
    1c14:	49 f0       	breq	.+18     	; 0x1c28 <EXTI_u8EXTISetEdge+0x1ea>
    1c16:	10 c0       	rjmp	.+32     	; 0x1c38 <EXTI_u8EXTISetEdge+0x1fa>
				{
				case EXTI_u8_RAISING_EDGE:
					SET_BIT(EXTI_u8_MCUCSR,6);
    1c18:	a4 e5       	ldi	r26, 0x54	; 84
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e4 e5       	ldi	r30, 0x54	; 84
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	80 64       	ori	r24, 0x40	; 64
    1c24:	8c 93       	st	X, r24
    1c26:	0b c0       	rjmp	.+22     	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
					break;
				case EXTI_u8_FALLING_EDGE:
					CLR_BIT(EXTI_u8_MCUCSR,6);
    1c28:	a4 e5       	ldi	r26, 0x54	; 84
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e4 e5       	ldi	r30, 0x54	; 84
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	8f 7b       	andi	r24, 0xBF	; 191
    1c34:	8c 93       	st	X, r24
    1c36:	03 c0       	rjmp	.+6      	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
					break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    1c38:	19 82       	std	Y+1, r1	; 0x01
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <EXTI_u8EXTISetEdge+0x200>
				}
				break;
				default: Local_u8ErrorState = STD_TYPES_NOK;
    1c3c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c40:	2b 96       	adiw	r28, 0x0b	; 11
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	f8 94       	cli
    1c46:	de bf       	out	0x3e, r29	; 62
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	cd bf       	out	0x3d, r28	; 61
    1c4c:	cf 91       	pop	r28
    1c4e:	df 91       	pop	r29
    1c50:	08 95       	ret

00001c52 <EXTI_u8EXTISetCallBack>:

u8 EXTI_u8EXTISetCallBack(u8 Copy_u8EXTIIndex, void (*Copy_pf)(void))
{
    1c52:	df 93       	push	r29
    1c54:	cf 93       	push	r28
    1c56:	00 d0       	rcall	.+0      	; 0x1c58 <EXTI_u8EXTISetCallBack+0x6>
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <EXTI_u8EXTISetCallBack+0x8>
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	8a 83       	std	Y+2, r24	; 0x02
    1c60:	7c 83       	std	Y+4, r23	; 0x04
    1c62:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8EXTIIndex) <= EXTI_u8_INT2 && (Copy_pf != NULL))
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	83 30       	cpi	r24, 0x03	; 3
    1c6c:	88 f4       	brcc	.+34     	; 0x1c90 <EXTI_u8EXTISetCallBack+0x3e>
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	69 f0       	breq	.+26     	; 0x1c90 <EXTI_u8EXTISetCallBack+0x3e>
	{
		EXTI_ApfExtI[Copy_u8EXTIIndex] = Copy_pf;
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	fc 01       	movw	r30, r24
    1c82:	e6 58       	subi	r30, 0x86	; 134
    1c84:	fe 4f       	sbci	r31, 0xFE	; 254
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	91 83       	std	Z+1, r25	; 0x01
    1c8c:	80 83       	st	Z, r24
    1c8e:	01 c0       	rjmp	.+2      	; 0x1c92 <EXTI_u8EXTISetCallBack+0x40>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1c90:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c94:	0f 90       	pop	r0
    1c96:	0f 90       	pop	r0
    1c98:	0f 90       	pop	r0
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <__vector_1>:

/* Prototype for ISR of EXTI0 */

void __vector_1(void)    __attribute__((signal));
void __vector_1(void)
{
    1ca2:	1f 92       	push	r1
    1ca4:	0f 92       	push	r0
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	0f 92       	push	r0
    1caa:	11 24       	eor	r1, r1
    1cac:	2f 93       	push	r18
    1cae:	3f 93       	push	r19
    1cb0:	4f 93       	push	r20
    1cb2:	5f 93       	push	r21
    1cb4:	6f 93       	push	r22
    1cb6:	7f 93       	push	r23
    1cb8:	8f 93       	push	r24
    1cba:	9f 93       	push	r25
    1cbc:	af 93       	push	r26
    1cbe:	bf 93       	push	r27
    1cc0:	ef 93       	push	r30
    1cc2:	ff 93       	push	r31
    1cc4:	df 93       	push	r29
    1cc6:	cf 93       	push	r28
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExtI[EXTI_u8_INT0] != NULL)
    1ccc:	80 91 7a 01 	lds	r24, 0x017A
    1cd0:	90 91 7b 01 	lds	r25, 0x017B
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	29 f0       	breq	.+10     	; 0x1ce2 <__vector_1+0x40>
	{
		EXTI_ApfExtI[EXTI_u8_INT0]();
    1cd8:	e0 91 7a 01 	lds	r30, 0x017A
    1cdc:	f0 91 7b 01 	lds	r31, 0x017B
    1ce0:	09 95       	icall
	}
}
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	ff 91       	pop	r31
    1ce8:	ef 91       	pop	r30
    1cea:	bf 91       	pop	r27
    1cec:	af 91       	pop	r26
    1cee:	9f 91       	pop	r25
    1cf0:	8f 91       	pop	r24
    1cf2:	7f 91       	pop	r23
    1cf4:	6f 91       	pop	r22
    1cf6:	5f 91       	pop	r21
    1cf8:	4f 91       	pop	r20
    1cfa:	3f 91       	pop	r19
    1cfc:	2f 91       	pop	r18
    1cfe:	0f 90       	pop	r0
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	0f 90       	pop	r0
    1d04:	1f 90       	pop	r1
    1d06:	18 95       	reti

00001d08 <__vector_2>:

/* Prototype for ISR of EXTI1 */
void __vector_2(void)    __attribute__((signal));
void __vector_2(void)
{
    1d08:	1f 92       	push	r1
    1d0a:	0f 92       	push	r0
    1d0c:	0f b6       	in	r0, 0x3f	; 63
    1d0e:	0f 92       	push	r0
    1d10:	11 24       	eor	r1, r1
    1d12:	2f 93       	push	r18
    1d14:	3f 93       	push	r19
    1d16:	4f 93       	push	r20
    1d18:	5f 93       	push	r21
    1d1a:	6f 93       	push	r22
    1d1c:	7f 93       	push	r23
    1d1e:	8f 93       	push	r24
    1d20:	9f 93       	push	r25
    1d22:	af 93       	push	r26
    1d24:	bf 93       	push	r27
    1d26:	ef 93       	push	r30
    1d28:	ff 93       	push	r31
    1d2a:	df 93       	push	r29
    1d2c:	cf 93       	push	r28
    1d2e:	cd b7       	in	r28, 0x3d	; 61
    1d30:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExtI[EXTI_u8_INT1] != NULL)
    1d32:	80 91 7c 01 	lds	r24, 0x017C
    1d36:	90 91 7d 01 	lds	r25, 0x017D
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	29 f0       	breq	.+10     	; 0x1d48 <__vector_2+0x40>
	{
		EXTI_ApfExtI[EXTI_u8_INT1]();
    1d3e:	e0 91 7c 01 	lds	r30, 0x017C
    1d42:	f0 91 7d 01 	lds	r31, 0x017D
    1d46:	09 95       	icall
	}
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	ff 91       	pop	r31
    1d4e:	ef 91       	pop	r30
    1d50:	bf 91       	pop	r27
    1d52:	af 91       	pop	r26
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	7f 91       	pop	r23
    1d5a:	6f 91       	pop	r22
    1d5c:	5f 91       	pop	r21
    1d5e:	4f 91       	pop	r20
    1d60:	3f 91       	pop	r19
    1d62:	2f 91       	pop	r18
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <__vector_3>:

/* Prototype for ISR of EXTI2 */
void __vector_3(void)    __attribute__((signal));
void __vector_3(void)
{
    1d6e:	1f 92       	push	r1
    1d70:	0f 92       	push	r0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	2f 93       	push	r18
    1d7a:	3f 93       	push	r19
    1d7c:	4f 93       	push	r20
    1d7e:	5f 93       	push	r21
    1d80:	6f 93       	push	r22
    1d82:	7f 93       	push	r23
    1d84:	8f 93       	push	r24
    1d86:	9f 93       	push	r25
    1d88:	af 93       	push	r26
    1d8a:	bf 93       	push	r27
    1d8c:	ef 93       	push	r30
    1d8e:	ff 93       	push	r31
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfExtI[EXTI_u8_INT2] != NULL)
    1d98:	80 91 7e 01 	lds	r24, 0x017E
    1d9c:	90 91 7f 01 	lds	r25, 0x017F
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	29 f0       	breq	.+10     	; 0x1dae <__vector_3+0x40>
	{
		EXTI_ApfExtI[EXTI_u8_INT2]();
    1da4:	e0 91 7e 01 	lds	r30, 0x017E
    1da8:	f0 91 7f 01 	lds	r31, 0x017F
    1dac:	09 95       	icall
	}
}
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	ff 91       	pop	r31
    1db4:	ef 91       	pop	r30
    1db6:	bf 91       	pop	r27
    1db8:	af 91       	pop	r26
    1dba:	9f 91       	pop	r25
    1dbc:	8f 91       	pop	r24
    1dbe:	7f 91       	pop	r23
    1dc0:	6f 91       	pop	r22
    1dc2:	5f 91       	pop	r21
    1dc4:	4f 91       	pop	r20
    1dc6:	3f 91       	pop	r19
    1dc8:	2f 91       	pop	r18
    1dca:	0f 90       	pop	r0
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	0f 90       	pop	r0
    1dd0:	1f 90       	pop	r1
    1dd2:	18 95       	reti

00001dd4 <GI_voidEnableGI>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidEnableGI(void)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	cd b7       	in	r28, 0x3d	; 61
    1dda:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
    1ddc:	af e5       	ldi	r26, 0x5F	; 95
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	ef e5       	ldi	r30, 0x5F	; 95
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	80 68       	ori	r24, 0x80	; 128
    1de8:	8c 93       	st	X, r24
}
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	08 95       	ret

00001df0 <GI_voidDisableGI>:

void GI_voidDisableGI(void)
{
    1df0:	df 93       	push	r29
    1df2:	cf 93       	push	r28
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
    1df8:	af e5       	ldi	r26, 0x5F	; 95
    1dfa:	b0 e0       	ldi	r27, 0x00	; 0
    1dfc:	ef e5       	ldi	r30, 0x5F	; 95
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	8f 77       	andi	r24, 0x7F	; 127
    1e04:	8c 93       	st	X, r24
    1e06:	cf 91       	pop	r28
    1e08:	df 91       	pop	r29
    1e0a:	08 95       	ret

00001e0c <LCD_voidInit>:
#include "LCD_config.h"
#include "LCD_private.h"

/************** APIs *************************/
void LCD_voidInit(void) 
{
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	cc 54       	subi	r28, 0x4C	; 76
    1e1a:	d0 40       	sbci	r29, 0x00	; 0
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	fe 01       	movw	r30, r28
    1e28:	e7 5b       	subi	r30, 0xB7	; 183
    1e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	ac e0       	ldi	r26, 0x0C	; 12
    1e32:	b2 e4       	ldi	r27, 0x42	; 66
    1e34:	80 83       	st	Z, r24
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	a2 83       	std	Z+2, r26	; 0x02
    1e3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3c:	8e 01       	movw	r16, r28
    1e3e:	0b 5b       	subi	r16, 0xBB	; 187
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	fe 01       	movw	r30, r28
    1e44:	e7 5b       	subi	r30, 0xB7	; 183
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a ef       	ldi	r20, 0xFA	; 250
    1e56:	54 e4       	ldi	r21, 0x44	; 68
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	f8 01       	movw	r30, r16
    1e62:	80 83       	st	Z, r24
    1e64:	91 83       	std	Z+1, r25	; 0x01
    1e66:	a2 83       	std	Z+2, r26	; 0x02
    1e68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	eb 5b       	subi	r30, 0xBB	; 187
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	82 81       	ldd	r24, Z+2	; 0x02
    1e76:	93 81       	ldd	r25, Z+3	; 0x03
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e8       	ldi	r20, 0x80	; 128
    1e7e:	5f e3       	ldi	r21, 0x3F	; 63
    1e80:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e84:	88 23       	and	r24, r24
    1e86:	44 f4       	brge	.+16     	; 0x1e98 <LCD_voidInit+0x8c>
		__ticks = 1;
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ed 5b       	subi	r30, 0xBD	; 189
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	80 83       	st	Z, r24
    1e96:	64 c0       	rjmp	.+200    	; 0x1f60 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1e98:	fe 01       	movw	r30, r28
    1e9a:	eb 5b       	subi	r30, 0xBB	; 187
    1e9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9e:	60 81       	ld	r22, Z
    1ea0:	71 81       	ldd	r23, Z+1	; 0x01
    1ea2:	82 81       	ldd	r24, Z+2	; 0x02
    1ea4:	93 81       	ldd	r25, Z+3	; 0x03
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	3f ef       	ldi	r19, 0xFF	; 255
    1eaa:	4f e7       	ldi	r20, 0x7F	; 127
    1eac:	57 e4       	ldi	r21, 0x47	; 71
    1eae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb2:	18 16       	cp	r1, r24
    1eb4:	0c f0       	brlt	.+2      	; 0x1eb8 <LCD_voidInit+0xac>
    1eb6:	43 c0       	rjmp	.+134    	; 0x1f3e <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb8:	fe 01       	movw	r30, r28
    1eba:	e7 5b       	subi	r30, 0xB7	; 183
    1ebc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebe:	60 81       	ld	r22, Z
    1ec0:	71 81       	ldd	r23, Z+1	; 0x01
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	93 81       	ldd	r25, Z+3	; 0x03
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e2       	ldi	r20, 0x20	; 32
    1ecc:	51 e4       	ldi	r21, 0x41	; 65
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8e 01       	movw	r16, r28
    1ed8:	0d 5b       	subi	r16, 0xBD	; 189
    1eda:	1f 4f       	sbci	r17, 0xFF	; 255
    1edc:	bc 01       	movw	r22, r24
    1ede:	cd 01       	movw	r24, r26
    1ee0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	f8 01       	movw	r30, r16
    1eea:	91 83       	std	Z+1, r25	; 0x01
    1eec:	80 83       	st	Z, r24
    1eee:	1f c0       	rjmp	.+62     	; 0x1f2e <LCD_voidInit+0x122>
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	ef 5b       	subi	r30, 0xBF	; 191
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	88 ec       	ldi	r24, 0xC8	; 200
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	91 83       	std	Z+1, r25	; 0x01
    1efc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1efe:	fe 01       	movw	r30, r28
    1f00:	ef 5b       	subi	r30, 0xBF	; 191
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	91 81       	ldd	r25, Z+1	; 0x01
    1f08:	01 97       	sbiw	r24, 0x01	; 1
    1f0a:	f1 f7       	brne	.-4      	; 0x1f08 <LCD_voidInit+0xfc>
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	ef 5b       	subi	r30, 0xBF	; 191
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	91 83       	std	Z+1, r25	; 0x01
    1f14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	de 01       	movw	r26, r28
    1f18:	ad 5b       	subi	r26, 0xBD	; 189
    1f1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1c:	fe 01       	movw	r30, r28
    1f1e:	ed 5b       	subi	r30, 0xBD	; 189
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	80 81       	ld	r24, Z
    1f24:	91 81       	ldd	r25, Z+1	; 0x01
    1f26:	01 97       	sbiw	r24, 0x01	; 1
    1f28:	11 96       	adiw	r26, 0x01	; 1
    1f2a:	9c 93       	st	X, r25
    1f2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2e:	fe 01       	movw	r30, r28
    1f30:	ed 5b       	subi	r30, 0xBD	; 189
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 81       	ld	r24, Z
    1f36:	91 81       	ldd	r25, Z+1	; 0x01
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	d1 f6       	brne	.-76     	; 0x1ef0 <LCD_voidInit+0xe4>
    1f3c:	24 c0       	rjmp	.+72     	; 0x1f86 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3e:	8e 01       	movw	r16, r28
    1f40:	0d 5b       	subi	r16, 0xBD	; 189
    1f42:	1f 4f       	sbci	r17, 0xFF	; 255
    1f44:	fe 01       	movw	r30, r28
    1f46:	eb 5b       	subi	r30, 0xBB	; 187
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	60 81       	ld	r22, Z
    1f4c:	71 81       	ldd	r23, Z+1	; 0x01
    1f4e:	82 81       	ldd	r24, Z+2	; 0x02
    1f50:	93 81       	ldd	r25, Z+3	; 0x03
    1f52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	f8 01       	movw	r30, r16
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
    1f60:	fe 01       	movw	r30, r28
    1f62:	ed 5b       	subi	r30, 0xBD	; 189
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ff 96       	adiw	r30, 0x3f	; 63
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
    1f72:	fe 01       	movw	r30, r28
    1f74:	ff 96       	adiw	r30, 0x3f	; 63
    1f76:	80 81       	ld	r24, Z
    1f78:	91 81       	ldd	r25, Z+1	; 0x01
    1f7a:	01 97       	sbiw	r24, 0x01	; 1
    1f7c:	f1 f7       	brne	.-4      	; 0x1f7a <LCD_voidInit+0x16e>
    1f7e:	fe 01       	movw	r30, r28
    1f80:	ff 96       	adiw	r30, 0x3f	; 63
    1f82:	91 83       	std	Z+1, r25	; 0x01
    1f84:	80 83       	st	Z, r24
	/* Step 2: Function Set Command
	1- DL: 1 --> 8 bit-mode
	2- N:  1 --> 2 lines
	3- F:  0 --> 5 * 7 dots */
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	LCD_voidSendCmnd(LCD_u8_FUNCTION_SET_CMND);
    1f86:	88 e3       	ldi	r24, 0x38	; 56
    1f88:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a0 e2       	ldi	r26, 0x20	; 32
    1f92:	b2 e4       	ldi	r27, 0x42	; 66
    1f94:	8b af       	std	Y+59, r24	; 0x3b
    1f96:	9c af       	std	Y+60, r25	; 0x3c
    1f98:	ad af       	std	Y+61, r26	; 0x3d
    1f9a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f9c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f9e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1fa0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fa2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fa4:	2b ea       	ldi	r18, 0xAB	; 171
    1fa6:	3a ea       	ldi	r19, 0xAA	; 170
    1fa8:	4a e2       	ldi	r20, 0x2A	; 42
    1faa:	50 e4       	ldi	r21, 0x40	; 64
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	8f ab       	std	Y+55, r24	; 0x37
    1fb6:	98 af       	std	Y+56, r25	; 0x38
    1fb8:	a9 af       	std	Y+57, r26	; 0x39
    1fba:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1fbc:	6f a9       	ldd	r22, Y+55	; 0x37
    1fbe:	78 ad       	ldd	r23, Y+56	; 0x38
    1fc0:	89 ad       	ldd	r24, Y+57	; 0x39
    1fc2:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	40 e8       	ldi	r20, 0x80	; 128
    1fca:	5f e3       	ldi	r21, 0x3F	; 63
    1fcc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fd0:	88 23       	and	r24, r24
    1fd2:	1c f4       	brge	.+6      	; 0x1fda <LCD_voidInit+0x1ce>
		__ticks = 1;
    1fd4:	81 e0       	ldi	r24, 0x01	; 1
    1fd6:	8e ab       	std	Y+54, r24	; 0x36
    1fd8:	91 c0       	rjmp	.+290    	; 0x20fc <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1fda:	6f a9       	ldd	r22, Y+55	; 0x37
    1fdc:	78 ad       	ldd	r23, Y+56	; 0x38
    1fde:	89 ad       	ldd	r24, Y+57	; 0x39
    1fe0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	4f e7       	ldi	r20, 0x7F	; 127
    1fe8:	53 e4       	ldi	r21, 0x43	; 67
    1fea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fee:	18 16       	cp	r1, r24
    1ff0:	0c f0       	brlt	.+2      	; 0x1ff4 <LCD_voidInit+0x1e8>
    1ff2:	7b c0       	rjmp	.+246    	; 0x20ea <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1ff4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ff6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ff8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ffa:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	4a e7       	ldi	r20, 0x7A	; 122
    2002:	54 e4       	ldi	r21, 0x44	; 68
    2004:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	8a ab       	std	Y+50, r24	; 0x32
    200e:	9b ab       	std	Y+51, r25	; 0x33
    2010:	ac ab       	std	Y+52, r26	; 0x34
    2012:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	6a a9       	ldd	r22, Y+50	; 0x32
    2016:	7b a9       	ldd	r23, Y+51	; 0x33
    2018:	8c a9       	ldd	r24, Y+52	; 0x34
    201a:	9d a9       	ldd	r25, Y+53	; 0x35
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a ef       	ldi	r20, 0xFA	; 250
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	8e a7       	std	Y+46, r24	; 0x2e
    202e:	9f a7       	std	Y+47, r25	; 0x2f
    2030:	a8 ab       	std	Y+48, r26	; 0x30
    2032:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2034:	6e a5       	ldd	r22, Y+46	; 0x2e
    2036:	7f a5       	ldd	r23, Y+47	; 0x2f
    2038:	88 a9       	ldd	r24, Y+48	; 0x30
    203a:	99 a9       	ldd	r25, Y+49	; 0x31
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e8       	ldi	r20, 0x80	; 128
    2042:	5f e3       	ldi	r21, 0x3F	; 63
    2044:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2048:	88 23       	and	r24, r24
    204a:	2c f4       	brge	.+10     	; 0x2056 <LCD_voidInit+0x24a>
		__ticks = 1;
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9d a7       	std	Y+45, r25	; 0x2d
    2052:	8c a7       	std	Y+44, r24	; 0x2c
    2054:	3f c0       	rjmp	.+126    	; 0x20d4 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    2056:	6e a5       	ldd	r22, Y+46	; 0x2e
    2058:	7f a5       	ldd	r23, Y+47	; 0x2f
    205a:	88 a9       	ldd	r24, Y+48	; 0x30
    205c:	99 a9       	ldd	r25, Y+49	; 0x31
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	3f ef       	ldi	r19, 0xFF	; 255
    2062:	4f e7       	ldi	r20, 0x7F	; 127
    2064:	57 e4       	ldi	r21, 0x47	; 71
    2066:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206a:	18 16       	cp	r1, r24
    206c:	4c f5       	brge	.+82     	; 0x20c0 <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206e:	6a a9       	ldd	r22, Y+50	; 0x32
    2070:	7b a9       	ldd	r23, Y+51	; 0x33
    2072:	8c a9       	ldd	r24, Y+52	; 0x34
    2074:	9d a9       	ldd	r25, Y+53	; 0x35
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	bc 01       	movw	r22, r24
    2088:	cd 01       	movw	r24, r26
    208a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    208e:	dc 01       	movw	r26, r24
    2090:	cb 01       	movw	r24, r22
    2092:	9d a7       	std	Y+45, r25	; 0x2d
    2094:	8c a7       	std	Y+44, r24	; 0x2c
    2096:	0f c0       	rjmp	.+30     	; 0x20b6 <LCD_voidInit+0x2aa>
    2098:	88 ec       	ldi	r24, 0xC8	; 200
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	9b a7       	std	Y+43, r25	; 0x2b
    209e:	8a a7       	std	Y+42, r24	; 0x2a
    20a0:	8a a5       	ldd	r24, Y+42	; 0x2a
    20a2:	9b a5       	ldd	r25, Y+43	; 0x2b
    20a4:	01 97       	sbiw	r24, 0x01	; 1
    20a6:	f1 f7       	brne	.-4      	; 0x20a4 <LCD_voidInit+0x298>
    20a8:	9b a7       	std	Y+43, r25	; 0x2b
    20aa:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ac:	8c a5       	ldd	r24, Y+44	; 0x2c
    20ae:	9d a5       	ldd	r25, Y+45	; 0x2d
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	9d a7       	std	Y+45, r25	; 0x2d
    20b4:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20b6:	8c a5       	ldd	r24, Y+44	; 0x2c
    20b8:	9d a5       	ldd	r25, Y+45	; 0x2d
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	69 f7       	brne	.-38     	; 0x2098 <LCD_voidInit+0x28c>
    20be:	24 c0       	rjmp	.+72     	; 0x2108 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c0:	6e a5       	ldd	r22, Y+46	; 0x2e
    20c2:	7f a5       	ldd	r23, Y+47	; 0x2f
    20c4:	88 a9       	ldd	r24, Y+48	; 0x30
    20c6:	99 a9       	ldd	r25, Y+49	; 0x31
    20c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	9d a7       	std	Y+45, r25	; 0x2d
    20d2:	8c a7       	std	Y+44, r24	; 0x2c
    20d4:	8c a5       	ldd	r24, Y+44	; 0x2c
    20d6:	9d a5       	ldd	r25, Y+45	; 0x2d
    20d8:	99 a7       	std	Y+41, r25	; 0x29
    20da:	88 a7       	std	Y+40, r24	; 0x28
    20dc:	88 a5       	ldd	r24, Y+40	; 0x28
    20de:	99 a5       	ldd	r25, Y+41	; 0x29
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <LCD_voidInit+0x2d4>
    20e4:	99 a7       	std	Y+41, r25	; 0x29
    20e6:	88 a7       	std	Y+40, r24	; 0x28
    20e8:	0f c0       	rjmp	.+30     	; 0x2108 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20ea:	6f a9       	ldd	r22, Y+55	; 0x37
    20ec:	78 ad       	ldd	r23, Y+56	; 0x38
    20ee:	89 ad       	ldd	r24, Y+57	; 0x39
    20f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	8e ab       	std	Y+54, r24	; 0x36
    20fc:	8e a9       	ldd	r24, Y+54	; 0x36
    20fe:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2100:	8f a1       	ldd	r24, Y+39	; 0x27
    2102:	8a 95       	dec	r24
    2104:	f1 f7       	brne	.-4      	; 0x2102 <LCD_voidInit+0x2f6>
    2106:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40); //Step 3: wait 39 us
	/* Step 4: DisplayControl Command
	1- D:  1 --> Display on
	2- C:  1 --> Cursor Display on
	3- B:  1 --> Blinking on */
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CONTROL_CMND);
    2108:	8e e0       	ldi	r24, 0x0E	; 14
    210a:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	a0 e2       	ldi	r26, 0x20	; 32
    2114:	b2 e4       	ldi	r27, 0x42	; 66
    2116:	8b a3       	std	Y+35, r24	; 0x23
    2118:	9c a3       	std	Y+36, r25	; 0x24
    211a:	ad a3       	std	Y+37, r26	; 0x25
    211c:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    211e:	6b a1       	ldd	r22, Y+35	; 0x23
    2120:	7c a1       	ldd	r23, Y+36	; 0x24
    2122:	8d a1       	ldd	r24, Y+37	; 0x25
    2124:	9e a1       	ldd	r25, Y+38	; 0x26
    2126:	2b ea       	ldi	r18, 0xAB	; 171
    2128:	3a ea       	ldi	r19, 0xAA	; 170
    212a:	4a e2       	ldi	r20, 0x2A	; 42
    212c:	50 e4       	ldi	r21, 0x40	; 64
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	8f 8f       	std	Y+31, r24	; 0x1f
    2138:	98 a3       	std	Y+32, r25	; 0x20
    213a:	a9 a3       	std	Y+33, r26	; 0x21
    213c:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    213e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2140:	78 a1       	ldd	r23, Y+32	; 0x20
    2142:	89 a1       	ldd	r24, Y+33	; 0x21
    2144:	9a a1       	ldd	r25, Y+34	; 0x22
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e8       	ldi	r20, 0x80	; 128
    214c:	5f e3       	ldi	r21, 0x3F	; 63
    214e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2152:	88 23       	and	r24, r24
    2154:	1c f4       	brge	.+6      	; 0x215c <LCD_voidInit+0x350>
		__ticks = 1;
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	8e 8f       	std	Y+30, r24	; 0x1e
    215a:	91 c0       	rjmp	.+290    	; 0x227e <LCD_voidInit+0x472>
	else if (__tmp > 255)
    215c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    215e:	78 a1       	ldd	r23, Y+32	; 0x20
    2160:	89 a1       	ldd	r24, Y+33	; 0x21
    2162:	9a a1       	ldd	r25, Y+34	; 0x22
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	4f e7       	ldi	r20, 0x7F	; 127
    216a:	53 e4       	ldi	r21, 0x43	; 67
    216c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2170:	18 16       	cp	r1, r24
    2172:	0c f0       	brlt	.+2      	; 0x2176 <LCD_voidInit+0x36a>
    2174:	7b c0       	rjmp	.+246    	; 0x226c <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2176:	6b a1       	ldd	r22, Y+35	; 0x23
    2178:	7c a1       	ldd	r23, Y+36	; 0x24
    217a:	8d a1       	ldd	r24, Y+37	; 0x25
    217c:	9e a1       	ldd	r25, Y+38	; 0x26
    217e:	20 e0       	ldi	r18, 0x00	; 0
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	4a e7       	ldi	r20, 0x7A	; 122
    2184:	54 e4       	ldi	r21, 0x44	; 68
    2186:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	8a 8f       	std	Y+26, r24	; 0x1a
    2190:	9b 8f       	std	Y+27, r25	; 0x1b
    2192:	ac 8f       	std	Y+28, r26	; 0x1c
    2194:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2198:	7b 8d       	ldd	r23, Y+27	; 0x1b
    219a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    219c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a ef       	ldi	r20, 0xFA	; 250
    21a4:	54 e4       	ldi	r21, 0x44	; 68
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8e 8b       	std	Y+22, r24	; 0x16
    21b0:	9f 8b       	std	Y+23, r25	; 0x17
    21b2:	a8 8f       	std	Y+24, r26	; 0x18
    21b4:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    21b6:	6e 89       	ldd	r22, Y+22	; 0x16
    21b8:	7f 89       	ldd	r23, Y+23	; 0x17
    21ba:	88 8d       	ldd	r24, Y+24	; 0x18
    21bc:	99 8d       	ldd	r25, Y+25	; 0x19
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <LCD_voidInit+0x3cc>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9d 8b       	std	Y+21, r25	; 0x15
    21d4:	8c 8b       	std	Y+20, r24	; 0x14
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    21d8:	6e 89       	ldd	r22, Y+22	; 0x16
    21da:	7f 89       	ldd	r23, Y+23	; 0x17
    21dc:	88 8d       	ldd	r24, Y+24	; 0x18
    21de:	99 8d       	ldd	r25, Y+25	; 0x19
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    21f2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    21f4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    21f6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9d 8b       	std	Y+21, r25	; 0x15
    2216:	8c 8b       	std	Y+20, r24	; 0x14
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <LCD_voidInit+0x42c>
    221a:	88 ec       	ldi	r24, 0xC8	; 200
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9b 8b       	std	Y+19, r25	; 0x13
    2220:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2222:	8a 89       	ldd	r24, Y+18	; 0x12
    2224:	9b 89       	ldd	r25, Y+19	; 0x13
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_voidInit+0x41a>
    222a:	9b 8b       	std	Y+19, r25	; 0x13
    222c:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8c 89       	ldd	r24, Y+20	; 0x14
    2230:	9d 89       	ldd	r25, Y+21	; 0x15
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9d 8b       	std	Y+21, r25	; 0x15
    2236:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8c 89       	ldd	r24, Y+20	; 0x14
    223a:	9d 89       	ldd	r25, Y+21	; 0x15
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <LCD_voidInit+0x40e>
    2240:	24 c0       	rjmp	.+72     	; 0x228a <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6e 89       	ldd	r22, Y+22	; 0x16
    2244:	7f 89       	ldd	r23, Y+23	; 0x17
    2246:	88 8d       	ldd	r24, Y+24	; 0x18
    2248:	99 8d       	ldd	r25, Y+25	; 0x19
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9d 8b       	std	Y+21, r25	; 0x15
    2254:	8c 8b       	std	Y+20, r24	; 0x14
    2256:	8c 89       	ldd	r24, Y+20	; 0x14
    2258:	9d 89       	ldd	r25, Y+21	; 0x15
    225a:	99 8b       	std	Y+17, r25	; 0x11
    225c:	88 8b       	std	Y+16, r24	; 0x10
    225e:	88 89       	ldd	r24, Y+16	; 0x10
    2260:	99 89       	ldd	r25, Y+17	; 0x11
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_voidInit+0x456>
    2266:	99 8b       	std	Y+17, r25	; 0x11
    2268:	88 8b       	std	Y+16, r24	; 0x10
    226a:	0f c0       	rjmp	.+30     	; 0x228a <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    226c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    226e:	78 a1       	ldd	r23, Y+32	; 0x20
    2270:	89 a1       	ldd	r24, Y+33	; 0x21
    2272:	9a a1       	ldd	r25, Y+34	; 0x22
    2274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	8e 8f       	std	Y+30, r24	; 0x1e
    227e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2280:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2282:	8f 85       	ldd	r24, Y+15	; 0x0f
    2284:	8a 95       	dec	r24
    2286:	f1 f7       	brne	.-4      	; 0x2284 <LCD_voidInit+0x478>
    2288:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40); //Step 5: wait 39 us
	/* Step 6: Display Clear Command*/
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
    2290:	80 e0       	ldi	r24, 0x00	; 0
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	a0 e0       	ldi	r26, 0x00	; 0
    2296:	b0 e4       	ldi	r27, 0x40	; 64
    2298:	8b 87       	std	Y+11, r24	; 0x0b
    229a:	9c 87       	std	Y+12, r25	; 0x0c
    229c:	ad 87       	std	Y+13, r26	; 0x0d
    229e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	4a ef       	ldi	r20, 0xFA	; 250
    22ae:	54 e4       	ldi	r21, 0x44	; 68
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	8f 83       	std	Y+7, r24	; 0x07
    22ba:	98 87       	std	Y+8, r25	; 0x08
    22bc:	a9 87       	std	Y+9, r26	; 0x09
    22be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c0:	6f 81       	ldd	r22, Y+7	; 0x07
    22c2:	78 85       	ldd	r23, Y+8	; 0x08
    22c4:	89 85       	ldd	r24, Y+9	; 0x09
    22c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	40 e8       	ldi	r20, 0x80	; 128
    22ce:	5f e3       	ldi	r21, 0x3F	; 63
    22d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d4:	88 23       	and	r24, r24
    22d6:	2c f4       	brge	.+10     	; 0x22e2 <LCD_voidInit+0x4d6>
		__ticks = 1;
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	9e 83       	std	Y+6, r25	; 0x06
    22de:	8d 83       	std	Y+5, r24	; 0x05
    22e0:	3f c0       	rjmp	.+126    	; 0x2360 <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    22e2:	6f 81       	ldd	r22, Y+7	; 0x07
    22e4:	78 85       	ldd	r23, Y+8	; 0x08
    22e6:	89 85       	ldd	r24, Y+9	; 0x09
    22e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	3f ef       	ldi	r19, 0xFF	; 255
    22ee:	4f e7       	ldi	r20, 0x7F	; 127
    22f0:	57 e4       	ldi	r21, 0x47	; 71
    22f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f6:	18 16       	cp	r1, r24
    22f8:	4c f5       	brge	.+82     	; 0x234c <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2300:	9e 85       	ldd	r25, Y+14	; 0x0e
    2302:	20 e0       	ldi	r18, 0x00	; 0
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	40 e2       	ldi	r20, 0x20	; 32
    2308:	51 e4       	ldi	r21, 0x41	; 65
    230a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	9e 83       	std	Y+6, r25	; 0x06
    2320:	8d 83       	std	Y+5, r24	; 0x05
    2322:	0f c0       	rjmp	.+30     	; 0x2342 <LCD_voidInit+0x536>
    2324:	88 ec       	ldi	r24, 0xC8	; 200
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	9c 83       	std	Y+4, r25	; 0x04
    232a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	01 97       	sbiw	r24, 0x01	; 1
    2332:	f1 f7       	brne	.-4      	; 0x2330 <LCD_voidInit+0x524>
    2334:	9c 83       	std	Y+4, r25	; 0x04
    2336:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2338:	8d 81       	ldd	r24, Y+5	; 0x05
    233a:	9e 81       	ldd	r25, Y+6	; 0x06
    233c:	01 97       	sbiw	r24, 0x01	; 1
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2342:	8d 81       	ldd	r24, Y+5	; 0x05
    2344:	9e 81       	ldd	r25, Y+6	; 0x06
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	69 f7       	brne	.-38     	; 0x2324 <LCD_voidInit+0x518>
    234a:	14 c0       	rjmp	.+40     	; 0x2374 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234c:	6f 81       	ldd	r22, Y+7	; 0x07
    234e:	78 85       	ldd	r23, Y+8	; 0x08
    2350:	89 85       	ldd	r24, Y+9	; 0x09
    2352:	9a 85       	ldd	r25, Y+10	; 0x0a
    2354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_voidInit+0x560>
    2370:	9a 83       	std	Y+2, r25	; 0x02
    2372:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2); //Step 7:wait more than 1.53 ms
	/* Step 8: Entry Mode Set Command
	1- I/D: 1 --> Increase
	2- SH: 0 --> no shift*/
	LCD_voidSendCmnd(LCD_u8_ENTRY_MODE_SET_CMND);
    2374:	86 e0       	ldi	r24, 0x06	; 6
    2376:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>


}
    237a:	c4 5b       	subi	r28, 0xB4	; 180
    237c:	df 4f       	sbci	r29, 0xFF	; 255
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	08 95       	ret

00002392 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd(u8 Copy_u8Cmnd)
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	e1 97       	sbiw	r28, 0x31	; 49
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	60 e0       	ldi	r22, 0x00	; 0
    23ac:	40 e0       	ldi	r20, 0x00	; 0
    23ae:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    23b2:	80 e0       	ldi	r24, 0x00	; 0
    23b4:	61 e0       	ldi	r22, 0x01	; 1
    23b6:	40 e0       	ldi	r20, 0x00	; 0
    23b8:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	69 a9       	ldd	r22, Y+49	; 0x31
    23c0:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    23c4:	80 e0       	ldi	r24, 0x00	; 0
    23c6:	62 e0       	ldi	r22, 0x02	; 2
    23c8:	41 e0       	ldi	r20, 0x01	; 1
    23ca:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a0 e8       	ldi	r26, 0x80	; 128
    23d4:	bf e3       	ldi	r27, 0x3F	; 63
    23d6:	8d a7       	std	Y+45, r24	; 0x2d
    23d8:	9e a7       	std	Y+46, r25	; 0x2e
    23da:	af a7       	std	Y+47, r26	; 0x2f
    23dc:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23de:	6d a5       	ldd	r22, Y+45	; 0x2d
    23e0:	7e a5       	ldd	r23, Y+46	; 0x2e
    23e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23e4:	98 a9       	ldd	r25, Y+48	; 0x30
    23e6:	2b ea       	ldi	r18, 0xAB	; 171
    23e8:	3a ea       	ldi	r19, 0xAA	; 170
    23ea:	4a e2       	ldi	r20, 0x2A	; 42
    23ec:	50 e4       	ldi	r21, 0x40	; 64
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	89 a7       	std	Y+41, r24	; 0x29
    23f8:	9a a7       	std	Y+42, r25	; 0x2a
    23fa:	ab a7       	std	Y+43, r26	; 0x2b
    23fc:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    23fe:	69 a5       	ldd	r22, Y+41	; 0x29
    2400:	7a a5       	ldd	r23, Y+42	; 0x2a
    2402:	8b a5       	ldd	r24, Y+43	; 0x2b
    2404:	9c a5       	ldd	r25, Y+44	; 0x2c
    2406:	20 e0       	ldi	r18, 0x00	; 0
    2408:	30 e0       	ldi	r19, 0x00	; 0
    240a:	40 e8       	ldi	r20, 0x80	; 128
    240c:	5f e3       	ldi	r21, 0x3F	; 63
    240e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2412:	88 23       	and	r24, r24
    2414:	1c f4       	brge	.+6      	; 0x241c <LCD_voidSendCmnd+0x8a>
		__ticks = 1;
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	88 a7       	std	Y+40, r24	; 0x28
    241a:	91 c0       	rjmp	.+290    	; 0x253e <LCD_voidSendCmnd+0x1ac>
	else if (__tmp > 255)
    241c:	69 a5       	ldd	r22, Y+41	; 0x29
    241e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2420:	8b a5       	ldd	r24, Y+43	; 0x2b
    2422:	9c a5       	ldd	r25, Y+44	; 0x2c
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	53 e4       	ldi	r21, 0x43	; 67
    242c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	0c f0       	brlt	.+2      	; 0x2436 <LCD_voidSendCmnd+0xa4>
    2434:	7b c0       	rjmp	.+246    	; 0x252c <LCD_voidSendCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2436:	6d a5       	ldd	r22, Y+45	; 0x2d
    2438:	7e a5       	ldd	r23, Y+46	; 0x2e
    243a:	8f a5       	ldd	r24, Y+47	; 0x2f
    243c:	98 a9       	ldd	r25, Y+48	; 0x30
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	4a e7       	ldi	r20, 0x7A	; 122
    2444:	54 e4       	ldi	r21, 0x44	; 68
    2446:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	8c a3       	std	Y+36, r24	; 0x24
    2450:	9d a3       	std	Y+37, r25	; 0x25
    2452:	ae a3       	std	Y+38, r26	; 0x26
    2454:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2456:	6c a1       	ldd	r22, Y+36	; 0x24
    2458:	7d a1       	ldd	r23, Y+37	; 0x25
    245a:	8e a1       	ldd	r24, Y+38	; 0x26
    245c:	9f a1       	ldd	r25, Y+39	; 0x27
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	4a ef       	ldi	r20, 0xFA	; 250
    2464:	54 e4       	ldi	r21, 0x44	; 68
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	88 a3       	std	Y+32, r24	; 0x20
    2470:	99 a3       	std	Y+33, r25	; 0x21
    2472:	aa a3       	std	Y+34, r26	; 0x22
    2474:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2476:	68 a1       	ldd	r22, Y+32	; 0x20
    2478:	79 a1       	ldd	r23, Y+33	; 0x21
    247a:	8a a1       	ldd	r24, Y+34	; 0x22
    247c:	9b a1       	ldd	r25, Y+35	; 0x23
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	40 e8       	ldi	r20, 0x80	; 128
    2484:	5f e3       	ldi	r21, 0x3F	; 63
    2486:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    248a:	88 23       	and	r24, r24
    248c:	2c f4       	brge	.+10     	; 0x2498 <LCD_voidSendCmnd+0x106>
		__ticks = 1;
    248e:	81 e0       	ldi	r24, 0x01	; 1
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	9f 8f       	std	Y+31, r25	; 0x1f
    2494:	8e 8f       	std	Y+30, r24	; 0x1e
    2496:	3f c0       	rjmp	.+126    	; 0x2516 <LCD_voidSendCmnd+0x184>
	else if (__tmp > 65535)
    2498:	68 a1       	ldd	r22, Y+32	; 0x20
    249a:	79 a1       	ldd	r23, Y+33	; 0x21
    249c:	8a a1       	ldd	r24, Y+34	; 0x22
    249e:	9b a1       	ldd	r25, Y+35	; 0x23
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	3f ef       	ldi	r19, 0xFF	; 255
    24a4:	4f e7       	ldi	r20, 0x7F	; 127
    24a6:	57 e4       	ldi	r21, 0x47	; 71
    24a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ac:	18 16       	cp	r1, r24
    24ae:	4c f5       	brge	.+82     	; 0x2502 <LCD_voidSendCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b0:	6c a1       	ldd	r22, Y+36	; 0x24
    24b2:	7d a1       	ldd	r23, Y+37	; 0x25
    24b4:	8e a1       	ldd	r24, Y+38	; 0x26
    24b6:	9f a1       	ldd	r25, Y+39	; 0x27
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	30 e0       	ldi	r19, 0x00	; 0
    24bc:	40 e2       	ldi	r20, 0x20	; 32
    24be:	51 e4       	ldi	r21, 0x41	; 65
    24c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	bc 01       	movw	r22, r24
    24ca:	cd 01       	movw	r24, r26
    24cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9f 8f       	std	Y+31, r25	; 0x1f
    24d6:	8e 8f       	std	Y+30, r24	; 0x1e
    24d8:	0f c0       	rjmp	.+30     	; 0x24f8 <LCD_voidSendCmnd+0x166>
    24da:	88 ec       	ldi	r24, 0xC8	; 200
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	9d 8f       	std	Y+29, r25	; 0x1d
    24e0:	8c 8f       	std	Y+28, r24	; 0x1c
    24e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24e4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_voidSendCmnd+0x154>
    24ea:	9d 8f       	std	Y+29, r25	; 0x1d
    24ec:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24f2:	01 97       	sbiw	r24, 0x01	; 1
    24f4:	9f 8f       	std	Y+31, r25	; 0x1f
    24f6:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    24fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	69 f7       	brne	.-38     	; 0x24da <LCD_voidSendCmnd+0x148>
    2500:	24 c0       	rjmp	.+72     	; 0x254a <LCD_voidSendCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2502:	68 a1       	ldd	r22, Y+32	; 0x20
    2504:	79 a1       	ldd	r23, Y+33	; 0x21
    2506:	8a a1       	ldd	r24, Y+34	; 0x22
    2508:	9b a1       	ldd	r25, Y+35	; 0x23
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9f 8f       	std	Y+31, r25	; 0x1f
    2514:	8e 8f       	std	Y+30, r24	; 0x1e
    2516:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2518:	9f 8d       	ldd	r25, Y+31	; 0x1f
    251a:	9b 8f       	std	Y+27, r25	; 0x1b
    251c:	8a 8f       	std	Y+26, r24	; 0x1a
    251e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2520:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2522:	01 97       	sbiw	r24, 0x01	; 1
    2524:	f1 f7       	brne	.-4      	; 0x2522 <LCD_voidSendCmnd+0x190>
    2526:	9b 8f       	std	Y+27, r25	; 0x1b
    2528:	8a 8f       	std	Y+26, r24	; 0x1a
    252a:	0f c0       	rjmp	.+30     	; 0x254a <LCD_voidSendCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    252c:	69 a5       	ldd	r22, Y+41	; 0x29
    252e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2530:	8b a5       	ldd	r24, Y+43	; 0x2b
    2532:	9c a5       	ldd	r25, Y+44	; 0x2c
    2534:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	88 a7       	std	Y+40, r24	; 0x28
    253e:	88 a5       	ldd	r24, Y+40	; 0x28
    2540:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2542:	89 8d       	ldd	r24, Y+25	; 0x19
    2544:	8a 95       	dec	r24
    2546:	f1 f7       	brne	.-4      	; 0x2544 <LCD_voidSendCmnd+0x1b2>
    2548:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	62 e0       	ldi	r22, 0x02	; 2
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a0 e8       	ldi	r26, 0x80	; 128
    255a:	bf e3       	ldi	r27, 0x3F	; 63
    255c:	8d 8b       	std	Y+21, r24	; 0x15
    255e:	9e 8b       	std	Y+22, r25	; 0x16
    2560:	af 8b       	std	Y+23, r26	; 0x17
    2562:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2564:	6d 89       	ldd	r22, Y+21	; 0x15
    2566:	7e 89       	ldd	r23, Y+22	; 0x16
    2568:	8f 89       	ldd	r24, Y+23	; 0x17
    256a:	98 8d       	ldd	r25, Y+24	; 0x18
    256c:	2b ea       	ldi	r18, 0xAB	; 171
    256e:	3a ea       	ldi	r19, 0xAA	; 170
    2570:	4a e2       	ldi	r20, 0x2A	; 42
    2572:	50 e4       	ldi	r21, 0x40	; 64
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	89 8b       	std	Y+17, r24	; 0x11
    257e:	9a 8b       	std	Y+18, r25	; 0x12
    2580:	ab 8b       	std	Y+19, r26	; 0x13
    2582:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2584:	69 89       	ldd	r22, Y+17	; 0x11
    2586:	7a 89       	ldd	r23, Y+18	; 0x12
    2588:	8b 89       	ldd	r24, Y+19	; 0x13
    258a:	9c 89       	ldd	r25, Y+20	; 0x14
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	1c f4       	brge	.+6      	; 0x25a2 <LCD_voidSendCmnd+0x210>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	88 8b       	std	Y+16, r24	; 0x10
    25a0:	91 c0       	rjmp	.+290    	; 0x26c4 <LCD_voidSendCmnd+0x332>
	else if (__tmp > 255)
    25a2:	69 89       	ldd	r22, Y+17	; 0x11
    25a4:	7a 89       	ldd	r23, Y+18	; 0x12
    25a6:	8b 89       	ldd	r24, Y+19	; 0x13
    25a8:	9c 89       	ldd	r25, Y+20	; 0x14
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	30 e0       	ldi	r19, 0x00	; 0
    25ae:	4f e7       	ldi	r20, 0x7F	; 127
    25b0:	53 e4       	ldi	r21, 0x43	; 67
    25b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	0c f0       	brlt	.+2      	; 0x25bc <LCD_voidSendCmnd+0x22a>
    25ba:	7b c0       	rjmp	.+246    	; 0x26b2 <LCD_voidSendCmnd+0x320>
	{
		_delay_ms(__us / 1000.0);
    25bc:	6d 89       	ldd	r22, Y+21	; 0x15
    25be:	7e 89       	ldd	r23, Y+22	; 0x16
    25c0:	8f 89       	ldd	r24, Y+23	; 0x17
    25c2:	98 8d       	ldd	r25, Y+24	; 0x18
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4a e7       	ldi	r20, 0x7A	; 122
    25ca:	54 e4       	ldi	r21, 0x44	; 68
    25cc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8c 87       	std	Y+12, r24	; 0x0c
    25d6:	9d 87       	std	Y+13, r25	; 0x0d
    25d8:	ae 87       	std	Y+14, r26	; 0x0e
    25da:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    25de:	7d 85       	ldd	r23, Y+13	; 0x0d
    25e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    25e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	4a ef       	ldi	r20, 0xFA	; 250
    25ea:	54 e4       	ldi	r21, 0x44	; 68
    25ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	88 87       	std	Y+8, r24	; 0x08
    25f6:	99 87       	std	Y+9, r25	; 0x09
    25f8:	aa 87       	std	Y+10, r26	; 0x0a
    25fa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25fc:	68 85       	ldd	r22, Y+8	; 0x08
    25fe:	79 85       	ldd	r23, Y+9	; 0x09
    2600:	8a 85       	ldd	r24, Y+10	; 0x0a
    2602:	9b 85       	ldd	r25, Y+11	; 0x0b
    2604:	20 e0       	ldi	r18, 0x00	; 0
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	40 e8       	ldi	r20, 0x80	; 128
    260a:	5f e3       	ldi	r21, 0x3F	; 63
    260c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2610:	88 23       	and	r24, r24
    2612:	2c f4       	brge	.+10     	; 0x261e <LCD_voidSendCmnd+0x28c>
		__ticks = 1;
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	9f 83       	std	Y+7, r25	; 0x07
    261a:	8e 83       	std	Y+6, r24	; 0x06
    261c:	3f c0       	rjmp	.+126    	; 0x269c <LCD_voidSendCmnd+0x30a>
	else if (__tmp > 65535)
    261e:	68 85       	ldd	r22, Y+8	; 0x08
    2620:	79 85       	ldd	r23, Y+9	; 0x09
    2622:	8a 85       	ldd	r24, Y+10	; 0x0a
    2624:	9b 85       	ldd	r25, Y+11	; 0x0b
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	3f ef       	ldi	r19, 0xFF	; 255
    262a:	4f e7       	ldi	r20, 0x7F	; 127
    262c:	57 e4       	ldi	r21, 0x47	; 71
    262e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2632:	18 16       	cp	r1, r24
    2634:	4c f5       	brge	.+82     	; 0x2688 <LCD_voidSendCmnd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2636:	6c 85       	ldd	r22, Y+12	; 0x0c
    2638:	7d 85       	ldd	r23, Y+13	; 0x0d
    263a:	8e 85       	ldd	r24, Y+14	; 0x0e
    263c:	9f 85       	ldd	r25, Y+15	; 0x0f
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e2       	ldi	r20, 0x20	; 32
    2644:	51 e4       	ldi	r21, 0x41	; 65
    2646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9f 83       	std	Y+7, r25	; 0x07
    265c:	8e 83       	std	Y+6, r24	; 0x06
    265e:	0f c0       	rjmp	.+30     	; 0x267e <LCD_voidSendCmnd+0x2ec>
    2660:	88 ec       	ldi	r24, 0xC8	; 200
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	9d 83       	std	Y+5, r25	; 0x05
    2666:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2668:	8c 81       	ldd	r24, Y+4	; 0x04
    266a:	9d 81       	ldd	r25, Y+5	; 0x05
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_voidSendCmnd+0x2da>
    2670:	9d 83       	std	Y+5, r25	; 0x05
    2672:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2674:	8e 81       	ldd	r24, Y+6	; 0x06
    2676:	9f 81       	ldd	r25, Y+7	; 0x07
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	9f 83       	std	Y+7, r25	; 0x07
    267c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    267e:	8e 81       	ldd	r24, Y+6	; 0x06
    2680:	9f 81       	ldd	r25, Y+7	; 0x07
    2682:	00 97       	sbiw	r24, 0x00	; 0
    2684:	69 f7       	brne	.-38     	; 0x2660 <LCD_voidSendCmnd+0x2ce>
    2686:	24 c0       	rjmp	.+72     	; 0x26d0 <LCD_voidSendCmnd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2688:	68 85       	ldd	r22, Y+8	; 0x08
    268a:	79 85       	ldd	r23, Y+9	; 0x09
    268c:	8a 85       	ldd	r24, Y+10	; 0x0a
    268e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	9f 83       	std	Y+7, r25	; 0x07
    269a:	8e 83       	std	Y+6, r24	; 0x06
    269c:	8e 81       	ldd	r24, Y+6	; 0x06
    269e:	9f 81       	ldd	r25, Y+7	; 0x07
    26a0:	9b 83       	std	Y+3, r25	; 0x03
    26a2:	8a 83       	std	Y+2, r24	; 0x02
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	9b 81       	ldd	r25, Y+3	; 0x03
    26a8:	01 97       	sbiw	r24, 0x01	; 1
    26aa:	f1 f7       	brne	.-4      	; 0x26a8 <LCD_voidSendCmnd+0x316>
    26ac:	9b 83       	std	Y+3, r25	; 0x03
    26ae:	8a 83       	std	Y+2, r24	; 0x02
    26b0:	0f c0       	rjmp	.+30     	; 0x26d0 <LCD_voidSendCmnd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26b2:	69 89       	ldd	r22, Y+17	; 0x11
    26b4:	7a 89       	ldd	r23, Y+18	; 0x12
    26b6:	8b 89       	ldd	r24, Y+19	; 0x13
    26b8:	9c 89       	ldd	r25, Y+20	; 0x14
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	88 8b       	std	Y+16, r24	; 0x10
    26c4:	88 89       	ldd	r24, Y+16	; 0x10
    26c6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	8a 95       	dec	r24
    26cc:	f1 f7       	brne	.-4      	; 0x26ca <LCD_voidSendCmnd+0x338>
    26ce:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif

}
    26d0:	e1 96       	adiw	r28, 0x31	; 49
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	cf 91       	pop	r28
    26de:	df 91       	pop	r29
    26e0:	08 95       	ret

000026e2 <LCD_voidSendChar>:

void LCD_voidSendChar(u8 Copy_u8Char)
{
    26e2:	df 93       	push	r29
    26e4:	cf 93       	push	r28
    26e6:	cd b7       	in	r28, 0x3d	; 61
    26e8:	de b7       	in	r29, 0x3e	; 62
    26ea:	e1 97       	sbiw	r28, 0x31	; 49
    26ec:	0f b6       	in	r0, 0x3f	; 63
    26ee:	f8 94       	cli
    26f0:	de bf       	out	0x3e, r29	; 62
    26f2:	0f be       	out	0x3f, r0	; 63
    26f4:	cd bf       	out	0x3d, r28	; 61
    26f6:	89 ab       	std	Y+49, r24	; 0x31
#if LCD_u8_MODE == LCD_u8_MODE_8_BIT
	/* Step 1: RS = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	60 e0       	ldi	r22, 0x00	; 0
    26fc:	41 e0       	ldi	r20, 0x01	; 1
    26fe:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	61 e0       	ldi	r22, 0x01	; 1
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 3: Write Char  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    270c:	82 e0       	ldi	r24, 0x02	; 2
    270e:	69 a9       	ldd	r22, Y+49	; 0x31
    2710:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	62 e0       	ldi	r22, 0x02	; 2
    2718:	41 e0       	ldi	r20, 0x01	; 1
    271a:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	a0 e8       	ldi	r26, 0x80	; 128
    2724:	bf e3       	ldi	r27, 0x3F	; 63
    2726:	8d a7       	std	Y+45, r24	; 0x2d
    2728:	9e a7       	std	Y+46, r25	; 0x2e
    272a:	af a7       	std	Y+47, r26	; 0x2f
    272c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    272e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2730:	7e a5       	ldd	r23, Y+46	; 0x2e
    2732:	8f a5       	ldd	r24, Y+47	; 0x2f
    2734:	98 a9       	ldd	r25, Y+48	; 0x30
    2736:	2b ea       	ldi	r18, 0xAB	; 171
    2738:	3a ea       	ldi	r19, 0xAA	; 170
    273a:	4a e2       	ldi	r20, 0x2A	; 42
    273c:	50 e4       	ldi	r21, 0x40	; 64
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	89 a7       	std	Y+41, r24	; 0x29
    2748:	9a a7       	std	Y+42, r25	; 0x2a
    274a:	ab a7       	std	Y+43, r26	; 0x2b
    274c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    274e:	69 a5       	ldd	r22, Y+41	; 0x29
    2750:	7a a5       	ldd	r23, Y+42	; 0x2a
    2752:	8b a5       	ldd	r24, Y+43	; 0x2b
    2754:	9c a5       	ldd	r25, Y+44	; 0x2c
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e8       	ldi	r20, 0x80	; 128
    275c:	5f e3       	ldi	r21, 0x3F	; 63
    275e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2762:	88 23       	and	r24, r24
    2764:	1c f4       	brge	.+6      	; 0x276c <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	88 a7       	std	Y+40, r24	; 0x28
    276a:	91 c0       	rjmp	.+290    	; 0x288e <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    276c:	69 a5       	ldd	r22, Y+41	; 0x29
    276e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2770:	8b a5       	ldd	r24, Y+43	; 0x2b
    2772:	9c a5       	ldd	r25, Y+44	; 0x2c
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4f e7       	ldi	r20, 0x7F	; 127
    277a:	53 e4       	ldi	r21, 0x43	; 67
    277c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2780:	18 16       	cp	r1, r24
    2782:	0c f0       	brlt	.+2      	; 0x2786 <LCD_voidSendChar+0xa4>
    2784:	7b c0       	rjmp	.+246    	; 0x287c <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2786:	6d a5       	ldd	r22, Y+45	; 0x2d
    2788:	7e a5       	ldd	r23, Y+46	; 0x2e
    278a:	8f a5       	ldd	r24, Y+47	; 0x2f
    278c:	98 a9       	ldd	r25, Y+48	; 0x30
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	4a e7       	ldi	r20, 0x7A	; 122
    2794:	54 e4       	ldi	r21, 0x44	; 68
    2796:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	8c a3       	std	Y+36, r24	; 0x24
    27a0:	9d a3       	std	Y+37, r25	; 0x25
    27a2:	ae a3       	std	Y+38, r26	; 0x26
    27a4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a6:	6c a1       	ldd	r22, Y+36	; 0x24
    27a8:	7d a1       	ldd	r23, Y+37	; 0x25
    27aa:	8e a1       	ldd	r24, Y+38	; 0x26
    27ac:	9f a1       	ldd	r25, Y+39	; 0x27
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	4a ef       	ldi	r20, 0xFA	; 250
    27b4:	54 e4       	ldi	r21, 0x44	; 68
    27b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	88 a3       	std	Y+32, r24	; 0x20
    27c0:	99 a3       	std	Y+33, r25	; 0x21
    27c2:	aa a3       	std	Y+34, r26	; 0x22
    27c4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    27c6:	68 a1       	ldd	r22, Y+32	; 0x20
    27c8:	79 a1       	ldd	r23, Y+33	; 0x21
    27ca:	8a a1       	ldd	r24, Y+34	; 0x22
    27cc:	9b a1       	ldd	r25, Y+35	; 0x23
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e8       	ldi	r20, 0x80	; 128
    27d4:	5f e3       	ldi	r21, 0x3F	; 63
    27d6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27da:	88 23       	and	r24, r24
    27dc:	2c f4       	brge	.+10     	; 0x27e8 <LCD_voidSendChar+0x106>
		__ticks = 1;
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	9f 8f       	std	Y+31, r25	; 0x1f
    27e4:	8e 8f       	std	Y+30, r24	; 0x1e
    27e6:	3f c0       	rjmp	.+126    	; 0x2866 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    27e8:	68 a1       	ldd	r22, Y+32	; 0x20
    27ea:	79 a1       	ldd	r23, Y+33	; 0x21
    27ec:	8a a1       	ldd	r24, Y+34	; 0x22
    27ee:	9b a1       	ldd	r25, Y+35	; 0x23
    27f0:	20 e0       	ldi	r18, 0x00	; 0
    27f2:	3f ef       	ldi	r19, 0xFF	; 255
    27f4:	4f e7       	ldi	r20, 0x7F	; 127
    27f6:	57 e4       	ldi	r21, 0x47	; 71
    27f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27fc:	18 16       	cp	r1, r24
    27fe:	4c f5       	brge	.+82     	; 0x2852 <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2800:	6c a1       	ldd	r22, Y+36	; 0x24
    2802:	7d a1       	ldd	r23, Y+37	; 0x25
    2804:	8e a1       	ldd	r24, Y+38	; 0x26
    2806:	9f a1       	ldd	r25, Y+39	; 0x27
    2808:	20 e0       	ldi	r18, 0x00	; 0
    280a:	30 e0       	ldi	r19, 0x00	; 0
    280c:	40 e2       	ldi	r20, 0x20	; 32
    280e:	51 e4       	ldi	r21, 0x41	; 65
    2810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2814:	dc 01       	movw	r26, r24
    2816:	cb 01       	movw	r24, r22
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9f 8f       	std	Y+31, r25	; 0x1f
    2826:	8e 8f       	std	Y+30, r24	; 0x1e
    2828:	0f c0       	rjmp	.+30     	; 0x2848 <LCD_voidSendChar+0x166>
    282a:	88 ec       	ldi	r24, 0xC8	; 200
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9d 8f       	std	Y+29, r25	; 0x1d
    2830:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2832:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2834:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	f1 f7       	brne	.-4      	; 0x2836 <LCD_voidSendChar+0x154>
    283a:	9d 8f       	std	Y+29, r25	; 0x1d
    283c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    283e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2840:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2842:	01 97       	sbiw	r24, 0x01	; 1
    2844:	9f 8f       	std	Y+31, r25	; 0x1f
    2846:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2848:	8e 8d       	ldd	r24, Y+30	; 0x1e
    284a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    284c:	00 97       	sbiw	r24, 0x00	; 0
    284e:	69 f7       	brne	.-38     	; 0x282a <LCD_voidSendChar+0x148>
    2850:	24 c0       	rjmp	.+72     	; 0x289a <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2852:	68 a1       	ldd	r22, Y+32	; 0x20
    2854:	79 a1       	ldd	r23, Y+33	; 0x21
    2856:	8a a1       	ldd	r24, Y+34	; 0x22
    2858:	9b a1       	ldd	r25, Y+35	; 0x23
    285a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	9f 8f       	std	Y+31, r25	; 0x1f
    2864:	8e 8f       	std	Y+30, r24	; 0x1e
    2866:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2868:	9f 8d       	ldd	r25, Y+31	; 0x1f
    286a:	9b 8f       	std	Y+27, r25	; 0x1b
    286c:	8a 8f       	std	Y+26, r24	; 0x1a
    286e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2870:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <LCD_voidSendChar+0x190>
    2876:	9b 8f       	std	Y+27, r25	; 0x1b
    2878:	8a 8f       	std	Y+26, r24	; 0x1a
    287a:	0f c0       	rjmp	.+30     	; 0x289a <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    287c:	69 a5       	ldd	r22, Y+41	; 0x29
    287e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2880:	8b a5       	ldd	r24, Y+43	; 0x2b
    2882:	9c a5       	ldd	r25, Y+44	; 0x2c
    2884:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	88 a7       	std	Y+40, r24	; 0x28
    288e:	88 a5       	ldd	r24, Y+40	; 0x28
    2890:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2892:	89 8d       	ldd	r24, Y+25	; 0x19
    2894:	8a 95       	dec	r24
    2896:	f1 f7       	brne	.-4      	; 0x2894 <LCD_voidSendChar+0x1b2>
    2898:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	62 e0       	ldi	r22, 0x02	; 2
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	a0 e8       	ldi	r26, 0x80	; 128
    28aa:	bf e3       	ldi	r27, 0x3F	; 63
    28ac:	8d 8b       	std	Y+21, r24	; 0x15
    28ae:	9e 8b       	std	Y+22, r25	; 0x16
    28b0:	af 8b       	std	Y+23, r26	; 0x17
    28b2:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28b4:	6d 89       	ldd	r22, Y+21	; 0x15
    28b6:	7e 89       	ldd	r23, Y+22	; 0x16
    28b8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ba:	98 8d       	ldd	r25, Y+24	; 0x18
    28bc:	2b ea       	ldi	r18, 0xAB	; 171
    28be:	3a ea       	ldi	r19, 0xAA	; 170
    28c0:	4a e2       	ldi	r20, 0x2A	; 42
    28c2:	50 e4       	ldi	r21, 0x40	; 64
    28c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	89 8b       	std	Y+17, r24	; 0x11
    28ce:	9a 8b       	std	Y+18, r25	; 0x12
    28d0:	ab 8b       	std	Y+19, r26	; 0x13
    28d2:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28d4:	69 89       	ldd	r22, Y+17	; 0x11
    28d6:	7a 89       	ldd	r23, Y+18	; 0x12
    28d8:	8b 89       	ldd	r24, Y+19	; 0x13
    28da:	9c 89       	ldd	r25, Y+20	; 0x14
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e8       	ldi	r20, 0x80	; 128
    28e2:	5f e3       	ldi	r21, 0x3F	; 63
    28e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28e8:	88 23       	and	r24, r24
    28ea:	1c f4       	brge	.+6      	; 0x28f2 <LCD_voidSendChar+0x210>
		__ticks = 1;
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	88 8b       	std	Y+16, r24	; 0x10
    28f0:	91 c0       	rjmp	.+290    	; 0x2a14 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    28f2:	69 89       	ldd	r22, Y+17	; 0x11
    28f4:	7a 89       	ldd	r23, Y+18	; 0x12
    28f6:	8b 89       	ldd	r24, Y+19	; 0x13
    28f8:	9c 89       	ldd	r25, Y+20	; 0x14
    28fa:	20 e0       	ldi	r18, 0x00	; 0
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	4f e7       	ldi	r20, 0x7F	; 127
    2900:	53 e4       	ldi	r21, 0x43	; 67
    2902:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2906:	18 16       	cp	r1, r24
    2908:	0c f0       	brlt	.+2      	; 0x290c <LCD_voidSendChar+0x22a>
    290a:	7b c0       	rjmp	.+246    	; 0x2a02 <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    290c:	6d 89       	ldd	r22, Y+21	; 0x15
    290e:	7e 89       	ldd	r23, Y+22	; 0x16
    2910:	8f 89       	ldd	r24, Y+23	; 0x17
    2912:	98 8d       	ldd	r25, Y+24	; 0x18
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a e7       	ldi	r20, 0x7A	; 122
    291a:	54 e4       	ldi	r21, 0x44	; 68
    291c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8c 87       	std	Y+12, r24	; 0x0c
    2926:	9d 87       	std	Y+13, r25	; 0x0d
    2928:	ae 87       	std	Y+14, r26	; 0x0e
    292a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    292c:	6c 85       	ldd	r22, Y+12	; 0x0c
    292e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2930:	8e 85       	ldd	r24, Y+14	; 0x0e
    2932:	9f 85       	ldd	r25, Y+15	; 0x0f
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	4a ef       	ldi	r20, 0xFA	; 250
    293a:	54 e4       	ldi	r21, 0x44	; 68
    293c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	88 87       	std	Y+8, r24	; 0x08
    2946:	99 87       	std	Y+9, r25	; 0x09
    2948:	aa 87       	std	Y+10, r26	; 0x0a
    294a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    294c:	68 85       	ldd	r22, Y+8	; 0x08
    294e:	79 85       	ldd	r23, Y+9	; 0x09
    2950:	8a 85       	ldd	r24, Y+10	; 0x0a
    2952:	9b 85       	ldd	r25, Y+11	; 0x0b
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	2c f4       	brge	.+10     	; 0x296e <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2964:	81 e0       	ldi	r24, 0x01	; 1
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	9f 83       	std	Y+7, r25	; 0x07
    296a:	8e 83       	std	Y+6, r24	; 0x06
    296c:	3f c0       	rjmp	.+126    	; 0x29ec <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    296e:	68 85       	ldd	r22, Y+8	; 0x08
    2970:	79 85       	ldd	r23, Y+9	; 0x09
    2972:	8a 85       	ldd	r24, Y+10	; 0x0a
    2974:	9b 85       	ldd	r25, Y+11	; 0x0b
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	3f ef       	ldi	r19, 0xFF	; 255
    297a:	4f e7       	ldi	r20, 0x7F	; 127
    297c:	57 e4       	ldi	r21, 0x47	; 71
    297e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2982:	18 16       	cp	r1, r24
    2984:	4c f5       	brge	.+82     	; 0x29d8 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2986:	6c 85       	ldd	r22, Y+12	; 0x0c
    2988:	7d 85       	ldd	r23, Y+13	; 0x0d
    298a:	8e 85       	ldd	r24, Y+14	; 0x0e
    298c:	9f 85       	ldd	r25, Y+15	; 0x0f
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e2       	ldi	r20, 0x20	; 32
    2994:	51 e4       	ldi	r21, 0x41	; 65
    2996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	bc 01       	movw	r22, r24
    29a0:	cd 01       	movw	r24, r26
    29a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a6:	dc 01       	movw	r26, r24
    29a8:	cb 01       	movw	r24, r22
    29aa:	9f 83       	std	Y+7, r25	; 0x07
    29ac:	8e 83       	std	Y+6, r24	; 0x06
    29ae:	0f c0       	rjmp	.+30     	; 0x29ce <LCD_voidSendChar+0x2ec>
    29b0:	88 ec       	ldi	r24, 0xC8	; 200
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	9d 83       	std	Y+5, r25	; 0x05
    29b6:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29b8:	8c 81       	ldd	r24, Y+4	; 0x04
    29ba:	9d 81       	ldd	r25, Y+5	; 0x05
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <LCD_voidSendChar+0x2da>
    29c0:	9d 83       	std	Y+5, r25	; 0x05
    29c2:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c4:	8e 81       	ldd	r24, Y+6	; 0x06
    29c6:	9f 81       	ldd	r25, Y+7	; 0x07
    29c8:	01 97       	sbiw	r24, 0x01	; 1
    29ca:	9f 83       	std	Y+7, r25	; 0x07
    29cc:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ce:	8e 81       	ldd	r24, Y+6	; 0x06
    29d0:	9f 81       	ldd	r25, Y+7	; 0x07
    29d2:	00 97       	sbiw	r24, 0x00	; 0
    29d4:	69 f7       	brne	.-38     	; 0x29b0 <LCD_voidSendChar+0x2ce>
    29d6:	24 c0       	rjmp	.+72     	; 0x2a20 <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d8:	68 85       	ldd	r22, Y+8	; 0x08
    29da:	79 85       	ldd	r23, Y+9	; 0x09
    29dc:	8a 85       	ldd	r24, Y+10	; 0x0a
    29de:	9b 85       	ldd	r25, Y+11	; 0x0b
    29e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	9f 83       	std	Y+7, r25	; 0x07
    29ea:	8e 83       	std	Y+6, r24	; 0x06
    29ec:	8e 81       	ldd	r24, Y+6	; 0x06
    29ee:	9f 81       	ldd	r25, Y+7	; 0x07
    29f0:	9b 83       	std	Y+3, r25	; 0x03
    29f2:	8a 83       	std	Y+2, r24	; 0x02
    29f4:	8a 81       	ldd	r24, Y+2	; 0x02
    29f6:	9b 81       	ldd	r25, Y+3	; 0x03
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	f1 f7       	brne	.-4      	; 0x29f8 <LCD_voidSendChar+0x316>
    29fc:	9b 83       	std	Y+3, r25	; 0x03
    29fe:	8a 83       	std	Y+2, r24	; 0x02
    2a00:	0f c0       	rjmp	.+30     	; 0x2a20 <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a02:	69 89       	ldd	r22, Y+17	; 0x11
    2a04:	7a 89       	ldd	r23, Y+18	; 0x12
    2a06:	8b 89       	ldd	r24, Y+19	; 0x13
    2a08:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a0e:	dc 01       	movw	r26, r24
    2a10:	cb 01       	movw	r24, r22
    2a12:	88 8b       	std	Y+16, r24	; 0x10
    2a14:	88 89       	ldd	r24, Y+16	; 0x10
    2a16:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	8a 95       	dec	r24
    2a1c:	f1 f7       	brne	.-4      	; 0x2a1a <LCD_voidSendChar+0x338>
    2a1e:	89 83       	std	Y+1, r24	; 0x01
	/* Step 8: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )

#endif
}
    2a20:	e1 96       	adiw	r28, 0x31	; 49
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	de bf       	out	0x3e, r29	; 62
    2a28:	0f be       	out	0x3f, r0	; 63
    2a2a:	cd bf       	out	0x3d, r28	; 61
    2a2c:	cf 91       	pop	r28
    2a2e:	df 91       	pop	r29
    2a30:	08 95       	ret

00002a32 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Copy_pu8String)
{
    2a32:	df 93       	push	r29
    2a34:	cf 93       	push	r28
    2a36:	00 d0       	rcall	.+0      	; 0x2a38 <LCD_voidWriteString+0x6>
    2a38:	cd b7       	in	r28, 0x3d	; 61
    2a3a:	de b7       	in	r29, 0x3e	; 62
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	89 83       	std	Y+1, r24	; 0x01
    2a40:	0a c0       	rjmp	.+20     	; 0x2a56 <LCD_voidWriteString+0x24>
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
	{
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
    2a42:	e9 81       	ldd	r30, Y+1	; 0x01
    2a44:	fa 81       	ldd	r31, Y+2	; 0x02
    2a46:	80 81       	ld	r24, Z
    2a48:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
		// Move to the next character in the string
		Copy_pu8String++;
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	01 96       	adiw	r24, 0x01	; 1
    2a52:	9a 83       	std	Y+2, r25	; 0x02
    2a54:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidWriteString(u8* Copy_pu8String)
{
	// Iterate through the string until the null terminator ('\0') is encountered
	while(*Copy_pu8String != '\0')
    2a56:	e9 81       	ldd	r30, Y+1	; 0x01
    2a58:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 23       	and	r24, r24
    2a5e:	89 f7       	brne	.-30     	; 0x2a42 <LCD_voidWriteString+0x10>
		// Send each character of the string to the LCD
		LCD_voidSendChar(*Copy_pu8String);
		// Move to the next character in the string
		Copy_pu8String++;
	}
}
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <LCD_voidWriteNumber>:

void LCD_voidWriteNumber(u32 Copy_u32Number)
{
    2a6a:	0f 93       	push	r16
    2a6c:	1f 93       	push	r17
    2a6e:	df 93       	push	r29
    2a70:	cf 93       	push	r28
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	65 97       	sbiw	r28, 0x15	; 21
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	6a 8b       	std	Y+18, r22	; 0x12
    2a84:	7b 8b       	std	Y+19, r23	; 0x13
    2a86:	8c 8b       	std	Y+20, r24	; 0x14
    2a88:	9d 8b       	std	Y+21, r25	; 0x15
	// Temporary array to store digits of the number
	u8 digits[15];
	// Index to keep track of the current digit position
	s8 index = -1; // Start from -1 to accommodate numbers with zero
    2a8a:	8f ef       	ldi	r24, 0xFF	; 255
    2a8c:	8a 83       	std	Y+2, r24	; 0x02
	s8 i;
	// Special case for handling zero separately
	if (Copy_u32Number == 0)
    2a8e:	8a 89       	ldd	r24, Y+18	; 0x12
    2a90:	9b 89       	ldd	r25, Y+19	; 0x13
    2a92:	ac 89       	ldd	r26, Y+20	; 0x14
    2a94:	bd 89       	ldd	r27, Y+21	; 0x15
    2a96:	00 97       	sbiw	r24, 0x00	; 0
    2a98:	a1 05       	cpc	r26, r1
    2a9a:	b1 05       	cpc	r27, r1
    2a9c:	99 f5       	brne	.+102    	; 0x2b04 <LCD_voidWriteNumber+0x9a>
    {
        LCD_voidSendChar('0');
    2a9e:	80 e3       	ldi	r24, 0x30	; 48
    2aa0:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2aa4:	4e c0       	rjmp	.+156    	; 0x2b42 <LCD_voidWriteNumber+0xd8>
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    {
    	index++;
    2aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa8:	8f 5f       	subi	r24, 0xFF	; 255
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	08 2f       	mov	r16, r24
    2ab0:	11 27       	eor	r17, r17
    2ab2:	07 fd       	sbrc	r16, 7
    2ab4:	10 95       	com	r17
    2ab6:	8a 89       	ldd	r24, Y+18	; 0x12
    2ab8:	9b 89       	ldd	r25, Y+19	; 0x13
    2aba:	ac 89       	ldd	r26, Y+20	; 0x14
    2abc:	bd 89       	ldd	r27, Y+21	; 0x15
    2abe:	2a e0       	ldi	r18, 0x0A	; 10
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	bc 01       	movw	r22, r24
    2ac8:	cd 01       	movw	r24, r26
    2aca:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodsi4>
    2ace:	dc 01       	movw	r26, r24
    2ad0:	cb 01       	movw	r24, r22
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	ce 01       	movw	r24, r28
    2ad6:	03 96       	adiw	r24, 0x03	; 3
    2ad8:	fc 01       	movw	r30, r24
    2ada:	e0 0f       	add	r30, r16
    2adc:	f1 1f       	adc	r31, r17
    2ade:	20 83       	st	Z, r18
    	Copy_u32Number /= 10; // Move to the next digit
    2ae0:	8a 89       	ldd	r24, Y+18	; 0x12
    2ae2:	9b 89       	ldd	r25, Y+19	; 0x13
    2ae4:	ac 89       	ldd	r26, Y+20	; 0x14
    2ae6:	bd 89       	ldd	r27, Y+21	; 0x15
    2ae8:	2a e0       	ldi	r18, 0x0A	; 10
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	bc 01       	movw	r22, r24
    2af2:	cd 01       	movw	r24, r26
    2af4:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <__udivmodsi4>
    2af8:	da 01       	movw	r26, r20
    2afa:	c9 01       	movw	r24, r18
    2afc:	8a 8b       	std	Y+18, r24	; 0x12
    2afe:	9b 8b       	std	Y+19, r25	; 0x13
    2b00:	ac 8b       	std	Y+20, r26	; 0x14
    2b02:	bd 8b       	std	Y+21, r27	; 0x15
    {
        LCD_voidSendChar('0');
        return;
    }
    // Extract each digit of the number and store in the temporary array
    while(Copy_u32Number > 0)
    2b04:	8a 89       	ldd	r24, Y+18	; 0x12
    2b06:	9b 89       	ldd	r25, Y+19	; 0x13
    2b08:	ac 89       	ldd	r26, Y+20	; 0x14
    2b0a:	bd 89       	ldd	r27, Y+21	; 0x15
    2b0c:	00 97       	sbiw	r24, 0x00	; 0
    2b0e:	a1 05       	cpc	r26, r1
    2b10:	b1 05       	cpc	r27, r1
    2b12:	49 f6       	brne	.-110    	; 0x2aa6 <LCD_voidWriteNumber+0x3c>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	89 83       	std	Y+1, r24	; 0x01
    2b18:	11 c0       	rjmp	.+34     	; 0x2b3c <LCD_voidWriteNumber+0xd2>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    2b1a:	89 81       	ldd	r24, Y+1	; 0x01
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	33 27       	eor	r19, r19
    2b20:	27 fd       	sbrc	r18, 7
    2b22:	30 95       	com	r19
    2b24:	ce 01       	movw	r24, r28
    2b26:	03 96       	adiw	r24, 0x03	; 3
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e2 0f       	add	r30, r18
    2b2c:	f3 1f       	adc	r31, r19
    2b2e:	80 81       	ld	r24, Z
    2b30:	80 5d       	subi	r24, 0xD0	; 208
    2b32:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    	digits[index] = Copy_u32Number % 10; // Extract the last digit
    	Copy_u32Number /= 10; // Move to the next digit
    }

    // Write the digits to the LCD in reverse order
    for (i = index; i >= 0; i--)
    2b36:	89 81       	ldd	r24, Y+1	; 0x01
    2b38:	81 50       	subi	r24, 0x01	; 1
    2b3a:	89 83       	std	Y+1, r24	; 0x01
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	88 23       	and	r24, r24
    2b40:	64 f7       	brge	.-40     	; 0x2b1a <LCD_voidWriteNumber+0xb0>
    {
    	// Convert digit to character and send to LCD
    	LCD_voidSendChar(digits[i] +'0');
    }

}
    2b42:	65 96       	adiw	r28, 0x15	; 21
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	08 95       	ret

00002b58 <LCD_u8GoToXY>:
u8 LCD_u8GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2b58:	df 93       	push	r29
    2b5a:	cf 93       	push	r28
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <LCD_u8GoToXY+0x6>
    2b5e:	00 d0       	rcall	.+0      	; 0x2b60 <LCD_u8GoToXY+0x8>
    2b60:	0f 92       	push	r0
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	8a 83       	std	Y+2, r24	; 0x02
    2b68:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b6a:	81 e0       	ldi	r24, 0x01	; 1
    2b6c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Location <= 39)
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	88 32       	cpi	r24, 0x28	; 40
    2b72:	d8 f4       	brcc	.+54     	; 0x2baa <LCD_u8GoToXY+0x52>
	{
		switch(Copy_u8LineNum)
    2b74:	8a 81       	ldd	r24, Y+2	; 0x02
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	3d 83       	std	Y+5, r19	; 0x05
    2b7c:	2c 83       	std	Y+4, r18	; 0x04
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	9d 81       	ldd	r25, Y+5	; 0x05
    2b82:	81 30       	cpi	r24, 0x01	; 1
    2b84:	91 05       	cpc	r25, r1
    2b86:	31 f0       	breq	.+12     	; 0x2b94 <LCD_u8GoToXY+0x3c>
    2b88:	2c 81       	ldd	r18, Y+4	; 0x04
    2b8a:	3d 81       	ldd	r19, Y+5	; 0x05
    2b8c:	22 30       	cpi	r18, 0x02	; 2
    2b8e:	31 05       	cpc	r19, r1
    2b90:	31 f0       	breq	.+12     	; 0x2b9e <LCD_u8GoToXY+0x46>
    2b92:	0a c0       	rjmp	.+20     	; 0x2ba8 <LCD_u8GoToXY+0x50>
		{
			case LCD_u8_LINE1:LCD_voidSendCmnd(LCD_u8_FIRSTLINE_ADDRESS + Copy_u8Location);break;
    2b94:	8b 81       	ldd	r24, Y+3	; 0x03
    2b96:	80 58       	subi	r24, 0x80	; 128
    2b98:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
    2b9c:	06 c0       	rjmp	.+12     	; 0x2baa <LCD_u8GoToXY+0x52>
			case LCD_u8_LINE2:LCD_voidSendCmnd(LCD_u8_SECONDLINE_ADDRESS + Copy_u8Location);break;
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	80 54       	subi	r24, 0x40	; 64
    2ba2:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
    2ba6:	01 c0       	rjmp	.+2      	; 0x2baa <LCD_u8GoToXY+0x52>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    2ba8:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	cf 91       	pop	r28
    2bb8:	df 91       	pop	r29
    2bba:	08 95       	ret

00002bbc <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    2bbc:	df 93       	push	r29
    2bbe:	cf 93       	push	r28
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	2e 97       	sbiw	r28, 0x0e	; 14
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCmnd(LCD_u8_DISPLAY_CLEAR_CMND);
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a0 ea       	ldi	r26, 0xA0	; 160
    2bdc:	b1 e4       	ldi	r27, 0x41	; 65
    2bde:	8b 87       	std	Y+11, r24	; 0x0b
    2be0:	9c 87       	std	Y+12, r25	; 0x0c
    2be2:	ad 87       	std	Y+13, r26	; 0x0d
    2be4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	4a ef       	ldi	r20, 0xFA	; 250
    2bf4:	54 e4       	ldi	r21, 0x44	; 68
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8f 83       	std	Y+7, r24	; 0x07
    2c00:	98 87       	std	Y+8, r25	; 0x08
    2c02:	a9 87       	std	Y+9, r26	; 0x09
    2c04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c06:	6f 81       	ldd	r22, Y+7	; 0x07
    2c08:	78 85       	ldd	r23, Y+8	; 0x08
    2c0a:	89 85       	ldd	r24, Y+9	; 0x09
    2c0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e8       	ldi	r20, 0x80	; 128
    2c14:	5f e3       	ldi	r21, 0x3F	; 63
    2c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1a:	88 23       	and	r24, r24
    2c1c:	2c f4       	brge	.+10     	; 0x2c28 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
    2c26:	3f c0       	rjmp	.+126    	; 0x2ca6 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    2c28:	6f 81       	ldd	r22, Y+7	; 0x07
    2c2a:	78 85       	ldd	r23, Y+8	; 0x08
    2c2c:	89 85       	ldd	r24, Y+9	; 0x09
    2c2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	3f ef       	ldi	r19, 0xFF	; 255
    2c34:	4f e7       	ldi	r20, 0x7F	; 127
    2c36:	57 e4       	ldi	r21, 0x47	; 71
    2c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3c:	18 16       	cp	r1, r24
    2c3e:	4c f5       	brge	.+82     	; 0x2c92 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c40:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c42:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c44:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c46:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e2       	ldi	r20, 0x20	; 32
    2c4e:	51 e4       	ldi	r21, 0x41	; 65
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	bc 01       	movw	r22, r24
    2c5a:	cd 01       	movw	r24, r26
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9e 83       	std	Y+6, r25	; 0x06
    2c66:	8d 83       	std	Y+5, r24	; 0x05
    2c68:	0f c0       	rjmp	.+30     	; 0x2c88 <LCD_voidClearScreen+0xcc>
    2c6a:	88 ec       	ldi	r24, 0xC8	; 200
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	9c 83       	std	Y+4, r25	; 0x04
    2c70:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c72:	8b 81       	ldd	r24, Y+3	; 0x03
    2c74:	9c 81       	ldd	r25, Y+4	; 0x04
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <LCD_voidClearScreen+0xba>
    2c7a:	9c 83       	std	Y+4, r25	; 0x04
    2c7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2c80:	9e 81       	ldd	r25, Y+6	; 0x06
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	9e 83       	std	Y+6, r25	; 0x06
    2c86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c88:	8d 81       	ldd	r24, Y+5	; 0x05
    2c8a:	9e 81       	ldd	r25, Y+6	; 0x06
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	69 f7       	brne	.-38     	; 0x2c6a <LCD_voidClearScreen+0xae>
    2c90:	14 c0       	rjmp	.+40     	; 0x2cba <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c92:	6f 81       	ldd	r22, Y+7	; 0x07
    2c94:	78 85       	ldd	r23, Y+8	; 0x08
    2c96:	89 85       	ldd	r24, Y+9	; 0x09
    2c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9e 83       	std	Y+6, r25	; 0x06
    2ca4:	8d 83       	std	Y+5, r24	; 0x05
    2ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    2caa:	9a 83       	std	Y+2, r25	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <LCD_voidClearScreen+0xf6>
    2cb6:	9a 83       	std	Y+2, r25	; 0x02
    2cb8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    2cba:	2e 96       	adiw	r28, 0x0e	; 14
    2cbc:	0f b6       	in	r0, 0x3f	; 63
    2cbe:	f8 94       	cli
    2cc0:	de bf       	out	0x3e, r29	; 62
    2cc2:	0f be       	out	0x3f, r0	; 63
    2cc4:	cd bf       	out	0x3d, r28	; 61
    2cc6:	cf 91       	pop	r28
    2cc8:	df 91       	pop	r29
    2cca:	08 95       	ret

00002ccc <LCD_voidWriteSpecialChar>:

u8 LCD_voidWriteSpecialChar(u8 Copy_u8CharNum, u8* Copy_pu8Char,u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    2ccc:	df 93       	push	r29
    2cce:	cf 93       	push	r28
    2cd0:	cd b7       	in	r28, 0x3d	; 61
    2cd2:	de b7       	in	r29, 0x3e	; 62
    2cd4:	2a 97       	sbiw	r28, 0x0a	; 10
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	8c 83       	std	Y+4, r24	; 0x04
    2ce2:	7e 83       	std	Y+6, r23	; 0x06
    2ce4:	6d 83       	std	Y+5, r22	; 0x05
    2ce6:	4f 83       	std	Y+7, r20	; 0x07
    2ce8:	28 87       	std	Y+8, r18	; 0x08
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	8b 83       	std	Y+3, r24	; 0x03
	const u8 size = 8;
    2cee:	88 e0       	ldi	r24, 0x08	; 8
    2cf0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	switch(Copy_u8CharNum)
    2cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	3a 87       	std	Y+10, r19	; 0x0a
    2cfa:	29 87       	std	Y+9, r18	; 0x09
    2cfc:	89 85       	ldd	r24, Y+9	; 0x09
    2cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d00:	83 30       	cpi	r24, 0x03	; 3
    2d02:	91 05       	cpc	r25, r1
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <LCD_voidWriteSpecialChar+0x3c>
    2d06:	8c c0       	rjmp	.+280    	; 0x2e20 <LCD_voidWriteSpecialChar+0x154>
    2d08:	29 85       	ldd	r18, Y+9	; 0x09
    2d0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d0c:	24 30       	cpi	r18, 0x04	; 4
    2d0e:	31 05       	cpc	r19, r1
    2d10:	8c f4       	brge	.+34     	; 0x2d34 <LCD_voidWriteSpecialChar+0x68>
    2d12:	89 85       	ldd	r24, Y+9	; 0x09
    2d14:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d16:	81 30       	cpi	r24, 0x01	; 1
    2d18:	91 05       	cpc	r25, r1
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <LCD_voidWriteSpecialChar+0x52>
    2d1c:	43 c0       	rjmp	.+134    	; 0x2da4 <LCD_voidWriteSpecialChar+0xd8>
    2d1e:	29 85       	ldd	r18, Y+9	; 0x09
    2d20:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d22:	22 30       	cpi	r18, 0x02	; 2
    2d24:	31 05       	cpc	r19, r1
    2d26:	0c f0       	brlt	.+2      	; 0x2d2a <LCD_voidWriteSpecialChar+0x5e>
    2d28:	5c c0       	rjmp	.+184    	; 0x2de2 <LCD_voidWriteSpecialChar+0x116>
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	d1 f0       	breq	.+52     	; 0x2d66 <LCD_voidWriteSpecialChar+0x9a>
    2d32:	11 c1       	rjmp	.+546    	; 0x2f56 <LCD_voidWriteSpecialChar+0x28a>
    2d34:	29 85       	ldd	r18, Y+9	; 0x09
    2d36:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d38:	25 30       	cpi	r18, 0x05	; 5
    2d3a:	31 05       	cpc	r19, r1
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <LCD_voidWriteSpecialChar+0x74>
    2d3e:	ae c0       	rjmp	.+348    	; 0x2e9c <LCD_voidWriteSpecialChar+0x1d0>
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	85 30       	cpi	r24, 0x05	; 5
    2d46:	91 05       	cpc	r25, r1
    2d48:	0c f4       	brge	.+2      	; 0x2d4c <LCD_voidWriteSpecialChar+0x80>
    2d4a:	89 c0       	rjmp	.+274    	; 0x2e5e <LCD_voidWriteSpecialChar+0x192>
    2d4c:	29 85       	ldd	r18, Y+9	; 0x09
    2d4e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d50:	26 30       	cpi	r18, 0x06	; 6
    2d52:	31 05       	cpc	r19, r1
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <LCD_voidWriteSpecialChar+0x8c>
    2d56:	c1 c0       	rjmp	.+386    	; 0x2eda <LCD_voidWriteSpecialChar+0x20e>
    2d58:	89 85       	ldd	r24, Y+9	; 0x09
    2d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d5c:	87 30       	cpi	r24, 0x07	; 7
    2d5e:	91 05       	cpc	r25, r1
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <LCD_voidWriteSpecialChar+0x98>
    2d62:	da c0       	rjmp	.+436    	; 0x2f18 <LCD_voidWriteSpecialChar+0x24c>
    2d64:	f8 c0       	rjmp	.+496    	; 0x2f56 <LCD_voidWriteSpecialChar+0x28a>
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
    2d66:	80 e4       	ldi	r24, 0x40	; 64
    2d68:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2d6c:	19 82       	std	Y+1, r1	; 0x01
    2d6e:	0e c0       	rjmp	.+28     	; 0x2d8c <LCD_voidWriteSpecialChar+0xc0>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	28 2f       	mov	r18, r24
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	8d 81       	ldd	r24, Y+5	; 0x05
    2d78:	9e 81       	ldd	r25, Y+6	; 0x06
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	e2 0f       	add	r30, r18
    2d7e:	f3 1f       	adc	r31, r19
    2d80:	80 81       	ld	r24, Z
    2d82:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
	u8 i;
	switch(Copy_u8CharNum)
	{
	case LCD_u8_CHAR0:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_0_COMMAND);
		for(i = 0;i < size; i++)
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	99 81       	ldd	r25, Y+1	; 0x01
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	98 17       	cp	r25, r24
    2d92:	70 f3       	brcs	.-36     	; 0x2d70 <LCD_voidWriteSpecialChar+0xa4>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2d94:	8f 81       	ldd	r24, Y+7	; 0x07
    2d96:	68 85       	ldd	r22, Y+8	; 0x08
    2d98:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9e:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2da2:	da c0       	rjmp	.+436    	; 0x2f58 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
    2da4:	88 e4       	ldi	r24, 0x48	; 72
    2da6:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2daa:	19 82       	std	Y+1, r1	; 0x01
    2dac:	0e c0       	rjmp	.+28     	; 0x2dca <LCD_voidWriteSpecialChar+0xfe>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	fc 01       	movw	r30, r24
    2dba:	e2 0f       	add	r30, r18
    2dbc:	f3 1f       	adc	r31, r19
    2dbe:	80 81       	ld	r24, Z
    2dc0:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR1:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_1_COMMAND);
		for(i = 0;i < size; i++)
    2dc4:	89 81       	ldd	r24, Y+1	; 0x01
    2dc6:	8f 5f       	subi	r24, 0xFF	; 255
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	99 81       	ldd	r25, Y+1	; 0x01
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	98 17       	cp	r25, r24
    2dd0:	70 f3       	brcs	.-36     	; 0x2dae <LCD_voidWriteSpecialChar+0xe2>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2dd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd4:	68 85       	ldd	r22, Y+8	; 0x08
    2dd6:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2dda:	8c 81       	ldd	r24, Y+4	; 0x04
    2ddc:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2de0:	bb c0       	rjmp	.+374    	; 0x2f58 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
    2de2:	80 e5       	ldi	r24, 0x50	; 80
    2de4:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2de8:	19 82       	std	Y+1, r1	; 0x01
    2dea:	0e c0       	rjmp	.+28     	; 0x2e08 <LCD_voidWriteSpecialChar+0x13c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2dec:	89 81       	ldd	r24, Y+1	; 0x01
    2dee:	28 2f       	mov	r18, r24
    2df0:	30 e0       	ldi	r19, 0x00	; 0
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	fc 01       	movw	r30, r24
    2df8:	e2 0f       	add	r30, r18
    2dfa:	f3 1f       	adc	r31, r19
    2dfc:	80 81       	ld	r24, Z
    2dfe:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR2:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_2_COMMAND);
		for(i = 0;i < size; i++)
    2e02:	89 81       	ldd	r24, Y+1	; 0x01
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	89 83       	std	Y+1, r24	; 0x01
    2e08:	99 81       	ldd	r25, Y+1	; 0x01
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	98 17       	cp	r25, r24
    2e0e:	70 f3       	brcs	.-36     	; 0x2dec <LCD_voidWriteSpecialChar+0x120>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2e10:	8f 81       	ldd	r24, Y+7	; 0x07
    2e12:	68 85       	ldd	r22, Y+8	; 0x08
    2e14:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2e18:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2e1e:	9c c0       	rjmp	.+312    	; 0x2f58 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
    2e20:	88 e5       	ldi	r24, 0x58	; 88
    2e22:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2e26:	19 82       	std	Y+1, r1	; 0x01
    2e28:	0e c0       	rjmp	.+28     	; 0x2e46 <LCD_voidWriteSpecialChar+0x17a>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	8d 81       	ldd	r24, Y+5	; 0x05
    2e32:	9e 81       	ldd	r25, Y+6	; 0x06
    2e34:	fc 01       	movw	r30, r24
    2e36:	e2 0f       	add	r30, r18
    2e38:	f3 1f       	adc	r31, r19
    2e3a:	80 81       	ld	r24, Z
    2e3c:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR3:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_3_COMMAND);
		for(i = 0;i < size; i++)
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	8f 5f       	subi	r24, 0xFF	; 255
    2e44:	89 83       	std	Y+1, r24	; 0x01
    2e46:	99 81       	ldd	r25, Y+1	; 0x01
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	98 17       	cp	r25, r24
    2e4c:	70 f3       	brcs	.-36     	; 0x2e2a <LCD_voidWriteSpecialChar+0x15e>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2e4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e50:	68 85       	ldd	r22, Y+8	; 0x08
    2e52:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2e56:	8c 81       	ldd	r24, Y+4	; 0x04
    2e58:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2e5c:	7d c0       	rjmp	.+250    	; 0x2f58 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
    2e5e:	80 e6       	ldi	r24, 0x60	; 96
    2e60:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2e64:	19 82       	std	Y+1, r1	; 0x01
    2e66:	0e c0       	rjmp	.+28     	; 0x2e84 <LCD_voidWriteSpecialChar+0x1b8>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e70:	9e 81       	ldd	r25, Y+6	; 0x06
    2e72:	fc 01       	movw	r30, r24
    2e74:	e2 0f       	add	r30, r18
    2e76:	f3 1f       	adc	r31, r19
    2e78:	80 81       	ld	r24, Z
    2e7a:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR4:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_4_COMMAND);
		for(i = 0;i < size; i++)
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	8f 5f       	subi	r24, 0xFF	; 255
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	99 81       	ldd	r25, Y+1	; 0x01
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	98 17       	cp	r25, r24
    2e8a:	70 f3       	brcs	.-36     	; 0x2e68 <LCD_voidWriteSpecialChar+0x19c>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2e8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2e8e:	68 85       	ldd	r22, Y+8	; 0x08
    2e90:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2e94:	8c 81       	ldd	r24, Y+4	; 0x04
    2e96:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2e9a:	5e c0       	rjmp	.+188    	; 0x2f58 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
    2e9c:	88 e6       	ldi	r24, 0x68	; 104
    2e9e:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2ea2:	19 82       	std	Y+1, r1	; 0x01
    2ea4:	0e c0       	rjmp	.+28     	; 0x2ec2 <LCD_voidWriteSpecialChar+0x1f6>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	8d 81       	ldd	r24, Y+5	; 0x05
    2eae:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	e2 0f       	add	r30, r18
    2eb4:	f3 1f       	adc	r31, r19
    2eb6:	80 81       	ld	r24, Z
    2eb8:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR5:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_5_COMMAND);
		for(i = 0;i < size; i++)
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	89 83       	std	Y+1, r24	; 0x01
    2ec2:	99 81       	ldd	r25, Y+1	; 0x01
    2ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec6:	98 17       	cp	r25, r24
    2ec8:	70 f3       	brcs	.-36     	; 0x2ea6 <LCD_voidWriteSpecialChar+0x1da>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2eca:	8f 81       	ldd	r24, Y+7	; 0x07
    2ecc:	68 85       	ldd	r22, Y+8	; 0x08
    2ece:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2ed2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed4:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2ed8:	3f c0       	rjmp	.+126    	; 0x2f58 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
    2eda:	80 e7       	ldi	r24, 0x70	; 112
    2edc:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2ee0:	19 82       	std	Y+1, r1	; 0x01
    2ee2:	0e c0       	rjmp	.+28     	; 0x2f00 <LCD_voidWriteSpecialChar+0x234>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	28 2f       	mov	r18, r24
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	fc 01       	movw	r30, r24
    2ef0:	e2 0f       	add	r30, r18
    2ef2:	f3 1f       	adc	r31, r19
    2ef4:	80 81       	ld	r24, Z
    2ef6:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR6:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_6_COMMAND);
		for(i = 0;i < size; i++)
    2efa:	89 81       	ldd	r24, Y+1	; 0x01
    2efc:	8f 5f       	subi	r24, 0xFF	; 255
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	99 81       	ldd	r25, Y+1	; 0x01
    2f02:	8a 81       	ldd	r24, Y+2	; 0x02
    2f04:	98 17       	cp	r25, r24
    2f06:	70 f3       	brcs	.-36     	; 0x2ee4 <LCD_voidWriteSpecialChar+0x218>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2f08:	8f 81       	ldd	r24, Y+7	; 0x07
    2f0a:	68 85       	ldd	r22, Y+8	; 0x08
    2f0c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f10:	8c 81       	ldd	r24, Y+4	; 0x04
    2f12:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2f16:	20 c0       	rjmp	.+64     	; 0x2f58 <LCD_voidWriteSpecialChar+0x28c>
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
    2f18:	88 e7       	ldi	r24, 0x78	; 120
    2f1a:	0e 94 c9 11 	call	0x2392	; 0x2392 <LCD_voidSendCmnd>
		for(i = 0;i < size; i++)
    2f1e:	19 82       	std	Y+1, r1	; 0x01
    2f20:	0e c0       	rjmp	.+28     	; 0x2f3e <LCD_voidWriteSpecialChar+0x272>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	28 2f       	mov	r18, r24
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	8d 81       	ldd	r24, Y+5	; 0x05
    2f2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2c:	fc 01       	movw	r30, r24
    2f2e:	e2 0f       	add	r30, r18
    2f30:	f3 1f       	adc	r31, r19
    2f32:	80 81       	ld	r24, Z
    2f34:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
		LCD_voidSendChar(Copy_u8CharNum);
		break;
	case LCD_u8_CHAR7:
		LCD_voidSendCmnd(LCD_u8_CUSTOM_CHAR_7_COMMAND);
		for(i = 0;i < size; i++)
    2f38:	89 81       	ldd	r24, Y+1	; 0x01
    2f3a:	8f 5f       	subi	r24, 0xFF	; 255
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	99 81       	ldd	r25, Y+1	; 0x01
    2f40:	8a 81       	ldd	r24, Y+2	; 0x02
    2f42:	98 17       	cp	r25, r24
    2f44:	70 f3       	brcs	.-36     	; 0x2f22 <LCD_voidWriteSpecialChar+0x256>
		{
			LCD_voidSendChar(Copy_pu8Char[i]);
		}
		LCD_u8GoToXY(Copy_u8LineNum,Copy_u8Location);
    2f46:	8f 81       	ldd	r24, Y+7	; 0x07
    2f48:	68 85       	ldd	r22, Y+8	; 0x08
    2f4a:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
		LCD_voidSendChar(Copy_u8CharNum);
    2f4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f50:	0e 94 71 13 	call	0x26e2	; 0x26e2 <LCD_voidSendChar>
    2f54:	01 c0       	rjmp	.+2      	; 0x2f58 <LCD_voidWriteSpecialChar+0x28c>
		break;
	default:Local_u8ErrorState = STD_TYPES_NOK;
    2f56:	1b 82       	std	Y+3, r1	; 0x03
	}
	return Local_u8ErrorState;
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2f5a:	2a 96       	adiw	r28, 0x0a	; 10
    2f5c:	0f b6       	in	r0, 0x3f	; 63
    2f5e:	f8 94       	cli
    2f60:	de bf       	out	0x3e, r29	; 62
    2f62:	0f be       	out	0x3f, r0	; 63
    2f64:	cd bf       	out	0x3d, r28	; 61
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <LCD_voidSendHalfCmnd>:

void LCD_voidSendHalfCmnd(u8 Copy_u8HalfCmnd)
{
    2f6c:	df 93       	push	r29
    2f6e:	cf 93       	push	r28
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	e1 97       	sbiw	r28, 0x31	; 49
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	89 ab       	std	Y+49, r24	; 0x31
	/* Step 1: RS = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	60 e0       	ldi	r22, 0x00	; 0
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 2: RW = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	61 e0       	ldi	r22, 0x01	; 1
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
	/* Step 3: Write Command  */
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8HalfCmnd<<4);
    2f96:	89 a9       	ldd	r24, Y+49	; 0x31
    2f98:	98 2f       	mov	r25, r24
    2f9a:	92 95       	swap	r25
    2f9c:	90 7f       	andi	r25, 0xF0	; 240
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	69 2f       	mov	r22, r25
    2fa2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <DIO_u8SetPortValue>
	/* Step 4: E = 1 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    2fa6:	80 e0       	ldi	r24, 0x00	; 0
    2fa8:	62 e0       	ldi	r22, 0x02	; 2
    2faa:	41 e0       	ldi	r20, 0x01	; 1
    2fac:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	90 e0       	ldi	r25, 0x00	; 0
    2fb4:	a0 e8       	ldi	r26, 0x80	; 128
    2fb6:	bf e3       	ldi	r27, 0x3F	; 63
    2fb8:	8d a7       	std	Y+45, r24	; 0x2d
    2fba:	9e a7       	std	Y+46, r25	; 0x2e
    2fbc:	af a7       	std	Y+47, r26	; 0x2f
    2fbe:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fc0:	6d a5       	ldd	r22, Y+45	; 0x2d
    2fc2:	7e a5       	ldd	r23, Y+46	; 0x2e
    2fc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fc6:	98 a9       	ldd	r25, Y+48	; 0x30
    2fc8:	2b ea       	ldi	r18, 0xAB	; 171
    2fca:	3a ea       	ldi	r19, 0xAA	; 170
    2fcc:	4a e2       	ldi	r20, 0x2A	; 42
    2fce:	50 e4       	ldi	r21, 0x40	; 64
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	89 a7       	std	Y+41, r24	; 0x29
    2fda:	9a a7       	std	Y+42, r25	; 0x2a
    2fdc:	ab a7       	std	Y+43, r26	; 0x2b
    2fde:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2fe0:	69 a5       	ldd	r22, Y+41	; 0x29
    2fe2:	7a a5       	ldd	r23, Y+42	; 0x2a
    2fe4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fe6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	40 e8       	ldi	r20, 0x80	; 128
    2fee:	5f e3       	ldi	r21, 0x3F	; 63
    2ff0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2ff4:	88 23       	and	r24, r24
    2ff6:	1c f4       	brge	.+6      	; 0x2ffe <LCD_voidSendHalfCmnd+0x92>
		__ticks = 1;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	88 a7       	std	Y+40, r24	; 0x28
    2ffc:	91 c0       	rjmp	.+290    	; 0x3120 <LCD_voidSendHalfCmnd+0x1b4>
	else if (__tmp > 255)
    2ffe:	69 a5       	ldd	r22, Y+41	; 0x29
    3000:	7a a5       	ldd	r23, Y+42	; 0x2a
    3002:	8b a5       	ldd	r24, Y+43	; 0x2b
    3004:	9c a5       	ldd	r25, Y+44	; 0x2c
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	4f e7       	ldi	r20, 0x7F	; 127
    300c:	53 e4       	ldi	r21, 0x43	; 67
    300e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3012:	18 16       	cp	r1, r24
    3014:	0c f0       	brlt	.+2      	; 0x3018 <LCD_voidSendHalfCmnd+0xac>
    3016:	7b c0       	rjmp	.+246    	; 0x310e <LCD_voidSendHalfCmnd+0x1a2>
	{
		_delay_ms(__us / 1000.0);
    3018:	6d a5       	ldd	r22, Y+45	; 0x2d
    301a:	7e a5       	ldd	r23, Y+46	; 0x2e
    301c:	8f a5       	ldd	r24, Y+47	; 0x2f
    301e:	98 a9       	ldd	r25, Y+48	; 0x30
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	4a e7       	ldi	r20, 0x7A	; 122
    3026:	54 e4       	ldi	r21, 0x44	; 68
    3028:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	8c a3       	std	Y+36, r24	; 0x24
    3032:	9d a3       	std	Y+37, r25	; 0x25
    3034:	ae a3       	std	Y+38, r26	; 0x26
    3036:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3038:	6c a1       	ldd	r22, Y+36	; 0x24
    303a:	7d a1       	ldd	r23, Y+37	; 0x25
    303c:	8e a1       	ldd	r24, Y+38	; 0x26
    303e:	9f a1       	ldd	r25, Y+39	; 0x27
    3040:	20 e0       	ldi	r18, 0x00	; 0
    3042:	30 e0       	ldi	r19, 0x00	; 0
    3044:	4a ef       	ldi	r20, 0xFA	; 250
    3046:	54 e4       	ldi	r21, 0x44	; 68
    3048:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	88 a3       	std	Y+32, r24	; 0x20
    3052:	99 a3       	std	Y+33, r25	; 0x21
    3054:	aa a3       	std	Y+34, r26	; 0x22
    3056:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3058:	68 a1       	ldd	r22, Y+32	; 0x20
    305a:	79 a1       	ldd	r23, Y+33	; 0x21
    305c:	8a a1       	ldd	r24, Y+34	; 0x22
    305e:	9b a1       	ldd	r25, Y+35	; 0x23
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	40 e8       	ldi	r20, 0x80	; 128
    3066:	5f e3       	ldi	r21, 0x3F	; 63
    3068:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    306c:	88 23       	and	r24, r24
    306e:	2c f4       	brge	.+10     	; 0x307a <LCD_voidSendHalfCmnd+0x10e>
		__ticks = 1;
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	9f 8f       	std	Y+31, r25	; 0x1f
    3076:	8e 8f       	std	Y+30, r24	; 0x1e
    3078:	3f c0       	rjmp	.+126    	; 0x30f8 <LCD_voidSendHalfCmnd+0x18c>
	else if (__tmp > 65535)
    307a:	68 a1       	ldd	r22, Y+32	; 0x20
    307c:	79 a1       	ldd	r23, Y+33	; 0x21
    307e:	8a a1       	ldd	r24, Y+34	; 0x22
    3080:	9b a1       	ldd	r25, Y+35	; 0x23
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	3f ef       	ldi	r19, 0xFF	; 255
    3086:	4f e7       	ldi	r20, 0x7F	; 127
    3088:	57 e4       	ldi	r21, 0x47	; 71
    308a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    308e:	18 16       	cp	r1, r24
    3090:	4c f5       	brge	.+82     	; 0x30e4 <LCD_voidSendHalfCmnd+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3092:	6c a1       	ldd	r22, Y+36	; 0x24
    3094:	7d a1       	ldd	r23, Y+37	; 0x25
    3096:	8e a1       	ldd	r24, Y+38	; 0x26
    3098:	9f a1       	ldd	r25, Y+39	; 0x27
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	40 e2       	ldi	r20, 0x20	; 32
    30a0:	51 e4       	ldi	r21, 0x41	; 65
    30a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	bc 01       	movw	r22, r24
    30ac:	cd 01       	movw	r24, r26
    30ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	9f 8f       	std	Y+31, r25	; 0x1f
    30b8:	8e 8f       	std	Y+30, r24	; 0x1e
    30ba:	0f c0       	rjmp	.+30     	; 0x30da <LCD_voidSendHalfCmnd+0x16e>
    30bc:	88 ec       	ldi	r24, 0xC8	; 200
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	9d 8f       	std	Y+29, r25	; 0x1d
    30c2:	8c 8f       	std	Y+28, r24	; 0x1c
    30c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30c8:	01 97       	sbiw	r24, 0x01	; 1
    30ca:	f1 f7       	brne	.-4      	; 0x30c8 <LCD_voidSendHalfCmnd+0x15c>
    30cc:	9d 8f       	std	Y+29, r25	; 0x1d
    30ce:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30d0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30d2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	9f 8f       	std	Y+31, r25	; 0x1f
    30d8:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30de:	00 97       	sbiw	r24, 0x00	; 0
    30e0:	69 f7       	brne	.-38     	; 0x30bc <LCD_voidSendHalfCmnd+0x150>
    30e2:	24 c0       	rjmp	.+72     	; 0x312c <LCD_voidSendHalfCmnd+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e4:	68 a1       	ldd	r22, Y+32	; 0x20
    30e6:	79 a1       	ldd	r23, Y+33	; 0x21
    30e8:	8a a1       	ldd	r24, Y+34	; 0x22
    30ea:	9b a1       	ldd	r25, Y+35	; 0x23
    30ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	9f 8f       	std	Y+31, r25	; 0x1f
    30f6:	8e 8f       	std	Y+30, r24	; 0x1e
    30f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    30fa:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30fc:	9b 8f       	std	Y+27, r25	; 0x1b
    30fe:	8a 8f       	std	Y+26, r24	; 0x1a
    3100:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3102:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3104:	01 97       	sbiw	r24, 0x01	; 1
    3106:	f1 f7       	brne	.-4      	; 0x3104 <LCD_voidSendHalfCmnd+0x198>
    3108:	9b 8f       	std	Y+27, r25	; 0x1b
    310a:	8a 8f       	std	Y+26, r24	; 0x1a
    310c:	0f c0       	rjmp	.+30     	; 0x312c <LCD_voidSendHalfCmnd+0x1c0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    310e:	69 a5       	ldd	r22, Y+41	; 0x29
    3110:	7a a5       	ldd	r23, Y+42	; 0x2a
    3112:	8b a5       	ldd	r24, Y+43	; 0x2b
    3114:	9c a5       	ldd	r25, Y+44	; 0x2c
    3116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    311a:	dc 01       	movw	r26, r24
    311c:	cb 01       	movw	r24, r22
    311e:	88 a7       	std	Y+40, r24	; 0x28
    3120:	88 a5       	ldd	r24, Y+40	; 0x28
    3122:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3124:	89 8d       	ldd	r24, Y+25	; 0x19
    3126:	8a 95       	dec	r24
    3128:	f1 f7       	brne	.-4      	; 0x3126 <LCD_voidSendHalfCmnd+0x1ba>
    312a:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1); //wait tw = 230 ns
	/* Step 5: E = 0 */
	DIO_u8SetPinValue(LCD_u8_CTRL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    312c:	80 e0       	ldi	r24, 0x00	; 0
    312e:	62 e0       	ldi	r22, 0x02	; 2
    3130:	40 e0       	ldi	r20, 0x00	; 0
    3132:	0e 94 64 08 	call	0x10c8	; 0x10c8 <DIO_u8SetPinValue>
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	a0 e8       	ldi	r26, 0x80	; 128
    313c:	bf e3       	ldi	r27, 0x3F	; 63
    313e:	8d 8b       	std	Y+21, r24	; 0x15
    3140:	9e 8b       	std	Y+22, r25	; 0x16
    3142:	af 8b       	std	Y+23, r26	; 0x17
    3144:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3146:	6d 89       	ldd	r22, Y+21	; 0x15
    3148:	7e 89       	ldd	r23, Y+22	; 0x16
    314a:	8f 89       	ldd	r24, Y+23	; 0x17
    314c:	98 8d       	ldd	r25, Y+24	; 0x18
    314e:	2b ea       	ldi	r18, 0xAB	; 171
    3150:	3a ea       	ldi	r19, 0xAA	; 170
    3152:	4a e2       	ldi	r20, 0x2A	; 42
    3154:	50 e4       	ldi	r21, 0x40	; 64
    3156:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	89 8b       	std	Y+17, r24	; 0x11
    3160:	9a 8b       	std	Y+18, r25	; 0x12
    3162:	ab 8b       	std	Y+19, r26	; 0x13
    3164:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3166:	69 89       	ldd	r22, Y+17	; 0x11
    3168:	7a 89       	ldd	r23, Y+18	; 0x12
    316a:	8b 89       	ldd	r24, Y+19	; 0x13
    316c:	9c 89       	ldd	r25, Y+20	; 0x14
    316e:	20 e0       	ldi	r18, 0x00	; 0
    3170:	30 e0       	ldi	r19, 0x00	; 0
    3172:	40 e8       	ldi	r20, 0x80	; 128
    3174:	5f e3       	ldi	r21, 0x3F	; 63
    3176:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    317a:	88 23       	and	r24, r24
    317c:	1c f4       	brge	.+6      	; 0x3184 <LCD_voidSendHalfCmnd+0x218>
		__ticks = 1;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	88 8b       	std	Y+16, r24	; 0x10
    3182:	91 c0       	rjmp	.+290    	; 0x32a6 <LCD_voidSendHalfCmnd+0x33a>
	else if (__tmp > 255)
    3184:	69 89       	ldd	r22, Y+17	; 0x11
    3186:	7a 89       	ldd	r23, Y+18	; 0x12
    3188:	8b 89       	ldd	r24, Y+19	; 0x13
    318a:	9c 89       	ldd	r25, Y+20	; 0x14
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	4f e7       	ldi	r20, 0x7F	; 127
    3192:	53 e4       	ldi	r21, 0x43	; 67
    3194:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3198:	18 16       	cp	r1, r24
    319a:	0c f0       	brlt	.+2      	; 0x319e <LCD_voidSendHalfCmnd+0x232>
    319c:	7b c0       	rjmp	.+246    	; 0x3294 <LCD_voidSendHalfCmnd+0x328>
	{
		_delay_ms(__us / 1000.0);
    319e:	6d 89       	ldd	r22, Y+21	; 0x15
    31a0:	7e 89       	ldd	r23, Y+22	; 0x16
    31a2:	8f 89       	ldd	r24, Y+23	; 0x17
    31a4:	98 8d       	ldd	r25, Y+24	; 0x18
    31a6:	20 e0       	ldi	r18, 0x00	; 0
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	4a e7       	ldi	r20, 0x7A	; 122
    31ac:	54 e4       	ldi	r21, 0x44	; 68
    31ae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    31b2:	dc 01       	movw	r26, r24
    31b4:	cb 01       	movw	r24, r22
    31b6:	8c 87       	std	Y+12, r24	; 0x0c
    31b8:	9d 87       	std	Y+13, r25	; 0x0d
    31ba:	ae 87       	std	Y+14, r26	; 0x0e
    31bc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31be:	6c 85       	ldd	r22, Y+12	; 0x0c
    31c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    31c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    31c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    31c6:	20 e0       	ldi	r18, 0x00	; 0
    31c8:	30 e0       	ldi	r19, 0x00	; 0
    31ca:	4a ef       	ldi	r20, 0xFA	; 250
    31cc:	54 e4       	ldi	r21, 0x44	; 68
    31ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d2:	dc 01       	movw	r26, r24
    31d4:	cb 01       	movw	r24, r22
    31d6:	88 87       	std	Y+8, r24	; 0x08
    31d8:	99 87       	std	Y+9, r25	; 0x09
    31da:	aa 87       	std	Y+10, r26	; 0x0a
    31dc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31de:	68 85       	ldd	r22, Y+8	; 0x08
    31e0:	79 85       	ldd	r23, Y+9	; 0x09
    31e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    31e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    31e6:	20 e0       	ldi	r18, 0x00	; 0
    31e8:	30 e0       	ldi	r19, 0x00	; 0
    31ea:	40 e8       	ldi	r20, 0x80	; 128
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f2:	88 23       	and	r24, r24
    31f4:	2c f4       	brge	.+10     	; 0x3200 <LCD_voidSendHalfCmnd+0x294>
		__ticks = 1;
    31f6:	81 e0       	ldi	r24, 0x01	; 1
    31f8:	90 e0       	ldi	r25, 0x00	; 0
    31fa:	9f 83       	std	Y+7, r25	; 0x07
    31fc:	8e 83       	std	Y+6, r24	; 0x06
    31fe:	3f c0       	rjmp	.+126    	; 0x327e <LCD_voidSendHalfCmnd+0x312>
	else if (__tmp > 65535)
    3200:	68 85       	ldd	r22, Y+8	; 0x08
    3202:	79 85       	ldd	r23, Y+9	; 0x09
    3204:	8a 85       	ldd	r24, Y+10	; 0x0a
    3206:	9b 85       	ldd	r25, Y+11	; 0x0b
    3208:	20 e0       	ldi	r18, 0x00	; 0
    320a:	3f ef       	ldi	r19, 0xFF	; 255
    320c:	4f e7       	ldi	r20, 0x7F	; 127
    320e:	57 e4       	ldi	r21, 0x47	; 71
    3210:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3214:	18 16       	cp	r1, r24
    3216:	4c f5       	brge	.+82     	; 0x326a <LCD_voidSendHalfCmnd+0x2fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3218:	6c 85       	ldd	r22, Y+12	; 0x0c
    321a:	7d 85       	ldd	r23, Y+13	; 0x0d
    321c:	8e 85       	ldd	r24, Y+14	; 0x0e
    321e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3220:	20 e0       	ldi	r18, 0x00	; 0
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	40 e2       	ldi	r20, 0x20	; 32
    3226:	51 e4       	ldi	r21, 0x41	; 65
    3228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	bc 01       	movw	r22, r24
    3232:	cd 01       	movw	r24, r26
    3234:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	9f 83       	std	Y+7, r25	; 0x07
    323e:	8e 83       	std	Y+6, r24	; 0x06
    3240:	0f c0       	rjmp	.+30     	; 0x3260 <LCD_voidSendHalfCmnd+0x2f4>
    3242:	88 ec       	ldi	r24, 0xC8	; 200
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	9d 83       	std	Y+5, r25	; 0x05
    3248:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    324a:	8c 81       	ldd	r24, Y+4	; 0x04
    324c:	9d 81       	ldd	r25, Y+5	; 0x05
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <LCD_voidSendHalfCmnd+0x2e2>
    3252:	9d 83       	std	Y+5, r25	; 0x05
    3254:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3256:	8e 81       	ldd	r24, Y+6	; 0x06
    3258:	9f 81       	ldd	r25, Y+7	; 0x07
    325a:	01 97       	sbiw	r24, 0x01	; 1
    325c:	9f 83       	std	Y+7, r25	; 0x07
    325e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3260:	8e 81       	ldd	r24, Y+6	; 0x06
    3262:	9f 81       	ldd	r25, Y+7	; 0x07
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	69 f7       	brne	.-38     	; 0x3242 <LCD_voidSendHalfCmnd+0x2d6>
    3268:	24 c0       	rjmp	.+72     	; 0x32b2 <LCD_voidSendHalfCmnd+0x346>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326a:	68 85       	ldd	r22, Y+8	; 0x08
    326c:	79 85       	ldd	r23, Y+9	; 0x09
    326e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3270:	9b 85       	ldd	r25, Y+11	; 0x0b
    3272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	9f 83       	std	Y+7, r25	; 0x07
    327c:	8e 83       	std	Y+6, r24	; 0x06
    327e:	8e 81       	ldd	r24, Y+6	; 0x06
    3280:	9f 81       	ldd	r25, Y+7	; 0x07
    3282:	9b 83       	std	Y+3, r25	; 0x03
    3284:	8a 83       	std	Y+2, r24	; 0x02
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	9b 81       	ldd	r25, Y+3	; 0x03
    328a:	01 97       	sbiw	r24, 0x01	; 1
    328c:	f1 f7       	brne	.-4      	; 0x328a <LCD_voidSendHalfCmnd+0x31e>
    328e:	9b 83       	std	Y+3, r25	; 0x03
    3290:	8a 83       	std	Y+2, r24	; 0x02
    3292:	0f c0       	rjmp	.+30     	; 0x32b2 <LCD_voidSendHalfCmnd+0x346>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3294:	69 89       	ldd	r22, Y+17	; 0x11
    3296:	7a 89       	ldd	r23, Y+18	; 0x12
    3298:	8b 89       	ldd	r24, Y+19	; 0x13
    329a:	9c 89       	ldd	r25, Y+20	; 0x14
    329c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32a0:	dc 01       	movw	r26, r24
    32a2:	cb 01       	movw	r24, r22
    32a4:	88 8b       	std	Y+16, r24	; 0x10
    32a6:	88 89       	ldd	r24, Y+16	; 0x10
    32a8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	8a 95       	dec	r24
    32ae:	f1 f7       	brne	.-4      	; 0x32ac <LCD_voidSendHalfCmnd+0x340>
    32b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1); // wait tc = 500ns (not important because 1 us in step 4 is enough because >>> 230ns )
    32b2:	e1 96       	adiw	r28, 0x31	; 49
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	f8 94       	cli
    32b8:	de bf       	out	0x3e, r29	; 62
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	cd bf       	out	0x3d, r28	; 61
    32be:	cf 91       	pop	r28
    32c0:	df 91       	pop	r29
    32c2:	08 95       	ret

000032c4 <SWICU_voidEnable>:
/* Global Variables */
static volatile u16 Period_Ticks = 0;
static volatile u16 ON_Ticks = 0;

void SWICU_voidEnable(void)
{
    32c4:	df 93       	push	r29
    32c6:	cf 93       	push	r28
    32c8:	cd b7       	in	r28, 0x3d	; 61
    32ca:	de b7       	in	r29, 0x3e	; 62
	/* Set EXTI CallBack */
	EXTI_u8EXTISetCallBack(EXTI_u8_INT0,&SWICU_voidEXTICallBack);
    32cc:	2f e0       	ldi	r18, 0x0F	; 15
    32ce:	3a e1       	ldi	r19, 0x1A	; 26
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	b9 01       	movw	r22, r18
    32d4:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <EXTI_u8EXTISetCallBack>
	/* Enable EXTI => Raising Edge */
	EXTI_u8EXTIEnable(EXTI_u8_INT0,EXTI_u8_RAISING_EDGE);
    32d8:	80 e0       	ldi	r24, 0x00	; 0
    32da:	60 e0       	ldi	r22, 0x00	; 0
    32dc:	0e 94 90 0b 	call	0x1720	; 0x1720 <EXTI_u8EXTIEnable>
}
    32e0:	cf 91       	pop	r28
    32e2:	df 91       	pop	r29
    32e4:	08 95       	ret

000032e6 <SWICU_voidDisable>:

void SWICU_voidDisable(void)
{
    32e6:	df 93       	push	r29
    32e8:	cf 93       	push	r28
    32ea:	cd b7       	in	r28, 0x3d	; 61
    32ec:	de b7       	in	r29, 0x3e	; 62
	EXTI_u8EXTIDisable(EXTI_u8_INT0);
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <EXTI_u8EXTIDisable>
}
    32f4:	cf 91       	pop	r28
    32f6:	df 91       	pop	r29
    32f8:	08 95       	ret

000032fa <SWICU_u8GetTotalPeriod>:

u8   SWICU_u8GetTotalPeriod(u32 * Copy_pu32TotalPeriod)
{
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	00 d0       	rcall	.+0      	; 0x3300 <SWICU_u8GetTotalPeriod+0x6>
    3300:	0f 92       	push	r0
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	9b 83       	std	Y+3, r25	; 0x03
    3308:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    330a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu32TotalPeriod != NULL)
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	9b 81       	ldd	r25, Y+3	; 0x03
    3310:	00 97       	sbiw	r24, 0x00	; 0
    3312:	79 f0       	breq	.+30     	; 0x3332 <SWICU_u8GetTotalPeriod+0x38>
	{
		*Copy_pu32TotalPeriod = Period_Ticks;
    3314:	80 91 80 01 	lds	r24, 0x0180
    3318:	90 91 81 01 	lds	r25, 0x0181
    331c:	cc 01       	movw	r24, r24
    331e:	a0 e0       	ldi	r26, 0x00	; 0
    3320:	b0 e0       	ldi	r27, 0x00	; 0
    3322:	ea 81       	ldd	r30, Y+2	; 0x02
    3324:	fb 81       	ldd	r31, Y+3	; 0x03
    3326:	80 83       	st	Z, r24
    3328:	91 83       	std	Z+1, r25	; 0x01
    332a:	a2 83       	std	Z+2, r26	; 0x02
    332c:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8ErrorState = STD_TYPES_OK;
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3332:	89 81       	ldd	r24, Y+1	; 0x01
}
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	cf 91       	pop	r28
    333c:	df 91       	pop	r29
    333e:	08 95       	ret

00003340 <SWICU_u8GetDutyCycle>:

u8   SWICU_u8GetDutyCycle(u8 * Copy_pu8DutyCycle)
{
    3340:	ef 92       	push	r14
    3342:	ff 92       	push	r15
    3344:	0f 93       	push	r16
    3346:	1f 93       	push	r17
    3348:	df 93       	push	r29
    334a:	cf 93       	push	r28
    334c:	00 d0       	rcall	.+0      	; 0x334e <SWICU_u8GetDutyCycle+0xe>
    334e:	0f 92       	push	r0
    3350:	cd b7       	in	r28, 0x3d	; 61
    3352:	de b7       	in	r29, 0x3e	; 62
    3354:	9b 83       	std	Y+3, r25	; 0x03
    3356:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    3358:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8DutyCycle != NULL)
    335a:	8a 81       	ldd	r24, Y+2	; 0x02
    335c:	9b 81       	ldd	r25, Y+3	; 0x03
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	a9 f1       	breq	.+106    	; 0x33cc <SWICU_u8GetDutyCycle+0x8c>
	{
		*Copy_pu8DutyCycle = (u32)((f32)ON_Ticks / Period_Ticks * 100);
    3362:	80 91 82 01 	lds	r24, 0x0182
    3366:	90 91 83 01 	lds	r25, 0x0183
    336a:	cc 01       	movw	r24, r24
    336c:	a0 e0       	ldi	r26, 0x00	; 0
    336e:	b0 e0       	ldi	r27, 0x00	; 0
    3370:	bc 01       	movw	r22, r24
    3372:	cd 01       	movw	r24, r26
    3374:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3378:	7b 01       	movw	r14, r22
    337a:	8c 01       	movw	r16, r24
    337c:	80 91 80 01 	lds	r24, 0x0180
    3380:	90 91 81 01 	lds	r25, 0x0181
    3384:	cc 01       	movw	r24, r24
    3386:	a0 e0       	ldi	r26, 0x00	; 0
    3388:	b0 e0       	ldi	r27, 0x00	; 0
    338a:	bc 01       	movw	r22, r24
    338c:	cd 01       	movw	r24, r26
    338e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3392:	9b 01       	movw	r18, r22
    3394:	ac 01       	movw	r20, r24
    3396:	c8 01       	movw	r24, r16
    3398:	b7 01       	movw	r22, r14
    339a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    339e:	dc 01       	movw	r26, r24
    33a0:	cb 01       	movw	r24, r22
    33a2:	bc 01       	movw	r22, r24
    33a4:	cd 01       	movw	r24, r26
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	48 ec       	ldi	r20, 0xC8	; 200
    33ac:	52 e4       	ldi	r21, 0x42	; 66
    33ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b2:	dc 01       	movw	r26, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	bc 01       	movw	r22, r24
    33b8:	cd 01       	movw	r24, r26
    33ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33be:	dc 01       	movw	r26, r24
    33c0:	cb 01       	movw	r24, r22
    33c2:	ea 81       	ldd	r30, Y+2	; 0x02
    33c4:	fb 81       	ldd	r31, Y+3	; 0x03
    33c6:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    33c8:	81 e0       	ldi	r24, 0x01	; 1
    33ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    33cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ff 90       	pop	r15
    33de:	ef 90       	pop	r14
    33e0:	08 95       	ret

000033e2 <SWICU_u8GetOnPeriod>:

u8   SWICU_u8GetOnPeriod(u16 * Copy_pu16OnPeriod)
{
    33e2:	df 93       	push	r29
    33e4:	cf 93       	push	r28
    33e6:	00 d0       	rcall	.+0      	; 0x33e8 <SWICU_u8GetOnPeriod+0x6>
    33e8:	0f 92       	push	r0
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	9b 83       	std	Y+3, r25	; 0x03
    33f0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    33f2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16OnPeriod != NULL)
    33f4:	8a 81       	ldd	r24, Y+2	; 0x02
    33f6:	9b 81       	ldd	r25, Y+3	; 0x03
    33f8:	00 97       	sbiw	r24, 0x00	; 0
    33fa:	51 f0       	breq	.+20     	; 0x3410 <SWICU_u8GetOnPeriod+0x2e>
	{
		*Copy_pu16OnPeriod = ON_Ticks;
    33fc:	80 91 82 01 	lds	r24, 0x0182
    3400:	90 91 83 01 	lds	r25, 0x0183
    3404:	ea 81       	ldd	r30, Y+2	; 0x02
    3406:	fb 81       	ldd	r31, Y+3	; 0x03
    3408:	91 83       	std	Z+1, r25	; 0x01
    340a:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    3410:	89 81       	ldd	r24, Y+1	; 0x01
}
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <SWICU_voidEXTICallBack>:

static void SWICU_voidEXTICallBack(void)
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
	static volatile u8 Local_u8Counter = 0;
	Local_u8Counter++;
    3426:	80 91 84 01 	lds	r24, 0x0184
    342a:	8f 5f       	subi	r24, 0xFF	; 255
    342c:	80 93 84 01 	sts	0x0184, r24
	/* First Raising Edge */
	if(Local_u8Counter == 1)
    3430:	80 91 84 01 	lds	r24, 0x0184
    3434:	81 30       	cpi	r24, 0x01	; 1
    3436:	29 f4       	brne	.+10     	; 0x3442 <SWICU_voidEXTICallBack+0x24>
	{
		/* Timer starts Counting */
		TIMERS_u8SetTCNT1Value(0);
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <TIMERS_u8SetTCNT1Value>
    3440:	2b c0       	rjmp	.+86     	; 0x3498 <SWICU_voidEXTICallBack+0x7a>
	}
	/* Second Raising Edge */
	else if (Local_u8Counter == 2)
    3442:	80 91 84 01 	lds	r24, 0x0184
    3446:	82 30       	cpi	r24, 0x02	; 2
    3448:	49 f4       	brne	.+18     	; 0x345c <SWICU_voidEXTICallBack+0x3e>
	{
		/* Read Timer1 */
		TIMERS_u8GetTCNT1Value(&Period_Ticks); // Read timer value
    344a:	80 e8       	ldi	r24, 0x80	; 128
    344c:	91 e0       	ldi	r25, 0x01	; 1
    344e:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <TIMERS_u8GetTCNT1Value>
		/* Change Trigger */
		EXTI_u8EXTISetEdge(EXTI_u8_INT0, EXTI_u8_FALLING_EDGE);
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	61 e0       	ldi	r22, 0x01	; 1
    3456:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <EXTI_u8EXTISetEdge>
    345a:	1e c0       	rjmp	.+60     	; 0x3498 <SWICU_voidEXTICallBack+0x7a>
	}
	/* Falling Edge */
	else if (Local_u8Counter == 3)
    345c:	80 91 84 01 	lds	r24, 0x0184
    3460:	83 30       	cpi	r24, 0x03	; 3
    3462:	d1 f4       	brne	.+52     	; 0x3498 <SWICU_voidEXTICallBack+0x7a>
	{
		/* Read Timer1 */
		TIMERS_u8GetTCNT1Value(&ON_Ticks); // Read timer value
    3464:	82 e8       	ldi	r24, 0x82	; 130
    3466:	91 e0       	ldi	r25, 0x01	; 1
    3468:	0e 94 58 1b 	call	0x36b0	; 0x36b0 <TIMERS_u8GetTCNT1Value>
		ON_Ticks -= Period_Ticks; // Calculate on ticks
    346c:	20 91 82 01 	lds	r18, 0x0182
    3470:	30 91 83 01 	lds	r19, 0x0183
    3474:	80 91 80 01 	lds	r24, 0x0180
    3478:	90 91 81 01 	lds	r25, 0x0181
    347c:	a9 01       	movw	r20, r18
    347e:	48 1b       	sub	r20, r24
    3480:	59 0b       	sbc	r21, r25
    3482:	ca 01       	movw	r24, r20
    3484:	90 93 83 01 	sts	0x0183, r25
    3488:	80 93 82 01 	sts	0x0182, r24
		/* Disable INT */ // ONCE
//		EXTI_u8EXTIDisable(EXTI_u8_INT0);
		Local_u8Counter = 0;
    348c:	10 92 84 01 	sts	0x0184, r1
		//Continuous Reading
		/* Change Trigger back to Rising Edge */
		EXTI_u8EXTISetEdge(EXTI_u8_INT0, EXTI_u8_RAISING_EDGE);
    3490:	80 e0       	ldi	r24, 0x00	; 0
    3492:	60 e0       	ldi	r22, 0x00	; 0
    3494:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <EXTI_u8EXTISetEdge>
	}
}
    3498:	cf 91       	pop	r28
    349a:	df 91       	pop	r29
    349c:	08 95       	ret

0000349e <TIMERS_voidTimer0Init>:
static void (*TIMERS_pfTimer1CTC_COMPA)(void) = NULL;
static void (*TIMERS_pfTimer1CAPT)(void) = NULL;
static void (*TIMERS_pfTimer1CTC_COMPB)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
    349e:	df 93       	push	r29
    34a0:	cf 93       	push	r28
    34a2:	cd b7       	in	r28, 0x3d	; 61
    34a4:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Phase Correct PWM Mode */
	SET_BIT(TIMERS_u8_TCCR0_REG,6);
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_PWM_FAST_PWM_MODE
	/* Select Mode => Fast PWM Mode */
	SET_BIT(TIMERS_u8_TCCR0_REG,6);
    34a6:	a3 e5       	ldi	r26, 0x53	; 83
    34a8:	b0 e0       	ldi	r27, 0x00	; 0
    34aa:	e3 e5       	ldi	r30, 0x53	; 83
    34ac:	f0 e0       	ldi	r31, 0x00	; 0
    34ae:	80 81       	ld	r24, Z
    34b0:	80 64       	ori	r24, 0x40	; 64
    34b2:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
    34b4:	a3 e5       	ldi	r26, 0x53	; 83
    34b6:	b0 e0       	ldi	r27, 0x00	; 0
    34b8:	e3 e5       	ldi	r30, 0x53	; 83
    34ba:	f0 e0       	ldi	r31, 0x00	; 0
    34bc:	80 81       	ld	r24, Z
    34be:	88 60       	ori	r24, 0x08	; 8
    34c0:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMERS_u8_TIMER0_COMPARE_MATCH_OCR0;
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_PWM_FAST_PWM_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMERS_u8_TIMER0_COMPARE_MATCH_OCR0;
    34c2:	ec e5       	ldi	r30, 0x5C	; 92
    34c4:	f0 e0       	ldi	r31, 0x00	; 0
    34c6:	88 ec       	ldi	r24, 0xC8	; 200
    34c8:	80 83       	st	Z, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
#elif TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_SET
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
	SET_BIT(TIMERS_u8_TCCR0_REG,4);
#elif TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_NON_INVERTING
	SET_BIT(TIMERS_u8_TCCR0_REG,5);
    34ca:	a3 e5       	ldi	r26, 0x53	; 83
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	e3 e5       	ldi	r30, 0x53	; 83
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	80 62       	ori	r24, 0x20	; 32
    34d6:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
    34d8:	a3 e5       	ldi	r26, 0x53	; 83
    34da:	b0 e0       	ldi	r27, 0x00	; 0
    34dc:	e3 e5       	ldi	r30, 0x53	; 83
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	8f 7e       	andi	r24, 0xEF	; 239
    34e4:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_CLOCK_SOURCE == TIMERS_u8_TIMER0_NO_SOURCE
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
#elif TIMERS_u8_TIMER0_CLOCK_SOURCE == TIMERS_u8_TIMER0_NO_PRESCALER
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
    34e6:	a3 e5       	ldi	r26, 0x53	; 83
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e3 e5       	ldi	r30, 0x53	; 83
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	8b 7f       	andi	r24, 0xFB	; 251
    34f2:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
    34f4:	a3 e5       	ldi	r26, 0x53	; 83
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e3 e5       	ldi	r30, 0x53	; 83
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	8d 7f       	andi	r24, 0xFD	; 253
    3500:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
    3502:	a3 e5       	ldi	r26, 0x53	; 83
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e3 e5       	ldi	r30, 0x53	; 83
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	81 60       	ori	r24, 0x01	; 1
    350e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,2);
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#endif

}
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void)
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode  */
#if TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_NORMAL_MODE
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
    351e:	af e4       	ldi	r26, 0x4F	; 79
    3520:	b0 e0       	ldi	r27, 0x00	; 0
    3522:	ef e4       	ldi	r30, 0x4F	; 79
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	80 81       	ld	r24, Z
    3528:	8e 7f       	andi	r24, 0xFE	; 254
    352a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,1);
    352c:	af e4       	ldi	r26, 0x4F	; 79
    352e:	b0 e0       	ldi	r27, 0x00	; 0
    3530:	ef e4       	ldi	r30, 0x4F	; 79
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	80 81       	ld	r24, Z
    3536:	8d 7f       	andi	r24, 0xFD	; 253
    3538:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,3);
    353a:	ae e4       	ldi	r26, 0x4E	; 78
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	ee e4       	ldi	r30, 0x4E	; 78
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	87 7f       	andi	r24, 0xF7	; 247
    3546:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,4);
    3548:	ae e4       	ldi	r26, 0x4E	; 78
    354a:	b0 e0       	ldi	r27, 0x00	; 0
    354c:	ee e4       	ldi	r30, 0x4E	; 78
    354e:	f0 e0       	ldi	r31, 0x00	; 0
    3550:	80 81       	ld	r24, Z
    3552:	8f 7e       	andi	r24, 0xEF	; 239
    3554:	8c 93       	st	X, r24
#endif

	/* Select INT  */
#if TIMERS_u8_TIMER1_INT == TIMERS_u8_Timer1_OVF
	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,2);
    3556:	a9 e5       	ldi	r26, 0x59	; 89
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	e9 e5       	ldi	r30, 0x59	; 89
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	84 60       	ori	r24, 0x04	; 4
    3562:	8c 93       	st	X, r24
#endif


#if TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_NORMAL_MODE
	/* Set Preload Value */
	TIMERS_u16_TCNT1_REG = TIMERS_u16_TIMER1_PRELOAD_VALUE;
    3564:	ec e4       	ldi	r30, 0x4C	; 76
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	11 82       	std	Z+1, r1	; 0x01
    356a:	10 82       	st	Z, r1
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_CHANNEL == TIMERS_u8_TIMER1_CHANNEL_A
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
    356c:	ea e4       	ldi	r30, 0x4A	; 74
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	87 ee       	ldi	r24, 0xE7	; 231
    3572:	93 e0       	ldi	r25, 0x03	; 3
    3574:	91 83       	std	Z+1, r25	; 0x01
    3576:	80 83       	st	Z, r24
#if TIMERS_u8_TIMER1_ICU_EDGE == TIMERS_u8_Timer1_DISCONNECTED

#elif TIMERS_u8_TIMER1_ICU_EDGE == TIMERS_u8_Timer1_FALLING_EDGE
	CLR_BIT(TIMERS_u8_TCCR1B_REG,6);
#elif TIMERS_u8_TIMER1_ICU_EDGE == TIMERS_u8_Timer1_RAISING_EDGE
	SET_BIT(TIMERS_u8_TCCR1B_REG,6);
    3578:	ae e4       	ldi	r26, 0x4E	; 78
    357a:	b0 e0       	ldi	r27, 0x00	; 0
    357c:	ee e4       	ldi	r30, 0x4E	; 78
    357e:	f0 e0       	ldi	r31, 0x00	; 0
    3580:	80 81       	ld	r24, Z
    3582:	80 64       	ori	r24, 0x40	; 64
    3584:	8c 93       	st	X, r24
#endif


/* Compare Match Output Mode unit A */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
    3586:	af e4       	ldi	r26, 0x4F	; 79
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	ef e4       	ldi	r30, 0x4F	; 79
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	8f 7b       	andi	r24, 0xBF	; 191
    3592:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,7);
    3594:	af e4       	ldi	r26, 0x4F	; 79
    3596:	b0 e0       	ldi	r27, 0x00	; 0
    3598:	ef e4       	ldi	r30, 0x4F	; 79
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	80 81       	ld	r24, Z
    359e:	8f 77       	andi	r24, 0x7F	; 127
    35a0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#endif
/* Compare Match Output Mode unit B */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_B == TIMERS_u8_TIMER1_OC1B_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,4);
    35a2:	af e4       	ldi	r26, 0x4F	; 79
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	ef e4       	ldi	r30, 0x4F	; 79
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	80 81       	ld	r24, Z
    35ac:	8f 7e       	andi	r24, 0xEF	; 239
    35ae:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,5);
    35b0:	af e4       	ldi	r26, 0x4F	; 79
    35b2:	b0 e0       	ldi	r27, 0x00	; 0
    35b4:	ef e4       	ldi	r30, 0x4F	; 79
    35b6:	f0 e0       	ldi	r31, 0x00	; 0
    35b8:	80 81       	ld	r24, Z
    35ba:	8f 7d       	andi	r24, 0xDF	; 223
    35bc:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_NO_SOURCE
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
	CLR_BIT(TIMERS_u8_TCCR1B_REG,1);
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_NO_PRESCALER
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
    35be:	ae e4       	ldi	r26, 0x4E	; 78
    35c0:	b0 e0       	ldi	r27, 0x00	; 0
    35c2:	ee e4       	ldi	r30, 0x4E	; 78
    35c4:	f0 e0       	ldi	r31, 0x00	; 0
    35c6:	80 81       	ld	r24, Z
    35c8:	8b 7f       	andi	r24, 0xFB	; 251
    35ca:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,1);
    35cc:	ae e4       	ldi	r26, 0x4E	; 78
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	ee e4       	ldi	r30, 0x4E	; 78
    35d2:	f0 e0       	ldi	r31, 0x00	; 0
    35d4:	80 81       	ld	r24, Z
    35d6:	8d 7f       	andi	r24, 0xFD	; 253
    35d8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
    35da:	ae e4       	ldi	r26, 0x4E	; 78
    35dc:	b0 e0       	ldi	r27, 0x00	; 0
    35de:	ee e4       	ldi	r30, 0x4E	; 78
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	81 60       	ori	r24, 0x01	; 1
    35e6:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_T1_PIN_RISING_EDGE
	SET_BIT(TIMERS_u8_TCCR1B_REG,2);
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#endif
}
    35e8:	cf 91       	pop	r28
    35ea:	df 91       	pop	r29
    35ec:	08 95       	ret

000035ee <TIMERS_voidTimer1SetCompareMatchValueUnitA>:
void TIMERS_voidTimer1SetCompareMatchValueUnitA(u16 Copy_u16OCR1AValue)
{
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	00 d0       	rcall	.+0      	; 0x35f4 <TIMERS_voidTimer1SetCompareMatchValueUnitA+0x6>
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	9a 83       	std	Y+2, r25	; 0x02
    35fa:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u16OCR1AValue;
    35fc:	ea e4       	ldi	r30, 0x4A	; 74
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	9a 81       	ldd	r25, Y+2	; 0x02
    3604:	91 83       	std	Z+1, r25	; 0x01
    3606:	80 83       	st	Z, r24
}
    3608:	0f 90       	pop	r0
    360a:	0f 90       	pop	r0
    360c:	cf 91       	pop	r28
    360e:	df 91       	pop	r29
    3610:	08 95       	ret

00003612 <TIMERS_voidTimer1SetCompareMatchValueUnitB>:

void TIMERS_voidTimer1SetCompareMatchValueUnitB(u16 Copy_u16OCR1BValue)
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	00 d0       	rcall	.+0      	; 0x3618 <TIMERS_voidTimer1SetCompareMatchValueUnitB+0x6>
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
    361c:	9a 83       	std	Y+2, r25	; 0x02
    361e:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1B_REG = Copy_u16OCR1BValue;
    3620:	e8 e4       	ldi	r30, 0x48	; 72
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	9a 81       	ldd	r25, Y+2	; 0x02
    3628:	91 83       	std	Z+1, r25	; 0x01
    362a:	80 83       	st	Z, r24
}
    362c:	0f 90       	pop	r0
    362e:	0f 90       	pop	r0
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <TIMERS_u8GetTCNT0Value>:
u8 TIMERS_u8GetTCNT0Value(u8 * Copy_pu8Value)
{
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	00 d0       	rcall	.+0      	; 0x363c <TIMERS_u8GetTCNT0Value+0x6>
    363c:	0f 92       	push	r0
    363e:	cd b7       	in	r28, 0x3d	; 61
    3640:	de b7       	in	r29, 0x3e	; 62
    3642:	9b 83       	std	Y+3, r25	; 0x03
    3644:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL)
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	00 97       	sbiw	r24, 0x00	; 0
    3650:	39 f0       	breq	.+14     	; 0x3660 <TIMERS_u8GetTCNT0Value+0x2a>
	{
		*Copy_pu8Value = TIMERS_u8_TCNT0_REG;
    3652:	e2 e5       	ldi	r30, 0x52	; 82
    3654:	f0 e0       	ldi	r31, 0x00	; 0
    3656:	80 81       	ld	r24, Z
    3658:	ea 81       	ldd	r30, Y+2	; 0x02
    365a:	fb 81       	ldd	r31, Y+3	; 0x03
    365c:	80 83       	st	Z, r24
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <TIMERS_u8GetTCNT0Value+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3660:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3662:	89 81       	ldd	r24, Y+1	; 0x01
}
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	0f 90       	pop	r0
    366a:	cf 91       	pop	r28
    366c:	df 91       	pop	r29
    366e:	08 95       	ret

00003670 <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
    3670:	df 93       	push	r29
    3672:	cf 93       	push	r28
    3674:	0f 92       	push	r0
    3676:	cd b7       	in	r28, 0x3d	; 61
    3678:	de b7       	in	r29, 0x3e	; 62
    367a:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    367c:	ec e5       	ldi	r30, 0x5C	; 92
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	80 83       	st	Z, r24
}
    3684:	0f 90       	pop	r0
    3686:	cf 91       	pop	r28
    3688:	df 91       	pop	r29
    368a:	08 95       	ret

0000368c <TIMERS_voidTimer1SetICR1Value>:
void TIMERS_voidTimer1SetICR1Value(u16 Copy_u16ICR1Value)
{
    368c:	df 93       	push	r29
    368e:	cf 93       	push	r28
    3690:	00 d0       	rcall	.+0      	; 0x3692 <TIMERS_voidTimer1SetICR1Value+0x6>
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	9a 83       	std	Y+2, r25	; 0x02
    3698:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16ICR1Value;
    369a:	e6 e4       	ldi	r30, 0x46	; 70
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	9a 81       	ldd	r25, Y+2	; 0x02
    36a2:	91 83       	std	Z+1, r25	; 0x01
    36a4:	80 83       	st	Z, r24
}
    36a6:	0f 90       	pop	r0
    36a8:	0f 90       	pop	r0
    36aa:	cf 91       	pop	r28
    36ac:	df 91       	pop	r29
    36ae:	08 95       	ret

000036b0 <TIMERS_u8GetTCNT1Value>:
u8 TIMERS_u8GetTCNT1Value(u16 * Copy_pu16Value)
{
    36b0:	df 93       	push	r29
    36b2:	cf 93       	push	r28
    36b4:	00 d0       	rcall	.+0      	; 0x36b6 <TIMERS_u8GetTCNT1Value+0x6>
    36b6:	0f 92       	push	r0
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	9b 83       	std	Y+3, r25	; 0x03
    36be:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16Value != NULL)
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	9b 81       	ldd	r25, Y+3	; 0x03
    36c8:	00 97       	sbiw	r24, 0x00	; 0
    36ca:	49 f0       	breq	.+18     	; 0x36de <TIMERS_u8GetTCNT1Value+0x2e>
	{
		*Copy_pu16Value = TIMERS_u16_TCNT1_REG;
    36cc:	ec e4       	ldi	r30, 0x4C	; 76
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	91 81       	ldd	r25, Z+1	; 0x01
    36d4:	ea 81       	ldd	r30, Y+2	; 0x02
    36d6:	fb 81       	ldd	r31, Y+3	; 0x03
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	80 83       	st	Z, r24
    36dc:	01 c0       	rjmp	.+2      	; 0x36e0 <TIMERS_u8GetTCNT1Value+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    36de:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    36e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	08 95       	ret

000036ee <TIMERS_u8SetTCNT1Value>:
void TIMERS_u8SetTCNT1Value(u16 * Copy_u16TCNT1Value)
{
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <TIMERS_u8SetTCNT1Value+0x6>
    36f4:	cd b7       	in	r28, 0x3d	; 61
    36f6:	de b7       	in	r29, 0x3e	; 62
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u16TCNT1Value;
    36fc:	ec e4       	ldi	r30, 0x4C	; 76
    36fe:	f0 e0       	ldi	r31, 0x00	; 0
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	9a 81       	ldd	r25, Y+2	; 0x02
    3704:	91 83       	std	Z+1, r25	; 0x01
    3706:	80 83       	st	Z, r24
}
    3708:	0f 90       	pop	r0
    370a:	0f 90       	pop	r0
    370c:	cf 91       	pop	r28
    370e:	df 91       	pop	r29
    3710:	08 95       	ret

00003712 <TIMERS_u8Timer0SetCallBack>:

u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	00 d0       	rcall	.+0      	; 0x3718 <TIMERS_u8Timer0SetCallBack+0x6>
    3718:	0f 92       	push	r0
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
    371e:	9b 83       	std	Y+3, r25	; 0x03
    3720:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3722:	81 e0       	ldi	r24, 0x01	; 1
    3724:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3726:	8a 81       	ldd	r24, Y+2	; 0x02
    3728:	9b 81       	ldd	r25, Y+3	; 0x03
    372a:	00 97       	sbiw	r24, 0x00	; 0
    372c:	39 f0       	breq	.+14     	; 0x373c <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	9b 81       	ldd	r25, Y+3	; 0x03
    3732:	90 93 86 01 	sts	0x0186, r25
    3736:	80 93 85 01 	sts	0x0185, r24
    373a:	01 c0       	rjmp	.+2      	; 0x373e <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    373c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    373e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	0f 90       	pop	r0
    3746:	cf 91       	pop	r28
    3748:	df 91       	pop	r29
    374a:	08 95       	ret

0000374c <TIMERS_u8Timer0CTCSetCallBack>:

u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    374c:	df 93       	push	r29
    374e:	cf 93       	push	r28
    3750:	00 d0       	rcall	.+0      	; 0x3752 <TIMERS_u8Timer0CTCSetCallBack+0x6>
    3752:	0f 92       	push	r0
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	9b 83       	std	Y+3, r25	; 0x03
    375a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3760:	8a 81       	ldd	r24, Y+2	; 0x02
    3762:	9b 81       	ldd	r25, Y+3	; 0x03
    3764:	00 97       	sbiw	r24, 0x00	; 0
    3766:	39 f0       	breq	.+14     	; 0x3776 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	9b 81       	ldd	r25, Y+3	; 0x03
    376c:	90 93 88 01 	sts	0x0188, r25
    3770:	80 93 87 01 	sts	0x0187, r24
    3774:	01 c0       	rjmp	.+2      	; 0x3778 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3776:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    3778:	89 81       	ldd	r24, Y+1	; 0x01
}
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	0f 90       	pop	r0
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	08 95       	ret

00003786 <TIMERS_u8Timer1SetCallBack>:


u8 TIMERS_u8Timer1SetCallBack(void(*Copy_pf)(void))
{
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	00 d0       	rcall	.+0      	; 0x378c <TIMERS_u8Timer1SetCallBack+0x6>
    378c:	0f 92       	push	r0
    378e:	cd b7       	in	r28, 0x3d	; 61
    3790:	de b7       	in	r29, 0x3e	; 62
    3792:	9b 83       	std	Y+3, r25	; 0x03
    3794:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3796:	81 e0       	ldi	r24, 0x01	; 1
    3798:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    379a:	8a 81       	ldd	r24, Y+2	; 0x02
    379c:	9b 81       	ldd	r25, Y+3	; 0x03
    379e:	00 97       	sbiw	r24, 0x00	; 0
    37a0:	39 f0       	breq	.+14     	; 0x37b0 <TIMERS_u8Timer1SetCallBack+0x2a>
	{
		TIMERS_pfTimer1OVF = Copy_pf;
    37a2:	8a 81       	ldd	r24, Y+2	; 0x02
    37a4:	9b 81       	ldd	r25, Y+3	; 0x03
    37a6:	90 93 8a 01 	sts	0x018A, r25
    37aa:	80 93 89 01 	sts	0x0189, r24
    37ae:	01 c0       	rjmp	.+2      	; 0x37b2 <TIMERS_u8Timer1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    37b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    37b4:	0f 90       	pop	r0
    37b6:	0f 90       	pop	r0
    37b8:	0f 90       	pop	r0
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	08 95       	ret

000037c0 <TIMERS_u8Timer1COMPASetCallBack>:

u8 TIMERS_u8Timer1COMPASetCallBack(void(*Copy_pf)(void))
{
    37c0:	df 93       	push	r29
    37c2:	cf 93       	push	r28
    37c4:	00 d0       	rcall	.+0      	; 0x37c6 <TIMERS_u8Timer1COMPASetCallBack+0x6>
    37c6:	0f 92       	push	r0
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	9b 83       	std	Y+3, r25	; 0x03
    37ce:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	9b 81       	ldd	r25, Y+3	; 0x03
    37d8:	00 97       	sbiw	r24, 0x00	; 0
    37da:	39 f0       	breq	.+14     	; 0x37ea <TIMERS_u8Timer1COMPASetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPA = Copy_pf;
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	90 93 8c 01 	sts	0x018C, r25
    37e4:	80 93 8b 01 	sts	0x018B, r24
    37e8:	01 c0       	rjmp	.+2      	; 0x37ec <TIMERS_u8Timer1COMPASetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    37ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	08 95       	ret

000037fa <TIMERS_u8Timer1COMPBSetCallBack>:

u8 TIMERS_u8Timer1COMPBSetCallBack(void(*Copy_pf)(void))
{
    37fa:	df 93       	push	r29
    37fc:	cf 93       	push	r28
    37fe:	00 d0       	rcall	.+0      	; 0x3800 <TIMERS_u8Timer1COMPBSetCallBack+0x6>
    3800:	0f 92       	push	r0
    3802:	cd b7       	in	r28, 0x3d	; 61
    3804:	de b7       	in	r29, 0x3e	; 62
    3806:	9b 83       	std	Y+3, r25	; 0x03
    3808:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    380e:	8a 81       	ldd	r24, Y+2	; 0x02
    3810:	9b 81       	ldd	r25, Y+3	; 0x03
    3812:	00 97       	sbiw	r24, 0x00	; 0
    3814:	39 f0       	breq	.+14     	; 0x3824 <TIMERS_u8Timer1COMPBSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPB = Copy_pf;
    3816:	8a 81       	ldd	r24, Y+2	; 0x02
    3818:	9b 81       	ldd	r25, Y+3	; 0x03
    381a:	90 93 90 01 	sts	0x0190, r25
    381e:	80 93 8f 01 	sts	0x018F, r24
    3822:	01 c0       	rjmp	.+2      	; 0x3826 <TIMERS_u8Timer1COMPBSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3824:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3826:	89 81       	ldd	r24, Y+1	; 0x01
}
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	0f 90       	pop	r0
    382e:	cf 91       	pop	r28
    3830:	df 91       	pop	r29
    3832:	08 95       	ret

00003834 <TIMERS_u8Timer1CAPTSetCallBack>:

u8 TIMERS_u8Timer1CAPTSetCallBack(void(*Copy_pf)(void))
{
    3834:	df 93       	push	r29
    3836:	cf 93       	push	r28
    3838:	00 d0       	rcall	.+0      	; 0x383a <TIMERS_u8Timer1CAPTSetCallBack+0x6>
    383a:	0f 92       	push	r0
    383c:	cd b7       	in	r28, 0x3d	; 61
    383e:	de b7       	in	r29, 0x3e	; 62
    3840:	9b 83       	std	Y+3, r25	; 0x03
    3842:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
    3848:	8a 81       	ldd	r24, Y+2	; 0x02
    384a:	9b 81       	ldd	r25, Y+3	; 0x03
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	39 f0       	breq	.+14     	; 0x385e <TIMERS_u8Timer1CAPTSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CAPT = Copy_pf;
    3850:	8a 81       	ldd	r24, Y+2	; 0x02
    3852:	9b 81       	ldd	r25, Y+3	; 0x03
    3854:	90 93 8e 01 	sts	0x018E, r25
    3858:	80 93 8d 01 	sts	0x018D, r24
    385c:	01 c0       	rjmp	.+2      	; 0x3860 <TIMERS_u8Timer1CAPTSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    385e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    3860:	89 81       	ldd	r24, Y+1	; 0x01
}
    3862:	0f 90       	pop	r0
    3864:	0f 90       	pop	r0
    3866:	0f 90       	pop	r0
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <__vector_9>:

/* Prototype for ISR TIMER1 OVF */
void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
    386e:	1f 92       	push	r1
    3870:	0f 92       	push	r0
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	0f 92       	push	r0
    3876:	11 24       	eor	r1, r1
    3878:	2f 93       	push	r18
    387a:	3f 93       	push	r19
    387c:	4f 93       	push	r20
    387e:	5f 93       	push	r21
    3880:	6f 93       	push	r22
    3882:	7f 93       	push	r23
    3884:	8f 93       	push	r24
    3886:	9f 93       	push	r25
    3888:	af 93       	push	r26
    388a:	bf 93       	push	r27
    388c:	ef 93       	push	r30
    388e:	ff 93       	push	r31
    3890:	df 93       	push	r29
    3892:	cf 93       	push	r28
    3894:	cd b7       	in	r28, 0x3d	; 61
    3896:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    3898:	80 91 91 01 	lds	r24, 0x0191
    389c:	90 91 92 01 	lds	r25, 0x0192
    38a0:	01 96       	adiw	r24, 0x01	; 1
    38a2:	90 93 92 01 	sts	0x0192, r25
    38a6:	80 93 91 01 	sts	0x0191, r24
	if(Local_u16CounterOVF == 3907)
    38aa:	80 91 91 01 	lds	r24, 0x0191
    38ae:	90 91 92 01 	lds	r25, 0x0192
    38b2:	2f e0       	ldi	r18, 0x0F	; 15
    38b4:	83 34       	cpi	r24, 0x43	; 67
    38b6:	92 07       	cpc	r25, r18
    38b8:	a9 f4       	brne	.+42     	; 0x38e4 <__vector_9+0x76>
	{
		/* Update Preload Value */
		TIMERS_u16_TCNT1_REG = 192;
    38ba:	ec e4       	ldi	r30, 0x4C	; 76
    38bc:	f0 e0       	ldi	r31, 0x00	; 0
    38be:	80 ec       	ldi	r24, 0xC0	; 192
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	91 83       	std	Z+1, r25	; 0x01
    38c4:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    38c6:	10 92 92 01 	sts	0x0192, r1
    38ca:	10 92 91 01 	sts	0x0191, r1
		/* Call App Function */
		if(TIMERS_pfTimer1OVF != NULL)
    38ce:	80 91 89 01 	lds	r24, 0x0189
    38d2:	90 91 8a 01 	lds	r25, 0x018A
    38d6:	00 97       	sbiw	r24, 0x00	; 0
    38d8:	29 f0       	breq	.+10     	; 0x38e4 <__vector_9+0x76>
		{
			TIMERS_pfTimer1OVF();
    38da:	e0 91 89 01 	lds	r30, 0x0189
    38de:	f0 91 8a 01 	lds	r31, 0x018A
    38e2:	09 95       	icall
		}
	}
}
    38e4:	cf 91       	pop	r28
    38e6:	df 91       	pop	r29
    38e8:	ff 91       	pop	r31
    38ea:	ef 91       	pop	r30
    38ec:	bf 91       	pop	r27
    38ee:	af 91       	pop	r26
    38f0:	9f 91       	pop	r25
    38f2:	8f 91       	pop	r24
    38f4:	7f 91       	pop	r23
    38f6:	6f 91       	pop	r22
    38f8:	5f 91       	pop	r21
    38fa:	4f 91       	pop	r20
    38fc:	3f 91       	pop	r19
    38fe:	2f 91       	pop	r18
    3900:	0f 90       	pop	r0
    3902:	0f be       	out	0x3f, r0	; 63
    3904:	0f 90       	pop	r0
    3906:	1f 90       	pop	r1
    3908:	18 95       	reti

0000390a <__vector_8>:


/* Prototype for ISR TIMER1 COMPB */
void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
    390a:	1f 92       	push	r1
    390c:	0f 92       	push	r0
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	0f 92       	push	r0
    3912:	11 24       	eor	r1, r1
    3914:	2f 93       	push	r18
    3916:	3f 93       	push	r19
    3918:	4f 93       	push	r20
    391a:	5f 93       	push	r21
    391c:	6f 93       	push	r22
    391e:	7f 93       	push	r23
    3920:	8f 93       	push	r24
    3922:	9f 93       	push	r25
    3924:	af 93       	push	r26
    3926:	bf 93       	push	r27
    3928:	ef 93       	push	r30
    392a:	ff 93       	push	r31
    392c:	df 93       	push	r29
    392e:	cf 93       	push	r28
    3930:	cd b7       	in	r28, 0x3d	; 61
    3932:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    3934:	80 91 93 01 	lds	r24, 0x0193
    3938:	90 91 94 01 	lds	r25, 0x0194
    393c:	01 96       	adiw	r24, 0x01	; 1
    393e:	90 93 94 01 	sts	0x0194, r25
    3942:	80 93 93 01 	sts	0x0193, r24
	if(Local_u16CounterCTC == 10000)
    3946:	80 91 93 01 	lds	r24, 0x0193
    394a:	90 91 94 01 	lds	r25, 0x0194
    394e:	27 e2       	ldi	r18, 0x27	; 39
    3950:	80 31       	cpi	r24, 0x10	; 16
    3952:	92 07       	cpc	r25, r18
    3954:	79 f4       	brne	.+30     	; 0x3974 <__vector_8+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    3956:	10 92 94 01 	sts	0x0194, r1
    395a:	10 92 93 01 	sts	0x0193, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPB != NULL)
    395e:	80 91 8f 01 	lds	r24, 0x018F
    3962:	90 91 90 01 	lds	r25, 0x0190
    3966:	00 97       	sbiw	r24, 0x00	; 0
    3968:	29 f0       	breq	.+10     	; 0x3974 <__vector_8+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPB();
    396a:	e0 91 8f 01 	lds	r30, 0x018F
    396e:	f0 91 90 01 	lds	r31, 0x0190
    3972:	09 95       	icall
		}
	}
}
    3974:	cf 91       	pop	r28
    3976:	df 91       	pop	r29
    3978:	ff 91       	pop	r31
    397a:	ef 91       	pop	r30
    397c:	bf 91       	pop	r27
    397e:	af 91       	pop	r26
    3980:	9f 91       	pop	r25
    3982:	8f 91       	pop	r24
    3984:	7f 91       	pop	r23
    3986:	6f 91       	pop	r22
    3988:	5f 91       	pop	r21
    398a:	4f 91       	pop	r20
    398c:	3f 91       	pop	r19
    398e:	2f 91       	pop	r18
    3990:	0f 90       	pop	r0
    3992:	0f be       	out	0x3f, r0	; 63
    3994:	0f 90       	pop	r0
    3996:	1f 90       	pop	r1
    3998:	18 95       	reti

0000399a <__vector_7>:

/* Prototype for ISR TIMER1 COMPA */
void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    399a:	1f 92       	push	r1
    399c:	0f 92       	push	r0
    399e:	0f b6       	in	r0, 0x3f	; 63
    39a0:	0f 92       	push	r0
    39a2:	11 24       	eor	r1, r1
    39a4:	2f 93       	push	r18
    39a6:	3f 93       	push	r19
    39a8:	4f 93       	push	r20
    39aa:	5f 93       	push	r21
    39ac:	6f 93       	push	r22
    39ae:	7f 93       	push	r23
    39b0:	8f 93       	push	r24
    39b2:	9f 93       	push	r25
    39b4:	af 93       	push	r26
    39b6:	bf 93       	push	r27
    39b8:	ef 93       	push	r30
    39ba:	ff 93       	push	r31
    39bc:	df 93       	push	r29
    39be:	cf 93       	push	r28
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    39c4:	80 91 95 01 	lds	r24, 0x0195
    39c8:	90 91 96 01 	lds	r25, 0x0196
    39cc:	01 96       	adiw	r24, 0x01	; 1
    39ce:	90 93 96 01 	sts	0x0196, r25
    39d2:	80 93 95 01 	sts	0x0195, r24
	if(Local_u16CounterCTC == 10000)
    39d6:	80 91 95 01 	lds	r24, 0x0195
    39da:	90 91 96 01 	lds	r25, 0x0196
    39de:	27 e2       	ldi	r18, 0x27	; 39
    39e0:	80 31       	cpi	r24, 0x10	; 16
    39e2:	92 07       	cpc	r25, r18
    39e4:	79 f4       	brne	.+30     	; 0x3a04 <__vector_7+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    39e6:	10 92 96 01 	sts	0x0196, r1
    39ea:	10 92 95 01 	sts	0x0195, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPA != NULL)
    39ee:	80 91 8b 01 	lds	r24, 0x018B
    39f2:	90 91 8c 01 	lds	r25, 0x018C
    39f6:	00 97       	sbiw	r24, 0x00	; 0
    39f8:	29 f0       	breq	.+10     	; 0x3a04 <__vector_7+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPA();
    39fa:	e0 91 8b 01 	lds	r30, 0x018B
    39fe:	f0 91 8c 01 	lds	r31, 0x018C
    3a02:	09 95       	icall
		}
	}
}
    3a04:	cf 91       	pop	r28
    3a06:	df 91       	pop	r29
    3a08:	ff 91       	pop	r31
    3a0a:	ef 91       	pop	r30
    3a0c:	bf 91       	pop	r27
    3a0e:	af 91       	pop	r26
    3a10:	9f 91       	pop	r25
    3a12:	8f 91       	pop	r24
    3a14:	7f 91       	pop	r23
    3a16:	6f 91       	pop	r22
    3a18:	5f 91       	pop	r21
    3a1a:	4f 91       	pop	r20
    3a1c:	3f 91       	pop	r19
    3a1e:	2f 91       	pop	r18
    3a20:	0f 90       	pop	r0
    3a22:	0f be       	out	0x3f, r0	; 63
    3a24:	0f 90       	pop	r0
    3a26:	1f 90       	pop	r1
    3a28:	18 95       	reti

00003a2a <__vector_6>:

/* Prototype for ISR TIMER1 CAPT */
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    3a2a:	1f 92       	push	r1
    3a2c:	0f 92       	push	r0
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	0f 92       	push	r0
    3a32:	11 24       	eor	r1, r1
    3a34:	2f 93       	push	r18
    3a36:	3f 93       	push	r19
    3a38:	4f 93       	push	r20
    3a3a:	5f 93       	push	r21
    3a3c:	6f 93       	push	r22
    3a3e:	7f 93       	push	r23
    3a40:	8f 93       	push	r24
    3a42:	9f 93       	push	r25
    3a44:	af 93       	push	r26
    3a46:	bf 93       	push	r27
    3a48:	ef 93       	push	r30
    3a4a:	ff 93       	push	r31
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCAPT = 0;
	Local_u16CounterCAPT++;
    3a54:	80 91 97 01 	lds	r24, 0x0197
    3a58:	90 91 98 01 	lds	r25, 0x0198
    3a5c:	01 96       	adiw	r24, 0x01	; 1
    3a5e:	90 93 98 01 	sts	0x0198, r25
    3a62:	80 93 97 01 	sts	0x0197, r24
	if(Local_u16CounterCAPT == 10000)
    3a66:	80 91 97 01 	lds	r24, 0x0197
    3a6a:	90 91 98 01 	lds	r25, 0x0198
    3a6e:	27 e2       	ldi	r18, 0x27	; 39
    3a70:	80 31       	cpi	r24, 0x10	; 16
    3a72:	92 07       	cpc	r25, r18
    3a74:	79 f4       	brne	.+30     	; 0x3a94 <__vector_6+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCAPT = 0;
    3a76:	10 92 98 01 	sts	0x0198, r1
    3a7a:	10 92 97 01 	sts	0x0197, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CAPT != NULL)
    3a7e:	80 91 8d 01 	lds	r24, 0x018D
    3a82:	90 91 8e 01 	lds	r25, 0x018E
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	29 f0       	breq	.+10     	; 0x3a94 <__vector_6+0x6a>
		{
			TIMERS_pfTimer1CAPT();
    3a8a:	e0 91 8d 01 	lds	r30, 0x018D
    3a8e:	f0 91 8e 01 	lds	r31, 0x018E
    3a92:	09 95       	icall
		}
	}
}
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	ff 91       	pop	r31
    3a9a:	ef 91       	pop	r30
    3a9c:	bf 91       	pop	r27
    3a9e:	af 91       	pop	r26
    3aa0:	9f 91       	pop	r25
    3aa2:	8f 91       	pop	r24
    3aa4:	7f 91       	pop	r23
    3aa6:	6f 91       	pop	r22
    3aa8:	5f 91       	pop	r21
    3aaa:	4f 91       	pop	r20
    3aac:	3f 91       	pop	r19
    3aae:	2f 91       	pop	r18
    3ab0:	0f 90       	pop	r0
    3ab2:	0f be       	out	0x3f, r0	; 63
    3ab4:	0f 90       	pop	r0
    3ab6:	1f 90       	pop	r1
    3ab8:	18 95       	reti

00003aba <__vector_11>:

/* Prototype for ISR TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    3aba:	1f 92       	push	r1
    3abc:	0f 92       	push	r0
    3abe:	0f b6       	in	r0, 0x3f	; 63
    3ac0:	0f 92       	push	r0
    3ac2:	11 24       	eor	r1, r1
    3ac4:	2f 93       	push	r18
    3ac6:	3f 93       	push	r19
    3ac8:	4f 93       	push	r20
    3aca:	5f 93       	push	r21
    3acc:	6f 93       	push	r22
    3ace:	7f 93       	push	r23
    3ad0:	8f 93       	push	r24
    3ad2:	9f 93       	push	r25
    3ad4:	af 93       	push	r26
    3ad6:	bf 93       	push	r27
    3ad8:	ef 93       	push	r30
    3ada:	ff 93       	push	r31
    3adc:	df 93       	push	r29
    3ade:	cf 93       	push	r28
    3ae0:	cd b7       	in	r28, 0x3d	; 61
    3ae2:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    3ae4:	80 91 99 01 	lds	r24, 0x0199
    3ae8:	90 91 9a 01 	lds	r25, 0x019A
    3aec:	01 96       	adiw	r24, 0x01	; 1
    3aee:	90 93 9a 01 	sts	0x019A, r25
    3af2:	80 93 99 01 	sts	0x0199, r24
	if(Local_u16CounterOVF == 3907)
    3af6:	80 91 99 01 	lds	r24, 0x0199
    3afa:	90 91 9a 01 	lds	r25, 0x019A
    3afe:	2f e0       	ldi	r18, 0x0F	; 15
    3b00:	83 34       	cpi	r24, 0x43	; 67
    3b02:	92 07       	cpc	r25, r18
    3b04:	99 f4       	brne	.+38     	; 0x3b2c <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    3b06:	e2 e5       	ldi	r30, 0x52	; 82
    3b08:	f0 e0       	ldi	r31, 0x00	; 0
    3b0a:	80 ec       	ldi	r24, 0xC0	; 192
    3b0c:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    3b0e:	10 92 9a 01 	sts	0x019A, r1
    3b12:	10 92 99 01 	sts	0x0199, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
    3b16:	80 91 85 01 	lds	r24, 0x0185
    3b1a:	90 91 86 01 	lds	r25, 0x0186
    3b1e:	00 97       	sbiw	r24, 0x00	; 0
    3b20:	29 f0       	breq	.+10     	; 0x3b2c <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    3b22:	e0 91 85 01 	lds	r30, 0x0185
    3b26:	f0 91 86 01 	lds	r31, 0x0186
    3b2a:	09 95       	icall
		}
	}
}
    3b2c:	cf 91       	pop	r28
    3b2e:	df 91       	pop	r29
    3b30:	ff 91       	pop	r31
    3b32:	ef 91       	pop	r30
    3b34:	bf 91       	pop	r27
    3b36:	af 91       	pop	r26
    3b38:	9f 91       	pop	r25
    3b3a:	8f 91       	pop	r24
    3b3c:	7f 91       	pop	r23
    3b3e:	6f 91       	pop	r22
    3b40:	5f 91       	pop	r21
    3b42:	4f 91       	pop	r20
    3b44:	3f 91       	pop	r19
    3b46:	2f 91       	pop	r18
    3b48:	0f 90       	pop	r0
    3b4a:	0f be       	out	0x3f, r0	; 63
    3b4c:	0f 90       	pop	r0
    3b4e:	1f 90       	pop	r1
    3b50:	18 95       	reti

00003b52 <__vector_10>:

/* Prototype for ISR TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    3b52:	1f 92       	push	r1
    3b54:	0f 92       	push	r0
    3b56:	0f b6       	in	r0, 0x3f	; 63
    3b58:	0f 92       	push	r0
    3b5a:	11 24       	eor	r1, r1
    3b5c:	2f 93       	push	r18
    3b5e:	3f 93       	push	r19
    3b60:	4f 93       	push	r20
    3b62:	5f 93       	push	r21
    3b64:	6f 93       	push	r22
    3b66:	7f 93       	push	r23
    3b68:	8f 93       	push	r24
    3b6a:	9f 93       	push	r25
    3b6c:	af 93       	push	r26
    3b6e:	bf 93       	push	r27
    3b70:	ef 93       	push	r30
    3b72:	ff 93       	push	r31
    3b74:	df 93       	push	r29
    3b76:	cf 93       	push	r28
    3b78:	cd b7       	in	r28, 0x3d	; 61
    3b7a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    3b7c:	80 91 9b 01 	lds	r24, 0x019B
    3b80:	90 91 9c 01 	lds	r25, 0x019C
    3b84:	01 96       	adiw	r24, 0x01	; 1
    3b86:	90 93 9c 01 	sts	0x019C, r25
    3b8a:	80 93 9b 01 	sts	0x019B, r24
	if(Local_u16CounterCTC == 10000)
    3b8e:	80 91 9b 01 	lds	r24, 0x019B
    3b92:	90 91 9c 01 	lds	r25, 0x019C
    3b96:	27 e2       	ldi	r18, 0x27	; 39
    3b98:	80 31       	cpi	r24, 0x10	; 16
    3b9a:	92 07       	cpc	r25, r18
    3b9c:	79 f4       	brne	.+30     	; 0x3bbc <__vector_10+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    3b9e:	10 92 9c 01 	sts	0x019C, r1
    3ba2:	10 92 9b 01 	sts	0x019B, r1
		/* Call App Function */
		if(TIMERS_pfTimer0CTC != NULL)
    3ba6:	80 91 87 01 	lds	r24, 0x0187
    3baa:	90 91 88 01 	lds	r25, 0x0188
    3bae:	00 97       	sbiw	r24, 0x00	; 0
    3bb0:	29 f0       	breq	.+10     	; 0x3bbc <__vector_10+0x6a>
		{
			TIMERS_pfTimer0CTC();
    3bb2:	e0 91 87 01 	lds	r30, 0x0187
    3bb6:	f0 91 88 01 	lds	r31, 0x0188
    3bba:	09 95       	icall
		}
	}
}
    3bbc:	cf 91       	pop	r28
    3bbe:	df 91       	pop	r29
    3bc0:	ff 91       	pop	r31
    3bc2:	ef 91       	pop	r30
    3bc4:	bf 91       	pop	r27
    3bc6:	af 91       	pop	r26
    3bc8:	9f 91       	pop	r25
    3bca:	8f 91       	pop	r24
    3bcc:	7f 91       	pop	r23
    3bce:	6f 91       	pop	r22
    3bd0:	5f 91       	pop	r21
    3bd2:	4f 91       	pop	r20
    3bd4:	3f 91       	pop	r19
    3bd6:	2f 91       	pop	r18
    3bd8:	0f 90       	pop	r0
    3bda:	0f be       	out	0x3f, r0	; 63
    3bdc:	0f 90       	pop	r0
    3bde:	1f 90       	pop	r1
    3be0:	18 95       	reti

00003be2 <main>:
/* HAL Layer */
#include "LCD_interface.h"
#include "SWICU_interface.h"

int main(void)
{
    3be2:	df 93       	push	r29
    3be4:	cf 93       	push	r28
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <main+0x6>
    3be8:	00 d0       	rcall	.+0      	; 0x3bea <main+0x8>
    3bea:	0f 92       	push	r0
    3bec:	cd b7       	in	r28, 0x3d	; 61
    3bee:	de b7       	in	r29, 0x3e	; 62
	u32 Local_u32TotalPeriod;
	u8  Local_u8DutyCycle;
	DIO_voidInit();
    3bf0:	0e 94 17 07 	call	0xe2e	; 0xe2e <DIO_voidInit>
	LCD_voidInit();
    3bf4:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <LCD_voidInit>

	TIMERS_voidTimer1Init(); //Measure Periods (Counter)
    3bf8:	0e 94 8b 1a 	call	0x3516	; 0x3516 <TIMERS_voidTimer1Init>
	/* Enable Global Interrupt */
	GI_voidEnableGI();
    3bfc:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <GI_voidEnableGI>
	TIMERS_voidTimer0Init(); //generate PWM
    3c00:	0e 94 4f 1a 	call	0x349e	; 0x349e <TIMERS_voidTimer0Init>
	SWICU_voidEnable();
    3c04:	0e 94 62 19 	call	0x32c4	; 0x32c4 <SWICU_voidEnable>
	while(1)
	{
		SWICU_u8GetTotalPeriod(&Local_u32TotalPeriod);
    3c08:	ce 01       	movw	r24, r28
    3c0a:	01 96       	adiw	r24, 0x01	; 1
    3c0c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <SWICU_u8GetTotalPeriod>
		SWICU_u8GetDutyCycle(&Local_u8DutyCycle);
    3c10:	ce 01       	movw	r24, r28
    3c12:	05 96       	adiw	r24, 0x05	; 5
    3c14:	0e 94 a0 19 	call	0x3340	; 0x3340 <SWICU_u8GetDutyCycle>
		if ((Local_u32TotalPeriod != 0) && (Local_u8DutyCycle != 0))
    3c18:	89 81       	ldd	r24, Y+1	; 0x01
    3c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c1c:	ab 81       	ldd	r26, Y+3	; 0x03
    3c1e:	bc 81       	ldd	r27, Y+4	; 0x04
    3c20:	00 97       	sbiw	r24, 0x00	; 0
    3c22:	a1 05       	cpc	r26, r1
    3c24:	b1 05       	cpc	r27, r1
    3c26:	81 f3       	breq	.-32     	; 0x3c08 <main+0x26>
    3c28:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2a:	88 23       	and	r24, r24
    3c2c:	69 f3       	breq	.-38     	; 0x3c08 <main+0x26>
		{
			LCD_u8GoToXY(LCD_u8_LINE1, 0);
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	60 e0       	ldi	r22, 0x00	; 0
    3c32:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
			LCD_voidWriteString((u8 *)"Duty = ");
    3c36:	80 e6       	ldi	r24, 0x60	; 96
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_voidWriteString>
			LCD_voidWriteNumber(Local_u8DutyCycle);
    3c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c40:	88 2f       	mov	r24, r24
    3c42:	90 e0       	ldi	r25, 0x00	; 0
    3c44:	a0 e0       	ldi	r26, 0x00	; 0
    3c46:	b0 e0       	ldi	r27, 0x00	; 0
    3c48:	bc 01       	movw	r22, r24
    3c4a:	cd 01       	movw	r24, r26
    3c4c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_voidWriteNumber>
			LCD_voidWriteString((u8 *)"%");
    3c50:	88 e6       	ldi	r24, 0x68	; 104
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_voidWriteString>
			LCD_u8GoToXY(LCD_u8_LINE2, 0);
    3c58:	82 e0       	ldi	r24, 0x02	; 2
    3c5a:	60 e0       	ldi	r22, 0x00	; 0
    3c5c:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <LCD_u8GoToXY>
			LCD_voidWriteString((u8 *)"T P = ");
    3c60:	8a e6       	ldi	r24, 0x6A	; 106
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	0e 94 19 15 	call	0x2a32	; 0x2a32 <LCD_voidWriteString>
			LCD_voidWriteNumber(Local_u32TotalPeriod);
    3c68:	89 81       	ldd	r24, Y+1	; 0x01
    3c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c6c:	ab 81       	ldd	r26, Y+3	; 0x03
    3c6e:	bc 81       	ldd	r27, Y+4	; 0x04
    3c70:	bc 01       	movw	r22, r24
    3c72:	cd 01       	movw	r24, r26
    3c74:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <LCD_voidWriteNumber>
    3c78:	ff cf       	rjmp	.-2      	; 0x3c78 <main+0x96>

00003c7a <__udivmodsi4>:
    3c7a:	a1 e2       	ldi	r26, 0x21	; 33
    3c7c:	1a 2e       	mov	r1, r26
    3c7e:	aa 1b       	sub	r26, r26
    3c80:	bb 1b       	sub	r27, r27
    3c82:	fd 01       	movw	r30, r26
    3c84:	0d c0       	rjmp	.+26     	; 0x3ca0 <__udivmodsi4_ep>

00003c86 <__udivmodsi4_loop>:
    3c86:	aa 1f       	adc	r26, r26
    3c88:	bb 1f       	adc	r27, r27
    3c8a:	ee 1f       	adc	r30, r30
    3c8c:	ff 1f       	adc	r31, r31
    3c8e:	a2 17       	cp	r26, r18
    3c90:	b3 07       	cpc	r27, r19
    3c92:	e4 07       	cpc	r30, r20
    3c94:	f5 07       	cpc	r31, r21
    3c96:	20 f0       	brcs	.+8      	; 0x3ca0 <__udivmodsi4_ep>
    3c98:	a2 1b       	sub	r26, r18
    3c9a:	b3 0b       	sbc	r27, r19
    3c9c:	e4 0b       	sbc	r30, r20
    3c9e:	f5 0b       	sbc	r31, r21

00003ca0 <__udivmodsi4_ep>:
    3ca0:	66 1f       	adc	r22, r22
    3ca2:	77 1f       	adc	r23, r23
    3ca4:	88 1f       	adc	r24, r24
    3ca6:	99 1f       	adc	r25, r25
    3ca8:	1a 94       	dec	r1
    3caa:	69 f7       	brne	.-38     	; 0x3c86 <__udivmodsi4_loop>
    3cac:	60 95       	com	r22
    3cae:	70 95       	com	r23
    3cb0:	80 95       	com	r24
    3cb2:	90 95       	com	r25
    3cb4:	9b 01       	movw	r18, r22
    3cb6:	ac 01       	movw	r20, r24
    3cb8:	bd 01       	movw	r22, r26
    3cba:	cf 01       	movw	r24, r30
    3cbc:	08 95       	ret

00003cbe <__prologue_saves__>:
    3cbe:	2f 92       	push	r2
    3cc0:	3f 92       	push	r3
    3cc2:	4f 92       	push	r4
    3cc4:	5f 92       	push	r5
    3cc6:	6f 92       	push	r6
    3cc8:	7f 92       	push	r7
    3cca:	8f 92       	push	r8
    3ccc:	9f 92       	push	r9
    3cce:	af 92       	push	r10
    3cd0:	bf 92       	push	r11
    3cd2:	cf 92       	push	r12
    3cd4:	df 92       	push	r13
    3cd6:	ef 92       	push	r14
    3cd8:	ff 92       	push	r15
    3cda:	0f 93       	push	r16
    3cdc:	1f 93       	push	r17
    3cde:	cf 93       	push	r28
    3ce0:	df 93       	push	r29
    3ce2:	cd b7       	in	r28, 0x3d	; 61
    3ce4:	de b7       	in	r29, 0x3e	; 62
    3ce6:	ca 1b       	sub	r28, r26
    3ce8:	db 0b       	sbc	r29, r27
    3cea:	0f b6       	in	r0, 0x3f	; 63
    3cec:	f8 94       	cli
    3cee:	de bf       	out	0x3e, r29	; 62
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	cd bf       	out	0x3d, r28	; 61
    3cf4:	09 94       	ijmp

00003cf6 <__epilogue_restores__>:
    3cf6:	2a 88       	ldd	r2, Y+18	; 0x12
    3cf8:	39 88       	ldd	r3, Y+17	; 0x11
    3cfa:	48 88       	ldd	r4, Y+16	; 0x10
    3cfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3cfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d00:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d02:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d04:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d06:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d08:	b9 84       	ldd	r11, Y+9	; 0x09
    3d0a:	c8 84       	ldd	r12, Y+8	; 0x08
    3d0c:	df 80       	ldd	r13, Y+7	; 0x07
    3d0e:	ee 80       	ldd	r14, Y+6	; 0x06
    3d10:	fd 80       	ldd	r15, Y+5	; 0x05
    3d12:	0c 81       	ldd	r16, Y+4	; 0x04
    3d14:	1b 81       	ldd	r17, Y+3	; 0x03
    3d16:	aa 81       	ldd	r26, Y+2	; 0x02
    3d18:	b9 81       	ldd	r27, Y+1	; 0x01
    3d1a:	ce 0f       	add	r28, r30
    3d1c:	d1 1d       	adc	r29, r1
    3d1e:	0f b6       	in	r0, 0x3f	; 63
    3d20:	f8 94       	cli
    3d22:	de bf       	out	0x3e, r29	; 62
    3d24:	0f be       	out	0x3f, r0	; 63
    3d26:	cd bf       	out	0x3d, r28	; 61
    3d28:	ed 01       	movw	r28, r26
    3d2a:	08 95       	ret

00003d2c <_exit>:
    3d2c:	f8 94       	cli

00003d2e <__stop_program>:
    3d2e:	ff cf       	rjmp	.-2      	; 0x3d2e <__stop_program>
