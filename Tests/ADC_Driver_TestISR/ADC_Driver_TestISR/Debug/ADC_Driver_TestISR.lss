
ADC_Driver_TestISR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000d94  00000e28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  00000e2a  2**0
                  ALLOC
  3 .stab         00001080  00000000  00000000  00000e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006e4  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <__vector_16>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e9       	ldi	r30, 0x94	; 148
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 48 06 	call	0xc90	; 0xc90 <main>
  8a:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_voidInit>:

/* ADC busy Flag */
static u8 ADC_u8BusyFlag = 0;

void ADC_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	   3- Disable AutoTrigger
	   4- Select CLK/64
	   5- Enable ADC
	    */
	//1- Select Vref = AVCC
	CLR_BIT(ADC_u8_ADMUX_REG,7);
  9a:	a7 e2       	ldi	r26, 0x27	; 39
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	e7 e2       	ldi	r30, 0x27	; 39
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADMUX_REG,6);
  a8:	a7 e2       	ldi	r26, 0x27	; 39
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e7 e2       	ldi	r30, 0x27	; 39
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	8c 93       	st	X, r24
	//2- Right Adjust
	CLR_BIT(ADC_u8_ADMUX_REG,5);
  b6:	a7 e2       	ldi	r26, 0x27	; 39
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e7 e2       	ldi	r30, 0x27	; 39
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8f 7d       	andi	r24, 0xDF	; 223
  c2:	8c 93       	st	X, r24
	//3- Disable AutoTrigger
	CLR_BIT(ADC_u8_ADCSRA_REG,5);
  c4:	a6 e2       	ldi	r26, 0x26	; 38
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e6 e2       	ldi	r30, 0x26	; 38
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8f 7d       	andi	r24, 0xDF	; 223
  d0:	8c 93       	st	X, r24
	//4- Select CLK/64
	SET_BIT(ADC_u8_ADCSRA_REG,2);
  d2:	a6 e2       	ldi	r26, 0x26	; 38
  d4:	b0 e0       	ldi	r27, 0x00	; 0
  d6:	e6 e2       	ldi	r30, 0x26	; 38
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	84 60       	ori	r24, 0x04	; 4
  de:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA_REG,1);
  e0:	a6 e2       	ldi	r26, 0x26	; 38
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e6 e2       	ldi	r30, 0x26	; 38
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADCSRA_REG,0);
  ee:	a6 e2       	ldi	r26, 0x26	; 38
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e6 e2       	ldi	r30, 0x26	; 38
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	8c 93       	st	X, r24
	//5- Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG,7);
  fc:	a6 e2       	ldi	r26, 0x26	; 38
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e6 e2       	ldi	r30, 0x26	; 38
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	80 68       	ori	r24, 0x80	; 128
 108:	8c 93       	st	X, r24

}
 10a:	cf 91       	pop	r28
 10c:	df 91       	pop	r29
 10e:	08 95       	ret

00000110 <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb, u16 *Copy_pu16DigitalValue)
{
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	28 97       	sbiw	r28, 0x08	; 8
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	8e 83       	std	Y+6, r24	; 0x06
 126:	78 87       	std	Y+8, r23	; 0x08
 128:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
 12e:	19 82       	std	Y+1, r1	; 0x01
 130:	1a 82       	std	Y+2, r1	; 0x02
 132:	1b 82       	std	Y+3, r1	; 0x03
 134:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32)  && (Copy_pu16DigitalValue != NULL) && (ADC_u8BusyFlag == 0))
 136:	8e 81       	ldd	r24, Y+6	; 0x06
 138:	80 32       	cpi	r24, 0x20	; 32
 13a:	08 f0       	brcs	.+2      	; 0x13e <ADC_u8GetDigitalValueSynchNonBlocking+0x2e>
 13c:	65 c0       	rjmp	.+202    	; 0x208 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
 13e:	8f 81       	ldd	r24, Y+7	; 0x07
 140:	98 85       	ldd	r25, Y+8	; 0x08
 142:	00 97       	sbiw	r24, 0x00	; 0
 144:	09 f4       	brne	.+2      	; 0x148 <ADC_u8GetDigitalValueSynchNonBlocking+0x38>
 146:	60 c0       	rjmp	.+192    	; 0x208 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
 148:	80 91 64 00 	lds	r24, 0x0064
 14c:	88 23       	and	r24, r24
 14e:	09 f0       	breq	.+2      	; 0x152 <ADC_u8GetDigitalValueSynchNonBlocking+0x42>
 150:	5b c0       	rjmp	.+182    	; 0x208 <ADC_u8GetDigitalValueSynchNonBlocking+0xf8>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 64 00 	sts	0x0064, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
 158:	a7 e2       	ldi	r26, 0x27	; 39
 15a:	b0 e0       	ldi	r27, 0x00	; 0
 15c:	e7 e2       	ldi	r30, 0x27	; 39
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	80 7e       	andi	r24, 0xE0	; 224
 164:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
 166:	a7 e2       	ldi	r26, 0x27	; 39
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e7 e2       	ldi	r30, 0x27	; 39
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	90 81       	ld	r25, Z
 170:	8e 81       	ldd	r24, Y+6	; 0x06
 172:	89 2b       	or	r24, r25
 174:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
 176:	a6 e2       	ldi	r26, 0x26	; 38
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	e6 e2       	ldi	r30, 0x26	; 38
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8c 93       	st	X, r24
 184:	0b c0       	rjmp	.+22     	; 0x19c <ADC_u8GetDigitalValueSynchNonBlocking+0x8c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
		{
			Local_u32TimeOutCounter++;
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	9a 81       	ldd	r25, Y+2	; 0x02
 18a:	ab 81       	ldd	r26, Y+3	; 0x03
 18c:	bc 81       	ldd	r27, Y+4	; 0x04
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	a1 1d       	adc	r26, r1
 192:	b1 1d       	adc	r27, r1
 194:	89 83       	std	Y+1, r24	; 0x01
 196:	9a 83       	std	Y+2, r25	; 0x02
 198:	ab 83       	std	Y+3, r26	; 0x03
 19a:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE))
 19c:	e6 e2       	ldi	r30, 0x26	; 38
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	82 95       	swap	r24
 1a4:	8f 70       	andi	r24, 0x0F	; 15
 1a6:	88 2f       	mov	r24, r24
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	81 70       	andi	r24, 0x01	; 1
 1ac:	90 70       	andi	r25, 0x00	; 0
 1ae:	00 97       	sbiw	r24, 0x00	; 0
 1b0:	61 f4       	brne	.+24     	; 0x1ca <ADC_u8GetDigitalValueSynchNonBlocking+0xba>
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	9a 81       	ldd	r25, Y+2	; 0x02
 1b6:	ab 81       	ldd	r26, Y+3	; 0x03
 1b8:	bc 81       	ldd	r27, Y+4	; 0x04
 1ba:	80 35       	cpi	r24, 0x50	; 80
 1bc:	23 ec       	ldi	r18, 0xC3	; 195
 1be:	92 07       	cpc	r25, r18
 1c0:	20 e0       	ldi	r18, 0x00	; 0
 1c2:	a2 07       	cpc	r26, r18
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	b2 07       	cpc	r27, r18
 1c8:	f0 f2       	brcs	.-68     	; 0x186 <ADC_u8GetDigitalValueSynchNonBlocking+0x76>
		{
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG,4)!= 0)//(Local_u32TimeOutCounter<ADC_u32_TIME_OUT_MAX_VALUE)
 1ca:	e6 e2       	ldi	r30, 0x26	; 38
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	82 95       	swap	r24
 1d2:	8f 70       	andi	r24, 0x0F	; 15
 1d4:	88 2f       	mov	r24, r24
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	81 70       	andi	r24, 0x01	; 1
 1da:	90 70       	andi	r25, 0x00	; 0
 1dc:	88 23       	and	r24, r24
 1de:	91 f0       	breq	.+36     	; 0x204 <ADC_u8GetDigitalValueSynchNonBlocking+0xf4>
		{
			/* Clear Flag */
			ADC_u8BusyFlag = 0;
 1e0:	10 92 64 00 	sts	0x0064, r1
			/* Clear flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
 1e4:	a6 e2       	ldi	r26, 0x26	; 38
 1e6:	b0 e0       	ldi	r27, 0x00	; 0
 1e8:	e6 e2       	ldi	r30, 0x26	; 38
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	80 61       	ori	r24, 0x10	; 16
 1f0:	8c 93       	st	X, r24
			/* Read the Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
 1f2:	e4 e2       	ldi	r30, 0x24	; 36
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	91 81       	ldd	r25, Z+1	; 0x01
 1fa:	ef 81       	ldd	r30, Y+7	; 0x07
 1fc:	f8 85       	ldd	r31, Y+8	; 0x08
 1fe:	91 83       	std	Z+1, r25	; 0x01
 200:	80 83       	st	Z, r24
 202:	03 c0       	rjmp	.+6      	; 0x20a <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
		else
		{
			Local_u8ErrorState = STD_TYPES_NOK;
 204:	1d 82       	std	Y+5, r1	; 0x05
 206:	01 c0       	rjmp	.+2      	; 0x20a <ADC_u8GetDigitalValueSynchNonBlocking+0xfa>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 208:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
 20a:	8d 81       	ldd	r24, Y+5	; 0x05
}
 20c:	28 96       	adiw	r28, 0x08	; 8
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	de bf       	out	0x3e, r29	; 62
 214:	0f be       	out	0x3f, r0	; 63
 216:	cd bf       	out	0x3d, r28	; 61
 218:	cf 91       	pop	r28
 21a:	df 91       	pop	r29
 21c:	08 95       	ret

0000021e <ADC_u8GetDigitalValueAsynch>:


u8 ADC_u8GetDigitalValueAsynch(u8 Copy_u8ChannelNb, void (*Copy_pfNotification) (u16))
{
 21e:	df 93       	push	r29
 220:	cf 93       	push	r28
 222:	00 d0       	rcall	.+0      	; 0x224 <ADC_u8GetDigitalValueAsynch+0x6>
 224:	00 d0       	rcall	.+0      	; 0x226 <ADC_u8GetDigitalValueAsynch+0x8>
 226:	cd b7       	in	r28, 0x3d	; 61
 228:	de b7       	in	r29, 0x3e	; 62
 22a:	8a 83       	std	Y+2, r24	; 0x02
 22c:	7c 83       	std	Y+4, r23	; 0x04
 22e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32)  && (Copy_pfNotification != NULL) && (ADC_u8BusyFlag == 0))
 234:	8a 81       	ldd	r24, Y+2	; 0x02
 236:	80 32       	cpi	r24, 0x20	; 32
 238:	78 f5       	brcc	.+94     	; 0x298 <ADC_u8GetDigitalValueAsynch+0x7a>
 23a:	8b 81       	ldd	r24, Y+3	; 0x03
 23c:	9c 81       	ldd	r25, Y+4	; 0x04
 23e:	00 97       	sbiw	r24, 0x00	; 0
 240:	59 f1       	breq	.+86     	; 0x298 <ADC_u8GetDigitalValueAsynch+0x7a>
 242:	80 91 64 00 	lds	r24, 0x0064
 246:	88 23       	and	r24, r24
 248:	39 f5       	brne	.+78     	; 0x298 <ADC_u8GetDigitalValueAsynch+0x7a>
	{
		/* Set ADC Busy Flag  */
		ADC_u8BusyFlag = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 64 00 	sts	0x0064, r24
		/* Update Global Pointer to a function */
		ADC_pfNotification = Copy_pfNotification;
 250:	8b 81       	ldd	r24, Y+3	; 0x03
 252:	9c 81       	ldd	r25, Y+4	; 0x04
 254:	90 93 63 00 	sts	0x0063, r25
 258:	80 93 62 00 	sts	0x0062, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
 25c:	a6 e2       	ldi	r26, 0x26	; 38
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e6 e2       	ldi	r30, 0x26	; 38
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 60       	ori	r24, 0x08	; 8
 268:	8c 93       	st	X, r24
		/* Clear MUX4..0 */
		ADC_u8_ADMUX_REG &= 0b11100000;
 26a:	a7 e2       	ldi	r26, 0x27	; 39
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e7 e2       	ldi	r30, 0x27	; 39
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	80 7e       	andi	r24, 0xE0	; 224
 276:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
 278:	a7 e2       	ldi	r26, 0x27	; 39
 27a:	b0 e0       	ldi	r27, 0x00	; 0
 27c:	e7 e2       	ldi	r30, 0x27	; 39
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	90 81       	ld	r25, Z
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	89 2b       	or	r24, r25
 286:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
 288:	a6 e2       	ldi	r26, 0x26	; 38
 28a:	b0 e0       	ldi	r27, 0x00	; 0
 28c:	e6 e2       	ldi	r30, 0x26	; 38
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	8c 93       	st	X, r24
 296:	01 c0       	rjmp	.+2      	; 0x29a <ADC_u8GetDigitalValueAsynch+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 298:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 29a:	89 81       	ldd	r24, Y+1	; 0x01
}
 29c:	0f 90       	pop	r0
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	cf 91       	pop	r28
 2a6:	df 91       	pop	r29
 2a8:	08 95       	ret

000002aa <ADC_u8GetADCRegValue>:
u8 ADC_u8GetADCRegValue (u16 * Copy_pu16ADCValue)
{
 2aa:	df 93       	push	r29
 2ac:	cf 93       	push	r28
 2ae:	00 d0       	rcall	.+0      	; 0x2b0 <ADC_u8GetADCRegValue+0x6>
 2b0:	0f 92       	push	r0
 2b2:	cd b7       	in	r28, 0x3d	; 61
 2b4:	de b7       	in	r29, 0x3e	; 62
 2b6:	9b 83       	std	Y+3, r25	; 0x03
 2b8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCValue != NULL)
 2be:	8a 81       	ldd	r24, Y+2	; 0x02
 2c0:	9b 81       	ldd	r25, Y+3	; 0x03
 2c2:	00 97       	sbiw	r24, 0x00	; 0
 2c4:	49 f0       	breq	.+18     	; 0x2d8 <ADC_u8GetADCRegValue+0x2e>
	{
		/* Read ADC Register */
		*Copy_pu16ADCValue = ADC_u16_ADC_REG;
 2c6:	e4 e2       	ldi	r30, 0x24	; 36
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	91 81       	ldd	r25, Z+1	; 0x01
 2ce:	ea 81       	ldd	r30, Y+2	; 0x02
 2d0:	fb 81       	ldd	r31, Y+3	; 0x03
 2d2:	91 83       	std	Z+1, r25	; 0x01
 2d4:	80 83       	st	Z, r24
 2d6:	01 c0       	rjmp	.+2      	; 0x2da <ADC_u8GetADCRegValue+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 2d8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 2da:	89 81       	ldd	r24, Y+1	; 0x01
}
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	0f 90       	pop	r0
 2e2:	cf 91       	pop	r28
 2e4:	df 91       	pop	r29
 2e6:	08 95       	ret

000002e8 <__vector_16>:

/* Prototype for ADC ISR */
void __vector_16(void)  __attribute__((signal));
void __vector_16(void)
{
 2e8:	1f 92       	push	r1
 2ea:	0f 92       	push	r0
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	0f 92       	push	r0
 2f0:	11 24       	eor	r1, r1
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
 30a:	df 93       	push	r29
 30c:	cf 93       	push	r28
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
 312:	80 91 62 00 	lds	r24, 0x0062
 316:	90 91 63 00 	lds	r25, 0x0063
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	99 f0       	breq	.+38     	; 0x344 <__vector_16+0x5c>
	{
		/* Clear Flag */
		ADC_u8BusyFlag = 0;
 31e:	10 92 64 00 	sts	0x0064, r1
		/* Clear PIE of ADC */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
 322:	a6 e2       	ldi	r26, 0x26	; 38
 324:	b0 e0       	ldi	r27, 0x00	; 0
 326:	e6 e2       	ldi	r30, 0x26	; 38
 328:	f0 e0       	ldi	r31, 0x00	; 0
 32a:	80 81       	ld	r24, Z
 32c:	87 7f       	andi	r24, 0xF7	; 247
 32e:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
 330:	20 91 62 00 	lds	r18, 0x0062
 334:	30 91 63 00 	lds	r19, 0x0063
 338:	e4 e2       	ldi	r30, 0x24	; 36
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	91 81       	ldd	r25, Z+1	; 0x01
 340:	f9 01       	movw	r30, r18
 342:	09 95       	icall
	}
}
 344:	cf 91       	pop	r28
 346:	df 91       	pop	r29
 348:	ff 91       	pop	r31
 34a:	ef 91       	pop	r30
 34c:	bf 91       	pop	r27
 34e:	af 91       	pop	r26
 350:	9f 91       	pop	r25
 352:	8f 91       	pop	r24
 354:	7f 91       	pop	r23
 356:	6f 91       	pop	r22
 358:	5f 91       	pop	r21
 35a:	4f 91       	pop	r20
 35c:	3f 91       	pop	r19
 35e:	2f 91       	pop	r18
 360:	0f 90       	pop	r0
 362:	0f be       	out	0x3f, r0	; 63
 364:	0f 90       	pop	r0
 366:	1f 90       	pop	r1
 368:	18 95       	reti

0000036a <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
 36a:	df 93       	push	r29
 36c:	cf 93       	push	r28
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
 372:	ea e3       	ldi	r30, 0x3A	; 58
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
 378:	e7 e3       	ldi	r30, 0x37	; 55
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 83       	st	Z, r24

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
 380:	e4 e3       	ldi	r30, 0x34	; 52
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
 386:	e1 e3       	ldi	r30, 0x31	; 49
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
 38c:	eb e3       	ldi	r30, 0x3B	; 59
 38e:	f0 e0       	ldi	r31, 0x00	; 0
 390:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
 392:	e8 e3       	ldi	r30, 0x38	; 56
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
 398:	e5 e3       	ldi	r30, 0x35	; 53
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
 39e:	e2 e3       	ldi	r30, 0x32	; 50
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	10 82       	st	Z, r1

}
 3a4:	cf 91       	pop	r28
 3a6:	df 91       	pop	r29
 3a8:	08 95       	ret

000003aa <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
 3aa:	df 93       	push	r29
 3ac:	cf 93       	push	r28
 3ae:	cd b7       	in	r28, 0x3d	; 61
 3b0:	de b7       	in	r29, 0x3e	; 62
 3b2:	2e 97       	sbiw	r28, 0x0e	; 14
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	f8 94       	cli
 3b8:	de bf       	out	0x3e, r29	; 62
 3ba:	0f be       	out	0x3f, r0	; 63
 3bc:	cd bf       	out	0x3d, r28	; 61
 3be:	8a 83       	std	Y+2, r24	; 0x02
 3c0:	6b 83       	std	Y+3, r22	; 0x03
 3c2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
 3c8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ca:	84 30       	cpi	r24, 0x04	; 4
 3cc:	08 f0       	brcs	.+2      	; 0x3d0 <DIO_u8SetPinDirection+0x26>
 3ce:	0d c1       	rjmp	.+538    	; 0x5ea <DIO_u8SetPinDirection+0x240>
 3d0:	8b 81       	ldd	r24, Y+3	; 0x03
 3d2:	88 30       	cpi	r24, 0x08	; 8
 3d4:	08 f0       	brcs	.+2      	; 0x3d8 <DIO_u8SetPinDirection+0x2e>
 3d6:	09 c1       	rjmp	.+530    	; 0x5ea <DIO_u8SetPinDirection+0x240>
 3d8:	8c 81       	ldd	r24, Y+4	; 0x04
 3da:	88 23       	and	r24, r24
 3dc:	21 f0       	breq	.+8      	; 0x3e6 <DIO_u8SetPinDirection+0x3c>
 3de:	8c 81       	ldd	r24, Y+4	; 0x04
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	09 f0       	breq	.+2      	; 0x3e6 <DIO_u8SetPinDirection+0x3c>
 3e4:	02 c1       	rjmp	.+516    	; 0x5ea <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
 3e6:	8a 81       	ldd	r24, Y+2	; 0x02
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	3e 87       	std	Y+14, r19	; 0x0e
 3ee:	2d 87       	std	Y+13, r18	; 0x0d
 3f0:	8d 85       	ldd	r24, Y+13	; 0x0d
 3f2:	9e 85       	ldd	r25, Y+14	; 0x0e
 3f4:	81 30       	cpi	r24, 0x01	; 1
 3f6:	91 05       	cpc	r25, r1
 3f8:	09 f4       	brne	.+2      	; 0x3fc <DIO_u8SetPinDirection+0x52>
 3fa:	4f c0       	rjmp	.+158    	; 0x49a <DIO_u8SetPinDirection+0xf0>
 3fc:	2d 85       	ldd	r18, Y+13	; 0x0d
 3fe:	3e 85       	ldd	r19, Y+14	; 0x0e
 400:	22 30       	cpi	r18, 0x02	; 2
 402:	31 05       	cpc	r19, r1
 404:	2c f4       	brge	.+10     	; 0x410 <DIO_u8SetPinDirection+0x66>
 406:	8d 85       	ldd	r24, Y+13	; 0x0d
 408:	9e 85       	ldd	r25, Y+14	; 0x0e
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	71 f0       	breq	.+28     	; 0x42a <DIO_u8SetPinDirection+0x80>
 40e:	ee c0       	rjmp	.+476    	; 0x5ec <DIO_u8SetPinDirection+0x242>
 410:	2d 85       	ldd	r18, Y+13	; 0x0d
 412:	3e 85       	ldd	r19, Y+14	; 0x0e
 414:	22 30       	cpi	r18, 0x02	; 2
 416:	31 05       	cpc	r19, r1
 418:	09 f4       	brne	.+2      	; 0x41c <DIO_u8SetPinDirection+0x72>
 41a:	77 c0       	rjmp	.+238    	; 0x50a <DIO_u8SetPinDirection+0x160>
 41c:	8d 85       	ldd	r24, Y+13	; 0x0d
 41e:	9e 85       	ldd	r25, Y+14	; 0x0e
 420:	83 30       	cpi	r24, 0x03	; 3
 422:	91 05       	cpc	r25, r1
 424:	09 f4       	brne	.+2      	; 0x428 <DIO_u8SetPinDirection+0x7e>
 426:	a9 c0       	rjmp	.+338    	; 0x57a <DIO_u8SetPinDirection+0x1d0>
 428:	e1 c0       	rjmp	.+450    	; 0x5ec <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
 42a:	8b 81       	ldd	r24, Y+3	; 0x03
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	3c 87       	std	Y+12, r19	; 0x0c
 432:	2b 87       	std	Y+11, r18	; 0x0b
 434:	8b 85       	ldd	r24, Y+11	; 0x0b
 436:	9c 85       	ldd	r25, Y+12	; 0x0c
 438:	00 97       	sbiw	r24, 0x00	; 0
 43a:	31 f0       	breq	.+12     	; 0x448 <DIO_u8SetPinDirection+0x9e>
 43c:	2b 85       	ldd	r18, Y+11	; 0x0b
 43e:	3c 85       	ldd	r19, Y+12	; 0x0c
 440:	21 30       	cpi	r18, 0x01	; 1
 442:	31 05       	cpc	r19, r1
 444:	b1 f0       	breq	.+44     	; 0x472 <DIO_u8SetPinDirection+0xc8>
 446:	d2 c0       	rjmp	.+420    	; 0x5ec <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 448:	aa e3       	ldi	r26, 0x3A	; 58
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	ea e3       	ldi	r30, 0x3A	; 58
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	48 2f       	mov	r20, r24
 454:	8b 81       	ldd	r24, Y+3	; 0x03
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 2e       	mov	r0, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <DIO_u8SetPinDirection+0xbc>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <DIO_u8SetPinDirection+0xb8>
 46a:	80 95       	com	r24
 46c:	84 23       	and	r24, r20
 46e:	8c 93       	st	X, r24
 470:	bd c0       	rjmp	.+378    	; 0x5ec <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
 472:	aa e3       	ldi	r26, 0x3A	; 58
 474:	b0 e0       	ldi	r27, 0x00	; 0
 476:	ea e3       	ldi	r30, 0x3A	; 58
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	80 81       	ld	r24, Z
 47c:	48 2f       	mov	r20, r24
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	28 2f       	mov	r18, r24
 482:	30 e0       	ldi	r19, 0x00	; 0
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	02 2e       	mov	r0, r18
 48a:	02 c0       	rjmp	.+4      	; 0x490 <DIO_u8SetPinDirection+0xe6>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	0a 94       	dec	r0
 492:	e2 f7       	brpl	.-8      	; 0x48c <DIO_u8SetPinDirection+0xe2>
 494:	84 2b       	or	r24, r20
 496:	8c 93       	st	X, r24
 498:	a9 c0       	rjmp	.+338    	; 0x5ec <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
 49a:	8b 81       	ldd	r24, Y+3	; 0x03
 49c:	28 2f       	mov	r18, r24
 49e:	30 e0       	ldi	r19, 0x00	; 0
 4a0:	3a 87       	std	Y+10, r19	; 0x0a
 4a2:	29 87       	std	Y+9, r18	; 0x09
 4a4:	89 85       	ldd	r24, Y+9	; 0x09
 4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
 4a8:	00 97       	sbiw	r24, 0x00	; 0
 4aa:	31 f0       	breq	.+12     	; 0x4b8 <DIO_u8SetPinDirection+0x10e>
 4ac:	29 85       	ldd	r18, Y+9	; 0x09
 4ae:	3a 85       	ldd	r19, Y+10	; 0x0a
 4b0:	21 30       	cpi	r18, 0x01	; 1
 4b2:	31 05       	cpc	r19, r1
 4b4:	b1 f0       	breq	.+44     	; 0x4e2 <DIO_u8SetPinDirection+0x138>
 4b6:	9a c0       	rjmp	.+308    	; 0x5ec <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 4b8:	a7 e3       	ldi	r26, 0x37	; 55
 4ba:	b0 e0       	ldi	r27, 0x00	; 0
 4bc:	e7 e3       	ldi	r30, 0x37	; 55
 4be:	f0 e0       	ldi	r31, 0x00	; 0
 4c0:	80 81       	ld	r24, Z
 4c2:	48 2f       	mov	r20, r24
 4c4:	8b 81       	ldd	r24, Y+3	; 0x03
 4c6:	28 2f       	mov	r18, r24
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	02 2e       	mov	r0, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_u8SetPinDirection+0x12c>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	0a 94       	dec	r0
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_u8SetPinDirection+0x128>
 4da:	80 95       	com	r24
 4dc:	84 23       	and	r24, r20
 4de:	8c 93       	st	X, r24
 4e0:	85 c0       	rjmp	.+266    	; 0x5ec <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
 4e2:	a7 e3       	ldi	r26, 0x37	; 55
 4e4:	b0 e0       	ldi	r27, 0x00	; 0
 4e6:	e7 e3       	ldi	r30, 0x37	; 55
 4e8:	f0 e0       	ldi	r31, 0x00	; 0
 4ea:	80 81       	ld	r24, Z
 4ec:	48 2f       	mov	r20, r24
 4ee:	8b 81       	ldd	r24, Y+3	; 0x03
 4f0:	28 2f       	mov	r18, r24
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 2e       	mov	r0, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_u8SetPinDirection+0x156>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	0a 94       	dec	r0
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_u8SetPinDirection+0x152>
 504:	84 2b       	or	r24, r20
 506:	8c 93       	st	X, r24
 508:	71 c0       	rjmp	.+226    	; 0x5ec <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
 50a:	8b 81       	ldd	r24, Y+3	; 0x03
 50c:	28 2f       	mov	r18, r24
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	38 87       	std	Y+8, r19	; 0x08
 512:	2f 83       	std	Y+7, r18	; 0x07
 514:	8f 81       	ldd	r24, Y+7	; 0x07
 516:	98 85       	ldd	r25, Y+8	; 0x08
 518:	00 97       	sbiw	r24, 0x00	; 0
 51a:	31 f0       	breq	.+12     	; 0x528 <DIO_u8SetPinDirection+0x17e>
 51c:	2f 81       	ldd	r18, Y+7	; 0x07
 51e:	38 85       	ldd	r19, Y+8	; 0x08
 520:	21 30       	cpi	r18, 0x01	; 1
 522:	31 05       	cpc	r19, r1
 524:	b1 f0       	breq	.+44     	; 0x552 <DIO_u8SetPinDirection+0x1a8>
 526:	62 c0       	rjmp	.+196    	; 0x5ec <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 528:	a4 e3       	ldi	r26, 0x34	; 52
 52a:	b0 e0       	ldi	r27, 0x00	; 0
 52c:	e4 e3       	ldi	r30, 0x34	; 52
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	48 2f       	mov	r20, r24
 534:	8b 81       	ldd	r24, Y+3	; 0x03
 536:	28 2f       	mov	r18, r24
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 2e       	mov	r0, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_u8SetPinDirection+0x19c>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	0a 94       	dec	r0
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_u8SetPinDirection+0x198>
 54a:	80 95       	com	r24
 54c:	84 23       	and	r24, r20
 54e:	8c 93       	st	X, r24
 550:	4d c0       	rjmp	.+154    	; 0x5ec <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
 552:	a4 e3       	ldi	r26, 0x34	; 52
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e4 e3       	ldi	r30, 0x34	; 52
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	48 2f       	mov	r20, r24
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 2e       	mov	r0, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_u8SetPinDirection+0x1c6>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_u8SetPinDirection+0x1c2>
 574:	84 2b       	or	r24, r20
 576:	8c 93       	st	X, r24
 578:	39 c0       	rjmp	.+114    	; 0x5ec <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	3e 83       	std	Y+6, r19	; 0x06
 582:	2d 83       	std	Y+5, r18	; 0x05
 584:	8d 81       	ldd	r24, Y+5	; 0x05
 586:	9e 81       	ldd	r25, Y+6	; 0x06
 588:	00 97       	sbiw	r24, 0x00	; 0
 58a:	31 f0       	breq	.+12     	; 0x598 <DIO_u8SetPinDirection+0x1ee>
 58c:	2d 81       	ldd	r18, Y+5	; 0x05
 58e:	3e 81       	ldd	r19, Y+6	; 0x06
 590:	21 30       	cpi	r18, 0x01	; 1
 592:	31 05       	cpc	r19, r1
 594:	b1 f0       	breq	.+44     	; 0x5c2 <DIO_u8SetPinDirection+0x218>
 596:	2a c0       	rjmp	.+84     	; 0x5ec <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 598:	a1 e3       	ldi	r26, 0x31	; 49
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e1 e3       	ldi	r30, 0x31	; 49
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 81       	ld	r24, Z
 5a2:	48 2f       	mov	r20, r24
 5a4:	8b 81       	ldd	r24, Y+3	; 0x03
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	02 2e       	mov	r0, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <DIO_u8SetPinDirection+0x20c>
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	0a 94       	dec	r0
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <DIO_u8SetPinDirection+0x208>
 5ba:	80 95       	com	r24
 5bc:	84 23       	and	r24, r20
 5be:	8c 93       	st	X, r24
 5c0:	15 c0       	rjmp	.+42     	; 0x5ec <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
 5c2:	a1 e3       	ldi	r26, 0x31	; 49
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	e1 e3       	ldi	r30, 0x31	; 49
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	48 2f       	mov	r20, r24
 5ce:	8b 81       	ldd	r24, Y+3	; 0x03
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 2e       	mov	r0, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_u8SetPinDirection+0x236>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_u8SetPinDirection+0x232>
 5e4:	84 2b       	or	r24, r20
 5e6:	8c 93       	st	X, r24
 5e8:	01 c0       	rjmp	.+2      	; 0x5ec <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 5ea:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 5ec:	89 81       	ldd	r24, Y+1	; 0x01
}
 5ee:	2e 96       	adiw	r28, 0x0e	; 14
 5f0:	0f b6       	in	r0, 0x3f	; 63
 5f2:	f8 94       	cli
 5f4:	de bf       	out	0x3e, r29	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	cd bf       	out	0x3d, r28	; 61
 5fa:	cf 91       	pop	r28
 5fc:	df 91       	pop	r29
 5fe:	08 95       	ret

00000600 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
 600:	df 93       	push	r29
 602:	cf 93       	push	r28
 604:	cd b7       	in	r28, 0x3d	; 61
 606:	de b7       	in	r29, 0x3e	; 62
 608:	2e 97       	sbiw	r28, 0x0e	; 14
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	f8 94       	cli
 60e:	de bf       	out	0x3e, r29	; 62
 610:	0f be       	out	0x3f, r0	; 63
 612:	cd bf       	out	0x3d, r28	; 61
 614:	8a 83       	std	Y+2, r24	; 0x02
 616:	6b 83       	std	Y+3, r22	; 0x03
 618:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	88 30       	cpi	r24, 0x08	; 8
 622:	08 f0       	brcs	.+2      	; 0x626 <DIO_u8SetPinValue+0x26>
 624:	0c c1       	rjmp	.+536    	; 0x83e <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
 626:	8a 81       	ldd	r24, Y+2	; 0x02
 628:	28 2f       	mov	r18, r24
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	3e 87       	std	Y+14, r19	; 0x0e
 62e:	2d 87       	std	Y+13, r18	; 0x0d
 630:	8d 85       	ldd	r24, Y+13	; 0x0d
 632:	9e 85       	ldd	r25, Y+14	; 0x0e
 634:	81 30       	cpi	r24, 0x01	; 1
 636:	91 05       	cpc	r25, r1
 638:	09 f4       	brne	.+2      	; 0x63c <DIO_u8SetPinValue+0x3c>
 63a:	51 c0       	rjmp	.+162    	; 0x6de <DIO_u8SetPinValue+0xde>
 63c:	2d 85       	ldd	r18, Y+13	; 0x0d
 63e:	3e 85       	ldd	r19, Y+14	; 0x0e
 640:	22 30       	cpi	r18, 0x02	; 2
 642:	31 05       	cpc	r19, r1
 644:	2c f4       	brge	.+10     	; 0x650 <DIO_u8SetPinValue+0x50>
 646:	8d 85       	ldd	r24, Y+13	; 0x0d
 648:	9e 85       	ldd	r25, Y+14	; 0x0e
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	71 f0       	breq	.+28     	; 0x66a <DIO_u8SetPinValue+0x6a>
 64e:	f5 c0       	rjmp	.+490    	; 0x83a <DIO_u8SetPinValue+0x23a>
 650:	2d 85       	ldd	r18, Y+13	; 0x0d
 652:	3e 85       	ldd	r19, Y+14	; 0x0e
 654:	22 30       	cpi	r18, 0x02	; 2
 656:	31 05       	cpc	r19, r1
 658:	09 f4       	brne	.+2      	; 0x65c <DIO_u8SetPinValue+0x5c>
 65a:	7b c0       	rjmp	.+246    	; 0x752 <DIO_u8SetPinValue+0x152>
 65c:	8d 85       	ldd	r24, Y+13	; 0x0d
 65e:	9e 85       	ldd	r25, Y+14	; 0x0e
 660:	83 30       	cpi	r24, 0x03	; 3
 662:	91 05       	cpc	r25, r1
 664:	09 f4       	brne	.+2      	; 0x668 <DIO_u8SetPinValue+0x68>
 666:	af c0       	rjmp	.+350    	; 0x7c6 <DIO_u8SetPinValue+0x1c6>
 668:	e8 c0       	rjmp	.+464    	; 0x83a <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
 66a:	8c 81       	ldd	r24, Y+4	; 0x04
 66c:	28 2f       	mov	r18, r24
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	3c 87       	std	Y+12, r19	; 0x0c
 672:	2b 87       	std	Y+11, r18	; 0x0b
 674:	8b 85       	ldd	r24, Y+11	; 0x0b
 676:	9c 85       	ldd	r25, Y+12	; 0x0c
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	31 f0       	breq	.+12     	; 0x688 <DIO_u8SetPinValue+0x88>
 67c:	2b 85       	ldd	r18, Y+11	; 0x0b
 67e:	3c 85       	ldd	r19, Y+12	; 0x0c
 680:	21 30       	cpi	r18, 0x01	; 1
 682:	31 05       	cpc	r19, r1
 684:	b1 f0       	breq	.+44     	; 0x6b2 <DIO_u8SetPinValue+0xb2>
 686:	29 c0       	rjmp	.+82     	; 0x6da <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 688:	ab e3       	ldi	r26, 0x3B	; 59
 68a:	b0 e0       	ldi	r27, 0x00	; 0
 68c:	eb e3       	ldi	r30, 0x3B	; 59
 68e:	f0 e0       	ldi	r31, 0x00	; 0
 690:	80 81       	ld	r24, Z
 692:	48 2f       	mov	r20, r24
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	28 2f       	mov	r18, r24
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	90 e0       	ldi	r25, 0x00	; 0
 69e:	02 2e       	mov	r0, r18
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_u8SetPinValue+0xa6>
 6a2:	88 0f       	add	r24, r24
 6a4:	99 1f       	adc	r25, r25
 6a6:	0a 94       	dec	r0
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_u8SetPinValue+0xa2>
 6aa:	80 95       	com	r24
 6ac:	84 23       	and	r24, r20
 6ae:	8c 93       	st	X, r24
 6b0:	c7 c0       	rjmp	.+398    	; 0x840 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
 6b2:	ab e3       	ldi	r26, 0x3B	; 59
 6b4:	b0 e0       	ldi	r27, 0x00	; 0
 6b6:	eb e3       	ldi	r30, 0x3B	; 59
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	80 81       	ld	r24, Z
 6bc:	48 2f       	mov	r20, r24
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	28 2f       	mov	r18, r24
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	02 2e       	mov	r0, r18
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <DIO_u8SetPinValue+0xd0>
 6cc:	88 0f       	add	r24, r24
 6ce:	99 1f       	adc	r25, r25
 6d0:	0a 94       	dec	r0
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <DIO_u8SetPinValue+0xcc>
 6d4:	84 2b       	or	r24, r20
 6d6:	8c 93       	st	X, r24
 6d8:	b3 c0       	rjmp	.+358    	; 0x840 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	b1 c0       	rjmp	.+354    	; 0x840 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
 6de:	8c 81       	ldd	r24, Y+4	; 0x04
 6e0:	28 2f       	mov	r18, r24
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	3a 87       	std	Y+10, r19	; 0x0a
 6e6:	29 87       	std	Y+9, r18	; 0x09
 6e8:	89 85       	ldd	r24, Y+9	; 0x09
 6ea:	9a 85       	ldd	r25, Y+10	; 0x0a
 6ec:	00 97       	sbiw	r24, 0x00	; 0
 6ee:	31 f0       	breq	.+12     	; 0x6fc <DIO_u8SetPinValue+0xfc>
 6f0:	29 85       	ldd	r18, Y+9	; 0x09
 6f2:	3a 85       	ldd	r19, Y+10	; 0x0a
 6f4:	21 30       	cpi	r18, 0x01	; 1
 6f6:	31 05       	cpc	r19, r1
 6f8:	b1 f0       	breq	.+44     	; 0x726 <DIO_u8SetPinValue+0x126>
 6fa:	29 c0       	rjmp	.+82     	; 0x74e <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 6fc:	a8 e3       	ldi	r26, 0x38	; 56
 6fe:	b0 e0       	ldi	r27, 0x00	; 0
 700:	e8 e3       	ldi	r30, 0x38	; 56
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	80 81       	ld	r24, Z
 706:	48 2f       	mov	r20, r24
 708:	8b 81       	ldd	r24, Y+3	; 0x03
 70a:	28 2f       	mov	r18, r24
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	02 2e       	mov	r0, r18
 714:	02 c0       	rjmp	.+4      	; 0x71a <DIO_u8SetPinValue+0x11a>
 716:	88 0f       	add	r24, r24
 718:	99 1f       	adc	r25, r25
 71a:	0a 94       	dec	r0
 71c:	e2 f7       	brpl	.-8      	; 0x716 <DIO_u8SetPinValue+0x116>
 71e:	80 95       	com	r24
 720:	84 23       	and	r24, r20
 722:	8c 93       	st	X, r24
 724:	8d c0       	rjmp	.+282    	; 0x840 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
 726:	a8 e3       	ldi	r26, 0x38	; 56
 728:	b0 e0       	ldi	r27, 0x00	; 0
 72a:	e8 e3       	ldi	r30, 0x38	; 56
 72c:	f0 e0       	ldi	r31, 0x00	; 0
 72e:	80 81       	ld	r24, Z
 730:	48 2f       	mov	r20, r24
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	28 2f       	mov	r18, r24
 736:	30 e0       	ldi	r19, 0x00	; 0
 738:	81 e0       	ldi	r24, 0x01	; 1
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	02 2e       	mov	r0, r18
 73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_u8SetPinValue+0x144>
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	0a 94       	dec	r0
 746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_u8SetPinValue+0x140>
 748:	84 2b       	or	r24, r20
 74a:	8c 93       	st	X, r24
 74c:	79 c0       	rjmp	.+242    	; 0x840 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 74e:	19 82       	std	Y+1, r1	; 0x01
 750:	77 c0       	rjmp	.+238    	; 0x840 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
 752:	8c 81       	ldd	r24, Y+4	; 0x04
 754:	28 2f       	mov	r18, r24
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	38 87       	std	Y+8, r19	; 0x08
 75a:	2f 83       	std	Y+7, r18	; 0x07
 75c:	8f 81       	ldd	r24, Y+7	; 0x07
 75e:	98 85       	ldd	r25, Y+8	; 0x08
 760:	00 97       	sbiw	r24, 0x00	; 0
 762:	31 f0       	breq	.+12     	; 0x770 <DIO_u8SetPinValue+0x170>
 764:	2f 81       	ldd	r18, Y+7	; 0x07
 766:	38 85       	ldd	r19, Y+8	; 0x08
 768:	21 30       	cpi	r18, 0x01	; 1
 76a:	31 05       	cpc	r19, r1
 76c:	b1 f0       	breq	.+44     	; 0x79a <DIO_u8SetPinValue+0x19a>
 76e:	29 c0       	rjmp	.+82     	; 0x7c2 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 770:	a5 e3       	ldi	r26, 0x35	; 53
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	e5 e3       	ldi	r30, 0x35	; 53
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	48 2f       	mov	r20, r24
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	28 2f       	mov	r18, r24
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	81 e0       	ldi	r24, 0x01	; 1
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	02 2e       	mov	r0, r18
 788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_u8SetPinValue+0x18e>
 78a:	88 0f       	add	r24, r24
 78c:	99 1f       	adc	r25, r25
 78e:	0a 94       	dec	r0
 790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_u8SetPinValue+0x18a>
 792:	80 95       	com	r24
 794:	84 23       	and	r24, r20
 796:	8c 93       	st	X, r24
 798:	53 c0       	rjmp	.+166    	; 0x840 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
 79a:	a5 e3       	ldi	r26, 0x35	; 53
 79c:	b0 e0       	ldi	r27, 0x00	; 0
 79e:	e5 e3       	ldi	r30, 0x35	; 53
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	80 81       	ld	r24, Z
 7a4:	48 2f       	mov	r20, r24
 7a6:	8b 81       	ldd	r24, Y+3	; 0x03
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	81 e0       	ldi	r24, 0x01	; 1
 7ae:	90 e0       	ldi	r25, 0x00	; 0
 7b0:	02 2e       	mov	r0, r18
 7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_u8SetPinValue+0x1b8>
 7b4:	88 0f       	add	r24, r24
 7b6:	99 1f       	adc	r25, r25
 7b8:	0a 94       	dec	r0
 7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_u8SetPinValue+0x1b4>
 7bc:	84 2b       	or	r24, r20
 7be:	8c 93       	st	X, r24
 7c0:	3f c0       	rjmp	.+126    	; 0x840 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 7c2:	19 82       	std	Y+1, r1	; 0x01
 7c4:	3d c0       	rjmp	.+122    	; 0x840 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
 7c6:	8c 81       	ldd	r24, Y+4	; 0x04
 7c8:	28 2f       	mov	r18, r24
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	3e 83       	std	Y+6, r19	; 0x06
 7ce:	2d 83       	std	Y+5, r18	; 0x05
 7d0:	8d 81       	ldd	r24, Y+5	; 0x05
 7d2:	9e 81       	ldd	r25, Y+6	; 0x06
 7d4:	00 97       	sbiw	r24, 0x00	; 0
 7d6:	31 f0       	breq	.+12     	; 0x7e4 <DIO_u8SetPinValue+0x1e4>
 7d8:	2d 81       	ldd	r18, Y+5	; 0x05
 7da:	3e 81       	ldd	r19, Y+6	; 0x06
 7dc:	21 30       	cpi	r18, 0x01	; 1
 7de:	31 05       	cpc	r19, r1
 7e0:	b1 f0       	breq	.+44     	; 0x80e <DIO_u8SetPinValue+0x20e>
 7e2:	29 c0       	rjmp	.+82     	; 0x836 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 7e4:	a2 e3       	ldi	r26, 0x32	; 50
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	e2 e3       	ldi	r30, 0x32	; 50
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	48 2f       	mov	r20, r24
 7f0:	8b 81       	ldd	r24, Y+3	; 0x03
 7f2:	28 2f       	mov	r18, r24
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	02 2e       	mov	r0, r18
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <DIO_u8SetPinValue+0x202>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	0a 94       	dec	r0
 804:	e2 f7       	brpl	.-8      	; 0x7fe <DIO_u8SetPinValue+0x1fe>
 806:	80 95       	com	r24
 808:	84 23       	and	r24, r20
 80a:	8c 93       	st	X, r24
 80c:	19 c0       	rjmp	.+50     	; 0x840 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
 80e:	a2 e3       	ldi	r26, 0x32	; 50
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	e2 e3       	ldi	r30, 0x32	; 50
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	80 81       	ld	r24, Z
 818:	48 2f       	mov	r20, r24
 81a:	8b 81       	ldd	r24, Y+3	; 0x03
 81c:	28 2f       	mov	r18, r24
 81e:	30 e0       	ldi	r19, 0x00	; 0
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	02 2e       	mov	r0, r18
 826:	02 c0       	rjmp	.+4      	; 0x82c <DIO_u8SetPinValue+0x22c>
 828:	88 0f       	add	r24, r24
 82a:	99 1f       	adc	r25, r25
 82c:	0a 94       	dec	r0
 82e:	e2 f7       	brpl	.-8      	; 0x828 <DIO_u8SetPinValue+0x228>
 830:	84 2b       	or	r24, r20
 832:	8c 93       	st	X, r24
 834:	05 c0       	rjmp	.+10     	; 0x840 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
 836:	19 82       	std	Y+1, r1	; 0x01
 838:	03 c0       	rjmp	.+6      	; 0x840 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
 83a:	19 82       	std	Y+1, r1	; 0x01
 83c:	01 c0       	rjmp	.+2      	; 0x840 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 83e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 840:	89 81       	ldd	r24, Y+1	; 0x01
}
 842:	2e 96       	adiw	r28, 0x0e	; 14
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	f8 94       	cli
 848:	de bf       	out	0x3e, r29	; 62
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	cd bf       	out	0x3d, r28	; 61
 84e:	cf 91       	pop	r28
 850:	df 91       	pop	r29
 852:	08 95       	ret

00000854 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
 854:	df 93       	push	r29
 856:	cf 93       	push	r28
 858:	cd b7       	in	r28, 0x3d	; 61
 85a:	de b7       	in	r29, 0x3e	; 62
 85c:	28 97       	sbiw	r28, 0x08	; 8
 85e:	0f b6       	in	r0, 0x3f	; 63
 860:	f8 94       	cli
 862:	de bf       	out	0x3e, r29	; 62
 864:	0f be       	out	0x3f, r0	; 63
 866:	cd bf       	out	0x3d, r28	; 61
 868:	8b 83       	std	Y+3, r24	; 0x03
 86a:	6c 83       	std	Y+4, r22	; 0x04
 86c:	5e 83       	std	Y+6, r21	; 0x06
 86e:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
 874:	8b 81       	ldd	r24, Y+3	; 0x03
 876:	84 30       	cpi	r24, 0x04	; 4
 878:	08 f0       	brcs	.+2      	; 0x87c <__stack+0x1d>
 87a:	a1 c0       	rjmp	.+322    	; 0x9be <__stack+0x15f>
 87c:	8c 81       	ldd	r24, Y+4	; 0x04
 87e:	88 30       	cpi	r24, 0x08	; 8
 880:	08 f0       	brcs	.+2      	; 0x884 <__stack+0x25>
 882:	9d c0       	rjmp	.+314    	; 0x9be <__stack+0x15f>
 884:	8d 81       	ldd	r24, Y+5	; 0x05
 886:	9e 81       	ldd	r25, Y+6	; 0x06
 888:	00 97       	sbiw	r24, 0x00	; 0
 88a:	09 f4       	brne	.+2      	; 0x88e <__stack+0x2f>
 88c:	98 c0       	rjmp	.+304    	; 0x9be <__stack+0x15f>
	{
		switch(Copy_u8PortId)
 88e:	8b 81       	ldd	r24, Y+3	; 0x03
 890:	28 2f       	mov	r18, r24
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	38 87       	std	Y+8, r19	; 0x08
 896:	2f 83       	std	Y+7, r18	; 0x07
 898:	4f 81       	ldd	r20, Y+7	; 0x07
 89a:	58 85       	ldd	r21, Y+8	; 0x08
 89c:	41 30       	cpi	r20, 0x01	; 1
 89e:	51 05       	cpc	r21, r1
 8a0:	a9 f1       	breq	.+106    	; 0x90c <__stack+0xad>
 8a2:	8f 81       	ldd	r24, Y+7	; 0x07
 8a4:	98 85       	ldd	r25, Y+8	; 0x08
 8a6:	82 30       	cpi	r24, 0x02	; 2
 8a8:	91 05       	cpc	r25, r1
 8aa:	34 f4       	brge	.+12     	; 0x8b8 <__stack+0x59>
 8ac:	2f 81       	ldd	r18, Y+7	; 0x07
 8ae:	38 85       	ldd	r19, Y+8	; 0x08
 8b0:	21 15       	cp	r18, r1
 8b2:	31 05       	cpc	r19, r1
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <__stack+0x73>
 8b6:	81 c0       	rjmp	.+258    	; 0x9ba <__stack+0x15b>
 8b8:	4f 81       	ldd	r20, Y+7	; 0x07
 8ba:	58 85       	ldd	r21, Y+8	; 0x08
 8bc:	42 30       	cpi	r20, 0x02	; 2
 8be:	51 05       	cpc	r21, r1
 8c0:	09 f4       	brne	.+2      	; 0x8c4 <__stack+0x65>
 8c2:	41 c0       	rjmp	.+130    	; 0x946 <__stack+0xe7>
 8c4:	8f 81       	ldd	r24, Y+7	; 0x07
 8c6:	98 85       	ldd	r25, Y+8	; 0x08
 8c8:	83 30       	cpi	r24, 0x03	; 3
 8ca:	91 05       	cpc	r25, r1
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <__stack+0x71>
 8ce:	58 c0       	rjmp	.+176    	; 0x980 <__stack+0x121>
 8d0:	74 c0       	rjmp	.+232    	; 0x9ba <__stack+0x15b>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
 8d2:	e9 e3       	ldi	r30, 0x39	; 57
 8d4:	f0 e0       	ldi	r31, 0x00	; 0
 8d6:	80 81       	ld	r24, Z
 8d8:	28 2f       	mov	r18, r24
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	8c 81       	ldd	r24, Y+4	; 0x04
 8de:	88 2f       	mov	r24, r24
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	a9 01       	movw	r20, r18
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <__stack+0x8b>
 8e6:	55 95       	asr	r21
 8e8:	47 95       	ror	r20
 8ea:	8a 95       	dec	r24
 8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <__stack+0x87>
 8ee:	ca 01       	movw	r24, r20
 8f0:	81 70       	andi	r24, 0x01	; 1
 8f2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 8f4:	89 81       	ldd	r24, Y+1	; 0x01
 8f6:	88 23       	and	r24, r24
 8f8:	21 f4       	brne	.+8      	; 0x902 <__stack+0xa3>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 8fa:	ed 81       	ldd	r30, Y+5	; 0x05
 8fc:	fe 81       	ldd	r31, Y+6	; 0x06
 8fe:	10 82       	st	Z, r1
 900:	5f c0       	rjmp	.+190    	; 0x9c0 <__stack+0x161>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 902:	ed 81       	ldd	r30, Y+5	; 0x05
 904:	fe 81       	ldd	r31, Y+6	; 0x06
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	80 83       	st	Z, r24
 90a:	5a c0       	rjmp	.+180    	; 0x9c0 <__stack+0x161>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
 90c:	e6 e3       	ldi	r30, 0x36	; 54
 90e:	f0 e0       	ldi	r31, 0x00	; 0
 910:	80 81       	ld	r24, Z
 912:	28 2f       	mov	r18, r24
 914:	30 e0       	ldi	r19, 0x00	; 0
 916:	8c 81       	ldd	r24, Y+4	; 0x04
 918:	88 2f       	mov	r24, r24
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	a9 01       	movw	r20, r18
 91e:	02 c0       	rjmp	.+4      	; 0x924 <__stack+0xc5>
 920:	55 95       	asr	r21
 922:	47 95       	ror	r20
 924:	8a 95       	dec	r24
 926:	e2 f7       	brpl	.-8      	; 0x920 <__stack+0xc1>
 928:	ca 01       	movw	r24, r20
 92a:	81 70       	andi	r24, 0x01	; 1
 92c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 92e:	89 81       	ldd	r24, Y+1	; 0x01
 930:	88 23       	and	r24, r24
 932:	21 f4       	brne	.+8      	; 0x93c <__stack+0xdd>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 934:	ed 81       	ldd	r30, Y+5	; 0x05
 936:	fe 81       	ldd	r31, Y+6	; 0x06
 938:	10 82       	st	Z, r1
 93a:	42 c0       	rjmp	.+132    	; 0x9c0 <__stack+0x161>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 93c:	ed 81       	ldd	r30, Y+5	; 0x05
 93e:	fe 81       	ldd	r31, Y+6	; 0x06
 940:	81 e0       	ldi	r24, 0x01	; 1
 942:	80 83       	st	Z, r24
 944:	3d c0       	rjmp	.+122    	; 0x9c0 <__stack+0x161>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
 946:	e3 e3       	ldi	r30, 0x33	; 51
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	28 2f       	mov	r18, r24
 94e:	30 e0       	ldi	r19, 0x00	; 0
 950:	8c 81       	ldd	r24, Y+4	; 0x04
 952:	88 2f       	mov	r24, r24
 954:	90 e0       	ldi	r25, 0x00	; 0
 956:	a9 01       	movw	r20, r18
 958:	02 c0       	rjmp	.+4      	; 0x95e <__stack+0xff>
 95a:	55 95       	asr	r21
 95c:	47 95       	ror	r20
 95e:	8a 95       	dec	r24
 960:	e2 f7       	brpl	.-8      	; 0x95a <__stack+0xfb>
 962:	ca 01       	movw	r24, r20
 964:	81 70       	andi	r24, 0x01	; 1
 966:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 968:	89 81       	ldd	r24, Y+1	; 0x01
 96a:	88 23       	and	r24, r24
 96c:	21 f4       	brne	.+8      	; 0x976 <__stack+0x117>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 96e:	ed 81       	ldd	r30, Y+5	; 0x05
 970:	fe 81       	ldd	r31, Y+6	; 0x06
 972:	10 82       	st	Z, r1
 974:	25 c0       	rjmp	.+74     	; 0x9c0 <__stack+0x161>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 976:	ed 81       	ldd	r30, Y+5	; 0x05
 978:	fe 81       	ldd	r31, Y+6	; 0x06
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	80 83       	st	Z, r24
 97e:	20 c0       	rjmp	.+64     	; 0x9c0 <__stack+0x161>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
 980:	e0 e3       	ldi	r30, 0x30	; 48
 982:	f0 e0       	ldi	r31, 0x00	; 0
 984:	80 81       	ld	r24, Z
 986:	28 2f       	mov	r18, r24
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	8c 81       	ldd	r24, Y+4	; 0x04
 98c:	88 2f       	mov	r24, r24
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	a9 01       	movw	r20, r18
 992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x139>
 994:	55 95       	asr	r21
 996:	47 95       	ror	r20
 998:	8a 95       	dec	r24
 99a:	e2 f7       	brpl	.-8      	; 0x994 <__stack+0x135>
 99c:	ca 01       	movw	r24, r20
 99e:	81 70       	andi	r24, 0x01	; 1
 9a0:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
 9a2:	89 81       	ldd	r24, Y+1	; 0x01
 9a4:	88 23       	and	r24, r24
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <__stack+0x151>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
 9a8:	ed 81       	ldd	r30, Y+5	; 0x05
 9aa:	fe 81       	ldd	r31, Y+6	; 0x06
 9ac:	10 82       	st	Z, r1
 9ae:	08 c0       	rjmp	.+16     	; 0x9c0 <__stack+0x161>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
 9b0:	ed 81       	ldd	r30, Y+5	; 0x05
 9b2:	fe 81       	ldd	r31, Y+6	; 0x06
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	80 83       	st	Z, r24
 9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <__stack+0x161>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
 9ba:	1a 82       	std	Y+2, r1	; 0x02
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <__stack+0x161>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 9be:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
 9c0:	8a 81       	ldd	r24, Y+2	; 0x02
}
 9c2:	28 96       	adiw	r28, 0x08	; 8
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
 9ce:	cf 91       	pop	r28
 9d0:	df 91       	pop	r29
 9d2:	08 95       	ret

000009d4 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
 9d4:	df 93       	push	r29
 9d6:	cf 93       	push	r28
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	2d 97       	sbiw	r28, 0x0d	; 13
 9de:	0f b6       	in	r0, 0x3f	; 63
 9e0:	f8 94       	cli
 9e2:	de bf       	out	0x3e, r29	; 62
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	cd bf       	out	0x3d, r28	; 61
 9e8:	8a 83       	std	Y+2, r24	; 0x02
 9ea:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
 9f0:	8b 81       	ldd	r24, Y+3	; 0x03
 9f2:	88 23       	and	r24, r24
 9f4:	21 f0       	breq	.+8      	; 0x9fe <DIO_u8SetPortDirection+0x2a>
 9f6:	8b 81       	ldd	r24, Y+3	; 0x03
 9f8:	81 30       	cpi	r24, 0x01	; 1
 9fa:	09 f0       	breq	.+2      	; 0x9fe <DIO_u8SetPortDirection+0x2a>
 9fc:	82 c0       	rjmp	.+260    	; 0xb02 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
 9fe:	8a 81       	ldd	r24, Y+2	; 0x02
 a00:	28 2f       	mov	r18, r24
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	3d 87       	std	Y+13, r19	; 0x0d
 a06:	2c 87       	std	Y+12, r18	; 0x0c
 a08:	8c 85       	ldd	r24, Y+12	; 0x0c
 a0a:	9d 85       	ldd	r25, Y+13	; 0x0d
 a0c:	81 30       	cpi	r24, 0x01	; 1
 a0e:	91 05       	cpc	r25, r1
 a10:	71 f1       	breq	.+92     	; 0xa6e <DIO_u8SetPortDirection+0x9a>
 a12:	2c 85       	ldd	r18, Y+12	; 0x0c
 a14:	3d 85       	ldd	r19, Y+13	; 0x0d
 a16:	22 30       	cpi	r18, 0x02	; 2
 a18:	31 05       	cpc	r19, r1
 a1a:	2c f4       	brge	.+10     	; 0xa26 <DIO_u8SetPortDirection+0x52>
 a1c:	8c 85       	ldd	r24, Y+12	; 0x0c
 a1e:	9d 85       	ldd	r25, Y+13	; 0x0d
 a20:	00 97       	sbiw	r24, 0x00	; 0
 a22:	69 f0       	breq	.+26     	; 0xa3e <DIO_u8SetPortDirection+0x6a>
 a24:	6c c0       	rjmp	.+216    	; 0xafe <DIO_u8SetPortDirection+0x12a>
 a26:	2c 85       	ldd	r18, Y+12	; 0x0c
 a28:	3d 85       	ldd	r19, Y+13	; 0x0d
 a2a:	22 30       	cpi	r18, 0x02	; 2
 a2c:	31 05       	cpc	r19, r1
 a2e:	b9 f1       	breq	.+110    	; 0xa9e <DIO_u8SetPortDirection+0xca>
 a30:	8c 85       	ldd	r24, Y+12	; 0x0c
 a32:	9d 85       	ldd	r25, Y+13	; 0x0d
 a34:	83 30       	cpi	r24, 0x03	; 3
 a36:	91 05       	cpc	r25, r1
 a38:	09 f4       	brne	.+2      	; 0xa3c <DIO_u8SetPortDirection+0x68>
 a3a:	49 c0       	rjmp	.+146    	; 0xace <DIO_u8SetPortDirection+0xfa>
 a3c:	60 c0       	rjmp	.+192    	; 0xafe <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
 a3e:	8b 81       	ldd	r24, Y+3	; 0x03
 a40:	28 2f       	mov	r18, r24
 a42:	30 e0       	ldi	r19, 0x00	; 0
 a44:	3b 87       	std	Y+11, r19	; 0x0b
 a46:	2a 87       	std	Y+10, r18	; 0x0a
 a48:	8a 85       	ldd	r24, Y+10	; 0x0a
 a4a:	9b 85       	ldd	r25, Y+11	; 0x0b
 a4c:	00 97       	sbiw	r24, 0x00	; 0
 a4e:	31 f0       	breq	.+12     	; 0xa5c <DIO_u8SetPortDirection+0x88>
 a50:	2a 85       	ldd	r18, Y+10	; 0x0a
 a52:	3b 85       	ldd	r19, Y+11	; 0x0b
 a54:	21 30       	cpi	r18, 0x01	; 1
 a56:	31 05       	cpc	r19, r1
 a58:	29 f0       	breq	.+10     	; 0xa64 <DIO_u8SetPortDirection+0x90>
 a5a:	54 c0       	rjmp	.+168    	; 0xb04 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
 a5c:	ea e3       	ldi	r30, 0x3A	; 58
 a5e:	f0 e0       	ldi	r31, 0x00	; 0
 a60:	10 82       	st	Z, r1
 a62:	50 c0       	rjmp	.+160    	; 0xb04 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
 a64:	ea e3       	ldi	r30, 0x3A	; 58
 a66:	f0 e0       	ldi	r31, 0x00	; 0
 a68:	8f ef       	ldi	r24, 0xFF	; 255
 a6a:	80 83       	st	Z, r24
 a6c:	4b c0       	rjmp	.+150    	; 0xb04 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
 a6e:	8b 81       	ldd	r24, Y+3	; 0x03
 a70:	28 2f       	mov	r18, r24
 a72:	30 e0       	ldi	r19, 0x00	; 0
 a74:	39 87       	std	Y+9, r19	; 0x09
 a76:	28 87       	std	Y+8, r18	; 0x08
 a78:	88 85       	ldd	r24, Y+8	; 0x08
 a7a:	99 85       	ldd	r25, Y+9	; 0x09
 a7c:	00 97       	sbiw	r24, 0x00	; 0
 a7e:	31 f0       	breq	.+12     	; 0xa8c <DIO_u8SetPortDirection+0xb8>
 a80:	28 85       	ldd	r18, Y+8	; 0x08
 a82:	39 85       	ldd	r19, Y+9	; 0x09
 a84:	21 30       	cpi	r18, 0x01	; 1
 a86:	31 05       	cpc	r19, r1
 a88:	29 f0       	breq	.+10     	; 0xa94 <DIO_u8SetPortDirection+0xc0>
 a8a:	3c c0       	rjmp	.+120    	; 0xb04 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
 a8c:	e7 e3       	ldi	r30, 0x37	; 55
 a8e:	f0 e0       	ldi	r31, 0x00	; 0
 a90:	10 82       	st	Z, r1
 a92:	38 c0       	rjmp	.+112    	; 0xb04 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
 a94:	e7 e3       	ldi	r30, 0x37	; 55
 a96:	f0 e0       	ldi	r31, 0x00	; 0
 a98:	8f ef       	ldi	r24, 0xFF	; 255
 a9a:	80 83       	st	Z, r24
 a9c:	33 c0       	rjmp	.+102    	; 0xb04 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
 a9e:	8b 81       	ldd	r24, Y+3	; 0x03
 aa0:	28 2f       	mov	r18, r24
 aa2:	30 e0       	ldi	r19, 0x00	; 0
 aa4:	3f 83       	std	Y+7, r19	; 0x07
 aa6:	2e 83       	std	Y+6, r18	; 0x06
 aa8:	8e 81       	ldd	r24, Y+6	; 0x06
 aaa:	9f 81       	ldd	r25, Y+7	; 0x07
 aac:	00 97       	sbiw	r24, 0x00	; 0
 aae:	31 f0       	breq	.+12     	; 0xabc <DIO_u8SetPortDirection+0xe8>
 ab0:	2e 81       	ldd	r18, Y+6	; 0x06
 ab2:	3f 81       	ldd	r19, Y+7	; 0x07
 ab4:	21 30       	cpi	r18, 0x01	; 1
 ab6:	31 05       	cpc	r19, r1
 ab8:	29 f0       	breq	.+10     	; 0xac4 <DIO_u8SetPortDirection+0xf0>
 aba:	24 c0       	rjmp	.+72     	; 0xb04 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
 abc:	e4 e3       	ldi	r30, 0x34	; 52
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	10 82       	st	Z, r1
 ac2:	20 c0       	rjmp	.+64     	; 0xb04 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
 ac4:	e4 e3       	ldi	r30, 0x34	; 52
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	8f ef       	ldi	r24, 0xFF	; 255
 aca:	80 83       	st	Z, r24
 acc:	1b c0       	rjmp	.+54     	; 0xb04 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
 ace:	8b 81       	ldd	r24, Y+3	; 0x03
 ad0:	28 2f       	mov	r18, r24
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	3d 83       	std	Y+5, r19	; 0x05
 ad6:	2c 83       	std	Y+4, r18	; 0x04
 ad8:	8c 81       	ldd	r24, Y+4	; 0x04
 ada:	9d 81       	ldd	r25, Y+5	; 0x05
 adc:	00 97       	sbiw	r24, 0x00	; 0
 ade:	31 f0       	breq	.+12     	; 0xaec <DIO_u8SetPortDirection+0x118>
 ae0:	2c 81       	ldd	r18, Y+4	; 0x04
 ae2:	3d 81       	ldd	r19, Y+5	; 0x05
 ae4:	21 30       	cpi	r18, 0x01	; 1
 ae6:	31 05       	cpc	r19, r1
 ae8:	29 f0       	breq	.+10     	; 0xaf4 <DIO_u8SetPortDirection+0x120>
 aea:	0c c0       	rjmp	.+24     	; 0xb04 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
 aec:	e1 e3       	ldi	r30, 0x31	; 49
 aee:	f0 e0       	ldi	r31, 0x00	; 0
 af0:	10 82       	st	Z, r1
 af2:	08 c0       	rjmp	.+16     	; 0xb04 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
 af4:	e1 e3       	ldi	r30, 0x31	; 49
 af6:	f0 e0       	ldi	r31, 0x00	; 0
 af8:	8f ef       	ldi	r24, 0xFF	; 255
 afa:	80 83       	st	Z, r24
 afc:	03 c0       	rjmp	.+6      	; 0xb04 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
 afe:	19 82       	std	Y+1, r1	; 0x01
 b00:	01 c0       	rjmp	.+2      	; 0xb04 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 b02:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 b04:	89 81       	ldd	r24, Y+1	; 0x01
}
 b06:	2d 96       	adiw	r28, 0x0d	; 13
 b08:	0f b6       	in	r0, 0x3f	; 63
 b0a:	f8 94       	cli
 b0c:	de bf       	out	0x3e, r29	; 62
 b0e:	0f be       	out	0x3f, r0	; 63
 b10:	cd bf       	out	0x3d, r28	; 61
 b12:	cf 91       	pop	r28
 b14:	df 91       	pop	r29
 b16:	08 95       	ret

00000b18 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
 b18:	df 93       	push	r29
 b1a:	cf 93       	push	r28
 b1c:	00 d0       	rcall	.+0      	; 0xb1e <DIO_u8SetPortValue+0x6>
 b1e:	00 d0       	rcall	.+0      	; 0xb20 <DIO_u8SetPortValue+0x8>
 b20:	0f 92       	push	r0
 b22:	cd b7       	in	r28, 0x3d	; 61
 b24:	de b7       	in	r29, 0x3e	; 62
 b26:	8a 83       	std	Y+2, r24	; 0x02
 b28:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 b2a:	81 e0       	ldi	r24, 0x01	; 1
 b2c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
 b2e:	8a 81       	ldd	r24, Y+2	; 0x02
 b30:	28 2f       	mov	r18, r24
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	3d 83       	std	Y+5, r19	; 0x05
 b36:	2c 83       	std	Y+4, r18	; 0x04
 b38:	8c 81       	ldd	r24, Y+4	; 0x04
 b3a:	9d 81       	ldd	r25, Y+5	; 0x05
 b3c:	81 30       	cpi	r24, 0x01	; 1
 b3e:	91 05       	cpc	r25, r1
 b40:	d1 f0       	breq	.+52     	; 0xb76 <DIO_u8SetPortValue+0x5e>
 b42:	2c 81       	ldd	r18, Y+4	; 0x04
 b44:	3d 81       	ldd	r19, Y+5	; 0x05
 b46:	22 30       	cpi	r18, 0x02	; 2
 b48:	31 05       	cpc	r19, r1
 b4a:	2c f4       	brge	.+10     	; 0xb56 <DIO_u8SetPortValue+0x3e>
 b4c:	8c 81       	ldd	r24, Y+4	; 0x04
 b4e:	9d 81       	ldd	r25, Y+5	; 0x05
 b50:	00 97       	sbiw	r24, 0x00	; 0
 b52:	61 f0       	breq	.+24     	; 0xb6c <DIO_u8SetPortValue+0x54>
 b54:	1f c0       	rjmp	.+62     	; 0xb94 <DIO_u8SetPortValue+0x7c>
 b56:	2c 81       	ldd	r18, Y+4	; 0x04
 b58:	3d 81       	ldd	r19, Y+5	; 0x05
 b5a:	22 30       	cpi	r18, 0x02	; 2
 b5c:	31 05       	cpc	r19, r1
 b5e:	81 f0       	breq	.+32     	; 0xb80 <DIO_u8SetPortValue+0x68>
 b60:	8c 81       	ldd	r24, Y+4	; 0x04
 b62:	9d 81       	ldd	r25, Y+5	; 0x05
 b64:	83 30       	cpi	r24, 0x03	; 3
 b66:	91 05       	cpc	r25, r1
 b68:	81 f0       	breq	.+32     	; 0xb8a <DIO_u8SetPortValue+0x72>
 b6a:	14 c0       	rjmp	.+40     	; 0xb94 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
 b6c:	eb e3       	ldi	r30, 0x3B	; 59
 b6e:	f0 e0       	ldi	r31, 0x00	; 0
 b70:	8b 81       	ldd	r24, Y+3	; 0x03
 b72:	80 83       	st	Z, r24
 b74:	10 c0       	rjmp	.+32     	; 0xb96 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
 b76:	e8 e3       	ldi	r30, 0x38	; 56
 b78:	f0 e0       	ldi	r31, 0x00	; 0
 b7a:	8b 81       	ldd	r24, Y+3	; 0x03
 b7c:	80 83       	st	Z, r24
 b7e:	0b c0       	rjmp	.+22     	; 0xb96 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
 b80:	e5 e3       	ldi	r30, 0x35	; 53
 b82:	f0 e0       	ldi	r31, 0x00	; 0
 b84:	8b 81       	ldd	r24, Y+3	; 0x03
 b86:	80 83       	st	Z, r24
 b88:	06 c0       	rjmp	.+12     	; 0xb96 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
 b8a:	e2 e3       	ldi	r30, 0x32	; 50
 b8c:	f0 e0       	ldi	r31, 0x00	; 0
 b8e:	8b 81       	ldd	r24, Y+3	; 0x03
 b90:	80 83       	st	Z, r24
 b92:	01 c0       	rjmp	.+2      	; 0xb96 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
 b94:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 b96:	89 81       	ldd	r24, Y+1	; 0x01
}
 b98:	0f 90       	pop	r0
 b9a:	0f 90       	pop	r0
 b9c:	0f 90       	pop	r0
 b9e:	0f 90       	pop	r0
 ba0:	0f 90       	pop	r0
 ba2:	cf 91       	pop	r28
 ba4:	df 91       	pop	r29
 ba6:	08 95       	ret

00000ba8 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
 ba8:	df 93       	push	r29
 baa:	cf 93       	push	r28
 bac:	00 d0       	rcall	.+0      	; 0xbae <DIO_u8GetPortValue+0x6>
 bae:	00 d0       	rcall	.+0      	; 0xbb0 <DIO_u8GetPortValue+0x8>
 bb0:	00 d0       	rcall	.+0      	; 0xbb2 <DIO_u8GetPortValue+0xa>
 bb2:	cd b7       	in	r28, 0x3d	; 61
 bb4:	de b7       	in	r29, 0x3e	; 62
 bb6:	8a 83       	std	Y+2, r24	; 0x02
 bb8:	7c 83       	std	Y+4, r23	; 0x04
 bba:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
 bbc:	81 e0       	ldi	r24, 0x01	; 1
 bbe:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
 bc0:	8b 81       	ldd	r24, Y+3	; 0x03
 bc2:	9c 81       	ldd	r25, Y+4	; 0x04
 bc4:	00 97       	sbiw	r24, 0x00	; 0
 bc6:	e9 f1       	breq	.+122    	; 0xc42 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
 bc8:	8a 81       	ldd	r24, Y+2	; 0x02
 bca:	28 2f       	mov	r18, r24
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	3e 83       	std	Y+6, r19	; 0x06
 bd0:	2d 83       	std	Y+5, r18	; 0x05
 bd2:	8d 81       	ldd	r24, Y+5	; 0x05
 bd4:	9e 81       	ldd	r25, Y+6	; 0x06
 bd6:	81 30       	cpi	r24, 0x01	; 1
 bd8:	91 05       	cpc	r25, r1
 bda:	e1 f0       	breq	.+56     	; 0xc14 <DIO_u8GetPortValue+0x6c>
 bdc:	2d 81       	ldd	r18, Y+5	; 0x05
 bde:	3e 81       	ldd	r19, Y+6	; 0x06
 be0:	22 30       	cpi	r18, 0x02	; 2
 be2:	31 05       	cpc	r19, r1
 be4:	2c f4       	brge	.+10     	; 0xbf0 <DIO_u8GetPortValue+0x48>
 be6:	8d 81       	ldd	r24, Y+5	; 0x05
 be8:	9e 81       	ldd	r25, Y+6	; 0x06
 bea:	00 97       	sbiw	r24, 0x00	; 0
 bec:	61 f0       	breq	.+24     	; 0xc06 <DIO_u8GetPortValue+0x5e>
 bee:	27 c0       	rjmp	.+78     	; 0xc3e <DIO_u8GetPortValue+0x96>
 bf0:	2d 81       	ldd	r18, Y+5	; 0x05
 bf2:	3e 81       	ldd	r19, Y+6	; 0x06
 bf4:	22 30       	cpi	r18, 0x02	; 2
 bf6:	31 05       	cpc	r19, r1
 bf8:	a1 f0       	breq	.+40     	; 0xc22 <DIO_u8GetPortValue+0x7a>
 bfa:	8d 81       	ldd	r24, Y+5	; 0x05
 bfc:	9e 81       	ldd	r25, Y+6	; 0x06
 bfe:	83 30       	cpi	r24, 0x03	; 3
 c00:	91 05       	cpc	r25, r1
 c02:	b1 f0       	breq	.+44     	; 0xc30 <DIO_u8GetPortValue+0x88>
 c04:	1c c0       	rjmp	.+56     	; 0xc3e <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
 c06:	e9 e3       	ldi	r30, 0x39	; 57
 c08:	f0 e0       	ldi	r31, 0x00	; 0
 c0a:	80 81       	ld	r24, Z
 c0c:	eb 81       	ldd	r30, Y+3	; 0x03
 c0e:	fc 81       	ldd	r31, Y+4	; 0x04
 c10:	80 83       	st	Z, r24
 c12:	18 c0       	rjmp	.+48     	; 0xc44 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
 c14:	e6 e3       	ldi	r30, 0x36	; 54
 c16:	f0 e0       	ldi	r31, 0x00	; 0
 c18:	80 81       	ld	r24, Z
 c1a:	eb 81       	ldd	r30, Y+3	; 0x03
 c1c:	fc 81       	ldd	r31, Y+4	; 0x04
 c1e:	80 83       	st	Z, r24
 c20:	11 c0       	rjmp	.+34     	; 0xc44 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
 c22:	e3 e3       	ldi	r30, 0x33	; 51
 c24:	f0 e0       	ldi	r31, 0x00	; 0
 c26:	80 81       	ld	r24, Z
 c28:	eb 81       	ldd	r30, Y+3	; 0x03
 c2a:	fc 81       	ldd	r31, Y+4	; 0x04
 c2c:	80 83       	st	Z, r24
 c2e:	0a c0       	rjmp	.+20     	; 0xc44 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
 c30:	e0 e3       	ldi	r30, 0x30	; 48
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	80 81       	ld	r24, Z
 c36:	eb 81       	ldd	r30, Y+3	; 0x03
 c38:	fc 81       	ldd	r31, Y+4	; 0x04
 c3a:	80 83       	st	Z, r24
 c3c:	03 c0       	rjmp	.+6      	; 0xc44 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
 c3e:	19 82       	std	Y+1, r1	; 0x01
 c40:	01 c0       	rjmp	.+2      	; 0xc44 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
 c42:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
 c44:	89 81       	ldd	r24, Y+1	; 0x01
 c46:	26 96       	adiw	r28, 0x06	; 6
 c48:	0f b6       	in	r0, 0x3f	; 63
 c4a:	f8 94       	cli
 c4c:	de bf       	out	0x3e, r29	; 62
 c4e:	0f be       	out	0x3f, r0	; 63
 c50:	cd bf       	out	0x3d, r28	; 61
 c52:	cf 91       	pop	r28
 c54:	df 91       	pop	r29
 c56:	08 95       	ret

00000c58 <GI_voidEnableGI>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidEnableGI(void)
{
 c58:	df 93       	push	r29
 c5a:	cf 93       	push	r28
 c5c:	cd b7       	in	r28, 0x3d	; 61
 c5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
 c60:	af e5       	ldi	r26, 0x5F	; 95
 c62:	b0 e0       	ldi	r27, 0x00	; 0
 c64:	ef e5       	ldi	r30, 0x5F	; 95
 c66:	f0 e0       	ldi	r31, 0x00	; 0
 c68:	80 81       	ld	r24, Z
 c6a:	80 68       	ori	r24, 0x80	; 128
 c6c:	8c 93       	st	X, r24
}
 c6e:	cf 91       	pop	r28
 c70:	df 91       	pop	r29
 c72:	08 95       	ret

00000c74 <GI_voidDisableGI>:

void GI_voidDisableGI(void)
{
 c74:	df 93       	push	r29
 c76:	cf 93       	push	r28
 c78:	cd b7       	in	r28, 0x3d	; 61
 c7a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
 c7c:	af e5       	ldi	r26, 0x5F	; 95
 c7e:	b0 e0       	ldi	r27, 0x00	; 0
 c80:	ef e5       	ldi	r30, 0x5F	; 95
 c82:	f0 e0       	ldi	r31, 0x00	; 0
 c84:	80 81       	ld	r24, Z
 c86:	8f 77       	andi	r24, 0x7F	; 127
 c88:	8c 93       	st	X, r24
 c8a:	cf 91       	pop	r28
 c8c:	df 91       	pop	r29
 c8e:	08 95       	ret

00000c90 <main>:
static u16 App_u16DigitalValue = 0xffff;

void App_voidCallBack(u16 Copy_u16ADCValue);

int main(void)
{
 c90:	df 93       	push	r29
 c92:	cf 93       	push	r28
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62

	DIO_voidInit();
 c98:	0e 94 b5 01 	call	0x36a	; 0x36a <DIO_voidInit>
	GI_voidEnableGI();
 c9c:	0e 94 2c 06 	call	0xc58	; 0xc58 <GI_voidEnableGI>
	ADC_voidInit();
 ca0:	0e 94 49 00 	call	0x92	; 0x92 <ADC_voidInit>
	ADC_u8GetDigitalValueAsynch(ADC_u8_CHANNEL_0,&App_voidCallBack);
 ca4:	29 e5       	ldi	r18, 0x59	; 89
 ca6:	36 e0       	ldi	r19, 0x06	; 6
 ca8:	80 e0       	ldi	r24, 0x00	; 0
 caa:	b9 01       	movw	r22, r18
 cac:	0e 94 0f 01 	call	0x21e	; 0x21e <ADC_u8GetDigitalValueAsynch>
 cb0:	ff cf       	rjmp	.-2      	; 0xcb0 <main+0x20>

00000cb2 <App_voidCallBack>:

	}
	return 0;
}
void App_voidCallBack(u16 Copy_u16ADCValue)
{
 cb2:	df 93       	push	r29
 cb4:	cf 93       	push	r28
 cb6:	00 d0       	rcall	.+0      	; 0xcb8 <App_voidCallBack+0x6>
 cb8:	00 d0       	rcall	.+0      	; 0xcba <App_voidCallBack+0x8>
 cba:	cd b7       	in	r28, 0x3d	; 61
 cbc:	de b7       	in	r29, 0x3e	; 62
 cbe:	9c 83       	std	Y+4, r25	; 0x04
 cc0:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16AnalogValue;
	App_u16DigitalValue = Copy_u16ADCValue;
 cc2:	8b 81       	ldd	r24, Y+3	; 0x03
 cc4:	9c 81       	ldd	r25, Y+4	; 0x04
 cc6:	90 93 61 00 	sts	0x0061, r25
 cca:	80 93 60 00 	sts	0x0060, r24
	if(App_u16DigitalValue != 0xffff)
 cce:	80 91 60 00 	lds	r24, 0x0060
 cd2:	90 91 61 00 	lds	r25, 0x0061
 cd6:	2f ef       	ldi	r18, 0xFF	; 255
 cd8:	8f 3f       	cpi	r24, 0xFF	; 255
 cda:	92 07       	cpc	r25, r18
 cdc:	99 f1       	breq	.+102    	; 0xd44 <App_voidCallBack+0x92>
	{
		Local_u16AnalogValue = (u16)((App_u16DigitalValue * 5000UL) / 1024);
 cde:	80 91 60 00 	lds	r24, 0x0060
 ce2:	90 91 61 00 	lds	r25, 0x0061
 ce6:	cc 01       	movw	r24, r24
 ce8:	a0 e0       	ldi	r26, 0x00	; 0
 cea:	b0 e0       	ldi	r27, 0x00	; 0
 cec:	28 e8       	ldi	r18, 0x88	; 136
 cee:	33 e1       	ldi	r19, 0x13	; 19
 cf0:	40 e0       	ldi	r20, 0x00	; 0
 cf2:	50 e0       	ldi	r21, 0x00	; 0
 cf4:	bc 01       	movw	r22, r24
 cf6:	cd 01       	movw	r24, r26
 cf8:	0e 94 a9 06 	call	0xd52	; 0xd52 <__mulsi3>
 cfc:	dc 01       	movw	r26, r24
 cfe:	cb 01       	movw	r24, r22
 d00:	07 2e       	mov	r0, r23
 d02:	7a e0       	ldi	r23, 0x0A	; 10
 d04:	b6 95       	lsr	r27
 d06:	a7 95       	ror	r26
 d08:	97 95       	ror	r25
 d0a:	87 95       	ror	r24
 d0c:	7a 95       	dec	r23
 d0e:	d1 f7       	brne	.-12     	; 0xd04 <App_voidCallBack+0x52>
 d10:	70 2d       	mov	r23, r0
 d12:	9a 83       	std	Y+2, r25	; 0x02
 d14:	89 83       	std	Y+1, r24	; 0x01
		if(Local_u16AnalogValue < 3000)
 d16:	89 81       	ldd	r24, Y+1	; 0x01
 d18:	9a 81       	ldd	r25, Y+2	; 0x02
 d1a:	2b e0       	ldi	r18, 0x0B	; 11
 d1c:	88 3b       	cpi	r24, 0xB8	; 184
 d1e:	92 07       	cpc	r25, r18
 d20:	30 f4       	brcc	.+12     	; 0xd2e <App_voidCallBack+0x7c>
		{
			//Turn off Led
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
 d22:	81 e0       	ldi	r24, 0x01	; 1
 d24:	60 e0       	ldi	r22, 0x00	; 0
 d26:	40 e0       	ldi	r20, 0x00	; 0
 d28:	0e 94 00 03 	call	0x600	; 0x600 <DIO_u8SetPinValue>
 d2c:	05 c0       	rjmp	.+10     	; 0xd38 <App_voidCallBack+0x86>
		}
		else
		{
			//Turn on Led
			DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
 d2e:	81 e0       	ldi	r24, 0x01	; 1
 d30:	60 e0       	ldi	r22, 0x00	; 0
 d32:	41 e0       	ldi	r20, 0x01	; 1
 d34:	0e 94 00 03 	call	0x600	; 0x600 <DIO_u8SetPinValue>
		}
		App_u16DigitalValue = 0xffff;
 d38:	8f ef       	ldi	r24, 0xFF	; 255
 d3a:	9f ef       	ldi	r25, 0xFF	; 255
 d3c:	90 93 61 00 	sts	0x0061, r25
 d40:	80 93 60 00 	sts	0x0060, r24
	}

}
 d44:	0f 90       	pop	r0
 d46:	0f 90       	pop	r0
 d48:	0f 90       	pop	r0
 d4a:	0f 90       	pop	r0
 d4c:	cf 91       	pop	r28
 d4e:	df 91       	pop	r29
 d50:	08 95       	ret

00000d52 <__mulsi3>:
 d52:	62 9f       	mul	r22, r18
 d54:	d0 01       	movw	r26, r0
 d56:	73 9f       	mul	r23, r19
 d58:	f0 01       	movw	r30, r0
 d5a:	82 9f       	mul	r24, r18
 d5c:	e0 0d       	add	r30, r0
 d5e:	f1 1d       	adc	r31, r1
 d60:	64 9f       	mul	r22, r20
 d62:	e0 0d       	add	r30, r0
 d64:	f1 1d       	adc	r31, r1
 d66:	92 9f       	mul	r25, r18
 d68:	f0 0d       	add	r31, r0
 d6a:	83 9f       	mul	r24, r19
 d6c:	f0 0d       	add	r31, r0
 d6e:	74 9f       	mul	r23, r20
 d70:	f0 0d       	add	r31, r0
 d72:	65 9f       	mul	r22, r21
 d74:	f0 0d       	add	r31, r0
 d76:	99 27       	eor	r25, r25
 d78:	72 9f       	mul	r23, r18
 d7a:	b0 0d       	add	r27, r0
 d7c:	e1 1d       	adc	r30, r1
 d7e:	f9 1f       	adc	r31, r25
 d80:	63 9f       	mul	r22, r19
 d82:	b0 0d       	add	r27, r0
 d84:	e1 1d       	adc	r30, r1
 d86:	f9 1f       	adc	r31, r25
 d88:	bd 01       	movw	r22, r26
 d8a:	cf 01       	movw	r24, r30
 d8c:	11 24       	eor	r1, r1
 d8e:	08 95       	ret

00000d90 <_exit>:
 d90:	f8 94       	cli

00000d92 <__stop_program>:
 d92:	ff cf       	rjmp	.-2      	; 0xd92 <__stop_program>
