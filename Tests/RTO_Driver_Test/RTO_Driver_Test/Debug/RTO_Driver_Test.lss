
RTO_Driver_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001390  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002d  00800060  00800060  00001404  2**0
                  ALLOC
  2 .stab         00001d34  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001021  00000000  00000000  00003138  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__vector_6>
      1c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__vector_7>
      20:	0c 94 e4 07 	jmp	0xfc8	; 0xfc8 <__vector_8>
      24:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__vector_9>
      28:	0c 94 08 09 	jmp	0x1210	; 0x1210 <__vector_10>
      2c:	0c 94 bc 08 	jmp	0x1178	; 0x1178 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ad 38       	cpi	r26, 0x8D	; 141
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 4f 09 	call	0x129e	; 0x129e <main>
      74:	0c 94 c6 09 	jmp	0x138c	; 0x138c <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
      84:	ea e3       	ldi	r30, 0x3A	; 58
      86:	f0 e0       	ldi	r31, 0x00	; 0
      88:	87 e0       	ldi	r24, 0x07	; 7
      8a:	80 83       	st	Z, r24

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
      8c:	e7 e3       	ldi	r30, 0x37	; 55
      8e:	f0 e0       	ldi	r31, 0x00	; 0
      90:	10 82       	st	Z, r1

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
      92:	e4 e3       	ldi	r30, 0x34	; 52
      94:	f0 e0       	ldi	r31, 0x00	; 0
      96:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
      98:	e1 e3       	ldi	r30, 0x31	; 49
      9a:	f0 e0       	ldi	r31, 0x00	; 0
      9c:	10 82       	st	Z, r1


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
      9e:	eb e3       	ldi	r30, 0x3B	; 59
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
      a4:	e8 e3       	ldi	r30, 0x38	; 56
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
      aa:	e5 e3       	ldi	r30, 0x35	; 53
      ac:	f0 e0       	ldi	r31, 0x00	; 0
      ae:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
      b0:	e2 e3       	ldi	r30, 0x32	; 50
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	10 82       	st	Z, r1

}
      b6:	cf 91       	pop	r28
      b8:	df 91       	pop	r29
      ba:	08 95       	ret

000000bc <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
      bc:	df 93       	push	r29
      be:	cf 93       	push	r28
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
      c4:	2e 97       	sbiw	r28, 0x0e	; 14
      c6:	0f b6       	in	r0, 0x3f	; 63
      c8:	f8 94       	cli
      ca:	de bf       	out	0x3e, r29	; 62
      cc:	0f be       	out	0x3f, r0	; 63
      ce:	cd bf       	out	0x3d, r28	; 61
      d0:	8a 83       	std	Y+2, r24	; 0x02
      d2:	6b 83       	std	Y+3, r22	; 0x03
      d4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
      da:	8a 81       	ldd	r24, Y+2	; 0x02
      dc:	84 30       	cpi	r24, 0x04	; 4
      de:	08 f0       	brcs	.+2      	; 0xe2 <DIO_u8SetPinDirection+0x26>
      e0:	0d c1       	rjmp	.+538    	; 0x2fc <DIO_u8SetPinDirection+0x240>
      e2:	8b 81       	ldd	r24, Y+3	; 0x03
      e4:	88 30       	cpi	r24, 0x08	; 8
      e6:	08 f0       	brcs	.+2      	; 0xea <DIO_u8SetPinDirection+0x2e>
      e8:	09 c1       	rjmp	.+530    	; 0x2fc <DIO_u8SetPinDirection+0x240>
      ea:	8c 81       	ldd	r24, Y+4	; 0x04
      ec:	88 23       	and	r24, r24
      ee:	21 f0       	breq	.+8      	; 0xf8 <DIO_u8SetPinDirection+0x3c>
      f0:	8c 81       	ldd	r24, Y+4	; 0x04
      f2:	81 30       	cpi	r24, 0x01	; 1
      f4:	09 f0       	breq	.+2      	; 0xf8 <DIO_u8SetPinDirection+0x3c>
      f6:	02 c1       	rjmp	.+516    	; 0x2fc <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
      f8:	8a 81       	ldd	r24, Y+2	; 0x02
      fa:	28 2f       	mov	r18, r24
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	3e 87       	std	Y+14, r19	; 0x0e
     100:	2d 87       	std	Y+13, r18	; 0x0d
     102:	8d 85       	ldd	r24, Y+13	; 0x0d
     104:	9e 85       	ldd	r25, Y+14	; 0x0e
     106:	81 30       	cpi	r24, 0x01	; 1
     108:	91 05       	cpc	r25, r1
     10a:	09 f4       	brne	.+2      	; 0x10e <DIO_u8SetPinDirection+0x52>
     10c:	4f c0       	rjmp	.+158    	; 0x1ac <DIO_u8SetPinDirection+0xf0>
     10e:	2d 85       	ldd	r18, Y+13	; 0x0d
     110:	3e 85       	ldd	r19, Y+14	; 0x0e
     112:	22 30       	cpi	r18, 0x02	; 2
     114:	31 05       	cpc	r19, r1
     116:	2c f4       	brge	.+10     	; 0x122 <DIO_u8SetPinDirection+0x66>
     118:	8d 85       	ldd	r24, Y+13	; 0x0d
     11a:	9e 85       	ldd	r25, Y+14	; 0x0e
     11c:	00 97       	sbiw	r24, 0x00	; 0
     11e:	71 f0       	breq	.+28     	; 0x13c <DIO_u8SetPinDirection+0x80>
     120:	ee c0       	rjmp	.+476    	; 0x2fe <DIO_u8SetPinDirection+0x242>
     122:	2d 85       	ldd	r18, Y+13	; 0x0d
     124:	3e 85       	ldd	r19, Y+14	; 0x0e
     126:	22 30       	cpi	r18, 0x02	; 2
     128:	31 05       	cpc	r19, r1
     12a:	09 f4       	brne	.+2      	; 0x12e <DIO_u8SetPinDirection+0x72>
     12c:	77 c0       	rjmp	.+238    	; 0x21c <DIO_u8SetPinDirection+0x160>
     12e:	8d 85       	ldd	r24, Y+13	; 0x0d
     130:	9e 85       	ldd	r25, Y+14	; 0x0e
     132:	83 30       	cpi	r24, 0x03	; 3
     134:	91 05       	cpc	r25, r1
     136:	09 f4       	brne	.+2      	; 0x13a <DIO_u8SetPinDirection+0x7e>
     138:	a9 c0       	rjmp	.+338    	; 0x28c <DIO_u8SetPinDirection+0x1d0>
     13a:	e1 c0       	rjmp	.+450    	; 0x2fe <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     13c:	8b 81       	ldd	r24, Y+3	; 0x03
     13e:	28 2f       	mov	r18, r24
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	3c 87       	std	Y+12, r19	; 0x0c
     144:	2b 87       	std	Y+11, r18	; 0x0b
     146:	8b 85       	ldd	r24, Y+11	; 0x0b
     148:	9c 85       	ldd	r25, Y+12	; 0x0c
     14a:	00 97       	sbiw	r24, 0x00	; 0
     14c:	31 f0       	breq	.+12     	; 0x15a <DIO_u8SetPinDirection+0x9e>
     14e:	2b 85       	ldd	r18, Y+11	; 0x0b
     150:	3c 85       	ldd	r19, Y+12	; 0x0c
     152:	21 30       	cpi	r18, 0x01	; 1
     154:	31 05       	cpc	r19, r1
     156:	b1 f0       	breq	.+44     	; 0x184 <DIO_u8SetPinDirection+0xc8>
     158:	d2 c0       	rjmp	.+420    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     15a:	aa e3       	ldi	r26, 0x3A	; 58
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	ea e3       	ldi	r30, 0x3A	; 58
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	48 2f       	mov	r20, r24
     166:	8b 81       	ldd	r24, Y+3	; 0x03
     168:	28 2f       	mov	r18, r24
     16a:	30 e0       	ldi	r19, 0x00	; 0
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	02 2e       	mov	r0, r18
     172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_u8SetPinDirection+0xbc>
     174:	88 0f       	add	r24, r24
     176:	99 1f       	adc	r25, r25
     178:	0a 94       	dec	r0
     17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_u8SetPinDirection+0xb8>
     17c:	80 95       	com	r24
     17e:	84 23       	and	r24, r20
     180:	8c 93       	st	X, r24
     182:	bd c0       	rjmp	.+378    	; 0x2fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     184:	aa e3       	ldi	r26, 0x3A	; 58
     186:	b0 e0       	ldi	r27, 0x00	; 0
     188:	ea e3       	ldi	r30, 0x3A	; 58
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	80 81       	ld	r24, Z
     18e:	48 2f       	mov	r20, r24
     190:	8b 81       	ldd	r24, Y+3	; 0x03
     192:	28 2f       	mov	r18, r24
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	02 2e       	mov	r0, r18
     19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_u8SetPinDirection+0xe6>
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	0a 94       	dec	r0
     1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_u8SetPinDirection+0xe2>
     1a6:	84 2b       	or	r24, r20
     1a8:	8c 93       	st	X, r24
     1aa:	a9 c0       	rjmp	.+338    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     1ac:	8b 81       	ldd	r24, Y+3	; 0x03
     1ae:	28 2f       	mov	r18, r24
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	3a 87       	std	Y+10, r19	; 0x0a
     1b4:	29 87       	std	Y+9, r18	; 0x09
     1b6:	89 85       	ldd	r24, Y+9	; 0x09
     1b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ba:	00 97       	sbiw	r24, 0x00	; 0
     1bc:	31 f0       	breq	.+12     	; 0x1ca <DIO_u8SetPinDirection+0x10e>
     1be:	29 85       	ldd	r18, Y+9	; 0x09
     1c0:	3a 85       	ldd	r19, Y+10	; 0x0a
     1c2:	21 30       	cpi	r18, 0x01	; 1
     1c4:	31 05       	cpc	r19, r1
     1c6:	b1 f0       	breq	.+44     	; 0x1f4 <DIO_u8SetPinDirection+0x138>
     1c8:	9a c0       	rjmp	.+308    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     1ca:	a7 e3       	ldi	r26, 0x37	; 55
     1cc:	b0 e0       	ldi	r27, 0x00	; 0
     1ce:	e7 e3       	ldi	r30, 0x37	; 55
     1d0:	f0 e0       	ldi	r31, 0x00	; 0
     1d2:	80 81       	ld	r24, Z
     1d4:	48 2f       	mov	r20, r24
     1d6:	8b 81       	ldd	r24, Y+3	; 0x03
     1d8:	28 2f       	mov	r18, r24
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	02 2e       	mov	r0, r18
     1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_u8SetPinDirection+0x12c>
     1e4:	88 0f       	add	r24, r24
     1e6:	99 1f       	adc	r25, r25
     1e8:	0a 94       	dec	r0
     1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_u8SetPinDirection+0x128>
     1ec:	80 95       	com	r24
     1ee:	84 23       	and	r24, r20
     1f0:	8c 93       	st	X, r24
     1f2:	85 c0       	rjmp	.+266    	; 0x2fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     1f4:	a7 e3       	ldi	r26, 0x37	; 55
     1f6:	b0 e0       	ldi	r27, 0x00	; 0
     1f8:	e7 e3       	ldi	r30, 0x37	; 55
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	80 81       	ld	r24, Z
     1fe:	48 2f       	mov	r20, r24
     200:	8b 81       	ldd	r24, Y+3	; 0x03
     202:	28 2f       	mov	r18, r24
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	02 2e       	mov	r0, r18
     20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_u8SetPinDirection+0x156>
     20e:	88 0f       	add	r24, r24
     210:	99 1f       	adc	r25, r25
     212:	0a 94       	dec	r0
     214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_u8SetPinDirection+0x152>
     216:	84 2b       	or	r24, r20
     218:	8c 93       	st	X, r24
     21a:	71 c0       	rjmp	.+226    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	28 2f       	mov	r18, r24
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	38 87       	std	Y+8, r19	; 0x08
     224:	2f 83       	std	Y+7, r18	; 0x07
     226:	8f 81       	ldd	r24, Y+7	; 0x07
     228:	98 85       	ldd	r25, Y+8	; 0x08
     22a:	00 97       	sbiw	r24, 0x00	; 0
     22c:	31 f0       	breq	.+12     	; 0x23a <DIO_u8SetPinDirection+0x17e>
     22e:	2f 81       	ldd	r18, Y+7	; 0x07
     230:	38 85       	ldd	r19, Y+8	; 0x08
     232:	21 30       	cpi	r18, 0x01	; 1
     234:	31 05       	cpc	r19, r1
     236:	b1 f0       	breq	.+44     	; 0x264 <DIO_u8SetPinDirection+0x1a8>
     238:	62 c0       	rjmp	.+196    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     23a:	a4 e3       	ldi	r26, 0x34	; 52
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	e4 e3       	ldi	r30, 0x34	; 52
     240:	f0 e0       	ldi	r31, 0x00	; 0
     242:	80 81       	ld	r24, Z
     244:	48 2f       	mov	r20, r24
     246:	8b 81       	ldd	r24, Y+3	; 0x03
     248:	28 2f       	mov	r18, r24
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	81 e0       	ldi	r24, 0x01	; 1
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	02 2e       	mov	r0, r18
     252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_u8SetPinDirection+0x19c>
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	0a 94       	dec	r0
     25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_u8SetPinDirection+0x198>
     25c:	80 95       	com	r24
     25e:	84 23       	and	r24, r20
     260:	8c 93       	st	X, r24
     262:	4d c0       	rjmp	.+154    	; 0x2fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     264:	a4 e3       	ldi	r26, 0x34	; 52
     266:	b0 e0       	ldi	r27, 0x00	; 0
     268:	e4 e3       	ldi	r30, 0x34	; 52
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	48 2f       	mov	r20, r24
     270:	8b 81       	ldd	r24, Y+3	; 0x03
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	02 2e       	mov	r0, r18
     27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_u8SetPinDirection+0x1c6>
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	0a 94       	dec	r0
     284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_u8SetPinDirection+0x1c2>
     286:	84 2b       	or	r24, r20
     288:	8c 93       	st	X, r24
     28a:	39 c0       	rjmp	.+114    	; 0x2fe <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     28c:	8b 81       	ldd	r24, Y+3	; 0x03
     28e:	28 2f       	mov	r18, r24
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	3e 83       	std	Y+6, r19	; 0x06
     294:	2d 83       	std	Y+5, r18	; 0x05
     296:	8d 81       	ldd	r24, Y+5	; 0x05
     298:	9e 81       	ldd	r25, Y+6	; 0x06
     29a:	00 97       	sbiw	r24, 0x00	; 0
     29c:	31 f0       	breq	.+12     	; 0x2aa <DIO_u8SetPinDirection+0x1ee>
     29e:	2d 81       	ldd	r18, Y+5	; 0x05
     2a0:	3e 81       	ldd	r19, Y+6	; 0x06
     2a2:	21 30       	cpi	r18, 0x01	; 1
     2a4:	31 05       	cpc	r19, r1
     2a6:	b1 f0       	breq	.+44     	; 0x2d4 <DIO_u8SetPinDirection+0x218>
     2a8:	2a c0       	rjmp	.+84     	; 0x2fe <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     2aa:	a1 e3       	ldi	r26, 0x31	; 49
     2ac:	b0 e0       	ldi	r27, 0x00	; 0
     2ae:	e1 e3       	ldi	r30, 0x31	; 49
     2b0:	f0 e0       	ldi	r31, 0x00	; 0
     2b2:	80 81       	ld	r24, Z
     2b4:	48 2f       	mov	r20, r24
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	28 2f       	mov	r18, r24
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 2e       	mov	r0, r18
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8SetPinDirection+0x20c>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	0a 94       	dec	r0
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8SetPinDirection+0x208>
     2cc:	80 95       	com	r24
     2ce:	84 23       	and	r24, r20
     2d0:	8c 93       	st	X, r24
     2d2:	15 c0       	rjmp	.+42     	; 0x2fe <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     2d4:	a1 e3       	ldi	r26, 0x31	; 49
     2d6:	b0 e0       	ldi	r27, 0x00	; 0
     2d8:	e1 e3       	ldi	r30, 0x31	; 49
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	80 81       	ld	r24, Z
     2de:	48 2f       	mov	r20, r24
     2e0:	8b 81       	ldd	r24, Y+3	; 0x03
     2e2:	28 2f       	mov	r18, r24
     2e4:	30 e0       	ldi	r19, 0x00	; 0
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	02 2e       	mov	r0, r18
     2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_u8SetPinDirection+0x236>
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	0a 94       	dec	r0
     2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_u8SetPinDirection+0x232>
     2f6:	84 2b       	or	r24, r20
     2f8:	8c 93       	st	X, r24
     2fa:	01 c0       	rjmp	.+2      	; 0x2fe <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     2fc:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
}
     300:	2e 96       	adiw	r28, 0x0e	; 14
     302:	0f b6       	in	r0, 0x3f	; 63
     304:	f8 94       	cli
     306:	de bf       	out	0x3e, r29	; 62
     308:	0f be       	out	0x3f, r0	; 63
     30a:	cd bf       	out	0x3d, r28	; 61
     30c:	cf 91       	pop	r28
     30e:	df 91       	pop	r29
     310:	08 95       	ret

00000312 <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     312:	df 93       	push	r29
     314:	cf 93       	push	r28
     316:	cd b7       	in	r28, 0x3d	; 61
     318:	de b7       	in	r29, 0x3e	; 62
     31a:	2e 97       	sbiw	r28, 0x0e	; 14
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	f8 94       	cli
     320:	de bf       	out	0x3e, r29	; 62
     322:	0f be       	out	0x3f, r0	; 63
     324:	cd bf       	out	0x3d, r28	; 61
     326:	8a 83       	std	Y+2, r24	; 0x02
     328:	6b 83       	std	Y+3, r22	; 0x03
     32a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	88 30       	cpi	r24, 0x08	; 8
     334:	08 f0       	brcs	.+2      	; 0x338 <DIO_u8SetPinValue+0x26>
     336:	0c c1       	rjmp	.+536    	; 0x550 <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     338:	8a 81       	ldd	r24, Y+2	; 0x02
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	3e 87       	std	Y+14, r19	; 0x0e
     340:	2d 87       	std	Y+13, r18	; 0x0d
     342:	8d 85       	ldd	r24, Y+13	; 0x0d
     344:	9e 85       	ldd	r25, Y+14	; 0x0e
     346:	81 30       	cpi	r24, 0x01	; 1
     348:	91 05       	cpc	r25, r1
     34a:	09 f4       	brne	.+2      	; 0x34e <DIO_u8SetPinValue+0x3c>
     34c:	51 c0       	rjmp	.+162    	; 0x3f0 <DIO_u8SetPinValue+0xde>
     34e:	2d 85       	ldd	r18, Y+13	; 0x0d
     350:	3e 85       	ldd	r19, Y+14	; 0x0e
     352:	22 30       	cpi	r18, 0x02	; 2
     354:	31 05       	cpc	r19, r1
     356:	2c f4       	brge	.+10     	; 0x362 <DIO_u8SetPinValue+0x50>
     358:	8d 85       	ldd	r24, Y+13	; 0x0d
     35a:	9e 85       	ldd	r25, Y+14	; 0x0e
     35c:	00 97       	sbiw	r24, 0x00	; 0
     35e:	71 f0       	breq	.+28     	; 0x37c <DIO_u8SetPinValue+0x6a>
     360:	f5 c0       	rjmp	.+490    	; 0x54c <DIO_u8SetPinValue+0x23a>
     362:	2d 85       	ldd	r18, Y+13	; 0x0d
     364:	3e 85       	ldd	r19, Y+14	; 0x0e
     366:	22 30       	cpi	r18, 0x02	; 2
     368:	31 05       	cpc	r19, r1
     36a:	09 f4       	brne	.+2      	; 0x36e <DIO_u8SetPinValue+0x5c>
     36c:	7b c0       	rjmp	.+246    	; 0x464 <DIO_u8SetPinValue+0x152>
     36e:	8d 85       	ldd	r24, Y+13	; 0x0d
     370:	9e 85       	ldd	r25, Y+14	; 0x0e
     372:	83 30       	cpi	r24, 0x03	; 3
     374:	91 05       	cpc	r25, r1
     376:	09 f4       	brne	.+2      	; 0x37a <DIO_u8SetPinValue+0x68>
     378:	af c0       	rjmp	.+350    	; 0x4d8 <DIO_u8SetPinValue+0x1c6>
     37a:	e8 c0       	rjmp	.+464    	; 0x54c <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     37c:	8c 81       	ldd	r24, Y+4	; 0x04
     37e:	28 2f       	mov	r18, r24
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	3c 87       	std	Y+12, r19	; 0x0c
     384:	2b 87       	std	Y+11, r18	; 0x0b
     386:	8b 85       	ldd	r24, Y+11	; 0x0b
     388:	9c 85       	ldd	r25, Y+12	; 0x0c
     38a:	00 97       	sbiw	r24, 0x00	; 0
     38c:	31 f0       	breq	.+12     	; 0x39a <DIO_u8SetPinValue+0x88>
     38e:	2b 85       	ldd	r18, Y+11	; 0x0b
     390:	3c 85       	ldd	r19, Y+12	; 0x0c
     392:	21 30       	cpi	r18, 0x01	; 1
     394:	31 05       	cpc	r19, r1
     396:	b1 f0       	breq	.+44     	; 0x3c4 <DIO_u8SetPinValue+0xb2>
     398:	29 c0       	rjmp	.+82     	; 0x3ec <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     39a:	ab e3       	ldi	r26, 0x3B	; 59
     39c:	b0 e0       	ldi	r27, 0x00	; 0
     39e:	eb e3       	ldi	r30, 0x3B	; 59
     3a0:	f0 e0       	ldi	r31, 0x00	; 0
     3a2:	80 81       	ld	r24, Z
     3a4:	48 2f       	mov	r20, r24
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	28 2f       	mov	r18, r24
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	02 2e       	mov	r0, r18
     3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <DIO_u8SetPinValue+0xa6>
     3b4:	88 0f       	add	r24, r24
     3b6:	99 1f       	adc	r25, r25
     3b8:	0a 94       	dec	r0
     3ba:	e2 f7       	brpl	.-8      	; 0x3b4 <DIO_u8SetPinValue+0xa2>
     3bc:	80 95       	com	r24
     3be:	84 23       	and	r24, r20
     3c0:	8c 93       	st	X, r24
     3c2:	c7 c0       	rjmp	.+398    	; 0x552 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     3c4:	ab e3       	ldi	r26, 0x3B	; 59
     3c6:	b0 e0       	ldi	r27, 0x00	; 0
     3c8:	eb e3       	ldi	r30, 0x3B	; 59
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	48 2f       	mov	r20, r24
     3d0:	8b 81       	ldd	r24, Y+3	; 0x03
     3d2:	28 2f       	mov	r18, r24
     3d4:	30 e0       	ldi	r19, 0x00	; 0
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	02 2e       	mov	r0, r18
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <DIO_u8SetPinValue+0xd0>
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	0a 94       	dec	r0
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <DIO_u8SetPinValue+0xcc>
     3e6:	84 2b       	or	r24, r20
     3e8:	8c 93       	st	X, r24
     3ea:	b3 c0       	rjmp	.+358    	; 0x552 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     3ec:	19 82       	std	Y+1, r1	; 0x01
     3ee:	b1 c0       	rjmp	.+354    	; 0x552 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
     3f0:	8c 81       	ldd	r24, Y+4	; 0x04
     3f2:	28 2f       	mov	r18, r24
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	3a 87       	std	Y+10, r19	; 0x0a
     3f8:	29 87       	std	Y+9, r18	; 0x09
     3fa:	89 85       	ldd	r24, Y+9	; 0x09
     3fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     3fe:	00 97       	sbiw	r24, 0x00	; 0
     400:	31 f0       	breq	.+12     	; 0x40e <DIO_u8SetPinValue+0xfc>
     402:	29 85       	ldd	r18, Y+9	; 0x09
     404:	3a 85       	ldd	r19, Y+10	; 0x0a
     406:	21 30       	cpi	r18, 0x01	; 1
     408:	31 05       	cpc	r19, r1
     40a:	b1 f0       	breq	.+44     	; 0x438 <DIO_u8SetPinValue+0x126>
     40c:	29 c0       	rjmp	.+82     	; 0x460 <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     40e:	a8 e3       	ldi	r26, 0x38	; 56
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	e8 e3       	ldi	r30, 0x38	; 56
     414:	f0 e0       	ldi	r31, 0x00	; 0
     416:	80 81       	ld	r24, Z
     418:	48 2f       	mov	r20, r24
     41a:	8b 81       	ldd	r24, Y+3	; 0x03
     41c:	28 2f       	mov	r18, r24
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	81 e0       	ldi	r24, 0x01	; 1
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	02 2e       	mov	r0, r18
     426:	02 c0       	rjmp	.+4      	; 0x42c <DIO_u8SetPinValue+0x11a>
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	0a 94       	dec	r0
     42e:	e2 f7       	brpl	.-8      	; 0x428 <DIO_u8SetPinValue+0x116>
     430:	80 95       	com	r24
     432:	84 23       	and	r24, r20
     434:	8c 93       	st	X, r24
     436:	8d c0       	rjmp	.+282    	; 0x552 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     438:	a8 e3       	ldi	r26, 0x38	; 56
     43a:	b0 e0       	ldi	r27, 0x00	; 0
     43c:	e8 e3       	ldi	r30, 0x38	; 56
     43e:	f0 e0       	ldi	r31, 0x00	; 0
     440:	80 81       	ld	r24, Z
     442:	48 2f       	mov	r20, r24
     444:	8b 81       	ldd	r24, Y+3	; 0x03
     446:	28 2f       	mov	r18, r24
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	02 2e       	mov	r0, r18
     450:	02 c0       	rjmp	.+4      	; 0x456 <DIO_u8SetPinValue+0x144>
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	0a 94       	dec	r0
     458:	e2 f7       	brpl	.-8      	; 0x452 <DIO_u8SetPinValue+0x140>
     45a:	84 2b       	or	r24, r20
     45c:	8c 93       	st	X, r24
     45e:	79 c0       	rjmp	.+242    	; 0x552 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     460:	19 82       	std	Y+1, r1	; 0x01
     462:	77 c0       	rjmp	.+238    	; 0x552 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
     464:	8c 81       	ldd	r24, Y+4	; 0x04
     466:	28 2f       	mov	r18, r24
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	38 87       	std	Y+8, r19	; 0x08
     46c:	2f 83       	std	Y+7, r18	; 0x07
     46e:	8f 81       	ldd	r24, Y+7	; 0x07
     470:	98 85       	ldd	r25, Y+8	; 0x08
     472:	00 97       	sbiw	r24, 0x00	; 0
     474:	31 f0       	breq	.+12     	; 0x482 <DIO_u8SetPinValue+0x170>
     476:	2f 81       	ldd	r18, Y+7	; 0x07
     478:	38 85       	ldd	r19, Y+8	; 0x08
     47a:	21 30       	cpi	r18, 0x01	; 1
     47c:	31 05       	cpc	r19, r1
     47e:	b1 f0       	breq	.+44     	; 0x4ac <DIO_u8SetPinValue+0x19a>
     480:	29 c0       	rjmp	.+82     	; 0x4d4 <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     482:	a5 e3       	ldi	r26, 0x35	; 53
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e5 e3       	ldi	r30, 0x35	; 53
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	48 2f       	mov	r20, r24
     48e:	8b 81       	ldd	r24, Y+3	; 0x03
     490:	28 2f       	mov	r18, r24
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	02 2e       	mov	r0, r18
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_u8SetPinValue+0x18e>
     49c:	88 0f       	add	r24, r24
     49e:	99 1f       	adc	r25, r25
     4a0:	0a 94       	dec	r0
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_u8SetPinValue+0x18a>
     4a4:	80 95       	com	r24
     4a6:	84 23       	and	r24, r20
     4a8:	8c 93       	st	X, r24
     4aa:	53 c0       	rjmp	.+166    	; 0x552 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     4ac:	a5 e3       	ldi	r26, 0x35	; 53
     4ae:	b0 e0       	ldi	r27, 0x00	; 0
     4b0:	e5 e3       	ldi	r30, 0x35	; 53
     4b2:	f0 e0       	ldi	r31, 0x00	; 0
     4b4:	80 81       	ld	r24, Z
     4b6:	48 2f       	mov	r20, r24
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	28 2f       	mov	r18, r24
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	02 2e       	mov	r0, r18
     4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_u8SetPinValue+0x1b8>
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	0a 94       	dec	r0
     4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_u8SetPinValue+0x1b4>
     4ce:	84 2b       	or	r24, r20
     4d0:	8c 93       	st	X, r24
     4d2:	3f c0       	rjmp	.+126    	; 0x552 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     4d4:	19 82       	std	Y+1, r1	; 0x01
     4d6:	3d c0       	rjmp	.+122    	; 0x552 <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
     4d8:	8c 81       	ldd	r24, Y+4	; 0x04
     4da:	28 2f       	mov	r18, r24
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	3e 83       	std	Y+6, r19	; 0x06
     4e0:	2d 83       	std	Y+5, r18	; 0x05
     4e2:	8d 81       	ldd	r24, Y+5	; 0x05
     4e4:	9e 81       	ldd	r25, Y+6	; 0x06
     4e6:	00 97       	sbiw	r24, 0x00	; 0
     4e8:	31 f0       	breq	.+12     	; 0x4f6 <DIO_u8SetPinValue+0x1e4>
     4ea:	2d 81       	ldd	r18, Y+5	; 0x05
     4ec:	3e 81       	ldd	r19, Y+6	; 0x06
     4ee:	21 30       	cpi	r18, 0x01	; 1
     4f0:	31 05       	cpc	r19, r1
     4f2:	b1 f0       	breq	.+44     	; 0x520 <DIO_u8SetPinValue+0x20e>
     4f4:	29 c0       	rjmp	.+82     	; 0x548 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     4f6:	a2 e3       	ldi	r26, 0x32	; 50
     4f8:	b0 e0       	ldi	r27, 0x00	; 0
     4fa:	e2 e3       	ldi	r30, 0x32	; 50
     4fc:	f0 e0       	ldi	r31, 0x00	; 0
     4fe:	80 81       	ld	r24, Z
     500:	48 2f       	mov	r20, r24
     502:	8b 81       	ldd	r24, Y+3	; 0x03
     504:	28 2f       	mov	r18, r24
     506:	30 e0       	ldi	r19, 0x00	; 0
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	02 2e       	mov	r0, r18
     50e:	02 c0       	rjmp	.+4      	; 0x514 <DIO_u8SetPinValue+0x202>
     510:	88 0f       	add	r24, r24
     512:	99 1f       	adc	r25, r25
     514:	0a 94       	dec	r0
     516:	e2 f7       	brpl	.-8      	; 0x510 <DIO_u8SetPinValue+0x1fe>
     518:	80 95       	com	r24
     51a:	84 23       	and	r24, r20
     51c:	8c 93       	st	X, r24
     51e:	19 c0       	rjmp	.+50     	; 0x552 <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     520:	a2 e3       	ldi	r26, 0x32	; 50
     522:	b0 e0       	ldi	r27, 0x00	; 0
     524:	e2 e3       	ldi	r30, 0x32	; 50
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	48 2f       	mov	r20, r24
     52c:	8b 81       	ldd	r24, Y+3	; 0x03
     52e:	28 2f       	mov	r18, r24
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	02 2e       	mov	r0, r18
     538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_u8SetPinValue+0x22c>
     53a:	88 0f       	add	r24, r24
     53c:	99 1f       	adc	r25, r25
     53e:	0a 94       	dec	r0
     540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_u8SetPinValue+0x228>
     542:	84 2b       	or	r24, r20
     544:	8c 93       	st	X, r24
     546:	05 c0       	rjmp	.+10     	; 0x552 <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     548:	19 82       	std	Y+1, r1	; 0x01
     54a:	03 c0       	rjmp	.+6      	; 0x552 <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     54c:	19 82       	std	Y+1, r1	; 0x01
     54e:	01 c0       	rjmp	.+2      	; 0x552 <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     550:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     552:	89 81       	ldd	r24, Y+1	; 0x01
}
     554:	2e 96       	adiw	r28, 0x0e	; 14
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	cf 91       	pop	r28
     562:	df 91       	pop	r29
     564:	08 95       	ret

00000566 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
     566:	df 93       	push	r29
     568:	cf 93       	push	r28
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	28 97       	sbiw	r28, 0x08	; 8
     570:	0f b6       	in	r0, 0x3f	; 63
     572:	f8 94       	cli
     574:	de bf       	out	0x3e, r29	; 62
     576:	0f be       	out	0x3f, r0	; 63
     578:	cd bf       	out	0x3d, r28	; 61
     57a:	8b 83       	std	Y+3, r24	; 0x03
     57c:	6c 83       	std	Y+4, r22	; 0x04
     57e:	5e 83       	std	Y+6, r21	; 0x06
     580:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
     586:	8b 81       	ldd	r24, Y+3	; 0x03
     588:	84 30       	cpi	r24, 0x04	; 4
     58a:	08 f0       	brcs	.+2      	; 0x58e <DIO_u8GetPinValue+0x28>
     58c:	a1 c0       	rjmp	.+322    	; 0x6d0 <DIO_u8GetPinValue+0x16a>
     58e:	8c 81       	ldd	r24, Y+4	; 0x04
     590:	88 30       	cpi	r24, 0x08	; 8
     592:	08 f0       	brcs	.+2      	; 0x596 <DIO_u8GetPinValue+0x30>
     594:	9d c0       	rjmp	.+314    	; 0x6d0 <DIO_u8GetPinValue+0x16a>
     596:	8d 81       	ldd	r24, Y+5	; 0x05
     598:	9e 81       	ldd	r25, Y+6	; 0x06
     59a:	00 97       	sbiw	r24, 0x00	; 0
     59c:	09 f4       	brne	.+2      	; 0x5a0 <DIO_u8GetPinValue+0x3a>
     59e:	98 c0       	rjmp	.+304    	; 0x6d0 <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
     5a0:	8b 81       	ldd	r24, Y+3	; 0x03
     5a2:	28 2f       	mov	r18, r24
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	38 87       	std	Y+8, r19	; 0x08
     5a8:	2f 83       	std	Y+7, r18	; 0x07
     5aa:	4f 81       	ldd	r20, Y+7	; 0x07
     5ac:	58 85       	ldd	r21, Y+8	; 0x08
     5ae:	41 30       	cpi	r20, 0x01	; 1
     5b0:	51 05       	cpc	r21, r1
     5b2:	a9 f1       	breq	.+106    	; 0x61e <DIO_u8GetPinValue+0xb8>
     5b4:	8f 81       	ldd	r24, Y+7	; 0x07
     5b6:	98 85       	ldd	r25, Y+8	; 0x08
     5b8:	82 30       	cpi	r24, 0x02	; 2
     5ba:	91 05       	cpc	r25, r1
     5bc:	34 f4       	brge	.+12     	; 0x5ca <DIO_u8GetPinValue+0x64>
     5be:	2f 81       	ldd	r18, Y+7	; 0x07
     5c0:	38 85       	ldd	r19, Y+8	; 0x08
     5c2:	21 15       	cp	r18, r1
     5c4:	31 05       	cpc	r19, r1
     5c6:	71 f0       	breq	.+28     	; 0x5e4 <DIO_u8GetPinValue+0x7e>
     5c8:	81 c0       	rjmp	.+258    	; 0x6cc <DIO_u8GetPinValue+0x166>
     5ca:	4f 81       	ldd	r20, Y+7	; 0x07
     5cc:	58 85       	ldd	r21, Y+8	; 0x08
     5ce:	42 30       	cpi	r20, 0x02	; 2
     5d0:	51 05       	cpc	r21, r1
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <DIO_u8GetPinValue+0x70>
     5d4:	41 c0       	rjmp	.+130    	; 0x658 <DIO_u8GetPinValue+0xf2>
     5d6:	8f 81       	ldd	r24, Y+7	; 0x07
     5d8:	98 85       	ldd	r25, Y+8	; 0x08
     5da:	83 30       	cpi	r24, 0x03	; 3
     5dc:	91 05       	cpc	r25, r1
     5de:	09 f4       	brne	.+2      	; 0x5e2 <DIO_u8GetPinValue+0x7c>
     5e0:	58 c0       	rjmp	.+176    	; 0x692 <DIO_u8GetPinValue+0x12c>
     5e2:	74 c0       	rjmp	.+232    	; 0x6cc <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
     5e4:	e9 e3       	ldi	r30, 0x39	; 57
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	80 81       	ld	r24, Z
     5ea:	28 2f       	mov	r18, r24
     5ec:	30 e0       	ldi	r19, 0x00	; 0
     5ee:	8c 81       	ldd	r24, Y+4	; 0x04
     5f0:	88 2f       	mov	r24, r24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	a9 01       	movw	r20, r18
     5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_u8GetPinValue+0x96>
     5f8:	55 95       	asr	r21
     5fa:	47 95       	ror	r20
     5fc:	8a 95       	dec	r24
     5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_u8GetPinValue+0x92>
     600:	ca 01       	movw	r24, r20
     602:	81 70       	andi	r24, 0x01	; 1
     604:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     606:	89 81       	ldd	r24, Y+1	; 0x01
     608:	88 23       	and	r24, r24
     60a:	21 f4       	brne	.+8      	; 0x614 <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     60c:	ed 81       	ldd	r30, Y+5	; 0x05
     60e:	fe 81       	ldd	r31, Y+6	; 0x06
     610:	10 82       	st	Z, r1
     612:	5f c0       	rjmp	.+190    	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     614:	ed 81       	ldd	r30, Y+5	; 0x05
     616:	fe 81       	ldd	r31, Y+6	; 0x06
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	80 83       	st	Z, r24
     61c:	5a c0       	rjmp	.+180    	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
     61e:	e6 e3       	ldi	r30, 0x36	; 54
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	80 81       	ld	r24, Z
     624:	28 2f       	mov	r18, r24
     626:	30 e0       	ldi	r19, 0x00	; 0
     628:	8c 81       	ldd	r24, Y+4	; 0x04
     62a:	88 2f       	mov	r24, r24
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	a9 01       	movw	r20, r18
     630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_u8GetPinValue+0xd0>
     632:	55 95       	asr	r21
     634:	47 95       	ror	r20
     636:	8a 95       	dec	r24
     638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_u8GetPinValue+0xcc>
     63a:	ca 01       	movw	r24, r20
     63c:	81 70       	andi	r24, 0x01	; 1
     63e:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     640:	89 81       	ldd	r24, Y+1	; 0x01
     642:	88 23       	and	r24, r24
     644:	21 f4       	brne	.+8      	; 0x64e <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     646:	ed 81       	ldd	r30, Y+5	; 0x05
     648:	fe 81       	ldd	r31, Y+6	; 0x06
     64a:	10 82       	st	Z, r1
     64c:	42 c0       	rjmp	.+132    	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     64e:	ed 81       	ldd	r30, Y+5	; 0x05
     650:	fe 81       	ldd	r31, Y+6	; 0x06
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	80 83       	st	Z, r24
     656:	3d c0       	rjmp	.+122    	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
     658:	e3 e3       	ldi	r30, 0x33	; 51
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	28 2f       	mov	r18, r24
     660:	30 e0       	ldi	r19, 0x00	; 0
     662:	8c 81       	ldd	r24, Y+4	; 0x04
     664:	88 2f       	mov	r24, r24
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	a9 01       	movw	r20, r18
     66a:	02 c0       	rjmp	.+4      	; 0x670 <DIO_u8GetPinValue+0x10a>
     66c:	55 95       	asr	r21
     66e:	47 95       	ror	r20
     670:	8a 95       	dec	r24
     672:	e2 f7       	brpl	.-8      	; 0x66c <DIO_u8GetPinValue+0x106>
     674:	ca 01       	movw	r24, r20
     676:	81 70       	andi	r24, 0x01	; 1
     678:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     67a:	89 81       	ldd	r24, Y+1	; 0x01
     67c:	88 23       	and	r24, r24
     67e:	21 f4       	brne	.+8      	; 0x688 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     680:	ed 81       	ldd	r30, Y+5	; 0x05
     682:	fe 81       	ldd	r31, Y+6	; 0x06
     684:	10 82       	st	Z, r1
     686:	25 c0       	rjmp	.+74     	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     688:	ed 81       	ldd	r30, Y+5	; 0x05
     68a:	fe 81       	ldd	r31, Y+6	; 0x06
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	80 83       	st	Z, r24
     690:	20 c0       	rjmp	.+64     	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
     692:	e0 e3       	ldi	r30, 0x30	; 48
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	28 2f       	mov	r18, r24
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	8c 81       	ldd	r24, Y+4	; 0x04
     69e:	88 2f       	mov	r24, r24
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	a9 01       	movw	r20, r18
     6a4:	02 c0       	rjmp	.+4      	; 0x6aa <DIO_u8GetPinValue+0x144>
     6a6:	55 95       	asr	r21
     6a8:	47 95       	ror	r20
     6aa:	8a 95       	dec	r24
     6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <DIO_u8GetPinValue+0x140>
     6ae:	ca 01       	movw	r24, r20
     6b0:	81 70       	andi	r24, 0x01	; 1
     6b2:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	88 23       	and	r24, r24
     6b8:	21 f4       	brne	.+8      	; 0x6c2 <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
     6ba:	ed 81       	ldd	r30, Y+5	; 0x05
     6bc:	fe 81       	ldd	r31, Y+6	; 0x06
     6be:	10 82       	st	Z, r1
     6c0:	08 c0       	rjmp	.+16     	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
     6c2:	ed 81       	ldd	r30, Y+5	; 0x05
     6c4:	fe 81       	ldd	r31, Y+6	; 0x06
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	80 83       	st	Z, r24
     6ca:	03 c0       	rjmp	.+6      	; 0x6d2 <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
     6cc:	1a 82       	std	Y+2, r1	; 0x02
     6ce:	01 c0       	rjmp	.+2      	; 0x6d2 <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     6d0:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
     6d4:	28 96       	adiw	r28, 0x08	; 8
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
     6e0:	cf 91       	pop	r28
     6e2:	df 91       	pop	r29
     6e4:	08 95       	ret

000006e6 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
     6e6:	df 93       	push	r29
     6e8:	cf 93       	push	r28
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	2d 97       	sbiw	r28, 0x0d	; 13
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	f8 94       	cli
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	0f be       	out	0x3f, r0	; 63
     6f8:	cd bf       	out	0x3d, r28	; 61
     6fa:	8a 83       	std	Y+2, r24	; 0x02
     6fc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	88 23       	and	r24, r24
     706:	21 f0       	breq	.+8      	; 0x710 <DIO_u8SetPortDirection+0x2a>
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	81 30       	cpi	r24, 0x01	; 1
     70c:	09 f0       	breq	.+2      	; 0x710 <DIO_u8SetPortDirection+0x2a>
     70e:	82 c0       	rjmp	.+260    	; 0x814 <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
     710:	8a 81       	ldd	r24, Y+2	; 0x02
     712:	28 2f       	mov	r18, r24
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	3d 87       	std	Y+13, r19	; 0x0d
     718:	2c 87       	std	Y+12, r18	; 0x0c
     71a:	8c 85       	ldd	r24, Y+12	; 0x0c
     71c:	9d 85       	ldd	r25, Y+13	; 0x0d
     71e:	81 30       	cpi	r24, 0x01	; 1
     720:	91 05       	cpc	r25, r1
     722:	71 f1       	breq	.+92     	; 0x780 <DIO_u8SetPortDirection+0x9a>
     724:	2c 85       	ldd	r18, Y+12	; 0x0c
     726:	3d 85       	ldd	r19, Y+13	; 0x0d
     728:	22 30       	cpi	r18, 0x02	; 2
     72a:	31 05       	cpc	r19, r1
     72c:	2c f4       	brge	.+10     	; 0x738 <DIO_u8SetPortDirection+0x52>
     72e:	8c 85       	ldd	r24, Y+12	; 0x0c
     730:	9d 85       	ldd	r25, Y+13	; 0x0d
     732:	00 97       	sbiw	r24, 0x00	; 0
     734:	69 f0       	breq	.+26     	; 0x750 <DIO_u8SetPortDirection+0x6a>
     736:	6c c0       	rjmp	.+216    	; 0x810 <DIO_u8SetPortDirection+0x12a>
     738:	2c 85       	ldd	r18, Y+12	; 0x0c
     73a:	3d 85       	ldd	r19, Y+13	; 0x0d
     73c:	22 30       	cpi	r18, 0x02	; 2
     73e:	31 05       	cpc	r19, r1
     740:	b9 f1       	breq	.+110    	; 0x7b0 <DIO_u8SetPortDirection+0xca>
     742:	8c 85       	ldd	r24, Y+12	; 0x0c
     744:	9d 85       	ldd	r25, Y+13	; 0x0d
     746:	83 30       	cpi	r24, 0x03	; 3
     748:	91 05       	cpc	r25, r1
     74a:	09 f4       	brne	.+2      	; 0x74e <DIO_u8SetPortDirection+0x68>
     74c:	49 c0       	rjmp	.+146    	; 0x7e0 <DIO_u8SetPortDirection+0xfa>
     74e:	60 c0       	rjmp	.+192    	; 0x810 <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	28 2f       	mov	r18, r24
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	3b 87       	std	Y+11, r19	; 0x0b
     758:	2a 87       	std	Y+10, r18	; 0x0a
     75a:	8a 85       	ldd	r24, Y+10	; 0x0a
     75c:	9b 85       	ldd	r25, Y+11	; 0x0b
     75e:	00 97       	sbiw	r24, 0x00	; 0
     760:	31 f0       	breq	.+12     	; 0x76e <DIO_u8SetPortDirection+0x88>
     762:	2a 85       	ldd	r18, Y+10	; 0x0a
     764:	3b 85       	ldd	r19, Y+11	; 0x0b
     766:	21 30       	cpi	r18, 0x01	; 1
     768:	31 05       	cpc	r19, r1
     76a:	29 f0       	breq	.+10     	; 0x776 <DIO_u8SetPortDirection+0x90>
     76c:	54 c0       	rjmp	.+168    	; 0x816 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
     76e:	ea e3       	ldi	r30, 0x3A	; 58
     770:	f0 e0       	ldi	r31, 0x00	; 0
     772:	10 82       	st	Z, r1
     774:	50 c0       	rjmp	.+160    	; 0x816 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
     776:	ea e3       	ldi	r30, 0x3A	; 58
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	8f ef       	ldi	r24, 0xFF	; 255
     77c:	80 83       	st	Z, r24
     77e:	4b c0       	rjmp	.+150    	; 0x816 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	28 2f       	mov	r18, r24
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	39 87       	std	Y+9, r19	; 0x09
     788:	28 87       	std	Y+8, r18	; 0x08
     78a:	88 85       	ldd	r24, Y+8	; 0x08
     78c:	99 85       	ldd	r25, Y+9	; 0x09
     78e:	00 97       	sbiw	r24, 0x00	; 0
     790:	31 f0       	breq	.+12     	; 0x79e <DIO_u8SetPortDirection+0xb8>
     792:	28 85       	ldd	r18, Y+8	; 0x08
     794:	39 85       	ldd	r19, Y+9	; 0x09
     796:	21 30       	cpi	r18, 0x01	; 1
     798:	31 05       	cpc	r19, r1
     79a:	29 f0       	breq	.+10     	; 0x7a6 <DIO_u8SetPortDirection+0xc0>
     79c:	3c c0       	rjmp	.+120    	; 0x816 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
     79e:	e7 e3       	ldi	r30, 0x37	; 55
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	10 82       	st	Z, r1
     7a4:	38 c0       	rjmp	.+112    	; 0x816 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
     7a6:	e7 e3       	ldi	r30, 0x37	; 55
     7a8:	f0 e0       	ldi	r31, 0x00	; 0
     7aa:	8f ef       	ldi	r24, 0xFF	; 255
     7ac:	80 83       	st	Z, r24
     7ae:	33 c0       	rjmp	.+102    	; 0x816 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	28 2f       	mov	r18, r24
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	3f 83       	std	Y+7, r19	; 0x07
     7b8:	2e 83       	std	Y+6, r18	; 0x06
     7ba:	8e 81       	ldd	r24, Y+6	; 0x06
     7bc:	9f 81       	ldd	r25, Y+7	; 0x07
     7be:	00 97       	sbiw	r24, 0x00	; 0
     7c0:	31 f0       	breq	.+12     	; 0x7ce <DIO_u8SetPortDirection+0xe8>
     7c2:	2e 81       	ldd	r18, Y+6	; 0x06
     7c4:	3f 81       	ldd	r19, Y+7	; 0x07
     7c6:	21 30       	cpi	r18, 0x01	; 1
     7c8:	31 05       	cpc	r19, r1
     7ca:	29 f0       	breq	.+10     	; 0x7d6 <DIO_u8SetPortDirection+0xf0>
     7cc:	24 c0       	rjmp	.+72     	; 0x816 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
     7ce:	e4 e3       	ldi	r30, 0x34	; 52
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	10 82       	st	Z, r1
     7d4:	20 c0       	rjmp	.+64     	; 0x816 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
     7d6:	e4 e3       	ldi	r30, 0x34	; 52
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	80 83       	st	Z, r24
     7de:	1b c0       	rjmp	.+54     	; 0x816 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
     7e0:	8b 81       	ldd	r24, Y+3	; 0x03
     7e2:	28 2f       	mov	r18, r24
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	3d 83       	std	Y+5, r19	; 0x05
     7e8:	2c 83       	std	Y+4, r18	; 0x04
     7ea:	8c 81       	ldd	r24, Y+4	; 0x04
     7ec:	9d 81       	ldd	r25, Y+5	; 0x05
     7ee:	00 97       	sbiw	r24, 0x00	; 0
     7f0:	31 f0       	breq	.+12     	; 0x7fe <DIO_u8SetPortDirection+0x118>
     7f2:	2c 81       	ldd	r18, Y+4	; 0x04
     7f4:	3d 81       	ldd	r19, Y+5	; 0x05
     7f6:	21 30       	cpi	r18, 0x01	; 1
     7f8:	31 05       	cpc	r19, r1
     7fa:	29 f0       	breq	.+10     	; 0x806 <DIO_u8SetPortDirection+0x120>
     7fc:	0c c0       	rjmp	.+24     	; 0x816 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
     7fe:	e1 e3       	ldi	r30, 0x31	; 49
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	10 82       	st	Z, r1
     804:	08 c0       	rjmp	.+16     	; 0x816 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
     806:	e1 e3       	ldi	r30, 0x31	; 49
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	8f ef       	ldi	r24, 0xFF	; 255
     80c:	80 83       	st	Z, r24
     80e:	03 c0       	rjmp	.+6      	; 0x816 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
     810:	19 82       	std	Y+1, r1	; 0x01
     812:	01 c0       	rjmp	.+2      	; 0x816 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     814:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     816:	89 81       	ldd	r24, Y+1	; 0x01
}
     818:	2d 96       	adiw	r28, 0x0d	; 13
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	08 95       	ret

0000082a <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
     82a:	df 93       	push	r29
     82c:	cf 93       	push	r28
     82e:	00 d0       	rcall	.+0      	; 0x830 <DIO_u8SetPortValue+0x6>
     830:	00 d0       	rcall	.+0      	; 0x832 <DIO_u8SetPortValue+0x8>
     832:	0f 92       	push	r0
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	8a 83       	std	Y+2, r24	; 0x02
     83a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	28 2f       	mov	r18, r24
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	3d 83       	std	Y+5, r19	; 0x05
     848:	2c 83       	std	Y+4, r18	; 0x04
     84a:	8c 81       	ldd	r24, Y+4	; 0x04
     84c:	9d 81       	ldd	r25, Y+5	; 0x05
     84e:	81 30       	cpi	r24, 0x01	; 1
     850:	91 05       	cpc	r25, r1
     852:	d1 f0       	breq	.+52     	; 0x888 <__stack+0x29>
     854:	2c 81       	ldd	r18, Y+4	; 0x04
     856:	3d 81       	ldd	r19, Y+5	; 0x05
     858:	22 30       	cpi	r18, 0x02	; 2
     85a:	31 05       	cpc	r19, r1
     85c:	2c f4       	brge	.+10     	; 0x868 <__stack+0x9>
     85e:	8c 81       	ldd	r24, Y+4	; 0x04
     860:	9d 81       	ldd	r25, Y+5	; 0x05
     862:	00 97       	sbiw	r24, 0x00	; 0
     864:	61 f0       	breq	.+24     	; 0x87e <__stack+0x1f>
     866:	1f c0       	rjmp	.+62     	; 0x8a6 <__stack+0x47>
     868:	2c 81       	ldd	r18, Y+4	; 0x04
     86a:	3d 81       	ldd	r19, Y+5	; 0x05
     86c:	22 30       	cpi	r18, 0x02	; 2
     86e:	31 05       	cpc	r19, r1
     870:	81 f0       	breq	.+32     	; 0x892 <__stack+0x33>
     872:	8c 81       	ldd	r24, Y+4	; 0x04
     874:	9d 81       	ldd	r25, Y+5	; 0x05
     876:	83 30       	cpi	r24, 0x03	; 3
     878:	91 05       	cpc	r25, r1
     87a:	81 f0       	breq	.+32     	; 0x89c <__stack+0x3d>
     87c:	14 c0       	rjmp	.+40     	; 0x8a6 <__stack+0x47>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
     87e:	eb e3       	ldi	r30, 0x3B	; 59
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	8b 81       	ldd	r24, Y+3	; 0x03
     884:	80 83       	st	Z, r24
     886:	10 c0       	rjmp	.+32     	; 0x8a8 <__stack+0x49>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
     888:	e8 e3       	ldi	r30, 0x38	; 56
     88a:	f0 e0       	ldi	r31, 0x00	; 0
     88c:	8b 81       	ldd	r24, Y+3	; 0x03
     88e:	80 83       	st	Z, r24
     890:	0b c0       	rjmp	.+22     	; 0x8a8 <__stack+0x49>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
     892:	e5 e3       	ldi	r30, 0x35	; 53
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	8b 81       	ldd	r24, Y+3	; 0x03
     898:	80 83       	st	Z, r24
     89a:	06 c0       	rjmp	.+12     	; 0x8a8 <__stack+0x49>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
     89c:	e2 e3       	ldi	r30, 0x32	; 50
     89e:	f0 e0       	ldi	r31, 0x00	; 0
     8a0:	8b 81       	ldd	r24, Y+3	; 0x03
     8a2:	80 83       	st	Z, r24
     8a4:	01 c0       	rjmp	.+2      	; 0x8a8 <__stack+0x49>
		default:Local_u8ErrorState = STD_TYPES_NOK;
     8a6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
}
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	cf 91       	pop	r28
     8b6:	df 91       	pop	r29
     8b8:	08 95       	ret

000008ba <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
     8ba:	df 93       	push	r29
     8bc:	cf 93       	push	r28
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <DIO_u8GetPortValue+0x6>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <DIO_u8GetPortValue+0x8>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <DIO_u8GetPortValue+0xa>
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	8a 83       	std	Y+2, r24	; 0x02
     8ca:	7c 83       	std	Y+4, r23	; 0x04
     8cc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
     8d2:	8b 81       	ldd	r24, Y+3	; 0x03
     8d4:	9c 81       	ldd	r25, Y+4	; 0x04
     8d6:	00 97       	sbiw	r24, 0x00	; 0
     8d8:	e9 f1       	breq	.+122    	; 0x954 <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
     8da:	8a 81       	ldd	r24, Y+2	; 0x02
     8dc:	28 2f       	mov	r18, r24
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	3e 83       	std	Y+6, r19	; 0x06
     8e2:	2d 83       	std	Y+5, r18	; 0x05
     8e4:	8d 81       	ldd	r24, Y+5	; 0x05
     8e6:	9e 81       	ldd	r25, Y+6	; 0x06
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	91 05       	cpc	r25, r1
     8ec:	e1 f0       	breq	.+56     	; 0x926 <DIO_u8GetPortValue+0x6c>
     8ee:	2d 81       	ldd	r18, Y+5	; 0x05
     8f0:	3e 81       	ldd	r19, Y+6	; 0x06
     8f2:	22 30       	cpi	r18, 0x02	; 2
     8f4:	31 05       	cpc	r19, r1
     8f6:	2c f4       	brge	.+10     	; 0x902 <DIO_u8GetPortValue+0x48>
     8f8:	8d 81       	ldd	r24, Y+5	; 0x05
     8fa:	9e 81       	ldd	r25, Y+6	; 0x06
     8fc:	00 97       	sbiw	r24, 0x00	; 0
     8fe:	61 f0       	breq	.+24     	; 0x918 <DIO_u8GetPortValue+0x5e>
     900:	27 c0       	rjmp	.+78     	; 0x950 <DIO_u8GetPortValue+0x96>
     902:	2d 81       	ldd	r18, Y+5	; 0x05
     904:	3e 81       	ldd	r19, Y+6	; 0x06
     906:	22 30       	cpi	r18, 0x02	; 2
     908:	31 05       	cpc	r19, r1
     90a:	a1 f0       	breq	.+40     	; 0x934 <DIO_u8GetPortValue+0x7a>
     90c:	8d 81       	ldd	r24, Y+5	; 0x05
     90e:	9e 81       	ldd	r25, Y+6	; 0x06
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	91 05       	cpc	r25, r1
     914:	b1 f0       	breq	.+44     	; 0x942 <DIO_u8GetPortValue+0x88>
     916:	1c c0       	rjmp	.+56     	; 0x950 <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
     918:	e9 e3       	ldi	r30, 0x39	; 57
     91a:	f0 e0       	ldi	r31, 0x00	; 0
     91c:	80 81       	ld	r24, Z
     91e:	eb 81       	ldd	r30, Y+3	; 0x03
     920:	fc 81       	ldd	r31, Y+4	; 0x04
     922:	80 83       	st	Z, r24
     924:	18 c0       	rjmp	.+48     	; 0x956 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
     926:	e6 e3       	ldi	r30, 0x36	; 54
     928:	f0 e0       	ldi	r31, 0x00	; 0
     92a:	80 81       	ld	r24, Z
     92c:	eb 81       	ldd	r30, Y+3	; 0x03
     92e:	fc 81       	ldd	r31, Y+4	; 0x04
     930:	80 83       	st	Z, r24
     932:	11 c0       	rjmp	.+34     	; 0x956 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
     934:	e3 e3       	ldi	r30, 0x33	; 51
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	80 81       	ld	r24, Z
     93a:	eb 81       	ldd	r30, Y+3	; 0x03
     93c:	fc 81       	ldd	r31, Y+4	; 0x04
     93e:	80 83       	st	Z, r24
     940:	0a c0       	rjmp	.+20     	; 0x956 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
     942:	e0 e3       	ldi	r30, 0x30	; 48
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	eb 81       	ldd	r30, Y+3	; 0x03
     94a:	fc 81       	ldd	r31, Y+4	; 0x04
     94c:	80 83       	st	Z, r24
     94e:	03 c0       	rjmp	.+6      	; 0x956 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
     950:	19 82       	std	Y+1, r1	; 0x01
     952:	01 c0       	rjmp	.+2      	; 0x956 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     954:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	26 96       	adiw	r28, 0x06	; 6
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	cf 91       	pop	r28
     966:	df 91       	pop	r29
     968:	08 95       	ret

0000096a <GI_voidEnableGI>:
#include "GI_interface.h"
#include "GI_private.h"
#include "GI_config.h"

void GI_voidEnableGI(void)
{
     96a:	df 93       	push	r29
     96c:	cf 93       	push	r28
     96e:	cd b7       	in	r28, 0x3d	; 61
     970:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
     972:	af e5       	ldi	r26, 0x5F	; 95
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	ef e5       	ldi	r30, 0x5F	; 95
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	80 81       	ld	r24, Z
     97c:	80 68       	ori	r24, 0x80	; 128
     97e:	8c 93       	st	X, r24
}
     980:	cf 91       	pop	r28
     982:	df 91       	pop	r29
     984:	08 95       	ret

00000986 <GI_voidDisableGI>:

void GI_voidDisableGI(void)
{
     986:	df 93       	push	r29
     988:	cf 93       	push	r28
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
     98e:	af e5       	ldi	r26, 0x5F	; 95
     990:	b0 e0       	ldi	r27, 0x00	; 0
     992:	ef e5       	ldi	r30, 0x5F	; 95
     994:	f0 e0       	ldi	r31, 0x00	; 0
     996:	80 81       	ld	r24, Z
     998:	8f 77       	andi	r24, 0x7F	; 127
     99a:	8c 93       	st	X, r24
     99c:	cf 91       	pop	r28
     99e:	df 91       	pop	r29
     9a0:	08 95       	ret

000009a2 <RTO_voidInit>:

/* Array of TCBs */
RTO_TCB RTO_AstrTasks[RTO_u8_MAX_NUMBER_TASKS];

void RTO_voidInit(void)
{
     9a2:	df 93       	push	r29
     9a4:	cf 93       	push	r28
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
	/* Set Call Back Function */
	TIMERS_u8Timer0CTCSetCallBack(&RTO_voidScheduler);
     9aa:	87 e3       	ldi	r24, 0x37	; 55
     9ac:	95 e0       	ldi	r25, 0x05	; 5
     9ae:	0e 94 05 07 	call	0xe0a	; 0xe0a <TIMERS_u8Timer0CTCSetCallBack>
	/* Start timer */
	TIMERS_voidTimer0Init();
     9b2:	0e 94 ac 05 	call	0xb58	; 0xb58 <TIMERS_voidTimer0Init>
}
     9b6:	cf 91       	pop	r28
     9b8:	df 91       	pop	r29
     9ba:	08 95       	ret

000009bc <RTO_u8CreateTask>:

u8 RTO_u8CreateTask(u8 Copy_u8Priority, u16 Copy_u16Periodicity, u16 Copy_u16FirstDelay, void(*Copy_pf)(void))
{
     9bc:	df 93       	push	r29
     9be:	cf 93       	push	r28
     9c0:	cd b7       	in	r28, 0x3d	; 61
     9c2:	de b7       	in	r29, 0x3e	; 62
     9c4:	28 97       	sbiw	r28, 0x08	; 8
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	f8 94       	cli
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	cd bf       	out	0x3d, r28	; 61
     9d0:	8a 83       	std	Y+2, r24	; 0x02
     9d2:	7c 83       	std	Y+4, r23	; 0x04
     9d4:	6b 83       	std	Y+3, r22	; 0x03
     9d6:	5e 83       	std	Y+6, r21	; 0x06
     9d8:	4d 83       	std	Y+5, r20	; 0x05
     9da:	38 87       	std	Y+8, r19	; 0x08
     9dc:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     9de:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8Priority < RTO_u8_MAX_NUMBER_TASKS) && (Copy_pf != NULL))
     9e0:	8a 81       	ldd	r24, Y+2	; 0x02
     9e2:	83 30       	cpi	r24, 0x03	; 3
     9e4:	d0 f5       	brcc	.+116    	; 0xa5a <RTO_u8CreateTask+0x9e>
     9e6:	8f 81       	ldd	r24, Y+7	; 0x07
     9e8:	98 85       	ldd	r25, Y+8	; 0x08
     9ea:	00 97       	sbiw	r24, 0x00	; 0
     9ec:	b1 f1       	breq	.+108    	; 0xa5a <RTO_u8CreateTask+0x9e>
	{
		RTO_AstrTasks[Copy_u8Priority].FirstDelay = Copy_u16FirstDelay;
     9ee:	8a 81       	ldd	r24, Y+2	; 0x02
     9f0:	28 2f       	mov	r18, r24
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	c9 01       	movw	r24, r18
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	82 0f       	add	r24, r18
     9fc:	93 1f       	adc	r25, r19
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	fc 01       	movw	r30, r24
     a04:	e5 58       	subi	r30, 0x85	; 133
     a06:	ff 4f       	sbci	r31, 0xFF	; 255
     a08:	8d 81       	ldd	r24, Y+5	; 0x05
     a0a:	9e 81       	ldd	r25, Y+6	; 0x06
     a0c:	91 83       	std	Z+1, r25	; 0x01
     a0e:	80 83       	st	Z, r24
		RTO_AstrTasks[Copy_u8Priority].Periodicity = Copy_u16Periodicity;
     a10:	8a 81       	ldd	r24, Y+2	; 0x02
     a12:	28 2f       	mov	r18, r24
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	c9 01       	movw	r24, r18
     a18:	88 0f       	add	r24, r24
     a1a:	99 1f       	adc	r25, r25
     a1c:	82 0f       	add	r24, r18
     a1e:	93 1f       	adc	r25, r19
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	88 0f       	add	r24, r24
     a24:	99 1f       	adc	r25, r25
     a26:	fc 01       	movw	r30, r24
     a28:	e5 58       	subi	r30, 0x85	; 133
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	91 83       	std	Z+1, r25	; 0x01
     a32:	80 83       	st	Z, r24
		RTO_AstrTasks[Copy_u8Priority].pf = Copy_pf;
     a34:	8a 81       	ldd	r24, Y+2	; 0x02
     a36:	28 2f       	mov	r18, r24
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	c9 01       	movw	r24, r18
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	82 0f       	add	r24, r18
     a42:	93 1f       	adc	r25, r19
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	fc 01       	movw	r30, r24
     a4a:	e1 58       	subi	r30, 0x81	; 129
     a4c:	ff 4f       	sbci	r31, 0xFF	; 255
     a4e:	8f 81       	ldd	r24, Y+7	; 0x07
     a50:	98 85       	ldd	r25, Y+8	; 0x08
     a52:	91 83       	std	Z+1, r25	; 0x01
     a54:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     a5a:	89 81       	ldd	r24, Y+1	; 0x01
}
     a5c:	28 96       	adiw	r28, 0x08	; 8
     a5e:	0f b6       	in	r0, 0x3f	; 63
     a60:	f8 94       	cli
     a62:	de bf       	out	0x3e, r29	; 62
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	cd bf       	out	0x3d, r28	; 61
     a68:	cf 91       	pop	r28
     a6a:	df 91       	pop	r29
     a6c:	08 95       	ret

00000a6e <RTO_voidScheduler>:

static void RTO_voidScheduler(void)
{
     a6e:	df 93       	push	r29
     a70:	cf 93       	push	r28
     a72:	0f 92       	push	r0
     a74:	cd b7       	in	r28, 0x3d	; 61
     a76:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Counter;
	/* For Loop To Loop on The Ready Tasks */
	for(Local_u8Counter = 0;Local_u8Counter < RTO_u8_MAX_NUMBER_TASKS;Local_u8Counter++)
     a78:	19 82       	std	Y+1, r1	; 0x01
     a7a:	66 c0       	rjmp	.+204    	; 0xb48 <RTO_voidScheduler+0xda>
	{
		if(RTO_AstrTasks[Local_u8Counter].FirstDelay == 0)
     a7c:	89 81       	ldd	r24, Y+1	; 0x01
     a7e:	28 2f       	mov	r18, r24
     a80:	30 e0       	ldi	r19, 0x00	; 0
     a82:	c9 01       	movw	r24, r18
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	fc 01       	movw	r30, r24
     a92:	e5 58       	subi	r30, 0x85	; 133
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	91 81       	ldd	r25, Z+1	; 0x01
     a9a:	00 97       	sbiw	r24, 0x00	; 0
     a9c:	a1 f5       	brne	.+104    	; 0xb06 <RTO_voidScheduler+0x98>
		{
			/* Call Task */
			RTO_AstrTasks[Local_u8Counter].pf();
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	28 2f       	mov	r18, r24
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	c9 01       	movw	r24, r18
     aa6:	88 0f       	add	r24, r24
     aa8:	99 1f       	adc	r25, r25
     aaa:	82 0f       	add	r24, r18
     aac:	93 1f       	adc	r25, r19
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	fc 01       	movw	r30, r24
     ab4:	e1 58       	subi	r30, 0x81	; 129
     ab6:	ff 4f       	sbci	r31, 0xFF	; 255
     ab8:	01 90       	ld	r0, Z+
     aba:	f0 81       	ld	r31, Z
     abc:	e0 2d       	mov	r30, r0
     abe:	09 95       	icall
			/* Update The First Delay Value  by The Periodicity */
			RTO_AstrTasks[Local_u8Counter].FirstDelay = RTO_AstrTasks[Local_u8Counter].Periodicity - 1;
     ac0:	89 81       	ldd	r24, Y+1	; 0x01
     ac2:	48 2f       	mov	r20, r24
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	89 81       	ldd	r24, Y+1	; 0x01
     ac8:	28 2f       	mov	r18, r24
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	c9 01       	movw	r24, r18
     ace:	88 0f       	add	r24, r24
     ad0:	99 1f       	adc	r25, r25
     ad2:	82 0f       	add	r24, r18
     ad4:	93 1f       	adc	r25, r19
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	fc 01       	movw	r30, r24
     ade:	e5 58       	subi	r30, 0x85	; 133
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	80 81       	ld	r24, Z
     ae4:	91 81       	ldd	r25, Z+1	; 0x01
     ae6:	9c 01       	movw	r18, r24
     ae8:	21 50       	subi	r18, 0x01	; 1
     aea:	30 40       	sbci	r19, 0x00	; 0
     aec:	ca 01       	movw	r24, r20
     aee:	88 0f       	add	r24, r24
     af0:	99 1f       	adc	r25, r25
     af2:	84 0f       	add	r24, r20
     af4:	95 1f       	adc	r25, r21
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	fc 01       	movw	r30, r24
     afc:	e5 58       	subi	r30, 0x85	; 133
     afe:	ff 4f       	sbci	r31, 0xFF	; 255
     b00:	31 83       	std	Z+1, r19	; 0x01
     b02:	20 83       	st	Z, r18
     b04:	1e c0       	rjmp	.+60     	; 0xb42 <RTO_voidScheduler+0xd4>
		}
		else
		{
			RTO_AstrTasks[Local_u8Counter].FirstDelay--;
     b06:	89 81       	ldd	r24, Y+1	; 0x01
     b08:	28 2f       	mov	r18, r24
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	c9 01       	movw	r24, r18
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	82 0f       	add	r24, r18
     b14:	93 1f       	adc	r25, r19
     b16:	88 0f       	add	r24, r24
     b18:	99 1f       	adc	r25, r25
     b1a:	fc 01       	movw	r30, r24
     b1c:	e5 58       	subi	r30, 0x85	; 133
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	80 81       	ld	r24, Z
     b22:	91 81       	ldd	r25, Z+1	; 0x01
     b24:	ac 01       	movw	r20, r24
     b26:	41 50       	subi	r20, 0x01	; 1
     b28:	50 40       	sbci	r21, 0x00	; 0
     b2a:	c9 01       	movw	r24, r18
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	82 0f       	add	r24, r18
     b32:	93 1f       	adc	r25, r19
     b34:	88 0f       	add	r24, r24
     b36:	99 1f       	adc	r25, r25
     b38:	fc 01       	movw	r30, r24
     b3a:	e5 58       	subi	r30, 0x85	; 133
     b3c:	ff 4f       	sbci	r31, 0xFF	; 255
     b3e:	51 83       	std	Z+1, r21	; 0x01
     b40:	40 83       	st	Z, r20

static void RTO_voidScheduler(void)
{
	u8 Local_u8Counter;
	/* For Loop To Loop on The Ready Tasks */
	for(Local_u8Counter = 0;Local_u8Counter < RTO_u8_MAX_NUMBER_TASKS;Local_u8Counter++)
     b42:	89 81       	ldd	r24, Y+1	; 0x01
     b44:	8f 5f       	subi	r24, 0xFF	; 255
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	89 81       	ldd	r24, Y+1	; 0x01
     b4a:	83 30       	cpi	r24, 0x03	; 3
     b4c:	08 f4       	brcc	.+2      	; 0xb50 <RTO_voidScheduler+0xe2>
     b4e:	96 cf       	rjmp	.-212    	; 0xa7c <RTO_voidScheduler+0xe>
		else
		{
			RTO_AstrTasks[Local_u8Counter].FirstDelay--;
		}
	}
     b50:	0f 90       	pop	r0
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	08 95       	ret

00000b58 <TIMERS_voidTimer0Init>:
static void (*TIMERS_pfTimer1CTC_COMPA)(void) = NULL;
static void (*TIMERS_pfTimer1CAPT)(void) = NULL;
static void (*TIMERS_pfTimer1CTC_COMPB)(void) = NULL;

void TIMERS_voidTimer0Init(void)
{
     b58:	df 93       	push	r29
     b5a:	cf 93       	push	r28
     b5c:	cd b7       	in	r28, 0x3d	; 61
     b5e:	de b7       	in	r29, 0x3e	; 62
	/* Select Mode => Normal Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
	CLR_BIT(TIMERS_u8_TCCR0_REG,3);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Select Mode => CTC Mode */
	CLR_BIT(TIMERS_u8_TCCR0_REG,6);
     b60:	a3 e5       	ldi	r26, 0x53	; 83
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	e3 e5       	ldi	r30, 0x53	; 83
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	80 81       	ld	r24, Z
     b6a:	8f 7b       	andi	r24, 0xBF	; 191
     b6c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,3);
     b6e:	a3 e5       	ldi	r26, 0x53	; 83
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e3 e5       	ldi	r30, 0x53	; 83
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	88 60       	ori	r24, 0x08	; 8
     b7a:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,0);
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Enable CTC Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,1);
     b7c:	a9 e5       	ldi	r26, 0x59	; 89
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e9 e5       	ldi	r30, 0x59	; 89
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	82 60       	ori	r24, 0x02	; 2
     b88:	8c 93       	st	X, r24
#if TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_NORMAL_MODE
	/* Set Preload Value */
	TIMERS_u8_TCNT0_REG = TIMERS_u8_TIMER0_PRELOAD_VALUE;
#elif TIMERS_u8_TIMER0_MODE == TIMERS_u8_TIMER0_CTC_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u8_OCR0_REG = TIMERS_u8_TIMER0_COMPARE_MATCH_OCR0;
     b8a:	ec e5       	ldi	r30, 0x5C	; 92
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	87 ec       	ldi	r24, 0xC7	; 199
     b90:	80 83       	st	Z, r24
#endif

#if TIMERS_u8_TIMER0_COMPARE_MATCH_MODE == TIMERS_u8_TIMER0_OC0_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR0_REG,5);
     b92:	a3 e5       	ldi	r26, 0x53	; 83
     b94:	b0 e0       	ldi	r27, 0x00	; 0
     b96:	e3 e5       	ldi	r30, 0x53	; 83
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 81       	ld	r24, Z
     b9c:	8f 7d       	andi	r24, 0xDF	; 223
     b9e:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,4);
     ba0:	a3 e5       	ldi	r26, 0x53	; 83
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e3 e5       	ldi	r30, 0x53	; 83
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	8f 7e       	andi	r24, 0xEF	; 239
     bac:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
	CLR_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#elif TIMERS_u8_TIMER0_CLOCK_SOURCE == TIMERS_u8_TIMER0_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG,2);
     bae:	a3 e5       	ldi	r26, 0x53	; 83
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e3 e5       	ldi	r30, 0x53	; 83
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 81       	ld	r24, Z
     bb8:	8b 7f       	andi	r24, 0xFB	; 251
     bba:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
     bbc:	a3 e5       	ldi	r26, 0x53	; 83
     bbe:	b0 e0       	ldi	r27, 0x00	; 0
     bc0:	e3 e5       	ldi	r30, 0x53	; 83
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	80 81       	ld	r24, Z
     bc6:	82 60       	ori	r24, 0x02	; 2
     bc8:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG,0);
     bca:	a3 e5       	ldi	r26, 0x53	; 83
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e3 e5       	ldi	r30, 0x53	; 83
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8e 7f       	andi	r24, 0xFE	; 254
     bd6:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG,2);
	SET_BIT(TIMERS_u8_TCCR0_REG,1);
	SET_BIT(TIMERS_u8_TCCR0_REG,0);
#endif

}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	08 95       	ret

00000bde <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void)
{
     bde:	df 93       	push	r29
     be0:	cf 93       	push	r28
     be2:	cd b7       	in	r28, 0x3d	; 61
     be4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
	CLR_BIT(TIMERS_u8_TCCR1A_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_FAST_PWM_ICR1_MODE
	CLR_BIT(TIMERS_u8_TCCR1A_REG,0);
     be6:	af e4       	ldi	r26, 0x4F	; 79
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ef e4       	ldi	r30, 0x4F	; 79
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8e 7f       	andi	r24, 0xFE	; 254
     bf2:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,1);
     bf4:	af e4       	ldi	r26, 0x4F	; 79
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	ef e4       	ldi	r30, 0x4F	; 79
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	82 60       	ori	r24, 0x02	; 2
     c00:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,3);
     c02:	ae e4       	ldi	r26, 0x4E	; 78
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	ee e4       	ldi	r30, 0x4E	; 78
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	88 60       	ori	r24, 0x08	; 8
     c0e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,4);
     c10:	ae e4       	ldi	r26, 0x4E	; 78
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	ee e4       	ldi	r30, 0x4E	; 78
     c16:	f0 e0       	ldi	r31, 0x00	; 0
     c18:	80 81       	ld	r24, Z
     c1a:	80 61       	ori	r24, 0x10	; 16
     c1c:	8c 93       	st	X, r24
#endif

	/* Select INT  */
#if TIMERS_u8_TIMER1_INT == TIMERS_u8_Timer1_OVF
	/* Enable OVF Interrupt */
	SET_BIT(TIMERS_u8_TIMSK_REG,2);
     c1e:	a9 e5       	ldi	r26, 0x59	; 89
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e9 e5       	ldi	r30, 0x59	; 89
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	84 60       	ori	r24, 0x04	; 4
     c2a:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_CTC_OCR1B_MODE
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_MODE == TIMERS_u8_TIMER1_FAST_PWM_ICR1_MODE
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = TIMERS_u16_TIMER1_TOP_VALUE_ICR1;
     c2c:	e6 e4       	ldi	r30, 0x46	; 70
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	8f e1       	ldi	r24, 0x1F	; 31
     c32:	9e e4       	ldi	r25, 0x4E	; 78
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1B_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1B;
#elif TIMERS_u8_TIMER1_CHANNEL == TIMERS_u8_TIMER1_CHANNEL_A
	/* Set Compare Match Unit Register */
	TIMERS_u16_OCR1A_REG = TIMERS_u16_TIMER1_COMPARE_MATCH_OCR1A;
     c38:	ea e4       	ldi	r30, 0x4A	; 74
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	87 ee       	ldi	r24, 0xE7	; 231
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
#endif


/* Compare Match Output Mode unit A */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_A == TIMERS_u8_TIMER1_OC1A_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,6);
     c44:	af e4       	ldi	r26, 0x4F	; 79
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	ef e4       	ldi	r30, 0x4F	; 79
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	8f 7b       	andi	r24, 0xBF	; 191
     c50:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,7);
     c52:	af e4       	ldi	r26, 0x4F	; 79
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ef e4       	ldi	r30, 0x4F	; 79
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	8f 77       	andi	r24, 0x7F	; 127
     c5e:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1A_REG,6);
	SET_BIT(TIMERS_u8_TCCR1A_REG,7);
#endif
/* Compare Match Output Mode unit B */
#if TIMERS_u8_TIMER1_COMPARE_MATCH_MODE_B == TIMERS_u8_TIMER1_OC1B_DISCONNECTED
	CLR_BIT(TIMERS_u8_TCCR1A_REG,4);
     c60:	af e4       	ldi	r26, 0x4F	; 79
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	ef e4       	ldi	r30, 0x4F	; 79
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8f 7e       	andi	r24, 0xEF	; 239
     c6c:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG,5);
     c6e:	af e4       	ldi	r26, 0x4F	; 79
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ef e4       	ldi	r30, 0x4F	; 79
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	8f 7d       	andi	r24, 0xDF	; 223
     c7a:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
	CLR_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_PRESCALER_8
	/* Set Prescaler Value CLK/8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG,2);
     c7c:	ae e4       	ldi	r26, 0x4E	; 78
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	ee e4       	ldi	r30, 0x4E	; 78
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	8b 7f       	andi	r24, 0xFB	; 251
     c88:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
     c8a:	ae e4       	ldi	r26, 0x4E	; 78
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	ee e4       	ldi	r30, 0x4E	; 78
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	82 60       	ori	r24, 0x02	; 2
     c96:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG,0);
     c98:	ae e4       	ldi	r26, 0x4E	; 78
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	ee e4       	ldi	r30, 0x4E	; 78
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	8e 7f       	andi	r24, 0xFE	; 254
     ca4:	8c 93       	st	X, r24
#elif TIMERS_u8_TIMER1_CLOCK_SOURCE == TIMERS_u8_TIMER1_T1_PIN_RISING_EDGE
	SET_BIT(TIMERS_u8_TCCR1B_REG,2);
	SET_BIT(TIMERS_u8_TCCR1B_REG,1);
	SET_BIT(TIMERS_u8_TCCR1B_REG,0);
#endif
}
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <TIMERS_voidTimer1SetCompareMatchValueUnitA>:
void TIMERS_voidTimer1SetCompareMatchValueUnitA(u16 Copy_u16OCR1AValue)
{
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <TIMERS_voidTimer1SetCompareMatchValueUnitA+0x6>
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
     cb6:	9a 83       	std	Y+2, r25	; 0x02
     cb8:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u16OCR1AValue;
     cba:	ea e4       	ldi	r30, 0x4A	; 74
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	80 83       	st	Z, r24
}
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	cf 91       	pop	r28
     ccc:	df 91       	pop	r29
     cce:	08 95       	ret

00000cd0 <TIMERS_voidTimer1SetCompareMatchValueUnitB>:

void TIMERS_voidTimer1SetCompareMatchValueUnitB(u16 Copy_u16OCR1BValue)
{
     cd0:	df 93       	push	r29
     cd2:	cf 93       	push	r28
     cd4:	00 d0       	rcall	.+0      	; 0xcd6 <TIMERS_voidTimer1SetCompareMatchValueUnitB+0x6>
     cd6:	cd b7       	in	r28, 0x3d	; 61
     cd8:	de b7       	in	r29, 0x3e	; 62
     cda:	9a 83       	std	Y+2, r25	; 0x02
     cdc:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1B_REG = Copy_u16OCR1BValue;
     cde:	e8 e4       	ldi	r30, 0x48	; 72
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	9a 81       	ldd	r25, Y+2	; 0x02
     ce6:	91 83       	std	Z+1, r25	; 0x01
     ce8:	80 83       	st	Z, r24
}
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <TIMERS_u8GetTCNT0Value>:
u8 TIMERS_u8GetTCNT0Value(u8 * Copy_pu8Value)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	00 d0       	rcall	.+0      	; 0xcfa <TIMERS_u8GetTCNT0Value+0x6>
     cfa:	0f 92       	push	r0
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
     d00:	9b 83       	std	Y+3, r25	; 0x03
     d02:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8Value != NULL)
     d08:	8a 81       	ldd	r24, Y+2	; 0x02
     d0a:	9b 81       	ldd	r25, Y+3	; 0x03
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	39 f0       	breq	.+14     	; 0xd1e <TIMERS_u8GetTCNT0Value+0x2a>
	{
		*Copy_pu8Value = TIMERS_u8_TCNT0_REG;
     d10:	e2 e5       	ldi	r30, 0x52	; 82
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	ea 81       	ldd	r30, Y+2	; 0x02
     d18:	fb 81       	ldd	r31, Y+3	; 0x03
     d1a:	80 83       	st	Z, r24
     d1c:	01 c0       	rjmp	.+2      	; 0xd20 <TIMERS_u8GetTCNT0Value+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     d1e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     d20:	89 81       	ldd	r24, Y+1	; 0x01
}
     d22:	0f 90       	pop	r0
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	cf 91       	pop	r28
     d2a:	df 91       	pop	r29
     d2c:	08 95       	ret

00000d2e <TIMERS_voidTimer0SetCompareMatchValue>:

void TIMERS_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
     d3a:	ec e5       	ldi	r30, 0x5C	; 92
     d3c:	f0 e0       	ldi	r31, 0x00	; 0
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	80 83       	st	Z, r24
}
     d42:	0f 90       	pop	r0
     d44:	cf 91       	pop	r28
     d46:	df 91       	pop	r29
     d48:	08 95       	ret

00000d4a <TIMERS_voidTimer1SetICR1Value>:
void TIMERS_voidTimer1SetICR1Value(u16 Copy_u16ICR1Value)
{
     d4a:	df 93       	push	r29
     d4c:	cf 93       	push	r28
     d4e:	00 d0       	rcall	.+0      	; 0xd50 <TIMERS_voidTimer1SetICR1Value+0x6>
     d50:	cd b7       	in	r28, 0x3d	; 61
     d52:	de b7       	in	r29, 0x3e	; 62
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_ICR1_REG = Copy_u16ICR1Value;
     d58:	e6 e4       	ldi	r30, 0x46	; 70
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	91 83       	std	Z+1, r25	; 0x01
     d62:	80 83       	st	Z, r24
}
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	cf 91       	pop	r28
     d6a:	df 91       	pop	r29
     d6c:	08 95       	ret

00000d6e <TIMERS_u8GetTCNT1Value>:
u8 TIMERS_u8GetTCNT1Value(u16 * Copy_pu16Value)
{
     d6e:	df 93       	push	r29
     d70:	cf 93       	push	r28
     d72:	00 d0       	rcall	.+0      	; 0xd74 <TIMERS_u8GetTCNT1Value+0x6>
     d74:	0f 92       	push	r0
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
     d7a:	9b 83       	std	Y+3, r25	; 0x03
     d7c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16Value != NULL)
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	9b 81       	ldd	r25, Y+3	; 0x03
     d86:	00 97       	sbiw	r24, 0x00	; 0
     d88:	49 f0       	breq	.+18     	; 0xd9c <TIMERS_u8GetTCNT1Value+0x2e>
	{
		*Copy_pu16Value = TIMERS_u16_TCNT1_REG;
     d8a:	ec e4       	ldi	r30, 0x4C	; 76
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	ea 81       	ldd	r30, Y+2	; 0x02
     d94:	fb 81       	ldd	r31, Y+3	; 0x03
     d96:	91 83       	std	Z+1, r25	; 0x01
     d98:	80 83       	st	Z, r24
     d9a:	01 c0       	rjmp	.+2      	; 0xd9e <TIMERS_u8GetTCNT1Value+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     d9c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <TIMERS_u8SetTCNT1Value>:
void TIMERS_u8SetTCNT1Value(u16 Copy_u16TCNT1Value)
{
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <TIMERS_u8SetTCNT1Value+0x6>
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u16TCNT1Value;
     dba:	ec e4       	ldi	r30, 0x4C	; 76
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <TIMERS_u8Timer0SetCallBack>:

u8 TIMERS_u8Timer0SetCallBack(void(*Copy_pf)(void))
{
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <TIMERS_u8Timer0SetCallBack+0x6>
     dd6:	0f 92       	push	r0
     dd8:	cd b7       	in	r28, 0x3d	; 61
     dda:	de b7       	in	r29, 0x3e	; 62
     ddc:	9b 83       	std	Y+3, r25	; 0x03
     dde:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	9b 81       	ldd	r25, Y+3	; 0x03
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	39 f0       	breq	.+14     	; 0xdfa <TIMERS_u8Timer0SetCallBack+0x2a>
	{
		TIMERS_pfTimer0OVF = Copy_pf;
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	9b 81       	ldd	r25, Y+3	; 0x03
     df0:	90 93 61 00 	sts	0x0061, r25
     df4:	80 93 60 00 	sts	0x0060, r24
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <TIMERS_u8Timer0SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     dfa:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	0f 90       	pop	r0
     e04:	cf 91       	pop	r28
     e06:	df 91       	pop	r29
     e08:	08 95       	ret

00000e0a <TIMERS_u8Timer0CTCSetCallBack>:

u8 TIMERS_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
     e0a:	df 93       	push	r29
     e0c:	cf 93       	push	r28
     e0e:	00 d0       	rcall	.+0      	; 0xe10 <TIMERS_u8Timer0CTCSetCallBack+0x6>
     e10:	0f 92       	push	r0
     e12:	cd b7       	in	r28, 0x3d	; 61
     e14:	de b7       	in	r29, 0x3e	; 62
     e16:	9b 83       	std	Y+3, r25	; 0x03
     e18:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	9b 81       	ldd	r25, Y+3	; 0x03
     e22:	00 97       	sbiw	r24, 0x00	; 0
     e24:	39 f0       	breq	.+14     	; 0xe34 <TIMERS_u8Timer0CTCSetCallBack+0x2a>
	{
		TIMERS_pfTimer0CTC = Copy_pf;
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	9b 81       	ldd	r25, Y+3	; 0x03
     e2a:	90 93 63 00 	sts	0x0063, r25
     e2e:	80 93 62 00 	sts	0x0062, r24
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <TIMERS_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e34:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
     e36:	89 81       	ldd	r24, Y+1	; 0x01
}
     e38:	0f 90       	pop	r0
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	08 95       	ret

00000e44 <TIMERS_u8Timer1SetCallBack>:


u8 TIMERS_u8Timer1SetCallBack(void(*Copy_pf)(void))
{
     e44:	df 93       	push	r29
     e46:	cf 93       	push	r28
     e48:	00 d0       	rcall	.+0      	; 0xe4a <TIMERS_u8Timer1SetCallBack+0x6>
     e4a:	0f 92       	push	r0
     e4c:	cd b7       	in	r28, 0x3d	; 61
     e4e:	de b7       	in	r29, 0x3e	; 62
     e50:	9b 83       	std	Y+3, r25	; 0x03
     e52:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     e58:	8a 81       	ldd	r24, Y+2	; 0x02
     e5a:	9b 81       	ldd	r25, Y+3	; 0x03
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	39 f0       	breq	.+14     	; 0xe6e <TIMERS_u8Timer1SetCallBack+0x2a>
	{
		TIMERS_pfTimer1OVF = Copy_pf;
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	9b 81       	ldd	r25, Y+3	; 0x03
     e64:	90 93 65 00 	sts	0x0065, r25
     e68:	80 93 64 00 	sts	0x0064, r24
     e6c:	01 c0       	rjmp	.+2      	; 0xe70 <TIMERS_u8Timer1SetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     e6e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <TIMERS_u8Timer1COMPASetCallBack>:

u8 TIMERS_u8Timer1COMPASetCallBack(void(*Copy_pf)(void))
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	00 d0       	rcall	.+0      	; 0xe84 <TIMERS_u8Timer1COMPASetCallBack+0x6>
     e84:	0f 92       	push	r0
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
     e8a:	9b 83       	std	Y+3, r25	; 0x03
     e8c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	9b 81       	ldd	r25, Y+3	; 0x03
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	39 f0       	breq	.+14     	; 0xea8 <TIMERS_u8Timer1COMPASetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPA = Copy_pf;
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	9b 81       	ldd	r25, Y+3	; 0x03
     e9e:	90 93 67 00 	sts	0x0067, r25
     ea2:	80 93 66 00 	sts	0x0066, r24
     ea6:	01 c0       	rjmp	.+2      	; 0xeaa <TIMERS_u8Timer1COMPASetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ea8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
}
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	cf 91       	pop	r28
     eb4:	df 91       	pop	r29
     eb6:	08 95       	ret

00000eb8 <TIMERS_u8Timer1COMPBSetCallBack>:

u8 TIMERS_u8Timer1COMPBSetCallBack(void(*Copy_pf)(void))
{
     eb8:	df 93       	push	r29
     eba:	cf 93       	push	r28
     ebc:	00 d0       	rcall	.+0      	; 0xebe <TIMERS_u8Timer1COMPBSetCallBack+0x6>
     ebe:	0f 92       	push	r0
     ec0:	cd b7       	in	r28, 0x3d	; 61
     ec2:	de b7       	in	r29, 0x3e	; 62
     ec4:	9b 83       	std	Y+3, r25	; 0x03
     ec6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	9b 81       	ldd	r25, Y+3	; 0x03
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	39 f0       	breq	.+14     	; 0xee2 <TIMERS_u8Timer1COMPBSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CTC_COMPB = Copy_pf;
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	9b 81       	ldd	r25, Y+3	; 0x03
     ed8:	90 93 6b 00 	sts	0x006B, r25
     edc:	80 93 6a 00 	sts	0x006A, r24
     ee0:	01 c0       	rjmp	.+2      	; 0xee4 <TIMERS_u8Timer1COMPBSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     ee2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <TIMERS_u8Timer1CAPTSetCallBack>:

u8 TIMERS_u8Timer1CAPTSetCallBack(void(*Copy_pf)(void))
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <TIMERS_u8Timer1CAPTSetCallBack+0x6>
     ef8:	0f 92       	push	r0
     efa:	cd b7       	in	r28, 0x3d	; 61
     efc:	de b7       	in	r29, 0x3e	; 62
     efe:	9b 83       	std	Y+3, r25	; 0x03
     f00:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	39 f0       	breq	.+14     	; 0xf1c <TIMERS_u8Timer1CAPTSetCallBack+0x2a>
	{
		TIMERS_pfTimer1CAPT = Copy_pf;
     f0e:	8a 81       	ldd	r24, Y+2	; 0x02
     f10:	9b 81       	ldd	r25, Y+3	; 0x03
     f12:	90 93 69 00 	sts	0x0069, r25
     f16:	80 93 68 00 	sts	0x0068, r24
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <TIMERS_u8Timer1CAPTSetCallBack+0x2c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     f1c:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <__vector_9>:

/* Prototype for ISR TIMER1 OVF */
void __vector_9(void)   __attribute__((signal));
void __vector_9(void)
{
     f2c:	1f 92       	push	r1
     f2e:	0f 92       	push	r0
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	0f 92       	push	r0
     f34:	11 24       	eor	r1, r1
     f36:	2f 93       	push	r18
     f38:	3f 93       	push	r19
     f3a:	4f 93       	push	r20
     f3c:	5f 93       	push	r21
     f3e:	6f 93       	push	r22
     f40:	7f 93       	push	r23
     f42:	8f 93       	push	r24
     f44:	9f 93       	push	r25
     f46:	af 93       	push	r26
     f48:	bf 93       	push	r27
     f4a:	ef 93       	push	r30
     f4c:	ff 93       	push	r31
     f4e:	df 93       	push	r29
     f50:	cf 93       	push	r28
     f52:	cd b7       	in	r28, 0x3d	; 61
     f54:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     f56:	80 91 6c 00 	lds	r24, 0x006C
     f5a:	90 91 6d 00 	lds	r25, 0x006D
     f5e:	01 96       	adiw	r24, 0x01	; 1
     f60:	90 93 6d 00 	sts	0x006D, r25
     f64:	80 93 6c 00 	sts	0x006C, r24
	if(Local_u16CounterOVF == 3907)
     f68:	80 91 6c 00 	lds	r24, 0x006C
     f6c:	90 91 6d 00 	lds	r25, 0x006D
     f70:	2f e0       	ldi	r18, 0x0F	; 15
     f72:	83 34       	cpi	r24, 0x43	; 67
     f74:	92 07       	cpc	r25, r18
     f76:	a9 f4       	brne	.+42     	; 0xfa2 <__vector_9+0x76>
	{
		/* Update Preload Value */
		TIMERS_u16_TCNT1_REG = 192;
     f78:	ec e4       	ldi	r30, 0x4C	; 76
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 ec       	ldi	r24, 0xC0	; 192
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	91 83       	std	Z+1, r25	; 0x01
     f82:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
     f84:	10 92 6d 00 	sts	0x006D, r1
     f88:	10 92 6c 00 	sts	0x006C, r1
		/* Call App Function */
		if(TIMERS_pfTimer1OVF != NULL)
     f8c:	80 91 64 00 	lds	r24, 0x0064
     f90:	90 91 65 00 	lds	r25, 0x0065
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	29 f0       	breq	.+10     	; 0xfa2 <__vector_9+0x76>
		{
			TIMERS_pfTimer1OVF();
     f98:	e0 91 64 00 	lds	r30, 0x0064
     f9c:	f0 91 65 00 	lds	r31, 0x0065
     fa0:	09 95       	icall
		}
	}
}
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	ff 91       	pop	r31
     fa8:	ef 91       	pop	r30
     faa:	bf 91       	pop	r27
     fac:	af 91       	pop	r26
     fae:	9f 91       	pop	r25
     fb0:	8f 91       	pop	r24
     fb2:	7f 91       	pop	r23
     fb4:	6f 91       	pop	r22
     fb6:	5f 91       	pop	r21
     fb8:	4f 91       	pop	r20
     fba:	3f 91       	pop	r19
     fbc:	2f 91       	pop	r18
     fbe:	0f 90       	pop	r0
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	0f 90       	pop	r0
     fc4:	1f 90       	pop	r1
     fc6:	18 95       	reti

00000fc8 <__vector_8>:


/* Prototype for ISR TIMER1 COMPB */
void __vector_8(void)   __attribute__((signal));
void __vector_8(void)
{
     fc8:	1f 92       	push	r1
     fca:	0f 92       	push	r0
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	0f 92       	push	r0
     fd0:	11 24       	eor	r1, r1
     fd2:	2f 93       	push	r18
     fd4:	3f 93       	push	r19
     fd6:	4f 93       	push	r20
     fd8:	5f 93       	push	r21
     fda:	6f 93       	push	r22
     fdc:	7f 93       	push	r23
     fde:	8f 93       	push	r24
     fe0:	9f 93       	push	r25
     fe2:	af 93       	push	r26
     fe4:	bf 93       	push	r27
     fe6:	ef 93       	push	r30
     fe8:	ff 93       	push	r31
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
     ff2:	80 91 6e 00 	lds	r24, 0x006E
     ff6:	90 91 6f 00 	lds	r25, 0x006F
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	90 93 6f 00 	sts	0x006F, r25
    1000:	80 93 6e 00 	sts	0x006E, r24
	if(Local_u16CounterCTC == 10000)
    1004:	80 91 6e 00 	lds	r24, 0x006E
    1008:	90 91 6f 00 	lds	r25, 0x006F
    100c:	27 e2       	ldi	r18, 0x27	; 39
    100e:	80 31       	cpi	r24, 0x10	; 16
    1010:	92 07       	cpc	r25, r18
    1012:	79 f4       	brne	.+30     	; 0x1032 <__vector_8+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    1014:	10 92 6f 00 	sts	0x006F, r1
    1018:	10 92 6e 00 	sts	0x006E, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPB != NULL)
    101c:	80 91 6a 00 	lds	r24, 0x006A
    1020:	90 91 6b 00 	lds	r25, 0x006B
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	29 f0       	breq	.+10     	; 0x1032 <__vector_8+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPB();
    1028:	e0 91 6a 00 	lds	r30, 0x006A
    102c:	f0 91 6b 00 	lds	r31, 0x006B
    1030:	09 95       	icall
		}
	}
}
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	0f 90       	pop	r0
    1054:	1f 90       	pop	r1
    1056:	18 95       	reti

00001058 <__vector_7>:

/* Prototype for ISR TIMER1 COMPA */
void __vector_7(void)   __attribute__((signal));
void __vector_7(void)
{
    1058:	1f 92       	push	r1
    105a:	0f 92       	push	r0
    105c:	0f b6       	in	r0, 0x3f	; 63
    105e:	0f 92       	push	r0
    1060:	11 24       	eor	r1, r1
    1062:	2f 93       	push	r18
    1064:	3f 93       	push	r19
    1066:	4f 93       	push	r20
    1068:	5f 93       	push	r21
    106a:	6f 93       	push	r22
    106c:	7f 93       	push	r23
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	af 93       	push	r26
    1074:	bf 93       	push	r27
    1076:	ef 93       	push	r30
    1078:	ff 93       	push	r31
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    1082:	80 91 70 00 	lds	r24, 0x0070
    1086:	90 91 71 00 	lds	r25, 0x0071
    108a:	01 96       	adiw	r24, 0x01	; 1
    108c:	90 93 71 00 	sts	0x0071, r25
    1090:	80 93 70 00 	sts	0x0070, r24
	if(Local_u16CounterCTC == 10000)
    1094:	80 91 70 00 	lds	r24, 0x0070
    1098:	90 91 71 00 	lds	r25, 0x0071
    109c:	27 e2       	ldi	r18, 0x27	; 39
    109e:	80 31       	cpi	r24, 0x10	; 16
    10a0:	92 07       	cpc	r25, r18
    10a2:	79 f4       	brne	.+30     	; 0x10c2 <__vector_7+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    10a4:	10 92 71 00 	sts	0x0071, r1
    10a8:	10 92 70 00 	sts	0x0070, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CTC_COMPA != NULL)
    10ac:	80 91 66 00 	lds	r24, 0x0066
    10b0:	90 91 67 00 	lds	r25, 0x0067
    10b4:	00 97       	sbiw	r24, 0x00	; 0
    10b6:	29 f0       	breq	.+10     	; 0x10c2 <__vector_7+0x6a>
		{
			TIMERS_pfTimer1CTC_COMPA();
    10b8:	e0 91 66 00 	lds	r30, 0x0066
    10bc:	f0 91 67 00 	lds	r31, 0x0067
    10c0:	09 95       	icall
		}
	}
}
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	ff 91       	pop	r31
    10c8:	ef 91       	pop	r30
    10ca:	bf 91       	pop	r27
    10cc:	af 91       	pop	r26
    10ce:	9f 91       	pop	r25
    10d0:	8f 91       	pop	r24
    10d2:	7f 91       	pop	r23
    10d4:	6f 91       	pop	r22
    10d6:	5f 91       	pop	r21
    10d8:	4f 91       	pop	r20
    10da:	3f 91       	pop	r19
    10dc:	2f 91       	pop	r18
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	0f 90       	pop	r0
    10e4:	1f 90       	pop	r1
    10e6:	18 95       	reti

000010e8 <__vector_6>:

/* Prototype for ISR TIMER1 CAPT */
void __vector_6(void)   __attribute__((signal));
void __vector_6(void)
{
    10e8:	1f 92       	push	r1
    10ea:	0f 92       	push	r0
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	0f 92       	push	r0
    10f0:	11 24       	eor	r1, r1
    10f2:	2f 93       	push	r18
    10f4:	3f 93       	push	r19
    10f6:	4f 93       	push	r20
    10f8:	5f 93       	push	r21
    10fa:	6f 93       	push	r22
    10fc:	7f 93       	push	r23
    10fe:	8f 93       	push	r24
    1100:	9f 93       	push	r25
    1102:	af 93       	push	r26
    1104:	bf 93       	push	r27
    1106:	ef 93       	push	r30
    1108:	ff 93       	push	r31
    110a:	df 93       	push	r29
    110c:	cf 93       	push	r28
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCAPT = 0;
	Local_u16CounterCAPT++;
    1112:	80 91 72 00 	lds	r24, 0x0072
    1116:	90 91 73 00 	lds	r25, 0x0073
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	90 93 73 00 	sts	0x0073, r25
    1120:	80 93 72 00 	sts	0x0072, r24
	if(Local_u16CounterCAPT == 10000)
    1124:	80 91 72 00 	lds	r24, 0x0072
    1128:	90 91 73 00 	lds	r25, 0x0073
    112c:	27 e2       	ldi	r18, 0x27	; 39
    112e:	80 31       	cpi	r24, 0x10	; 16
    1130:	92 07       	cpc	r25, r18
    1132:	79 f4       	brne	.+30     	; 0x1152 <__vector_6+0x6a>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCAPT = 0;
    1134:	10 92 73 00 	sts	0x0073, r1
    1138:	10 92 72 00 	sts	0x0072, r1
		/* Call App Function */
		if(TIMERS_pfTimer1CAPT != NULL)
    113c:	80 91 68 00 	lds	r24, 0x0068
    1140:	90 91 69 00 	lds	r25, 0x0069
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	29 f0       	breq	.+10     	; 0x1152 <__vector_6+0x6a>
		{
			TIMERS_pfTimer1CAPT();
    1148:	e0 91 68 00 	lds	r30, 0x0068
    114c:	f0 91 69 00 	lds	r31, 0x0069
    1150:	09 95       	icall
		}
	}
}
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	ff 91       	pop	r31
    1158:	ef 91       	pop	r30
    115a:	bf 91       	pop	r27
    115c:	af 91       	pop	r26
    115e:	9f 91       	pop	r25
    1160:	8f 91       	pop	r24
    1162:	7f 91       	pop	r23
    1164:	6f 91       	pop	r22
    1166:	5f 91       	pop	r21
    1168:	4f 91       	pop	r20
    116a:	3f 91       	pop	r19
    116c:	2f 91       	pop	r18
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	0f 90       	pop	r0
    1174:	1f 90       	pop	r1
    1176:	18 95       	reti

00001178 <__vector_11>:

/* Prototype for ISR TIMER0 OVF */
void __vector_11(void)   __attribute__((signal));
void __vector_11(void)
{
    1178:	1f 92       	push	r1
    117a:	0f 92       	push	r0
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	0f 92       	push	r0
    1180:	11 24       	eor	r1, r1
    1182:	2f 93       	push	r18
    1184:	3f 93       	push	r19
    1186:	4f 93       	push	r20
    1188:	5f 93       	push	r21
    118a:	6f 93       	push	r22
    118c:	7f 93       	push	r23
    118e:	8f 93       	push	r24
    1190:	9f 93       	push	r25
    1192:	af 93       	push	r26
    1194:	bf 93       	push	r27
    1196:	ef 93       	push	r30
    1198:	ff 93       	push	r31
    119a:	df 93       	push	r29
    119c:	cf 93       	push	r28
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    11a2:	80 91 74 00 	lds	r24, 0x0074
    11a6:	90 91 75 00 	lds	r25, 0x0075
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	90 93 75 00 	sts	0x0075, r25
    11b0:	80 93 74 00 	sts	0x0074, r24
	if(Local_u16CounterOVF == 3907)
    11b4:	80 91 74 00 	lds	r24, 0x0074
    11b8:	90 91 75 00 	lds	r25, 0x0075
    11bc:	2f e0       	ldi	r18, 0x0F	; 15
    11be:	83 34       	cpi	r24, 0x43	; 67
    11c0:	92 07       	cpc	r25, r18
    11c2:	99 f4       	brne	.+38     	; 0x11ea <__vector_11+0x72>
	{
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    11c4:	e2 e5       	ldi	r30, 0x52	; 82
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 ec       	ldi	r24, 0xC0	; 192
    11ca:	80 83       	st	Z, r24
		/* Clear the OVF Counter */
		Local_u16CounterOVF = 0;
    11cc:	10 92 75 00 	sts	0x0075, r1
    11d0:	10 92 74 00 	sts	0x0074, r1
		/* Call App Function */
		if(TIMERS_pfTimer0OVF != NULL)
    11d4:	80 91 60 00 	lds	r24, 0x0060
    11d8:	90 91 61 00 	lds	r25, 0x0061
    11dc:	00 97       	sbiw	r24, 0x00	; 0
    11de:	29 f0       	breq	.+10     	; 0x11ea <__vector_11+0x72>
		{
			TIMERS_pfTimer0OVF();
    11e0:	e0 91 60 00 	lds	r30, 0x0060
    11e4:	f0 91 61 00 	lds	r31, 0x0061
    11e8:	09 95       	icall
		}
	}
}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	ff 91       	pop	r31
    11f0:	ef 91       	pop	r30
    11f2:	bf 91       	pop	r27
    11f4:	af 91       	pop	r26
    11f6:	9f 91       	pop	r25
    11f8:	8f 91       	pop	r24
    11fa:	7f 91       	pop	r23
    11fc:	6f 91       	pop	r22
    11fe:	5f 91       	pop	r21
    1200:	4f 91       	pop	r20
    1202:	3f 91       	pop	r19
    1204:	2f 91       	pop	r18
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	0f 90       	pop	r0
    120c:	1f 90       	pop	r1
    120e:	18 95       	reti

00001210 <__vector_10>:

/* Prototype for ISR TIMER0 CTC */
void __vector_10(void)   __attribute__((signal));
void __vector_10(void)
{
    1210:	1f 92       	push	r1
    1212:	0f 92       	push	r0
    1214:	0f b6       	in	r0, 0x3f	; 63
    1216:	0f 92       	push	r0
    1218:	11 24       	eor	r1, r1
    121a:	2f 93       	push	r18
    121c:	3f 93       	push	r19
    121e:	4f 93       	push	r20
    1220:	5f 93       	push	r21
    1222:	6f 93       	push	r22
    1224:	7f 93       	push	r23
    1226:	8f 93       	push	r24
    1228:	9f 93       	push	r25
    122a:	af 93       	push	r26
    122c:	bf 93       	push	r27
    122e:	ef 93       	push	r30
    1230:	ff 93       	push	r31
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    123a:	80 91 76 00 	lds	r24, 0x0076
    123e:	90 91 77 00 	lds	r25, 0x0077
    1242:	01 96       	adiw	r24, 0x01	; 1
    1244:	90 93 77 00 	sts	0x0077, r25
    1248:	80 93 76 00 	sts	0x0076, r24
	if(Local_u16CounterCTC == 5)
    124c:	80 91 76 00 	lds	r24, 0x0076
    1250:	90 91 77 00 	lds	r25, 0x0077
    1254:	85 30       	cpi	r24, 0x05	; 5
    1256:	91 05       	cpc	r25, r1
    1258:	79 f4       	brne	.+30     	; 0x1278 <__vector_10+0x68>
	{
		/* Clear the CTC Counter */
		Local_u16CounterCTC = 0;
    125a:	10 92 77 00 	sts	0x0077, r1
    125e:	10 92 76 00 	sts	0x0076, r1
		/* Call App Function */
		if(TIMERS_pfTimer0CTC != NULL)
    1262:	80 91 62 00 	lds	r24, 0x0062
    1266:	90 91 63 00 	lds	r25, 0x0063
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	29 f0       	breq	.+10     	; 0x1278 <__vector_10+0x68>
		{
			TIMERS_pfTimer0CTC();
    126e:	e0 91 62 00 	lds	r30, 0x0062
    1272:	f0 91 63 00 	lds	r31, 0x0063
    1276:	09 95       	icall
		}
	}
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	ff 91       	pop	r31
    127e:	ef 91       	pop	r30
    1280:	bf 91       	pop	r27
    1282:	af 91       	pop	r26
    1284:	9f 91       	pop	r25
    1286:	8f 91       	pop	r24
    1288:	7f 91       	pop	r23
    128a:	6f 91       	pop	r22
    128c:	5f 91       	pop	r21
    128e:	4f 91       	pop	r20
    1290:	3f 91       	pop	r19
    1292:	2f 91       	pop	r18
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	0f 90       	pop	r0
    129a:	1f 90       	pop	r1
    129c:	18 95       	reti

0000129e <main>:
void App_TaskTwo(void);
void App_TaskThree(void);


int main(void)
{
    129e:	df 93       	push	r29
    12a0:	cf 93       	push	r28
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidInit();
    12a6:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidInit>

	GI_voidEnableGI();
    12aa:	0e 94 b5 04 	call	0x96a	; 0x96a <GI_voidEnableGI>

	/* Create Tasks */
	RTO_u8CreateTask(0,1000,6000,&App_TaskOne);
    12ae:	25 e7       	ldi	r18, 0x75	; 117
    12b0:	39 e0       	ldi	r19, 0x09	; 9
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	68 ee       	ldi	r22, 0xE8	; 232
    12b6:	73 e0       	ldi	r23, 0x03	; 3
    12b8:	40 e7       	ldi	r20, 0x70	; 112
    12ba:	57 e1       	ldi	r21, 0x17	; 23
    12bc:	0e 94 de 04 	call	0x9bc	; 0x9bc <RTO_u8CreateTask>
	RTO_u8CreateTask(1,2000,0,&App_TaskTwo);
    12c0:	20 e9       	ldi	r18, 0x90	; 144
    12c2:	39 e0       	ldi	r19, 0x09	; 9
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	60 ed       	ldi	r22, 0xD0	; 208
    12c8:	77 e0       	ldi	r23, 0x07	; 7
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	0e 94 de 04 	call	0x9bc	; 0x9bc <RTO_u8CreateTask>
	RTO_u8CreateTask(2,5000,0,&App_TaskThree);
    12d2:	2b ea       	ldi	r18, 0xAB	; 171
    12d4:	39 e0       	ldi	r19, 0x09	; 9
    12d6:	82 e0       	ldi	r24, 0x02	; 2
    12d8:	68 e8       	ldi	r22, 0x88	; 136
    12da:	73 e1       	ldi	r23, 0x13	; 19
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	0e 94 de 04 	call	0x9bc	; 0x9bc <RTO_u8CreateTask>

	RTO_voidInit();
    12e4:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <RTO_voidInit>
    12e8:	ff cf       	rjmp	.-2      	; 0x12e8 <main+0x4a>

000012ea <App_TaskOne>:
	while(1);
	return 0;
}
void App_TaskOne(void)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	cd b7       	in	r28, 0x3d	; 61
    12f0:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0)
    12f2:	80 91 78 00 	lds	r24, 0x0078
    12f6:	88 23       	and	r24, r24
    12f8:	49 f4       	brne	.+18     	; 0x130c <App_TaskOne+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_HIGH);
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8SetPinValue>
		Local_u8Flag = 1;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	80 93 78 00 	sts	0x0078, r24
    130a:	07 c0       	rjmp	.+14     	; 0x131a <App_TaskOne+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_LOW);
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8SetPinValue>
		Local_u8Flag = 0;
    1316:	10 92 78 00 	sts	0x0078, r1
	}
}
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <App_TaskTwo>:

void App_TaskTwo(void)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	cd b7       	in	r28, 0x3d	; 61
    1326:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0)
    1328:	80 91 79 00 	lds	r24, 0x0079
    132c:	88 23       	and	r24, r24
    132e:	49 f4       	brne	.+18     	; 0x1342 <App_TaskTwo+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_HIGH);
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	61 e0       	ldi	r22, 0x01	; 1
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8SetPinValue>
		Local_u8Flag = 1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	80 93 79 00 	sts	0x0079, r24
    1340:	07 c0       	rjmp	.+14     	; 0x1350 <App_TaskTwo+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN1,DIO_u8_LOW);
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	40 e0       	ldi	r20, 0x00	; 0
    1348:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8SetPinValue>
		Local_u8Flag = 0;
    134c:	10 92 79 00 	sts	0x0079, r1
	}
}
    1350:	cf 91       	pop	r28
    1352:	df 91       	pop	r29
    1354:	08 95       	ret

00001356 <App_TaskThree>:
void App_TaskThree(void)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Flag = 0;
	if(Local_u8Flag == 0)
    135e:	80 91 7a 00 	lds	r24, 0x007A
    1362:	88 23       	and	r24, r24
    1364:	49 f4       	brne	.+18     	; 0x1378 <App_TaskThree+0x22>
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_HIGH);
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	62 e0       	ldi	r22, 0x02	; 2
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8SetPinValue>
		Local_u8Flag = 1;
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	80 93 7a 00 	sts	0x007A, r24
    1376:	07 c0       	rjmp	.+14     	; 0x1386 <App_TaskThree+0x30>
	}
	else
	{
		DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN2,DIO_u8_LOW);
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	62 e0       	ldi	r22, 0x02	; 2
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 89 01 	call	0x312	; 0x312 <DIO_u8SetPinValue>
		Local_u8Flag = 0;
    1382:	10 92 7a 00 	sts	0x007A, r1
	}
}
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <_exit>:
    138c:	f8 94       	cli

0000138e <__stop_program>:
    138e:	ff cf       	rjmp	.-2      	; 0x138e <__stop_program>
