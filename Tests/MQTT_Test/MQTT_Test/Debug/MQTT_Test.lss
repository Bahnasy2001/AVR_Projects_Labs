
MQTT_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002634  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00002634  000026c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d6  0080009a  0080009a  00002702  2**0
                  ALLOC
  3 .stab         00001e24  00000000  00000000  00002704  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001072  00000000  00000000  00004528  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000559a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000056da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000584a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007493  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000837e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000912c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000928c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009519  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009ce7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__vector_13>
      38:	0c 94 40 10 	jmp	0x2080	; 0x2080 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 39       	cpi	r26, 0x9A	; 154
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e9       	ldi	r26, 0x9A	; 154
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 11 	call	0x22a2	; 0x22a2 <main>
      8a:	0c 94 18 13 	jmp	0x2630	; 0x2630 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cf 12 	jmp	0x259e	; 0x259e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 eb 12 	jmp	0x25d6	; 0x25d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 df 12 	jmp	0x25be	; 0x25be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 fb 12 	jmp	0x25f6	; 0x25f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DIO_voidInit>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INTIAL_DIRECTION, DIO_u8_PA6_INTIAL_DIRECTION, DIO_u8_PA5_INTIAL_DIRECTION, DIO_u8_PA4_INTIAL_DIRECTION,DIO_u8_PA3_INTIAL_DIRECTION, DIO_u8_PA2_INTIAL_DIRECTION, DIO_u8_PA1_INTIAL_DIRECTION, DIO_u8_PA0_INTIAL_DIRECTION);
     b4e:	ea e3       	ldi	r30, 0x3A	; 58
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1

	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INTIAL_DIRECTION, DIO_u8_PB6_INTIAL_DIRECTION, DIO_u8_PB5_INTIAL_DIRECTION, DIO_u8_PB4_INTIAL_DIRECTION,DIO_u8_PB3_INTIAL_DIRECTION, DIO_u8_PB2_INTIAL_DIRECTION, DIO_u8_PB1_INTIAL_DIRECTION, DIO_u8_PB0_INTIAL_DIRECTION);
     b54:	e7 e3       	ldi	r30, 0x37	; 55
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	10 82       	st	Z, r1

	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INTIAL_DIRECTION, DIO_u8_PC6_INTIAL_DIRECTION, DIO_u8_PC5_INTIAL_DIRECTION, DIO_u8_PC4_INTIAL_DIRECTION,DIO_u8_PC3_INTIAL_DIRECTION, DIO_u8_PC2_INTIAL_DIRECTION, DIO_u8_PC1_INTIAL_DIRECTION, DIO_u8_PC0_INTIAL_DIRECTION);
     b5a:	e4 e3       	ldi	r30, 0x34	; 52
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	10 82       	st	Z, r1

	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INTIAL_DIRECTION, DIO_u8_PD6_INTIAL_DIRECTION, DIO_u8_PD5_INTIAL_DIRECTION, DIO_u8_PD4_INTIAL_DIRECTION,DIO_u8_PD3_INTIAL_DIRECTION, DIO_u8_PD2_INTIAL_DIRECTION, DIO_u8_PD1_INTIAL_DIRECTION, DIO_u8_PD0_INTIAL_DIRECTION);
     b60:	e1 e3       	ldi	r30, 0x31	; 49
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	82 e0       	ldi	r24, 0x02	; 2
     b66:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA7_INTIAL_VALUE, DIO_u8_PA6_INTIAL_VALUE, DIO_u8_PA5_INTIAL_VALUE, DIO_u8_PA4_INTIAL_VALUE,DIO_u8_PA3_INTIAL_VALUE, DIO_u8_PA2_INTIAL_VALUE, DIO_u8_PA1_INTIAL_VALUE, DIO_u8_PA0_INTIAL_VALUE);
     b68:	eb e3       	ldi	r30, 0x3B	; 59
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	10 82       	st	Z, r1

	DIO_u8_PORTB_REG = Conc(DIO_u8_PB7_INTIAL_VALUE, DIO_u8_PB6_INTIAL_VALUE, DIO_u8_PB5_INTIAL_VALUE, DIO_u8_PB4_INTIAL_VALUE,DIO_u8_PB3_INTIAL_VALUE, DIO_u8_PB2_INTIAL_VALUE, DIO_u8_PB1_INTIAL_VALUE, DIO_u8_PB0_INTIAL_VALUE);
     b6e:	e8 e3       	ldi	r30, 0x38	; 56
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1

	DIO_u8_PORTC_REG = Conc(DIO_u8_PC7_INTIAL_VALUE, DIO_u8_PC6_INTIAL_VALUE, DIO_u8_PC5_INTIAL_VALUE, DIO_u8_PC4_INTIAL_VALUE,DIO_u8_PC3_INTIAL_VALUE, DIO_u8_PC2_INTIAL_VALUE, DIO_u8_PC1_INTIAL_VALUE, DIO_u8_PC0_INTIAL_VALUE);
     b74:	e5 e3       	ldi	r30, 0x35	; 53
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	10 82       	st	Z, r1

	DIO_u8_PORTD_REG = Conc(DIO_u8_PD7_INTIAL_VALUE, DIO_u8_PD6_INTIAL_VALUE, DIO_u8_PD5_INTIAL_VALUE, DIO_u8_PD4_INTIAL_VALUE,DIO_u8_PD3_INTIAL_VALUE, DIO_u8_PD2_INTIAL_VALUE, DIO_u8_PD1_INTIAL_VALUE, DIO_u8_PD0_INTIAL_VALUE);
     b7a:	e2 e3       	ldi	r30, 0x32	; 50
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	10 82       	st	Z, r1

}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <DIO_u8SetPinDirection>:


u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	cd b7       	in	r28, 0x3d	; 61
     b8c:	de b7       	in	r29, 0x3e	; 62
     b8e:	2e 97       	sbiw	r28, 0x0e	; 14
     b90:	0f b6       	in	r0, 0x3f	; 63
     b92:	f8 94       	cli
     b94:	de bf       	out	0x3e, r29	; 62
     b96:	0f be       	out	0x3f, r0	; 63
     b98:	cd bf       	out	0x3d, r28	; 61
     b9a:	8a 83       	std	Y+2, r24	; 0x02
     b9c:	6b 83       	std	Y+3, r22	; 0x03
     b9e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)&&((Copy_u8PinDirection == DIO_u8_INPUT)||(Copy_u8PinDirection == DIO_u8_OUTPUT)))
     ba4:	8a 81       	ldd	r24, Y+2	; 0x02
     ba6:	84 30       	cpi	r24, 0x04	; 4
     ba8:	08 f0       	brcs	.+2      	; 0xbac <DIO_u8SetPinDirection+0x26>
     baa:	0d c1       	rjmp	.+538    	; 0xdc6 <DIO_u8SetPinDirection+0x240>
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	88 30       	cpi	r24, 0x08	; 8
     bb0:	08 f0       	brcs	.+2      	; 0xbb4 <DIO_u8SetPinDirection+0x2e>
     bb2:	09 c1       	rjmp	.+530    	; 0xdc6 <DIO_u8SetPinDirection+0x240>
     bb4:	8c 81       	ldd	r24, Y+4	; 0x04
     bb6:	88 23       	and	r24, r24
     bb8:	21 f0       	breq	.+8      	; 0xbc2 <DIO_u8SetPinDirection+0x3c>
     bba:	8c 81       	ldd	r24, Y+4	; 0x04
     bbc:	81 30       	cpi	r24, 0x01	; 1
     bbe:	09 f0       	breq	.+2      	; 0xbc2 <DIO_u8SetPinDirection+0x3c>
     bc0:	02 c1       	rjmp	.+516    	; 0xdc6 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	3e 87       	std	Y+14, r19	; 0x0e
     bca:	2d 87       	std	Y+13, r18	; 0x0d
     bcc:	8d 85       	ldd	r24, Y+13	; 0x0d
     bce:	9e 85       	ldd	r25, Y+14	; 0x0e
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	91 05       	cpc	r25, r1
     bd4:	09 f4       	brne	.+2      	; 0xbd8 <DIO_u8SetPinDirection+0x52>
     bd6:	4f c0       	rjmp	.+158    	; 0xc76 <DIO_u8SetPinDirection+0xf0>
     bd8:	2d 85       	ldd	r18, Y+13	; 0x0d
     bda:	3e 85       	ldd	r19, Y+14	; 0x0e
     bdc:	22 30       	cpi	r18, 0x02	; 2
     bde:	31 05       	cpc	r19, r1
     be0:	2c f4       	brge	.+10     	; 0xbec <DIO_u8SetPinDirection+0x66>
     be2:	8d 85       	ldd	r24, Y+13	; 0x0d
     be4:	9e 85       	ldd	r25, Y+14	; 0x0e
     be6:	00 97       	sbiw	r24, 0x00	; 0
     be8:	71 f0       	breq	.+28     	; 0xc06 <DIO_u8SetPinDirection+0x80>
     bea:	ee c0       	rjmp	.+476    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
     bec:	2d 85       	ldd	r18, Y+13	; 0x0d
     bee:	3e 85       	ldd	r19, Y+14	; 0x0e
     bf0:	22 30       	cpi	r18, 0x02	; 2
     bf2:	31 05       	cpc	r19, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <DIO_u8SetPinDirection+0x72>
     bf6:	77 c0       	rjmp	.+238    	; 0xce6 <DIO_u8SetPinDirection+0x160>
     bf8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bfa:	9e 85       	ldd	r25, Y+14	; 0x0e
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	91 05       	cpc	r25, r1
     c00:	09 f4       	brne	.+2      	; 0xc04 <DIO_u8SetPinDirection+0x7e>
     c02:	a9 c0       	rjmp	.+338    	; 0xd56 <DIO_u8SetPinDirection+0x1d0>
     c04:	e1 c0       	rjmp	.+450    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinId)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	28 2f       	mov	r18, r24
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	3c 87       	std	Y+12, r19	; 0x0c
     c0e:	2b 87       	std	Y+11, r18	; 0x0b
     c10:	8b 85       	ldd	r24, Y+11	; 0x0b
     c12:	9c 85       	ldd	r25, Y+12	; 0x0c
     c14:	00 97       	sbiw	r24, 0x00	; 0
     c16:	31 f0       	breq	.+12     	; 0xc24 <DIO_u8SetPinDirection+0x9e>
     c18:	2b 85       	ldd	r18, Y+11	; 0x0b
     c1a:	3c 85       	ldd	r19, Y+12	; 0x0c
     c1c:	21 30       	cpi	r18, 0x01	; 1
     c1e:	31 05       	cpc	r19, r1
     c20:	b1 f0       	breq	.+44     	; 0xc4e <DIO_u8SetPinDirection+0xc8>
     c22:	d2 c0       	rjmp	.+420    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     c24:	aa e3       	ldi	r26, 0x3A	; 58
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ea e3       	ldi	r30, 0x3A	; 58
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	48 2f       	mov	r20, r24
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	28 2f       	mov	r18, r24
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	81 e0       	ldi	r24, 0x01	; 1
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	02 2e       	mov	r0, r18
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <DIO_u8SetPinDirection+0xbc>
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	0a 94       	dec	r0
     c44:	e2 f7       	brpl	.-8      	; 0xc3e <DIO_u8SetPinDirection+0xb8>
     c46:	80 95       	com	r24
     c48:	84 23       	and	r24, r20
     c4a:	8c 93       	st	X, r24
     c4c:	bd c0       	rjmp	.+378    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);break;
     c4e:	aa e3       	ldi	r26, 0x3A	; 58
     c50:	b0 e0       	ldi	r27, 0x00	; 0
     c52:	ea e3       	ldi	r30, 0x3A	; 58
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	48 2f       	mov	r20, r24
     c5a:	8b 81       	ldd	r24, Y+3	; 0x03
     c5c:	28 2f       	mov	r18, r24
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	02 2e       	mov	r0, r18
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <DIO_u8SetPinDirection+0xe6>
     c68:	88 0f       	add	r24, r24
     c6a:	99 1f       	adc	r25, r25
     c6c:	0a 94       	dec	r0
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <DIO_u8SetPinDirection+0xe2>
     c70:	84 2b       	or	r24, r20
     c72:	8c 93       	st	X, r24
     c74:	a9 c0       	rjmp	.+338    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinId)
     c76:	8b 81       	ldd	r24, Y+3	; 0x03
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	3a 87       	std	Y+10, r19	; 0x0a
     c7e:	29 87       	std	Y+9, r18	; 0x09
     c80:	89 85       	ldd	r24, Y+9	; 0x09
     c82:	9a 85       	ldd	r25, Y+10	; 0x0a
     c84:	00 97       	sbiw	r24, 0x00	; 0
     c86:	31 f0       	breq	.+12     	; 0xc94 <DIO_u8SetPinDirection+0x10e>
     c88:	29 85       	ldd	r18, Y+9	; 0x09
     c8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c8c:	21 30       	cpi	r18, 0x01	; 1
     c8e:	31 05       	cpc	r19, r1
     c90:	b1 f0       	breq	.+44     	; 0xcbe <DIO_u8SetPinDirection+0x138>
     c92:	9a c0       	rjmp	.+308    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     c94:	a7 e3       	ldi	r26, 0x37	; 55
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e7 e3       	ldi	r30, 0x37	; 55
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	48 2f       	mov	r20, r24
     ca0:	8b 81       	ldd	r24, Y+3	; 0x03
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	02 2e       	mov	r0, r18
     cac:	02 c0       	rjmp	.+4      	; 0xcb2 <DIO_u8SetPinDirection+0x12c>
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	0a 94       	dec	r0
     cb4:	e2 f7       	brpl	.-8      	; 0xcae <DIO_u8SetPinDirection+0x128>
     cb6:	80 95       	com	r24
     cb8:	84 23       	and	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	85 c0       	rjmp	.+266    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);break;
     cbe:	a7 e3       	ldi	r26, 0x37	; 55
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e7 e3       	ldi	r30, 0x37	; 55
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <DIO_u8SetPinDirection+0x156>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <DIO_u8SetPinDirection+0x152>
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	71 c0       	rjmp	.+226    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinId)
     ce6:	8b 81       	ldd	r24, Y+3	; 0x03
     ce8:	28 2f       	mov	r18, r24
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	38 87       	std	Y+8, r19	; 0x08
     cee:	2f 83       	std	Y+7, r18	; 0x07
     cf0:	8f 81       	ldd	r24, Y+7	; 0x07
     cf2:	98 85       	ldd	r25, Y+8	; 0x08
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	31 f0       	breq	.+12     	; 0xd04 <DIO_u8SetPinDirection+0x17e>
     cf8:	2f 81       	ldd	r18, Y+7	; 0x07
     cfa:	38 85       	ldd	r19, Y+8	; 0x08
     cfc:	21 30       	cpi	r18, 0x01	; 1
     cfe:	31 05       	cpc	r19, r1
     d00:	b1 f0       	breq	.+44     	; 0xd2e <DIO_u8SetPinDirection+0x1a8>
     d02:	62 c0       	rjmp	.+196    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     d04:	a4 e3       	ldi	r26, 0x34	; 52
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e4 e3       	ldi	r30, 0x34	; 52
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <DIO_u8SetPinDirection+0x19c>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <DIO_u8SetPinDirection+0x198>
     d26:	80 95       	com	r24
     d28:	84 23       	and	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	4d c0       	rjmp	.+154    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);break;
     d2e:	a4 e3       	ldi	r26, 0x34	; 52
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	e4 e3       	ldi	r30, 0x34	; 52
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_u8SetPinDirection+0x1c6>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_u8SetPinDirection+0x1c2>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	39 c0       	rjmp	.+114    	; 0xdc8 <DIO_u8SetPinDirection+0x242>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinId)
     d56:	8b 81       	ldd	r24, Y+3	; 0x03
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	3e 83       	std	Y+6, r19	; 0x06
     d5e:	2d 83       	std	Y+5, r18	; 0x05
     d60:	8d 81       	ldd	r24, Y+5	; 0x05
     d62:	9e 81       	ldd	r25, Y+6	; 0x06
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	31 f0       	breq	.+12     	; 0xd74 <DIO_u8SetPinDirection+0x1ee>
     d68:	2d 81       	ldd	r18, Y+5	; 0x05
     d6a:	3e 81       	ldd	r19, Y+6	; 0x06
     d6c:	21 30       	cpi	r18, 0x01	; 1
     d6e:	31 05       	cpc	r19, r1
     d70:	b1 f0       	breq	.+44     	; 0xd9e <DIO_u8SetPinDirection+0x218>
     d72:	2a c0       	rjmp	.+84     	; 0xdc8 <DIO_u8SetPinDirection+0x242>
				{
					case DIO_u8_INPUT:CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     d74:	a1 e3       	ldi	r26, 0x31	; 49
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	e1 e3       	ldi	r30, 0x31	; 49
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	48 2f       	mov	r20, r24
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 2e       	mov	r0, r18
     d8c:	02 c0       	rjmp	.+4      	; 0xd92 <DIO_u8SetPinDirection+0x20c>
     d8e:	88 0f       	add	r24, r24
     d90:	99 1f       	adc	r25, r25
     d92:	0a 94       	dec	r0
     d94:	e2 f7       	brpl	.-8      	; 0xd8e <DIO_u8SetPinDirection+0x208>
     d96:	80 95       	com	r24
     d98:	84 23       	and	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	15 c0       	rjmp	.+42     	; 0xdc8 <DIO_u8SetPinDirection+0x242>
					case DIO_u8_OUTPUT:SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);break;
     d9e:	a1 e3       	ldi	r26, 0x31	; 49
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e1 e3       	ldi	r30, 0x31	; 49
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	81 e0       	ldi	r24, 0x01	; 1
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	02 2e       	mov	r0, r18
     db6:	02 c0       	rjmp	.+4      	; 0xdbc <DIO_u8SetPinDirection+0x236>
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	0a 94       	dec	r0
     dbe:	e2 f7       	brpl	.-8      	; 0xdb8 <DIO_u8SetPinDirection+0x232>
     dc0:	84 2b       	or	r24, r20
     dc2:	8c 93       	st	X, r24
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <DIO_u8SetPinDirection+0x242>
			break;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     dc6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
}
     dca:	2e 96       	adiw	r28, 0x0e	; 14
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61
     dd6:	cf 91       	pop	r28
     dd8:	df 91       	pop	r29
     dda:	08 95       	ret

00000ddc <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
     ddc:	df 93       	push	r29
     dde:	cf 93       	push	r28
     de0:	cd b7       	in	r28, 0x3d	; 61
     de2:	de b7       	in	r29, 0x3e	; 62
     de4:	2e 97       	sbiw	r28, 0x0e	; 14
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	f8 94       	cli
     dea:	de bf       	out	0x3e, r29	; 62
     dec:	0f be       	out	0x3f, r0	; 63
     dee:	cd bf       	out	0x3d, r28	; 61
     df0:	8a 83       	std	Y+2, r24	; 0x02
     df2:	6b 83       	std	Y+3, r22	; 0x03
     df4:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
     dfa:	8b 81       	ldd	r24, Y+3	; 0x03
     dfc:	88 30       	cpi	r24, 0x08	; 8
     dfe:	08 f0       	brcs	.+2      	; 0xe02 <DIO_u8SetPinValue+0x26>
     e00:	0c c1       	rjmp	.+536    	; 0x101a <DIO_u8SetPinValue+0x23e>
	{
		switch(Copy_u8PortId)
     e02:	8a 81       	ldd	r24, Y+2	; 0x02
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	3e 87       	std	Y+14, r19	; 0x0e
     e0a:	2d 87       	std	Y+13, r18	; 0x0d
     e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	91 05       	cpc	r25, r1
     e14:	09 f4       	brne	.+2      	; 0xe18 <DIO_u8SetPinValue+0x3c>
     e16:	51 c0       	rjmp	.+162    	; 0xeba <DIO_u8SetPinValue+0xde>
     e18:	2d 85       	ldd	r18, Y+13	; 0x0d
     e1a:	3e 85       	ldd	r19, Y+14	; 0x0e
     e1c:	22 30       	cpi	r18, 0x02	; 2
     e1e:	31 05       	cpc	r19, r1
     e20:	2c f4       	brge	.+10     	; 0xe2c <DIO_u8SetPinValue+0x50>
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	71 f0       	breq	.+28     	; 0xe46 <DIO_u8SetPinValue+0x6a>
     e2a:	f5 c0       	rjmp	.+490    	; 0x1016 <DIO_u8SetPinValue+0x23a>
     e2c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e2e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e30:	22 30       	cpi	r18, 0x02	; 2
     e32:	31 05       	cpc	r19, r1
     e34:	09 f4       	brne	.+2      	; 0xe38 <DIO_u8SetPinValue+0x5c>
     e36:	7b c0       	rjmp	.+246    	; 0xf2e <DIO_u8SetPinValue+0x152>
     e38:	8d 85       	ldd	r24, Y+13	; 0x0d
     e3a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	91 05       	cpc	r25, r1
     e40:	09 f4       	brne	.+2      	; 0xe44 <DIO_u8SetPinValue+0x68>
     e42:	af c0       	rjmp	.+350    	; 0xfa2 <DIO_u8SetPinValue+0x1c6>
     e44:	e8 c0       	rjmp	.+464    	; 0x1016 <DIO_u8SetPinValue+0x23a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	3c 87       	std	Y+12, r19	; 0x0c
     e4e:	2b 87       	std	Y+11, r18	; 0x0b
     e50:	8b 85       	ldd	r24, Y+11	; 0x0b
     e52:	9c 85       	ldd	r25, Y+12	; 0x0c
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	31 f0       	breq	.+12     	; 0xe64 <DIO_u8SetPinValue+0x88>
     e58:	2b 85       	ldd	r18, Y+11	; 0x0b
     e5a:	3c 85       	ldd	r19, Y+12	; 0x0c
     e5c:	21 30       	cpi	r18, 0x01	; 1
     e5e:	31 05       	cpc	r19, r1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <DIO_u8SetPinValue+0xb2>
     e62:	29 c0       	rjmp	.+82     	; 0xeb6 <DIO_u8SetPinValue+0xda>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     e64:	ab e3       	ldi	r26, 0x3B	; 59
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	eb e3       	ldi	r30, 0x3B	; 59
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinValue+0xa6>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinValue+0xa2>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	c7 c0       	rjmp	.+398    	; 0x101c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
     e8e:	ab e3       	ldi	r26, 0x3B	; 59
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	eb e3       	ldi	r30, 0x3B	; 59
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinValue+0xd0>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinValue+0xcc>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	b3 c0       	rjmp	.+358    	; 0x101c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     eb6:	19 82       	std	Y+1, r1	; 0x01
     eb8:	b1 c0       	rjmp	.+354    	; 0x101c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinValue)
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	3a 87       	std	Y+10, r19	; 0x0a
     ec2:	29 87       	std	Y+9, r18	; 0x09
     ec4:	89 85       	ldd	r24, Y+9	; 0x09
     ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	31 f0       	breq	.+12     	; 0xed8 <DIO_u8SetPinValue+0xfc>
     ecc:	29 85       	ldd	r18, Y+9	; 0x09
     ece:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed0:	21 30       	cpi	r18, 0x01	; 1
     ed2:	31 05       	cpc	r19, r1
     ed4:	b1 f0       	breq	.+44     	; 0xf02 <DIO_u8SetPinValue+0x126>
     ed6:	29 c0       	rjmp	.+82     	; 0xf2a <DIO_u8SetPinValue+0x14e>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     ed8:	a8 e3       	ldi	r26, 0x38	; 56
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e8 e3       	ldi	r30, 0x38	; 56
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_u8SetPinValue+0x11a>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_u8SetPinValue+0x116>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
     f00:	8d c0       	rjmp	.+282    	; 0x101c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
     f02:	a8 e3       	ldi	r26, 0x38	; 56
     f04:	b0 e0       	ldi	r27, 0x00	; 0
     f06:	e8 e3       	ldi	r30, 0x38	; 56
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
     f0c:	48 2f       	mov	r20, r24
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	28 2f       	mov	r18, r24
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	02 2e       	mov	r0, r18
     f1a:	02 c0       	rjmp	.+4      	; 0xf20 <DIO_u8SetPinValue+0x144>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	0a 94       	dec	r0
     f22:	e2 f7       	brpl	.-8      	; 0xf1c <DIO_u8SetPinValue+0x140>
     f24:	84 2b       	or	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	79 c0       	rjmp	.+242    	; 0x101c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     f2a:	19 82       	std	Y+1, r1	; 0x01
     f2c:	77 c0       	rjmp	.+238    	; 0x101c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PinValue)
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	38 87       	std	Y+8, r19	; 0x08
     f36:	2f 83       	std	Y+7, r18	; 0x07
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	31 f0       	breq	.+12     	; 0xf4c <DIO_u8SetPinValue+0x170>
     f40:	2f 81       	ldd	r18, Y+7	; 0x07
     f42:	38 85       	ldd	r19, Y+8	; 0x08
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	b1 f0       	breq	.+44     	; 0xf76 <DIO_u8SetPinValue+0x19a>
     f4a:	29 c0       	rjmp	.+82     	; 0xf9e <DIO_u8SetPinValue+0x1c2>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     f4c:	a5 e3       	ldi	r26, 0x35	; 53
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e3       	ldi	r30, 0x35	; 53
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <DIO_u8SetPinValue+0x18e>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <DIO_u8SetPinValue+0x18a>
     f6e:	80 95       	com	r24
     f70:	84 23       	and	r24, r20
     f72:	8c 93       	st	X, r24
     f74:	53 c0       	rjmp	.+166    	; 0x101c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
     f76:	a5 e3       	ldi	r26, 0x35	; 53
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e3       	ldi	r30, 0x35	; 53
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	48 2f       	mov	r20, r24
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	02 2e       	mov	r0, r18
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <DIO_u8SetPinValue+0x1b8>
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	0a 94       	dec	r0
     f96:	e2 f7       	brpl	.-8      	; 0xf90 <DIO_u8SetPinValue+0x1b4>
     f98:	84 2b       	or	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	3f c0       	rjmp	.+126    	; 0x101c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
     f9e:	19 82       	std	Y+1, r1	; 0x01
     fa0:	3d c0       	rjmp	.+122    	; 0x101c <DIO_u8SetPinValue+0x240>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PinValue)
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	3e 83       	std	Y+6, r19	; 0x06
     faa:	2d 83       	std	Y+5, r18	; 0x05
     fac:	8d 81       	ldd	r24, Y+5	; 0x05
     fae:	9e 81       	ldd	r25, Y+6	; 0x06
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	31 f0       	breq	.+12     	; 0xfc0 <DIO_u8SetPinValue+0x1e4>
     fb4:	2d 81       	ldd	r18, Y+5	; 0x05
     fb6:	3e 81       	ldd	r19, Y+6	; 0x06
     fb8:	21 30       	cpi	r18, 0x01	; 1
     fba:	31 05       	cpc	r19, r1
     fbc:	b1 f0       	breq	.+44     	; 0xfea <DIO_u8SetPinValue+0x20e>
     fbe:	29 c0       	rjmp	.+82     	; 0x1012 <DIO_u8SetPinValue+0x236>
				{
					case DIO_u8_LOW:CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     fc0:	a2 e3       	ldi	r26, 0x32	; 50
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e2 e3       	ldi	r30, 0x32	; 50
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	02 2e       	mov	r0, r18
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <DIO_u8SetPinValue+0x202>
     fda:	88 0f       	add	r24, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	0a 94       	dec	r0
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <DIO_u8SetPinValue+0x1fe>
     fe2:	80 95       	com	r24
     fe4:	84 23       	and	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	19 c0       	rjmp	.+50     	; 0x101c <DIO_u8SetPinValue+0x240>
					case DIO_u8_HIGH:SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
     fea:	a2 e3       	ldi	r26, 0x32	; 50
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	e2 e3       	ldi	r30, 0x32	; 50
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	48 2f       	mov	r20, r24
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	28 2f       	mov	r18, r24
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	02 2e       	mov	r0, r18
    1002:	02 c0       	rjmp	.+4      	; 0x1008 <DIO_u8SetPinValue+0x22c>
    1004:	88 0f       	add	r24, r24
    1006:	99 1f       	adc	r25, r25
    1008:	0a 94       	dec	r0
    100a:	e2 f7       	brpl	.-8      	; 0x1004 <DIO_u8SetPinValue+0x228>
    100c:	84 2b       	or	r24, r20
    100e:	8c 93       	st	X, r24
    1010:	05 c0       	rjmp	.+10     	; 0x101c <DIO_u8SetPinValue+0x240>
					default: Local_u8ErrorState = STD_TYPES_NOK;
    1012:	19 82       	std	Y+1, r1	; 0x01
    1014:	03 c0       	rjmp	.+6      	; 0x101c <DIO_u8SetPinValue+0x240>
				}
			break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1016:	19 82       	std	Y+1, r1	; 0x01
    1018:	01 c0       	rjmp	.+2      	; 0x101c <DIO_u8SetPinValue+0x240>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    101a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	2e 96       	adiw	r28, 0x0e	; 14
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
    1038:	28 97       	sbiw	r28, 0x08	; 8
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	8b 83       	std	Y+3, r24	; 0x03
    1046:	6c 83       	std	Y+4, r22	; 0x04
    1048:	5e 83       	std	Y+6, r21	; 0x06
    104a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;
	if((Copy_u8PortId <= DIO_u8_PORTD ) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	84 30       	cpi	r24, 0x04	; 4
    1054:	08 f0       	brcs	.+2      	; 0x1058 <DIO_u8GetPinValue+0x28>
    1056:	a1 c0       	rjmp	.+322    	; 0x119a <DIO_u8GetPinValue+0x16a>
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	88 30       	cpi	r24, 0x08	; 8
    105c:	08 f0       	brcs	.+2      	; 0x1060 <DIO_u8GetPinValue+0x30>
    105e:	9d c0       	rjmp	.+314    	; 0x119a <DIO_u8GetPinValue+0x16a>
    1060:	8d 81       	ldd	r24, Y+5	; 0x05
    1062:	9e 81       	ldd	r25, Y+6	; 0x06
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	09 f4       	brne	.+2      	; 0x106a <DIO_u8GetPinValue+0x3a>
    1068:	98 c0       	rjmp	.+304    	; 0x119a <DIO_u8GetPinValue+0x16a>
	{
		switch(Copy_u8PortId)
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	38 87       	std	Y+8, r19	; 0x08
    1072:	2f 83       	std	Y+7, r18	; 0x07
    1074:	4f 81       	ldd	r20, Y+7	; 0x07
    1076:	58 85       	ldd	r21, Y+8	; 0x08
    1078:	41 30       	cpi	r20, 0x01	; 1
    107a:	51 05       	cpc	r21, r1
    107c:	a9 f1       	breq	.+106    	; 0x10e8 <DIO_u8GetPinValue+0xb8>
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	82 30       	cpi	r24, 0x02	; 2
    1084:	91 05       	cpc	r25, r1
    1086:	34 f4       	brge	.+12     	; 0x1094 <DIO_u8GetPinValue+0x64>
    1088:	2f 81       	ldd	r18, Y+7	; 0x07
    108a:	38 85       	ldd	r19, Y+8	; 0x08
    108c:	21 15       	cp	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	71 f0       	breq	.+28     	; 0x10ae <DIO_u8GetPinValue+0x7e>
    1092:	81 c0       	rjmp	.+258    	; 0x1196 <DIO_u8GetPinValue+0x166>
    1094:	4f 81       	ldd	r20, Y+7	; 0x07
    1096:	58 85       	ldd	r21, Y+8	; 0x08
    1098:	42 30       	cpi	r20, 0x02	; 2
    109a:	51 05       	cpc	r21, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <DIO_u8GetPinValue+0x70>
    109e:	41 c0       	rjmp	.+130    	; 0x1122 <DIO_u8GetPinValue+0xf2>
    10a0:	8f 81       	ldd	r24, Y+7	; 0x07
    10a2:	98 85       	ldd	r25, Y+8	; 0x08
    10a4:	83 30       	cpi	r24, 0x03	; 3
    10a6:	91 05       	cpc	r25, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <DIO_u8GetPinValue+0x7c>
    10aa:	58 c0       	rjmp	.+176    	; 0x115c <DIO_u8GetPinValue+0x12c>
    10ac:	74 c0       	rjmp	.+232    	; 0x1196 <DIO_u8GetPinValue+0x166>
		{
			case DIO_u8_PORTA: Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);
    10ae:	e9 e3       	ldi	r30, 0x39	; 57
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	28 2f       	mov	r18, r24
    10b6:	30 e0       	ldi	r19, 0x00	; 0
    10b8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ba:	88 2f       	mov	r24, r24
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a9 01       	movw	r20, r18
    10c0:	02 c0       	rjmp	.+4      	; 0x10c6 <DIO_u8GetPinValue+0x96>
    10c2:	55 95       	asr	r21
    10c4:	47 95       	ror	r20
    10c6:	8a 95       	dec	r24
    10c8:	e2 f7       	brpl	.-8      	; 0x10c2 <DIO_u8GetPinValue+0x92>
    10ca:	ca 01       	movw	r24, r20
    10cc:	81 70       	andi	r24, 0x01	; 1
    10ce:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	88 23       	and	r24, r24
    10d4:	21 f4       	brne	.+8      	; 0x10de <DIO_u8GetPinValue+0xae>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    10d6:	ed 81       	ldd	r30, Y+5	; 0x05
    10d8:	fe 81       	ldd	r31, Y+6	; 0x06
    10da:	10 82       	st	Z, r1
    10dc:	5f c0       	rjmp	.+190    	; 0x119c <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    10de:	ed 81       	ldd	r30, Y+5	; 0x05
    10e0:	fe 81       	ldd	r31, Y+6	; 0x06
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 83       	st	Z, r24
    10e6:	5a c0       	rjmp	.+180    	; 0x119c <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTB: Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);
    10e8:	e6 e3       	ldi	r30, 0x36	; 54
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	28 2f       	mov	r18, r24
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	88 2f       	mov	r24, r24
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a9 01       	movw	r20, r18
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <DIO_u8GetPinValue+0xd0>
    10fc:	55 95       	asr	r21
    10fe:	47 95       	ror	r20
    1100:	8a 95       	dec	r24
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <DIO_u8GetPinValue+0xcc>
    1104:	ca 01       	movw	r24, r20
    1106:	81 70       	andi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    110a:	89 81       	ldd	r24, Y+1	; 0x01
    110c:	88 23       	and	r24, r24
    110e:	21 f4       	brne	.+8      	; 0x1118 <DIO_u8GetPinValue+0xe8>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1110:	ed 81       	ldd	r30, Y+5	; 0x05
    1112:	fe 81       	ldd	r31, Y+6	; 0x06
    1114:	10 82       	st	Z, r1
    1116:	42 c0       	rjmp	.+132    	; 0x119c <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1118:	ed 81       	ldd	r30, Y+5	; 0x05
    111a:	fe 81       	ldd	r31, Y+6	; 0x06
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	80 83       	st	Z, r24
    1120:	3d c0       	rjmp	.+122    	; 0x119c <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTC: Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);
    1122:	e3 e3       	ldi	r30, 0x33	; 51
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	88 2f       	mov	r24, r24
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a9 01       	movw	r20, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <DIO_u8GetPinValue+0x10a>
    1136:	55 95       	asr	r21
    1138:	47 95       	ror	r20
    113a:	8a 95       	dec	r24
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <DIO_u8GetPinValue+0x106>
    113e:	ca 01       	movw	r24, r20
    1140:	81 70       	andi	r24, 0x01	; 1
    1142:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	88 23       	and	r24, r24
    1148:	21 f4       	brne	.+8      	; 0x1152 <DIO_u8GetPinValue+0x122>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    114a:	ed 81       	ldd	r30, Y+5	; 0x05
    114c:	fe 81       	ldd	r31, Y+6	; 0x06
    114e:	10 82       	st	Z, r1
    1150:	25 c0       	rjmp	.+74     	; 0x119c <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1152:	ed 81       	ldd	r30, Y+5	; 0x05
    1154:	fe 81       	ldd	r31, Y+6	; 0x06
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	80 83       	st	Z, r24
    115a:	20 c0       	rjmp	.+64     	; 0x119c <DIO_u8GetPinValue+0x16c>
				}
			break;
			case DIO_u8_PORTD: Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);
    115c:	e0 e3       	ldi	r30, 0x30	; 48
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	a9 01       	movw	r20, r18
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <DIO_u8GetPinValue+0x144>
    1170:	55 95       	asr	r21
    1172:	47 95       	ror	r20
    1174:	8a 95       	dec	r24
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <DIO_u8GetPinValue+0x140>
    1178:	ca 01       	movw	r24, r20
    117a:	81 70       	andi	r24, 0x01	; 1
    117c:	89 83       	std	Y+1, r24	; 0x01
				if(Local_u8PinValue == 0)
    117e:	89 81       	ldd	r24, Y+1	; 0x01
    1180:	88 23       	and	r24, r24
    1182:	21 f4       	brne	.+8      	; 0x118c <DIO_u8GetPinValue+0x15c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1184:	ed 81       	ldd	r30, Y+5	; 0x05
    1186:	fe 81       	ldd	r31, Y+6	; 0x06
    1188:	10 82       	st	Z, r1
    118a:	08 c0       	rjmp	.+16     	; 0x119c <DIO_u8GetPinValue+0x16c>
				}
				else
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    118c:	ed 81       	ldd	r30, Y+5	; 0x05
    118e:	fe 81       	ldd	r31, Y+6	; 0x06
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	80 83       	st	Z, r24
    1194:	03 c0       	rjmp	.+6      	; 0x119c <DIO_u8GetPinValue+0x16c>
				}
			break;
			default: Local_u8ErrorState = STD_TYPES_NOK;
    1196:	1a 82       	std	Y+2, r1	; 0x02
    1198:	01 c0       	rjmp	.+2      	; 0x119c <DIO_u8GetPinValue+0x16c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    119a:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    119e:	28 96       	adiw	r28, 0x08	; 8
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62
    11b8:	2d 97       	sbiw	r28, 0x0d	; 13
    11ba:	0f b6       	in	r0, 0x3f	; 63
    11bc:	f8 94       	cli
    11be:	de bf       	out	0x3e, r29	; 62
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	cd bf       	out	0x3d, r28	; 61
    11c4:	8a 83       	std	Y+2, r24	; 0x02
    11c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT))
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	88 23       	and	r24, r24
    11d0:	21 f0       	breq	.+8      	; 0x11da <DIO_u8SetPortDirection+0x2a>
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	09 f0       	breq	.+2      	; 0x11da <DIO_u8SetPortDirection+0x2a>
    11d8:	82 c0       	rjmp	.+260    	; 0x12de <DIO_u8SetPortDirection+0x12e>
	{
		switch(Copy_u8PortId)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	3d 87       	std	Y+13, r19	; 0x0d
    11e2:	2c 87       	std	Y+12, r18	; 0x0c
    11e4:	8c 85       	ldd	r24, Y+12	; 0x0c
    11e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	91 05       	cpc	r25, r1
    11ec:	71 f1       	breq	.+92     	; 0x124a <DIO_u8SetPortDirection+0x9a>
    11ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    11f2:	22 30       	cpi	r18, 0x02	; 2
    11f4:	31 05       	cpc	r19, r1
    11f6:	2c f4       	brge	.+10     	; 0x1202 <DIO_u8SetPortDirection+0x52>
    11f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    11fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	69 f0       	breq	.+26     	; 0x121a <DIO_u8SetPortDirection+0x6a>
    1200:	6c c0       	rjmp	.+216    	; 0x12da <DIO_u8SetPortDirection+0x12a>
    1202:	2c 85       	ldd	r18, Y+12	; 0x0c
    1204:	3d 85       	ldd	r19, Y+13	; 0x0d
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	b9 f1       	breq	.+110    	; 0x127a <DIO_u8SetPortDirection+0xca>
    120c:	8c 85       	ldd	r24, Y+12	; 0x0c
    120e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1210:	83 30       	cpi	r24, 0x03	; 3
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <DIO_u8SetPortDirection+0x68>
    1216:	49 c0       	rjmp	.+146    	; 0x12aa <DIO_u8SetPortDirection+0xfa>
    1218:	60 c0       	rjmp	.+192    	; 0x12da <DIO_u8SetPortDirection+0x12a>
		{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3b 87       	std	Y+11, r19	; 0x0b
    1222:	2a 87       	std	Y+10, r18	; 0x0a
    1224:	8a 85       	ldd	r24, Y+10	; 0x0a
    1226:	9b 85       	ldd	r25, Y+11	; 0x0b
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	31 f0       	breq	.+12     	; 0x1238 <DIO_u8SetPortDirection+0x88>
    122c:	2a 85       	ldd	r18, Y+10	; 0x0a
    122e:	3b 85       	ldd	r19, Y+11	; 0x0b
    1230:	21 30       	cpi	r18, 0x01	; 1
    1232:	31 05       	cpc	r19, r1
    1234:	29 f0       	breq	.+10     	; 0x1240 <DIO_u8SetPortDirection+0x90>
    1236:	54 c0       	rjmp	.+168    	; 0x12e0 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRA_REG = 0x00;break;
    1238:	ea e3       	ldi	r30, 0x3A	; 58
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	10 82       	st	Z, r1
    123e:	50 c0       	rjmp	.+160    	; 0x12e0 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRA_REG = 0xFF;break;
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	80 83       	st	Z, r24
    1248:	4b c0       	rjmp	.+150    	; 0x12e0 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PortDirection)
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	39 87       	std	Y+9, r19	; 0x09
    1252:	28 87       	std	Y+8, r18	; 0x08
    1254:	88 85       	ldd	r24, Y+8	; 0x08
    1256:	99 85       	ldd	r25, Y+9	; 0x09
    1258:	00 97       	sbiw	r24, 0x00	; 0
    125a:	31 f0       	breq	.+12     	; 0x1268 <DIO_u8SetPortDirection+0xb8>
    125c:	28 85       	ldd	r18, Y+8	; 0x08
    125e:	39 85       	ldd	r19, Y+9	; 0x09
    1260:	21 30       	cpi	r18, 0x01	; 1
    1262:	31 05       	cpc	r19, r1
    1264:	29 f0       	breq	.+10     	; 0x1270 <DIO_u8SetPortDirection+0xc0>
    1266:	3c c0       	rjmp	.+120    	; 0x12e0 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRB_REG = 0x00;break;
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	10 82       	st	Z, r1
    126e:	38 c0       	rjmp	.+112    	; 0x12e0 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRB_REG = 0xFF;break;
    1270:	e7 e3       	ldi	r30, 0x37	; 55
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	8f ef       	ldi	r24, 0xFF	; 255
    1276:	80 83       	st	Z, r24
    1278:	33 c0       	rjmp	.+102    	; 0x12e0 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTC:
				switch(Copy_u8PortDirection)
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	28 2f       	mov	r18, r24
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	3f 83       	std	Y+7, r19	; 0x07
    1282:	2e 83       	std	Y+6, r18	; 0x06
    1284:	8e 81       	ldd	r24, Y+6	; 0x06
    1286:	9f 81       	ldd	r25, Y+7	; 0x07
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	31 f0       	breq	.+12     	; 0x1298 <DIO_u8SetPortDirection+0xe8>
    128c:	2e 81       	ldd	r18, Y+6	; 0x06
    128e:	3f 81       	ldd	r19, Y+7	; 0x07
    1290:	21 30       	cpi	r18, 0x01	; 1
    1292:	31 05       	cpc	r19, r1
    1294:	29 f0       	breq	.+10     	; 0x12a0 <DIO_u8SetPortDirection+0xf0>
    1296:	24 c0       	rjmp	.+72     	; 0x12e0 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRC_REG = 0x00;break;
    1298:	e4 e3       	ldi	r30, 0x34	; 52
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	10 82       	st	Z, r1
    129e:	20 c0       	rjmp	.+64     	; 0x12e0 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRC_REG = 0xFF;break;
    12a0:	e4 e3       	ldi	r30, 0x34	; 52
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	80 83       	st	Z, r24
    12a8:	1b c0       	rjmp	.+54     	; 0x12e0 <DIO_u8SetPortDirection+0x130>
				}
			break;
			case DIO_u8_PORTD:
				switch(Copy_u8PortDirection)
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	28 2f       	mov	r18, r24
    12ae:	30 e0       	ldi	r19, 0x00	; 0
    12b0:	3d 83       	std	Y+5, r19	; 0x05
    12b2:	2c 83       	std	Y+4, r18	; 0x04
    12b4:	8c 81       	ldd	r24, Y+4	; 0x04
    12b6:	9d 81       	ldd	r25, Y+5	; 0x05
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	31 f0       	breq	.+12     	; 0x12c8 <DIO_u8SetPortDirection+0x118>
    12bc:	2c 81       	ldd	r18, Y+4	; 0x04
    12be:	3d 81       	ldd	r19, Y+5	; 0x05
    12c0:	21 30       	cpi	r18, 0x01	; 1
    12c2:	31 05       	cpc	r19, r1
    12c4:	29 f0       	breq	.+10     	; 0x12d0 <DIO_u8SetPortDirection+0x120>
    12c6:	0c c0       	rjmp	.+24     	; 0x12e0 <DIO_u8SetPortDirection+0x130>
				{
					case DIO_u8_INPUT:DIO_u8_DDRD_REG = 0x00;break;
    12c8:	e1 e3       	ldi	r30, 0x31	; 49
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	10 82       	st	Z, r1
    12ce:	08 c0       	rjmp	.+16     	; 0x12e0 <DIO_u8SetPortDirection+0x130>
					case DIO_u8_OUTPUT:DIO_u8_DDRD_REG = 0xFF;break;
    12d0:	e1 e3       	ldi	r30, 0x31	; 49
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	80 83       	st	Z, r24
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <DIO_u8SetPortDirection+0x130>
				}
			break;
			default:Local_u8ErrorState = STD_TYPES_NOK;
    12da:	19 82       	std	Y+1, r1	; 0x01
    12dc:	01 c0       	rjmp	.+2      	; 0x12e0 <DIO_u8SetPortDirection+0x130>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    12de:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12e2:	2d 96       	adiw	r28, 0x0d	; 13
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <DIO_u8SetPortValue+0x6>
    12fa:	00 d0       	rcall	.+0      	; 0x12fc <DIO_u8SetPortValue+0x8>
    12fc:	0f 92       	push	r0
    12fe:	cd b7       	in	r28, 0x3d	; 61
    1300:	de b7       	in	r29, 0x3e	; 62
    1302:	8a 83       	std	Y+2, r24	; 0x02
    1304:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3d 83       	std	Y+5, r19	; 0x05
    1312:	2c 83       	std	Y+4, r18	; 0x04
    1314:	8c 81       	ldd	r24, Y+4	; 0x04
    1316:	9d 81       	ldd	r25, Y+5	; 0x05
    1318:	81 30       	cpi	r24, 0x01	; 1
    131a:	91 05       	cpc	r25, r1
    131c:	d1 f0       	breq	.+52     	; 0x1352 <DIO_u8SetPortValue+0x5e>
    131e:	2c 81       	ldd	r18, Y+4	; 0x04
    1320:	3d 81       	ldd	r19, Y+5	; 0x05
    1322:	22 30       	cpi	r18, 0x02	; 2
    1324:	31 05       	cpc	r19, r1
    1326:	2c f4       	brge	.+10     	; 0x1332 <DIO_u8SetPortValue+0x3e>
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	9d 81       	ldd	r25, Y+5	; 0x05
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	61 f0       	breq	.+24     	; 0x1348 <DIO_u8SetPortValue+0x54>
    1330:	1f c0       	rjmp	.+62     	; 0x1370 <DIO_u8SetPortValue+0x7c>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	22 30       	cpi	r18, 0x02	; 2
    1338:	31 05       	cpc	r19, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <DIO_u8SetPortValue+0x68>
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	83 30       	cpi	r24, 0x03	; 3
    1342:	91 05       	cpc	r25, r1
    1344:	81 f0       	breq	.+32     	; 0x1366 <DIO_u8SetPortValue+0x72>
    1346:	14 c0       	rjmp	.+40     	; 0x1370 <DIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue; break;
    1348:	eb e3       	ldi	r30, 0x3B	; 59
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	80 83       	st	Z, r24
    1350:	10 c0       	rjmp	.+32     	; 0x1372 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue; break;
    1352:	e8 e3       	ldi	r30, 0x38	; 56
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	80 83       	st	Z, r24
    135a:	0b c0       	rjmp	.+22     	; 0x1372 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue; break;
    135c:	e5 e3       	ldi	r30, 0x35	; 53
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	80 83       	st	Z, r24
    1364:	06 c0       	rjmp	.+12     	; 0x1372 <DIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue; break;
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	80 83       	st	Z, r24
    136e:	01 c0       	rjmp	.+2      	; 0x1372 <DIO_u8SetPortValue+0x7e>
		default:Local_u8ErrorState = STD_TYPES_NOK;
    1370:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1372:	89 81       	ldd	r24, Y+1	; 0x01
}
    1374:	0f 90       	pop	r0
    1376:	0f 90       	pop	r0
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	cf 91       	pop	r28
    1380:	df 91       	pop	r29
    1382:	08 95       	ret

00001384 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    1384:	df 93       	push	r29
    1386:	cf 93       	push	r28
    1388:	00 d0       	rcall	.+0      	; 0x138a <DIO_u8GetPortValue+0x6>
    138a:	00 d0       	rcall	.+0      	; 0x138c <DIO_u8GetPortValue+0x8>
    138c:	00 d0       	rcall	.+0      	; 0x138e <DIO_u8GetPortValue+0xa>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	8a 83       	std	Y+2, r24	; 0x02
    1394:	7c 83       	std	Y+4, r23	; 0x04
    1396:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	e9 f1       	breq	.+122    	; 0x141e <DIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortId)
    13a4:	8a 81       	ldd	r24, Y+2	; 0x02
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	3e 83       	std	Y+6, r19	; 0x06
    13ac:	2d 83       	std	Y+5, r18	; 0x05
    13ae:	8d 81       	ldd	r24, Y+5	; 0x05
    13b0:	9e 81       	ldd	r25, Y+6	; 0x06
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	91 05       	cpc	r25, r1
    13b6:	e1 f0       	breq	.+56     	; 0x13f0 <DIO_u8GetPortValue+0x6c>
    13b8:	2d 81       	ldd	r18, Y+5	; 0x05
    13ba:	3e 81       	ldd	r19, Y+6	; 0x06
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	2c f4       	brge	.+10     	; 0x13cc <DIO_u8GetPortValue+0x48>
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	9e 81       	ldd	r25, Y+6	; 0x06
    13c6:	00 97       	sbiw	r24, 0x00	; 0
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <DIO_u8GetPortValue+0x5e>
    13ca:	27 c0       	rjmp	.+78     	; 0x141a <DIO_u8GetPortValue+0x96>
    13cc:	2d 81       	ldd	r18, Y+5	; 0x05
    13ce:	3e 81       	ldd	r19, Y+6	; 0x06
    13d0:	22 30       	cpi	r18, 0x02	; 2
    13d2:	31 05       	cpc	r19, r1
    13d4:	a1 f0       	breq	.+40     	; 0x13fe <DIO_u8GetPortValue+0x7a>
    13d6:	8d 81       	ldd	r24, Y+5	; 0x05
    13d8:	9e 81       	ldd	r25, Y+6	; 0x06
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	91 05       	cpc	r25, r1
    13de:	b1 f0       	breq	.+44     	; 0x140c <DIO_u8GetPortValue+0x88>
    13e0:	1c c0       	rjmp	.+56     	; 0x141a <DIO_u8GetPortValue+0x96>
		{
			case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;break;
    13e2:	e9 e3       	ldi	r30, 0x39	; 57
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ea:	fc 81       	ldd	r31, Y+4	; 0x04
    13ec:	80 83       	st	Z, r24
    13ee:	18 c0       	rjmp	.+48     	; 0x1420 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;break;
    13f0:	e6 e3       	ldi	r30, 0x36	; 54
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	eb 81       	ldd	r30, Y+3	; 0x03
    13f8:	fc 81       	ldd	r31, Y+4	; 0x04
    13fa:	80 83       	st	Z, r24
    13fc:	11 c0       	rjmp	.+34     	; 0x1420 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;break;
    13fe:	e3 e3       	ldi	r30, 0x33	; 51
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	eb 81       	ldd	r30, Y+3	; 0x03
    1406:	fc 81       	ldd	r31, Y+4	; 0x04
    1408:	80 83       	st	Z, r24
    140a:	0a c0       	rjmp	.+20     	; 0x1420 <DIO_u8GetPortValue+0x9c>
			case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;break;
    140c:	e0 e3       	ldi	r30, 0x30	; 48
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	eb 81       	ldd	r30, Y+3	; 0x03
    1414:	fc 81       	ldd	r31, Y+4	; 0x04
    1416:	80 83       	st	Z, r24
    1418:	03 c0       	rjmp	.+6      	; 0x1420 <DIO_u8GetPortValue+0x9c>
			default:Local_u8ErrorState = STD_TYPES_NOK;
    141a:	19 82       	std	Y+1, r1	; 0x01
    141c:	01 c0       	rjmp	.+2      	; 0x1420 <DIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    141e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	26 96       	adiw	r28, 0x06	; 6
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <MQTT_Connect>:

u8 packet[200] = {0};   //Packet Len <= (127 + 2):(REM LEN is one byte only)
u8 packetInd = 0; //Index to fill the packet buffer

void MQTT_Connect(u8* clientID,u8* username,u8* password,u8* willTopic, u8* willMessage)
{
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	65 97       	sbiw	r28, 0x15	; 21
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	98 87       	std	Y+8, r25	; 0x08
    1450:	8f 83       	std	Y+7, r24	; 0x07
    1452:	7a 87       	std	Y+10, r23	; 0x0a
    1454:	69 87       	std	Y+9, r22	; 0x09
    1456:	5c 87       	std	Y+12, r21	; 0x0c
    1458:	4b 87       	std	Y+11, r20	; 0x0b
    145a:	3e 87       	std	Y+14, r19	; 0x0e
    145c:	2d 87       	std	Y+13, r18	; 0x0d
    145e:	18 8b       	std	Y+16, r17	; 0x10
    1460:	0f 87       	std	Y+15, r16	; 0x0f
	packetInd = 0;
    1462:	10 92 62 01 	sts	0x0162, r1
	u8 remLen = 12 + strlen(clientID) + 2 + strlen(willTopic) + 2 + strlen(willMessage) + 2 + strlen(username) + 2 + strlen(password); // Remaining Length
    1466:	8f 81       	ldd	r24, Y+7	; 0x07
    1468:	98 85       	ldd	r25, Y+8	; 0x08
    146a:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    146e:	18 2f       	mov	r17, r24
    1470:	8d 85       	ldd	r24, Y+13	; 0x0d
    1472:	9e 85       	ldd	r25, Y+14	; 0x0e
    1474:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1478:	18 0f       	add	r17, r24
    147a:	8f 85       	ldd	r24, Y+15	; 0x0f
    147c:	98 89       	ldd	r25, Y+16	; 0x10
    147e:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1482:	18 0f       	add	r17, r24
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    148c:	18 0f       	add	r17, r24
    148e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1490:	9c 85       	ldd	r25, Y+12	; 0x0c
    1492:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1496:	81 0f       	add	r24, r17
    1498:	8c 5e       	subi	r24, 0xEC	; 236
    149a:	89 83       	std	Y+1, r24	; 0x01
	const char protocolName[] = "MQTT";
    149c:	ce 01       	movw	r24, r28
    149e:	02 96       	adiw	r24, 0x02	; 2
    14a0:	9a 8b       	std	Y+18, r25	; 0x12
    14a2:	89 8b       	std	Y+17, r24	; 0x11
    14a4:	e0 e6       	ldi	r30, 0x60	; 96
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	fc 8b       	std	Y+20, r31	; 0x14
    14aa:	eb 8b       	std	Y+19, r30	; 0x13
    14ac:	f5 e0       	ldi	r31, 0x05	; 5
    14ae:	fd 8b       	std	Y+21, r31	; 0x15
    14b0:	eb 89       	ldd	r30, Y+19	; 0x13
    14b2:	fc 89       	ldd	r31, Y+20	; 0x14
    14b4:	00 80       	ld	r0, Z
    14b6:	8b 89       	ldd	r24, Y+19	; 0x13
    14b8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ba:	01 96       	adiw	r24, 0x01	; 1
    14bc:	9c 8b       	std	Y+20, r25	; 0x14
    14be:	8b 8b       	std	Y+19, r24	; 0x13
    14c0:	e9 89       	ldd	r30, Y+17	; 0x11
    14c2:	fa 89       	ldd	r31, Y+18	; 0x12
    14c4:	00 82       	st	Z, r0
    14c6:	89 89       	ldd	r24, Y+17	; 0x11
    14c8:	9a 89       	ldd	r25, Y+18	; 0x12
    14ca:	01 96       	adiw	r24, 0x01	; 1
    14cc:	9a 8b       	std	Y+18, r25	; 0x12
    14ce:	89 8b       	std	Y+17, r24	; 0x11
    14d0:	9d 89       	ldd	r25, Y+21	; 0x15
    14d2:	91 50       	subi	r25, 0x01	; 1
    14d4:	9d 8b       	std	Y+21, r25	; 0x15
    14d6:	ed 89       	ldd	r30, Y+21	; 0x15
    14d8:	ee 23       	and	r30, r30
    14da:	51 f7       	brne	.-44     	; 0x14b0 <MQTT_Connect+0x7c>
	//Encode Packet
	packet[packetInd++] = 0x10;  //Connect Packet Type
    14dc:	20 91 62 01 	lds	r18, 0x0162
    14e0:	82 2f       	mov	r24, r18
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	fc 01       	movw	r30, r24
    14e6:	e6 56       	subi	r30, 0x66	; 102
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	80 e1       	ldi	r24, 0x10	; 16
    14ec:	80 83       	st	Z, r24
    14ee:	82 2f       	mov	r24, r18
    14f0:	8f 5f       	subi	r24, 0xFF	; 255
    14f2:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = remLen;
    14f6:	20 91 62 01 	lds	r18, 0x0162
    14fa:	82 2f       	mov	r24, r18
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	fc 01       	movw	r30, r24
    1500:	e6 56       	subi	r30, 0x66	; 102
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	80 83       	st	Z, r24
    1508:	82 2f       	mov	r24, r18
    150a:	8f 5f       	subi	r24, 0xFF	; 255
    150c:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = 0x00;
    1510:	20 91 62 01 	lds	r18, 0x0162
    1514:	82 2f       	mov	r24, r18
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	fc 01       	movw	r30, r24
    151a:	e6 56       	subi	r30, 0x66	; 102
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	10 82       	st	Z, r1
    1520:	82 2f       	mov	r24, r18
    1522:	8f 5f       	subi	r24, 0xFF	; 255
    1524:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] =  strlen(protocolName); //0x04
    1528:	20 91 62 01 	lds	r18, 0x0162
    152c:	82 2f       	mov	r24, r18
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	fc 01       	movw	r30, r24
    1532:	e6 56       	subi	r30, 0x66	; 102
    1534:	ff 4f       	sbci	r31, 0xFF	; 255
    1536:	84 e0       	ldi	r24, 0x04	; 4
    1538:	80 83       	st	Z, r24
    153a:	82 2f       	mov	r24, r18
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	80 93 62 01 	sts	0x0162, r24
	// strcpy(packet+packetInd,protocolName);
	memcpy(packet + packetInd, protocolName, strlen(protocolName));
    1542:	80 91 62 01 	lds	r24, 0x0162
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	86 56       	subi	r24, 0x66	; 102
    154c:	9f 4f       	sbci	r25, 0xFF	; 255
    154e:	9e 01       	movw	r18, r28
    1550:	2e 5f       	subi	r18, 0xFE	; 254
    1552:	3f 4f       	sbci	r19, 0xFF	; 255
    1554:	b9 01       	movw	r22, r18
    1556:	44 e0       	ldi	r20, 0x04	; 4
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
	packetInd += strlen(protocolName);
    155e:	80 91 62 01 	lds	r24, 0x0162
    1562:	8c 5f       	subi	r24, 0xFC	; 252
    1564:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = 0x04; // Level/Version
    1568:	20 91 62 01 	lds	r18, 0x0162
    156c:	82 2f       	mov	r24, r18
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	fc 01       	movw	r30, r24
    1572:	e6 56       	subi	r30, 0x66	; 102
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	84 e0       	ldi	r24, 0x04	; 4
    1578:	80 83       	st	Z, r24
    157a:	82 2f       	mov	r24, r18
    157c:	8f 5f       	subi	r24, 0xFF	; 255
    157e:	80 93 62 01 	sts	0x0162, r24
		Will QoS (01)
		Will Flag (1)
		Clean Session (1)
		Reserved (0)
	 * */
	packet[packetInd++] = 0xCE;
    1582:	20 91 62 01 	lds	r18, 0x0162
    1586:	82 2f       	mov	r24, r18
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	fc 01       	movw	r30, r24
    158c:	e6 56       	subi	r30, 0x66	; 102
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	8e ec       	ldi	r24, 0xCE	; 206
    1592:	80 83       	st	Z, r24
    1594:	82 2f       	mov	r24, r18
    1596:	8f 5f       	subi	r24, 0xFF	; 255
    1598:	80 93 62 01 	sts	0x0162, r24
	//0xFFFF keep alive time = 18 hours ,12 mins ,15 secs
	packet[packetInd++] = 0xFF;
    159c:	20 91 62 01 	lds	r18, 0x0162
    15a0:	82 2f       	mov	r24, r18
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	fc 01       	movw	r30, r24
    15a6:	e6 56       	subi	r30, 0x66	; 102
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	8f ef       	ldi	r24, 0xFF	; 255
    15ac:	80 83       	st	Z, r24
    15ae:	82 2f       	mov	r24, r18
    15b0:	8f 5f       	subi	r24, 0xFF	; 255
    15b2:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = 0xFF;
    15b6:	20 91 62 01 	lds	r18, 0x0162
    15ba:	82 2f       	mov	r24, r18
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	fc 01       	movw	r30, r24
    15c0:	e6 56       	subi	r30, 0x66	; 102
    15c2:	ff 4f       	sbci	r31, 0xFF	; 255
    15c4:	8f ef       	ldi	r24, 0xFF	; 255
    15c6:	80 83       	st	Z, r24
    15c8:	82 2f       	mov	r24, r18
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	80 93 62 01 	sts	0x0162, r24
	//UTF-8
	packet[packetInd++] = 0x00;
    15d0:	20 91 62 01 	lds	r18, 0x0162
    15d4:	82 2f       	mov	r24, r18
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	fc 01       	movw	r30, r24
    15da:	e6 56       	subi	r30, 0x66	; 102
    15dc:	ff 4f       	sbci	r31, 0xFF	; 255
    15de:	10 82       	st	Z, r1
    15e0:	82 2f       	mov	r24, r18
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = strlen(clientID);
    15e8:	f0 90 62 01 	lds	r15, 0x0162
    15ec:	0f 2d       	mov	r16, r15
    15ee:	10 e0       	ldi	r17, 0x00	; 0
    15f0:	8f 81       	ldd	r24, Y+7	; 0x07
    15f2:	98 85       	ldd	r25, Y+8	; 0x08
    15f4:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    15f8:	f8 01       	movw	r30, r16
    15fa:	e6 56       	subi	r30, 0x66	; 102
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	80 83       	st	Z, r24
    1600:	8f 2d       	mov	r24, r15
    1602:	8f 5f       	subi	r24, 0xFF	; 255
    1604:	80 93 62 01 	sts	0x0162, r24
	// strcpy(packet + packetInd,clientID);
	memcpy(packet + packetInd, clientID, strlen(clientID));
    1608:	80 91 62 01 	lds	r24, 0x0162
    160c:	88 2f       	mov	r24, r24
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	8c 01       	movw	r16, r24
    1612:	06 56       	subi	r16, 0x66	; 102
    1614:	1f 4f       	sbci	r17, 0xFF	; 255
    1616:	8f 81       	ldd	r24, Y+7	; 0x07
    1618:	98 85       	ldd	r25, Y+8	; 0x08
    161a:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    161e:	ac 01       	movw	r20, r24
    1620:	2f 81       	ldd	r18, Y+7	; 0x07
    1622:	38 85       	ldd	r19, Y+8	; 0x08
    1624:	c8 01       	movw	r24, r16
    1626:	b9 01       	movw	r22, r18
    1628:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
	packetInd += strlen(clientID);
    162c:	8f 81       	ldd	r24, Y+7	; 0x07
    162e:	98 85       	ldd	r25, Y+8	; 0x08
    1630:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1634:	98 2f       	mov	r25, r24
    1636:	80 91 62 01 	lds	r24, 0x0162
    163a:	89 0f       	add	r24, r25
    163c:	80 93 62 01 	sts	0x0162, r24
	// Will Topic
	packet[packetInd++] = 0x00;
    1640:	20 91 62 01 	lds	r18, 0x0162
    1644:	82 2f       	mov	r24, r18
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	fc 01       	movw	r30, r24
    164a:	e6 56       	subi	r30, 0x66	; 102
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	10 82       	st	Z, r1
    1650:	82 2f       	mov	r24, r18
    1652:	8f 5f       	subi	r24, 0xFF	; 255
    1654:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = strlen(willTopic);
    1658:	f0 90 62 01 	lds	r15, 0x0162
    165c:	0f 2d       	mov	r16, r15
    165e:	10 e0       	ldi	r17, 0x00	; 0
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1668:	f8 01       	movw	r30, r16
    166a:	e6 56       	subi	r30, 0x66	; 102
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	80 83       	st	Z, r24
    1670:	8f 2d       	mov	r24, r15
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	80 93 62 01 	sts	0x0162, r24
	// strcpy(packet + packetInd, willTopic);
	memcpy(packet + packetInd, willTopic, strlen(willTopic));
    1678:	80 91 62 01 	lds	r24, 0x0162
    167c:	88 2f       	mov	r24, r24
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	8c 01       	movw	r16, r24
    1682:	06 56       	subi	r16, 0x66	; 102
    1684:	1f 4f       	sbci	r17, 0xFF	; 255
    1686:	8d 85       	ldd	r24, Y+13	; 0x0d
    1688:	9e 85       	ldd	r25, Y+14	; 0x0e
    168a:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    168e:	ac 01       	movw	r20, r24
    1690:	2d 85       	ldd	r18, Y+13	; 0x0d
    1692:	3e 85       	ldd	r19, Y+14	; 0x0e
    1694:	c8 01       	movw	r24, r16
    1696:	b9 01       	movw	r22, r18
    1698:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
	packetInd += strlen(willTopic);
    169c:	8d 85       	ldd	r24, Y+13	; 0x0d
    169e:	9e 85       	ldd	r25, Y+14	; 0x0e
    16a0:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    16a4:	98 2f       	mov	r25, r24
    16a6:	80 91 62 01 	lds	r24, 0x0162
    16aa:	89 0f       	add	r24, r25
    16ac:	80 93 62 01 	sts	0x0162, r24

	// Will Message
	packet[packetInd++] = 0x00;
    16b0:	20 91 62 01 	lds	r18, 0x0162
    16b4:	82 2f       	mov	r24, r18
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	fc 01       	movw	r30, r24
    16ba:	e6 56       	subi	r30, 0x66	; 102
    16bc:	ff 4f       	sbci	r31, 0xFF	; 255
    16be:	10 82       	st	Z, r1
    16c0:	82 2f       	mov	r24, r18
    16c2:	8f 5f       	subi	r24, 0xFF	; 255
    16c4:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = strlen(willMessage);
    16c8:	f0 90 62 01 	lds	r15, 0x0162
    16cc:	0f 2d       	mov	r16, r15
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16d2:	98 89       	ldd	r25, Y+16	; 0x10
    16d4:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    16d8:	f8 01       	movw	r30, r16
    16da:	e6 56       	subi	r30, 0x66	; 102
    16dc:	ff 4f       	sbci	r31, 0xFF	; 255
    16de:	80 83       	st	Z, r24
    16e0:	8f 2d       	mov	r24, r15
    16e2:	8f 5f       	subi	r24, 0xFF	; 255
    16e4:	80 93 62 01 	sts	0x0162, r24
	// strcpy(packet + packetInd, willMessage);
	memcpy(packet + packetInd, willMessage, strlen(willMessage));
    16e8:	80 91 62 01 	lds	r24, 0x0162
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	8c 01       	movw	r16, r24
    16f2:	06 56       	subi	r16, 0x66	; 102
    16f4:	1f 4f       	sbci	r17, 0xFF	; 255
    16f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f8:	98 89       	ldd	r25, Y+16	; 0x10
    16fa:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    16fe:	ac 01       	movw	r20, r24
    1700:	2f 85       	ldd	r18, Y+15	; 0x0f
    1702:	38 89       	ldd	r19, Y+16	; 0x10
    1704:	c8 01       	movw	r24, r16
    1706:	b9 01       	movw	r22, r18
    1708:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
	packetInd += strlen(willMessage);
    170c:	8f 85       	ldd	r24, Y+15	; 0x0f
    170e:	98 89       	ldd	r25, Y+16	; 0x10
    1710:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1714:	98 2f       	mov	r25, r24
    1716:	80 91 62 01 	lds	r24, 0x0162
    171a:	89 0f       	add	r24, r25
    171c:	80 93 62 01 	sts	0x0162, r24

	//username
	packet[packetInd++] = 0x00;
    1720:	20 91 62 01 	lds	r18, 0x0162
    1724:	82 2f       	mov	r24, r18
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	fc 01       	movw	r30, r24
    172a:	e6 56       	subi	r30, 0x66	; 102
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	10 82       	st	Z, r1
    1730:	82 2f       	mov	r24, r18
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = strlen(username);
    1738:	f0 90 62 01 	lds	r15, 0x0162
    173c:	0f 2d       	mov	r16, r15
    173e:	10 e0       	ldi	r17, 0x00	; 0
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1748:	f8 01       	movw	r30, r16
    174a:	e6 56       	subi	r30, 0x66	; 102
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 83       	st	Z, r24
    1750:	8f 2d       	mov	r24, r15
    1752:	8f 5f       	subi	r24, 0xFF	; 255
    1754:	80 93 62 01 	sts	0x0162, r24
	// strcpy(packet + packetInd, username);
	memcpy(packet + packetInd, username, strlen(username));
    1758:	80 91 62 01 	lds	r24, 0x0162
    175c:	88 2f       	mov	r24, r24
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	8c 01       	movw	r16, r24
    1762:	06 56       	subi	r16, 0x66	; 102
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    176e:	ac 01       	movw	r20, r24
    1770:	29 85       	ldd	r18, Y+9	; 0x09
    1772:	3a 85       	ldd	r19, Y+10	; 0x0a
    1774:	c8 01       	movw	r24, r16
    1776:	b9 01       	movw	r22, r18
    1778:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
	packetInd += strlen(username);
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1780:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1784:	98 2f       	mov	r25, r24
    1786:	80 91 62 01 	lds	r24, 0x0162
    178a:	89 0f       	add	r24, r25
    178c:	80 93 62 01 	sts	0x0162, r24

	//password
	packet[packetInd++] = 0x00;
    1790:	20 91 62 01 	lds	r18, 0x0162
    1794:	82 2f       	mov	r24, r18
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	fc 01       	movw	r30, r24
    179a:	e6 56       	subi	r30, 0x66	; 102
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	10 82       	st	Z, r1
    17a0:	82 2f       	mov	r24, r18
    17a2:	8f 5f       	subi	r24, 0xFF	; 255
    17a4:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = strlen(password);
    17a8:	f0 90 62 01 	lds	r15, 0x0162
    17ac:	0f 2d       	mov	r16, r15
    17ae:	10 e0       	ldi	r17, 0x00	; 0
    17b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    17b4:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    17b8:	f8 01       	movw	r30, r16
    17ba:	e6 56       	subi	r30, 0x66	; 102
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 83       	st	Z, r24
    17c0:	8f 2d       	mov	r24, r15
    17c2:	8f 5f       	subi	r24, 0xFF	; 255
    17c4:	80 93 62 01 	sts	0x0162, r24
	// strcpy(packet + packetInd, password);
	memcpy(packet + packetInd, password, strlen(password));
    17c8:	80 91 62 01 	lds	r24, 0x0162
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	8c 01       	movw	r16, r24
    17d2:	06 56       	subi	r16, 0x66	; 102
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17da:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    17de:	ac 01       	movw	r20, r24
    17e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    17e2:	3c 85       	ldd	r19, Y+12	; 0x0c
    17e4:	c8 01       	movw	r24, r16
    17e6:	b9 01       	movw	r22, r18
    17e8:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
	packetInd += strlen(password);
    17ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    17ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    17f0:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    17f4:	98 2f       	mov	r25, r24
    17f6:	80 91 62 01 	lds	r24, 0x0162
    17fa:	89 0f       	add	r24, r25
    17fc:	80 93 62 01 	sts	0x0162, r24
	//Send Packet
	// Uart_Write_String(packet,packetInd,UART_7);
	UART_u8SendStringSynchWithLength(packet,packetInd);
    1800:	80 91 62 01 	lds	r24, 0x0162
    1804:	28 2f       	mov	r18, r24
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	8a e9       	ldi	r24, 0x9A	; 154
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	b9 01       	movw	r22, r18
    180e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_u8SendStringSynchWithLength>
}
    1812:	65 96       	adiw	r28, 0x15	; 21
    1814:	0f b6       	in	r0, 0x3f	; 63
    1816:	f8 94       	cli
    1818:	de bf       	out	0x3e, r29	; 62
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	cd bf       	out	0x3d, r28	; 61
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	08 95       	ret

0000182a <MQTT_Publish>:

void MQTT_Publish(u8* topic,u8* msg,u32 len,u8 QoS)
{
    182a:	ff 92       	push	r15
    182c:	0f 93       	push	r16
    182e:	1f 93       	push	r17
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	2b 97       	sbiw	r28, 0x0b	; 11
    183a:	0f b6       	in	r0, 0x3f	; 63
    183c:	f8 94       	cli
    183e:	de bf       	out	0x3e, r29	; 62
    1840:	0f be       	out	0x3f, r0	; 63
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	9c 83       	std	Y+4, r25	; 0x04
    1846:	8b 83       	std	Y+3, r24	; 0x03
    1848:	7e 83       	std	Y+6, r23	; 0x06
    184a:	6d 83       	std	Y+5, r22	; 0x05
    184c:	2f 83       	std	Y+7, r18	; 0x07
    184e:	38 87       	std	Y+8, r19	; 0x08
    1850:	49 87       	std	Y+9, r20	; 0x09
    1852:	5a 87       	std	Y+10, r21	; 0x0a
    1854:	0b 87       	std	Y+11, r16	; 0x0b
	packetInd = 0;
    1856:	10 92 62 01 	sts	0x0162, r1
	u8 msgInd = 0;
    185a:	1a 82       	std	Y+2, r1	; 0x02
	u8 remLen = (2+ strlen(topic) + len); //Remaining Length
    185c:	8b 81       	ldd	r24, Y+3	; 0x03
    185e:	9c 81       	ldd	r25, Y+4	; 0x04
    1860:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1864:	98 2f       	mov	r25, r24
    1866:	8f 81       	ldd	r24, Y+7	; 0x07
    1868:	89 0f       	add	r24, r25
    186a:	8e 5f       	subi	r24, 0xFE	; 254
    186c:	89 83       	std	Y+1, r24	; 0x01

	//Encode Packet
	if(QoS > 0) //Publish Type
    186e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1870:	88 23       	and	r24, r24
    1872:	89 f0       	breq	.+34     	; 0x1896 <MQTT_Publish+0x6c>
	{
		remLen += 2;
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	8e 5f       	subi	r24, 0xFE	; 254
    1878:	89 83       	std	Y+1, r24	; 0x01
		packet[packetInd++] = 0x32; //Dup = 0,RETAIN = 0
    187a:	20 91 62 01 	lds	r18, 0x0162
    187e:	82 2f       	mov	r24, r18
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	fc 01       	movw	r30, r24
    1884:	e6 56       	subi	r30, 0x66	; 102
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	82 e3       	ldi	r24, 0x32	; 50
    188a:	80 83       	st	Z, r24
    188c:	82 2f       	mov	r24, r18
    188e:	8f 5f       	subi	r24, 0xFF	; 255
    1890:	80 93 62 01 	sts	0x0162, r24
    1894:	0d c0       	rjmp	.+26     	; 0x18b0 <MQTT_Publish+0x86>
	}
	else
	{
		packet[packetInd++] = 0x30; //Dup = 0,RETAIN = 0
    1896:	20 91 62 01 	lds	r18, 0x0162
    189a:	82 2f       	mov	r24, r18
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	fc 01       	movw	r30, r24
    18a0:	e6 56       	subi	r30, 0x66	; 102
    18a2:	ff 4f       	sbci	r31, 0xFF	; 255
    18a4:	80 e3       	ldi	r24, 0x30	; 48
    18a6:	80 83       	st	Z, r24
    18a8:	82 2f       	mov	r24, r18
    18aa:	8f 5f       	subi	r24, 0xFF	; 255
    18ac:	80 93 62 01 	sts	0x0162, r24
	}

	packet[packetInd++] = remLen;
    18b0:	20 91 62 01 	lds	r18, 0x0162
    18b4:	82 2f       	mov	r24, r18
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	fc 01       	movw	r30, r24
    18ba:	e6 56       	subi	r30, 0x66	; 102
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	80 83       	st	Z, r24
    18c2:	82 2f       	mov	r24, r18
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = 0x00;
    18ca:	20 91 62 01 	lds	r18, 0x0162
    18ce:	82 2f       	mov	r24, r18
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	fc 01       	movw	r30, r24
    18d4:	e6 56       	subi	r30, 0x66	; 102
    18d6:	ff 4f       	sbci	r31, 0xFF	; 255
    18d8:	10 82       	st	Z, r1
    18da:	82 2f       	mov	r24, r18
    18dc:	8f 5f       	subi	r24, 0xFF	; 255
    18de:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] =  strlen(topic);
    18e2:	f0 90 62 01 	lds	r15, 0x0162
    18e6:	0f 2d       	mov	r16, r15
    18e8:	10 e0       	ldi	r17, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	9c 81       	ldd	r25, Y+4	; 0x04
    18ee:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    18f2:	f8 01       	movw	r30, r16
    18f4:	e6 56       	subi	r30, 0x66	; 102
    18f6:	ff 4f       	sbci	r31, 0xFF	; 255
    18f8:	80 83       	st	Z, r24
    18fa:	8f 2d       	mov	r24, r15
    18fc:	8f 5f       	subi	r24, 0xFF	; 255
    18fe:	80 93 62 01 	sts	0x0162, r24
	// strcpy(packet+packetInd,topic);
	memcpy(packet + packetInd, topic, strlen(topic));
    1902:	80 91 62 01 	lds	r24, 0x0162
    1906:	88 2f       	mov	r24, r24
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	8c 01       	movw	r16, r24
    190c:	06 56       	subi	r16, 0x66	; 102
    190e:	1f 4f       	sbci	r17, 0xFF	; 255
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	9c 81       	ldd	r25, Y+4	; 0x04
    1914:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1918:	ac 01       	movw	r20, r24
    191a:	2b 81       	ldd	r18, Y+3	; 0x03
    191c:	3c 81       	ldd	r19, Y+4	; 0x04
    191e:	c8 01       	movw	r24, r16
    1920:	b9 01       	movw	r22, r18
    1922:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
	packetInd += strlen(topic);
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    192e:	98 2f       	mov	r25, r24
    1930:	80 91 62 01 	lds	r24, 0x0162
    1934:	89 0f       	add	r24, r25
    1936:	80 93 62 01 	sts	0x0162, r24

	if(QoS > 0)
    193a:	8b 85       	ldd	r24, Y+11	; 0x0b
    193c:	88 23       	and	r24, r24
    193e:	59 f1       	breq	.+86     	; 0x1996 <MQTT_Publish+0x16c>
	{
		packet[packetInd++] = (u8)(packetID >> 8); //MSB of packID   if QoS > 0
    1940:	40 91 62 01 	lds	r20, 0x0162
    1944:	24 2f       	mov	r18, r20
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	80 91 97 00 	lds	r24, 0x0097
    194c:	90 91 98 00 	lds	r25, 0x0098
    1950:	89 2f       	mov	r24, r25
    1952:	99 27       	eor	r25, r25
    1954:	f9 01       	movw	r30, r18
    1956:	e6 56       	subi	r30, 0x66	; 102
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	80 83       	st	Z, r24
    195c:	84 2f       	mov	r24, r20
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	80 93 62 01 	sts	0x0162, r24
		packet[packetInd++] = (u8)(packetID); //LSB of packID
    1964:	40 91 62 01 	lds	r20, 0x0162
    1968:	24 2f       	mov	r18, r20
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	80 91 97 00 	lds	r24, 0x0097
    1970:	90 91 98 00 	lds	r25, 0x0098
    1974:	f9 01       	movw	r30, r18
    1976:	e6 56       	subi	r30, 0x66	; 102
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	80 83       	st	Z, r24
    197c:	84 2f       	mov	r24, r20
    197e:	8f 5f       	subi	r24, 0xFF	; 255
    1980:	80 93 62 01 	sts	0x0162, r24
		packetID++;
    1984:	80 91 97 00 	lds	r24, 0x0097
    1988:	90 91 98 00 	lds	r25, 0x0098
    198c:	01 96       	adiw	r24, 0x01	; 1
    198e:	90 93 98 00 	sts	0x0098, r25
    1992:	80 93 97 00 	sts	0x0097, r24
	// for(msgInd = 0; msgInd < len; msgInd++)
	// {
	// 	packet[packetInd++] = msg[msgInd];
	// }
	// Message Payload
    memcpy(packet + packetInd, msg, len);
    1996:	80 91 62 01 	lds	r24, 0x0162
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	86 56       	subi	r24, 0x66	; 102
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	4f 81       	ldd	r20, Y+7	; 0x07
    19a4:	58 85       	ldd	r21, Y+8	; 0x08
    19a6:	2d 81       	ldd	r18, Y+5	; 0x05
    19a8:	3e 81       	ldd	r19, Y+6	; 0x06
    19aa:	b9 01       	movw	r22, r18
    19ac:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
    packetInd += len;
    19b0:	9f 81       	ldd	r25, Y+7	; 0x07
    19b2:	80 91 62 01 	lds	r24, 0x0162
    19b6:	89 0f       	add	r24, r25
    19b8:	80 93 62 01 	sts	0x0162, r24
	//Send Packet
	// Uart_Write_String(packet,packetInd,UART_7);
	UART_u8SendStringSynchWithLength(packet,packetInd);
    19bc:	80 91 62 01 	lds	r24, 0x0162
    19c0:	28 2f       	mov	r18, r24
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	8a e9       	ldi	r24, 0x9A	; 154
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	b9 01       	movw	r22, r18
    19ca:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_u8SendStringSynchWithLength>
}
    19ce:	2b 96       	adiw	r28, 0x0b	; 11
    19d0:	0f b6       	in	r0, 0x3f	; 63
    19d2:	f8 94       	cli
    19d4:	de bf       	out	0x3e, r29	; 62
    19d6:	0f be       	out	0x3f, r0	; 63
    19d8:	cd bf       	out	0x3d, r28	; 61
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	ff 90       	pop	r15
    19e4:	08 95       	ret

000019e6 <MQTT_Subscribe>:

void MQTT_Subscribe(u8* topic)
{
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	00 d0       	rcall	.+0      	; 0x19f2 <MQTT_Subscribe+0xc>
    19f2:	0f 92       	push	r0
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	9b 83       	std	Y+3, r25	; 0x03
    19fa:	8a 83       	std	Y+2, r24	; 0x02
	u8 remLen = (5 + strlen(topic));
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1a00:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1a04:	8b 5f       	subi	r24, 0xFB	; 251
    1a06:	89 83       	std	Y+1, r24	; 0x01
	//encode Packet
	packetInd = 0;
    1a08:	10 92 62 01 	sts	0x0162, r1
	packet[packetInd++] =0x82; //type
    1a0c:	20 91 62 01 	lds	r18, 0x0162
    1a10:	82 2f       	mov	r24, r18
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	fc 01       	movw	r30, r24
    1a16:	e6 56       	subi	r30, 0x66	; 102
    1a18:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1a:	82 e8       	ldi	r24, 0x82	; 130
    1a1c:	80 83       	st	Z, r24
    1a1e:	82 2f       	mov	r24, r18
    1a20:	8f 5f       	subi	r24, 0xFF	; 255
    1a22:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = remLen;
    1a26:	20 91 62 01 	lds	r18, 0x0162
    1a2a:	82 2f       	mov	r24, r18
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e6 56       	subi	r30, 0x66	; 102
    1a32:	ff 4f       	sbci	r31, 0xFF	; 255
    1a34:	89 81       	ldd	r24, Y+1	; 0x01
    1a36:	80 83       	st	Z, r24
    1a38:	82 2f       	mov	r24, r18
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	80 93 62 01 	sts	0x0162, r24

	packet[packetInd++] = (u8)(packetID >> 8); //MSB of packID
    1a40:	40 91 62 01 	lds	r20, 0x0162
    1a44:	24 2f       	mov	r18, r20
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	80 91 97 00 	lds	r24, 0x0097
    1a4c:	90 91 98 00 	lds	r25, 0x0098
    1a50:	89 2f       	mov	r24, r25
    1a52:	99 27       	eor	r25, r25
    1a54:	f9 01       	movw	r30, r18
    1a56:	e6 56       	subi	r30, 0x66	; 102
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 83       	st	Z, r24
    1a5c:	84 2f       	mov	r24, r20
    1a5e:	8f 5f       	subi	r24, 0xFF	; 255
    1a60:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] = (u8)(packetID); //LSB of packID
    1a64:	40 91 62 01 	lds	r20, 0x0162
    1a68:	24 2f       	mov	r18, r20
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	80 91 97 00 	lds	r24, 0x0097
    1a70:	90 91 98 00 	lds	r25, 0x0098
    1a74:	f9 01       	movw	r30, r18
    1a76:	e6 56       	subi	r30, 0x66	; 102
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 83       	st	Z, r24
    1a7c:	84 2f       	mov	r24, r20
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	80 93 62 01 	sts	0x0162, r24
	packetID++;
    1a84:	80 91 97 00 	lds	r24, 0x0097
    1a88:	90 91 98 00 	lds	r25, 0x0098
    1a8c:	01 96       	adiw	r24, 0x01	; 1
    1a8e:	90 93 98 00 	sts	0x0098, r25
    1a92:	80 93 97 00 	sts	0x0097, r24

	packet[packetInd++] = 0x00;
    1a96:	20 91 62 01 	lds	r18, 0x0162
    1a9a:	82 2f       	mov	r24, r18
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	fc 01       	movw	r30, r24
    1aa0:	e6 56       	subi	r30, 0x66	; 102
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	10 82       	st	Z, r1
    1aa6:	82 2f       	mov	r24, r18
    1aa8:	8f 5f       	subi	r24, 0xFF	; 255
    1aaa:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++] =  strlen(topic);
    1aae:	f0 90 62 01 	lds	r15, 0x0162
    1ab2:	0f 2d       	mov	r16, r15
    1ab4:	10 e0       	ldi	r17, 0x00	; 0
    1ab6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aba:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1abe:	f8 01       	movw	r30, r16
    1ac0:	e6 56       	subi	r30, 0x66	; 102
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 83       	st	Z, r24
    1ac6:	8f 2d       	mov	r24, r15
    1ac8:	8f 5f       	subi	r24, 0xFF	; 255
    1aca:	80 93 62 01 	sts	0x0162, r24
//	strcpy(packet+packetInd,topic);
	memcpy(packet + packetInd, topic, strlen(topic));
    1ace:	80 91 62 01 	lds	r24, 0x0162
    1ad2:	88 2f       	mov	r24, r24
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	8c 01       	movw	r16, r24
    1ad8:	06 56       	subi	r16, 0x66	; 102
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ade:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae0:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ae8:	3b 81       	ldd	r19, Y+3	; 0x03
    1aea:	c8 01       	movw	r24, r16
    1aec:	b9 01       	movw	r22, r18
    1aee:	0e 94 06 13 	call	0x260c	; 0x260c <memcpy>
	packetInd += strlen(topic);
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	0e 94 0f 13 	call	0x261e	; 0x261e <strlen>
    1afa:	98 2f       	mov	r25, r24
    1afc:	80 91 62 01 	lds	r24, 0x0162
    1b00:	89 0f       	add	r24, r25
    1b02:	80 93 62 01 	sts	0x0162, r24
	packet[packetInd++]=0x01; //Requested QoS
    1b06:	20 91 62 01 	lds	r18, 0x0162
    1b0a:	82 2f       	mov	r24, r18
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	fc 01       	movw	r30, r24
    1b10:	e6 56       	subi	r30, 0x66	; 102
    1b12:	ff 4f       	sbci	r31, 0xFF	; 255
    1b14:	81 e0       	ldi	r24, 0x01	; 1
    1b16:	80 83       	st	Z, r24
    1b18:	82 2f       	mov	r24, r18
    1b1a:	8f 5f       	subi	r24, 0xFF	; 255
    1b1c:	80 93 62 01 	sts	0x0162, r24

	//Send Packet
	// Uart_Write_String(packet,packetInd,UART_7);
	UART_u8SendStringSynchWithLength(packet,packetInd);
    1b20:	80 91 62 01 	lds	r24, 0x0162
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	8a e9       	ldi	r24, 0x9A	; 154
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	b9 01       	movw	r22, r18
    1b2e:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_u8SendStringSynchWithLength>
}
    1b32:	0f 90       	pop	r0
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	1f 91       	pop	r17
    1b3e:	0f 91       	pop	r16
    1b40:	ff 90       	pop	r15
    1b42:	08 95       	ret

00001b44 <UART_voidInit>:
static u8 UART_u8ReceiveCurrentIndex = 0;
static volatile u8 UART_u8BusyFlagRx = 0;
static u8 UART_u8ReceiveMessageSize = 0;

void UART_voidInit(void)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <UART_voidInit+0x6>
    1b4a:	0f 92       	push	r0
    1b4c:	cd b7       	in	r28, 0x3d	; 61
    1b4e:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16BaudRate = UART_u8_BAUD_RATE;
    1b50:	83 e3       	ldi	r24, 0x33	; 51
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	9b 83       	std	Y+3, r25	; 0x03
    1b56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8UCSRCValue = 0b10000000;
    1b58:	80 e8       	ldi	r24, 0x80	; 128
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	/* Baud Rate = 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BaudRate;
    1b5c:	e9 e2       	ldi	r30, 0x29	; 41
    1b5e:	f0 e0       	ldi	r31, 0x00	; 0
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BaudRate >> 8);
    1b64:	e0 e4       	ldi	r30, 0x40	; 64
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b6c:	89 2f       	mov	r24, r25
    1b6e:	99 27       	eor	r25, r25
    1b70:	80 83       	st	Z, r24
#if UART_u8_SPEED == UART_u8_NORMAL_SPEED
	/* Normal Speed */
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_U2X);
    1b72:	ab e2       	ldi	r26, 0x2B	; 43
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	eb e2       	ldi	r30, 0x2B	; 43
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8d 7f       	andi	r24, 0xFD	; 253
    1b7e:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRA_REG,UCSRA_U2X);
#endif

#if UART_u8_MPM_MODE == UART_u8_DISABLE_MPM
	/* Disable MPM */
	CLR_BIT(UART_u8_UCSRA_REG,UCSRA_MPCM);
    1b80:	ab e2       	ldi	r26, 0x2B	; 43
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	eb e2       	ldi	r30, 0x2B	; 43
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	8e 7f       	andi	r24, 0xFE	; 254
    1b8c:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_UDRIE);
#endif

#if UART_u8_RXEN_MODE == UART_u8_ENABLE_RXEN
	/* Enable Rx */
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
    1b8e:	aa e2       	ldi	r26, 0x2A	; 42
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	ea e2       	ldi	r30, 0x2A	; 42
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	80 61       	ori	r24, 0x10	; 16
    1b9a:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_RXEN);
#endif

#if UART_u8_TXEN_MODE == UART_u8_ENABLE_TXEN
	/* Enable Tx */
	SET_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
    1b9c:	aa e2       	ldi	r26, 0x2A	; 42
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	ea e2       	ldi	r30, 0x2A	; 42
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 60       	ori	r24, 0x08	; 8
    1ba8:	8c 93       	st	X, r24
	/* Disable Tx */
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_TXEN);
#endif
	
	/* Select 8 bit Data */
	CLR_BIT(UART_u8_UCSRB_REG,UCSRB_UCSZ2);
    1baa:	aa e2       	ldi	r26, 0x2A	; 42
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	ea e2       	ldi	r30, 0x2A	; 42
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8b 7f       	andi	r24, 0xFB	; 251
    1bb6:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ1);
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	84 60       	ori	r24, 0x04	; 4
    1bbc:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UCSZ0);
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	82 60       	ori	r24, 0x02	; 2
    1bc2:	89 83       	std	Y+1, r24	; 0x01
#if UART_u8_USART_MODE == UART_u8_ASYNCH_MODE
	/* Select Asynch Mode */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	8f 7b       	andi	r24, 0xBF	; 191
    1bc8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UMSEL);
#endif

#if UART_u8_PARITY_MODE == UART_u8_PARITY_DISABLE
	/* No Parity Bit */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM1);
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	8f 7d       	andi	r24, 0xDF	; 223
    1bce:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	8f 7e       	andi	r24, 0xEF	; 239
    1bd4:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8UCSRCValue,UCSRC_UPM0);
#endif

#if UART_u8_NO_STOP_BITS == UART_u8_ONE_BITS_STOP
	/* Enable 1 Stop Bits */
	CLR_BIT(Local_u8UCSRCValue,UCSRC_USBS);
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	87 7f       	andi	r24, 0xF7	; 247
    1bda:	89 83       	std	Y+1, r24	; 0x01
	/* Enable 2 Stop Bits */
	SET_BIT(Local_u8UCSRCValue,UCSRC_USBS);
#endif

	/* Update UCSRC Reg */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
    1bdc:	e0 e4       	ldi	r30, 0x40	; 64
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	89 81       	ldd	r24, Y+1	; 0x01
    1be2:	80 83       	st	Z, r24
}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	cf 91       	pop	r28
    1bec:	df 91       	pop	r29
    1bee:	08 95       	ret

00001bf0 <UART_voidSendByte>:

void UART_voidSendByte(u8 Copy_u8DataByte)
{
    1bf0:	df 93       	push	r29
    1bf2:	cf 93       	push	r28
    1bf4:	0f 92       	push	r0
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	89 83       	std	Y+1, r24	; 0x01
	/* wait until the transmit register is empty */
	while((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0);
    1bfc:	eb e2       	ldi	r30, 0x2B	; 43
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	82 95       	swap	r24
    1c04:	86 95       	lsr	r24
    1c06:	87 70       	andi	r24, 0x07	; 7
    1c08:	88 2f       	mov	r24, r24
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	81 70       	andi	r24, 0x01	; 1
    1c0e:	90 70       	andi	r25, 0x00	; 0
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	a1 f3       	breq	.-24     	; 0x1bfc <UART_voidSendByte+0xc>
	/* Send Data Byte */
	UART_u8_UDR_REG = Copy_u8DataByte;
    1c14:	ec e2       	ldi	r30, 0x2C	; 44
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	80 83       	st	Z, r24
}
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <UART_u8ReceiveByte>:

u8   UART_u8ReceiveByte(u8 * Copy_pu8RecByte)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	00 d0       	rcall	.+0      	; 0x1c2a <UART_u8ReceiveByte+0x6>
    1c2a:	0f 92       	push	r0
    1c2c:	cd b7       	in	r28, 0x3d	; 61
    1c2e:	de b7       	in	r29, 0x3e	; 62
    1c30:	9b 83       	std	Y+3, r25	; 0x03
    1c32:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1c34:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8RecByte != NULL)
    1c36:	8a 81       	ldd	r24, Y+2	; 0x02
    1c38:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3a:	00 97       	sbiw	r24, 0x00	; 0
    1c3c:	69 f0       	breq	.+26     	; 0x1c58 <UART_u8ReceiveByte+0x34>
	{
		/* wait until the data is received */
		while((GET_BIT(UART_u8_UCSRA_REG,UCSRA_RXC)) == 0);
    1c3e:	eb e2       	ldi	r30, 0x2B	; 43
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	88 23       	and	r24, r24
    1c46:	dc f7       	brge	.-10     	; 0x1c3e <UART_u8ReceiveByte+0x1a>
		/* Read Data */
		*Copy_pu8RecByte = UART_u8_UDR_REG;
    1c48:	ec e2       	ldi	r30, 0x2C	; 44
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c50:	fb 81       	ldd	r31, Y+3	; 0x03
    1c52:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	cf 91       	pop	r28
    1c62:	df 91       	pop	r29
    1c64:	08 95       	ret

00001c66 <UART_u8SendStringSynch>:

u8   UART_u8SendStringSynch(u8 * Copy_pu8String)
{
    1c66:	df 93       	push	r29
    1c68:	cf 93       	push	r28
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
    1c6e:	27 97       	sbiw	r28, 0x07	; 7
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	9f 83       	std	Y+7, r25	; 0x07
    1c7c:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeoutCounter = 0;
    1c82:	19 82       	std	Y+1, r1	; 0x01
    1c84:	1a 82       	std	Y+2, r1	; 0x02
    1c86:	1b 82       	std	Y+3, r1	; 0x03
    1c88:	1c 82       	std	Y+4, r1	; 0x04
	// Check for NULL pointer
	if(Copy_pu8String != NULL)
    1c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1c8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	09 f4       	brne	.+2      	; 0x1c94 <UART_u8SendStringSynch+0x2e>
    1c92:	87 c0       	rjmp	.+270    	; 0x1da2 <UART_u8SendStringSynch+0x13c>
    1c94:	7f c0       	rjmp	.+254    	; 0x1d94 <UART_u8SendStringSynch+0x12e>
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
		{
			Local_u32TimeoutCounter = 0;
    1c96:	19 82       	std	Y+1, r1	; 0x01
    1c98:	1a 82       	std	Y+2, r1	; 0x02
    1c9a:	1b 82       	std	Y+3, r1	; 0x03
    1c9c:	1c 82       	std	Y+4, r1	; 0x04
    1c9e:	0b c0       	rjmp	.+22     	; 0x1cb6 <UART_u8SendStringSynch+0x50>
			// Wait until the data register is empty or timeout occurs
			while(((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
			{
				Local_u32TimeoutCounter++;
    1ca0:	89 81       	ldd	r24, Y+1	; 0x01
    1ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca4:	ab 81       	ldd	r26, Y+3	; 0x03
    1ca6:	bc 81       	ldd	r27, Y+4	; 0x04
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	a1 1d       	adc	r26, r1
    1cac:	b1 1d       	adc	r27, r1
    1cae:	89 83       	std	Y+1, r24	; 0x01
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	ab 83       	std	Y+3, r26	; 0x03
    1cb4:	bc 83       	std	Y+4, r27	; 0x04
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
		{
			Local_u32TimeoutCounter = 0;
			// Wait until the data register is empty or timeout occurs
			while(((GET_BIT(UART_u8_UCSRA_REG,UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
    1cb6:	eb e2       	ldi	r30, 0x2B	; 43
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	80 81       	ld	r24, Z
    1cbc:	82 95       	swap	r24
    1cbe:	86 95       	lsr	r24
    1cc0:	87 70       	andi	r24, 0x07	; 7
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	81 70       	andi	r24, 0x01	; 1
    1cc8:	90 70       	andi	r25, 0x00	; 0
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	61 f4       	brne	.+24     	; 0x1ce6 <UART_u8SendStringSynch+0x80>
    1cce:	89 81       	ldd	r24, Y+1	; 0x01
    1cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd2:	ab 81       	ldd	r26, Y+3	; 0x03
    1cd4:	bc 81       	ldd	r27, Y+4	; 0x04
    1cd6:	80 32       	cpi	r24, 0x20	; 32
    1cd8:	21 ea       	ldi	r18, 0xA1	; 161
    1cda:	92 07       	cpc	r25, r18
    1cdc:	27 e0       	ldi	r18, 0x07	; 7
    1cde:	a2 07       	cpc	r26, r18
    1ce0:	20 e0       	ldi	r18, 0x00	; 0
    1ce2:	b2 07       	cpc	r27, r18
    1ce4:	e8 f2       	brcs	.-70     	; 0x1ca0 <UART_u8SendStringSynch+0x3a>
			{
				Local_u32TimeoutCounter++;
			}
			// Check if timeout occurred
            if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cea:	ab 81       	ldd	r26, Y+3	; 0x03
    1cec:	bc 81       	ldd	r27, Y+4	; 0x04
    1cee:	80 32       	cpi	r24, 0x20	; 32
    1cf0:	21 ea       	ldi	r18, 0xA1	; 161
    1cf2:	92 07       	cpc	r25, r18
    1cf4:	27 e0       	ldi	r18, 0x07	; 7
    1cf6:	a2 07       	cpc	r26, r18
    1cf8:	20 e0       	ldi	r18, 0x00	; 0
    1cfa:	b2 07       	cpc	r27, r18
    1cfc:	10 f0       	brcs	.+4      	; 0x1d02 <UART_u8SendStringSynch+0x9c>
            {
                Local_u8ErrorState = STD_TYPES_NOK;
    1cfe:	1d 82       	std	Y+5, r1	; 0x05
    1d00:	51 c0       	rjmp	.+162    	; 0x1da4 <UART_u8SendStringSynch+0x13e>
                break;
            }
            // Load the data register with the next character in the string
            UART_u8_UDR_REG = *Copy_pu8String;
    1d02:	ec e2       	ldi	r30, 0x2C	; 44
    1d04:	f0 e0       	ldi	r31, 0x00	; 0
    1d06:	ae 81       	ldd	r26, Y+6	; 0x06
    1d08:	bf 81       	ldd	r27, Y+7	; 0x07
    1d0a:	8c 91       	ld	r24, X
    1d0c:	80 83       	st	Z, r24

            // Wait for the transmission to complete or timeout occurs
             Local_u32TimeoutCounter = 0;
    1d0e:	19 82       	std	Y+1, r1	; 0x01
    1d10:	1a 82       	std	Y+2, r1	; 0x02
    1d12:	1b 82       	std	Y+3, r1	; 0x03
    1d14:	1c 82       	std	Y+4, r1	; 0x04
    1d16:	0b c0       	rjmp	.+22     	; 0x1d2e <UART_u8SendStringSynch+0xc8>
            while ((GET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
            {
                Local_u32TimeoutCounter++;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d1e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d20:	01 96       	adiw	r24, 0x01	; 1
    1d22:	a1 1d       	adc	r26, r1
    1d24:	b1 1d       	adc	r27, r1
    1d26:	89 83       	std	Y+1, r24	; 0x01
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	ab 83       	std	Y+3, r26	; 0x03
    1d2c:	bc 83       	std	Y+4, r27	; 0x04
            // Load the data register with the next character in the string
            UART_u8_UDR_REG = *Copy_pu8String;

            // Wait for the transmission to complete or timeout occurs
             Local_u32TimeoutCounter = 0;
            while ((GET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
    1d2e:	eb e2       	ldi	r30, 0x2B	; 43
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	80 81       	ld	r24, Z
    1d34:	82 95       	swap	r24
    1d36:	86 95       	lsr	r24
    1d38:	86 95       	lsr	r24
    1d3a:	83 70       	andi	r24, 0x03	; 3
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	81 70       	andi	r24, 0x01	; 1
    1d42:	90 70       	andi	r25, 0x00	; 0
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	61 f4       	brne	.+24     	; 0x1d60 <UART_u8SendStringSynch+0xfa>
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d4e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d50:	80 32       	cpi	r24, 0x20	; 32
    1d52:	21 ea       	ldi	r18, 0xA1	; 161
    1d54:	92 07       	cpc	r25, r18
    1d56:	27 e0       	ldi	r18, 0x07	; 7
    1d58:	a2 07       	cpc	r26, r18
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	b2 07       	cpc	r27, r18
    1d5e:	e0 f2       	brcs	.-72     	; 0x1d18 <UART_u8SendStringSynch+0xb2>
            {
                Local_u32TimeoutCounter++;
            }
            // Check if timeout occurred
            if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
    1d60:	89 81       	ldd	r24, Y+1	; 0x01
    1d62:	9a 81       	ldd	r25, Y+2	; 0x02
    1d64:	ab 81       	ldd	r26, Y+3	; 0x03
    1d66:	bc 81       	ldd	r27, Y+4	; 0x04
    1d68:	80 32       	cpi	r24, 0x20	; 32
    1d6a:	21 ea       	ldi	r18, 0xA1	; 161
    1d6c:	92 07       	cpc	r25, r18
    1d6e:	27 e0       	ldi	r18, 0x07	; 7
    1d70:	a2 07       	cpc	r26, r18
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	b2 07       	cpc	r27, r18
    1d76:	10 f0       	brcs	.+4      	; 0x1d7c <UART_u8SendStringSynch+0x116>
            {
                Local_u8ErrorState = STD_TYPES_NOK;
    1d78:	1d 82       	std	Y+5, r1	; 0x05
    1d7a:	14 c0       	rjmp	.+40     	; 0x1da4 <UART_u8SendStringSynch+0x13e>
                break;
            }
            // Clear the transmit complete flag
            SET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC);
    1d7c:	ab e2       	ldi	r26, 0x2B	; 43
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	eb e2       	ldi	r30, 0x2B	; 43
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	80 64       	ori	r24, 0x40	; 64
    1d88:	8c 93       	st	X, r24
            // Move to the next character
            Copy_pu8String++;
    1d8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d8c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d8e:	01 96       	adiw	r24, 0x01	; 1
    1d90:	9f 83       	std	Y+7, r25	; 0x07
    1d92:	8e 83       	std	Y+6, r24	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u32 Local_u32TimeoutCounter = 0;
	// Check for NULL pointer
	if(Copy_pu8String != NULL)
	{
		while(*Copy_pu8String != '\0') // Loop until the end of the string
    1d94:	ee 81       	ldd	r30, Y+6	; 0x06
    1d96:	ff 81       	ldd	r31, Y+7	; 0x07
    1d98:	80 81       	ld	r24, Z
    1d9a:	88 23       	and	r24, r24
    1d9c:	09 f0       	breq	.+2      	; 0x1da0 <UART_u8SendStringSynch+0x13a>
    1d9e:	7b cf       	rjmp	.-266    	; 0x1c96 <UART_u8SendStringSynch+0x30>
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <UART_u8SendStringSynch+0x13e>
            Copy_pu8String++;
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1da2:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    1da4:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1da6:	27 96       	adiw	r28, 0x07	; 7
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <UART_u8SendStringSynchWithLength>:

u8 UART_u8SendStringSynchWithLength(u8 *Copy_pu8Data, u16 Copy_u16Length) {
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	2b 97       	sbiw	r28, 0x0b	; 11
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	99 87       	std	Y+9, r25	; 0x09
    1dce:	88 87       	std	Y+8, r24	; 0x08
    1dd0:	7b 87       	std	Y+11, r23	; 0x0b
    1dd2:	6a 87       	std	Y+10, r22	; 0x0a
    u8 Local_u8ErrorState = STD_TYPES_OK;
    1dd4:	81 e0       	ldi	r24, 0x01	; 1
    1dd6:	8f 83       	std	Y+7, r24	; 0x07
    u32 Local_u32TimeoutCounter = 0;
    1dd8:	1b 82       	std	Y+3, r1	; 0x03
    1dda:	1c 82       	std	Y+4, r1	; 0x04
    1ddc:	1d 82       	std	Y+5, r1	; 0x05
    1dde:	1e 82       	std	Y+6, r1	; 0x06
    
    // Check for NULL pointer
    if (Copy_pu8Data != NULL) {
    1de0:	88 85       	ldd	r24, Y+8	; 0x08
    1de2:	99 85       	ldd	r25, Y+9	; 0x09
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	09 f4       	brne	.+2      	; 0x1dea <UART_u8SendStringSynchWithLength+0x32>
    1de8:	90 c0       	rjmp	.+288    	; 0x1f0a <UART_u8SendStringSynchWithLength+0x152>
        for (u16 i = 0; i < Copy_u16Length; i++) {
    1dea:	1a 82       	std	Y+2, r1	; 0x02
    1dec:	19 82       	std	Y+1, r1	; 0x01
    1dee:	84 c0       	rjmp	.+264    	; 0x1ef8 <UART_u8SendStringSynchWithLength+0x140>
            Local_u32TimeoutCounter = 0;
    1df0:	1b 82       	std	Y+3, r1	; 0x03
    1df2:	1c 82       	std	Y+4, r1	; 0x04
    1df4:	1d 82       	std	Y+5, r1	; 0x05
    1df6:	1e 82       	std	Y+6, r1	; 0x06
    1df8:	0b c0       	rjmp	.+22     	; 0x1e10 <UART_u8SendStringSynchWithLength+0x58>
            
            // Wait until the data register is empty or timeout occurs
            while (((GET_BIT(UART_u8_UCSRA_REG, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE)) {
                Local_u32TimeoutCounter++;
    1dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dfe:	ad 81       	ldd	r26, Y+5	; 0x05
    1e00:	be 81       	ldd	r27, Y+6	; 0x06
    1e02:	01 96       	adiw	r24, 0x01	; 1
    1e04:	a1 1d       	adc	r26, r1
    1e06:	b1 1d       	adc	r27, r1
    1e08:	8b 83       	std	Y+3, r24	; 0x03
    1e0a:	9c 83       	std	Y+4, r25	; 0x04
    1e0c:	ad 83       	std	Y+5, r26	; 0x05
    1e0e:	be 83       	std	Y+6, r27	; 0x06
    if (Copy_pu8Data != NULL) {
        for (u16 i = 0; i < Copy_u16Length; i++) {
            Local_u32TimeoutCounter = 0;
            
            // Wait until the data register is empty or timeout occurs
            while (((GET_BIT(UART_u8_UCSRA_REG, UCSRA_UDRE)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE)) {
    1e10:	eb e2       	ldi	r30, 0x2B	; 43
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	82 95       	swap	r24
    1e18:	86 95       	lsr	r24
    1e1a:	87 70       	andi	r24, 0x07	; 7
    1e1c:	88 2f       	mov	r24, r24
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	81 70       	andi	r24, 0x01	; 1
    1e22:	90 70       	andi	r25, 0x00	; 0
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	61 f4       	brne	.+24     	; 0x1e40 <UART_u8SendStringSynchWithLength+0x88>
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e2c:	ad 81       	ldd	r26, Y+5	; 0x05
    1e2e:	be 81       	ldd	r27, Y+6	; 0x06
    1e30:	80 32       	cpi	r24, 0x20	; 32
    1e32:	21 ea       	ldi	r18, 0xA1	; 161
    1e34:	92 07       	cpc	r25, r18
    1e36:	27 e0       	ldi	r18, 0x07	; 7
    1e38:	a2 07       	cpc	r26, r18
    1e3a:	20 e0       	ldi	r18, 0x00	; 0
    1e3c:	b2 07       	cpc	r27, r18
    1e3e:	e8 f2       	brcs	.-70     	; 0x1dfa <UART_u8SendStringSynchWithLength+0x42>
                Local_u32TimeoutCounter++;
            }
            
            // Check if timeout occurred
            if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE) {
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	ad 81       	ldd	r26, Y+5	; 0x05
    1e46:	be 81       	ldd	r27, Y+6	; 0x06
    1e48:	80 32       	cpi	r24, 0x20	; 32
    1e4a:	21 ea       	ldi	r18, 0xA1	; 161
    1e4c:	92 07       	cpc	r25, r18
    1e4e:	27 e0       	ldi	r18, 0x07	; 7
    1e50:	a2 07       	cpc	r26, r18
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	b2 07       	cpc	r27, r18
    1e56:	10 f0       	brcs	.+4      	; 0x1e5c <UART_u8SendStringSynchWithLength+0xa4>
                Local_u8ErrorState = STD_TYPES_NOK;
    1e58:	1f 82       	std	Y+7, r1	; 0x07
    1e5a:	58 c0       	rjmp	.+176    	; 0x1f0c <UART_u8SendStringSynchWithLength+0x154>
                break;
            }
            
            // Load the data register with the next byte
            UART_u8_UDR_REG = Copy_pu8Data[i];
    1e5c:	ac e2       	ldi	r26, 0x2C	; 44
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	28 85       	ldd	r18, Y+8	; 0x08
    1e62:	39 85       	ldd	r19, Y+9	; 0x09
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	9a 81       	ldd	r25, Y+2	; 0x02
    1e68:	f9 01       	movw	r30, r18
    1e6a:	e8 0f       	add	r30, r24
    1e6c:	f9 1f       	adc	r31, r25
    1e6e:	80 81       	ld	r24, Z
    1e70:	8c 93       	st	X, r24
            
            // Wait for the transmission to complete or timeout occurs
            Local_u32TimeoutCounter = 0;
    1e72:	1b 82       	std	Y+3, r1	; 0x03
    1e74:	1c 82       	std	Y+4, r1	; 0x04
    1e76:	1d 82       	std	Y+5, r1	; 0x05
    1e78:	1e 82       	std	Y+6, r1	; 0x06
    1e7a:	0b c0       	rjmp	.+22     	; 0x1e92 <UART_u8SendStringSynchWithLength+0xda>
            while ((GET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE)) {
                Local_u32TimeoutCounter++;
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e80:	ad 81       	ldd	r26, Y+5	; 0x05
    1e82:	be 81       	ldd	r27, Y+6	; 0x06
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	a1 1d       	adc	r26, r1
    1e88:	b1 1d       	adc	r27, r1
    1e8a:	8b 83       	std	Y+3, r24	; 0x03
    1e8c:	9c 83       	std	Y+4, r25	; 0x04
    1e8e:	ad 83       	std	Y+5, r26	; 0x05
    1e90:	be 83       	std	Y+6, r27	; 0x06
            // Load the data register with the next byte
            UART_u8_UDR_REG = Copy_pu8Data[i];
            
            // Wait for the transmission to complete or timeout occurs
            Local_u32TimeoutCounter = 0;
            while ((GET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE)) {
    1e92:	eb e2       	ldi	r30, 0x2B	; 43
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	82 95       	swap	r24
    1e9a:	86 95       	lsr	r24
    1e9c:	86 95       	lsr	r24
    1e9e:	83 70       	andi	r24, 0x03	; 3
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	81 70       	andi	r24, 0x01	; 1
    1ea6:	90 70       	andi	r25, 0x00	; 0
    1ea8:	00 97       	sbiw	r24, 0x00	; 0
    1eaa:	61 f4       	brne	.+24     	; 0x1ec4 <UART_u8SendStringSynchWithLength+0x10c>
    1eac:	8b 81       	ldd	r24, Y+3	; 0x03
    1eae:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb0:	ad 81       	ldd	r26, Y+5	; 0x05
    1eb2:	be 81       	ldd	r27, Y+6	; 0x06
    1eb4:	80 32       	cpi	r24, 0x20	; 32
    1eb6:	21 ea       	ldi	r18, 0xA1	; 161
    1eb8:	92 07       	cpc	r25, r18
    1eba:	27 e0       	ldi	r18, 0x07	; 7
    1ebc:	a2 07       	cpc	r26, r18
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	b2 07       	cpc	r27, r18
    1ec2:	e0 f2       	brcs	.-72     	; 0x1e7c <UART_u8SendStringSynchWithLength+0xc4>
                Local_u32TimeoutCounter++;
            }
            
            // Check if timeout occurred
            if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE) {
    1ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec8:	ad 81       	ldd	r26, Y+5	; 0x05
    1eca:	be 81       	ldd	r27, Y+6	; 0x06
    1ecc:	80 32       	cpi	r24, 0x20	; 32
    1ece:	21 ea       	ldi	r18, 0xA1	; 161
    1ed0:	92 07       	cpc	r25, r18
    1ed2:	27 e0       	ldi	r18, 0x07	; 7
    1ed4:	a2 07       	cpc	r26, r18
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	b2 07       	cpc	r27, r18
    1eda:	10 f0       	brcs	.+4      	; 0x1ee0 <UART_u8SendStringSynchWithLength+0x128>
                Local_u8ErrorState = STD_TYPES_NOK;
    1edc:	1f 82       	std	Y+7, r1	; 0x07
    1ede:	16 c0       	rjmp	.+44     	; 0x1f0c <UART_u8SendStringSynchWithLength+0x154>
                break;
            }
            
            // Clear the transmit complete flag
            SET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC);
    1ee0:	ab e2       	ldi	r26, 0x2B	; 43
    1ee2:	b0 e0       	ldi	r27, 0x00	; 0
    1ee4:	eb e2       	ldi	r30, 0x2B	; 43
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 81       	ld	r24, Z
    1eea:	80 64       	ori	r24, 0x40	; 64
    1eec:	8c 93       	st	X, r24
    u8 Local_u8ErrorState = STD_TYPES_OK;
    u32 Local_u32TimeoutCounter = 0;
    
    // Check for NULL pointer
    if (Copy_pu8Data != NULL) {
        for (u16 i = 0; i < Copy_u16Length; i++) {
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef2:	01 96       	adiw	r24, 0x01	; 1
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	29 81       	ldd	r18, Y+1	; 0x01
    1efa:	3a 81       	ldd	r19, Y+2	; 0x02
    1efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1efe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f00:	28 17       	cp	r18, r24
    1f02:	39 07       	cpc	r19, r25
    1f04:	08 f4       	brcc	.+2      	; 0x1f08 <UART_u8SendStringSynchWithLength+0x150>
    1f06:	74 cf       	rjmp	.-280    	; 0x1df0 <UART_u8SendStringSynchWithLength+0x38>
    1f08:	01 c0       	rjmp	.+2      	; 0x1f0c <UART_u8SendStringSynchWithLength+0x154>
            
            // Clear the transmit complete flag
            SET_BIT(UART_u8_UCSRA_REG, UCSRA_TXC);
        }
    } else {
        Local_u8ErrorState = STD_TYPES_NOK;
    1f0a:	1f 82       	std	Y+7, r1	; 0x07
    }
    
    return Local_u8ErrorState;
    1f0c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1f0e:	2b 96       	adiw	r28, 0x0b	; 11
    1f10:	0f b6       	in	r0, 0x3f	; 63
    1f12:	f8 94       	cli
    1f14:	de bf       	out	0x3e, r29	; 62
    1f16:	0f be       	out	0x3f, r0	; 63
    1f18:	cd bf       	out	0x3d, r28	; 61
    1f1a:	cf 91       	pop	r28
    1f1c:	df 91       	pop	r29
    1f1e:	08 95       	ret

00001f20 <UART_u8ReceiveStringSynch>:


u8   UART_u8ReceiveStringSynch(u8 * Copy_puReceivedString, u8 Copy_u8MessageSize)
{
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	29 97       	sbiw	r28, 0x09	; 9
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	98 87       	std	Y+8, r25	; 0x08
    1f36:	8f 83       	std	Y+7, r24	; 0x07
    1f38:	69 87       	std	Y+9, r22	; 0x09
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	8e 83       	std	Y+6, r24	; 0x06
	u32 Local_u32TimeoutCounter = 0;
    1f3e:	1a 82       	std	Y+2, r1	; 0x02
    1f40:	1b 82       	std	Y+3, r1	; 0x03
    1f42:	1c 82       	std	Y+4, r1	; 0x04
    1f44:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_u8StringCounter = 0;
    1f46:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_puReceivedString != NULL)
    1f48:	8f 81       	ldd	r24, Y+7	; 0x07
    1f4a:	98 85       	ldd	r25, Y+8	; 0x08
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	09 f4       	brne	.+2      	; 0x1f52 <UART_u8ReceiveStringSynch+0x32>
    1f50:	4e c0       	rjmp	.+156    	; 0x1fee <UART_u8ReceiveStringSynch+0xce>
    1f52:	3e c0       	rjmp	.+124    	; 0x1fd0 <UART_u8ReceiveStringSynch+0xb0>
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
		{
			Local_u32TimeoutCounter = 0;
    1f54:	1a 82       	std	Y+2, r1	; 0x02
    1f56:	1b 82       	std	Y+3, r1	; 0x03
    1f58:	1c 82       	std	Y+4, r1	; 0x04
    1f5a:	1d 82       	std	Y+5, r1	; 0x05
    1f5c:	0b c0       	rjmp	.+22     	; 0x1f74 <UART_u8ReceiveStringSynch+0x54>
			while (((GET_BIT(UART_u8_UCSRA_REG, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
			{
				Local_u32TimeoutCounter++;
    1f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f60:	9b 81       	ldd	r25, Y+3	; 0x03
    1f62:	ac 81       	ldd	r26, Y+4	; 0x04
    1f64:	bd 81       	ldd	r27, Y+5	; 0x05
    1f66:	01 96       	adiw	r24, 0x01	; 1
    1f68:	a1 1d       	adc	r26, r1
    1f6a:	b1 1d       	adc	r27, r1
    1f6c:	8a 83       	std	Y+2, r24	; 0x02
    1f6e:	9b 83       	std	Y+3, r25	; 0x03
    1f70:	ac 83       	std	Y+4, r26	; 0x04
    1f72:	bd 83       	std	Y+5, r27	; 0x05
	if (Copy_puReceivedString != NULL)
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
		{
			Local_u32TimeoutCounter = 0;
			while (((GET_BIT(UART_u8_UCSRA_REG, UCSRA_RXC)) == 0) && (Local_u32TimeoutCounter < UART_u32_TIME_OUT_MAX_VALUE))
    1f74:	eb e2       	ldi	r30, 0x2B	; 43
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	88 23       	and	r24, r24
    1f7c:	64 f0       	brlt	.+24     	; 0x1f96 <UART_u8ReceiveStringSynch+0x76>
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	ac 81       	ldd	r26, Y+4	; 0x04
    1f84:	bd 81       	ldd	r27, Y+5	; 0x05
    1f86:	80 32       	cpi	r24, 0x20	; 32
    1f88:	21 ea       	ldi	r18, 0xA1	; 161
    1f8a:	92 07       	cpc	r25, r18
    1f8c:	27 e0       	ldi	r18, 0x07	; 7
    1f8e:	a2 07       	cpc	r26, r18
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	b2 07       	cpc	r27, r18
    1f94:	20 f3       	brcs	.-56     	; 0x1f5e <UART_u8ReceiveStringSynch+0x3e>
			{
				Local_u32TimeoutCounter++;
			}
			if (Local_u32TimeoutCounter >= UART_u32_TIME_OUT_MAX_VALUE)
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	9b 81       	ldd	r25, Y+3	; 0x03
    1f9a:	ac 81       	ldd	r26, Y+4	; 0x04
    1f9c:	bd 81       	ldd	r27, Y+5	; 0x05
    1f9e:	80 32       	cpi	r24, 0x20	; 32
    1fa0:	21 ea       	ldi	r18, 0xA1	; 161
    1fa2:	92 07       	cpc	r25, r18
    1fa4:	27 e0       	ldi	r18, 0x07	; 7
    1fa6:	a2 07       	cpc	r26, r18
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	b2 07       	cpc	r27, r18
    1fac:	10 f0       	brcs	.+4      	; 0x1fb2 <UART_u8ReceiveStringSynch+0x92>
			{
				Local_u8ErrorState = STD_TYPES_NOK;
    1fae:	1e 82       	std	Y+6, r1	; 0x06
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <UART_u8ReceiveStringSynch+0xba>
				break;
			}
			Copy_puReceivedString[Local_u8StringCounter] = UART_u8_UDR_REG;
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	28 2f       	mov	r18, r24
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fba:	98 85       	ldd	r25, Y+8	; 0x08
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	a2 0f       	add	r26, r18
    1fc0:	b3 1f       	adc	r27, r19
    1fc2:	ec e2       	ldi	r30, 0x2C	; 44
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8c 93       	st	X, r24
			Local_u8StringCounter++;
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	8f 5f       	subi	r24, 0xFF	; 255
    1fce:	89 83       	std	Y+1, r24	; 0x01
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u32 Local_u32TimeoutCounter = 0;
	u8 Local_u8StringCounter = 0;
	if (Copy_puReceivedString != NULL)
	{
		while (Local_u8StringCounter < Copy_u8MessageSize)
    1fd0:	99 81       	ldd	r25, Y+1	; 0x01
    1fd2:	89 85       	ldd	r24, Y+9	; 0x09
    1fd4:	98 17       	cp	r25, r24
    1fd6:	08 f4       	brcc	.+2      	; 0x1fda <UART_u8ReceiveStringSynch+0xba>
    1fd8:	bd cf       	rjmp	.-134    	; 0x1f54 <UART_u8ReceiveStringSynch+0x34>
				break;
			}
			Copy_puReceivedString[Local_u8StringCounter] = UART_u8_UDR_REG;
			Local_u8StringCounter++;
		}
		Copy_puReceivedString[Local_u8StringCounter] = '\0'; // Null-terminate the string
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe2:	98 85       	ldd	r25, Y+8	; 0x08
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	e2 0f       	add	r30, r18
    1fe8:	f3 1f       	adc	r31, r19
    1fea:	10 82       	st	Z, r1
    1fec:	01 c0       	rjmp	.+2      	; 0x1ff0 <UART_u8ReceiveStringSynch+0xd0>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1fee:	1e 82       	std	Y+6, r1	; 0x06
	}
	return Local_u8ErrorState;
    1ff0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1ff2:	29 96       	adiw	r28, 0x09	; 9
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <UART_u8SendStringAsynch>:

u8   UART_u8SendStringAsynch(u8* Copy_pu8String, void(*Copy_pf)(void))
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <UART_u8SendStringAsynch+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <UART_u8SendStringAsynch+0x8>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	9b 83       	std	Y+3, r25	; 0x03
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	7d 83       	std	Y+5, r23	; 0x05
    2018:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_pu8String != NULL && Copy_pf != NULL)
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	00 97       	sbiw	r24, 0x00	; 0
    2024:	19 f1       	breq	.+70     	; 0x206c <UART_u8SendStringAsynch+0x68>
    2026:	8c 81       	ldd	r24, Y+4	; 0x04
    2028:	9d 81       	ldd	r25, Y+5	; 0x05
    202a:	00 97       	sbiw	r24, 0x00	; 0
    202c:	f9 f0       	breq	.+62     	; 0x206c <UART_u8SendStringAsynch+0x68>
    {
    	if(UART_u8BusyFlagTx == 0)
    202e:	80 91 68 01 	lds	r24, 0x0168
    2032:	88 23       	and	r24, r24
    2034:	c9 f4       	brne	.+50     	; 0x2068 <UART_u8SendStringAsynch+0x64>
    	{
	    	UART_u8BusyFlagTx = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	80 93 68 01 	sts	0x0168, r24
	        UART_pu8StringToSend = Copy_pu8String;
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	90 93 66 01 	sts	0x0166, r25
    2044:	80 93 65 01 	sts	0x0165, r24
	        UART_pfTXC = Copy_pf;
    2048:	8c 81       	ldd	r24, Y+4	; 0x04
    204a:	9d 81       	ldd	r25, Y+5	; 0x05
    204c:	90 93 64 01 	sts	0x0164, r25
    2050:	80 93 63 01 	sts	0x0163, r24
	        UART_u8CurrentIndex = 0;
    2054:	10 92 67 01 	sts	0x0167, r1

	        // Enable UART Data Register Empty Interrupt
	        SET_BIT(UART_u8_UCSRB_REG, UCSRB_UDRIE);
    2058:	aa e2       	ldi	r26, 0x2A	; 42
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	ea e2       	ldi	r30, 0x2A	; 42
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	80 62       	ori	r24, 0x20	; 32
    2064:	8c 93       	st	X, r24
    2066:	03 c0       	rjmp	.+6      	; 0x206e <UART_u8SendStringAsynch+0x6a>
    	}
    	else
    	{
    		Local_u8ErrorState = STD_TYPES_NOK;
    2068:	19 82       	std	Y+1, r1	; 0x01
    206a:	01 c0       	rjmp	.+2      	; 0x206e <UART_u8SendStringAsynch+0x6a>
    	}
    }
    else
    {
        Local_u8ErrorState = STD_TYPES_NOK;
    206c:	19 82       	std	Y+1, r1	; 0x01
    }
	return Local_u8ErrorState;
    206e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2070:	0f 90       	pop	r0
    2072:	0f 90       	pop	r0
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <__vector_14>:

void __vector_14(void) __attribute__((signal)); // UART Data Register Empty ISR
void __vector_14(void)
{
    2080:	1f 92       	push	r1
    2082:	0f 92       	push	r0
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	0f 92       	push	r0
    2088:	11 24       	eor	r1, r1
    208a:	2f 93       	push	r18
    208c:	3f 93       	push	r19
    208e:	4f 93       	push	r20
    2090:	5f 93       	push	r21
    2092:	6f 93       	push	r22
    2094:	7f 93       	push	r23
    2096:	8f 93       	push	r24
    2098:	9f 93       	push	r25
    209a:	af 93       	push	r26
    209c:	bf 93       	push	r27
    209e:	ef 93       	push	r30
    20a0:	ff 93       	push	r31
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	cd b7       	in	r28, 0x3d	; 61
    20a8:	de b7       	in	r29, 0x3e	; 62
    if (UART_pu8StringToSend[UART_u8CurrentIndex] != '\0')
    20aa:	20 91 65 01 	lds	r18, 0x0165
    20ae:	30 91 66 01 	lds	r19, 0x0166
    20b2:	80 91 67 01 	lds	r24, 0x0167
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	f9 01       	movw	r30, r18
    20bc:	e8 0f       	add	r30, r24
    20be:	f9 1f       	adc	r31, r25
    20c0:	80 81       	ld	r24, Z
    20c2:	88 23       	and	r24, r24
    20c4:	a9 f0       	breq	.+42     	; 0x20f0 <__vector_14+0x70>
    {
        UART_u8_UDR_REG = UART_pu8StringToSend[UART_u8CurrentIndex];
    20c6:	ac e2       	ldi	r26, 0x2C	; 44
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	20 91 65 01 	lds	r18, 0x0165
    20ce:	30 91 66 01 	lds	r19, 0x0166
    20d2:	80 91 67 01 	lds	r24, 0x0167
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	f9 01       	movw	r30, r18
    20dc:	e8 0f       	add	r30, r24
    20de:	f9 1f       	adc	r31, r25
    20e0:	80 81       	ld	r24, Z
    20e2:	8c 93       	st	X, r24
        UART_u8CurrentIndex++;
    20e4:	80 91 67 01 	lds	r24, 0x0167
    20e8:	8f 5f       	subi	r24, 0xFF	; 255
    20ea:	80 93 67 01 	sts	0x0167, r24
    20ee:	16 c0       	rjmp	.+44     	; 0x211c <__vector_14+0x9c>
    }
    else
    {
        // Disable UART Data Register Empty Interrupt
        CLR_BIT(UART_u8_UCSRB_REG, UCSRB_UDRIE);
    20f0:	aa e2       	ldi	r26, 0x2A	; 42
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	ea e2       	ldi	r30, 0x2A	; 42
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8f 7d       	andi	r24, 0xDF	; 223
    20fc:	8c 93       	st	X, r24
        
        // Call the callback function
        if (UART_pfTXC != NULL)
    20fe:	80 91 63 01 	lds	r24, 0x0163
    2102:	90 91 64 01 	lds	r25, 0x0164
    2106:	00 97       	sbiw	r24, 0x00	; 0
    2108:	29 f0       	breq	.+10     	; 0x2114 <__vector_14+0x94>
        {
            UART_pfTXC();
    210a:	e0 91 63 01 	lds	r30, 0x0163
    210e:	f0 91 64 01 	lds	r31, 0x0164
    2112:	09 95       	icall
        }
        //Clear Busy Flag
        UART_u8BusyFlagTx = 0;
    2114:	10 92 68 01 	sts	0x0168, r1
        //Clear The Global Counter
        UART_u8CurrentIndex = 0;
    2118:	10 92 67 01 	sts	0x0167, r1
    }
}
    211c:	cf 91       	pop	r28
    211e:	df 91       	pop	r29
    2120:	ff 91       	pop	r31
    2122:	ef 91       	pop	r30
    2124:	bf 91       	pop	r27
    2126:	af 91       	pop	r26
    2128:	9f 91       	pop	r25
    212a:	8f 91       	pop	r24
    212c:	7f 91       	pop	r23
    212e:	6f 91       	pop	r22
    2130:	5f 91       	pop	r21
    2132:	4f 91       	pop	r20
    2134:	3f 91       	pop	r19
    2136:	2f 91       	pop	r18
    2138:	0f 90       	pop	r0
    213a:	0f be       	out	0x3f, r0	; 63
    213c:	0f 90       	pop	r0
    213e:	1f 90       	pop	r1
    2140:	18 95       	reti

00002142 <UART_u8ReceiveStringAsynch>:

u8   UART_u8ReceiveStringAsynch(u8* Copy_pu8ReceivedString, void(*Copy_pf)(void), u8 Copy_u8MessageSize)
{
    2142:	df 93       	push	r29
    2144:	cf 93       	push	r28
    2146:	00 d0       	rcall	.+0      	; 0x2148 <UART_u8ReceiveStringAsynch+0x6>
    2148:	00 d0       	rcall	.+0      	; 0x214a <UART_u8ReceiveStringAsynch+0x8>
    214a:	00 d0       	rcall	.+0      	; 0x214c <UART_u8ReceiveStringAsynch+0xa>
    214c:	cd b7       	in	r28, 0x3d	; 61
    214e:	de b7       	in	r29, 0x3e	; 62
    2150:	9b 83       	std	Y+3, r25	; 0x03
    2152:	8a 83       	std	Y+2, r24	; 0x02
    2154:	7d 83       	std	Y+5, r23	; 0x05
    2156:	6c 83       	std	Y+4, r22	; 0x04
    2158:	4e 83       	std	Y+6, r20	; 0x06
	u8 Local_u8ErrorState = STD_TYPES_OK;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01
	//Check Pointers
	if (Copy_pu8ReceivedString != NULL && Copy_pf != NULL && Copy_u8MessageSize > 0)
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	00 97       	sbiw	r24, 0x00	; 0
    2164:	49 f1       	breq	.+82     	; 0x21b8 <UART_u8ReceiveStringAsynch+0x76>
    2166:	8c 81       	ldd	r24, Y+4	; 0x04
    2168:	9d 81       	ldd	r25, Y+5	; 0x05
    216a:	00 97       	sbiw	r24, 0x00	; 0
    216c:	29 f1       	breq	.+74     	; 0x21b8 <UART_u8ReceiveStringAsynch+0x76>
    216e:	8e 81       	ldd	r24, Y+6	; 0x06
    2170:	88 23       	and	r24, r24
    2172:	11 f1       	breq	.+68     	; 0x21b8 <UART_u8ReceiveStringAsynch+0x76>
	{
		//Check Busy Flag
		if(UART_u8BusyFlagRx == 0)
    2174:	80 91 6e 01 	lds	r24, 0x016E
    2178:	88 23       	and	r24, r24
    217a:	e1 f4       	brne	.+56     	; 0x21b4 <UART_u8ReceiveStringAsynch+0x72>
		{
			//Set Busy Flag
			UART_u8BusyFlagRx = 1;
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	80 93 6e 01 	sts	0x016E, r24
			//Update Global Variable with Receive Message
		 	UART_pu8ReceivedString = Copy_pu8ReceivedString;
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	9b 81       	ldd	r25, Y+3	; 0x03
    2186:	90 93 6a 01 	sts	0x016A, r25
    218a:	80 93 69 01 	sts	0x0169, r24
		 	//Update Global Pointer To function with Notification Function 
            UART_pfRXC = Copy_pf;
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	9d 81       	ldd	r25, Y+5	; 0x05
    2192:	90 93 6c 01 	sts	0x016C, r25
    2196:	80 93 6b 01 	sts	0x016B, r24
            //Clear Index
            UART_u8ReceiveCurrentIndex = 0;
    219a:	10 92 6d 01 	sts	0x016D, r1
            //Update Global Variable with Message Size
            UART_u8ReceiveMessageSize = Copy_u8MessageSize;
    219e:	8e 81       	ldd	r24, Y+6	; 0x06
    21a0:	80 93 6f 01 	sts	0x016F, r24

            // Enable UART RX Complete Interrupt
            SET_BIT(UART_u8_UCSRB_REG, UCSRB_RXCIE);
    21a4:	aa e2       	ldi	r26, 0x2A	; 42
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	ea e2       	ldi	r30, 0x2A	; 42
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	80 68       	ori	r24, 0x80	; 128
    21b0:	8c 93       	st	X, r24
    21b2:	03 c0       	rjmp	.+6      	; 0x21ba <UART_u8ReceiveStringAsynch+0x78>
		}
		else
    	{
    		Local_u8ErrorState = STD_TYPES_NOK;
    21b4:	19 82       	std	Y+1, r1	; 0x01
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <UART_u8ReceiveStringAsynch+0x78>
    	}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    21b8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    21ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    21bc:	26 96       	adiw	r28, 0x06	; 6
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <__vector_13>:
void __vector_13(void) __attribute__((signal)); // UART RX Complete ISR
void __vector_13(void)
{
    21ce:	1f 92       	push	r1
    21d0:	0f 92       	push	r0
    21d2:	0f b6       	in	r0, 0x3f	; 63
    21d4:	0f 92       	push	r0
    21d6:	11 24       	eor	r1, r1
    21d8:	2f 93       	push	r18
    21da:	3f 93       	push	r19
    21dc:	4f 93       	push	r20
    21de:	5f 93       	push	r21
    21e0:	6f 93       	push	r22
    21e2:	7f 93       	push	r23
    21e4:	8f 93       	push	r24
    21e6:	9f 93       	push	r25
    21e8:	af 93       	push	r26
    21ea:	bf 93       	push	r27
    21ec:	ef 93       	push	r30
    21ee:	ff 93       	push	r31
    21f0:	df 93       	push	r29
    21f2:	cf 93       	push	r28
    21f4:	cd b7       	in	r28, 0x3d	; 61
    21f6:	de b7       	in	r29, 0x3e	; 62
	if (UART_u8ReceiveCurrentIndex < UART_u8ReceiveMessageSize)
    21f8:	90 91 6d 01 	lds	r25, 0x016D
    21fc:	80 91 6f 01 	lds	r24, 0x016F
    2200:	98 17       	cp	r25, r24
    2202:	e0 f5       	brcc	.+120    	; 0x227c <__vector_13+0xae>
	{
		UART_pu8ReceivedString[UART_u8ReceiveCurrentIndex] = UART_u8_UDR_REG;
    2204:	20 91 69 01 	lds	r18, 0x0169
    2208:	30 91 6a 01 	lds	r19, 0x016A
    220c:	80 91 6d 01 	lds	r24, 0x016D
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	d9 01       	movw	r26, r18
    2216:	a8 0f       	add	r26, r24
    2218:	b9 1f       	adc	r27, r25
    221a:	ec e2       	ldi	r30, 0x2C	; 44
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	8c 93       	st	X, r24
		UART_u8ReceiveCurrentIndex++;
    2222:	80 91 6d 01 	lds	r24, 0x016D
    2226:	8f 5f       	subi	r24, 0xFF	; 255
    2228:	80 93 6d 01 	sts	0x016D, r24

		if (UART_u8ReceiveCurrentIndex >= UART_u8ReceiveMessageSize)
    222c:	90 91 6d 01 	lds	r25, 0x016D
    2230:	80 91 6f 01 	lds	r24, 0x016F
    2234:	98 17       	cp	r25, r24
    2236:	10 f1       	brcs	.+68     	; 0x227c <__vector_13+0xae>
        {
            // Disable UART RX Complete Interrupt
            CLR_BIT(UART_u8_UCSRB_REG, UCSRB_RXCIE);
    2238:	aa e2       	ldi	r26, 0x2A	; 42
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	ea e2       	ldi	r30, 0x2A	; 42
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	8f 77       	andi	r24, 0x7F	; 127
    2244:	8c 93       	st	X, r24

            // Null-terminate the received string
            UART_pu8ReceivedString[UART_u8ReceiveCurrentIndex] = '\0';
    2246:	20 91 69 01 	lds	r18, 0x0169
    224a:	30 91 6a 01 	lds	r19, 0x016A
    224e:	80 91 6d 01 	lds	r24, 0x016D
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	f9 01       	movw	r30, r18
    2258:	e8 0f       	add	r30, r24
    225a:	f9 1f       	adc	r31, r25
    225c:	10 82       	st	Z, r1

            // Call the callback function
            if (UART_pfRXC != NULL)
    225e:	80 91 6b 01 	lds	r24, 0x016B
    2262:	90 91 6c 01 	lds	r25, 0x016C
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	29 f0       	breq	.+10     	; 0x2274 <__vector_13+0xa6>
            {
                UART_pfRXC();
    226a:	e0 91 6b 01 	lds	r30, 0x016B
    226e:	f0 91 6c 01 	lds	r31, 0x016C
    2272:	09 95       	icall
            }
            // Clear Busy Flag
            UART_u8BusyFlagRx = 0;
    2274:	10 92 6e 01 	sts	0x016E, r1

            // Clear The Global Counter
            UART_u8ReceiveCurrentIndex = 0;
    2278:	10 92 6d 01 	sts	0x016D, r1
        }
	}
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	ff 91       	pop	r31
    2282:	ef 91       	pop	r30
    2284:	bf 91       	pop	r27
    2286:	af 91       	pop	r26
    2288:	9f 91       	pop	r25
    228a:	8f 91       	pop	r24
    228c:	7f 91       	pop	r23
    228e:	6f 91       	pop	r22
    2290:	5f 91       	pop	r21
    2292:	4f 91       	pop	r20
    2294:	3f 91       	pop	r19
    2296:	2f 91       	pop	r18
    2298:	0f 90       	pop	r0
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	0f 90       	pop	r0
    229e:	1f 90       	pop	r1
    22a0:	18 95       	reti

000022a2 <main>:
#include "UART_interface.h"

#include "MQTT.h"

int main(void)
{
    22a2:	0f 93       	push	r16
    22a4:	1f 93       	push	r17
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	ac 97       	sbiw	r28, 0x2c	; 44
    22b0:	0f b6       	in	r0, 0x3f	; 63
    22b2:	f8 94       	cli
    22b4:	de bf       	out	0x3e, r29	; 62
    22b6:	0f be       	out	0x3f, r0	; 63
    22b8:	cd bf       	out	0x3d, r28	; 61
	u8 * Local_u8str = "Hello From AVR";
    22ba:	85 e6       	ldi	r24, 0x65	; 101
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	9c a7       	std	Y+44, r25	; 0x2c
    22c0:	8b a7       	std	Y+43, r24	; 0x2b
	DIO_voidInit();
    22c2:	0e 94 a3 05 	call	0xb46	; 0xb46 <DIO_voidInit>
	UART_voidInit();
    22c6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <UART_voidInit>
	MQTT_Connect((u8*)"Bahnasy",(u8*)"GP_28",(u8*)"bahnasy",(u8*)"test",(u8*)"Bahnasy");
    22ca:	84 e7       	ldi	r24, 0x74	; 116
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	2c e7       	ldi	r18, 0x7C	; 124
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	42 e8       	ldi	r20, 0x82	; 130
    22d4:	50 e0       	ldi	r21, 0x00	; 0
    22d6:	ea e8       	ldi	r30, 0x8A	; 138
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	a4 e7       	ldi	r26, 0x74	; 116
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	b9 01       	movw	r22, r18
    22e0:	9f 01       	movw	r18, r30
    22e2:	8d 01       	movw	r16, r26
    22e4:	0e 94 1a 0a 	call	0x1434	; 0x1434 <MQTT_Connect>
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	aa e7       	ldi	r26, 0x7A	; 122
    22ee:	b4 e4       	ldi	r27, 0x44	; 68
    22f0:	8f a3       	std	Y+39, r24	; 0x27
    22f2:	98 a7       	std	Y+40, r25	; 0x28
    22f4:	a9 a7       	std	Y+41, r26	; 0x29
    22f6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6f a1       	ldd	r22, Y+39	; 0x27
    22fa:	78 a5       	ldd	r23, Y+40	; 0x28
    22fc:	89 a5       	ldd	r24, Y+41	; 0x29
    22fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a ef       	ldi	r20, 0xFA	; 250
    2306:	54 e4       	ldi	r21, 0x44	; 68
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8b a3       	std	Y+35, r24	; 0x23
    2312:	9c a3       	std	Y+36, r25	; 0x24
    2314:	ad a3       	std	Y+37, r26	; 0x25
    2316:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2318:	6b a1       	ldd	r22, Y+35	; 0x23
    231a:	7c a1       	ldd	r23, Y+36	; 0x24
    231c:	8d a1       	ldd	r24, Y+37	; 0x25
    231e:	9e a1       	ldd	r25, Y+38	; 0x26
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <main+0x98>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9a a3       	std	Y+34, r25	; 0x22
    2336:	89 a3       	std	Y+33, r24	; 0x21
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <main+0x116>
	else if (__tmp > 65535)
    233a:	6b a1       	ldd	r22, Y+35	; 0x23
    233c:	7c a1       	ldd	r23, Y+36	; 0x24
    233e:	8d a1       	ldd	r24, Y+37	; 0x25
    2340:	9e a1       	ldd	r25, Y+38	; 0x26
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <main+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6f a1       	ldd	r22, Y+39	; 0x27
    2354:	78 a5       	ldd	r23, Y+40	; 0x28
    2356:	89 a5       	ldd	r24, Y+41	; 0x29
    2358:	9a a5       	ldd	r25, Y+42	; 0x2a
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9a a3       	std	Y+34, r25	; 0x22
    2378:	89 a3       	std	Y+33, r24	; 0x21
    237a:	0f c0       	rjmp	.+30     	; 0x239a <main+0xf8>
    237c:	88 ec       	ldi	r24, 0xC8	; 200
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	98 a3       	std	Y+32, r25	; 0x20
    2382:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2384:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2386:	98 a1       	ldd	r25, Y+32	; 0x20
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <main+0xe6>
    238c:	98 a3       	std	Y+32, r25	; 0x20
    238e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	89 a1       	ldd	r24, Y+33	; 0x21
    2392:	9a a1       	ldd	r25, Y+34	; 0x22
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9a a3       	std	Y+34, r25	; 0x22
    2398:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	89 a1       	ldd	r24, Y+33	; 0x21
    239c:	9a a1       	ldd	r25, Y+34	; 0x22
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <main+0xda>
    23a2:	14 c0       	rjmp	.+40     	; 0x23cc <main+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6b a1       	ldd	r22, Y+35	; 0x23
    23a6:	7c a1       	ldd	r23, Y+36	; 0x24
    23a8:	8d a1       	ldd	r24, Y+37	; 0x25
    23aa:	9e a1       	ldd	r25, Y+38	; 0x26
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9a a3       	std	Y+34, r25	; 0x22
    23b6:	89 a3       	std	Y+33, r24	; 0x21
    23b8:	89 a1       	ldd	r24, Y+33	; 0x21
    23ba:	9a a1       	ldd	r25, Y+34	; 0x22
    23bc:	9e 8f       	std	Y+30, r25	; 0x1e
    23be:	8d 8f       	std	Y+29, r24	; 0x1d
    23c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <main+0x122>
    23c8:	9e 8f       	std	Y+30, r25	; 0x1e
    23ca:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
//	MQTT_Publish((u8*)"Bahnasy","I Love Zamalek",14,1);
	MQTT_Subscribe((u8*)"test");
    23cc:	8a e8       	ldi	r24, 0x8A	; 138
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <MQTT_Subscribe>
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	aa e7       	ldi	r26, 0x7A	; 122
    23da:	b4 e4       	ldi	r27, 0x44	; 68
    23dc:	89 8f       	std	Y+25, r24	; 0x19
    23de:	9a 8f       	std	Y+26, r25	; 0x1a
    23e0:	ab 8f       	std	Y+27, r26	; 0x1b
    23e2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23e4:	69 8d       	ldd	r22, Y+25	; 0x19
    23e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	4a ef       	ldi	r20, 0xFA	; 250
    23f2:	54 e4       	ldi	r21, 0x44	; 68
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	8d 8b       	std	Y+21, r24	; 0x15
    23fe:	9e 8b       	std	Y+22, r25	; 0x16
    2400:	af 8b       	std	Y+23, r26	; 0x17
    2402:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2404:	6d 89       	ldd	r22, Y+21	; 0x15
    2406:	7e 89       	ldd	r23, Y+22	; 0x16
    2408:	8f 89       	ldd	r24, Y+23	; 0x17
    240a:	98 8d       	ldd	r25, Y+24	; 0x18
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e8       	ldi	r20, 0x80	; 128
    2412:	5f e3       	ldi	r21, 0x3F	; 63
    2414:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2418:	88 23       	and	r24, r24
    241a:	2c f4       	brge	.+10     	; 0x2426 <main+0x184>
		__ticks = 1;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9c 8b       	std	Y+20, r25	; 0x14
    2422:	8b 8b       	std	Y+19, r24	; 0x13
    2424:	3f c0       	rjmp	.+126    	; 0x24a4 <main+0x202>
	else if (__tmp > 65535)
    2426:	6d 89       	ldd	r22, Y+21	; 0x15
    2428:	7e 89       	ldd	r23, Y+22	; 0x16
    242a:	8f 89       	ldd	r24, Y+23	; 0x17
    242c:	98 8d       	ldd	r25, Y+24	; 0x18
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	3f ef       	ldi	r19, 0xFF	; 255
    2432:	4f e7       	ldi	r20, 0x7F	; 127
    2434:	57 e4       	ldi	r21, 0x47	; 71
    2436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    243a:	18 16       	cp	r1, r24
    243c:	4c f5       	brge	.+82     	; 0x2490 <main+0x1ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    243e:	69 8d       	ldd	r22, Y+25	; 0x19
    2440:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2442:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2444:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	40 e2       	ldi	r20, 0x20	; 32
    244c:	51 e4       	ldi	r21, 0x41	; 65
    244e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	9c 8b       	std	Y+20, r25	; 0x14
    2464:	8b 8b       	std	Y+19, r24	; 0x13
    2466:	0f c0       	rjmp	.+30     	; 0x2486 <main+0x1e4>
    2468:	88 ec       	ldi	r24, 0xC8	; 200
    246a:	90 e0       	ldi	r25, 0x00	; 0
    246c:	9a 8b       	std	Y+18, r25	; 0x12
    246e:	89 8b       	std	Y+17, r24	; 0x11
    2470:	89 89       	ldd	r24, Y+17	; 0x11
    2472:	9a 89       	ldd	r25, Y+18	; 0x12
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	f1 f7       	brne	.-4      	; 0x2474 <main+0x1d2>
    2478:	9a 8b       	std	Y+18, r25	; 0x12
    247a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247c:	8b 89       	ldd	r24, Y+19	; 0x13
    247e:	9c 89       	ldd	r25, Y+20	; 0x14
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	9c 8b       	std	Y+20, r25	; 0x14
    2484:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2486:	8b 89       	ldd	r24, Y+19	; 0x13
    2488:	9c 89       	ldd	r25, Y+20	; 0x14
    248a:	00 97       	sbiw	r24, 0x00	; 0
    248c:	69 f7       	brne	.-38     	; 0x2468 <main+0x1c6>
    248e:	14 c0       	rjmp	.+40     	; 0x24b8 <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2490:	6d 89       	ldd	r22, Y+21	; 0x15
    2492:	7e 89       	ldd	r23, Y+22	; 0x16
    2494:	8f 89       	ldd	r24, Y+23	; 0x17
    2496:	98 8d       	ldd	r25, Y+24	; 0x18
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	9c 8b       	std	Y+20, r25	; 0x14
    24a2:	8b 8b       	std	Y+19, r24	; 0x13
    24a4:	8b 89       	ldd	r24, Y+19	; 0x13
    24a6:	9c 89       	ldd	r25, Y+20	; 0x14
    24a8:	98 8b       	std	Y+16, r25	; 0x10
    24aa:	8f 87       	std	Y+15, r24	; 0x0f
    24ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    24ae:	98 89       	ldd	r25, Y+16	; 0x10
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	f1 f7       	brne	.-4      	; 0x24b0 <main+0x20e>
    24b4:	98 8b       	std	Y+16, r25	; 0x10
    24b6:	8f 87       	std	Y+15, r24	; 0x0f
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	90 e4       	ldi	r25, 0x40	; 64
    24bc:	ac e1       	ldi	r26, 0x1C	; 28
    24be:	b6 e4       	ldi	r27, 0x46	; 70
    24c0:	8b 87       	std	Y+11, r24	; 0x0b
    24c2:	9c 87       	std	Y+12, r25	; 0x0c
    24c4:	ad 87       	std	Y+13, r26	; 0x0d
    24c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    24cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	4a ef       	ldi	r20, 0xFA	; 250
    24d6:	54 e4       	ldi	r21, 0x44	; 68
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	8f 83       	std	Y+7, r24	; 0x07
    24e2:	98 87       	std	Y+8, r25	; 0x08
    24e4:	a9 87       	std	Y+9, r26	; 0x09
    24e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e8:	6f 81       	ldd	r22, Y+7	; 0x07
    24ea:	78 85       	ldd	r23, Y+8	; 0x08
    24ec:	89 85       	ldd	r24, Y+9	; 0x09
    24ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e8       	ldi	r20, 0x80	; 128
    24f6:	5f e3       	ldi	r21, 0x3F	; 63
    24f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24fc:	88 23       	and	r24, r24
    24fe:	2c f4       	brge	.+10     	; 0x250a <main+0x268>
		__ticks = 1;
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	9e 83       	std	Y+6, r25	; 0x06
    2506:	8d 83       	std	Y+5, r24	; 0x05
    2508:	3f c0       	rjmp	.+126    	; 0x2588 <main+0x2e6>
	else if (__tmp > 65535)
    250a:	6f 81       	ldd	r22, Y+7	; 0x07
    250c:	78 85       	ldd	r23, Y+8	; 0x08
    250e:	89 85       	ldd	r24, Y+9	; 0x09
    2510:	9a 85       	ldd	r25, Y+10	; 0x0a
    2512:	20 e0       	ldi	r18, 0x00	; 0
    2514:	3f ef       	ldi	r19, 0xFF	; 255
    2516:	4f e7       	ldi	r20, 0x7F	; 127
    2518:	57 e4       	ldi	r21, 0x47	; 71
    251a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    251e:	18 16       	cp	r1, r24
    2520:	4c f5       	brge	.+82     	; 0x2574 <main+0x2d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2522:	6b 85       	ldd	r22, Y+11	; 0x0b
    2524:	7c 85       	ldd	r23, Y+12	; 0x0c
    2526:	8d 85       	ldd	r24, Y+13	; 0x0d
    2528:	9e 85       	ldd	r25, Y+14	; 0x0e
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e2       	ldi	r20, 0x20	; 32
    2530:	51 e4       	ldi	r21, 0x41	; 65
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	bc 01       	movw	r22, r24
    253c:	cd 01       	movw	r24, r26
    253e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	9e 83       	std	Y+6, r25	; 0x06
    2548:	8d 83       	std	Y+5, r24	; 0x05
    254a:	0f c0       	rjmp	.+30     	; 0x256a <main+0x2c8>
    254c:	88 ec       	ldi	r24, 0xC8	; 200
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9c 83       	std	Y+4, r25	; 0x04
    2552:	8b 83       	std	Y+3, r24	; 0x03
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	9c 81       	ldd	r25, Y+4	; 0x04
    2558:	01 97       	sbiw	r24, 0x01	; 1
    255a:	f1 f7       	brne	.-4      	; 0x2558 <main+0x2b6>
    255c:	9c 83       	std	Y+4, r25	; 0x04
    255e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	9e 83       	std	Y+6, r25	; 0x06
    2568:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	00 97       	sbiw	r24, 0x00	; 0
    2570:	69 f7       	brne	.-38     	; 0x254c <main+0x2aa>
    2572:	a2 cf       	rjmp	.-188    	; 0x24b8 <main+0x216>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2574:	6f 81       	ldd	r22, Y+7	; 0x07
    2576:	78 85       	ldd	r23, Y+8	; 0x08
    2578:	89 85       	ldd	r24, Y+9	; 0x09
    257a:	9a 85       	ldd	r25, Y+10	; 0x0a
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9e 83       	std	Y+6, r25	; 0x06
    2586:	8d 83       	std	Y+5, r24	; 0x05
    2588:	8d 81       	ldd	r24, Y+5	; 0x05
    258a:	9e 81       	ldd	r25, Y+6	; 0x06
    258c:	9a 83       	std	Y+2, r25	; 0x02
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	9a 81       	ldd	r25, Y+2	; 0x02
    2594:	01 97       	sbiw	r24, 0x01	; 1
    2596:	f1 f7       	brne	.-4      	; 0x2594 <main+0x2f2>
    2598:	9a 83       	std	Y+2, r25	; 0x02
    259a:	89 83       	std	Y+1, r24	; 0x01
    259c:	8d cf       	rjmp	.-230    	; 0x24b8 <main+0x216>

0000259e <__prologue_saves__>:
    259e:	2f 92       	push	r2
    25a0:	3f 92       	push	r3
    25a2:	4f 92       	push	r4
    25a4:	5f 92       	push	r5
    25a6:	6f 92       	push	r6
    25a8:	7f 92       	push	r7
    25aa:	8f 92       	push	r8
    25ac:	9f 92       	push	r9
    25ae:	af 92       	push	r10
    25b0:	bf 92       	push	r11
    25b2:	cf 92       	push	r12
    25b4:	df 92       	push	r13
    25b6:	ef 92       	push	r14
    25b8:	ff 92       	push	r15
    25ba:	0f 93       	push	r16
    25bc:	1f 93       	push	r17
    25be:	cf 93       	push	r28
    25c0:	df 93       	push	r29
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	ca 1b       	sub	r28, r26
    25c8:	db 0b       	sbc	r29, r27
    25ca:	0f b6       	in	r0, 0x3f	; 63
    25cc:	f8 94       	cli
    25ce:	de bf       	out	0x3e, r29	; 62
    25d0:	0f be       	out	0x3f, r0	; 63
    25d2:	cd bf       	out	0x3d, r28	; 61
    25d4:	09 94       	ijmp

000025d6 <__epilogue_restores__>:
    25d6:	2a 88       	ldd	r2, Y+18	; 0x12
    25d8:	39 88       	ldd	r3, Y+17	; 0x11
    25da:	48 88       	ldd	r4, Y+16	; 0x10
    25dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    25de:	6e 84       	ldd	r6, Y+14	; 0x0e
    25e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    25e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    25e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    25e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    25e8:	b9 84       	ldd	r11, Y+9	; 0x09
    25ea:	c8 84       	ldd	r12, Y+8	; 0x08
    25ec:	df 80       	ldd	r13, Y+7	; 0x07
    25ee:	ee 80       	ldd	r14, Y+6	; 0x06
    25f0:	fd 80       	ldd	r15, Y+5	; 0x05
    25f2:	0c 81       	ldd	r16, Y+4	; 0x04
    25f4:	1b 81       	ldd	r17, Y+3	; 0x03
    25f6:	aa 81       	ldd	r26, Y+2	; 0x02
    25f8:	b9 81       	ldd	r27, Y+1	; 0x01
    25fa:	ce 0f       	add	r28, r30
    25fc:	d1 1d       	adc	r29, r1
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	ed 01       	movw	r28, r26
    260a:	08 95       	ret

0000260c <memcpy>:
    260c:	fb 01       	movw	r30, r22
    260e:	dc 01       	movw	r26, r24
    2610:	02 c0       	rjmp	.+4      	; 0x2616 <memcpy+0xa>
    2612:	01 90       	ld	r0, Z+
    2614:	0d 92       	st	X+, r0
    2616:	41 50       	subi	r20, 0x01	; 1
    2618:	50 40       	sbci	r21, 0x00	; 0
    261a:	d8 f7       	brcc	.-10     	; 0x2612 <memcpy+0x6>
    261c:	08 95       	ret

0000261e <strlen>:
    261e:	fc 01       	movw	r30, r24
    2620:	01 90       	ld	r0, Z+
    2622:	00 20       	and	r0, r0
    2624:	e9 f7       	brne	.-6      	; 0x2620 <strlen+0x2>
    2626:	80 95       	com	r24
    2628:	90 95       	com	r25
    262a:	8e 0f       	add	r24, r30
    262c:	9f 1f       	adc	r25, r31
    262e:	08 95       	ret

00002630 <_exit>:
    2630:	f8 94       	cli

00002632 <__stop_program>:
    2632:	ff cf       	rjmp	.-2      	; 0x2632 <__stop_program>
